(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,,,function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a=Object.prototype,s=a.toString,o=a.hasOwnProperty,u=function(){function e(){}return e.prototype.assert=function(e,t){if(!this.check(e,t)){var n=y(e);throw new Error(n+" does not match type "+this)}return!0},e.prototype.arrayOf=function(){return new l(this)},e}(),l=function(e){function t(t){var n=e.call(this)||this;return n.elemType=t,n.kind="ArrayType",n}return i(t,e),t.prototype.toString=function(){return"["+this.elemType+"]"},t.prototype.check=function(e,t){var n=this;return Array.isArray(e)&&e.every((function(e){return n.elemType.check(e,t)}))},t}(u),c=function(e){function t(t){var n=e.call(this)||this;return n.value=t,n.kind="IdentityType",n}return i(t,e),t.prototype.toString=function(){return String(this.value)},t.prototype.check=function(e,t){var n=e===this.value;return n||"function"!=typeof t||t(this,e),n},t}(u),h=function(e){function t(t){var n=e.call(this)||this;return n.fields=t,n.kind="ObjectType",n}return i(t,e),t.prototype.toString=function(){return"{ "+this.fields.join(", ")+" }"},t.prototype.check=function(e,t){return s.call(e)===s.call({})&&this.fields.every((function(n){return n.type.check(e[n.name],t)}))},t}(u),p=function(e){function t(t){var n=e.call(this)||this;return n.types=t,n.kind="OrType",n}return i(t,e),t.prototype.toString=function(){return this.types.join(" | ")},t.prototype.check=function(e,t){return this.types.some((function(n){return n.check(e,t)}))},t}(u),f=function(e){function t(t,n){var r=e.call(this)||this;return r.name=t,r.predicate=n,r.kind="PredicateType",r}return i(t,e),t.prototype.toString=function(){return this.name},t.prototype.check=function(e,t){var n=this.predicate(e,t);return n||"function"!=typeof t||t(this,e),n},t}(u),d=function(){function e(e,t){this.type=e,this.typeName=t,this.baseNames=[],this.ownFields=Object.create(null),this.allSupertypes=Object.create(null),this.supertypeList=[],this.allFields=Object.create(null),this.fieldNames=[],this.finalized=!1,this.buildable=!1,this.buildParams=[]}return e.prototype.isSupertypeOf=function(t){if(t instanceof e){if(!0!==this.finalized||!0!==t.finalized)throw new Error("");return o.call(t.allSupertypes,this.typeName)}throw new Error(t+" is not a Def")},e.prototype.checkAllFields=function(e,t){var n=this.allFields;if(!0!==this.finalized)throw new Error(""+this.typeName);return null!==e&&"object"==typeof e&&Object.keys(n).every((function(r){var i=n[r],a=i.type,s=i.getValue(e);return a.check(s,t)}))},e.prototype.bases=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.baseNames;if(this.finalized){if(e.length!==n.length)throw new Error("");for(var r=0;r<e.length;r++)if(e[r]!==n[r])throw new Error("");return this}return e.forEach((function(e){n.indexOf(e)<0&&n.push(e)})),this},e}();t.Def=d;var m=function(){function e(e,t,n,r){this.name=e,this.type=t,this.defaultFn=n,this.hidden=!!r}return e.prototype.toString=function(){return JSON.stringify(this.name)+": "+this.type},e.prototype.getValue=function(e){var t=e[this.name];return void 0!==t?t:("function"==typeof this.defaultFn&&(t=this.defaultFn.call(e)),t)},e}();function y(e){return Array.isArray(e)?"["+e.map(y).join(", ")+"]":e&&"object"==typeof e?"{ "+Object.keys(e).map((function(t){return t+": "+e[t]})).join(", ")+" }":JSON.stringify(e)}t.default=function(e){var t={or:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new p(e.map((function(e){return t.from(e)})))},from:function(e,i){if(e instanceof l||e instanceof c||e instanceof h||e instanceof p||e instanceof f)return e;if(e instanceof d)return e.type;if(v.check(e)){if(1!==e.length)throw new Error("only one element type is permitted for typed arrays");return new l(t.from(e[0]))}if(x.check(e))return new h(Object.keys(e).map((function(n){return new m(n,t.from(e[n],n))})));if("function"==typeof e){var a=n.indexOf(e);if(a>=0)return r[a];if("string"!=typeof i)throw new Error("missing name");return new f(i,e)}return new c(e)},def:function(e){return o.call(S,e)?S[e]:S[e]=new D(e)},hasDef:function(e){return o.call(S,e)}},n=[],r=[],a={};function u(e,t){var i=s.call(e),o=new f(t,(function(e){return s.call(e)===i}));return a[t]=o,e&&"function"==typeof e.constructor&&(n.push(e.constructor),r.push(o)),o}u("truthy","string");var g=u((function(){}),"function"),v=u([],"array"),x=u({},"object"),b=(u(/./,"RegExp"),u(new Date,"Date"),u(3,"number"),u(!0,"boolean"),u(null,"null"),u(void 0,"undefined")),S=Object.create(null);function E(e){if(e&&"object"==typeof e){var t=e.type;if("string"==typeof t&&o.call(S,t)){var n=S[t];if(n.finalized)return n}}return null}var D=function(e){function n(t){var n=e.call(this,new f(t,(function(e,t){return n.check(e,t)})),t)||this;return n}return i(n,e),n.prototype.check=function(e,t){if(!0!==this.finalized)throw new Error("prematurely checking unfinalized type "+this.typeName);if(null===e||"object"!=typeof e)return!1;var n=E(e);return n?t&&n===this?this.checkAllFields(e,t):!!this.isSupertypeOf(n)&&(!t||n.checkAllFields(e,t)&&this.checkAllFields(e,!1)):("SourceLocation"===this.typeName||"Position"===this.typeName)&&this.checkAllFields(e,t)},n.prototype.build=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(this.buildParams=t,this.buildable)return this;this.field("type",String,(function(){return e.typeName})),this.buildable=!0;var r=function(t,n,r,i){if(!o.call(t,n)){var a=e.allFields;if(!o.call(a,n))throw new Error(""+n);var s,u=a[n],l=u.type;if(i)s=r;else{if(!u.defaultFn){var c="no value or default function given for field "+JSON.stringify(n)+" of "+e.typeName+"("+e.buildParams.map((function(e){return a[e]})).join(", ")+")";throw new Error(c)}s=u.defaultFn.call(t)}if(!l.check(s))throw new Error(y(s)+" does not match field "+u+" of type "+e.typeName);t[n]=s}},i=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var i=t.length;if(!e.finalized)throw new Error("attempting to instantiate unfinalized type "+e.typeName);var a=Object.create(A);if(e.buildParams.forEach((function(e,n){n<i?r(a,e,t[n],!0):r(a,e,null,!1)})),Object.keys(e.allFields).forEach((function(e){r(a,e,null,!1)})),a.type!==e.typeName)throw new Error("");return a};return i.from=function(t){if(!e.finalized)throw new Error("attempting to instantiate unfinalized type "+e.typeName);var n=Object.create(A);if(Object.keys(e.allFields).forEach((function(e){o.call(t,e)?r(n,e,t[e],!0):r(n,e,null,!1)})),n.type!==e.typeName)throw new Error("");return n},Object.defineProperty(w,C(this.typeName),{enumerable:!0,value:i}),this},n.prototype.field=function(e,n,r,i){return this.finalized?(console.error("Ignoring attempt to redefine field "+JSON.stringify(e)+" of finalized type "+JSON.stringify(this.typeName)),this):(this.ownFields[e]=new m(e,t.from(n),r,i),this)},n.prototype.finalize=function(){var e=this;if(!this.finalized){var t=this.allFields,n=this.allSupertypes;for(var r in this.baseNames.forEach((function(r){var i=S[r];if(!(i instanceof d)){var a="unknown supertype name "+JSON.stringify(r)+" for subtype "+JSON.stringify(e.typeName);throw new Error(a)}i.finalize(),M(t,i.allFields),M(n,i.allSupertypes)})),M(t,this.ownFields),n[this.typeName]=this,this.fieldNames.length=0,t)o.call(t,r)&&!t[r].hidden&&this.fieldNames.push(r);Object.defineProperty(k,this.typeName,{enumerable:!0,value:this.type}),this.finalized=!0,function(e,t){t.length=0,t.push(e);for(var n=Object.create(null),r=0;r<t.length;++r){e=t[r];var i=S[e];if(!0!==i.finalized)throw new Error("");o.call(n,e)&&delete t[n[e]],n[e]=r,t.push.apply(t,i.baseNames)}for(var a=0,s=a,u=t.length;s<u;++s)o.call(t,s)&&(t[a++]=t[s]);t.length=a}(this.typeName,this.supertypeList),this.buildable&&this.supertypeList.lastIndexOf("Expression")>=0&&function(e){var t=T(e);if(w[t])return;var n=w[C(e)];if(!n)return;var r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return w.expressionStatement(n.apply(w,e))};r.from=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return w.expressionStatement(n.from.apply(w,e))},w[t]=r}(this.typeName)}},n}(d),w=Object.create(null),A={};function C(e){return e.replace(/^[A-Z]+/,(function(e){var t=e.length;switch(t){case 0:return"";case 1:return e.toLowerCase();default:return e.slice(0,t-1).toLowerCase()+e.charAt(t-1)}}))}function T(e){return(e=C(e)).replace(/(Expression)?$/,"Statement")}var k={};function F(e){var t=E(e);if(t)return t.fieldNames.slice(0);if("type"in e)throw new Error("did not recognize object of type "+JSON.stringify(e.type));return Object.keys(e)}function P(e,t){var n=E(e);if(n){var r=n.allFields[t];if(r)return r.getValue(e)}return e&&e[t]}function M(e,t){return Object.keys(t).forEach((function(n){e[n]=t[n]})),e}return{Type:t,builtInTypes:a,getSupertypeNames:function(e){if(!o.call(S,e))throw new Error("");var t=S[e];if(!0!==t.finalized)throw new Error("");return t.supertypeList.slice(1)},computeSupertypeLookupTable:function(e){for(var t={},n=Object.keys(S),r=n.length,i=0;i<r;++i){var a=n[i],s=S[a];if(!0!==s.finalized)throw new Error(""+a);for(var u=0;u<s.supertypeList.length;++u){var l=s.supertypeList[u];if(o.call(e,l)){t[a]=l;break}}}return t},builders:w,defineMethod:function(e,t){var n=A[e];return b.check(t)?delete A[e]:(g.assert(t),Object.defineProperty(A,e,{enumerable:!0,configurable:!0,value:t})),n},getBuilderName:C,getStatementBuilderName:T,namedTypes:k,getFieldNames:F,getFieldValue:P,eachField:function(e,t,n){F(e).forEach((function(n){t.call(this,n,P(e,n))}),n)},someField:function(e,t,n){return F(e).some((function(n){return t.call(this,n,P(e,n))}),n)},finalize:function(){Object.keys(S).forEach((function(e){S[e].finalize()}))}}}},,,,,,,,,,,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3));t.default=function(e){var t=e.use(i.default),n=t.Type,r=t.builtInTypes,a=r.number,s=n.or(r.string,r.number,r.boolean,r.null,r.undefined);return{geq:function(e){return n.from((function(t){return a.check(t)&&t>=e}),a+" >= "+e)},defaults:{null:function(){return null},emptyArray:function(){return[]},false:function(){return!1},true:function(){return!0},undefined:function(){},"use strict":function(){return"use strict"}},isPrimitive:n.from((function(e){if(null===e)return!0;var t=typeof e;return"object"!==t&&"function"!==t}),s.toString())}},e.exports=t.default},,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(112)),a=r(n(37)),s=r(n(60)),o=r(n(20)),u=r(n(116)),l=r(n(61)),c=r(n(117)),h=r(n(118)),p=r(n(119)),f=r(n(120)),d=n(121);t.namedTypes=d.namedTypes;var m=i.default([a.default,s.default,o.default,u.default,l.default,c.default,h.default,p.default,f.default]),y=m.astNodesAreEquivalent,g=m.builders,v=m.builtInTypes,x=m.defineMethod,b=m.eachField,S=m.finalize,E=m.getBuilderName,D=m.getFieldNames,w=m.getFieldValue,A=m.getSupertypeNames,C=m.namedTypes,T=m.NodePath,k=m.Path,F=m.PathVisitor,P=m.someField,M=m.Type,N=m.use,B=m.visit;t.astNodesAreEquivalent=y,t.builders=g,t.builtInTypes=v,t.defineMethod=x,t.eachField=b,t.finalize=S,t.getBuilderName=E,t.getFieldNames=D,t.getFieldValue=w,t.getSupertypeNames=A,t.NodePath=T,t.Path=k,t.PathVisitor=F,t.someField=P,t.Type=M,t.use=N,t.visit=B,Object.assign(d.namedTypes,C)},function(e,t,n){"use strict";(function(t){var r=n(123);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(e,t){if(e===t)return 0;for(var n=e.length,r=t.length,i=0,a=Math.min(n,r);i<a;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0}function a(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var s=n(124),o=Object.prototype.hasOwnProperty,u=Array.prototype.slice,l="foo"===function(){}.name;function c(e){return Object.prototype.toString.call(e)}function h(e){return!a(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var p=e.exports=v,f=/\s*function\s+([^\(\s]*)\s*/;function d(e){if(s.isFunction(e)){if(l)return e.name;var t=e.toString().match(f);return t&&t[1]}}function m(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function y(e){if(l||!s.isFunction(e))return s.inspect(e);var t=d(e);return"[Function"+(t?": "+t:"")+"]"}function g(e,t,n,r,i){throw new p.AssertionError({message:n,actual:e,expected:t,operator:r,stackStartFunction:i})}function v(e,t){e||g(e,!0,t,"==",p.ok)}function x(e,t,n,r){if(e===t)return!0;if(a(e)&&a(t))return 0===i(e,t);if(s.isDate(e)&&s.isDate(t))return e.getTime()===t.getTime();if(s.isRegExp(e)&&s.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(h(e)&&h(t)&&c(e)===c(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(a(e)!==a(t))return!1;var o=(r=r||{actual:[],expected:[]}).actual.indexOf(e);return-1!==o&&o===r.expected.indexOf(t)||(r.actual.push(e),r.expected.push(t),function(e,t,n,r){if(null==e||null==t)return!1;if(s.isPrimitive(e)||s.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=b(e),a=b(t);if(i&&!a||!i&&a)return!1;if(i)return e=u.call(e),t=u.call(t),x(e,t,n);var o,l,c=D(e),h=D(t);if(c.length!==h.length)return!1;for(c.sort(),h.sort(),l=c.length-1;l>=0;l--)if(c[l]!==h[l])return!1;for(l=c.length-1;l>=0;l--)if(o=c[l],!x(e[o],t[o],n,r))return!1;return!0}(e,t,n,r))}return n?e===t:e==t}function b(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function S(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function E(e,t,n,r){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),e&&!i&&g(i,n,"Missing expected exception"+r);var a="string"==typeof r,o=!e&&i&&!n;if((!e&&s.isError(i)&&a&&S(i,n)||o)&&g(i,n,"Got unwanted exception"+r),e&&i&&n&&!S(i,n)||!e&&i)throw i}p.AssertionError=function(e){var t;this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=m(y((t=this).actual),128)+" "+t.operator+" "+m(y(t.expected),128),this.generatedMessage=!0);var n=e.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,n);else{var r=new Error;if(r.stack){var i=r.stack,a=d(n),s=i.indexOf("\n"+a);if(s>=0){var o=i.indexOf("\n",s+1);i=i.substring(o+1)}this.stack=i}}},s.inherits(p.AssertionError,Error),p.fail=g,p.ok=v,p.equal=function(e,t,n){e!=t&&g(e,t,n,"==",p.equal)},p.notEqual=function(e,t,n){e==t&&g(e,t,n,"!=",p.notEqual)},p.deepEqual=function(e,t,n){x(e,t,!1)||g(e,t,n,"deepEqual",p.deepEqual)},p.deepStrictEqual=function(e,t,n){x(e,t,!0)||g(e,t,n,"deepStrictEqual",p.deepStrictEqual)},p.notDeepEqual=function(e,t,n){x(e,t,!1)&&g(e,t,n,"notDeepEqual",p.notDeepEqual)},p.notDeepStrictEqual=function e(t,n,r){x(t,n,!0)&&g(t,n,r,"notDeepStrictEqual",e)},p.strictEqual=function(e,t,n){e!==t&&g(e,t,n,"===",p.strictEqual)},p.notStrictEqual=function(e,t,n){e===t&&g(e,t,n,"!==",p.notStrictEqual)},p.throws=function(e,t,n){E(!0,e,t,n)},p.doesNotThrow=function(e,t,n){E(!1,e,t,n)},p.ifError=function(e){if(e)throw e},p.strict=r((function e(t,n){t||g(t,!0,n,"==",e)}),p,{equal:p.strictEqual,deepEqual:p.deepStrictEqual,notEqual:p.notStrictEqual,notDeepEqual:p.notDeepStrictEqual}),p.strict.strict=p.strict;var D=Object.keys||function(e){var t=[];for(var n in e)o.call(e,n)&&t.push(n);return t}}).call(this,n(47))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(17)),s=i(n(16)).namedTypes,o=r(n(64)),u=o.default.SourceMapConsumer,l=o.default.SourceMapGenerator,c=Object.prototype.hasOwnProperty;function h(e,t){return e.line-t.line||e.column-t.column}function p(e){return{line:e.line,column:e.column}}function f(e,t){e&&t&&(h(t.start,e.start)<0&&(e.start=t.start),h(e.end,t.end)<0&&(e.end=t.end))}function d(e){if(e)switch(e.type){case"ExportDeclaration":case"ExportDefaultDeclaration":case"ExportDefaultSpecifier":case"DeclareExportDeclaration":case"ExportNamedDeclaration":case"ExportAllDeclaration":return!0}return!1}t.getOption=function(e,t,n){return e&&c.call(e,t)?e[t]:n},t.getUnionOfKeys=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},r=e.length,i=0;i<r;++i)for(var a=Object.keys(e[i]),s=a.length,o=0;o<s;++o)n[a[o]]=!0;return n},t.comparePos=h,t.copyPos=p,t.composeSourceMaps=function(e,t){if(!e)return t||null;if(!t)return e;var n=new u(e),r=new u(t),i=new l({file:t.file,sourceRoot:t.sourceRoot}),a={};return r.eachMapping((function(e){var t=n.originalPositionFor({line:e.originalLine,column:e.originalColumn}),r=t.source;if(null!==r){i.addMapping({source:r,original:p(t),generated:{line:e.generatedLine,column:e.generatedColumn},name:e.name});var s=n.sourceContentFor(r);s&&!c.call(a,r)&&(a[r]=s,i.setSourceContent(r,s))}})),i.toJSON()},t.getTrueLoc=function(e,t){if(!e.loc)return null;var n={start:e.loc.start,end:e.loc.end};function r(e){f(n,e.loc)}return e.declaration&&e.declaration.decorators&&d(e)&&e.declaration.decorators.forEach(r),h(n.start,n.end)<0&&(n.start=p(n.start),t.skipSpaces(n.start,!1,!0),h(n.start,n.end)<0&&(n.end=p(n.end),t.skipSpaces(n.end,!0,!0))),e.comments&&e.comments.forEach(r),n},t.fixFaultyLocations=function(e,t){if((r=e.loc)&&(r.start.line<1&&(r.start.line=1),r.end.line<1&&(r.end.line=1)),"File"===e.type&&(r.start=t.firstPos(),r.end=t.lastPos()),function(e,t){if("ForStatement"!==e.type)return;function n(e){for(var n=e&&e.loc,r=n&&n.start,i=n&&p(n.end);r&&i&&h(r,i)<0&&(t.prevPos(i),";"===t.charAt(i));)n.end.line=i.line,n.end.column=i.column}n(e.init),n(e.test),n(e.update)}(e,t),function(e,t){if("TemplateLiteral"!==e.type)return;if(0===e.quasis.length)return;if(e.loc){var n=p(e.loc.start);a.default.strictEqual(t.charAt(n),"`"),a.default.ok(t.nextPos(n));var r=e.quasis[0];h(r.loc.start,n)<0&&(r.loc.start=n);var i=p(e.loc.end);a.default.ok(t.prevPos(i)),a.default.strictEqual(t.charAt(i),"`");var s=e.quasis[e.quasis.length-1];h(i,s.loc.end)<0&&(s.loc.end=i)}e.expressions.forEach((function(n,r){var i=t.skipSpaces(n.loc.start,!0,!1);if(t.prevPos(i)&&"{"===t.charAt(i)&&t.prevPos(i)&&"$"===t.charAt(i)){var s=e.quasis[r];h(i,s.loc.end)<0&&(s.loc.end=i)}var o=t.skipSpaces(n.loc.end,!1,!1);if("}"===t.charAt(o)){a.default.ok(t.nextPos(o));var u=e.quasis[r+1];h(u.loc.start,o)<0&&(u.loc.start=o)}}))}(e,t),r&&e.decorators)e.decorators.forEach((function(e){f(r,e.loc)}));else if(e.declaration&&d(e)){e.declaration.loc=null;var n=e.declaration.decorators;n&&n.forEach((function(e){f(r,e.loc)}))}else if(s.MethodDefinition&&s.MethodDefinition.check(e)||s.Property.check(e)&&(e.method||e.shorthand))e.value.loc=null,s.FunctionExpression.check(e.value)&&(e.value.id=null);else if("ObjectTypeProperty"===e.type){var r,i=(r=e.loc)&&r.end;i&&(i=p(i),t.prevPos(i)&&","===t.charAt(i)&&(i=t.skipSpaces(i,!0,!0))&&(r.end=i))}},t.isExportDeclaration=d,t.getParentExportDeclaration=function(e){var t=e.getParentNode();return"declaration"===e.getName()&&d(t)?t:null},t.isTrailingCommaEnabled=function(e,t){var n=e.trailingComma;return"object"==typeof n?!!n[t]:!!n}},,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(60)),a=r(n(3)),s=r(n(14));t.default=function(e){e.use(i.default);var t=e.use(a.default),n=t.Type.def,r=t.Type.or,o=e.use(s.default).defaults;n("Function").field("async",Boolean,o.false),n("SpreadProperty").bases("Node").build("argument").field("argument",n("Expression")),n("ObjectExpression").field("properties",[r(n("Property"),n("SpreadProperty"),n("SpreadElement"))]),n("SpreadPropertyPattern").bases("Pattern").build("argument").field("argument",n("Pattern")),n("ObjectPattern").field("properties",[r(n("Property"),n("PropertyPattern"),n("SpreadPropertyPattern"))]),n("AwaitExpression").bases("Expression").build("argument","all").field("argument",r(n("Expression"),null)).field("all",Boolean,o.false)},e.exports=t.default},function(e,t){t.getArg=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')};var n=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(e){var t=e.match(n);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function a(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function s(e){var n=e,r=i(e);if(r){if(!r.path)return e;n=r.path}for(var s,o=t.isAbsolute(n),u=n.split(/\/+/),l=0,c=u.length-1;c>=0;c--)"."===(s=u[c])?u.splice(c,1):".."===s?l++:l>0&&(""===s?(u.splice(c+1,l),l=0):(u.splice(c,2),l--));return""===(n=u.join("/"))&&(n=o?"/":"."),r?(r.path=n,a(r)):n}function o(e,t){""===e&&(e="."),""===t&&(t=".");var n=i(t),o=i(e);if(o&&(e=o.path||"/"),n&&!n.scheme)return o&&(n.scheme=o.scheme),a(n);if(n||t.match(r))return t;if(o&&!o.host&&!o.path)return o.host=t,a(o);var u="/"===t.charAt(0)?t:s(e.replace(/\/+$/,"")+"/"+t);return o?(o.path=u,a(o)):u}t.urlParse=i,t.urlGenerate=a,t.normalize=s,t.join=o,t.isAbsolute=function(e){return"/"===e.charAt(0)||n.test(e)},t.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)};var u=!("__proto__"in Object.create(null));function l(e){return e}function c(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function h(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}t.toSetString=u?l:function(e){return c(e)?"$"+e:e},t.fromSetString=u?l:function(e){return c(e)?e.slice(1):e},t.compareByOriginalPositions=function(e,t,n){var r=h(e.source,t.source);return 0!==r?r:0!==(r=e.originalLine-t.originalLine)?r:0!==(r=e.originalColumn-t.originalColumn)||n?r:0!==(r=e.generatedColumn-t.generatedColumn)?r:0!==(r=e.generatedLine-t.generatedLine)?r:h(e.name,t.name)},t.compareByGeneratedPositionsDeflated=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r?r:0!==(r=e.generatedColumn-t.generatedColumn)||n?r:0!==(r=h(e.source,t.source))?r:0!==(r=e.originalLine-t.originalLine)?r:0!==(r=e.originalColumn-t.originalColumn)?r:h(e.name,t.name)},t.compareByGeneratedPositionsInflated=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n?n:0!==(n=e.generatedColumn-t.generatedColumn)?n:0!==(n=h(e.source,t.source))?n:0!==(n=e.originalLine-t.originalLine)?n:0!==(n=e.originalColumn-t.originalColumn)?n:h(e.name,t.name)},t.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},t.computeSourceURL=function(e,t,n){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),n){var r=i(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var u=r.path.lastIndexOf("/");u>=0&&(r.path=r.path.substring(0,u+1))}t=o(a(r),t)}return s(t)}},,,,,,function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(17)),s=i(n(64)),o=n(38),u=n(18),l=i(n(135)),c=function(){function e(e,t){void 0===t&&(t=null),this.infos=e,this.mappings=[],this.cachedSourceMap=null,this.cachedTabWidth=void 0,a.default.ok(e.length>0),this.length=e.length,this.name=t||null,this.name&&this.mappings.push(new l.default(this,{start:this.firstPos(),end:this.lastPos()}))}return e.prototype.toString=function(e){return this.sliceString(this.firstPos(),this.lastPos(),e)},e.prototype.getSourceMap=function(e,t){if(!e)return null;var n=this;function r(n){return(n=n||{}).file=e,t&&(n.sourceRoot=t),n}if(n.cachedSourceMap)return r(n.cachedSourceMap.toJSON());var i=new s.default.SourceMapGenerator(r()),o={};return n.mappings.forEach((function(e){for(var t=e.sourceLines.skipSpaces(e.sourceLoc.start)||e.sourceLines.lastPos(),r=n.skipSpaces(e.targetLoc.start)||n.lastPos();u.comparePos(t,e.sourceLoc.end)<0&&u.comparePos(r,e.targetLoc.end)<0;){var s=e.sourceLines.charAt(t),l=n.charAt(r);a.default.strictEqual(s,l);var c=e.sourceLines.name;if(i.addMapping({source:c,original:{line:t.line,column:t.column},generated:{line:r.line,column:r.column}}),!p.call(o,c)){var h=e.sourceLines.toString();i.setSourceContent(c,h),o[c]=h}n.nextPos(r,!0),e.sourceLines.nextPos(t,!0)}})),n.cachedSourceMap=i,i.toJSON()},e.prototype.bootstrapCharAt=function(e){a.default.strictEqual(typeof e,"object"),a.default.strictEqual(typeof e.line,"number"),a.default.strictEqual(typeof e.column,"number");var t=e.line,n=e.column,r=this.toString().split(y),i=r[t-1];return void 0===i?"":n===i.length&&t<r.length?"\n":n>=i.length?"":i.charAt(n)},e.prototype.charAt=function(e){a.default.strictEqual(typeof e,"object"),a.default.strictEqual(typeof e.line,"number"),a.default.strictEqual(typeof e.column,"number");var t=e.line,n=e.column,r=this.infos[t-1],i=n;if(void 0===r||i<0)return"";var s=this.getIndentAt(t);return i<s?" ":(i+=r.sliceStart-s)===r.sliceEnd&&t<this.length?"\n":i>=r.sliceEnd?"":r.line.charAt(i)},e.prototype.stripMargin=function(t,n){if(0===t)return this;if(a.default.ok(t>0,"negative margin: "+t),n&&1===this.length)return this;var i=new e(this.infos.map((function(e,i){return e.line&&(i>0||!n)&&(e=r({},e,{indent:Math.max(0,e.indent-t)})),e})));if(this.mappings.length>0){var s=i.mappings;a.default.strictEqual(s.length,0),this.mappings.forEach((function(e){s.push(e.indent(t,n,!0))}))}return i},e.prototype.indent=function(t){if(0===t)return this;var n=new e(this.infos.map((function(e){return e.line&&!e.locked&&(e=r({},e,{indent:e.indent+t})),e})));if(this.mappings.length>0){var i=n.mappings;a.default.strictEqual(i.length,0),this.mappings.forEach((function(e){i.push(e.indent(t))}))}return n},e.prototype.indentTail=function(t){if(0===t)return this;if(this.length<2)return this;var n=new e(this.infos.map((function(e,n){return n>0&&e.line&&!e.locked&&(e=r({},e,{indent:e.indent+t})),e})));if(this.mappings.length>0){var i=n.mappings;a.default.strictEqual(i.length,0),this.mappings.forEach((function(e){i.push(e.indent(t,!0))}))}return n},e.prototype.lockIndentTail=function(){return this.length<2?this:new e(this.infos.map((function(e,t){return r({},e,{locked:t>0})})))},e.prototype.getIndentAt=function(e){return a.default.ok(e>=1,"no line "+e+" (line numbers start from 1)"),Math.max(this.infos[e-1].indent,0)},e.prototype.guessTabWidth=function(){if("number"==typeof this.cachedTabWidth)return this.cachedTabWidth;for(var e=[],t=0,n=1,r=this.length;n<=r;++n){var i=this.infos[n-1];if(!v(i.line.slice(i.sliceStart,i.sliceEnd))){var a=Math.abs(i.indent-t);e[a]=1+~~e[a],t=i.indent}}for(var s=-1,o=2,u=1;u<e.length;u+=1)p.call(e,u)&&e[u]>s&&(s=e[u],o=u);return this.cachedTabWidth=o},e.prototype.startsWithComment=function(){if(0===this.infos.length)return!1;var e=this.infos[0],t=e.sliceStart,n=e.sliceEnd,r=e.line.slice(t,n).trim();return 0===r.length||"//"===r.slice(0,2)||"/*"===r.slice(0,2)},e.prototype.isOnlyWhitespace=function(){return v(this.toString())},e.prototype.isPrecededOnlyByWhitespace=function(e){var t=this.infos[e.line-1],n=Math.max(t.indent,0),r=e.column-n;if(r<=0)return!0;var i=t.sliceStart,a=Math.min(i+r,t.sliceEnd);return v(t.line.slice(i,a))},e.prototype.getLineLength=function(e){var t=this.infos[e-1];return this.getIndentAt(e)+t.sliceEnd-t.sliceStart},e.prototype.nextPos=function(e,t){void 0===t&&(t=!1);var n=Math.max(e.line,0);return Math.max(e.column,0)<this.getLineLength(n)?(e.column+=1,!t||!!this.skipSpaces(e,!1,!0)):n<this.length&&(e.line+=1,e.column=0,!t||!!this.skipSpaces(e,!1,!0))},e.prototype.prevPos=function(e,t){void 0===t&&(t=!1);var n=e.line,r=e.column;if(r<1){if((n-=1)<1)return!1;r=this.getLineLength(n)}else r=Math.min(r-1,this.getLineLength(n));return e.line=n,e.column=r,!t||!!this.skipSpaces(e,!0,!0)},e.prototype.firstPos=function(){return{line:1,column:0}},e.prototype.lastPos=function(){return{line:this.length,column:this.getLineLength(this.length)}},e.prototype.skipSpaces=function(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=!1),e=e?n?e:{line:e.line,column:e.column}:t?this.lastPos():this.firstPos(),t){for(;this.prevPos(e);)if(!v(this.charAt(e))&&this.nextPos(e))return e;return null}for(;v(this.charAt(e));)if(!this.nextPos(e))return null;return e},e.prototype.trimLeft=function(){var e=this.skipSpaces(this.firstPos(),!1,!0);return e?this.slice(e):b},e.prototype.trimRight=function(){var e=this.skipSpaces(this.lastPos(),!0,!0);return e?this.slice(this.firstPos(),e):b},e.prototype.trim=function(){var e=this.skipSpaces(this.firstPos(),!1,!0);if(null===e)return b;var t=this.skipSpaces(this.lastPos(),!0,!0);return null===t?b:this.slice(e,t)},e.prototype.eachPos=function(e,t,n){void 0===t&&(t=this.firstPos()),void 0===n&&(n=!1);var r=this.firstPos();if(t&&(r.line=t.line,r.column=t.column),!n||this.skipSpaces(r,!1,!0))do{e.call(this,r)}while(this.nextPos(r,n))},e.prototype.bootstrapSlice=function(e,t){var n=this.toString().split(y).slice(e.line-1,t.line);return n.length>0&&(n.push(n.pop().slice(0,t.column)),n[0]=n[0].slice(e.column)),g(n.join("\n"))},e.prototype.slice=function(t,n){if(!n){if(!t)return this;n=this.lastPos()}if(!t)throw new Error("cannot slice with end but not start");var r=this.infos.slice(t.line-1,n.line);t.line===n.line?r[0]=x(r[0],t.column,n.column):(a.default.ok(t.line<n.line),r[0]=x(r[0],t.column),r.push(x(r.pop(),0,n.column)));var i=new e(r);if(this.mappings.length>0){var s=i.mappings;a.default.strictEqual(s.length,0),this.mappings.forEach((function(e){var r=e.slice(this,t,n);r&&s.push(r)}),this)}return i},e.prototype.bootstrapSliceString=function(e,t,n){return this.slice(e,t).toString(n)},e.prototype.sliceString=function(e,t,n){void 0===e&&(e=this.firstPos()),void 0===t&&(t=this.lastPos());for(var r=[],i=(n=o.normalize(n)).tabWidth,a=void 0===i?2:i,s=e.line;s<=t.line;++s){var u=this.infos[s-1];s===e.line?u=s===t.line?x(u,e.column,t.column):x(u,e.column):s===t.line&&(u=x(u,0,t.column));var l=Math.max(u.indent,0),c=u.line.slice(0,u.sliceStart);if(n.reuseWhitespace&&v(c)&&d(c,n.tabWidth)===l)r.push(u.line.slice(0,u.sliceEnd));else{var h=0,p=l;n.useTabs&&(p-=(h=Math.floor(l/a))*a);var f="";h>0&&(f+=new Array(h+1).join("\t")),p>0&&(f+=new Array(p+1).join(" ")),f+=u.line.slice(u.sliceStart,u.sliceEnd),r.push(f)}}return r.join(n.lineTerminator)},e.prototype.isEmpty=function(){return this.length<2&&this.getLineLength(1)<1},e.prototype.join=function(t){var n,i=this,a=[],s=[];function o(e){if(null!==e){if(n){var t=e.infos[0],i=new Array(t.indent+1).join(" "),o=a.length,u=Math.max(n.indent,0)+n.sliceEnd-n.sliceStart;n.line=n.line.slice(0,n.sliceEnd)+i+t.line.slice(t.sliceStart,t.sliceEnd),n.locked=n.locked||t.locked,n.sliceEnd=n.line.length,e.mappings.length>0&&e.mappings.forEach((function(e){s.push(e.add(o,u))}))}else e.mappings.length>0&&s.push.apply(s,e.mappings);e.infos.forEach((function(e,t){(!n||t>0)&&(n=r({},e),a.push(n))}))}}if(t.map((function(e){var t=g(e);return t.isEmpty()?null:t})).forEach((function(e,t){i.isEmpty()?o(e):function(e,t){t>0&&o(i),o(e)}(e,t)})),a.length<1)return b;var u=new e(a);return u.mappings=s,u},e.prototype.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[this];return n.push.apply(n,e),a.default.strictEqual(n.length,e.length+1),b.join(n)},e}();t.Lines=c;var h={},p=h.hasOwnProperty,f=10;function d(e,t){for(var n=0,r=e.length,i=0;i<r;++i)switch(e.charCodeAt(i)){case 9:a.default.strictEqual(typeof t,"number"),a.default.ok(t>0);var s=Math.ceil(n/t)*t;s===n?n+=t:n=s;break;case 11:case 12:case 13:case 65279:break;case 32:default:n+=1}return n}t.countSpaces=d;var m=/^\s*/,y=/\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;function g(e,t){if(e instanceof c)return e;e+="";var n=t&&t.tabWidth,r=e.indexOf("\t")<0,i=!t&&r&&e.length<=f;if(a.default.ok(n||r,"No tab width specified but encountered tabs in string\n"+e),i&&p.call(h,e))return h[e];var s=new c(e.split(y).map((function(e){var t=m.exec(e)[0];return{line:e,indent:d(t,n),locked:!1,sliceStart:t.length,sliceEnd:e.length}})),o.normalize(t).sourceFileName);return i&&(h[e]=s),s}function v(e){return!/\S/.test(e)}function x(e,t,n){var r=e.sliceStart,i=e.sliceEnd,s=Math.max(e.indent,0),o=s+i-r;return void 0===n&&(n=o),t=Math.max(t,0),n=Math.min(n,o),(n=Math.max(n,t))<s?(s=n,i=r):i-=o-n,o=n,o-=t,t<s?s-=t:(t-=s,s=0,r+=t),a.default.ok(s>=0),a.default.ok(r<=i),a.default.strictEqual(o,s+i-r),e.indent===s&&e.sliceStart===r&&e.sliceEnd===i?e:{line:e.line,indent:s,locked:!1,sliceStart:r,sliceEnd:i}}t.fromString=g,t.concat=function(e){return b.join(e)};var b=g("")},,,,,,,,,,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(14));t.default=function(e){var t=e.use(i.default).Type,n=t.def,r=t.or,s=e.use(a.default),o=s.defaults,u=s.geq;n("Printable").field("loc",r(n("SourceLocation"),null),o.null,!0),n("Node").bases("Printable").field("type",String).field("comments",r([n("Comment")],null),o.null,!0),n("SourceLocation").field("start",n("Position")).field("end",n("Position")).field("source",r(String,null),o.null),n("Position").field("line",u(1)).field("column",u(0)),n("File").bases("Node").build("program","name").field("program",n("Program")).field("name",r(String,null),o.null),n("Program").bases("Node").build("body").field("body",[n("Statement")]),n("Function").bases("Node").field("id",r(n("Identifier"),null),o.null).field("params",[n("Pattern")]).field("body",n("BlockStatement")).field("generator",Boolean,o.false).field("async",Boolean,o.false),n("Statement").bases("Node"),n("EmptyStatement").bases("Statement").build(),n("BlockStatement").bases("Statement").build("body").field("body",[n("Statement")]),n("ExpressionStatement").bases("Statement").build("expression").field("expression",n("Expression")),n("IfStatement").bases("Statement").build("test","consequent","alternate").field("test",n("Expression")).field("consequent",n("Statement")).field("alternate",r(n("Statement"),null),o.null),n("LabeledStatement").bases("Statement").build("label","body").field("label",n("Identifier")).field("body",n("Statement")),n("BreakStatement").bases("Statement").build("label").field("label",r(n("Identifier"),null),o.null),n("ContinueStatement").bases("Statement").build("label").field("label",r(n("Identifier"),null),o.null),n("WithStatement").bases("Statement").build("object","body").field("object",n("Expression")).field("body",n("Statement")),n("SwitchStatement").bases("Statement").build("discriminant","cases","lexical").field("discriminant",n("Expression")).field("cases",[n("SwitchCase")]).field("lexical",Boolean,o.false),n("ReturnStatement").bases("Statement").build("argument").field("argument",r(n("Expression"),null)),n("ThrowStatement").bases("Statement").build("argument").field("argument",n("Expression")),n("TryStatement").bases("Statement").build("block","handler","finalizer").field("block",n("BlockStatement")).field("handler",r(n("CatchClause"),null),(function(){return this.handlers&&this.handlers[0]||null})).field("handlers",[n("CatchClause")],(function(){return this.handler?[this.handler]:[]}),!0).field("guardedHandlers",[n("CatchClause")],o.emptyArray).field("finalizer",r(n("BlockStatement"),null),o.null),n("CatchClause").bases("Node").build("param","guard","body").field("param",r(n("Pattern"),null),o.null).field("guard",r(n("Expression"),null),o.null).field("body",n("BlockStatement")),n("WhileStatement").bases("Statement").build("test","body").field("test",n("Expression")).field("body",n("Statement")),n("DoWhileStatement").bases("Statement").build("body","test").field("body",n("Statement")).field("test",n("Expression")),n("ForStatement").bases("Statement").build("init","test","update","body").field("init",r(n("VariableDeclaration"),n("Expression"),null)).field("test",r(n("Expression"),null)).field("update",r(n("Expression"),null)).field("body",n("Statement")),n("ForInStatement").bases("Statement").build("left","right","body").field("left",r(n("VariableDeclaration"),n("Expression"))).field("right",n("Expression")).field("body",n("Statement")),n("DebuggerStatement").bases("Statement").build(),n("Declaration").bases("Statement"),n("FunctionDeclaration").bases("Function","Declaration").build("id","params","body").field("id",n("Identifier")),n("FunctionExpression").bases("Function","Expression").build("id","params","body"),n("VariableDeclaration").bases("Declaration").build("kind","declarations").field("kind",r("var","let","const")).field("declarations",[n("VariableDeclarator")]),n("VariableDeclarator").bases("Node").build("id","init").field("id",n("Pattern")).field("init",r(n("Expression"),null),o.null),n("Expression").bases("Node"),n("ThisExpression").bases("Expression").build(),n("ArrayExpression").bases("Expression").build("elements").field("elements",[r(n("Expression"),null)]),n("ObjectExpression").bases("Expression").build("properties").field("properties",[n("Property")]),n("Property").bases("Node").build("kind","key","value").field("kind",r("init","get","set")).field("key",r(n("Literal"),n("Identifier"))).field("value",n("Expression")),n("SequenceExpression").bases("Expression").build("expressions").field("expressions",[n("Expression")]);var l=r("-","+","!","~","typeof","void","delete");n("UnaryExpression").bases("Expression").build("operator","argument","prefix").field("operator",l).field("argument",n("Expression")).field("prefix",Boolean,o.true);var c=r("==","!=","===","!==","<","<=",">",">=","<<",">>",">>>","+","-","*","/","%","**","&","|","^","in","instanceof");n("BinaryExpression").bases("Expression").build("operator","left","right").field("operator",c).field("left",n("Expression")).field("right",n("Expression"));var h=r("=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","^=","&=");n("AssignmentExpression").bases("Expression").build("operator","left","right").field("operator",h).field("left",r(n("Pattern"),n("MemberExpression"))).field("right",n("Expression"));var p=r("++","--");n("UpdateExpression").bases("Expression").build("operator","argument","prefix").field("operator",p).field("argument",n("Expression")).field("prefix",Boolean);var f=r("||","&&");n("LogicalExpression").bases("Expression").build("operator","left","right").field("operator",f).field("left",n("Expression")).field("right",n("Expression")),n("ConditionalExpression").bases("Expression").build("test","consequent","alternate").field("test",n("Expression")).field("consequent",n("Expression")).field("alternate",n("Expression")),n("NewExpression").bases("Expression").build("callee","arguments").field("callee",n("Expression")).field("arguments",[n("Expression")]),n("CallExpression").bases("Expression").build("callee","arguments").field("callee",n("Expression")).field("arguments",[n("Expression")]),n("MemberExpression").bases("Expression").build("object","property","computed").field("object",n("Expression")).field("property",r(n("Identifier"),n("Expression"))).field("computed",Boolean,(function(){var e=this.property.type;return"Literal"===e||"MemberExpression"===e||"BinaryExpression"===e})),n("Pattern").bases("Node"),n("SwitchCase").bases("Node").build("test","consequent").field("test",r(n("Expression"),null)).field("consequent",[n("Statement")]),n("Identifier").bases("Expression","Pattern").build("name").field("name",String).field("optional",Boolean,o.false),n("Literal").bases("Expression").build("value").field("value",r(String,Boolean,null,Number,RegExp)).field("regex",r({pattern:String,flags:String},null),(function(){if(this.value instanceof RegExp){var e="";return this.value.ignoreCase&&(e+="i"),this.value.multiline&&(e+="m"),this.value.global&&(e+="g"),{pattern:this.value.source,flags:e}}return null})),n("Comment").bases("Printable").field("value",String).field("leading",Boolean,o.true).field("trailing",Boolean,o.false)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={parser:n(127),tabWidth:4,useTabs:!1,reuseWhitespace:!0,lineTerminator:n(134).EOL||"\n",wrapColumn:74,sourceFileName:null,sourceMapName:null,sourceRoot:null,inputSourceMap:null,range:!1,tolerant:!0,quote:null,trailingComma:!1,arrayBracketSpacing:!1,objectCurlySpacing:!0,arrowParensAlways:!1,flowObjectCommas:!0,tokens:!0},i=r.hasOwnProperty;t.normalize=function(e){var t=e||r;function n(e){return i.call(t,e)?t[e]:r[e]}return{tabWidth:+n("tabWidth"),useTabs:!!n("useTabs"),reuseWhitespace:!!n("reuseWhitespace"),lineTerminator:n("lineTerminator"),wrapColumn:Math.max(n("wrapColumn"),0),sourceFileName:n("sourceFileName"),sourceMapName:n("sourceMapName"),sourceRoot:n("sourceRoot"),inputSourceMap:n("inputSourceMap"),parser:n("esprima")||n("parser"),range:n("range"),tolerant:n("tolerant"),quote:n("quote"),trailingComma:n("trailingComma"),arrayBracketSpacing:n("arrayBracketSpacing"),objectCurlySpacing:n("objectCurlySpacing"),arrowParensAlways:n("arrowParensAlways"),flowObjectCommas:n("flowObjectCommas"),tokens:!!n("tokens")}}},,,,,,,,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,function(e,t,n){var r,i;
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */void 0===(i="function"==typeof(r=function(){var e,t,n,r,i,a={},s={},o={currentLocale:"en",zeroFormat:null,nullFormat:null,defaultFormat:"0,0",scalePercentBy100:!0},u={currentLocale:o.currentLocale,zeroFormat:o.zeroFormat,nullFormat:o.nullFormat,defaultFormat:o.defaultFormat,scalePercentBy100:o.scalePercentBy100};function l(e,t){this._input=e,this._value=t}return(e=function(n){var r,i,s,o;if(e.isNumeral(n))r=n.value();else if(0===n||void 0===n)r=0;else if(null===n||t.isNaN(n))r=null;else if("string"==typeof n)if(u.zeroFormat&&n===u.zeroFormat)r=0;else if(u.nullFormat&&n===u.nullFormat||!n.replace(/[^0-9]+/g,"").length)r=null;else{for(i in a)if((o="function"==typeof a[i].regexps.unformat?a[i].regexps.unformat():a[i].regexps.unformat)&&n.match(o)){s=a[i].unformat;break}r=(s=s||e._.stringToNumber)(n)}else r=Number(n)||null;return new l(n,r)}).version="2.0.6",e.isNumeral=function(e){return e instanceof l},e._=t={numberToFormat:function(t,n,r){var i,a,o,u,l,c,h,p,f=s[e.options.currentLocale],d=!1,m=!1,y="",g="",v=!1;if(t=t||0,o=Math.abs(t),e._.includes(n,"(")?(d=!0,n=n.replace(/[\(|\)]/g,"")):(e._.includes(n,"+")||e._.includes(n,"-"))&&(c=e._.includes(n,"+")?n.indexOf("+"):t<0?n.indexOf("-"):-1,n=n.replace(/[\+|\-]/g,"")),e._.includes(n,"a")&&(a=!!(a=n.match(/a(k|m|b|t)?/))&&a[1],e._.includes(n," a")&&(y=" "),n=n.replace(new RegExp(y+"a[kmbt]?"),""),o>=1e12&&!a||"t"===a?(y+=f.abbreviations.trillion,t/=1e12):o<1e12&&o>=1e9&&!a||"b"===a?(y+=f.abbreviations.billion,t/=1e9):o<1e9&&o>=1e6&&!a||"m"===a?(y+=f.abbreviations.million,t/=1e6):(o<1e6&&o>=1e3&&!a||"k"===a)&&(y+=f.abbreviations.thousand,t/=1e3)),e._.includes(n,"[.]")&&(m=!0,n=n.replace("[.]",".")),u=t.toString().split(".")[0],l=n.split(".")[1],h=n.indexOf(","),i=(n.split(".")[0].split(",")[0].match(/0/g)||[]).length,l?(e._.includes(l,"[")?(l=(l=l.replace("]","")).split("["),g=e._.toFixed(t,l[0].length+l[1].length,r,l[1].length)):g=e._.toFixed(t,l.length,r),u=g.split(".")[0],g=e._.includes(g,".")?f.delimiters.decimal+g.split(".")[1]:"",m&&0===Number(g.slice(1))&&(g="")):u=e._.toFixed(t,0,r),y&&!a&&Number(u)>=1e3&&y!==f.abbreviations.trillion)switch(u=String(Number(u)/1e3),y){case f.abbreviations.thousand:y=f.abbreviations.million;break;case f.abbreviations.million:y=f.abbreviations.billion;break;case f.abbreviations.billion:y=f.abbreviations.trillion}if(e._.includes(u,"-")&&(u=u.slice(1),v=!0),u.length<i)for(var x=i-u.length;x>0;x--)u="0"+u;return h>-1&&(u=u.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+f.delimiters.thousands)),0===n.indexOf(".")&&(u=""),p=u+g+(y||""),d?p=(d&&v?"(":"")+p+(d&&v?")":""):c>=0?p=0===c?(v?"-":"+")+p:p+(v?"-":"+"):v&&(p="-"+p),p},stringToNumber:function(e){var t,n,r,i=s[u.currentLocale],a=e,o={thousand:3,million:6,billion:9,trillion:12};if(u.zeroFormat&&e===u.zeroFormat)n=0;else if(u.nullFormat&&e===u.nullFormat||!e.replace(/[^0-9]+/g,"").length)n=null;else{for(t in n=1,"."!==i.delimiters.decimal&&(e=e.replace(/\./g,"").replace(i.delimiters.decimal,".")),o)if(r=new RegExp("[^a-zA-Z]"+i.abbreviations[t]+"(?:\\)|(\\"+i.currency.symbol+")?(?:\\))?)?$"),a.match(r)){n*=Math.pow(10,o[t]);break}n*=(e.split("-").length+Math.min(e.split("(").length-1,e.split(")").length-1))%2?1:-1,e=e.replace(/[^0-9\.]+/g,""),n*=Number(e)}return n},isNaN:function(e){return"number"==typeof e&&isNaN(e)},includes:function(e,t){return-1!==e.indexOf(t)},insert:function(e,t,n){return e.slice(0,n)+t+e.slice(n)},reduce:function(e,t){if(null===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof t)throw new TypeError(t+" is not a function");var n,r=Object(e),i=r.length>>>0,a=0;if(3===arguments.length)n=arguments[2];else{for(;a<i&&!(a in r);)a++;if(a>=i)throw new TypeError("Reduce of empty array with no initial value");n=r[a++]}for(;a<i;a++)a in r&&(n=t(n,r[a],a,r));return n},multiplier:function(e){var t=e.toString().split(".");return t.length<2?1:Math.pow(10,t[1].length)},correctionFactor:function(){var e=Array.prototype.slice.call(arguments);return e.reduce((function(e,n){var r=t.multiplier(n);return e>r?e:r}),1)},toFixed:function(e,t,n,r){var i,a,s,o,u=e.toString().split("."),l=t-(r||0);return i=2===u.length?Math.min(Math.max(u[1].length,l),t):l,s=Math.pow(10,i),o=(n(e+"e+"+i)/s).toFixed(i),r>t-i&&(a=new RegExp("\\.?0{1,"+(r-(t-i))+"}$"),o=o.replace(a,"")),o}},e.options=u,e.formats=a,e.locales=s,e.locale=function(e){return e&&(u.currentLocale=e.toLowerCase()),u.currentLocale},e.localeData=function(e){if(!e)return s[u.currentLocale];if(e=e.toLowerCase(),!s[e])throw new Error("Unknown locale : "+e);return s[e]},e.reset=function(){for(var e in o)u[e]=o[e]},e.zeroFormat=function(e){u.zeroFormat="string"==typeof e?e:null},e.nullFormat=function(e){u.nullFormat="string"==typeof e?e:null},e.defaultFormat=function(e){u.defaultFormat="string"==typeof e?e:"0.0"},e.register=function(e,t,n){if(t=t.toLowerCase(),this[e+"s"][t])throw new TypeError(t+" "+e+" already registered.");return this[e+"s"][t]=n,n},e.validate=function(t,n){var r,i,a,s,o,u,l,c;if("string"!=typeof t&&(t+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",t)),(t=t.trim()).match(/^\d+$/))return!0;if(""===t)return!1;try{l=e.localeData(n)}catch(t){l=e.localeData(e.locale())}return a=l.currency.symbol,o=l.abbreviations,r=l.delimiters.decimal,i="."===l.delimiters.thousands?"\\.":l.delimiters.thousands,!(null!==(c=t.match(/^[^\d]+/))&&(t=t.substr(1),c[0]!==a)||null!==(c=t.match(/[^\d]+$/))&&(t=t.slice(0,-1),c[0]!==o.thousand&&c[0]!==o.million&&c[0]!==o.billion&&c[0]!==o.trillion)||(u=new RegExp(i+"{2}"),t.match(/[^\d.,]/g)||(s=t.split(r)).length>2||(s.length<2?!s[0].match(/^\d+.*\d$/)||s[0].match(u):1===s[0].length?!s[0].match(/^\d+$/)||s[0].match(u)||!s[1].match(/^\d+$/):!s[0].match(/^\d+.*\d$/)||s[0].match(u)||!s[1].match(/^\d+$/))))},e.fn=l.prototype={clone:function(){return e(this)},format:function(t,n){var r,i,s,o=this._value,l=t||u.defaultFormat;if(n=n||Math.round,0===o&&null!==u.zeroFormat)i=u.zeroFormat;else if(null===o&&null!==u.nullFormat)i=u.nullFormat;else{for(r in a)if(l.match(a[r].regexps.format)){s=a[r].format;break}i=(s=s||e._.numberToFormat)(o,l,n)}return i},value:function(){return this._value},input:function(){return this._input},set:function(e){return this._value=Number(e),this},add:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([this._value,e],(function(e,t,r,i){return e+Math.round(n*t)}),0)/n,this},subtract:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([e],(function(e,t,r,i){return e-Math.round(n*t)}),Math.round(this._value*n))/n,this},multiply:function(e){return this._value=t.reduce([this._value,e],(function(e,n,r,i){var a=t.correctionFactor(e,n);return Math.round(e*a)*Math.round(n*a)/Math.round(a*a)}),1),this},divide:function(e){return this._value=t.reduce([this._value,e],(function(e,n,r,i){var a=t.correctionFactor(e,n);return Math.round(e*a)/Math.round(n*a)})),this},difference:function(t){return Math.abs(e(this._value).subtract(t).value())}},e.register("locale","en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$"}}),e.register("format","bps",{regexps:{format:/(BPS)/,unformat:/(BPS)/},format:function(t,n,r){var i,a=e._.includes(n," BPS")?" ":"";return t*=1e4,n=n.replace(/\s?BPS/,""),i=e._.numberToFormat(t,n,r),e._.includes(i,")")?((i=i.split("")).splice(-1,0,a+"BPS"),i=i.join("")):i=i+a+"BPS",i},unformat:function(t){return+(1e-4*e._.stringToNumber(t)).toFixed(15)}}),r={base:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},i="("+(i=(n={base:1e3,suffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}).suffixes.concat(r.suffixes.filter((function(e){return n.suffixes.indexOf(e)<0}))).join("|")).replace("B","B(?!PS)")+")",e.register("format","bytes",{regexps:{format:/([0\s]i?b)/,unformat:new RegExp(i)},format:function(t,i,a){var s,o,u,l=e._.includes(i,"ib")?r:n,c=e._.includes(i," b")||e._.includes(i," ib")?" ":"";for(i=i.replace(/\s?i?b/,""),s=0;s<=l.suffixes.length;s++)if(o=Math.pow(l.base,s),u=Math.pow(l.base,s+1),null===t||0===t||t>=o&&t<u){c+=l.suffixes[s],o>0&&(t/=o);break}return e._.numberToFormat(t,i,a)+c},unformat:function(t){var i,a,s=e._.stringToNumber(t);if(s){for(i=n.suffixes.length-1;i>=0;i--){if(e._.includes(t,n.suffixes[i])){a=Math.pow(n.base,i);break}if(e._.includes(t,r.suffixes[i])){a=Math.pow(r.base,i);break}}s*=a||1}return s}}),e.register("format","currency",{regexps:{format:/(\$)/},format:function(t,n,r){var i,a,s=e.locales[e.options.currentLocale],o={before:n.match(/^([\+|\-|\(|\s|\$]*)/)[0],after:n.match(/([\+|\-|\)|\s|\$]*)$/)[0]};for(n=n.replace(/\s?\$\s?/,""),i=e._.numberToFormat(t,n,r),t>=0?(o.before=o.before.replace(/[\-\(]/,""),o.after=o.after.replace(/[\-\)]/,"")):t<0&&!e._.includes(o.before,"-")&&!e._.includes(o.before,"(")&&(o.before="-"+o.before),a=0;a<o.before.length;a++)switch(o.before[a]){case"$":i=e._.insert(i,s.currency.symbol,a);break;case" ":i=e._.insert(i," ",a+s.currency.symbol.length-1)}for(a=o.after.length-1;a>=0;a--)switch(o.after[a]){case"$":i=a===o.after.length-1?i+s.currency.symbol:e._.insert(i,s.currency.symbol,-(o.after.length-(1+a)));break;case" ":i=a===o.after.length-1?i+" ":e._.insert(i," ",-(o.after.length-(1+a)+s.currency.symbol.length-1))}return i}}),e.register("format","exponential",{regexps:{format:/(e\+|e-)/,unformat:/(e\+|e-)/},format:function(t,n,r){var i=("number"!=typeof t||e._.isNaN(t)?"0e+0":t.toExponential()).split("e");return n=n.replace(/e[\+|\-]{1}0/,""),e._.numberToFormat(Number(i[0]),n,r)+"e"+i[1]},unformat:function(t){var n=e._.includes(t,"e+")?t.split("e+"):t.split("e-"),r=Number(n[0]),i=Number(n[1]);return i=e._.includes(t,"e-")?i*=-1:i,e._.reduce([r,Math.pow(10,i)],(function(t,n,r,i){var a=e._.correctionFactor(t,n);return t*a*(n*a)/(a*a)}),1)}}),e.register("format","ordinal",{regexps:{format:/(o)/},format:function(t,n,r){var i=e.locales[e.options.currentLocale],a=e._.includes(n," o")?" ":"";return n=n.replace(/\s?o/,""),a+=i.ordinal(t),e._.numberToFormat(t,n,r)+a}}),e.register("format","percentage",{regexps:{format:/(%)/,unformat:/(%)/},format:function(t,n,r){var i,a=e._.includes(n," %")?" ":"";return e.options.scalePercentBy100&&(t*=100),n=n.replace(/\s?\%/,""),i=e._.numberToFormat(t,n,r),e._.includes(i,")")?((i=i.split("")).splice(-1,0,a+"%"),i=i.join("")):i=i+a+"%",i},unformat:function(t){var n=e._.stringToNumber(t);return e.options.scalePercentBy100?.01*n:n}}),e.register("format","time",{regexps:{format:/(:)/,unformat:/(:)/},format:function(e,t,n){var r=Math.floor(e/60/60),i=Math.floor((e-60*r*60)/60),a=Math.round(e-60*r*60-60*i);return r+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)},unformat:function(e){var t=e.split(":"),n=0;return 3===t.length?(n+=60*Number(t[0])*60,n+=60*Number(t[1]),n+=Number(t[2])):2===t.length&&(n+=60*Number(t[0]),n+=Number(t[1])),Number(n)}}),e})?r.call(t,n,t,e):r)||(e.exports=i)},function(e,t,n){var r;e.exports=(function(e,t){var n=e.utils.isFunction;function r(e,t){return e-t}function i(e,n,r){return t.max(n,t.min(e,r))}e.sum=function(e){for(var t=0,n=e.length;--n>=0;)t+=e[n];return t},e.sumsqrd=function(e){for(var t=0,n=e.length;--n>=0;)t+=e[n]*e[n];return t},e.sumsqerr=function(t){for(var n,r=e.mean(t),i=0,a=t.length;--a>=0;)i+=(n=t[a]-r)*n;return i},e.sumrow=function(e){for(var t=0,n=e.length;--n>=0;)t+=e[n];return t},e.product=function(e){for(var t=1,n=e.length;--n>=0;)t*=e[n];return t},e.min=function(e){for(var t=e[0],n=0;++n<e.length;)e[n]<t&&(t=e[n]);return t},e.max=function(e){for(var t=e[0],n=0;++n<e.length;)e[n]>t&&(t=e[n]);return t},e.unique=function(e){for(var t={},n=[],r=0;r<e.length;r++)t[e[r]]||(t[e[r]]=!0,n.push(e[r]));return n},e.mean=function(t){return e.sum(t)/t.length},e.meansqerr=function(t){return e.sumsqerr(t)/t.length},e.geomean=function(n){return t.pow(e.product(n),1/n.length)},e.median=function(e){var t=e.length,n=e.slice().sort(r);return 1&t?n[t/2|0]:(n[t/2-1]+n[t/2])/2},e.cumsum=function(t){return e.cumreduce(t,(function(e,t){return e+t}))},e.cumprod=function(t){return e.cumreduce(t,(function(e,t){return e*t}))},e.diff=function(e){var t,n=[],r=e.length;for(t=1;t<r;t++)n.push(e[t]-e[t-1]);return n},e.rank=function(e){for(var t,n=e.length,i=e.slice().sort(r),a=new Array(n),s=0;s<n;s++){var o=i.indexOf(e[s]),u=i.lastIndexOf(e[s]);t=o===u?o:(o+u)/2,a[s]=t+1}return a},e.mode=function(e){var t,n=e.length,i=e.slice().sort(r),a=1,s=0,o=0,u=[];for(t=0;t<n;t++)i[t]===i[t+1]?a++:(a>s?(u=[i[t]],s=a,o=0):a===s&&(u.push(i[t]),o++),a=1);return 0===o?u[0]:u},e.range=function(t){return e.max(t)-e.min(t)},e.variance=function(t,n){return e.sumsqerr(t)/(t.length-(n?1:0))},e.pooledvariance=function(t){return t.reduce((function(t,n){return t+e.sumsqerr(n)}),0)/(t.reduce((function(e,t){return e+t.length}),0)-t.length)},e.deviation=function(t){for(var n=e.mean(t),r=t.length,i=new Array(r),a=0;a<r;a++)i[a]=t[a]-n;return i},e.stdev=function(n,r){return t.sqrt(e.variance(n,r))},e.pooledstdev=function(n){return t.sqrt(e.pooledvariance(n))},e.meandev=function(n){for(var r=e.mean(n),i=[],a=n.length-1;a>=0;a--)i.push(t.abs(n[a]-r));return e.mean(i)},e.meddev=function(n){for(var r=e.median(n),i=[],a=n.length-1;a>=0;a--)i.push(t.abs(n[a]-r));return e.median(i)},e.coeffvar=function(t){return e.stdev(t)/e.mean(t)},e.quartiles=function(e){var n=e.length,i=e.slice().sort(r);return[i[t.round(n/4)-1],i[t.round(n/2)-1],i[t.round(3*n/4)-1]]},e.quantiles=function(e,n,a,s){var o,u,l,c,h,p=e.slice().sort(r),f=[n.length],d=e.length;for(void 0===a&&(a=3/8),void 0===s&&(s=3/8),o=0;o<n.length;o++)l=d*(u=n[o])+(a+u*(1-a-s)),c=t.floor(i(l,1,d-1)),h=i(l-c,0,1),f[o]=(1-h)*p[c-1]+h*p[c];return f},e.percentile=function(e,t,n){var i=e.slice().sort(r),a=t*(i.length+(n?1:-1))+(n?0:1),s=parseInt(a),o=a-s;return s+1<i.length?i[s-1]+o*(i[s]-i[s-1]):i[s-1]},e.percentileOfScore=function(e,t,n){var r,i,a=0,s=e.length,o=!1;for("strict"===n&&(o=!0),i=0;i<s;i++)r=e[i],(o&&r<t||!o&&r<=t)&&a++;return a/s},e.histogram=function(n,r){r=r||4;var i,a=e.min(n),s=(e.max(n)-a)/r,o=n.length,u=[];for(i=0;i<r;i++)u[i]=0;for(i=0;i<o;i++)u[t.min(t.floor((n[i]-a)/s),r-1)]+=1;return u},e.covariance=function(t,n){var r,i=e.mean(t),a=e.mean(n),s=t.length,o=new Array(s);for(r=0;r<s;r++)o[r]=(t[r]-i)*(n[r]-a);return e.sum(o)/(s-1)},e.corrcoeff=function(t,n){return e.covariance(t,n)/e.stdev(t,1)/e.stdev(n,1)},e.spearmancoeff=function(t,n){return t=e.rank(t),n=e.rank(n),e.corrcoeff(t,n)},e.stanMoment=function(n,r){for(var i=e.mean(n),a=e.stdev(n),s=n.length,o=0,u=0;u<s;u++)o+=t.pow((n[u]-i)/a,r);return o/n.length},e.skewness=function(t){return e.stanMoment(t,3)},e.kurtosis=function(t){return e.stanMoment(t,4)-3};var a=e.prototype;!function(t){for(var r=0;r<t.length;r++)!function(t){a[t]=function(r,i){var s=[],o=0,u=this;if(n(r)&&(i=r,r=!1),i)return setTimeout((function(){i.call(u,a[t].call(u,r))})),this;if(this.length>1){for(u=!0===r?this:this.transpose();o<u.length;o++)s[o]=e[t](u[o]);return s}return e[t](this[0],r)}}(t[r])}("cumsum cumprod".split(" ")),function(t){for(var r=0;r<t.length;r++)!function(t){a[t]=function(r,i){var s=[],o=0,u=this;if(n(r)&&(i=r,r=!1),i)return setTimeout((function(){i.call(u,a[t].call(u,r))})),this;if(this.length>1){for("sumrow"!==t&&(u=!0===r?this:this.transpose());o<u.length;o++)s[o]=e[t](u[o]);return!0===r?e[t](e.utils.toVector(s)):s}return e[t](this[0],r)}}(t[r])}("sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr geomean median diff rank mode range variance deviation stdev meandev meddev coeffvar quartiles histogram skewness kurtosis".split(" ")),function(t){for(var r=0;r<t.length;r++)!function(t){a[t]=function(){var r,i=[],s=0,o=this,u=Array.prototype.slice.call(arguments);if(n(u[u.length-1])){r=u[u.length-1];var l=u.slice(0,u.length-1);return setTimeout((function(){r.call(o,a[t].apply(o,l))})),this}r=void 0;var c=function(n){return e[t].apply(o,[n].concat(u))};if(this.length>1){for(o=o.transpose();s<o.length;s++)i[s]=c(o[s]);return i}return c(this[0])}}(t[r])}("quantiles percentileOfScore".split(" "))}(r=function(e,t){var n=Array.prototype.concat,r=Array.prototype.slice,i=Object.prototype.toString;function a(t,n){var r=t>n?t:n;return e.pow(10,17-~~(e.log(r>0?r:-r)*e.LOG10E))}var s=Array.isArray||function(e){return"[object Array]"===i.call(e)};function o(e){return"[object Function]"===i.call(e)}function u(e){return"number"==typeof e&&e-e==0}function l(){return new l._init(arguments)}function c(){return 0}function h(){return 1}function p(e,t){return e===t?1:0}l.fn=l.prototype,l._init=function(e){if(s(e[0]))if(s(e[0][0])){o(e[1])&&(e[0]=l.map(e[0],e[1]));for(var t=0;t<e[0].length;t++)this[t]=e[0][t];this.length=e[0].length}else this[0]=o(e[1])?l.map(e[0],e[1]):e[0],this.length=1;else if(u(e[0]))this[0]=l.seq.apply(null,e),this.length=1;else{if(e[0]instanceof l)return l(e[0].toArray());this[0]=[],this.length=1}return this},l._init.prototype=l.prototype,l._init.constructor=l,l.utils={calcRdx:a,isArray:s,isFunction:o,isNumber:u,toVector:function(e){return n.apply([],e)}},l._random_fn=e.random,l.setRandom=function(e){if("function"!=typeof e)throw new TypeError("fn is not a function");l._random_fn=e},l.extend=function(e){var t,n;if(1===arguments.length){for(n in e)l[n]=e[n];return this}for(t=1;t<arguments.length;t++)for(n in arguments[t])e[n]=arguments[t][n];return e},l.rows=function(e){return e.length||1},l.cols=function(e){return e[0].length||1},l.dimensions=function(e){return{rows:l.rows(e),cols:l.cols(e)}},l.row=function(e,t){return s(t)?t.map((function(t){return l.row(e,t)})):e[t]},l.rowa=function(e,t){return l.row(e,t)},l.col=function(e,t){if(s(t)){var n=l.arange(e.length).map((function(){return new Array(t.length)}));return t.forEach((function(t,r){l.arange(e.length).forEach((function(i){n[i][r]=e[i][t]}))})),n}for(var r=new Array(e.length),i=0;i<e.length;i++)r[i]=[e[i][t]];return r},l.cola=function(e,t){return l.col(e,t).map((function(e){return e[0]}))},l.diag=function(e){for(var t=l.rows(e),n=new Array(t),r=0;r<t;r++)n[r]=[e[r][r]];return n},l.antidiag=function(e){for(var t=l.rows(e)-1,n=new Array(t),r=0;t>=0;t--,r++)n[r]=[e[r][t]];return n},l.transpose=function(e){var t,n,r,i,a,o=[];for(s(e[0])||(e=[e]),n=e.length,r=e[0].length,a=0;a<r;a++){for(t=new Array(n),i=0;i<n;i++)t[i]=e[i][a];o.push(t)}return 1===o.length?o[0]:o},l.map=function(e,t,n){var r,i,a,o,u;for(s(e[0])||(e=[e]),i=e.length,a=e[0].length,o=n?e:new Array(i),r=0;r<i;r++)for(o[r]||(o[r]=new Array(a)),u=0;u<a;u++)o[r][u]=t(e[r][u],r,u);return 1===o.length?o[0]:o},l.cumreduce=function(e,t,n){var r,i,a,o,u;for(s(e[0])||(e=[e]),i=e.length,a=e[0].length,o=n?e:new Array(i),r=0;r<i;r++)for(o[r]||(o[r]=new Array(a)),a>0&&(o[r][0]=e[r][0]),u=1;u<a;u++)o[r][u]=t(o[r][u-1],e[r][u]);return 1===o.length?o[0]:o},l.alter=function(e,t){return l.map(e,t,!0)},l.create=function(e,t,n){var r,i,a=new Array(e);for(o(t)&&(n=t,t=e),r=0;r<e;r++)for(a[r]=new Array(t),i=0;i<t;i++)a[r][i]=n(r,i);return a},l.zeros=function(e,t){return u(t)||(t=e),l.create(e,t,c)},l.ones=function(e,t){return u(t)||(t=e),l.create(e,t,h)},l.rand=function(e,t){return u(t)||(t=e),l.create(e,t,l._random_fn)},l.identity=function(e,t){return u(t)||(t=e),l.create(e,t,p)},l.symmetric=function(e){var t,n,r=e.length;if(e.length!==e[0].length)return!1;for(t=0;t<r;t++)for(n=0;n<r;n++)if(e[n][t]!==e[t][n])return!1;return!0},l.clear=function(e){return l.alter(e,c)},l.seq=function(e,t,n,r){o(r)||(r=!1);var i,s=[],u=a(e,t),l=(t*u-e*u)/((n-1)*u),c=e;for(i=0;c<=t&&i<n;c=(e*u+l*u*++i)/u)s.push(r?r(c,i):c);return s},l.arange=function(e,n,r){var i,a=[];if(r=r||1,n===t&&(n=e,e=0),e===n||0===r)return[];if(e<n&&r<0)return[];if(e>n&&r>0)return[];if(r>0)for(i=e;i<n;i+=r)a.push(i);else for(i=e;i>n;i+=r)a.push(i);return a},l.slice=function(){function e(e,n,r,i){var a,s=[],o=e.length;if(n===t&&r===t&&i===t)return l.copy(e);if(i=i||1,(n=(n=n||0)>=0?n:o+n)===(r=(r=r||e.length)>=0?r:o+r)||0===i)return[];if(n<r&&i<0)return[];if(n>r&&i>0)return[];if(i>0)for(a=n;a<r;a+=i)s.push(e[a]);else for(a=n;a>r;a+=i)s.push(e[a]);return s}return function(t,n){var r,i;return u((n=n||{}).row)?u(n.col)?t[n.row][n.col]:e(l.rowa(t,n.row),(r=n.col||{}).start,r.end,r.step):u(n.col)?e(l.cola(t,n.col),(i=n.row||{}).start,i.end,i.step):(i=n.row||{},r=n.col||{},e(t,i.start,i.end,i.step).map((function(t){return e(t,r.start,r.end,r.step)})))}}(),l.sliceAssign=function(n,r,i){var a,s;if(u(r.row)){if(u(r.col))return n[r.row][r.col]=i;r.col=r.col||{},r.col.start=r.col.start||0,r.col.end=r.col.end||n[0].length,r.col.step=r.col.step||1,a=l.arange(r.col.start,e.min(n.length,r.col.end),r.col.step);var o=r.row;return a.forEach((function(e,t){n[o][e]=i[t]})),n}if(u(r.col)){r.row=r.row||{},r.row.start=r.row.start||0,r.row.end=r.row.end||n.length,r.row.step=r.row.step||1,s=l.arange(r.row.start,e.min(n[0].length,r.row.end),r.row.step);var c=r.col;return s.forEach((function(e,t){n[e][c]=i[t]})),n}return i[0].length===t&&(i=[i]),r.row.start=r.row.start||0,r.row.end=r.row.end||n.length,r.row.step=r.row.step||1,r.col.start=r.col.start||0,r.col.end=r.col.end||n[0].length,r.col.step=r.col.step||1,s=l.arange(r.row.start,e.min(n.length,r.row.end),r.row.step),a=l.arange(r.col.start,e.min(n[0].length,r.col.end),r.col.step),s.forEach((function(e,t){a.forEach((function(r,a){n[e][r]=i[t][a]}))})),n},l.diagonal=function(e){var t=l.zeros(e.length,e.length);return e.forEach((function(e,n){t[n][n]=e})),t},l.copy=function(e){return e.map((function(e){return u(e)?e:e.map((function(e){return e}))}))};var f=l.prototype;return f.length=0,f.push=Array.prototype.push,f.sort=Array.prototype.sort,f.splice=Array.prototype.splice,f.slice=Array.prototype.slice,f.toArray=function(){return this.length>1?r.call(this):r.call(this)[0]},f.map=function(e,t){return l(l.map(this,e,t))},f.cumreduce=function(e,t){return l(l.cumreduce(this,e,t))},f.alter=function(e){return l.alter(this,e),this},function(e){for(var t=0;t<e.length;t++)!function(e){f[e]=function(t){var n,r=this;return t?(setTimeout((function(){t.call(r,f[e].call(r))})),this):(n=l[e](this),s(n)?l(n):n)}}(e[t])}("transpose clear symmetric rows cols dimensions diag antidiag".split(" ")),function(e){for(var t=0;t<e.length;t++)!function(e){f[e]=function(t,n){var r=this;return n?(setTimeout((function(){n.call(r,f[e].call(r,t))})),this):l(l[e](this,t))}}(e[t])}("row col".split(" ")),function(e){for(var t=0;t<e.length;t++)!function(e){f[e]=function(){return l(l[e].apply(null,arguments))}}(e[t])}("create zeros ones rand identity".split(" ")),l}(Math),Math),function(e,t){e.gammaln=function(e){var n,r,i,a=0,s=[76.18009172947146,-86.50532032941678,24.01409824083091,-1.231739572450155,.001208650973866179,-5395239384953e-18],o=1.000000000190015;for(i=(r=n=e)+5.5,i-=(n+.5)*t.log(i);a<6;a++)o+=s[a]/++r;return t.log(2.5066282746310007*o/n)-i},e.loggam=function(e){var n,r,i,a,s,o,u,l=[.08333333333333333,-.002777777777777778,.0007936507936507937,-.0005952380952380952,.0008417508417508418,-.001917526917526918,.00641025641025641,-.02955065359477124,.1796443723688307,-1.3924322169059];if(n=e,u=0,1==e||2==e)return 0;for(e<=7&&(n=e+(u=t.floor(7-e))),r=1/(n*n),i=2*t.PI,s=l[9],o=8;o>=0;o--)s*=r,s+=l[o];if(a=s/n+.5*t.log(i)+(n-.5)*t.log(n)-n,e<=7)for(o=1;o<=u;o++)a-=t.log(n-1),n-=1;return a},e.gammafn=function(e){var n,r,i,a,s=[-1.716185138865495,24.76565080557592,-379.80425647094563,629.3311553128184,866.9662027904133,-31451.272968848367,-36144.413418691176,66456.14382024054],o=[-30.8402300119739,315.35062697960416,-1015.1563674902192,-3107.771671572311,22538.11842098015,4755.846277527881,-134659.9598649693,-115132.2596755535],u=!1,l=0,c=0,h=0,p=e;if(p<=0){if(!(a=p%1+36e-17))return 1/0;u=(1&p?-1:1)*t.PI/t.sin(t.PI*a),p=1-p}for(i=p,r=p<1?p++:(p-=l=(0|p)-1)-1,n=0;n<8;++n)h=(h+s[n])*r,c=c*r+o[n];if(a=h/c+1,i<p)a/=i;else if(i>p)for(n=0;n<l;++n)a*=p,p++;return u&&(a=u/a),a},e.gammap=function(t,n){return e.lowRegGamma(t,n)*e.gammafn(t)},e.lowRegGamma=function(n,r){var i,a=e.gammaln(n),s=n,o=1/n,u=o,l=r+1-n,c=1/1e-30,h=1/l,p=h,f=1,d=-~(8.5*t.log(n>=1?n:1/n)+.4*n+17);if(r<0||n<=0)return NaN;if(r<n+1){for(;f<=d;f++)o+=u*=r/++s;return o*t.exp(-r+n*t.log(r)-a)}for(;f<=d;f++)p*=(h=1/(h=(i=-f*(f-n))*h+(l+=2)))*(c=l+i/c);return 1-p*t.exp(-r+n*t.log(r)-a)},e.factorialln=function(t){return t<0?NaN:e.gammaln(t+1)},e.factorial=function(t){return t<0?NaN:e.gammafn(t+1)},e.combination=function(n,r){return n>170||r>170?t.exp(e.combinationln(n,r)):e.factorial(n)/e.factorial(r)/e.factorial(n-r)},e.combinationln=function(t,n){return e.factorialln(t)-e.factorialln(n)-e.factorialln(t-n)},e.permutation=function(t,n){return e.factorial(t)/e.factorial(t-n)},e.betafn=function(n,r){if(!(n<=0||r<=0))return n+r>170?t.exp(e.betaln(n,r)):e.gammafn(n)*e.gammafn(r)/e.gammafn(n+r)},e.betaln=function(t,n){return e.gammaln(t)+e.gammaln(n)-e.gammaln(t+n)},e.betacf=function(e,n,r){var i,a,s,o,u=1,l=n+r,c=n+1,h=n-1,p=1,f=1-l*e/c;for(t.abs(f)<1e-30&&(f=1e-30),o=f=1/f;u<=100&&(f=1+(a=u*(r-u)*e/((h+(i=2*u))*(n+i)))*f,t.abs(f)<1e-30&&(f=1e-30),p=1+a/p,t.abs(p)<1e-30&&(p=1e-30),o*=(f=1/f)*p,f=1+(a=-(n+u)*(l+u)*e/((n+i)*(c+i)))*f,t.abs(f)<1e-30&&(f=1e-30),p=1+a/p,t.abs(p)<1e-30&&(p=1e-30),o*=s=(f=1/f)*p,!(t.abs(s-1)<3e-7));u++);return o},e.gammapinv=function(n,r){var i,a,s,o,u,l,c=0,h=r-1,p=e.gammaln(r);if(n>=1)return t.max(100,r+100*t.sqrt(r));if(n<=0)return 0;for(r>1?(u=t.log(h),l=t.exp(h*(u-1)-p),o=n<.5?n:1-n,i=(2.30753+.27061*(a=t.sqrt(-2*t.log(o))))/(1+a*(.99229+.04481*a))-a,n<.5&&(i=-i),i=t.max(.001,r*t.pow(1-1/(9*r)-i/(3*t.sqrt(r)),3))):i=n<(a=1-r*(.253+.12*r))?t.pow(n/a,1/r):1-t.log(1-(n-a)/(1-a));c<12;c++){if(i<=0)return 0;if((i-=a=(s=(e.lowRegGamma(r,i)-n)/(a=r>1?l*t.exp(-(i-h)+h*(t.log(i)-u)):t.exp(-i+h*t.log(i)-p)))/(1-.5*t.min(1,s*((r-1)/i-1))))<=0&&(i=.5*(i+a)),t.abs(a)<1e-8*i)break}return i},e.erf=function(e){var n,r,i,a,s=[-1.3026537197817094,.6419697923564902,.019476473204185836,-.00956151478680863,-.000946595344482036,.000366839497852761,42523324806907e-18,-20278578112534e-18,-1624290004647e-18,130365583558e-17,1.5626441722e-8,-8.5238095915e-8,6.529054439e-9,5.059343495e-9,-9.91364156e-10,-2.27365122e-10,96467911e-18,2394038e-18,-6886027e-18,894487e-18,313092e-18,-112708e-18,381e-18,7106e-18,-1523e-18,-94e-18,121e-18,-28e-18],o=s.length-1,u=!1,l=0,c=0;for(e<0&&(e=-e,u=!0),r=4*(n=2/(2+e))-2;o>0;o--)i=l,l=r*l-c+s[o],c=i;return a=n*t.exp(-e*e+.5*(s[0]+r*l)-c),u?a-1:1-a},e.erfc=function(t){return 1-e.erf(t)},e.erfcinv=function(n){var r,i,a,s,o=0;if(n>=2)return-100;if(n<=0)return 100;for(s=n<1?n:2-n,r=-.70711*((2.30753+.27061*(a=t.sqrt(-2*t.log(s/2))))/(1+a*(.99229+.04481*a))-a);o<2;o++)r+=(i=e.erfc(r)-s)/(1.1283791670955126*t.exp(-r*r)-r*i);return n<1?r:-r},e.ibetainv=function(n,r,i){var a,s,o,u,l,c,h,p,f,d,m=r-1,y=i-1,g=0;if(n<=0)return 0;if(n>=1)return 1;for(r>=1&&i>=1?(o=n<.5?n:1-n,c=(2.30753+.27061*(u=t.sqrt(-2*t.log(o))))/(1+u*(.99229+.04481*u))-u,n<.5&&(c=-c),h=(c*c-3)/6,p=2/(1/(2*r-1)+1/(2*i-1)),f=c*t.sqrt(h+p)/p-(1/(2*i-1)-1/(2*r-1))*(h+5/6-2/(3*p)),c=r/(r+i*t.exp(2*f))):(a=t.log(r/(r+i)),s=t.log(i/(r+i)),c=n<(u=t.exp(r*a)/r)/(f=u+(l=t.exp(i*s)/i))?t.pow(r*f*n,1/r):1-t.pow(i*f*(1-n),1/i)),d=-e.gammaln(r)-e.gammaln(i)+e.gammaln(r+i);g<10;g++){if(0===c||1===c)return c;if((c-=u=(l=(e.ibeta(c,r,i)-n)/(u=t.exp(m*t.log(c)+y*t.log(1-c)+d)))/(1-.5*t.min(1,l*(m/c-y/(1-c)))))<=0&&(c=.5*(c+u)),c>=1&&(c=.5*(c+u+1)),t.abs(u)<1e-8*c&&g>0)break}return c},e.ibeta=function(n,r,i){var a=0===n||1===n?0:t.exp(e.gammaln(r+i)-e.gammaln(r)-e.gammaln(i)+r*t.log(n)+i*t.log(1-n));return!(n<0||n>1)&&(n<(r+1)/(r+i+2)?a*e.betacf(n,r,i)/r:1-a*e.betacf(1-n,i,r)/i)},e.randn=function(n,r){var i,a,s,o,u;if(r||(r=n),n)return e.create(n,r,(function(){return e.randn()}));do{i=e._random_fn(),a=1.7156*(e._random_fn()-.5),u=(s=i-.449871)*s+(o=t.abs(a)+.386595)*(.196*o-.25472*s)}while(u>.27597&&(u>.27846||a*a>-4*t.log(i)*i*i));return a/i},e.randg=function(n,r,i){var a,s,o,u,l,c,h=n;if(i||(i=r),n||(n=1),r)return(c=e.zeros(r,i)).alter((function(){return e.randg(n)})),c;n<1&&(n+=1),a=n-1/3,s=1/t.sqrt(9*a);do{do{u=1+s*(l=e.randn())}while(u<=0);u*=u*u,o=e._random_fn()}while(o>1-.331*t.pow(l,4)&&t.log(o)>.5*l*l+a*(1-u+t.log(u)));if(n==h)return a*u;do{o=e._random_fn()}while(0===o);return t.pow(o,1/h)*a*u},function(t){for(var n=0;n<t.length;n++)!function(t){e.fn[t]=function(){return e(e.map(this,(function(n){return e[t](n)})))}}(t[n])}("gammaln gammafn factorial factorialln".split(" ")),function(t){for(var n=0;n<t.length;n++)!function(t){e.fn[t]=function(){return e(e[t].apply(null,arguments))}}(t[n])}("randn".split(" "))}(r,Math),function(e,t){function n(e,n,r,i){for(var a,s=0,o=1,u=1,l=1,c=0,h=0;t.abs((u-h)/u)>i;)h=u,o=l+(a=-(n+c)*(n+r+c)*e/(n+2*c)/(n+2*c+1))*o,u=(s=u+a*s)+(a=(c+=1)*(r-c)*e/(n+2*c-1)/(n+2*c))*u,s/=l=o+a*l,o/=l,u/=l,l=1;return u/n}function r(n,r,i){var a=[.9815606342467192,.9041172563704749,.7699026741943047,.5873179542866175,.3678314989981802,.1252334085114689],s=[.04717533638651183,.10693932599531843,.16007832854334622,.20316742672306592,.2334925365383548,.24914704581340277],o=.5*n;if(o>=8)return 1;var u,l=2*e.normal.cdf(o,0,1,1,0)-1;l=l>=t.exp(-50/i)?t.pow(l,i):0;for(var c=o,h=(8-o)/(u=n>3?2:3),p=c+h,f=0,d=i-1,m=1;m<=u;m++){for(var y=0,g=.5*(p+c),v=.5*(p-c),x=1;x<=12;x++){var b,S=g+v*(6<x?a[(b=12-x+1)-1]:-a[(b=x)-1]),E=S*S;if(E>60)break;var D=2*e.normal.cdf(S,0,1,1,0)*.5-2*e.normal.cdf(S,n,1,1,0)*.5;D>=t.exp(-30/d)&&(y+=D=s[b-1]*t.exp(-.5*E)*t.pow(D,d))}f+=y*=2*v*i/t.sqrt(2*t.PI),c=p,p+=h}return(l+=f)<=t.exp(-30/r)?0:(l=t.pow(l,r))>=1?1:l}!function(t){for(var n=0;n<t.length;n++)!function(t){e[t]=function(e,t,n){return this instanceof arguments.callee?(this._a=e,this._b=t,this._c=n,this):new arguments.callee(e,t,n)},e.fn[t]=function(n,r,i){var a=e[t](n,r,i);return a.data=this,a},e[t].prototype.sample=function(n){var r=this._a,i=this._b,a=this._c;return n?e.alter(n,(function(){return e[t].sample(r,i,a)})):e[t].sample(r,i,a)},function(n){for(var r=0;r<n.length;r++)!function(n){e[t].prototype[n]=function(r){var i=this._a,a=this._b,s=this._c;return r||0===r||(r=this.data),"number"!=typeof r?e.fn.map.call(r,(function(r){return e[t][n](r,i,a,s)})):e[t][n](r,i,a,s)}}(n[r])}("pdf cdf inv".split(" ")),function(n){for(var r=0;r<n.length;r++)!function(n){e[t].prototype[n]=function(){return e[t][n](this._a,this._b,this._c)}}(n[r])}("mean median mode variance".split(" "))}(t[n])}("beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy laplace lognormal noncentralt normal pareto studentt weibull uniform binomial negbin hypgeom poisson triangular tukey arcsine".split(" ")),e.extend(e.beta,{pdf:function(n,r,i){return n>1||n<0?0:1==r&&1==i?1:r<512&&i<512?t.pow(n,r-1)*t.pow(1-n,i-1)/e.betafn(r,i):t.exp((r-1)*t.log(n)+(i-1)*t.log(1-n)-e.betaln(r,i))},cdf:function(t,n,r){return t>1||t<0?1*(t>1):e.ibeta(t,n,r)},inv:function(t,n,r){return e.ibetainv(t,n,r)},mean:function(e,t){return e/(e+t)},median:function(t,n){return e.ibetainv(.5,t,n)},mode:function(e,t){return(e-1)/(e+t-2)},sample:function(t,n){var r=e.randg(t);return r/(r+e.randg(n))},variance:function(e,n){return e*n/(t.pow(e+n,2)*(e+n+1))}}),e.extend(e.centralF,{pdf:function(n,r,i){var a;return n<0?0:r<=2?0===n&&r<2?1/0:0===n&&2===r?1:1/e.betafn(r/2,i/2)*t.pow(r/i,r/2)*t.pow(n,r/2-1)*t.pow(1+r/i*n,-(r+i)/2):(a=r*n/(i+n*r),r*(i/(i+n*r))/2*e.binomial.pdf((r-2)/2,(r+i-2)/2,a))},cdf:function(t,n,r){return t<0?0:e.ibeta(n*t/(n*t+r),n/2,r/2)},inv:function(t,n,r){return r/(n*(1/e.ibetainv(t,n/2,r/2)-1))},mean:function(e,t){return t>2?t/(t-2):void 0},mode:function(e,t){return e>2?t*(e-2)/(e*(t+2)):void 0},sample:function(t,n){return 2*e.randg(t/2)/t/(2*e.randg(n/2)/n)},variance:function(e,t){if(!(t<=4))return 2*t*t*(e+t-2)/(e*(t-2)*(t-2)*(t-4))}}),e.extend(e.cauchy,{pdf:function(e,n,r){return r<0?0:r/(t.pow(e-n,2)+t.pow(r,2))/t.PI},cdf:function(e,n,r){return t.atan((e-n)/r)/t.PI+.5},inv:function(e,n,r){return n+r*t.tan(t.PI*(e-.5))},median:function(e){return e},mode:function(e){return e},sample:function(n,r){return e.randn()*t.sqrt(1/(2*e.randg(.5)))*r+n}}),e.extend(e.chisquare,{pdf:function(n,r){return n<0?0:0===n&&2===r?.5:t.exp((r/2-1)*t.log(n)-n/2-r/2*t.log(2)-e.gammaln(r/2))},cdf:function(t,n){return t<0?0:e.lowRegGamma(n/2,t/2)},inv:function(t,n){return 2*e.gammapinv(t,.5*n)},mean:function(e){return e},median:function(e){return e*t.pow(1-2/(9*e),3)},mode:function(e){return e-2>0?e-2:0},sample:function(t){return 2*e.randg(t/2)},variance:function(e){return 2*e}}),e.extend(e.exponential,{pdf:function(e,n){return e<0?0:n*t.exp(-n*e)},cdf:function(e,n){return e<0?0:1-t.exp(-n*e)},inv:function(e,n){return-t.log(1-e)/n},mean:function(e){return 1/e},median:function(e){return 1/e*t.log(2)},mode:function(){return 0},sample:function(n){return-1/n*t.log(e._random_fn())},variance:function(e){return t.pow(e,-2)}}),e.extend(e.gamma,{pdf:function(n,r,i){return n<0?0:0===n&&1===r?1/i:t.exp((r-1)*t.log(n)-n/i-e.gammaln(r)-r*t.log(i))},cdf:function(t,n,r){return t<0?0:e.lowRegGamma(n,t/r)},inv:function(t,n,r){return e.gammapinv(t,n)*r},mean:function(e,t){return e*t},mode:function(e,t){if(e>1)return(e-1)*t},sample:function(t,n){return e.randg(t)*n},variance:function(e,t){return e*t*t}}),e.extend(e.invgamma,{pdf:function(n,r,i){return n<=0?0:t.exp(-(r+1)*t.log(n)-i/n-e.gammaln(r)+r*t.log(i))},cdf:function(t,n,r){return t<=0?0:1-e.lowRegGamma(n,r/t)},inv:function(t,n,r){return r/e.gammapinv(1-t,n)},mean:function(e,t){return e>1?t/(e-1):void 0},mode:function(e,t){return t/(e+1)},sample:function(t,n){return n/e.randg(t)},variance:function(e,t){if(!(e<=2))return t*t/((e-1)*(e-1)*(e-2))}}),e.extend(e.kumaraswamy,{pdf:function(e,n,r){return 0===e&&1===n?r:1===e&&1===r?n:t.exp(t.log(n)+t.log(r)+(n-1)*t.log(e)+(r-1)*t.log(1-t.pow(e,n)))},cdf:function(e,n,r){return e<0?0:e>1?1:1-t.pow(1-t.pow(e,n),r)},inv:function(e,n,r){return t.pow(1-t.pow(1-e,1/r),1/n)},mean:function(t,n){return n*e.gammafn(1+1/t)*e.gammafn(n)/e.gammafn(1+1/t+n)},median:function(e,n){return t.pow(1-t.pow(2,-1/n),1/e)},mode:function(e,n){if(e>=1&&n>=1&&1!==e&&1!==n)return t.pow((e-1)/(e*n-1),1/e)},variance:function(){throw new Error("variance not yet implemented")}}),e.extend(e.lognormal,{pdf:function(e,n,r){return e<=0?0:t.exp(-t.log(e)-.5*t.log(2*t.PI)-t.log(r)-t.pow(t.log(e)-n,2)/(2*r*r))},cdf:function(n,r,i){return n<0?0:.5+.5*e.erf((t.log(n)-r)/t.sqrt(2*i*i))},inv:function(n,r,i){return t.exp(-1.4142135623730951*i*e.erfcinv(2*n)+r)},mean:function(e,n){return t.exp(e+n*n/2)},median:function(e){return t.exp(e)},mode:function(e,n){return t.exp(e-n*n)},sample:function(n,r){return t.exp(e.randn()*r+n)},variance:function(e,n){return(t.exp(n*n)-1)*t.exp(2*e+n*n)}}),e.extend(e.noncentralt,{pdf:function(n,r,i){return t.abs(i)<1e-14?e.studentt.pdf(n,r):t.abs(n)<1e-14?t.exp(e.gammaln((r+1)/2)-i*i/2-.5*t.log(t.PI*r)-e.gammaln(r/2)):r/n*(e.noncentralt.cdf(n*t.sqrt(1+2/r),r+2,i)-e.noncentralt.cdf(n,r,i))},cdf:function(n,r,i){if(t.abs(i)<1e-14)return e.studentt.cdf(n,r);var a=!1;n<0&&(a=!0,i=-i);for(var s=e.normal.cdf(-i,0,1),o=1e-14+1,u=o,l=n*n/(n*n+r),c=0,h=t.exp(-i*i/2),p=t.exp(-i*i/2-.5*t.log(2)-e.gammaln(1.5))*i;c<200||u>1e-14||o>1e-14;)u=o,c>0&&(h*=i*i/(2*c),p*=i*i/(2*(c+.5))),s+=.5*(o=h*e.beta.cdf(l,c+.5,r/2)+p*e.beta.cdf(l,c+1,r/2)),c++;return a?1-s:s}}),e.extend(e.normal,{pdf:function(e,n,r){return t.exp(-.5*t.log(2*t.PI)-t.log(r)-t.pow(e-n,2)/(2*r*r))},cdf:function(n,r,i){return.5*(1+e.erf((n-r)/t.sqrt(2*i*i)))},inv:function(t,n,r){return-1.4142135623730951*r*e.erfcinv(2*t)+n},mean:function(e){return e},median:function(e){return e},mode:function(e){return e},sample:function(t,n){return e.randn()*n+t},variance:function(e,t){return t*t}}),e.extend(e.pareto,{pdf:function(e,n,r){return e<n?0:r*t.pow(n,r)/t.pow(e,r+1)},cdf:function(e,n,r){return e<n?0:1-t.pow(n/e,r)},inv:function(e,n,r){return n/t.pow(1-e,1/r)},mean:function(e,n){if(!(n<=1))return n*t.pow(e,n)/(n-1)},median:function(e,n){return e*(n*t.SQRT2)},mode:function(e){return e},variance:function(e,n){if(!(n<=2))return e*e*n/(t.pow(n-1,2)*(n-2))}}),e.extend(e.studentt,{pdf:function(n,r){return r=r>1e100?1e100:r,1/(t.sqrt(r)*e.betafn(.5,r/2))*t.pow(1+n*n/r,-(r+1)/2)},cdf:function(n,r){var i=r/2;return e.ibeta((n+t.sqrt(n*n+r))/(2*t.sqrt(n*n+r)),i,i)},inv:function(n,r){var i=e.ibetainv(2*t.min(n,1-n),.5*r,.5);return i=t.sqrt(r*(1-i)/i),n>.5?i:-i},mean:function(e){return e>1?0:void 0},median:function(){return 0},mode:function(){return 0},sample:function(n){return e.randn()*t.sqrt(n/(2*e.randg(n/2)))},variance:function(e){return e>2?e/(e-2):e>1?1/0:void 0}}),e.extend(e.weibull,{pdf:function(e,n,r){return e<0||n<0||r<0?0:r/n*t.pow(e/n,r-1)*t.exp(-t.pow(e/n,r))},cdf:function(e,n,r){return e<0?0:1-t.exp(-t.pow(e/n,r))},inv:function(e,n,r){return n*t.pow(-t.log(1-e),1/r)},mean:function(t,n){return t*e.gammafn(1+1/n)},median:function(e,n){return e*t.pow(t.log(2),1/n)},mode:function(e,n){return n<=1?0:e*t.pow((n-1)/n,1/n)},sample:function(n,r){return n*t.pow(-t.log(e._random_fn()),1/r)},variance:function(n,r){return n*n*e.gammafn(1+2/r)-t.pow(e.weibull.mean(n,r),2)}}),e.extend(e.uniform,{pdf:function(e,t,n){return e<t||e>n?0:1/(n-t)},cdf:function(e,t,n){return e<t?0:e<n?(e-t)/(n-t):1},inv:function(e,t,n){return t+e*(n-t)},mean:function(e,t){return.5*(e+t)},median:function(t,n){return e.mean(t,n)},mode:function(){throw new Error("mode is not yet implemented")},sample:function(t,n){return t/2+n/2+(n/2-t/2)*(2*e._random_fn()-1)},variance:function(e,n){return t.pow(n-e,2)/12}}),e.extend(e.binomial,{pdf:function(n,r,i){return 0===i||1===i?r*i===n?1:0:e.combination(r,n)*t.pow(i,n)*t.pow(1-i,r-n)},cdf:function(r,i,a){var s;if(r<0)return 0;if(r>=i)return 1;if(a<0||a>1||i<=0)return NaN;var o=a,u=(r=t.floor(r))+1,l=i-r,c=u+l,h=t.exp(e.gammaln(c)-e.gammaln(l)-e.gammaln(u)+u*t.log(o)+l*t.log(1-o));return s=o<(u+1)/(c+2)?h*n(o,u,l,1e-10):1-h*n(1-o,l,u,1e-10),t.round(1e10*(1-s))/1e10}}),e.extend(e.negbin,{pdf:function(n,r,i){return n===n>>>0&&(n<0?0:e.combination(n+r-1,r-1)*t.pow(1-i,n)*t.pow(i,r))},cdf:function(t,n,r){var i=0,a=0;if(t<0)return 0;for(;a<=t;a++)i+=e.negbin.pdf(a,n,r);return i}}),e.extend(e.hypgeom,{pdf:function(n,r,i,a){if(n!=n|0)return!1;if(n<0||n<i-(r-a))return 0;if(n>a||n>i)return 0;if(2*i>r)return 2*a>r?e.hypgeom.pdf(r-i-a+n,r,r-i,r-a):e.hypgeom.pdf(a-n,r,r-i,a);if(2*a>r)return e.hypgeom.pdf(i-n,r,i,r-a);if(i<a)return e.hypgeom.pdf(n,r,a,i);for(var s=1,o=0,u=0;u<n;u++){for(;s>1&&o<a;)s*=1-i/(r-o),o++;s*=(a-u)*(i-u)/((u+1)*(r-i-a+u+1))}for(;o<a;o++)s*=1-i/(r-o);return t.min(1,t.max(0,s))},cdf:function(n,r,i,a){if(n<0||n<i-(r-a))return 0;if(n>=a||n>=i)return 1;if(2*i>r)return 2*a>r?e.hypgeom.cdf(r-i-a+n,r,r-i,r-a):1-e.hypgeom.cdf(a-n-1,r,r-i,a);if(2*a>r)return 1-e.hypgeom.cdf(i-n-1,r,i,r-a);if(i<a)return e.hypgeom.cdf(n,r,a,i);for(var s=1,o=1,u=0,l=0;l<n;l++){for(;s>1&&u<a;){var c=1-i/(r-u);o*=c,s*=c,u++}s+=o*=(a-l)*(i-l)/((l+1)*(r-i-a+l+1))}for(;u<a;u++)s*=1-i/(r-u);return t.min(1,t.max(0,s))}}),e.extend(e.poisson,{pdf:function(n,r){return r<0||n%1!=0||n<0?0:t.pow(r,n)*t.exp(-r)/e.factorial(n)},cdf:function(t,n){var r=[],i=0;if(t<0)return 0;for(;i<=t;i++)r.push(e.poisson.pdf(i,n));return e.sum(r)},mean:function(e){return e},variance:function(e){return e},sampleSmall:function(n){var r=1,i=0,a=t.exp(-n);do{i++,r*=e._random_fn()}while(r>a);return i-1},sampleLarge:function(n){var r,i,a,s,o,u,l,c,h,p,f=n;for(s=t.sqrt(f),o=t.log(f),u=.02483*(l=.931+2.53*s)-.059,c=1.1239+1.1328/(l-3.4),h=.9277-3.6224/(l-2);;){if(i=t.random()-.5,a=t.random(),p=.5-t.abs(i),r=t.floor((2*u/p+l)*i+f+.43),p>=.07&&a<=h)return r;if(!(r<0||p<.013&&a>p)&&t.log(a)+t.log(c)-t.log(u/(p*p)+l)<=r*o-f-e.loggam(r+1))return r}},sample:function(e){return e<10?this.sampleSmall(e):this.sampleLarge(e)}}),e.extend(e.triangular,{pdf:function(e,t,n,r){return n<=t||r<t||r>n?NaN:e<t||e>n?0:e<r?2*(e-t)/((n-t)*(r-t)):e===r?2/(n-t):2*(n-e)/((n-t)*(n-r))},cdf:function(e,n,r,i){return r<=n||i<n||i>r?NaN:e<=n?0:e>=r?1:e<=i?t.pow(e-n,2)/((r-n)*(i-n)):1-t.pow(r-e,2)/((r-n)*(r-i))},inv:function(e,n,r,i){return r<=n||i<n||i>r?NaN:e<=(i-n)/(r-n)?n+(r-n)*t.sqrt(e*((i-n)/(r-n))):n+(r-n)*(1-t.sqrt((1-e)*(1-(i-n)/(r-n))))},mean:function(e,t,n){return(e+t+n)/3},median:function(e,n,r){return r<=(e+n)/2?n-t.sqrt((n-e)*(n-r))/t.sqrt(2):r>(e+n)/2?e+t.sqrt((n-e)*(r-e))/t.sqrt(2):void 0},mode:function(e,t,n){return n},sample:function(n,r,i){var a=e._random_fn();return a<(i-n)/(r-n)?n+t.sqrt(a*(r-n)*(i-n)):r-t.sqrt((1-a)*(r-n)*(r-i))},variance:function(e,t,n){return(e*e+t*t+n*n-e*t-e*n-t*n)/18}}),e.extend(e.arcsine,{pdf:function(e,n,r){return r<=n?NaN:e<=n||e>=r?0:2/t.PI*t.pow(t.pow(r-n,2)-t.pow(2*e-n-r,2),-.5)},cdf:function(e,n,r){return e<n?0:e<r?2/t.PI*t.asin(t.sqrt((e-n)/(r-n))):1},inv:function(e,n,r){return n+(.5-.5*t.cos(t.PI*e))*(r-n)},mean:function(e,t){return t<=e?NaN:(e+t)/2},median:function(e,t){return t<=e?NaN:(e+t)/2},mode:function(){throw new Error("mode is not yet implemented")},sample:function(n,r){return(n+r)/2+(r-n)/2*t.sin(2*t.PI*e.uniform.sample(0,1))},variance:function(e,n){return n<=e?NaN:t.pow(n-e,2)/8}}),e.extend(e.laplace,{pdf:function(e,n,r){return r<=0?0:t.exp(-t.abs(e-n)/r)/(2*r)},cdf:function(e,n,r){return r<=0?0:e<n?.5*t.exp((e-n)/r):1-.5*t.exp(-(e-n)/r)},mean:function(e){return e},median:function(e){return e},mode:function(e){return e},variance:function(e,t){return 2*t*t},sample:function(n,r){var i,a=e._random_fn()-.5;return n-r*((i=a)/t.abs(i))*t.log(1-2*t.abs(a))}}),e.extend(e.tukey,{cdf:function(n,i,a){var s=i,o=[.9894009349916499,.9445750230732326,.8656312023878318,.755404408355003,.6178762444026438,.45801677765722737,.2816035507792589,.09501250983763744],u=[.027152459411754096,.062253523938647894,.09515851168249279,.12462897125553388,.14959598881657674,.16915651939500254,.18260341504492358,.1894506104550685];if(n<=0)return 0;if(a<2||s<2)return NaN;if(!Number.isFinite(n))return 1;if(a>25e3)return r(n,1,s);var l,c=.5*a,h=c*t.log(a)-a*t.log(2)-e.gammaln(c),p=c-1,f=.25*a;l=a<=100?1:a<=800?.5:a<=5e3?.25:.125,h+=t.log(l);for(var d=0,m=1;m<=50;m++){for(var y=0,g=(2*m-1)*l,v=1;v<=16;v++){var x,b;8<v?(x=v-8-1,b=h+p*t.log(g+o[x]*l)-(o[x]*l+g)*f):(x=v-1,b=h+p*t.log(g-o[x]*l)+(o[x]*l-g)*f),b>=-30&&(y+=r(8<v?n*t.sqrt(.5*(o[x]*l+g)):n*t.sqrt(.5*(-o[x]*l+g)),1,s)*u[x]*t.exp(b))}if(m*l>=1&&y<=1e-14)break;d+=y}if(y>1e-14)throw new Error("tukey.cdf failed to converge");return d>1&&(d=1),d},inv:function(n,r,i){if(i<2||r<2)return NaN;if(n<0||n>1)return NaN;if(0===n)return 0;if(1===n)return 1/0;var a,s=function(e,n,r){var i=.5-.5*e,a=t.sqrt(t.log(1/(i*i))),s=a+((((-453642210148e-16*a-.204231210125)*a-.342242088547)*a-1)*a+.322232421088)/((((.0038560700634*a+.10353775285)*a+.531103462366)*a+.588581570495)*a+.099348462606);r<120&&(s+=(s*s*s+s)/r/4);var o=.8832-.2368*s;return r<120&&(o+=-1.214/r+1.208*s/r),s*(o*t.log(n-1)+1.4142)}(n,r,i),o=e.tukey.cdf(s,r,i)-n;a=o>0?t.max(0,s-1):s+1;for(var u,l=e.tukey.cdf(a,r,i)-n,c=1;c<50;c++)if(u=a-l*(a-s)/(l-o),o=l,s=a,u<0&&(u=0,l=-n),l=e.tukey.cdf(u,r,i)-n,a=u,t.abs(a-s)<1e-4)return u;throw new Error("tukey.inv failed to converge")}})}(r,Math),function(e,t){var n,r,i=Array.prototype.push,a=e.utils.isArray;function s(t){return a(t)||t instanceof e}e.extend({add:function(t,n){return s(n)?(s(n[0])||(n=[n]),e.map(t,(function(e,t,r){return e+n[t][r]}))):e.map(t,(function(e){return e+n}))},subtract:function(t,n){return s(n)?(s(n[0])||(n=[n]),e.map(t,(function(e,t,r){return e-n[t][r]||0}))):e.map(t,(function(e){return e-n}))},divide:function(t,n){return s(n)?(s(n[0])||(n=[n]),e.multiply(t,e.inv(n))):e.map(t,(function(e){return e/n}))},multiply:function(t,n){var r,i,a,o,u,l,c,h;if(void 0===t.length&&void 0===n.length)return t*n;if(u=t.length,l=t[0].length,c=e.zeros(u,a=s(n)?n[0].length:l),h=0,s(n)){for(;h<a;h++)for(r=0;r<u;r++){for(o=0,i=0;i<l;i++)o+=t[r][i]*n[i][h];c[r][h]=o}return 1===u&&1===h?c[0][0]:c}return e.map(t,(function(e){return e*n}))},outer:function(t,n){return e.multiply(t.map((function(e){return[e]})),[n])},dot:function(t,n){s(t[0])||(t=[t]),s(n[0])||(n=[n]);for(var r,i,a=1===t[0].length&&1!==t.length?e.transpose(t):t,o=1===n[0].length&&1!==n.length?e.transpose(n):n,u=[],l=0,c=a.length,h=a[0].length;l<c;l++){for(u[l]=[],r=0,i=0;i<h;i++)r+=a[l][i]*o[l][i];u[l]=r}return 1===u.length?u[0]:u},pow:function(n,r){return e.map(n,(function(e){return t.pow(e,r)}))},exp:function(n){return e.map(n,(function(e){return t.exp(e)}))},log:function(n){return e.map(n,(function(e){return t.log(e)}))},abs:function(n){return e.map(n,(function(e){return t.abs(e)}))},norm:function(e,n){var r=0,i=0;for(isNaN(n)&&(n=2),s(e[0])&&(e=e[0]);i<e.length;i++)r+=t.pow(t.abs(e[i]),n);return t.pow(r,1/n)},angle:function(n,r){return t.acos(e.dot(n,r)/(e.norm(n)*e.norm(r)))},aug:function(e,t){var n,r=[];for(n=0;n<e.length;n++)r.push(e[n].slice());for(n=0;n<r.length;n++)i.apply(r[n],t[n]);return r},inv:function(t){for(var n,r=t.length,i=t[0].length,a=e.identity(r,i),s=e.gauss_jordan(t,a),o=[],u=0;u<r;u++)for(o[u]=[],n=i;n<s[0].length;n++)o[u][n-i]=s[u][n];return o},det:function(e){var t,n=e.length,r=2*n,i=new Array(r),a=n-1,s=r-1,o=a-n+1,u=s,l=0,c=0;if(2===n)return e[0][0]*e[1][1]-e[0][1]*e[1][0];for(;l<r;l++)i[l]=1;for(l=0;l<n;l++){for(t=0;t<n;t++)i[o<0?o+n:o]*=e[l][t],i[u<n?u+n:u]*=e[l][t],o++,u--;o=--a-n+1,u=--s}for(l=0;l<n;l++)c+=i[l];for(;l<r;l++)c-=i[l];return c},gauss_elimination:function(n,r){var i,a,s,o,u=0,l=0,c=n.length,h=n[0].length,p=1,f=0,d=[];for(i=(n=e.aug(n,r))[0].length,u=0;u<c;u++){for(a=n[u][u],l=u,o=u+1;o<h;o++)a<t.abs(n[o][u])&&(a=n[o][u],l=o);if(l!=u)for(o=0;o<i;o++)s=n[u][o],n[u][o]=n[l][o],n[l][o]=s;for(l=u+1;l<c;l++)for(p=n[l][u]/n[u][u],o=u;o<i;o++)n[l][o]=n[l][o]-p*n[u][o]}for(u=c-1;u>=0;u--){for(f=0,l=u+1;l<=c-1;l++)f+=d[l]*n[u][l];d[u]=(n[u][i-1]-f)/n[u][u]}return d},gauss_jordan:function(n,r){var i,a,s,o=e.aug(n,r),u=o.length,l=o[0].length,c=0;for(a=0;a<u;a++){var h=a;for(s=a+1;s<u;s++)t.abs(o[s][a])>t.abs(o[h][a])&&(h=s);var p=o[a];for(o[a]=o[h],o[h]=p,s=a+1;s<u;s++)for(c=o[s][a]/o[a][a],i=a;i<l;i++)o[s][i]-=o[a][i]*c}for(a=u-1;a>=0;a--){for(c=o[a][a],s=0;s<a;s++)for(i=l-1;i>a-1;i--)o[s][i]-=o[a][i]*o[s][a]/c;for(o[a][a]/=c,i=u;i<l;i++)o[a][i]/=c}return o},triaUpSolve:function(t,n){var r,i=t[0].length,a=e.zeros(1,i)[0],s=!1;return null!=n[0].length&&(n=n.map((function(e){return e[0]})),s=!0),e.arange(i-1,-1,-1).forEach((function(s){r=e.arange(s+1,i).map((function(e){return a[e]*t[s][e]})),a[s]=(n[s]-e.sum(r))/t[s][s]})),s?a.map((function(e){return[e]})):a},triaLowSolve:function(t,n){var r,i=t[0].length,a=e.zeros(1,i)[0],s=!1;return null!=n[0].length&&(n=n.map((function(e){return e[0]})),s=!0),e.arange(i).forEach((function(i){r=e.arange(i).map((function(e){return t[i][e]*a[e]})),a[i]=(n[i]-e.sum(r))/t[i][i]})),s?a.map((function(e){return[e]})):a},lu:function(t){var n,r=t.length,i=e.identity(r),a=e.zeros(t.length,t[0].length);return e.arange(r).forEach((function(e){a[0][e]=t[0][e]})),e.arange(1,r).forEach((function(s){e.arange(s).forEach((function(r){n=e.arange(r).map((function(e){return i[s][e]*a[e][r]})),i[s][r]=(t[s][r]-e.sum(n))/a[r][r]})),e.arange(s,r).forEach((function(r){n=e.arange(s).map((function(e){return i[s][e]*a[e][r]})),a[s][r]=t[n.length][r]-e.sum(n)}))})),[i,a]},cholesky:function(n){var r,i=n.length,a=e.zeros(n.length,n[0].length);return e.arange(i).forEach((function(s){r=e.arange(s).map((function(e){return t.pow(a[s][e],2)})),a[s][s]=t.sqrt(n[s][s]-e.sum(r)),e.arange(s+1,i).forEach((function(t){r=e.arange(s).map((function(e){return a[s][e]*a[t][e]})),a[t][s]=(n[s][t]-e.sum(r))/a[s][s]}))})),a},gauss_jacobi:function(n,r,i,a){for(var s,o,u,l,c=0,h=0,p=n.length,f=[],d=[],m=[];c<p;c++)for(f[c]=[],d[c]=[],m[c]=[],h=0;h<p;h++)c>h?(f[c][h]=n[c][h],d[c][h]=m[c][h]=0):c<h?(d[c][h]=n[c][h],f[c][h]=m[c][h]=0):(m[c][h]=n[c][h],f[c][h]=d[c][h]=0);for(u=e.multiply(e.multiply(e.inv(m),e.add(f,d)),-1),o=e.multiply(e.inv(m),r),s=i,l=e.add(e.multiply(u,i),o),c=2;t.abs(e.norm(e.subtract(l,s)))>a;)s=l,l=e.add(e.multiply(u,s),o),c++;return l},gauss_seidel:function(n,r,i,a){for(var s,o,u,l,c,h=0,p=n.length,f=[],d=[],m=[];h<p;h++)for(f[h]=[],d[h]=[],m[h]=[],s=0;s<p;s++)h>s?(f[h][s]=n[h][s],d[h][s]=m[h][s]=0):h<s?(d[h][s]=n[h][s],f[h][s]=m[h][s]=0):(m[h][s]=n[h][s],f[h][s]=d[h][s]=0);for(l=e.multiply(e.multiply(e.inv(e.add(m,f)),d),-1),u=e.multiply(e.inv(e.add(m,f)),r),o=i,c=e.add(e.multiply(l,i),u),h=2;t.abs(e.norm(e.subtract(c,o)))>a;)o=c,c=e.add(e.multiply(l,o),u),h+=1;return c},SOR:function(n,r,i,a,s){for(var o,u,l,c,h,p=0,f=n.length,d=[],m=[],y=[];p<f;p++)for(d[p]=[],m[p]=[],y[p]=[],o=0;o<f;o++)p>o?(d[p][o]=n[p][o],m[p][o]=y[p][o]=0):p<o?(m[p][o]=n[p][o],d[p][o]=y[p][o]=0):(y[p][o]=n[p][o],d[p][o]=m[p][o]=0);for(c=e.multiply(e.inv(e.add(y,e.multiply(d,s))),e.subtract(e.multiply(y,1-s),e.multiply(m,s))),l=e.multiply(e.multiply(e.inv(e.add(y,e.multiply(d,s))),r),s),u=i,h=e.add(e.multiply(c,i),l),p=2;t.abs(e.norm(e.subtract(h,u)))>a;)u=h,h=e.add(e.multiply(c,u),l),p++;return h},householder:function(n){for(var r,i,a,s,o=n.length,u=n[0].length,l=0,c=[],h=[];l<o-1;l++){for(r=0,s=l+1;s<u;s++)r+=n[s][l]*n[s][l];for(r=(n[l+1][l]>0?-1:1)*t.sqrt(r),i=t.sqrt((r*r-n[l+1][l]*r)/2),(c=e.zeros(o,1))[l+1][0]=(n[l+1][l]-r)/(2*i),a=l+2;a<o;a++)c[a][0]=n[a][l]/(2*i);h=e.subtract(e.identity(o,u),e.multiply(e.multiply(c,e.transpose(c)),2)),n=e.multiply(h,e.multiply(n,h))}return n},QR:(n=e.sum,r=e.arange,function(i){var a,s,o,u=i.length,l=i[0].length,c=e.zeros(l,l);for(i=e.copy(i),s=0;s<l;s++){for(c[s][s]=t.sqrt(n(r(u).map((function(e){return i[e][s]*i[e][s]})))),a=0;a<u;a++)i[a][s]=i[a][s]/c[s][s];for(o=s+1;o<l;o++)for(c[s][o]=n(r(u).map((function(e){return i[e][s]*i[e][o]}))),a=0;a<u;a++)i[a][o]=i[a][o]-i[a][s]*c[s][o]}return[i,c]}),lstsq:function(t,n){var r=!1;void 0===n[0].length&&(n=n.map((function(e){return[e]})),r=!0);var i=e.QR(t),a=i[0],s=i[1],o=t[0].length,u=e.slice(a,{col:{end:o}}),l=function(t){var n=(t=e.copy(t)).length,r=e.identity(n);return e.arange(n-1,-1,-1).forEach((function(n){e.sliceAssign(r,{row:n},e.divide(e.slice(r,{row:n}),t[n][n])),e.sliceAssign(t,{row:n},e.divide(e.slice(t,{row:n}),t[n][n])),e.arange(n).forEach((function(i){var a=e.multiply(t[i][n],-1),s=e.slice(t,{row:i}),o=e.multiply(e.slice(t,{row:n}),a);e.sliceAssign(t,{row:i},e.add(s,o));var u=e.slice(r,{row:i}),l=e.multiply(e.slice(r,{row:n}),a);e.sliceAssign(r,{row:i},e.add(u,l))}))})),r}(e.slice(s,{row:{end:o}})),c=e.transpose(u);void 0===c[0].length&&(c=[c]);var h=e.multiply(e.multiply(l,c),n);return void 0===h.length&&(h=[[h]]),r?h.map((function(e){return e[0]})):h},jacobi:function(n){for(var r,i,a,s,o,u,l,c=1,h=n.length,p=e.identity(h,h),f=[];1===c;){for(o=n[0][1],a=0,s=1,r=0;r<h;r++)for(i=0;i<h;i++)r!=i&&o<t.abs(n[r][i])&&(o=t.abs(n[r][i]),a=r,s=i);for(u=n[a][a]===n[s][s]?n[a][s]>0?t.PI/4:-t.PI/4:t.atan(2*n[a][s]/(n[a][a]-n[s][s]))/2,(l=e.identity(h,h))[a][a]=t.cos(u),l[a][s]=-t.sin(u),l[s][a]=t.sin(u),l[s][s]=t.cos(u),p=e.multiply(p,l),n=e.multiply(e.multiply(e.inv(l),n),l),c=0,r=1;r<h;r++)for(i=1;i<h;i++)r!=i&&t.abs(n[r][i])>.001&&(c=1)}for(r=0;r<h;r++)f.push(n[r][r]);return[p,f]},rungekutta:function(e,t,n,r,i,a){var s,o,u;if(2===a)for(;r<=n;)i+=((s=t*e(r,i))+(o=t*e(r+t,i+s)))/2,r+=t;if(4===a)for(;r<=n;)i+=((s=t*e(r,i))+2*(o=t*e(r+t/2,i+s/2))+2*(u=t*e(r+t/2,i+o/2))+t*e(r+t,i+u))/6,r+=t;return i},romberg:function(e,n,r,i){for(var a,s,o,u,l,c=0,h=(r-n)/2,p=[],f=[],d=[];c<i/2;){for(l=e(n),o=n,u=0;o<=r;o+=h,u++)p[u]=o;for(a=p.length,o=1;o<a-1;o++)l+=(o%2!=0?4:2)*e(p[o]);l=h/3*(l+e(r)),d[c]=l,h/=2,c++}for(s=d.length,a=1;1!==s;){for(o=0;o<s-1;o++)f[o]=(t.pow(4,a)*d[o+1]-d[o])/(t.pow(4,a)-1);s=f.length,d=f,f=[],a++}return d},richardson:function(e,n,r,i){function a(e,t){for(var n,r=0,i=e.length;r<i;r++)e[r]===t&&(n=r);return n}for(var s,o,u,l,c,h=t.abs(r-e[a(e,r)+1]),p=0,f=[],d=[];i>=h;)s=a(e,r+i),o=a(e,r),f[p]=(n[s]-2*n[o]+n[2*o-s])/(i*i),i/=2,p++;for(l=f.length,u=1;1!=l;){for(c=0;c<l-1;c++)d[c]=(t.pow(4,u)*f[c+1]-f[c])/(t.pow(4,u)-1);l=d.length,f=d,d=[],u++}return f},simpson:function(e,t,n,r){for(var i,a=(n-t)/r,s=e(t),o=[],u=t,l=0,c=1;u<=n;u+=a,l++)o[l]=u;for(i=o.length;c<i-1;c++)s+=(c%2!=0?4:2)*e(o[c]);return a/3*(s+e(n))},hermite:function(e,t,n,r){for(var i,a=e.length,s=0,o=0,u=[],l=[],c=[],h=[];o<a;o++){for(u[o]=1,i=0;i<a;i++)o!=i&&(u[o]*=(r-e[i])/(e[o]-e[i]));for(l[o]=0,i=0;i<a;i++)o!=i&&(l[o]+=1/(e[o]-e[i]));c[o]=(1-2*(r-e[o])*l[o])*(u[o]*u[o]),h[o]=(r-e[o])*(u[o]*u[o]),s+=c[o]*t[o]+h[o]*n[o]}return s},lagrange:function(e,t,n){for(var r,i,a=0,s=0,o=e.length;s<o;s++){for(i=t[s],r=0;r<o;r++)s!=r&&(i*=(n-e[r])/(e[s]-e[r]));a+=i}return a},cubic_spline:function(t,n,r){for(var i,a,s=t.length,o=0,u=[],l=[],c=[],h=[],p=[],f=[];o<s-1;o++)h[o]=t[o+1]-t[o];for(c[0]=0,o=1;o<s-1;o++)c[o]=3/h[o]*(n[o+1]-n[o])-3/h[o-1]*(n[o]-n[o-1]);for(o=1;o<s-1;o++)u[o]=[],l[o]=[],u[o][o-1]=h[o-1],u[o][o]=2*(h[o-1]+h[o]),u[o][o+1]=h[o],l[o][0]=c[o];for(a=e.multiply(e.inv(u),l),i=0;i<s-1;i++)p[i]=(n[i+1]-n[i])/h[i]-h[i]*(a[i+1][0]+2*a[i][0])/3,f[i]=(a[i+1][0]-a[i][0])/(3*h[i]);for(i=0;i<s&&!(t[i]>r);i++);return n[i-=1]+(r-t[i])*p[i]+e.sq(r-t[i])*a[i]+(r-t[i])*e.sq(r-t[i])*f[i]},gauss_quadrature:function(){throw new Error("gauss_quadrature not yet implemented")},PCA:function(t){var n,r,i,a,s,o=t.length,u=t[0].length,l=0,c=[],h=[],p=[],f=[],d=[],m=[],y=[];for(l=0;l<o;l++)c[l]=e.sum(t[l])/u;for(l=0;l<u;l++)for(d[l]=[],n=0;n<o;n++)d[l][n]=t[n][l]-c[n];for(d=e.transpose(d),l=0;l<o;l++)for(m[l]=[],n=0;n<o;n++)m[l][n]=e.dot([d[l]],[d[n]])/(u-1);for(s=(i=e.jacobi(m))[0],h=i[1],y=e.transpose(s),l=0;l<h.length;l++)for(n=l;n<h.length;n++)h[l]<h[n]&&(r=h[l],h[l]=h[n],h[n]=r,p=y[l],y[l]=y[n],y[n]=p);for(a=e.transpose(d),l=0;l<o;l++)for(f[l]=[],n=0;n<a.length;n++)f[l][n]=e.dot([y[l]],[a[n]]);return[t,h,y,f]}}),function(t){for(var n=0;n<t.length;n++)!function(t){e.fn[t]=function(n,r){var i=this;return r?(setTimeout((function(){r.call(i,e.fn[t].call(i,n))}),15),this):"number"==typeof e[t](this,n)?e[t](this,n):e(e[t](this,n))}}(t[n])}("add divide multiply subtract dot pow exp log abs norm angle".split(" "))}(r,Math),function(e,t){var n=[].slice,r=e.utils.isNumber,i=e.utils.isArray;function a(e,n,r,i){if(e>1||r>1||e<=0||r<=0)throw new Error("Proportions should be greater than 0 and less than 1");var a=(e*n+r*i)/(n+i);return(e-r)/t.sqrt(a*(1-a)*(1/n+1/i))}e.extend({zscore:function(){var t=n.call(arguments);return r(t[1])?(t[0]-t[1])/t[2]:(t[0]-e.mean(t[1]))/e.stdev(t[1],t[2])},ztest:function(){var r,a=n.call(arguments);return i(a[1])?(r=e.zscore(a[0],a[1],a[3]),1===a[2]?e.normal.cdf(-t.abs(r),0,1):2*e.normal.cdf(-t.abs(r),0,1)):a.length>2?(r=e.zscore(a[0],a[1],a[2]),1===a[3]?e.normal.cdf(-t.abs(r),0,1):2*e.normal.cdf(-t.abs(r),0,1)):(r=a[0],1===a[1]?e.normal.cdf(-t.abs(r),0,1):2*e.normal.cdf(-t.abs(r),0,1))}}),e.extend(e.fn,{zscore:function(e,t){return(e-this.mean())/this.stdev(t)},ztest:function(n,r,i){var a=t.abs(this.zscore(n,i));return 1===r?e.normal.cdf(-a,0,1):2*e.normal.cdf(-a,0,1)}}),e.extend({tscore:function(){var r=n.call(arguments);return 4===r.length?(r[0]-r[1])/(r[2]/t.sqrt(r[3])):(r[0]-e.mean(r[1]))/(e.stdev(r[1],!0)/t.sqrt(r[1].length))},ttest:function(){var i,a=n.call(arguments);return 5===a.length?(i=t.abs(e.tscore(a[0],a[1],a[2],a[3])),1===a[4]?e.studentt.cdf(-i,a[3]-1):2*e.studentt.cdf(-i,a[3]-1)):r(a[1])?(i=t.abs(a[0]),1==a[2]?e.studentt.cdf(-i,a[1]-1):2*e.studentt.cdf(-i,a[1]-1)):(i=t.abs(e.tscore(a[0],a[1])),1==a[2]?e.studentt.cdf(-i,a[1].length-1):2*e.studentt.cdf(-i,a[1].length-1))}}),e.extend(e.fn,{tscore:function(e){return(e-this.mean())/(this.stdev(!0)/t.sqrt(this.cols()))},ttest:function(n,r){return 1===r?1-e.studentt.cdf(t.abs(this.tscore(n)),this.cols()-1):2*e.studentt.cdf(-t.abs(this.tscore(n)),this.cols()-1)}}),e.extend({anovafscore:function(){var r,i,a,s,o,u,l,c,h=n.call(arguments);if(1===h.length){for(o=new Array(h[0].length),l=0;l<h[0].length;l++)o[l]=h[0][l];h=o}for(i=new Array,l=0;l<h.length;l++)i=i.concat(h[l]);for(a=e.mean(i),r=0,l=0;l<h.length;l++)r+=h[l].length*t.pow(e.mean(h[l])-a,2);for(r/=h.length-1,u=0,l=0;l<h.length;l++)for(s=e.mean(h[l]),c=0;c<h[l].length;c++)u+=t.pow(h[l][c]-s,2);return r/(u/=i.length-h.length)},anovaftest:function(){var t,i,a,s,o=n.call(arguments);if(r(o[0]))return 1-e.centralF.cdf(o[0],o[1],o[2]);var u=e.anovafscore(o);for(t=o.length-1,a=0,s=0;s<o.length;s++)a+=o[s].length;return i=a-t-1,1-e.centralF.cdf(u,t,i)},ftest:function(t,n,r){return 1-e.centralF.cdf(t,n,r)}}),e.extend(e.fn,{anovafscore:function(){return e.anovafscore(this.toArray())},anovaftes:function(){var t,n=0;for(t=0;t<this.length;t++)n+=this[t].length;return e.ftest(this.anovafscore(),this.length-1,n-this.length)}}),e.extend({qscore:function(){var i,a,s,o,u,l=n.call(arguments);return r(l[0])?(i=l[0],a=l[1],s=l[2],o=l[3],u=l[4]):(i=e.mean(l[0]),a=e.mean(l[1]),s=l[0].length,o=l[1].length,u=l[2]),t.abs(i-a)/(u*t.sqrt((1/s+1/o)/2))},qtest:function(){var t,r=n.call(arguments);3===r.length?(t=r[0],r=r.slice(1)):7===r.length?(t=e.qscore(r[0],r[1],r[2],r[3],r[4]),r=r.slice(5)):(t=e.qscore(r[0],r[1],r[2]),r=r.slice(3));var i=r[0],a=r[1];return 1-e.tukey.cdf(t,a,i-a)},tukeyhsd:function(t){for(var n=e.pooledstdev(t),r=t.map((function(t){return e.mean(t)})),i=t.reduce((function(e,t){return e+t.length}),0),a=[],s=0;s<t.length;++s)for(var o=s+1;o<t.length;++o){var u=e.qtest(r[s],r[o],t[s].length,t[o].length,n,i,t.length);a.push([[s,o],u])}return a}}),e.extend({normalci:function(){var r,i=n.call(arguments),a=new Array(2);return r=4===i.length?t.abs(e.normal.inv(i[1]/2,0,1)*i[2]/t.sqrt(i[3])):t.abs(e.normal.inv(i[1]/2,0,1)*e.stdev(i[2])/t.sqrt(i[2].length)),a[0]=i[0]-r,a[1]=i[0]+r,a},tci:function(){var r,i=n.call(arguments),a=new Array(2);return r=4===i.length?t.abs(e.studentt.inv(i[1]/2,i[3]-1)*i[2]/t.sqrt(i[3])):t.abs(e.studentt.inv(i[1]/2,i[2].length-1)*e.stdev(i[2],!0)/t.sqrt(i[2].length)),a[0]=i[0]-r,a[1]=i[0]+r,a},significant:function(e,t){return e<t}}),e.extend(e.fn,{normalci:function(t,n){return e.normalci(t,n,this.toArray())},tci:function(t,n){return e.tci(t,n,this.toArray())}}),e.extend(e.fn,{oneSidedDifferenceOfProportions:function(t,n,r,i){var s=a(t,n,r,i);return e.ztest(s,1)},twoSidedDifferenceOfProportions:function(t,n,r,i){var s=a(t,n,r,i);return e.ztest(s,2)}})}(r,Math),r.models=function(){function e(e,t){var n=e.length,i=t[0].length-1,a=n-i-1,s=r.lstsq(t,e),o=r.multiply(t,s.map((function(e){return[e]}))).map((function(e){return e[0]})),u=r.subtract(e,o),l=r.mean(e),c=r.sum(o.map((function(e){return Math.pow(e-l,2)}))),h=r.sum(e.map((function(e,t){return Math.pow(e-o[t],2)}))),p=c+h;return{exog:t,endog:e,nobs:n,df_model:i,df_resid:a,coef:s,predict:o,resid:u,ybar:l,SST:p,SSE:c,SSR:h,R2:c/p}}function t(t){var n,i,a=(n=t.exog,i=n[0].length,r.arange(i).map((function(t){var a=r.arange(i).filter((function(e){return e!==t}));return e(r.col(n,t).map((function(e){return e[0]})),r.col(n,a))}))),s=Math.sqrt(t.SSR/t.df_resid),o=a.map((function(e){var t=e.SST,n=e.R2;return s/Math.sqrt(t*(1-n))})),u=t.coef.map((function(e,t){return(e-0)/o[t]})),l=u.map((function(e){var n=r.studentt.cdf(e,t.df_resid);return 2*(n>.5?1-n:n)})),c=r.studentt.inv(.975,t.df_resid),h=t.coef.map((function(e,t){var n=c*o[t];return[e-n,e+n]}));return{se:o,t:u,p:l,sigmaHat:s,interval95:h}}return{ols:function(n,i){var a=e(n,i),s=t(a),o=function(e){var t,n,i,a=e.R2/e.df_model/((1-e.R2)/e.df_resid);return{F_statistic:a,pvalue:1-(t=a,n=e.df_model,i=e.df_resid,r.beta.cdf(t/(i/n+t),n/2,i/2))}}(a),u=1-(1-a.R2)*((a.nobs-1)/a.df_resid);return a.t=s,a.f=o,a.adjust_R2=u,a}}}(),r.extend({buildxmatrix:function(){for(var e=new Array(arguments.length),t=0;t<arguments.length;t++){var n=[1];e[t]=n.concat(arguments[t])}return r(e)},builddxmatrix:function(){for(var e=new Array(arguments[0].length),t=0;t<arguments[0].length;t++){var n=[1];e[t]=n.concat(arguments[0][t])}return r(e)},buildjxmatrix:function(e){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=e[n];return r.builddxmatrix(t)},buildymatrix:function(e){return r(e).transpose()},buildjymatrix:function(e){return e.transpose()},matrixmult:function(e,t){var n,i,a,s,o;if(e.cols()==t.rows()){if(t.rows()>1){for(s=[],n=0;n<e.rows();n++)for(s[n]=[],i=0;i<t.cols();i++){for(o=0,a=0;a<e.cols();a++)o+=e.toArray()[n][a]*t.toArray()[a][i];s[n][i]=o}return r(s)}for(s=[],n=0;n<e.rows();n++)for(s[n]=[],i=0;i<t.cols();i++){for(o=0,a=0;a<e.cols();a++)o+=e.toArray()[n][a]*t.toArray()[i];s[n][i]=o}return r(s)}},regress:function(e,t){var n=r.xtranspxinv(e),i=e.transpose(),a=r.matrixmult(r(n),i);return r.matrixmult(a,t)},regresst:function(e,t,n){var i=r.regress(e,t),a={anova:{}},s=r.jMatYBar(e,i);a.yBar=s;var o=t.mean();a.anova.residuals=r.residuals(t,s),a.anova.ssr=r.ssr(s,o),a.anova.msr=a.anova.ssr/(e[0].length-1),a.anova.sse=r.sse(t,s),a.anova.mse=a.anova.sse/(t.length-(e[0].length-1)-1),a.anova.sst=r.sst(t,o),a.anova.mst=a.anova.sst/(t.length-1),a.anova.r2=1-a.anova.sse/a.anova.sst,a.anova.r2<0&&(a.anova.r2=0),a.anova.fratio=a.anova.msr/a.anova.mse,a.anova.pvalue=r.anovaftest(a.anova.fratio,e[0].length-1,t.length-(e[0].length-1)-1),a.anova.rmse=Math.sqrt(a.anova.mse),a.anova.r2adj=1-a.anova.mse/a.anova.mst,a.anova.r2adj<0&&(a.anova.r2adj=0),a.stats=new Array(e[0].length);for(var u,l,c,h=r.xtranspxinv(e),p=0;p<i.length;p++)u=Math.sqrt(a.anova.mse*Math.abs(h[p][p])),l=Math.abs(i[p]/u),c=r.ttest(l,t.length-e[0].length-1,n),a.stats[p]=[i[p],u,l,c];return a.regress=i,a},xtranspx:function(e){return r.matrixmult(e.transpose(),e)},xtranspxinv:function(e){var t=r.matrixmult(e.transpose(),e);return r.inv(t)},jMatYBar:function(e,t){var n=r.matrixmult(e,t);return new r(n)},residuals:function(e,t){return r.matrixsubtract(e,t)},ssr:function(e,t){for(var n=0,r=0;r<e.length;r++)n+=Math.pow(e[r]-t,2);return n},sse:function(e,t){for(var n=0,r=0;r<e.length;r++)n+=Math.pow(e[r]-t[r],2);return n},sst:function(e,t){for(var n=0,r=0;r<e.length;r++)n+=Math.pow(e[r]-t,2);return n},matrixsubtract:function(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++){n[i]=new Array(e[i].length);for(var a=0;a<e[i].length;a++)n[i][a]=e[i][a]-t[i][a]}return r(n)}}),r.jStat=r,r)},,,,,function(e,t,n){e.exports=function(){"use strict";var e="millisecond",t="second",n="minute",r="hour",i="day",a="week",s="month",o="quarter",u="year",l=/^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,c=/\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,h=function(e,t,n){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(n)+e},p={s:h,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),r=Math.floor(n/60),i=n%60;return(t<=0?"+":"-")+h(r,2,"0")+":"+h(i,2,"0")},m:function(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,s),i=t-r<0,a=e.clone().add(n+(i?-1:1),s);return Number(-(n+(t-r)/(i?r-a:a-r))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(l){return{M:s,y:u,w:a,d:i,h:r,m:n,s:t,ms:e,Q:o}[l]||String(l||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},f={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},d="en",m={};m[d]=f;var y=function(e){return e instanceof b},g=function(e,t,n){var r;if(!e)return d;if("string"==typeof e)m[e]&&(r=e),t&&(m[e]=t,r=e);else{var i=e.name;m[i]=e,r=i}return n||(d=r),r},v=function(e,t,n){if(y(e))return e.clone();var r=t?"string"==typeof t?{format:t,pl:n}:t:{};return r.date=e,new b(r)},x=p;x.l=g,x.i=y,x.w=function(e,t){return v(e,{locale:t.$L,utc:t.$u,$offset:t.$offset})};var b=function(){function h(e){this.$L=this.$L||g(e.locale,null,!0),this.parse(e)}var p=h.prototype;return p.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(x.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(l);if(r)return n?new Date(Date.UTC(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)):new Date(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)}return new Date(t)}(e),this.init()},p.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},p.$utils=function(){return x},p.isValid=function(){return!("Invalid Date"===this.$d.toString())},p.isSame=function(e,t){var n=v(e);return this.startOf(t)<=n&&n<=this.endOf(t)},p.isAfter=function(e,t){return v(e)<this.startOf(t)},p.isBefore=function(e,t){return this.endOf(t)<v(e)},p.$g=function(e,t,n){return x.u(e)?this[t]:this.set(n,e)},p.year=function(e){return this.$g(e,"$y",u)},p.month=function(e){return this.$g(e,"$M",s)},p.day=function(e){return this.$g(e,"$W",i)},p.date=function(e){return this.$g(e,"$D","date")},p.hour=function(e){return this.$g(e,"$H",r)},p.minute=function(e){return this.$g(e,"$m",n)},p.second=function(e){return this.$g(e,"$s",t)},p.millisecond=function(t){return this.$g(t,"$ms",e)},p.unix=function(){return Math.floor(this.valueOf()/1e3)},p.valueOf=function(){return this.$d.getTime()},p.startOf=function(e,o){var l=this,c=!!x.u(o)||o,h=x.p(e),p=function(e,t){var n=x.w(l.$u?Date.UTC(l.$y,t,e):new Date(l.$y,t,e),l);return c?n:n.endOf(i)},f=function(e,t){return x.w(l.toDate()[e].apply(l.toDate(),(c?[0,0,0,0]:[23,59,59,999]).slice(t)),l)},d=this.$W,m=this.$M,y=this.$D,g="set"+(this.$u?"UTC":"");switch(h){case u:return c?p(1,0):p(31,11);case s:return c?p(1,m):p(0,m+1);case a:var v=this.$locale().weekStart||0,b=(d<v?d+7:d)-v;return p(c?y-b:y+(6-b),m);case i:case"date":return f(g+"Hours",0);case r:return f(g+"Minutes",1);case n:return f(g+"Seconds",2);case t:return f(g+"Milliseconds",3);default:return this.clone()}},p.endOf=function(e){return this.startOf(e,!1)},p.$set=function(a,o){var l,c=x.p(a),h="set"+(this.$u?"UTC":""),p=(l={},l[i]=h+"Date",l.date=h+"Date",l[s]=h+"Month",l[u]=h+"FullYear",l[r]=h+"Hours",l[n]=h+"Minutes",l[t]=h+"Seconds",l[e]=h+"Milliseconds",l)[c],f=c===i?this.$D+(o-this.$W):o;if(c===s||c===u){var d=this.clone().set("date",1);d.$d[p](f),d.init(),this.$d=d.set("date",Math.min(this.$D,d.daysInMonth())).toDate()}else p&&this.$d[p](f);return this.init(),this},p.set=function(e,t){return this.clone().$set(e,t)},p.get=function(e){return this[x.p(e)]()},p.add=function(e,o){var l,c=this;e=Number(e);var h=x.p(o),p=function(t){var n=v(c);return x.w(n.date(n.date()+Math.round(t*e)),c)};if(h===s)return this.set(s,this.$M+e);if(h===u)return this.set(u,this.$y+e);if(h===i)return p(1);if(h===a)return p(7);var f=(l={},l[n]=6e4,l[r]=36e5,l[t]=1e3,l)[h]||1,d=this.$d.getTime()+e*f;return x.w(d,this)},p.subtract=function(e,t){return this.add(-1*e,t)},p.format=function(e){var t=this;if(!this.isValid())return"Invalid Date";var n=e||"YYYY-MM-DDTHH:mm:ssZ",r=x.z(this),i=this.$locale(),a=this.$H,s=this.$m,o=this.$M,u=i.weekdays,l=i.months,h=function(e,r,i,a){return e&&(e[r]||e(t,n))||i[r].substr(0,a)},p=function(e){return x.s(a%12||12,e,"0")},f=i.meridiem||function(e,t,n){var r=e<12?"AM":"PM";return n?r.toLowerCase():r},d={YY:String(this.$y).slice(-2),YYYY:this.$y,M:o+1,MM:x.s(o+1,2,"0"),MMM:h(i.monthsShort,o,l,3),MMMM:l[o]||l(this,n),D:this.$D,DD:x.s(this.$D,2,"0"),d:String(this.$W),dd:h(i.weekdaysMin,this.$W,u,2),ddd:h(i.weekdaysShort,this.$W,u,3),dddd:u[this.$W],H:String(a),HH:x.s(a,2,"0"),h:p(1),hh:p(2),a:f(a,s,!0),A:f(a,s,!1),m:String(s),mm:x.s(s,2,"0"),s:String(this.$s),ss:x.s(this.$s,2,"0"),SSS:x.s(this.$ms,3,"0"),Z:r};return n.replace(c,(function(e,t){return t||d[e]||r.replace(":","")}))},p.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},p.diff=function(e,l,c){var h,p=x.p(l),f=v(e),d=6e4*(f.utcOffset()-this.utcOffset()),m=this-f,y=x.m(this,f);return y=(h={},h[u]=y/12,h[s]=y,h[o]=y/3,h[a]=(m-d)/6048e5,h[i]=(m-d)/864e5,h[r]=m/36e5,h[n]=m/6e4,h[t]=m/1e3,h)[p]||m,c?y:x.a(y)},p.daysInMonth=function(){return this.endOf(s).$D},p.$locale=function(){return m[this.$L]},p.locale=function(e,t){if(!e)return this.$L;var n=this.clone();return n.$L=g(e,t,!0),n},p.clone=function(){return x.w(this.$d,this)},p.toDate=function(){return new Date(this.valueOf())},p.toJSON=function(){return this.isValid()?this.toISOString():null},p.toISOString=function(){return this.$d.toISOString()},p.toString=function(){return this.$d.toUTCString()},h}();return v.prototype=b.prototype,v.extend=function(e,t){return e(t,b,v),v},v.locale=g,v.isDayjs=y,v.unix=function(e){return v(1e3*e)},v.en=m[d],v.Ls=m,v}()},,function(e,t){var n,r,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,l=[],c=!1,h=-1;function p(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&f())}function f(){if(!c){var e=o(p);c=!0;for(var t=l.length;t;){for(u=l,l=[];++h<t;)u&&u[h].run();h=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||c||o(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(59)),s=r(n(114));t.default=function(e){var t=e.use(i.default),n=t.namedTypes,r=t.builders,o=t.builtInTypes.number,u=t.builtInTypes.array,l=e.use(a.default),c=e.use(s.default),h=function e(t,n,r){if(!(this instanceof e))throw new Error("NodePath constructor cannot be invoked without 'new'");l.call(this,t,n,r)},p=h.prototype=Object.create(l.prototype,{constructor:{value:h,enumerable:!1,writable:!0,configurable:!0}});function f(e){return n.BinaryExpression.check(e)||n.LogicalExpression.check(e)}Object.defineProperties(p,{node:{get:function(){return Object.defineProperty(this,"node",{configurable:!0,value:this._computeNode()}),this.node}},parent:{get:function(){return Object.defineProperty(this,"parent",{configurable:!0,value:this._computeParent()}),this.parent}},scope:{get:function(){return Object.defineProperty(this,"scope",{configurable:!0,value:this._computeScope()}),this.scope}}}),p.replace=function(){return delete this.node,delete this.parent,delete this.scope,l.prototype.replace.apply(this,arguments)},p.prune=function(){var e=this.parent;return this.replace(),function(e){if(n.VariableDeclaration.check(e.node)){var t=e.get("declarations").value;if(!t||0===t.length)return e.prune()}else if(n.ExpressionStatement.check(e.node)){if(!e.get("expression").value)return e.prune()}else n.IfStatement.check(e.node)&&function(e){var t=e.get("test").value,i=e.get("alternate").value,a=e.get("consequent").value;if(a||i){if(!a&&i){var s=r.unaryExpression("!",t,!0);n.UnaryExpression.check(t)&&"!"===t.operator&&(s=t.argument),e.get("test").replace(s),e.get("consequent").replace(i),e.get("alternate").replace()}}else{var o=r.expressionStatement(t);e.replace(o)}}(e);return e}(e)},p._computeNode=function(){var e=this.value;if(n.Node.check(e))return e;var t=this.parentPath;return t&&t.node||null},p._computeParent=function(){var e=this.value,t=this.parentPath;if(!n.Node.check(e)){for(;t&&!n.Node.check(t.value);)t=t.parentPath;t&&(t=t.parentPath)}for(;t&&!n.Node.check(t.value);)t=t.parentPath;return t||null},p._computeScope=function(){var e=this.value,t=this.parentPath,r=t&&t.scope;return n.Node.check(e)&&c.isEstablishedBy(e)&&(r=new c(this,r)),r||null},p.getValueProperty=function(e){return t.getFieldValue(this.value,e)},p.needsParens=function(e){var t=this.parentPath;if(!t)return!1;var r=this.value;if(!n.Expression.check(r))return!1;if("Identifier"===r.type)return!1;for(;!n.Node.check(t.value);)if(!(t=t.parentPath))return!1;var i=t.value;switch(r.type){case"UnaryExpression":case"SpreadElement":case"SpreadProperty":return"MemberExpression"===i.type&&"object"===this.name&&i.object===r;case"BinaryExpression":case"LogicalExpression":switch(i.type){case"CallExpression":return"callee"===this.name&&i.callee===r;case"UnaryExpression":case"SpreadElement":case"SpreadProperty":return!0;case"MemberExpression":return"object"===this.name&&i.object===r;case"BinaryExpression":case"LogicalExpression":var a=r,s=i.operator,u=d[s],l=a.operator,c=d[l];if(u>c)return!0;if(u===c&&"right"===this.name){if(i.right!==a)throw new Error("Nodes must be equal");return!0}default:return!1}case"SequenceExpression":switch(i.type){case"ForStatement":return!1;case"ExpressionStatement":return"expression"!==this.name;default:return!0}case"YieldExpression":switch(i.type){case"BinaryExpression":case"LogicalExpression":case"UnaryExpression":case"SpreadElement":case"SpreadProperty":case"CallExpression":case"MemberExpression":case"NewExpression":case"ConditionalExpression":case"YieldExpression":return!0;default:return!1}case"Literal":return"MemberExpression"===i.type&&o.check(r.value)&&"object"===this.name&&i.object===r;case"AssignmentExpression":case"ConditionalExpression":switch(i.type){case"UnaryExpression":case"SpreadElement":case"SpreadProperty":case"BinaryExpression":case"LogicalExpression":return!0;case"CallExpression":return"callee"===this.name&&i.callee===r;case"ConditionalExpression":return"test"===this.name&&i.test===r;case"MemberExpression":return"object"===this.name&&i.object===r;default:return!1}default:if("NewExpression"===i.type&&"callee"===this.name&&i.callee===r)return m(r)}return!(!0===e||this.canBeFirstInStatement()||!this.firstInStatement())};var d={};function m(e){return!!n.CallExpression.check(e)||(u.check(e)?e.some(m):!!n.Node.check(e)&&t.someField(e,(function(e,t){return m(t)})))}return[["||"],["&&"],["|"],["^"],["&"],["==","===","!=","!=="],["<",">","<=",">=","in","instanceof"],[">>","<<",">>>"],["+","-"],["*","/","%"]].forEach((function(e,t){e.forEach((function(e){d[e]=t}))})),p.canBeFirstInStatement=function(){var e=this.node;return!n.FunctionExpression.check(e)&&!n.ObjectExpression.check(e)},p.firstInStatement=function(){return function(e){for(var t,r;e.parent;e=e.parent){if(t=e.node,r=e.parent.node,n.BlockStatement.check(r)&&"body"===e.parent.name&&0===e.name){if(r.body[0]!==t)throw new Error("Nodes must be equal");return!0}if(n.ExpressionStatement.check(r)&&"expression"===e.name){if(r.expression!==t)throw new Error("Nodes must be equal");return!0}if(n.SequenceExpression.check(r)&&"expressions"===e.parent.name&&0===e.name){if(r.expressions[0]!==t)throw new Error("Nodes must be equal")}else if(n.CallExpression.check(r)&&"callee"===e.name){if(r.callee!==t)throw new Error("Nodes must be equal")}else if(n.MemberExpression.check(r)&&"object"===e.name){if(r.object!==t)throw new Error("Nodes must be equal")}else if(n.ConditionalExpression.check(r)&&"test"===e.name){if(r.test!==t)throw new Error("Nodes must be equal")}else if(f(r)&&"left"===e.name){if(r.left!==t)throw new Error("Nodes must be equal")}else{if(!n.UnaryExpression.check(r)||r.prefix||"argument"!==e.name)return!1;if(r.argument!==t)throw new Error("Nodes must be equal")}}return!0}(this)},h},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=Object.prototype.hasOwnProperty;t.default=function(e){var t=e.use(i.default),n=t.builtInTypes.array,r=t.builtInTypes.number,s=function e(t,n,r){if(!(this instanceof e))throw new Error("Path constructor cannot be invoked without 'new'");if(n){if(!(n instanceof e))throw new Error("")}else n=null,r=null;this.value=t,this.parentPath=n,this.name=r,this.__childCache=null},o=s.prototype;function u(e){return e.__childCache||(e.__childCache=Object.create(null))}function l(e,t){var n=u(e),r=e.getValueProperty(t),i=n[t];return a.call(n,t)&&i.value===r||(i=n[t]=new e.constructor(r,e,t)),i}function c(){}function h(e,t,i,s){if(n.assert(e.value),0===t)return c;var o=e.value.length;if(o<1)return c;var l=arguments.length;2===l?(i=0,s=o):3===l?(i=Math.max(i,0),s=o):(i=Math.max(i,0),s=Math.min(s,o)),r.assert(i),r.assert(s);for(var h=Object.create(null),p=u(e),f=i;f<s;++f)if(a.call(e.value,f)){var d=e.get(f);if(d.name!==f)throw new Error("");var m=f+t;d.name=m,h[m]=d,delete p[f]}return delete p.length,function(){for(var t in h){var n=h[t];if(n.name!==+t)throw new Error("");p[t]=n,e.value[t]=n.value}}}function p(e){if(!(e instanceof s))throw new Error("");var t=e.parentPath;if(!t)return e;var r=t.value,i=u(t);if(r[e.name]===e.value)i[e.name]=e;else if(n.check(r)){var a=r.indexOf(e.value);a>=0&&(i[e.name=a]=e)}else r[e.name]=e.value,i[e.name]=e;if(r[e.name]!==e.value)throw new Error("");if(e.parentPath.get(e.name)!==e)throw new Error("");return e}return o.getValueProperty=function(e){return this.value[e]},o.get=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=this,r=e.length,i=0;i<r;++i)n=l(n,e[i]);return n},o.each=function(e,t){var n=[],r=this.value.length,i=0;for(i=0;i<r;++i)a.call(this.value,i)&&(n[i]=this.get(i));for(t=t||this,i=0;i<r;++i)a.call(n,i)&&e.call(t,n[i])},o.map=function(e,t){var n=[];return this.each((function(t){n.push(e.call(this,t))}),t),n},o.filter=function(e,t){var n=[];return this.each((function(t){e.call(this,t)&&n.push(t)}),t),n},o.shift=function(){var e=h(this,-1),t=this.value.shift();return e(),t},o.unshift=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=h(this,e.length),r=this.value.unshift.apply(this.value,e);return n(),r},o.push=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.assert(this.value),delete u(this).length,this.value.push.apply(this.value,e)},o.pop=function(){n.assert(this.value);var e=u(this);return delete e[this.value.length-1],delete e.length,this.value.pop()},o.insertAt=function(e){var t=arguments.length,n=h(this,t-1,e);if(n===c&&t<=1)return this;e=Math.max(e,0);for(var r=1;r<t;++r)this.value[e+r-1]=arguments[r];return n(),this},o.insertBefore=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=this.parentPath,r=e.length,i=[this.name],a=0;a<r;++a)i.push(e[a]);return n.insertAt.apply(n,i)},o.insertAfter=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=this.parentPath,r=e.length,i=[this.name+1],a=0;a<r;++a)i.push(e[a]);return n.insertAt.apply(n,i)},o.replace=function(e){var t=[],r=this.parentPath.value,i=u(this.parentPath),a=arguments.length;if(p(this),n.check(r)){for(var s=r.length,o=h(this.parentPath,a-1,this.name+1),l=[this.name,1],c=0;c<a;++c)l.push(arguments[c]);var f=r.splice.apply(r,l);if(f[0]!==this.value)throw new Error("");if(r.length!==s-1+a)throw new Error("");if(o(),0===a)delete this.value,delete i[this.name],this.__childCache=null;else{if(r[this.name]!==e)throw new Error("");for(this.value!==e&&(this.value=e,this.__childCache=null),c=0;c<a;++c)t.push(this.parentPath.get(this.name+c));if(t[0]!==this)throw new Error("")}}else if(1===a)this.value!==e&&(this.__childCache=null),this.value=r[this.name]=e,t.push(this);else{if(0!==a)throw new Error("Could not replace path");delete r[this.name],delete this.value,this.__childCache=null}return t},s},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(37)),a=r(n(3)),s=r(n(14));t.default=function(e){e.use(i.default);var t=e.use(a.default),n=t.Type.def,r=t.Type.or,o=e.use(s.default).defaults;n("Function").field("generator",Boolean,o.false).field("expression",Boolean,o.false).field("defaults",[r(n("Expression"),null)],o.emptyArray).field("rest",r(n("Identifier"),null),o.null),n("RestElement").bases("Pattern").build("argument").field("argument",n("Pattern")).field("typeAnnotation",r(n("TypeAnnotation"),n("TSTypeAnnotation"),null),o.null),n("SpreadElementPattern").bases("Pattern").build("argument").field("argument",n("Pattern")),n("FunctionDeclaration").build("id","params","body","generator","expression"),n("FunctionExpression").build("id","params","body","generator","expression"),n("ArrowFunctionExpression").bases("Function","Expression").build("params","body","expression").field("id",null,o.null).field("body",r(n("BlockStatement"),n("Expression"))).field("generator",!1,o.false),n("ForOfStatement").bases("Statement").build("left","right","body").field("left",r(n("VariableDeclaration"),n("Pattern"))).field("right",n("Expression")).field("body",n("Statement")),n("YieldExpression").bases("Expression").build("argument","delegate").field("argument",r(n("Expression"),null)).field("delegate",Boolean,o.false),n("GeneratorExpression").bases("Expression").build("body","blocks","filter").field("body",n("Expression")).field("blocks",[n("ComprehensionBlock")]).field("filter",r(n("Expression"),null)),n("ComprehensionExpression").bases("Expression").build("body","blocks","filter").field("body",n("Expression")).field("blocks",[n("ComprehensionBlock")]).field("filter",r(n("Expression"),null)),n("ComprehensionBlock").bases("Node").build("left","right","each").field("left",n("Pattern")).field("right",n("Expression")).field("each",Boolean),n("Property").field("key",r(n("Literal"),n("Identifier"),n("Expression"))).field("value",r(n("Expression"),n("Pattern"))).field("method",Boolean,o.false).field("shorthand",Boolean,o.false).field("computed",Boolean,o.false),n("ObjectProperty").field("shorthand",Boolean,o.false),n("PropertyPattern").bases("Pattern").build("key","pattern").field("key",r(n("Literal"),n("Identifier"),n("Expression"))).field("pattern",n("Pattern")).field("computed",Boolean,o.false),n("ObjectPattern").bases("Pattern").build("properties").field("properties",[r(n("PropertyPattern"),n("Property"))]),n("ArrayPattern").bases("Pattern").build("elements").field("elements",[r(n("Pattern"),null)]),n("MethodDefinition").bases("Declaration").build("kind","key","value","static").field("kind",r("constructor","method","get","set")).field("key",n("Expression")).field("value",n("Function")).field("computed",Boolean,o.false).field("static",Boolean,o.false),n("SpreadElement").bases("Node").build("argument").field("argument",n("Expression")),n("ArrayExpression").field("elements",[r(n("Expression"),n("SpreadElement"),n("RestElement"),null)]),n("NewExpression").field("arguments",[r(n("Expression"),n("SpreadElement"))]),n("CallExpression").field("arguments",[r(n("Expression"),n("SpreadElement"))]),n("AssignmentPattern").bases("Pattern").build("left","right").field("left",n("Pattern")).field("right",n("Expression"));var u=r(n("MethodDefinition"),n("VariableDeclarator"),n("ClassPropertyDefinition"),n("ClassProperty"));n("ClassProperty").bases("Declaration").build("key").field("key",r(n("Literal"),n("Identifier"),n("Expression"))).field("computed",Boolean,o.false),n("ClassPropertyDefinition").bases("Declaration").build("definition").field("definition",u),n("ClassBody").bases("Declaration").build("body").field("body",[u]),n("ClassDeclaration").bases("Declaration").build("id","body","superClass").field("id",r(n("Identifier"),null)).field("body",n("ClassBody")).field("superClass",r(n("Expression"),null),o.null),n("ClassExpression").bases("Expression").build("id","body","superClass").field("id",r(n("Identifier"),null),o.null).field("body",n("ClassBody")).field("superClass",r(n("Expression"),null),o.null),n("Specifier").bases("Node"),n("ModuleSpecifier").bases("Specifier").field("local",r(n("Identifier"),null),o.null).field("id",r(n("Identifier"),null),o.null).field("name",r(n("Identifier"),null),o.null),n("ImportSpecifier").bases("ModuleSpecifier").build("id","name"),n("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("id"),n("ImportDefaultSpecifier").bases("ModuleSpecifier").build("id"),n("ImportDeclaration").bases("Declaration").build("specifiers","source","importKind").field("specifiers",[r(n("ImportSpecifier"),n("ImportNamespaceSpecifier"),n("ImportDefaultSpecifier"))],o.emptyArray).field("source",n("Literal")).field("importKind",r("value","type"),(function(){return"value"})),n("TaggedTemplateExpression").bases("Expression").build("tag","quasi").field("tag",n("Expression")).field("quasi",n("TemplateLiteral")),n("TemplateLiteral").bases("Expression").build("quasis","expressions").field("quasis",[n("TemplateElement")]).field("expressions",[n("Expression")]),n("TemplateElement").bases("Node").build("value","tail").field("value",{cooked:String,raw:String}).field("tail",Boolean)},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(20)),a=r(n(62)),s=r(n(3)),o=r(n(14));t.default=function(e){e.use(i.default),e.use(a.default);var t=e.use(s.default),n=t.Type.def,r=t.Type.or,u=e.use(o.default).defaults;n("Flow").bases("Node"),n("FlowType").bases("Flow"),n("AnyTypeAnnotation").bases("FlowType").build(),n("EmptyTypeAnnotation").bases("FlowType").build(),n("MixedTypeAnnotation").bases("FlowType").build(),n("VoidTypeAnnotation").bases("FlowType").build(),n("NumberTypeAnnotation").bases("FlowType").build(),n("NumberLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",Number).field("raw",String),n("NumericLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",Number).field("raw",String),n("StringTypeAnnotation").bases("FlowType").build(),n("StringLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",String).field("raw",String),n("BooleanTypeAnnotation").bases("FlowType").build(),n("BooleanLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",Boolean).field("raw",String),n("TypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation",n("FlowType")),n("NullableTypeAnnotation").bases("FlowType").build("typeAnnotation").field("typeAnnotation",n("FlowType")),n("NullLiteralTypeAnnotation").bases("FlowType").build(),n("NullTypeAnnotation").bases("FlowType").build(),n("ThisTypeAnnotation").bases("FlowType").build(),n("ExistsTypeAnnotation").bases("FlowType").build(),n("ExistentialTypeParam").bases("FlowType").build(),n("FunctionTypeAnnotation").bases("FlowType").build("params","returnType","rest","typeParameters").field("params",[n("FunctionTypeParam")]).field("returnType",n("FlowType")).field("rest",r(n("FunctionTypeParam"),null)).field("typeParameters",r(n("TypeParameterDeclaration"),null)),n("FunctionTypeParam").bases("Node").build("name","typeAnnotation","optional").field("name",n("Identifier")).field("typeAnnotation",n("FlowType")).field("optional",Boolean),n("ArrayTypeAnnotation").bases("FlowType").build("elementType").field("elementType",n("FlowType")),n("ObjectTypeAnnotation").bases("FlowType").build("properties","indexers","callProperties").field("properties",[r(n("ObjectTypeProperty"),n("ObjectTypeSpreadProperty"))]).field("indexers",[n("ObjectTypeIndexer")],u.emptyArray).field("callProperties",[n("ObjectTypeCallProperty")],u.emptyArray).field("inexact",r(Boolean,void 0),u[void 0]).field("exact",Boolean,u.false).field("internalSlots",[n("ObjectTypeInternalSlot")],u.emptyArray),n("Variance").bases("Node").build("kind").field("kind",r("plus","minus"));var l=r(n("Variance"),"plus","minus",null);n("ObjectTypeProperty").bases("Node").build("key","value","optional").field("key",r(n("Literal"),n("Identifier"))).field("value",n("FlowType")).field("optional",Boolean).field("variance",l,u.null),n("ObjectTypeIndexer").bases("Node").build("id","key","value").field("id",n("Identifier")).field("key",n("FlowType")).field("value",n("FlowType")).field("variance",l,u.null),n("ObjectTypeCallProperty").bases("Node").build("value").field("value",n("FunctionTypeAnnotation")).field("static",Boolean,u.false),n("QualifiedTypeIdentifier").bases("Node").build("qualification","id").field("qualification",r(n("Identifier"),n("QualifiedTypeIdentifier"))).field("id",n("Identifier")),n("GenericTypeAnnotation").bases("FlowType").build("id","typeParameters").field("id",r(n("Identifier"),n("QualifiedTypeIdentifier"))).field("typeParameters",r(n("TypeParameterInstantiation"),null)),n("MemberTypeAnnotation").bases("FlowType").build("object","property").field("object",n("Identifier")).field("property",r(n("MemberTypeAnnotation"),n("GenericTypeAnnotation"))),n("UnionTypeAnnotation").bases("FlowType").build("types").field("types",[n("FlowType")]),n("IntersectionTypeAnnotation").bases("FlowType").build("types").field("types",[n("FlowType")]),n("TypeofTypeAnnotation").bases("FlowType").build("argument").field("argument",n("FlowType")),n("ObjectTypeSpreadProperty").bases("Node").build("argument").field("argument",n("FlowType")),n("ObjectTypeInternalSlot").bases("Node").build("id","value","optional","static","method").field("id",n("Identifier")).field("value",n("FlowType")).field("optional",Boolean).field("static",Boolean).field("method",Boolean),n("TypeParameterDeclaration").bases("Node").build("params").field("params",[n("TypeParameter")]),n("TypeParameterInstantiation").bases("Node").build("params").field("params",[n("FlowType")]),n("TypeParameter").bases("FlowType").build("name","variance","bound").field("name",String).field("variance",l,u.null).field("bound",r(n("TypeAnnotation"),null),u.null),n("ClassProperty").field("variance",l,u.null),n("ClassImplements").bases("Node").build("id").field("id",n("Identifier")).field("superClass",r(n("Expression"),null),u.null).field("typeParameters",r(n("TypeParameterInstantiation"),null),u.null),n("InterfaceTypeAnnotation").bases("FlowType").build("body","extends").field("body",n("ObjectTypeAnnotation")).field("extends",r([n("InterfaceExtends")],null),u.null),n("InterfaceDeclaration").bases("Declaration").build("id","body","extends").field("id",n("Identifier")).field("typeParameters",r(n("TypeParameterDeclaration"),null),u.null).field("body",n("ObjectTypeAnnotation")).field("extends",[n("InterfaceExtends")]),n("DeclareInterface").bases("InterfaceDeclaration").build("id","body","extends"),n("InterfaceExtends").bases("Node").build("id").field("id",n("Identifier")).field("typeParameters",r(n("TypeParameterInstantiation"),null),u.null),n("TypeAlias").bases("Declaration").build("id","typeParameters","right").field("id",n("Identifier")).field("typeParameters",r(n("TypeParameterDeclaration"),null)).field("right",n("FlowType")),n("OpaqueType").bases("Declaration").build("id","typeParameters","impltype","supertype").field("id",n("Identifier")).field("typeParameters",r(n("TypeParameterDeclaration"),null)).field("impltype",n("FlowType")).field("supertype",n("FlowType")),n("DeclareTypeAlias").bases("TypeAlias").build("id","typeParameters","right"),n("DeclareOpaqueType").bases("TypeAlias").build("id","typeParameters","supertype"),n("TypeCastExpression").bases("Expression").build("expression","typeAnnotation").field("expression",n("Expression")).field("typeAnnotation",n("TypeAnnotation")),n("TupleTypeAnnotation").bases("FlowType").build("types").field("types",[n("FlowType")]),n("DeclareVariable").bases("Statement").build("id").field("id",n("Identifier")),n("DeclareFunction").bases("Statement").build("id").field("id",n("Identifier")),n("DeclareClass").bases("InterfaceDeclaration").build("id"),n("DeclareModule").bases("Statement").build("id","body").field("id",r(n("Identifier"),n("Literal"))).field("body",n("BlockStatement")),n("DeclareModuleExports").bases("Statement").build("typeAnnotation").field("typeAnnotation",n("TypeAnnotation")),n("DeclareExportDeclaration").bases("Declaration").build("default","declaration","specifiers","source").field("default",Boolean).field("declaration",r(n("DeclareVariable"),n("DeclareFunction"),n("DeclareClass"),n("FlowType"),null)).field("specifiers",[r(n("ExportSpecifier"),n("ExportBatchSpecifier"))],u.emptyArray).field("source",r(n("Literal"),null),u.null),n("DeclareExportAllDeclaration").bases("Declaration").build("source").field("source",r(n("Literal"),null),u.null),n("FlowPredicate").bases("Flow"),n("InferredPredicate").bases("FlowPredicate").build(),n("DeclaredPredicate").bases("FlowPredicate").build("value").field("value",n("Expression")),n("CallExpression").field("typeArguments",r(null,n("TypeParameterInstantiation")),u.null),n("NewExpression").field("typeArguments",r(null,n("TypeParameterInstantiation")),u.null)},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(14));t.default=function(e){var t=e.use(i.default),n=t.Type.def,r=t.Type.or,s=e.use(a.default).defaults,o=r(n("TypeAnnotation"),n("TSTypeAnnotation"),null),u=r(n("TypeParameterDeclaration"),n("TSTypeParameterDeclaration"),null);n("Identifier").field("typeAnnotation",o,s.null),n("ObjectPattern").field("typeAnnotation",o,s.null),n("Function").field("returnType",o,s.null).field("typeParameters",u,s.null),n("ClassProperty").build("key","value","typeAnnotation","static").field("value",r(n("Expression"),null)).field("static",Boolean,s.false).field("typeAnnotation",o,s.null),["ClassDeclaration","ClassExpression"].forEach((function(e){n(e).field("typeParameters",u,s.null).field("superTypeParameters",r(n("TypeParameterInstantiation"),n("TSTypeParameterInstantiation"),null),s.null).field("implements",r([n("ClassImplements")],[n("TSExpressionWithTypeArguments")]),s.emptyArray)}))},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(14)),s=r(n(20));t.default=function(e){e.use(s.default);var t=e.use(i.default),n=e.use(a.default).defaults,r=t.Type.def,o=t.Type.or;r("Noop").bases("Statement").build(),r("DoExpression").bases("Expression").build("body").field("body",[r("Statement")]),r("Super").bases("Expression").build(),r("BindExpression").bases("Expression").build("object","callee").field("object",o(r("Expression"),null)).field("callee",r("Expression")),r("Decorator").bases("Node").build("expression").field("expression",r("Expression")),r("Property").field("decorators",o([r("Decorator")],null),n.null),r("MethodDefinition").field("decorators",o([r("Decorator")],null),n.null),r("MetaProperty").bases("Expression").build("meta","property").field("meta",r("Identifier")).field("property",r("Identifier")),r("ParenthesizedExpression").bases("Expression").build("expression").field("expression",r("Expression")),r("ImportSpecifier").bases("ModuleSpecifier").build("imported","local").field("imported",r("Identifier")),r("ImportDefaultSpecifier").bases("ModuleSpecifier").build("local"),r("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("local"),r("ExportDefaultDeclaration").bases("Declaration").build("declaration").field("declaration",o(r("Declaration"),r("Expression"))),r("ExportNamedDeclaration").bases("Declaration").build("declaration","specifiers","source").field("declaration",o(r("Declaration"),null)).field("specifiers",[r("ExportSpecifier")],n.emptyArray).field("source",o(r("Literal"),null),n.null),r("ExportSpecifier").bases("ModuleSpecifier").build("local","exported").field("exported",r("Identifier")),r("ExportNamespaceSpecifier").bases("Specifier").build("exported").field("exported",r("Identifier")),r("ExportDefaultSpecifier").bases("Specifier").build("exported").field("exported",r("Identifier")),r("ExportAllDeclaration").bases("Declaration").build("exported","source").field("exported",o(r("Identifier"),null)).field("source",r("Literal")),r("CommentBlock").bases("Comment").build("value","leading","trailing"),r("CommentLine").bases("Comment").build("value","leading","trailing"),r("Directive").bases("Node").build("value").field("value",r("DirectiveLiteral")),r("DirectiveLiteral").bases("Node","Expression").build("value").field("value",String,n["use strict"]),r("InterpreterDirective").bases("Node").build("value").field("value",String),r("BlockStatement").bases("Statement").build("body").field("body",[r("Statement")]).field("directives",[r("Directive")],n.emptyArray),r("Program").bases("Node").build("body").field("body",[r("Statement")]).field("directives",[r("Directive")],n.emptyArray).field("interpreter",o(r("InterpreterDirective"),null),n.null),r("StringLiteral").bases("Literal").build("value").field("value",String),r("NumericLiteral").bases("Literal").build("value").field("value",Number).field("raw",o(String,null),n.null).field("extra",{rawValue:Number,raw:String},(function(){return{rawValue:this.value,raw:this.value+""}})),r("BigIntLiteral").bases("Literal").build("value").field("value",o(String,Number)).field("extra",{rawValue:String,raw:String},(function(){return{rawValue:String(this.value),raw:this.value+"n"}})),r("NullLiteral").bases("Literal").build().field("value",null,n.null),r("BooleanLiteral").bases("Literal").build("value").field("value",Boolean),r("RegExpLiteral").bases("Literal").build("pattern","flags").field("pattern",String).field("flags",String).field("value",RegExp,(function(){return new RegExp(this.pattern,this.flags)}));var u=o(r("Property"),r("ObjectMethod"),r("ObjectProperty"),r("SpreadProperty"),r("SpreadElement"));r("ObjectExpression").bases("Expression").build("properties").field("properties",[u]),r("ObjectMethod").bases("Node","Function").build("kind","key","params","body","computed").field("kind",o("method","get","set")).field("key",o(r("Literal"),r("Identifier"),r("Expression"))).field("params",[r("Pattern")]).field("body",r("BlockStatement")).field("computed",Boolean,n.false).field("generator",Boolean,n.false).field("async",Boolean,n.false).field("accessibility",o(r("Literal"),null),n.null).field("decorators",o([r("Decorator")],null),n.null),r("ObjectProperty").bases("Node").build("key","value").field("key",o(r("Literal"),r("Identifier"),r("Expression"))).field("value",o(r("Expression"),r("Pattern"))).field("accessibility",o(r("Literal"),null),n.null).field("computed",Boolean,n.false);var l=o(r("MethodDefinition"),r("VariableDeclarator"),r("ClassPropertyDefinition"),r("ClassProperty"),r("ClassPrivateProperty"),r("ClassMethod"),r("ClassPrivateMethod"));r("ClassBody").bases("Declaration").build("body").field("body",[l]),r("ClassMethod").bases("Declaration","Function").build("kind","key","params","body","computed","static").field("key",o(r("Literal"),r("Identifier"),r("Expression"))),r("ClassPrivateMethod").bases("Declaration","Function").build("key","params","body","kind","computed","static").field("key",r("PrivateName")),["ClassMethod","ClassPrivateMethod"].forEach((function(e){r(e).field("kind",o("get","set","method","constructor"),(function(){return"method"})).field("body",r("BlockStatement")).field("computed",Boolean,n.false).field("static",o(Boolean,null),n.null).field("abstract",o(Boolean,null),n.null).field("access",o("public","private","protected",null),n.null).field("accessibility",o("public","private","protected",null),n.null).field("decorators",o([r("Decorator")],null),n.null).field("optional",o(Boolean,null),n.null)})),r("ClassPrivateProperty").bases("ClassProperty").build("key","value").field("key",r("PrivateName")).field("value",o(r("Expression"),null),n.null),r("PrivateName").bases("Expression","Pattern").build("id").field("id",r("Identifier"));var c=o(r("Property"),r("PropertyPattern"),r("SpreadPropertyPattern"),r("SpreadProperty"),r("ObjectProperty"),r("RestProperty"));r("ObjectPattern").bases("Pattern").build("properties").field("properties",[c]).field("decorators",o([r("Decorator")],null),n.null),r("SpreadProperty").bases("Node").build("argument").field("argument",r("Expression")),r("RestProperty").bases("Node").build("argument").field("argument",r("Expression")),r("ForAwaitStatement").bases("Statement").build("left","right","body").field("left",o(r("VariableDeclaration"),r("Expression"))).field("right",r("Expression")).field("body",r("Statement")),r("Import").bases("Expression").build()},e.exports=t.default},function(e,t,n){t.SourceMapGenerator=n(65).SourceMapGenerator,t.SourceMapConsumer=n(130).SourceMapConsumer,t.SourceNode=n(133).SourceNode},function(e,t,n){var r=n(66),i=n(21),a=n(67).ArraySet,s=n(129).MappingList;function o(e){e||(e={}),this._file=i.getArg(e,"file",null),this._sourceRoot=i.getArg(e,"sourceRoot",null),this._skipValidation=i.getArg(e,"skipValidation",!1),this._sources=new a,this._names=new a,this._mappings=new s,this._sourcesContents=null}o.prototype._version=3,o.fromSourceMap=function(e){var t=e.sourceRoot,n=new o({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=i.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)})),e.sources.forEach((function(r){var a=r;null!==t&&(a=i.relative(t,r)),n._sources.has(a)||n._sources.add(a);var s=e.sourceContentFor(r);null!=s&&n.setSourceContent(r,s)})),n},o.prototype.addMapping=function(e){var t=i.getArg(e,"generated"),n=i.getArg(e,"original",null),r=i.getArg(e,"source",null),a=i.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,a),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=a&&(a=String(a),this._names.has(a)||this._names.add(a)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:a})},o.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[i.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},o.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var s=this._sourceRoot;null!=s&&(r=i.relative(s,r));var o=new a,u=new a;this._mappings.unsortedForEach((function(t){if(t.source===r&&null!=t.originalLine){var a=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=a.source&&(t.source=a.source,null!=n&&(t.source=i.join(n,t.source)),null!=s&&(t.source=i.relative(s,t.source)),t.originalLine=a.line,t.originalColumn=a.column,null!=a.name&&(t.name=a.name))}var l=t.source;null==l||o.has(l)||o.add(l);var c=t.name;null==c||u.has(c)||u.add(c)}),this),this._sources=o,this._names=u,e.sources.forEach((function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=i.join(n,t)),null!=s&&(t=i.relative(s,t)),this.setSourceContent(t,r))}),this)},o.prototype._validateMapping=function(e,t,n,r){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},o.prototype._serializeMappings=function(){for(var e,t,n,a,s=0,o=1,u=0,l=0,c=0,h=0,p="",f=this._mappings.toArray(),d=0,m=f.length;d<m;d++){if(e="",(t=f[d]).generatedLine!==o)for(s=0;t.generatedLine!==o;)e+=";",o++;else if(d>0){if(!i.compareByGeneratedPositionsInflated(t,f[d-1]))continue;e+=","}e+=r.encode(t.generatedColumn-s),s=t.generatedColumn,null!=t.source&&(a=this._sources.indexOf(t.source),e+=r.encode(a-h),h=a,e+=r.encode(t.originalLine-1-l),l=t.originalLine-1,e+=r.encode(t.originalColumn-u),u=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=r.encode(n-c),c=n)),p+=e}return p},o.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=i.relative(t,e));var n=i.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},o.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},o.prototype.toString=function(){return JSON.stringify(this.toJSON())},t.SourceMapGenerator=o},function(e,t,n){var r=n(128);t.encode=function(e){var t,n="",i=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&i,(i>>>=5)>0&&(t|=32),n+=r.encode(t)}while(i>0);return n},t.decode=function(e,t,n){var i,a,s,o,u=e.length,l=0,c=0;do{if(t>=u)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(a=r.decode(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));i=!!(32&a),l+=(a&=31)<<c,c+=5}while(i);n.value=(o=(s=l)>>1,1==(1&s)?-o:o),n.rest=t}},function(e,t,n){var r=n(21),i=Object.prototype.hasOwnProperty,a="undefined"!=typeof Map;function s(){this._array=[],this._set=a?new Map:Object.create(null)}s.fromArray=function(e,t){for(var n=new s,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},s.prototype.size=function(){return a?this._set.size:Object.getOwnPropertyNames(this._set).length},s.prototype.add=function(e,t){var n=a?e:r.toSetString(e),s=a?this.has(e):i.call(this._set,n),o=this._array.length;s&&!t||this._array.push(e),s||(a?this._set.set(e,o):this._set[n]=o)},s.prototype.has=function(e){if(a)return this._set.has(e);var t=r.toSetString(e);return i.call(this._set,t)},s.prototype.indexOf=function(e){if(a){var t=this._set.get(e);if(t>=0)return t}else{var n=r.toSetString(e);if(i.call(this._set,n))return this._set[n]}throw new Error('"'+e+'" is not in the set.')},s.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},s.prototype.toArray=function(){return this._array.slice()},t.ArraySet=s},function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(3),a=n(8),s=n(15);function o(e,t,n){var s=null,o=function(e,t){n&&n(e,t),s&&s.visit(e,t)},u="function"==typeof n?o:null,l=!1;if(t){l="boolean"==typeof t.comment&&t.comment;var c="boolean"==typeof t.attachComment&&t.attachComment;(l||c)&&((s=new r.CommentHandler).attach=c,t.comment=!0,u=o)}var h,p=!1;t&&"string"==typeof t.sourceType&&(p="module"===t.sourceType),h=t&&"boolean"==typeof t.jsx&&t.jsx?new i.JSXParser(e,t,u):new a.Parser(e,t,u);var f=p?h.parseModule():h.parseScript();return l&&s&&(f.comments=s.comments),h.config.tokens&&(f.tokens=h.tokens),h.config.tolerant&&(f.errors=h.errorHandler.errors),f}t.parse=o,t.parseModule=function(e,t,n){var r=t||{};return r.sourceType="module",o(e,r,n)},t.parseScript=function(e,t,n){var r=t||{};return r.sourceType="script",o(e,r,n)},t.tokenize=function(e,t,n){var r,i=new s.Tokenizer(e,t);r=[];try{for(;;){var a=i.getNextToken();if(!a)break;n&&(a=n(a)),r.push(a)}}catch(e){i.errorHandler.tolerate(e)}return i.errorHandler.tolerant&&(r.errors=i.errors()),r};var u=n(2);t.Syntax=u.Syntax,t.version="4.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return e.prototype.insertInnerComments=function(e,t){if(e.type===r.Syntax.BlockStatement&&0===e.body.length){for(var n=[],i=this.leading.length-1;i>=0;--i){var a=this.leading[i];t.end.offset>=a.start&&(n.unshift(a.comment),this.leading.splice(i,1),this.trailing.splice(i,1))}n.length&&(e.innerComments=n)}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var n=this.trailing.length-1;n>=0;--n){var r=this.trailing[n];r.start>=e.end.offset&&t.unshift(r.comment)}return this.trailing.length=0,t}var i=this.stack[this.stack.length-1];if(i&&i.node.trailingComments){var a=i.node.trailingComments[0];a&&a.range[0]>=e.end.offset&&(t=i.node.trailingComments,delete i.node.trailingComments)}return t},e.prototype.findLeadingComments=function(e){for(var t,n=[];this.stack.length>0&&((a=this.stack[this.stack.length-1])&&a.start>=e.start.offset);)t=a.node,this.stack.pop();if(t){for(var r=(t.leadingComments?t.leadingComments.length:0)-1;r>=0;--r){var i=t.leadingComments[r];i.range[1]<=e.start.offset&&(n.unshift(i),t.leadingComments.splice(r,1))}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,n}for(r=this.leading.length-1;r>=0;--r){var a;(a=this.leading[r]).start<=e.start.offset&&(n.unshift(a.comment),this.leading.splice(r,1))}return n},e.prototype.visitNode=function(e,t){if(!(e.type===r.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var n=this.findTrailingComments(t),i=this.findLeadingComments(t);i.length>0&&(e.leadingComments=i),n.length>0&&(e.trailingComments=n),this.stack.push({node:e,start:t.start.offset})}},e.prototype.visitComment=function(e,t){var n="L"===e.type[0]?"Line":"Block",r={type:n,value:e.value};if(e.range&&(r.range=e.range),e.loc&&(r.loc=e.loc),this.comments.push(r),this.attach){var i={comment:{type:n,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(i.comment.loc=e.loc),e.type=n,this.leading.push(i),this.trailing.push(i)}},e.prototype.visit=function(e,t){"LineComment"===e.type?this.visitComment(e,t):"BlockComment"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t)},e}();t.CommentHandler=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a=n(4),s=n(5),o=n(6),u=n(7),l=n(8),c=n(13),h=n(14);function p(e){var t;switch(e.type){case o.JSXSyntax.JSXIdentifier:t=e.name;break;case o.JSXSyntax.JSXNamespacedName:var n=e;t=p(n.namespace)+":"+p(n.name);break;case o.JSXSyntax.JSXMemberExpression:var r=e;t=p(r.object)+"."+p(r.property)}return t}c.TokenName[100]="JSXIdentifier",c.TokenName[101]="JSXText";var f=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return i(t,e),t.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column},t.prototype.finishJSX=function(){this.nextToken()},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop()},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t="&",n=!0,r=!1,i=!1,s=!1;!this.scanner.eof()&&n&&!r;){var o=this.scanner.source[this.scanner.index];if(o===e)break;if(r=";"===o,t+=o,++this.scanner.index,!r)switch(t.length){case 2:i="#"===o;break;case 3:i&&(n=(s="x"===o)||a.Character.isDecimalDigit(o.charCodeAt(0)),i=i&&!s);break;default:n=(n=n&&!(i&&!a.Character.isDecimalDigit(o.charCodeAt(0))))&&!(s&&!a.Character.isHexDigit(o.charCodeAt(0)))}}if(n&&r&&t.length>2){var u=t.substr(1,t.length-2);i&&u.length>1?t=String.fromCharCode(parseInt(u.substr(1),10)):s&&u.length>2?t=String.fromCharCode(parseInt("0"+u.substr(1),16)):i||s||!h.XHTMLEntities[u]||(t=h.XHTMLEntities[u])}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return{type:7,value:o=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,n=this.scanner.source[this.scanner.index++],r="";!this.scanner.eof()&&(u=this.scanner.source[this.scanner.index++])!==n;)r+="&"===u?this.scanXHTMLEntity(n):u;return{type:8,value:r,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var i=this.scanner.source.charCodeAt(this.scanner.index+1),s=this.scanner.source.charCodeAt(this.scanner.index+2),o=46===i&&46===s?"...":".";return t=this.scanner.index,this.scanner.index+=o.length,{type:7,value:o,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return{type:10,value:"",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(a.Character.isIdentifierStart(e)&&92!==e){for(t=this.scanner.index,++this.scanner.index;!this.scanner.eof();){var u=this.scanner.source.charCodeAt(this.scanner.index);if(a.Character.isIdentifierPart(u)&&92!==u)++this.scanner.index;else{if(45!==u)break;++this.scanner.index}}return{type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t="";!this.scanner.eof();){var n=this.scanner.source[this.scanner.index];if("{"===n||"<"===n)break;++this.scanner.index,t+=n,a.Character.isLineTerminator(n.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===n&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var r={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(r)),r},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new s.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(":")){var n=t;this.expectJSX(":");var r=this.parseJSXIdentifier();t=this.finalize(e,new s.JSXNamespacedName(n,r))}else if(this.matchJSX("."))for(;this.matchJSX(".");){var i=t;this.expectJSX(".");var a=this.parseJSXIdentifier();t=this.finalize(e,new s.JSXMemberExpression(i,a))}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),n=this.parseJSXIdentifier();if(this.matchJSX(":")){var r=n;this.expectJSX(":");var i=this.parseJSXIdentifier();e=this.finalize(t,new s.JSXNamespacedName(r,i))}else e=n;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var n=this.getTokenRaw(t);return this.finalize(e,new u.Literal(t.value,n))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new s.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),n=null;return this.matchJSX("=")&&(this.expectJSX("="),n=this.parseJSXAttributeValue()),this.finalize(e,new s.JSXAttribute(t,n))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new s.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX("/")&&!this.matchJSX(">");){var t=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t)}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX("<");var t=this.parseJSXElementName(),n=this.parseJSXAttributes(),r=this.matchJSX("/");return r&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new s.JSXOpeningElement(t,r,n))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var t=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(e,new s.JSXClosingElement(t))}var n=this.parseJSXElementName(),r=this.parseJSXAttributes(),i=this.matchJSX("/");return i&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new s.JSXOpeningElement(n,i,r))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new s.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX("{"),this.matchJSX("}")?(e=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new s.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),n=this.nextJSXText();if(n.start<n.end){var r=this.getTokenRaw(n),i=this.finalize(t,new s.JSXText(n.value,r));e.push(i)}if("{"!==this.scanner.source[this.scanner.index])break;var a=this.parseJSXExpressionContainer();e.push(a)}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var n=this.createJSXChildNode(),r=this.parseJSXBoundaryElement();if(r.type===o.JSXSyntax.JSXOpeningElement){var i=r;if(i.selfClosing){var a=this.finalize(n,new s.JSXElement(i,[],null));e.children.push(a)}else t.push(e),e={node:n,opening:i,closing:null,children:[]}}if(r.type===o.JSXSyntax.JSXClosingElement){e.closing=r;var u=p(e.opening.name);if(u!==p(e.closing.name)&&this.tolerateError("Expected corresponding JSX closing tag for %0",u),!(t.length>0))break;a=this.finalize(e.node,new s.JSXElement(e.opening,e.children,e.closing)),(e=t[t.length-1]).children.push(a),t.pop()}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),n=[],r=null;if(!t.selfClosing){var i=this.parseComplexJSXElement({node:e,opening:t,closing:r,children:n});n=i.children,r=i.closing}return this.finalize(e,new s.JSXElement(t,n,r))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match("<")},t}(l.Parser);t.JSXParser=f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&n.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&n.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),i=function(e){this.type=r.JSXSyntax.JSXClosingElement,this.name=e};t.JSXClosingElement=i;var a=function(e,t,n){this.type=r.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=n};t.JSXElement=a;var s=function(){this.type=r.JSXSyntax.JSXEmptyExpression};t.JSXEmptyExpression=s;var o=function(e){this.type=r.JSXSyntax.JSXExpressionContainer,this.expression=e};t.JSXExpressionContainer=o;var u=function(e){this.type=r.JSXSyntax.JSXIdentifier,this.name=e};t.JSXIdentifier=u;var l=function(e,t){this.type=r.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t};t.JSXMemberExpression=l;var c=function(e,t){this.type=r.JSXSyntax.JSXAttribute,this.name=e,this.value=t};t.JSXAttribute=c;var h=function(e,t){this.type=r.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t};t.JSXNamespacedName=h;var p=function(e,t,n){this.type=r.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=n};t.JSXOpeningElement=p;var f=function(e){this.type=r.JSXSyntax.JSXSpreadAttribute,this.argument=e};t.JSXSpreadAttribute=f;var d=function(e,t){this.type=r.JSXSyntax.JSXText,this.value=e,this.raw=t};t.JSXText=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSXSyntax={JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(e){this.type=r.Syntax.ArrayExpression,this.elements=e};t.ArrayExpression=i;var a=function(e){this.type=r.Syntax.ArrayPattern,this.elements=e};t.ArrayPattern=a;var s=function(e,t,n){this.type=r.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!1};t.ArrowFunctionExpression=s;var o=function(e,t,n){this.type=r.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=n};t.AssignmentExpression=o;var u=function(e,t){this.type=r.Syntax.AssignmentPattern,this.left=e,this.right=t};t.AssignmentPattern=u;var l=function(e,t,n){this.type=r.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!0};t.AsyncArrowFunctionExpression=l;var c=function(e,t,n){this.type=r.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0};t.AsyncFunctionDeclaration=c;var h=function(e,t,n){this.type=r.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0};t.AsyncFunctionExpression=h;var p=function(e){this.type=r.Syntax.AwaitExpression,this.argument=e};t.AwaitExpression=p;var f=function(e,t,n){var i="||"===e||"&&"===e;this.type=i?r.Syntax.LogicalExpression:r.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=n};t.BinaryExpression=f;var d=function(e){this.type=r.Syntax.BlockStatement,this.body=e};t.BlockStatement=d;var m=function(e){this.type=r.Syntax.BreakStatement,this.label=e};t.BreakStatement=m;var y=function(e,t){this.type=r.Syntax.CallExpression,this.callee=e,this.arguments=t};t.CallExpression=y;var g=function(e,t){this.type=r.Syntax.CatchClause,this.param=e,this.body=t};t.CatchClause=g;var v=function(e){this.type=r.Syntax.ClassBody,this.body=e};t.ClassBody=v;var x=function(e,t,n){this.type=r.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=n};t.ClassDeclaration=x;var b=function(e,t,n){this.type=r.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=n};t.ClassExpression=b;var S=function(e,t){this.type=r.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t};t.ComputedMemberExpression=S;var E=function(e,t,n){this.type=r.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=n};t.ConditionalExpression=E;var D=function(e){this.type=r.Syntax.ContinueStatement,this.label=e};t.ContinueStatement=D;var w=function(){this.type=r.Syntax.DebuggerStatement};t.DebuggerStatement=w;var A=function(e,t){this.type=r.Syntax.ExpressionStatement,this.expression=e,this.directive=t};t.Directive=A;var C=function(e,t){this.type=r.Syntax.DoWhileStatement,this.body=e,this.test=t};t.DoWhileStatement=C;var T=function(){this.type=r.Syntax.EmptyStatement};t.EmptyStatement=T;var k=function(e){this.type=r.Syntax.ExportAllDeclaration,this.source=e};t.ExportAllDeclaration=k;var F=function(e){this.type=r.Syntax.ExportDefaultDeclaration,this.declaration=e};t.ExportDefaultDeclaration=F;var P=function(e,t,n){this.type=r.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=n};t.ExportNamedDeclaration=P;var M=function(e,t){this.type=r.Syntax.ExportSpecifier,this.exported=t,this.local=e};t.ExportSpecifier=M;var N=function(e){this.type=r.Syntax.ExpressionStatement,this.expression=e};t.ExpressionStatement=N;var B=function(e,t,n){this.type=r.Syntax.ForInStatement,this.left=e,this.right=t,this.body=n,this.each=!1};t.ForInStatement=B;var _=function(e,t,n){this.type=r.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=n};t.ForOfStatement=_;var I=function(e,t,n,i){this.type=r.Syntax.ForStatement,this.init=e,this.test=t,this.update=n,this.body=i};t.ForStatement=I;var O=function(e,t,n,i){this.type=r.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=i,this.expression=!1,this.async=!1};t.FunctionDeclaration=O;var j=function(e,t,n,i){this.type=r.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=i,this.expression=!1,this.async=!1};t.FunctionExpression=j;var L=function(e){this.type=r.Syntax.Identifier,this.name=e};t.Identifier=L;var q=function(e,t,n){this.type=r.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=n};t.IfStatement=q;var R=function(e,t){this.type=r.Syntax.ImportDeclaration,this.specifiers=e,this.source=t};t.ImportDeclaration=R;var X=function(e){this.type=r.Syntax.ImportDefaultSpecifier,this.local=e};t.ImportDefaultSpecifier=X;var z=function(e){this.type=r.Syntax.ImportNamespaceSpecifier,this.local=e};t.ImportNamespaceSpecifier=z;var J=function(e,t){this.type=r.Syntax.ImportSpecifier,this.local=e,this.imported=t};t.ImportSpecifier=J;var U=function(e,t){this.type=r.Syntax.LabeledStatement,this.label=e,this.body=t};t.LabeledStatement=U;var V=function(e,t){this.type=r.Syntax.Literal,this.value=e,this.raw=t};t.Literal=V;var W=function(e,t){this.type=r.Syntax.MetaProperty,this.meta=e,this.property=t};t.MetaProperty=W;var K=function(e,t,n,i,a){this.type=r.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=n,this.kind=i,this.static=a};t.MethodDefinition=K;var $=function(e){this.type=r.Syntax.Program,this.body=e,this.sourceType="module"};t.Module=$;var H=function(e,t){this.type=r.Syntax.NewExpression,this.callee=e,this.arguments=t};t.NewExpression=H;var G=function(e){this.type=r.Syntax.ObjectExpression,this.properties=e};t.ObjectExpression=G;var Y=function(e){this.type=r.Syntax.ObjectPattern,this.properties=e};t.ObjectPattern=Y;var Q=function(e,t,n,i,a,s){this.type=r.Syntax.Property,this.key=t,this.computed=n,this.value=i,this.kind=e,this.method=a,this.shorthand=s};t.Property=Q;var Z=function(e,t,n,i){this.type=r.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:n,flags:i}};t.RegexLiteral=Z;var ee=function(e){this.type=r.Syntax.RestElement,this.argument=e};t.RestElement=ee;var te=function(e){this.type=r.Syntax.ReturnStatement,this.argument=e};t.ReturnStatement=te;var ne=function(e){this.type=r.Syntax.Program,this.body=e,this.sourceType="script"};t.Script=ne;var re=function(e){this.type=r.Syntax.SequenceExpression,this.expressions=e};t.SequenceExpression=re;var ie=function(e){this.type=r.Syntax.SpreadElement,this.argument=e};t.SpreadElement=ie;var ae=function(e,t){this.type=r.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t};t.StaticMemberExpression=ae;var se=function(){this.type=r.Syntax.Super};t.Super=se;var oe=function(e,t){this.type=r.Syntax.SwitchCase,this.test=e,this.consequent=t};t.SwitchCase=oe;var ue=function(e,t){this.type=r.Syntax.SwitchStatement,this.discriminant=e,this.cases=t};t.SwitchStatement=ue;var le=function(e,t){this.type=r.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t};t.TaggedTemplateExpression=le;var ce=function(e,t){this.type=r.Syntax.TemplateElement,this.value=e,this.tail=t};t.TemplateElement=ce;var he=function(e,t){this.type=r.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t};t.TemplateLiteral=he;var pe=function(){this.type=r.Syntax.ThisExpression};t.ThisExpression=pe;var fe=function(e){this.type=r.Syntax.ThrowStatement,this.argument=e};t.ThrowStatement=fe;var de=function(e,t,n){this.type=r.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=n};t.TryStatement=de;var me=function(e,t){this.type=r.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0};t.UnaryExpression=me;var ye=function(e,t,n){this.type=r.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=n};t.UpdateExpression=ye;var ge=function(e,t){this.type=r.Syntax.VariableDeclaration,this.declarations=e,this.kind=t};t.VariableDeclaration=ge;var ve=function(e,t){this.type=r.Syntax.VariableDeclarator,this.id=e,this.init=t};t.VariableDeclarator=ve;var xe=function(e,t){this.type=r.Syntax.WhileStatement,this.test=e,this.body=t};t.WhileStatement=xe;var be=function(e,t){this.type=r.Syntax.WithStatement,this.object=e,this.body=t};t.WithStatement=be;var Se=function(e,t){this.type=r.Syntax.YieldExpression,this.argument=e,this.delegate=t};t.YieldExpression=Se},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(10),a=n(11),s=n(7),o=n(12),u=n(2),l=n(13),c=function(){function e(e,t,n){void 0===t&&(t={}),this.config={range:"boolean"==typeof t.range&&t.range,loc:"boolean"==typeof t.loc&&t.loc,source:null,tokens:"boolean"==typeof t.tokens&&t.tokens,comment:"boolean"==typeof t.comment&&t.comment,tolerant:"boolean"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=n,this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new o.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.lookahead={type:2,value:"",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}return e.prototype.throwError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=Array.prototype.slice.call(arguments,1),a=e.replace(/%(\d)/g,(function(e,t){return r.assert(t<i.length,"Message reference must be in range"),i[t]})),s=this.lastMarker.index,o=this.lastMarker.line,u=this.lastMarker.column+1;throw this.errorHandler.createError(s,o,u,a)},e.prototype.tolerateError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=Array.prototype.slice.call(arguments,1),a=e.replace(/%(\d)/g,(function(e,t){return r.assert(t<i.length,"Message reference must be in range"),i[t]})),s=this.lastMarker.index,o=this.scanner.lineNumber,u=this.lastMarker.column+1;this.errorHandler.tolerateError(s,o,u,a)},e.prototype.unexpectedTokenError=function(e,t){var n,r=t||a.Messages.UnexpectedToken;if(e?(t||(r=2===e.type?a.Messages.UnexpectedEOS:3===e.type?a.Messages.UnexpectedIdentifier:6===e.type?a.Messages.UnexpectedNumber:8===e.type?a.Messages.UnexpectedString:10===e.type?a.Messages.UnexpectedTemplate:a.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?r=a.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(r=a.Messages.StrictReservedWord))),n=e.value):n="ILLEGAL",r=r.replace("%0",n),e&&"number"==typeof e.lineNumber){var i=e.start,s=e.lineNumber,o=this.lastMarker.index-this.lastMarker.column,u=e.start-o+1;return this.errorHandler.createError(i,s,u,r)}return i=this.lastMarker.index,s=this.lastMarker.line,u=this.lastMarker.column+1,this.errorHandler.createError(i,s,u,r)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t))},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var n=e[t],r=void 0;r={type:n.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(n.slice[0],n.slice[1])},this.config.range&&(r.range=n.range),this.config.loc&&(r.loc=n.loc);var i={start:{line:n.loc.start.line,column:n.loc.start.column,offset:n.range[0]},end:{line:n.loc.end.line,column:n.loc.end.column,offset:n.range[1]}};this.delegate(r,i)}}else this.scanner.scanComments()},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:l.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var n=e.pattern,r=e.flags;t.regex={pattern:n,flags:r}}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e,t){void 0===t&&(t=0);var n=e.start-e.lineStart,r=e.lineNumber;return n<0&&(n+=t,r--),{index:e.start,line:r,column:n}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var n={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,n)}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&","===e.value?this.nextToken():7===e.type&&";"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,a.Messages.UnexpectedToken)}else this.expect(",")},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return!1;var e=this.lookahead.value;return"="===e||"*="===e||"**="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,r=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=n,this.context.firstCoverInitializedNameError=r,i},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,r=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&n,this.context.firstCoverInitializedNameError=r||this.context.firstCoverInitializedNameError,i},e.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column)},e.prototype.parsePrimaryExpression=function(){var e,t,n,r=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(r,new s.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,a.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.Literal(t.value,n));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.Literal("true"===t.value,n));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.Literal(null,n));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case"(":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.RegexLiteral(t.regex,n,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken())}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?e=this.finalize(r,new s.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?e=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),e=this.finalize(r,new s.ThisExpression)):e=this.matchKeyword("class")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken())}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect("...");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new s.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),t.push(null);else if(this.match("...")){var n=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),t.push(n)}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(e,new s.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,n=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var r=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=n,r},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters(),r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,n=this.context.await;this.context.allowYield=!1,this.context.await=!0;var r=this.parseFormalParameters(),i=this.parsePropertyMethod(r);return this.context.allowYield=t,this.context.await=n,this.finalize(e,new s.AsyncFunctionExpression(null,r.params,i))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),n=this.nextToken();switch(n.type){case 8:case 6:this.context.strict&&n.octal&&this.tolerateUnexpectedToken(n,a.Messages.StrictOctalLiteral);var r=this.getTokenRaw(n);e=this.finalize(t,new s.Literal(n.value,r));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new s.Identifier(n.value));break;case 7:"["===n.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):e=this.throwUnexpectedToken(n);break;default:e=this.throwUnexpectedToken(n)}return e},e.prototype.isPropertyKey=function(e,t){return e.type===u.Syntax.Identifier&&e.name===t||e.type===u.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,n=this.createNode(),r=this.lookahead,i=null,o=null,u=!1,l=!1,c=!1,h=!1;if(3===r.type){var p=r.value;this.nextToken(),u=this.match("["),i=(h=!(this.hasLineTerminator||"async"!==p||this.match(":")||this.match("(")||this.match("*")||this.match(",")))?this.parseObjectPropertyKey():this.finalize(n,new s.Identifier(p))}else this.match("*")?this.nextToken():(u=this.match("["),i=this.parseObjectPropertyKey());var f=this.qualifiedPropertyName(this.lookahead);if(3===r.type&&!h&&"get"===r.value&&f)t="get",u=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod();else if(3===r.type&&!h&&"set"===r.value&&f)t="set",u=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseSetterMethod();else if(7===r.type&&"*"===r.value&&f)t="init",u=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),l=!0;else if(i||this.throwUnexpectedToken(this.lookahead),t="init",this.match(":")&&!h)!u&&this.isPropertyKey(i,"__proto__")&&(e.value&&this.tolerateError(a.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),o=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))o=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0;else if(3===r.type)if(p=this.finalize(n,new s.Identifier(r.value)),this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),c=!0;var d=this.isolateCoverGrammar(this.parseAssignmentExpression);o=this.finalize(n,new s.AssignmentPattern(p,d))}else c=!0,o=p;else this.throwUnexpectedToken(this.nextToken());return this.finalize(n,new s.Property(t,i,u,o,l,c))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect("{");for(var t=[],n={value:!1};!this.match("}");)t.push(this.parseObjectProperty(n)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(e,new s.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){r.assert(this.lookahead.head,"Template literal must start with a template head");var e=this.createNode(),t=this.nextToken(),n=t.value,i=t.cooked;return this.finalize(e,new s.TemplateElement({raw:n,cooked:i},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),n=t.value,r=t.cooked;return this.finalize(e,new s.TemplateElement({raw:n,cooked:r},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],n=[],r=this.parseTemplateHead();for(n.push(r);!r.tail;)t.push(this.parseExpression()),r=this.parseTemplateElement(),n.push(r);return this.finalize(e,new s.TemplateLiteral(n,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case u.Syntax.Identifier:case u.Syntax.MemberExpression:case u.Syntax.RestElement:case u.Syntax.AssignmentPattern:break;case u.Syntax.SpreadElement:e.type=u.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case u.Syntax.ArrayExpression:e.type=u.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case u.Syntax.ObjectExpression:for(e.type=u.Syntax.ObjectPattern,t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case u.Syntax.AssignmentExpression:e.type=u.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left)}},e.prototype.parseGroupExpression=function(){var e;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[],async:!1};else{var t=this.lookahead,n=[];if(this.match("..."))e=this.parseRestElement(n),this.expect(")"),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[e],async:!1};else{var r=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var i=[];for(this.context.isAssignmentTarget=!1,i.push(e);2!==this.lookahead.type&&this.match(",");){if(this.nextToken(),this.match(")")){this.nextToken();for(var a=0;a<i.length;a++)this.reinterpretExpressionAsPattern(i[a]);r=!0,e={type:"ArrowParameterPlaceHolder",params:i,async:!1}}else if(this.match("...")){for(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),i.push(this.parseRestElement(n)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1,a=0;a<i.length;a++)this.reinterpretExpressionAsPattern(i[a]);r=!0,e={type:"ArrowParameterPlaceHolder",params:i,async:!1}}else i.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(r)break}r||(e=this.finalize(this.startNode(t),new s.SequenceExpression(i)))}if(!r){if(this.expect(")"),this.match("=>")&&(e.type===u.Syntax.Identifier&&"yield"===e.name&&(r=!0,e={type:"ArrowParameterPlaceHolder",params:[e],async:!1}),!r)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===u.Syntax.SequenceExpression)for(a=0;a<e.expressions.length;a++)this.reinterpretExpressionAsPattern(e.expressions[a]);else this.reinterpretExpressionAsPattern(e);e={type:"ArrowParameterPlaceHolder",params:e.type===u.Syntax.SequenceExpression?e.expressions:[e],async:!1}}this.context.isBindingElement=!1}}}return e},e.prototype.parseArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new s.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),n=this.parseIdentifierName();if(r.assert("new"===n.name,"New expression must start with `new`"),this.match("."))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&"target"===this.lookahead.value){var i=this.parseIdentifierName();e=new s.MetaProperty(n,i)}else this.throwUnexpectedToken(this.lookahead);else{var a=this.isolateCoverGrammar(this.parseLeftHandSideExpression),o=this.match("(")?this.parseArguments():[];e=new s.NewExpression(a,o),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,n=this.matchContextualKeyword("async"),r=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword("super")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new s.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var i=this.parseIdentifierName();e=this.finalize(this.startNode(t),new s.StaticMemberExpression(e,i))}else if(this.match("(")){var a=n&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var o=a?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new s.CallExpression(e,o)),a&&this.match("=>")){for(var u=0;u<o.length;++u)this.reinterpretExpressionAsPattern(o[u]);e={type:"ArrowParameterPlaceHolder",params:o,async:!0}}}else if(this.match("["))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("["),i=this.isolateCoverGrammar(this.parseExpression),this.expect("]"),e=this.finalize(this.startNode(t),new s.ComputedMemberExpression(e,i));else{if(10!==this.lookahead.type||!this.lookahead.head)break;var l=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new s.TaggedTemplateExpression(e,l))}return this.context.allowIn=r,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new s.Super)},e.prototype.parseLeftHandSideExpression=function(){r.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var e=this.startNode(this.lookahead),t=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var n=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),t=this.finalize(e,new s.ComputedMemberExpression(t,n))}else if(this.match("."))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("."),n=this.parseIdentifierName(),t=this.finalize(e,new s.StaticMemberExpression(t,n));else{if(10!==this.lookahead.type||!this.lookahead.head)break;var i=this.parseTemplateLiteral();t=this.finalize(e,new s.TaggedTemplateExpression(t,i))}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match("++")||this.match("--")){var n=this.startNode(t),r=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(a.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(a.Messages.InvalidLHSInAssignment);var i=!0;e=this.finalize(n,new s.UpdateExpression(r.value,e,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match("++")||this.match("--"))){this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(a.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(a.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var o=this.nextToken().value;i=!1,e=this.finalize(this.startNode(t),new s.UpdateExpression(o,e,i))}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new s.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var t=this.startNode(this.lookahead),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new s.UnaryExpression(n.value,e)),this.context.strict&&"delete"===e.operator&&e.argument.type===u.Syntax.Identifier&&this.tolerateError(a.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else e=this.context.await&&this.matchContextualKeyword("await")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==u.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var n=t,r=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new s.BinaryExpression("**",n,r))}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&("instanceof"===t||this.context.allowIn&&"in"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),n=this.lookahead,r=this.binaryPrecedence(n);if(r>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var i=[e,this.lookahead],a=t,o=this.isolateCoverGrammar(this.parseExponentiationExpression),u=[a,n.value,o],l=[r];!((r=this.binaryPrecedence(this.lookahead))<=0);){for(;u.length>2&&r<=l[l.length-1];){o=u.pop();var c=u.pop();l.pop(),a=u.pop(),i.pop();var h=this.startNode(i[i.length-1]);u.push(this.finalize(h,new s.BinaryExpression(c,a,o)))}u.push(this.nextToken().value),l.push(r),i.push(this.lookahead),u.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var p=u.length-1;t=u[p];for(var f=i.pop();p>1;){var d=i.pop(),m=f&&f.lineStart;h=this.startNode(d,m),c=u[p-1],t=this.finalize(h,new s.BinaryExpression(c,u[p-2],t)),p-=2,f=d}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var n=this.context.allowIn;this.context.allowIn=!0;var r=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=n,this.expect(":");var i=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new s.ConditionalExpression(t,r,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case u.Syntax.Identifier:this.validateParam(e,t,t.name);break;case u.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case u.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case u.Syntax.ArrayPattern:for(var n=0;n<t.elements.length;n++)null!==t.elements[n]&&this.checkPatternParam(e,t.elements[n]);break;case u.Syntax.ObjectPattern:for(n=0;n<t.properties.length;n++)this.checkPatternParam(e,t.properties[n].value)}e.simple=e.simple&&t instanceof s.Identifier},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,n=[e],r=!1;switch(e.type){case u.Syntax.Identifier:break;case"ArrowParameterPlaceHolder":n=e.params,r=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var i=0;i<n.length;++i)(s=n[i]).type===u.Syntax.AssignmentPattern?s.right.type===u.Syntax.YieldExpression&&(s.right.argument&&this.throwUnexpectedToken(this.lookahead),s.right.type=u.Syntax.Identifier,s.right.name="yield",delete s.right.argument,delete s.right.delegate):r&&s.type===u.Syntax.Identifier&&"await"===s.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,s),n[i]=s;if(this.context.strict||!this.context.allowYield)for(i=0;i<n.length;++i){var s;(s=n[i]).type===u.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(t.message===a.Messages.StrictParamDupe){var o=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(o,t.message)}return{simple:t.simple,params:n,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword("yield"))e=this.parseYieldExpression();else{var t=this.lookahead,n=t;if(e=this.parseConditionalExpression(),3===n.type&&n.lineNumber===this.lookahead.lineNumber&&"async"===n.value&&(3===this.lookahead.type||this.matchKeyword("yield"))){var r=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(r),e={type:"ArrowParameterPlaceHolder",params:[r],async:!0}}if("ArrowParameterPlaceHolder"===e.type||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var i=e.async,o=this.reinterpretAsCoverFormalsList(e);if(o){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var l=this.context.strict,c=this.context.allowStrictDirective;this.context.allowStrictDirective=o.simple;var h=this.context.allowYield,p=this.context.await;this.context.allowYield=!0,this.context.await=i;var f=this.startNode(t);this.expect("=>");var d=void 0;if(this.match("{")){var m=this.context.allowIn;this.context.allowIn=!0,d=this.parseFunctionSourceElements(),this.context.allowIn=m}else d=this.isolateCoverGrammar(this.parseAssignmentExpression);var y=d.type!==u.Syntax.BlockStatement;this.context.strict&&o.firstRestricted&&this.throwUnexpectedToken(o.firstRestricted,o.message),this.context.strict&&o.stricted&&this.tolerateUnexpectedToken(o.stricted,o.message),e=i?this.finalize(f,new s.AsyncArrowFunctionExpression(o.params,d,y)):this.finalize(f,new s.ArrowFunctionExpression(o.params,d,y)),this.context.strict=l,this.context.allowStrictDirective=c,this.context.allowYield=h,this.context.await=p}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(a.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===u.Syntax.Identifier){var g=e;this.scanner.isRestrictedWord(g.name)&&this.tolerateUnexpectedToken(n,a.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(g.name)&&this.tolerateUnexpectedToken(n,a.Messages.StrictReservedWord)}this.match("=")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var v=(n=this.nextToken()).value,x=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new s.AssignmentExpression(v,e,x)),this.context.firstCoverInitializedNameError=null}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var n=[];for(n.push(t);2!==this.lookahead.type&&this.match(",");)this.nextToken(),n.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new s.SequenceExpression(n))}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case"export":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,a.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case"import":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,a.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case"const":e=this.parseLexicalDeclaration({inFor:!1});break;case"function":e=this.parseFunctionDeclaration();break;case"class":e=this.parseClassDeclaration();break;case"let":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement()}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect("{");for(var t=[];!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.finalize(e,new s.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var n=this.createNode(),r=this.parsePattern([],e);this.context.strict&&r.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(a.Messages.StrictVarName);var i=null;return"const"===e?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.match("=")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(a.Messages.DeclarationMissingInitializer,"const")):(!t.inFor&&r.type!==u.Syntax.Identifier||this.match("="))&&(this.expect("="),i=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(n,new s.VariableDeclarator(r,i))},e.prototype.parseBindingList=function(e,t){for(var n=[this.parseLexicalBinding(e,t)];this.match(",");)this.nextToken(),n.push(this.parseLexicalBinding(e,t));return n},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&"["===t.value||7===t.type&&"{"===t.value||4===t.type&&"let"===t.value||4===t.type&&"yield"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),n=this.nextToken().value;r.assert("let"===n||"const"===n,"Lexical declaration must be either let or const");var i=this.parseBindingList(n,e);return this.consumeSemicolon(),this.finalize(t,new s.VariableDeclaration(i,n))},e.prototype.parseBindingRestElement=function(e,t){var n=this.createNode();this.expect("...");var r=this.parsePattern(e,t);return this.finalize(n,new s.RestElement(r))},e.prototype.parseArrayPattern=function(e,t){var n=this.createNode();this.expect("[");for(var r=[];!this.match("]");)if(this.match(","))this.nextToken(),r.push(null);else{if(this.match("...")){r.push(this.parseBindingRestElement(e,t));break}r.push(this.parsePatternWithDefault(e,t)),this.match("]")||this.expect(",")}return this.expect("]"),this.finalize(n,new s.ArrayPattern(r))},e.prototype.parsePropertyPattern=function(e,t){var n,r,i=this.createNode(),a=!1,o=!1;if(3===this.lookahead.type){var u=this.lookahead;n=this.parseVariableIdentifier();var l=this.finalize(i,new s.Identifier(u.value));if(this.match("=")){e.push(u),o=!0,this.nextToken();var c=this.parseAssignmentExpression();r=this.finalize(this.startNode(u),new s.AssignmentPattern(l,c))}else this.match(":")?(this.expect(":"),r=this.parsePatternWithDefault(e,t)):(e.push(u),o=!0,r=l)}else a=this.match("["),n=this.parseObjectPropertyKey(),this.expect(":"),r=this.parsePatternWithDefault(e,t);return this.finalize(i,new s.Property("init",n,a,r,!1,o))},e.prototype.parseObjectPattern=function(e,t){var n=this.createNode(),r=[];for(this.expect("{");!this.match("}");)r.push(this.parsePropertyPattern(e,t)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(n,new s.ObjectPattern(r))},e.prototype.parsePattern=function(e,t){var n;return this.match("[")?n=this.parseArrayPattern(e,t):this.match("{")?n=this.parseObjectPattern(e,t):(!this.matchKeyword("let")||"const"!==t&&"let"!==t||this.tolerateUnexpectedToken(this.lookahead,a.Messages.LetInLexicalBinding),e.push(this.lookahead),n=this.parseVariableIdentifier(t)),n},e.prototype.parsePatternWithDefault=function(e,t){var n=this.lookahead,r=this.parsePattern(e,t);if(this.match("=")){this.nextToken();var i=this.context.allowYield;this.context.allowYield=!0;var a=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=i,r=this.finalize(this.startNode(n),new s.AssignmentPattern(r,a))}return r},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),n=this.nextToken();return 4===n.type&&"yield"===n.value?this.context.strict?this.tolerateUnexpectedToken(n,a.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(n):3!==n.type?this.context.strict&&4===n.type&&this.scanner.isStrictModeReservedWord(n.value)?this.tolerateUnexpectedToken(n,a.Messages.StrictReservedWord):(this.context.strict||"let"!==n.value||"var"!==e)&&this.throwUnexpectedToken(n):(this.context.isModule||this.context.await)&&3===n.type&&"await"===n.value&&this.tolerateUnexpectedToken(n),this.finalize(t,new s.Identifier(n.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),n=this.parsePattern([],"var");this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(a.Messages.StrictVarName);var r=null;return this.match("=")?(this.nextToken(),r=this.isolateCoverGrammar(this.parseAssignmentExpression)):n.type===u.Syntax.Identifier||e.inFor||this.expect("="),this.finalize(t,new s.VariableDeclarator(n,r))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},n=[];for(n.push(this.parseVariableDeclaration(t));this.match(",");)this.nextToken(),n.push(this.parseVariableDeclaration(t));return n},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword("var");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new s.VariableDeclaration(t,"var"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(";"),this.finalize(e,new s.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new s.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword("function")&&this.tolerateError(a.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),n=null;this.expectKeyword("if"),this.expect("(");var r=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new s.EmptyStatement)):(this.expect(")"),e=this.parseIfClause(),this.matchKeyword("else")&&(this.nextToken(),n=this.parseIfClause())),this.finalize(t,new s.IfStatement(r,e,n))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword("do");var t=this.context.inIteration;this.context.inIteration=!0;var n=this.parseStatement();this.context.inIteration=t,this.expectKeyword("while"),this.expect("(");var r=this.parseExpression();return!this.match(")")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(")"),this.match(";")&&this.nextToken()),this.finalize(e,new s.DoWhileStatement(n,r))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword("while"),this.expect("(");var n=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new s.EmptyStatement);else{this.expect(")");var r=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=r}return this.finalize(t,new s.WhileStatement(n,e))},e.prototype.parseForStatement=function(){var e,t,n,r=null,i=null,o=null,l=!0,c=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){r=this.createNode(),this.nextToken();var h=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=h,1===p.length&&this.matchKeyword("in")){var f=p[0];f.init&&(f.id.type===u.Syntax.ArrayPattern||f.id.type===u.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(a.Messages.ForInOfLoopInitializer,"for-in"),r=this.finalize(r,new s.VariableDeclaration(p,"var")),this.nextToken(),e=r,t=this.parseExpression(),r=null}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(r=this.finalize(r,new s.VariableDeclaration(p,"var")),this.nextToken(),e=r,t=this.parseAssignmentExpression(),r=null,l=!1):(r=this.finalize(r,new s.VariableDeclaration(p,"var")),this.expect(";"))}else if(this.matchKeyword("const")||this.matchKeyword("let")){r=this.createNode();var d=this.nextToken().value;this.context.strict||"in"!==this.lookahead.value?(h=this.context.allowIn,this.context.allowIn=!1,p=this.parseBindingList(d,{inFor:!0}),this.context.allowIn=h,1===p.length&&null===p[0].init&&this.matchKeyword("in")?(r=this.finalize(r,new s.VariableDeclaration(p,d)),this.nextToken(),e=r,t=this.parseExpression(),r=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(r=this.finalize(r,new s.VariableDeclaration(p,d)),this.nextToken(),e=r,t=this.parseAssignmentExpression(),r=null,l=!1):(this.consumeSemicolon(),r=this.finalize(r,new s.VariableDeclaration(p,d)))):(r=this.finalize(r,new s.Identifier(d)),this.nextToken(),e=r,t=this.parseExpression(),r=null)}else{var m=this.lookahead;if(h=this.context.allowIn,this.context.allowIn=!1,r=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=h,this.matchKeyword("in"))this.context.isAssignmentTarget&&r.type!==u.Syntax.AssignmentExpression||this.tolerateError(a.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(r),e=r,t=this.parseExpression(),r=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&r.type!==u.Syntax.AssignmentExpression||this.tolerateError(a.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(r),e=r,t=this.parseAssignmentExpression(),r=null,l=!1;else{if(this.match(",")){for(var y=[r];this.match(",");)this.nextToken(),y.push(this.isolateCoverGrammar(this.parseAssignmentExpression));r=this.finalize(this.startNode(m),new s.SequenceExpression(y))}this.expect(";")}}if(void 0===e&&(this.match(";")||(i=this.parseExpression()),this.expect(";"),this.match(")")||(o=this.parseExpression())),!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),n=this.finalize(this.createNode(),new s.EmptyStatement);else{this.expect(")");var g=this.context.inIteration;this.context.inIteration=!0,n=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=g}return void 0===e?this.finalize(c,new s.ForStatement(r,i,o,n)):l?this.finalize(c,new s.ForInStatement(e,t,n)):this.finalize(c,new s.ForOfStatement(e,t,n))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword("continue");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier();t=n;var r="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)||this.throwError(a.Messages.UnknownLabel,n.name)}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(a.Messages.IllegalContinue),this.finalize(e,new s.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword("break");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier(),r="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)||this.throwError(a.Messages.UnknownLabel,n.name),t=n}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(a.Messages.IllegalBreak),this.finalize(e,new s.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(a.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword("return");var t=(this.match(";")||this.match("}")||this.hasLineTerminator||2===this.lookahead.type)&&8!==this.lookahead.type&&10!==this.lookahead.type?null:this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new s.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(a.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword("with"),this.expect("(");var n=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new s.EmptyStatement)):(this.expect(")"),e=this.parseStatement()),this.finalize(t,new s.WithStatement(n,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword("default")?(this.nextToken(),e=null):(this.expectKeyword("case"),e=this.parseExpression()),this.expect(":");for(var n=[];!(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"));)n.push(this.parseStatementListItem());return this.finalize(t,new s.SwitchCase(e,n))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword("switch"),this.expect("(");var t=this.parseExpression();this.expect(")");var n=this.context.inSwitch;this.context.inSwitch=!0;var r=[],i=!1;for(this.expect("{");!this.match("}");){var o=this.parseSwitchCase();null===o.test&&(i&&this.throwError(a.Messages.MultipleDefaultsInSwitch),i=!0),r.push(o)}return this.expect("}"),this.context.inSwitch=n,this.finalize(e,new s.SwitchStatement(t,r))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),n=this.parseExpression();if(n.type===u.Syntax.Identifier&&this.match(":")){this.nextToken();var r=n,i="$"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)&&this.throwError(a.Messages.Redeclaration,"Label",r.name),this.context.labelSet[i]=!0;var o=void 0;if(this.matchKeyword("class"))this.tolerateUnexpectedToken(this.lookahead),o=this.parseClassDeclaration();else if(this.matchKeyword("function")){var l=this.lookahead,c=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(l,a.Messages.StrictFunction):c.generator&&this.tolerateUnexpectedToken(l,a.Messages.GeneratorInLegacyContext),o=c}else o=this.parseStatement();delete this.context.labelSet[i],e=new s.LabeledStatement(r,o)}else this.consumeSemicolon(),e=new s.ExpressionStatement(n);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(a.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new s.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],n=this.parsePattern(t),r={},i=0;i<t.length;i++){var o="$"+t[i].value;Object.prototype.hasOwnProperty.call(r,o)&&this.tolerateError(a.Messages.DuplicateBinding,t[i].value),r[o]=!0}this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(a.Messages.StrictCatchVariable),this.expect(")");var l=this.parseBlock();return this.finalize(e,new s.CatchClause(n,l))},e.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword("try");var t=this.parseBlock(),n=this.matchKeyword("catch")?this.parseCatchClause():null,r=this.matchKeyword("finally")?this.parseFinallyClause():null;return n||r||this.throwError(a.Messages.NoCatchOrFinally),this.finalize(e,new s.TryStatement(t,n,r))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(e,new s.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e="{"===t?this.parseBlock():"("===t?this.parseExpressionStatement():";"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case"break":e=this.parseBreakStatement();break;case"continue":e=this.parseContinueStatement();break;case"debugger":e=this.parseDebuggerStatement();break;case"do":e=this.parseDoWhileStatement();break;case"for":e=this.parseForStatement();break;case"function":e=this.parseFunctionDeclaration();break;case"if":e=this.parseIfStatement();break;case"return":e=this.parseReturnStatement();break;case"switch":e=this.parseSwitchStatement();break;case"throw":e=this.parseThrowStatement();break;case"try":e=this.parseTryStatement();break;case"var":e=this.parseVariableStatement();break;case"while":e=this.parseWhileStatement();break;case"with":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement()}break;default:e=this.throwUnexpectedToken(this.lookahead)}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect("{");var t=this.parseDirectivePrologues(),n=this.context.labelSet,r=this.context.inIteration,i=this.context.inSwitch,a=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=n,this.context.inIteration=r,this.context.inSwitch=i,this.context.inFunctionBody=a,this.finalize(e,new s.BlockStatement(t))},e.prototype.validateParam=function(e,t,n){var r="$"+n;this.context.strict?(this.scanner.isRestrictedWord(n)&&(e.stricted=t,e.message=a.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,r)&&(e.stricted=t,e.message=a.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(n)?(e.firstRestricted=t,e.message=a.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(n)?(e.firstRestricted=t,e.message=a.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,r)&&(e.stricted=t,e.message=a.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,r,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[r]=!0},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect("...");var n=this.parsePattern(e);return this.match("=")&&this.throwError(a.Messages.DefaultRestParameter),this.match(")")||this.throwError(a.Messages.ParameterAfterRestParameter),this.finalize(t,new s.RestElement(n))},e.prototype.parseFormalParameter=function(e){for(var t=[],n=this.match("...")?this.parseRestElement(t):this.parsePatternWithDefault(t),r=0;r<t.length;r++)this.validateParam(e,t[r],t[r].value);e.simple=e.simple&&n instanceof s.Identifier,e.params.push(n)},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect("("),!this.match(")"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(")"))&&(this.expect(","),!this.match(")")););return this.expect(")"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword("async");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var n=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===n.lineNumber&&4===n.type&&"function"===n.value}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),n=this.matchContextualKeyword("async");n&&this.nextToken(),this.expectKeyword("function");var r,i=!n&&this.match("*");i&&this.nextToken();var o=null,u=null;if(!e||!this.match("(")){var l=this.lookahead;o=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(l.value)&&this.tolerateUnexpectedToken(l,a.Messages.StrictFunctionName):this.scanner.isRestrictedWord(l.value)?(u=l,r=a.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(l.value)&&(u=l,r=a.Messages.StrictReservedWord)}var c=this.context.await,h=this.context.allowYield;this.context.await=n,this.context.allowYield=!i;var p=this.parseFormalParameters(u),f=p.params,d=p.stricted;u=p.firstRestricted,p.message&&(r=p.message);var m=this.context.strict,y=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var g=this.parseFunctionSourceElements();return this.context.strict&&u&&this.throwUnexpectedToken(u,r),this.context.strict&&d&&this.tolerateUnexpectedToken(d,r),this.context.strict=m,this.context.allowStrictDirective=y,this.context.await=c,this.context.allowYield=h,n?this.finalize(t,new s.AsyncFunctionDeclaration(o,f,g)):this.finalize(t,new s.FunctionDeclaration(o,f,g,i))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword("async");t&&this.nextToken(),this.expectKeyword("function");var n,r=!t&&this.match("*");r&&this.nextToken();var i,o=null,u=this.context.await,l=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!r,!this.match("(")){var c=this.lookahead;o=this.context.strict||r||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,a.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(i=c,n=a.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(i=c,n=a.Messages.StrictReservedWord)}var h=this.parseFormalParameters(i),p=h.params,f=h.stricted;i=h.firstRestricted,h.message&&(n=h.message);var d=this.context.strict,m=this.context.allowStrictDirective;this.context.allowStrictDirective=h.simple;var y=this.parseFunctionSourceElements();return this.context.strict&&i&&this.throwUnexpectedToken(i,n),this.context.strict&&f&&this.tolerateUnexpectedToken(f,n),this.context.strict=d,this.context.allowStrictDirective=m,this.context.await=u,this.context.allowYield=l,t?this.finalize(e,new s.AsyncFunctionExpression(o,p,y)):this.finalize(e,new s.FunctionExpression(o,p,y,r))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),n=this.parseExpression(),r=n.type===u.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,r?new s.Directive(n,r):new s.ExpressionStatement(n))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var n=this.lookahead;if(8!==n.type)break;var r=this.parseDirective();t.push(r);var i=r.directive;if("string"!=typeof i)break;"use strict"===i?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,a.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(n,a.Messages.IllegalLanguageModeDirective)):!e&&n.octal&&(e=n)}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return!0;case 7:return"["===e.value}return!1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();n.params.length>0&&this.tolerateError(a.Messages.BadGetterArity);var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();1!==n.params.length?this.tolerateError(a.Messages.BadSetterArity):n.params[0]instanceof s.RestElement&&this.tolerateError(a.Messages.BadSetterRestParameter);var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();this.context.allowYield=!1;var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e="["===t||"("===t||"{"===t||"+"===t||"-"===t||"!"===t||"~"===t||"++"===t||"--"===t||"/"===t||"/="===t;break;case 4:e="class"===t||"delete"===t||"function"===t||"let"===t||"new"===t||"super"===t||"this"===t||"typeof"===t||"void"===t||"yield"===t}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword("yield");var t=null,n=!1;if(!this.hasLineTerminator){var r=this.context.allowYield;this.context.allowYield=!1,(n=this.match("*"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=r}return this.finalize(e,new s.YieldExpression(t,n))},e.prototype.parseClassElement=function(e){var t=this.lookahead,n=this.createNode(),r="",i=null,o=null,u=!1,l=!1,c=!1,h=!1;if(this.match("*"))this.nextToken();else if(u=this.match("["),"static"===(i=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(t=this.lookahead,c=!0,u=this.match("["),this.match("*")?this.nextToken():i=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&"async"===t.value){var p=this.lookahead.value;":"!==p&&"("!==p&&"*"!==p&&(h=!0,t=this.lookahead,i=this.parseObjectPropertyKey(),3===t.type&&"constructor"===t.value&&this.tolerateUnexpectedToken(t,a.Messages.ConstructorIsAsync))}var f=this.qualifiedPropertyName(this.lookahead);return 3===t.type?"get"===t.value&&f?(r="get",u=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod()):"set"===t.value&&f&&(r="set",u=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseSetterMethod()):7===t.type&&"*"===t.value&&f&&(r="init",u=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),l=!0),!r&&i&&this.match("(")&&(r="init",o=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0),r||this.throwUnexpectedToken(this.lookahead),"init"===r&&(r="method"),u||(c&&this.isPropertyKey(i,"prototype")&&this.throwUnexpectedToken(t,a.Messages.StaticPrototype),!c&&this.isPropertyKey(i,"constructor")&&(("method"!==r||!l||o&&o.generator)&&this.throwUnexpectedToken(t,a.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,a.Messages.DuplicateConstructor):e.value=!0,r="constructor")),this.finalize(n,new s.MethodDefinition(i,u,o,r,c))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():e.push(this.parseClassElement(t));return this.expect("}"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new s.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),n=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var r=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),i=null;this.matchKeyword("extends")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var a=this.parseClassBody();return this.context.strict=n,this.finalize(t,new s.ClassDeclaration(r,i,a))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var n=3===this.lookahead.type?this.parseVariableIdentifier():null,r=null;this.matchKeyword("extends")&&(this.nextToken(),r=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var i=this.parseClassBody();return this.context.strict=t,this.finalize(e,new s.ClassExpression(n,r,i))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0,this.scanner.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new s.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new s.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(a.Messages.InvalidModuleSpecifier);var t=this.nextToken(),n=this.getTokenRaw(t);return this.finalize(e,new s.Literal(t.value,n))},e.prototype.parseImportSpecifier=function(){var e,t,n=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword("as")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword("as")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(n,new s.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect("{");for(var e=[];!this.match("}");)e.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new s.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(a.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new s.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(a.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword("import");var n=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else{if(this.match("{")?n=n.concat(this.parseNamedImports()):this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(n.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.match("{")?n=n.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var r=this.lookahead.value?a.Messages.UnexpectedToken:a.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}this.nextToken(),e=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(t,new s.ImportDeclaration(n,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),n=t;return this.matchContextualKeyword("as")&&(this.nextToken(),n=this.parseIdentifierName()),this.finalize(e,new s.ExportSpecifier(t,n))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(a.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword("export"),this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var n=this.parseFunctionDeclaration(!0);e=this.finalize(t,new s.ExportDefaultDeclaration(n))}else this.matchKeyword("class")?(n=this.parseClassDeclaration(!0),e=this.finalize(t,new s.ExportDefaultDeclaration(n))):this.matchContextualKeyword("async")?(n=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression(),e=this.finalize(t,new s.ExportDefaultDeclaration(n))):(this.matchContextualKeyword("from")&&this.throwError(a.Messages.UnexpectedToken,this.lookahead.value),n=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression(),this.consumeSemicolon(),e=this.finalize(t,new s.ExportDefaultDeclaration(n)));else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var r=this.lookahead.value?a.Messages.UnexpectedToken:a.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}this.nextToken();var i=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new s.ExportAllDeclaration(i))}else if(4===this.lookahead.type){switch(n=void 0,this.lookahead.value){case"let":case"const":n=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":n=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}e=this.finalize(t,new s.ExportNamedDeclaration(n,[],null))}else if(this.matchAsyncFunction())n=this.parseFunctionDeclaration(),e=this.finalize(t,new s.ExportNamedDeclaration(n,[],null));else{var o=[],u=null,l=!1;for(this.expect("{");!this.match("}");)l=l||this.matchKeyword("default"),o.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");this.expect("}"),this.matchContextualKeyword("from")?(this.nextToken(),u=this.parseModuleSpecifier(),this.consumeSemicolon()):l?(r=this.lookahead.value?a.Messages.UnexpectedToken:a.Messages.MissingFromClause,this.throwError(r,this.lookahead.value)):this.consumeSemicolon(),e=this.finalize(t,new s.ExportNamedDeclaration(null,o,u))}return e},e}();t.Parser=c},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assert=function(e,t){if(!e)throw new Error("ASSERT: "+t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.errors=[],this.tolerant=!1}return e.prototype.recordError=function(e){this.errors.push(e)},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e)},e.prototype.constructError=function(e,t){var n=new Error(e);try{throw n}catch(e){Object.create&&Object.defineProperty&&(n=Object.create(e),Object.defineProperty(n,"column",{value:t}))}return n},e.prototype.createError=function(e,t,n,r){var i="Line "+t+": "+r,a=this.constructError(i,n);return a.index=e,a.lineNumber=t,a.description=r,a},e.prototype.throwError=function(e,t,n,r){throw this.createError(e,t,n,r)},e.prototype.tolerateError=function(e,t,n,r){var i=this.createError(e,t,n,r);if(!this.tolerant)throw i;this.recordError(i)},e}();t.ErrorHandler=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Messages={BadGetterArity:"Getter must not have any formal parameters",BadSetterArity:"Setter must have exactly one formal parameter",BadSetterRestParameter:"Setter function argument must not be a rest parameter",ConstructorIsAsync:"Class constructor may not be an async method",ConstructorSpecialMethod:"Class constructor may not be an accessor",DeclarationMissingInitializer:"Missing initializer in %0 declaration",DefaultRestParameter:"Unexpected token =",DuplicateBinding:"Duplicate binding %0",DuplicateConstructor:"A class may only have one constructor",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer",GeneratorInLegacyContext:"Generator declarations are not allowed in legacy contexts",IllegalBreak:"Illegal break statement",IllegalContinue:"Illegal continue statement",IllegalExportDeclaration:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list",IllegalReturn:"Illegal return statement",InvalidEscapedReservedWord:"Keyword must not contain escaped characters",InvalidHexEscapeSequence:"Invalid hexadecimal escape sequence",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",InvalidModuleSpecifier:"Unexpected token",InvalidRegExp:"Invalid regular expression",LetInLexicalBinding:"let is disallowed as a lexically bound name",MissingFromClause:"Unexpected token",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NewlineAfterThrow:"Illegal newline after throw",NoAsAfterImportNamespace:"Unexpected token",NoCatchOrFinally:"Missing catch or finally after try",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",Redeclaration:"%0 '%1' has already been declared",StaticPrototype:"Classes may not have static property named prototype",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictModeWith:"Strict mode code may not include a with statement",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",UnexpectedEOS:"Unexpected end of input",UnexpectedIdentifier:"Unexpected identifier",UnexpectedNumber:"Unexpected number",UnexpectedReserved:"Unexpected reserved word",UnexpectedString:"Unexpected string",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnknownLabel:"Undefined label '%0'",UnterminatedRegExp:"Invalid regular expression: missing /"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(4),a=n(11);function s(e){return"0123456789abcdef".indexOf(e.toLowerCase())}function o(e){return"01234567".indexOf(e)}var u=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.isModule=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return e.prototype.saveState=function(){return{index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=a.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=a.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.skipSingleLineComment=function(e){var t,n,r=[];for(this.trackComment&&(r=[],t=this.index-e,n={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var a=this.source.charCodeAt(this.index);if(++this.index,i.Character.isLineTerminator(a)){if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart-1};var s={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:n};r.push(s)}return 13===a&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,r}}return this.trackComment&&(n.end={line:this.lineNumber,column:this.index-this.lineStart},s={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:n},r.push(s)),r},e.prototype.skipMultiLineComment=function(){var e,t,n=[];for(this.trackComment&&(n=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var r=this.source.charCodeAt(this.index);if(i.Character.isLineTerminator(r))13===r&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===r){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var a={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};n.push(a)}return n}++this.index}else++this.index}return this.trackComment&&(t.end={line:this.lineNumber,column:this.index-this.lineStart},a={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t},n.push(a)),this.tolerateUnexpectedToken(),n},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var n=this.source.charCodeAt(this.index);if(i.Character.isWhiteSpace(n))++this.index;else if(i.Character.isLineTerminator(n))++this.index,13===n&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===n)if(47===(n=this.source.charCodeAt(this.index+1))){this.index+=2;var r=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(r)),t=!0}else{if(42!==n)break;this.index+=2,r=this.skipMultiLineComment(),this.trackComment&&(e=e.concat(r))}else if(t&&45===n){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3,r=this.skipSingleLineComment(3),this.trackComment&&(e=e.concat(r))}else{if(60!==n||this.isModule)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4,r=this.skipSingleLineComment(4),this.trackComment&&(e=e.concat(r))}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case"enum":case"export":case"import":case"super":return!0;default:return!1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}},e.prototype.isRestrictedWord=function(e){return"eval"===e||"arguments"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var n=this.source.charCodeAt(e+1);n>=56320&&n<=57343&&(t=1024*(t-55296)+n-56320+65536)}return t},e.prototype.scanHexEscape=function(e){for(var t="u"===e?4:2,n=0,r=0;r<t;++r){if(this.eof()||!i.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;n=16*n+s(this.source[this.index++])}return String.fromCharCode(n)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for("}"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],i.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+s(e);return(t>1114111||"}"!==e)&&this.throwUnexpectedToken(),i.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!i.Character.isIdentifierPart(t))break;++this.index}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),n=i.Character.fromCodePoint(t);for(this.index+=n.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),n=e);!this.eof()&&(t=this.codePointAt(this.index),i.Character.isIdentifierPart(t));)n+=e=i.Character.fromCodePoint(t),this.index+=e.length,92===t&&(n=n.substr(0,n.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),n+=e);return n},e.prototype.octalToDecimal=function(e){var t="0"!==e,n=o(e);return!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,n=8*n+o(this.source[this.index++]),"0123".indexOf(e)>=0&&!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(n=8*n+o(this.source[this.index++]))),{code:n,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,n=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!=(e=1===n.length?3:this.isKeyword(n)?4:"null"===n?5:"true"===n||"false"===n?1:3)&&t+n.length!==this.index){var r=this.index;this.index=t,this.tolerateUnexpectedToken(a.Messages.InvalidEscapedReservedWord),this.index=r}return{type:e,value:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case"(":case"{":"{"===t&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,t="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:">>>="===(t=this.source.substr(this.index,4))?this.index+=4:"==="===(t=t.substr(0,3))||"!=="===t||">>>"===t||"<<="===t||">>="===t||"**="===t?this.index+=3:"&&"===(t=t.substr(0,2))||"||"===t||"=="===t||"!="===t||"+="===t||"-="===t||"*="===t||"/="===t||"++"===t||"--"===t||"<<"===t||">>"===t||"&="===t||"|="===t||"^="===t||"%="===t||"<="===t||">="===t||"=>"===t||"**"===t?this.index+=2:(t=this.source[this.index],"<>=!+-*%&|^/".indexOf(t)>=0&&++this.index)}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t="";!this.eof()&&i.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt("0x"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,n="";!this.eof()&&("0"===(t=this.source[this.index])||"1"===t);)n+=this.source[this.index++];return 0===n.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(i.Character.isIdentifierStart(t)||i.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(n,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var n="",r=!1;for(i.Character.isOctalDigit(e.charCodeAt(0))?(r=!0,n="0"+this.source[this.index++]):++this.index;!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];return r||0!==n.length||this.throwUnexpectedToken(),(i.Character.isIdentifierStart(this.source.charCodeAt(this.index))||i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(n,8),octal:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if("8"===t||"9"===t)return!1;if(!i.Character.isOctalDigit(t.charCodeAt(0)))return!0}return!0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];r.assert(i.Character.isDecimalDigit(t.charCodeAt(0))||"."===t,"Numeric literal must start with a decimal digit or a decimal point");var n="";if("."!==t){if(n=this.source[this.index++],t=this.source[this.index],"0"===n){if("x"===t||"X"===t)return++this.index,this.scanHexLiteral(e);if("b"===t||"B"===t)return++this.index,this.scanBinaryLiteral(e);if("o"===t||"O"===t)return this.scanOctalLiteral(t,e);if(t&&i.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("."===t){for(n+=this.source[this.index++];i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("e"===t||"E"===t)if(n+=this.source[this.index++],"+"!==(t=this.source[this.index])&&"-"!==t||(n+=this.source[this.index++]),i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];else this.throwUnexpectedToken();return i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];r.assert("'"===t||'"'===t,"String literal must starts with a quote"),++this.index;for(var n=!1,s="";!this.eof();){var o=this.source[this.index++];if(o===t){t="";break}if("\\"===o)if((o=this.source[this.index++])&&i.Character.isLineTerminator(o.charCodeAt(0)))++this.lineNumber,"\r"===o&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(o){case"u":if("{"===this.source[this.index])++this.index,s+=this.scanUnicodeCodePointEscape();else{var u=this.scanHexEscape(o);null===u&&this.throwUnexpectedToken(),s+=u}break;case"x":var l=this.scanHexEscape(o);null===l&&this.throwUnexpectedToken(a.Messages.InvalidHexEscapeSequence),s+=l;break;case"n":s+="\n";break;case"r":s+="\r";break;case"t":s+="\t";break;case"b":s+="\b";break;case"f":s+="\f";break;case"v":s+="\v";break;case"8":case"9":s+=o,this.tolerateUnexpectedToken();break;default:if(o&&i.Character.isOctalDigit(o.charCodeAt(0))){var c=this.octalToDecimal(o);n=c.octal||n,s+=String.fromCharCode(c.code)}else s+=o}else{if(i.Character.isLineTerminator(o.charCodeAt(0)))break;s+=o}}return""!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:s,octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e="",t=!1,n=this.index,r="`"===this.source[n],s=!1,o=2;for(++this.index;!this.eof();){var u=this.source[this.index++];if("`"===u){o=1,s=!0,t=!0;break}if("$"===u){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,t=!0;break}e+=u}else if("\\"===u)if(u=this.source[this.index++],i.Character.isLineTerminator(u.charCodeAt(0)))++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(u){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"u":if("{"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else{var l=this.index,c=this.scanHexEscape(u);null!==c?e+=c:(this.index=l,e+=u)}break;case"x":var h=this.scanHexEscape(u);null===h&&this.throwUnexpectedToken(a.Messages.InvalidHexEscapeSequence),e+=h;break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:"0"===u?(i.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(a.Messages.TemplateOctalLiteral),e+="\0"):i.Character.isOctalDigit(u.charCodeAt(0))?this.throwUnexpectedToken(a.Messages.TemplateOctalLiteral):e+=u}else i.Character.isLineTerminator(u.charCodeAt(0))?(++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+="\n"):e+=u}return t||this.throwUnexpectedToken(),r||this.curlyStack.pop(),{type:10,value:this.source.slice(n+1,this.index-o),cooked:e,head:r,tail:s,lineNumber:this.lineNumber,lineStart:this.lineStart,start:n,end:this.index}},e.prototype.testRegExp=function(e,t){var n=e,r=this;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,(function(e,t,n){var i=parseInt(t||n,16);return i>1114111&&r.throwUnexpectedToken(a.Messages.InvalidRegExp),i<=65535?String.fromCharCode(i):"￿"})).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"￿"));try{RegExp(n)}catch(e){this.throwUnexpectedToken(a.Messages.InvalidRegExp)}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];r.assert("/"===e,"Regular expression literal must start with a slash");for(var t=this.source[this.index++],n=!1,s=!1;!this.eof();)if(t+=e=this.source[this.index++],"\\"===e)e=this.source[this.index++],i.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(a.Messages.UnterminatedRegExp),t+=e;else if(i.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(a.Messages.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){s=!0;break}"["===e&&(n=!0)}return s||this.throwUnexpectedToken(a.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e="";!this.eof();){var t=this.source[this.index];if(!i.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,"\\"!==t||this.eof())e+=t;else if("u"===(t=this.source[this.index])){++this.index;var n=this.index,r=this.scanHexEscape("u");if(null!==r)for(e+=r;n<this.index;++n)this.source[n];else this.index=n,e+="u";this.tolerateUnexpectedToken()}else this.tolerateUnexpectedToken()}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),n=this.scanRegExpFlags();return{type:9,value:"",pattern:t,flags:n,regex:this.testRegExp(t,n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return{type:2,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return i.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?i.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():i.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&i.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenName={},t.TokenName[1]="Boolean",t.TokenName[2]="<end>",t.TokenName[3]="Identifier",t.TokenName[4]="Keyword",t.TokenName[5]="Null",t.TokenName[6]="Numeric",t.TokenName[7]="Punctuator",t.TokenName[8]="String",t.TokenName[9]="RegularExpression",t.TokenName[10]="Template"},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(12),a=n(13),s=function(){function e(){this.values=[],this.curly=this.paren=-1}return e.prototype.beforeFunctionExpression=function(e){return["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case"this":case"]":t=!1;break;case")":var n=this.values[this.paren-1];t="if"===n||"while"===n||"for"===n||"with"===n;break;case"}":if(t=!1,"function"===this.values[this.curly-3])t=!!(r=this.values[this.curly-4])&&!this.beforeFunctionExpression(r);else if("function"===this.values[this.curly-4]){var r;t=!(r=this.values[this.curly-5])||!this.beforeFunctionExpression(r)}}return t},e.prototype.push=function(e){7===e.type||4===e.type?("{"===e.value?this.curly=this.values.length:"("===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null)},e}(),o=function(){function e(e,t){this.errorHandler=new r.ErrorHandler,this.errorHandler.tolerant=!!t&&"boolean"==typeof t.tolerant&&t.tolerant,this.scanner=new i.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&"boolean"==typeof t.comment&&t.comment,this.trackRange=!!t&&"boolean"==typeof t.range&&t.range,this.trackLoc=!!t&&"boolean"==typeof t.loc&&t.loc,this.buffer=[],this.reader=new s}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var n=e[t],r=this.scanner.source.slice(n.slice[0],n.slice[1]),i={type:n.multiLine?"BlockComment":"LineComment",value:r};this.trackRange&&(i.range=n.range),this.trackLoc&&(i.loc=n.loc),this.buffer.push(i)}if(!this.scanner.eof()){var s=void 0;this.trackLoc&&(s={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var o="/"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(o);var u={type:a.TokenName[o.type],value:this.scanner.source.slice(o.start,o.end)};if(this.trackRange&&(u.range=[o.start,o.end]),this.trackLoc&&(s.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},u.loc=s),9===o.type){var l=o.pattern,c=o.flags;u.regex={pattern:l,flags:c}}this.buffer.push(u)}}return this.buffer.shift()},e}();t.Tokenizer=o}])},e.exports=r()},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(17)),s=i(n(16)),o=s.namedTypes,u=s.builtInTypes.array,l=s.builtInTypes.object,c=n(27),h=n(18),p=n(136).makeUniqueKey();function f(e,t,n){for(var r=function e(t,n,r){if(t){if(h.fixFaultyLocations(t,n),r){if(o.Node.check(t)&&o.SourceLocation.check(t.loc)){for(var i=r.length-1;i>=0&&!(h.comparePos(r[i].loc.end,t.loc.start)<=0);--i);return void r.splice(i+1,0,t)}}else if(t[p])return t[p];var a;if(u.check(t))a=Object.keys(t);else{if(!l.check(t))return;a=s.getFieldNames(t)}r||Object.defineProperty(t,p,{value:r=[],enumerable:!1});i=0;for(var c=a.length;i<c;++i)e(t[a[i]],n,r);return r}}(e,n),i=0,a=r.length;i<a;){var c=i+a>>1,d=r[c];if(h.comparePos(d.loc.start,t.loc.start)<=0&&h.comparePos(t.loc.end,d.loc.end)<=0)return void f(t.enclosingNode=d,t,n);if(h.comparePos(d.loc.end,t.loc.start)<=0){var m=d;i=c+1}else{if(!(h.comparePos(t.loc.end,d.loc.start)<=0))throw new Error("Comment location overlaps with node location");var y=d;a=c}}m&&(t.precedingNode=m),y&&(t.followingNode=y)}function d(e,t){var n=e.length;if(0!==n){for(var r=e[0].precedingNode,i=e[0].followingNode,s=i.loc.start,o=n;o>0;--o){var u=e[o-1];a.default.strictEqual(u.precedingNode,r),a.default.strictEqual(u.followingNode,i);var l=t.sliceString(u.loc.end,s);if(/\S/.test(l))break;s=u.loc.start}for(;o<=n&&(u=e[o])&&("Line"===u.type||"CommentLine"===u.type)&&u.loc.start.column>i.loc.start.column;)++o;e.forEach((function(e,t){t<o?g(r,e):y(i,e)})),e.length=0}}function m(e,t){(e.comments||(e.comments=[])).push(t)}function y(e,t){t.leading=!0,t.trailing=!1,m(e,t)}function g(e,t){t.leading=!1,t.trailing=!0,m(e,t)}t.attach=function(e,t,n){if(u.check(e)){var r=[];e.forEach((function(e){e.loc.lines=n,f(t,e,n);var i=e.precedingNode,s=e.enclosingNode,o=e.followingNode;if(i&&o){var u=r.length;if(u>0){var l=r[u-1];a.default.strictEqual(l.precedingNode===e.precedingNode,l.followingNode===e.followingNode),l.followingNode!==e.followingNode&&d(r,n)}r.push(e)}else if(i)d(r,n),g(i,e);else if(o)d(r,n),y(o,e);else{if(!s)throw new Error("AST contains no nodes at all?");d(r,n),function(e,t){t.leading=!1,t.trailing=!1,m(e,t)}(s,e)}})),d(r,n),e.forEach((function(e){delete e.precedingNode,delete e.enclosingNode,delete e.followingNode}))}},t.printComments=function(e,t){var n=e.getValue(),r=t(e),i=o.Node.check(n)&&s.getFieldValue(n,"comments");if(!i||0===i.length)return r;var a=[],u=[r];return e.each((function(e){var r=e.getValue(),i=s.getFieldValue(r,"leading"),l=s.getFieldValue(r,"trailing");i||l&&!o.Statement.check(n)&&"Block"!==r.type&&"CommentBlock"!==r.type?a.push(function(e,t){var n=e.getValue();o.Comment.assert(n);var r=n.loc,i=r&&r.lines,a=[t(e)];if(n.trailing)a.push("\n");else if(i instanceof c.Lines){var s=i.slice(r.end,i.skipSpaces(r.end)||i.lastPos());1===s.length?a.push(s):a.push(new Array(s.length).join("\n"))}else a.push("\n");return c.concat(a)}(e,t)):l&&u.push(function(e,t){var n=e.getValue(e);o.Comment.assert(n);var r=n.loc,i=r&&r.lines,a=[];if(i instanceof c.Lines){var s=i.skipSpaces(r.start,!0)||i.firstPos(),u=i.slice(s,r.start);1===u.length?a.push(u):a.push(new Array(u.length).join("\n"))}return a.push(t(e)),c.concat(a)}(e,t))}),"comments"),a.push.apply(a,u),c.concat(a)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(17)),s=i(n(16)),o=s.namedTypes,u=s.builtInTypes.array,l=s.builtInTypes.number,c=i(n(18)),h=function e(t){a.default.ok(this instanceof e),this.stack=[t]},p=h.prototype;function f(e,t){for(var n=e.stack,r=n.length-1;r>=0;r-=2){var i=n[r];if(o.Node.check(i)&&--t<0)return i}return null}function d(e){return o.BinaryExpression.check(e)||o.LogicalExpression.check(e)}h.from=function(e){if(e instanceof h)return e.copy();if(e instanceof s.NodePath){for(var t,n=Object.create(h.prototype),r=[e.value];t=e.parentPath;e=t)r.push(e.name,t.value);return n.stack=r.reverse(),n}return new h(e)},p.copy=function(){var e=Object.create(h.prototype);return e.stack=this.stack.slice(0),e},p.getName=function(){var e=this.stack,t=e.length;return t>1?e[t-2]:null},p.getValue=function(){var e=this.stack;return e[e.length-1]},p.valueIsDuplicate=function(){var e=this.stack,t=e.length-1;return e.lastIndexOf(e[t],t-1)>=0},p.getNode=function(e){return void 0===e&&(e=0),f(this,~~e)},p.getParentNode=function(e){return void 0===e&&(e=0),f(this,1+~~e)},p.getRootValue=function(){var e=this.stack;return e.length%2==0?e[1]:e[0]},p.call=function(e){for(var t=this.stack,n=t.length,r=t[n-1],i=arguments.length,a=1;a<i;++a){var s=arguments[a];r=r[s],t.push(s,r)}var o=e(this);return t.length=n,o},p.each=function(e){for(var t=this.stack,n=t.length,r=t[n-1],i=arguments.length,a=1;a<i;++a){var s=arguments[a];r=r[s],t.push(s,r)}for(a=0;a<r.length;++a)a in r&&(t.push(a,r[a]),e(this),t.length-=2);t.length=n},p.map=function(e){for(var t=this.stack,n=t.length,r=t[n-1],i=arguments.length,a=1;a<i;++a){var s=arguments[a];r=r[s],t.push(s,r)}var o=new Array(r.length);for(a=0;a<r.length;++a)a in r&&(t.push(a,r[a]),o[a]=e(this,a),t.length-=2);return t.length=n,o},p.hasParens=function(){var e=this.getNode(),t=this.getPrevToken(e);if(!t)return!1;var n=this.getNextToken(e);if(!n)return!1;if("("===t.value){if(")"===n.value)return!0;if(!this.canBeFirstInStatement()&&this.firstInStatement()&&!this.needsParens(!0))return!0}return!1},p.getPrevToken=function(e){var t=(e=e||this.getNode())&&e.loc,n=t&&t.tokens;if(n&&t.start.token>0){var r=n[t.start.token-1];if(r){var i=this.getRootValue().loc;if(c.comparePos(i.start,r.loc.start)<=0)return r}}return null},p.getNextToken=function(e){var t=(e=e||this.getNode())&&e.loc,n=t&&t.tokens;if(n&&t.end.token<n.length){var r=n[t.end.token];if(r){var i=this.getRootValue().loc;if(c.comparePos(r.loc.end,i.end)<=0)return r}}return null},p.needsParens=function(e){var t=this.getNode();if("AssignmentExpression"===t.type&&"ObjectPattern"===t.left.type)return!0;var n=this.getParentNode();if(!n)return!1;var r=this.getName();if(this.getValue()!==t)return!1;if(o.Statement.check(t))return!1;if("Identifier"===t.type)return!1;if("ParenthesizedExpression"===n.type)return!1;switch(t.type){case"UnaryExpression":case"SpreadElement":case"SpreadProperty":return"MemberExpression"===n.type&&"object"===r&&n.object===t;case"BinaryExpression":case"LogicalExpression":switch(n.type){case"CallExpression":return"callee"===r&&n.callee===t;case"UnaryExpression":case"SpreadElement":case"SpreadProperty":return!0;case"MemberExpression":return"object"===r&&n.object===t;case"BinaryExpression":case"LogicalExpression":var i=n.operator,s=m[i],u=t.operator,c=m[u];if(s>c)return!0;if(s===c&&"right"===r)return a.default.strictEqual(n.right,t),!0;default:return!1}case"SequenceExpression":switch(n.type){case"ReturnStatement":case"ForStatement":return!1;case"ExpressionStatement":return"expression"!==r;default:return!0}case"YieldExpression":switch(n.type){case"BinaryExpression":case"LogicalExpression":case"UnaryExpression":case"SpreadElement":case"SpreadProperty":case"CallExpression":case"MemberExpression":case"NewExpression":case"ConditionalExpression":case"YieldExpression":return!0;default:return!1}case"IntersectionTypeAnnotation":case"UnionTypeAnnotation":return"NullableTypeAnnotation"===n.type;case"Literal":return"MemberExpression"===n.type&&l.check(t.value)&&"object"===r&&n.object===t;case"NumericLiteral":return"MemberExpression"===n.type&&"object"===r&&n.object===t;case"AssignmentExpression":case"ConditionalExpression":switch(n.type){case"UnaryExpression":case"SpreadElement":case"SpreadProperty":case"BinaryExpression":case"LogicalExpression":return!0;case"CallExpression":case"NewExpression":return"callee"===r&&n.callee===t;case"ConditionalExpression":return"test"===r&&n.test===t;case"MemberExpression":return"object"===r&&n.object===t;default:return!1}case"ArrowFunctionExpression":return!(!o.CallExpression.check(n)||"callee"!==r)||(!(!o.MemberExpression.check(n)||"object"!==r)||d(n));case"ObjectExpression":if("ArrowFunctionExpression"===n.type&&"body"===r)return!0;break;case"TSAsExpression":if("ArrowFunctionExpression"===n.type&&"body"===r&&"ObjectExpression"===t.expression.type)return!0;break;case"CallExpression":if("declaration"===r&&o.ExportDefaultDeclaration.check(n)&&o.FunctionExpression.check(t.callee))return!0}return"NewExpression"===n.type&&"callee"===r&&n.callee===t?y(t):!(!0===e||this.canBeFirstInStatement()||!this.firstInStatement())};var m={};function y(e){return!!o.CallExpression.check(e)||(u.check(e)?e.some(y):!!o.Node.check(e)&&s.someField(e,(function(e,t){return y(t)})))}[["||"],["&&"],["|"],["^"],["&"],["==","===","!=","!=="],["<",">","<=",">=","in","instanceof"],[">>","<<",">>>"],["+","-"],["*","/","%","**"]].forEach((function(e,t){e.forEach((function(e){m[e]=t}))})),p.canBeFirstInStatement=function(){var e=this.getNode();return!o.FunctionExpression.check(e)&&(!o.ObjectExpression.check(e)&&!o.ClassExpression.check(e))},p.firstInStatement=function(){for(var e,t,n,r,i=this.stack,s=i.length-1;s>=0;s-=2)if(o.Node.check(i[s])&&(n=e,r=t,e=i[s-1],t=i[s]),t&&r){if(o.BlockStatement.check(t)&&"body"===e&&0===n)return a.default.strictEqual(t.body[0],r),!0;if(o.ExpressionStatement.check(t)&&"expression"===n)return a.default.strictEqual(t.expression,r),!0;if(o.AssignmentExpression.check(t)&&"left"===n)return a.default.strictEqual(t.left,r),!0;if(o.ArrowFunctionExpression.check(t)&&"body"===n)return a.default.strictEqual(t.body,r),!0;if(o.SequenceExpression.check(t)&&"expressions"===e&&0===n)a.default.strictEqual(t.expressions[0],r);else if(o.CallExpression.check(t)&&"callee"===n)a.default.strictEqual(t.callee,r);else if(o.MemberExpression.check(t)&&"object"===n)a.default.strictEqual(t.object,r);else if(o.ConditionalExpression.check(t)&&"test"===n)a.default.strictEqual(t.test,r);else if(d(t)&&"left"===n)a.default.strictEqual(t.left,r);else{if(!o.UnaryExpression.check(t)||t.prefix||"argument"!==n)return!1;a.default.strictEqual(t.argument,r)}}return!0},t.default=h},,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){"use strict";(function(global){var numeric=exports;void 0!==global&&(global.numeric=numeric),numeric.version="1.2.6",numeric.bench=function(e,t){var n,r,i;for(void 0===t&&(t=15),r=.5,n=new Date;;){for(i=r*=2;i>3;i-=4)e(),e(),e(),e();for(;i>0;)e(),i--;if(new Date-n>t)break}for(i=r;i>3;i-=4)e(),e(),e(),e();for(;i>0;)e(),i--;return 1e3*(3*r-1)/(new Date-n)},numeric._myIndexOf=function(e){var t,n=this.length;for(t=0;t<n;++t)if(this[t]===e)return t;return-1},numeric.myIndexOf=Array.prototype.indexOf?Array.prototype.indexOf:numeric._myIndexOf,numeric.Function=Function,numeric.precision=4,numeric.largeArray=50,numeric.prettyPrint=function(e){var t=[];return function e(n){var r;if(void 0===n)return t.push(Array(numeric.precision+8).join(" ")),!1;if("string"==typeof n)return t.push('"'+n+'"'),!1;if("boolean"==typeof n)return t.push(n.toString()),!1;if("number"==typeof n){var i=function e(t){if(0===t)return"0";if(isNaN(t))return"NaN";if(t<0)return"-"+e(-t);if(isFinite(t)){var n=Math.floor(Math.log(t)/Math.log(10)),r=t/Math.pow(10,n),i=r.toPrecision(numeric.precision);return 10===parseFloat(i)&&(n++,i=(r=1).toPrecision(numeric.precision)),parseFloat(i).toString()+"e"+n.toString()}return"Infinity"}(n),a=n.toPrecision(numeric.precision),s=parseFloat(n.toString()).toString(),o=[i,a,s,parseFloat(a).toString(),parseFloat(s).toString()];for(r=1;r<o.length;r++)o[r].length<i.length&&(i=o[r]);return t.push(Array(numeric.precision+8-i.length).join(" ")+i),!1}if(null===n)return t.push("null"),!1;if("function"==typeof n){t.push(n.toString());var u=!1;for(r in n)n.hasOwnProperty(r)&&(u?t.push(",\n"):t.push("\n{"),u=!0,t.push(r),t.push(": \n"),e(n[r]));return u&&t.push("}\n"),!0}if(n instanceof Array){if(n.length>numeric.largeArray)return t.push("...Large Array..."),!0;u=!1;for(t.push("["),r=0;r<n.length;r++)r>0&&(t.push(","),u&&t.push("\n ")),u=e(n[r]);return t.push("]"),!0}for(r in t.push("{"),u=!1,n)n.hasOwnProperty(r)&&(u&&t.push(",\n"),u=!0,t.push(r),t.push(": \n"),e(n[r]));return t.push("}"),!0}(e),t.join("")},numeric.parseDate=function(e){return function e(t){if("string"==typeof t)return Date.parse(t.replace(/-/g,"/"));if(!(t instanceof Array))throw new Error("parseDate: parameter must be arrays of strings");var n,r=[];for(n=0;n<t.length;n++)r[n]=e(t[n]);return r}(e)},numeric.parseFloat=function(e){return function e(t){if("string"==typeof t)return parseFloat(t);if(!(t instanceof Array))throw new Error("parseFloat: parameter must be arrays of strings");var n,r=[];for(n=0;n<t.length;n++)r[n]=e(t[n]);return r}(e)},numeric.parseCSV=function(e){var t,n,r,i=e.split("\n"),a=[],s=/(([^'",]*)|('[^']*')|("[^"]*")),/g,o=/^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/,u=0;for(n=0;n<i.length;n++){var l,c=(i[n]+",").match(s);if(c.length>0){for(a[u]=[],t=0;t<c.length;t++)l=(r=c[t]).substr(0,r.length-1),o.test(l)?a[u][t]=parseFloat(l):a[u][t]=l;u++}}return a},numeric.toCSV=function(e){var t,n,r,i,a,s=numeric.dim(e);for(r=s[0],s[1],a=[],t=0;t<r;t++){for(i=[],n=0;n<r;n++)i[n]=e[t][n].toString();a[t]=i.join(", ")}return a.join("\n")+"\n"},numeric.getURL=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(),t},numeric.imageURL=function(e){function t(e,t,n){void 0===t&&(t=0),void 0===n&&(n=e.length);var r,i=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],a=-1;e.length;for(r=t;r<n;r++)a=a>>>8^i[255&(a^e[r])];return-1^a}var n,r,i,a,s,o,u,l,c,h,p=e[0].length,f=e[0][0].length,d=[137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,f>>24&255,f>>16&255,f>>8&255,255&f,p>>24&255,p>>16&255,p>>8&255,255&p,8,2,0,0,0,-1,-2,-3,-4,-5,-6,-7,-8,73,68,65,84,8,29];for(h=t(d,12,29),d[29]=h>>24&255,d[30]=h>>16&255,d[31]=h>>8&255,d[32]=255&h,n=1,r=0,u=0;u<p;u++){for(u<p-1?d.push(0):d.push(1),s=3*f+1+(0===u)&255,o=3*f+1+(0===u)>>8&255,d.push(s),d.push(o),d.push(255&~s),d.push(255&~o),0===u&&d.push(0),l=0;l<f;l++)for(i=0;i<3;i++)r=(r+(n=(n+(s=(s=e[i][u][l])>255?255:s<0?0:Math.round(s)))%65521))%65521,d.push(s);d.push(0)}return c=(r<<16)+n,d.push(c>>24&255),d.push(c>>16&255),d.push(c>>8&255),d.push(255&c),a=d.length-41,d[33]=a>>24&255,d[34]=a>>16&255,d[35]=a>>8&255,d[36]=255&a,h=t(d,37),d.push(h>>24&255),d.push(h>>16&255),d.push(h>>8&255),d.push(255&h),d.push(0),d.push(0),d.push(0),d.push(0),d.push(73),d.push(69),d.push(78),d.push(68),d.push(174),d.push(66),d.push(96),d.push(130),"data:image/png;base64,"+function(e){var t,n,r,i,a,s,o,u=e.length,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c="";for(t=0;t<u;t+=3)a=((3&(n=e[t]))<<4)+((r=e[t+1])>>4),s=((15&r)<<2)+((i=e[t+2])>>6),o=63&i,t+1>=u?s=o=64:t+2>=u&&(o=64),c+=l.charAt(n>>2)+l.charAt(a)+l.charAt(s)+l.charAt(o);return c}(d)},numeric._dim=function(e){for(var t=[];"object"==typeof e;)t.push(e.length),e=e[0];return t},numeric.dim=function(e){var t;return"object"==typeof e?"object"==typeof(t=e[0])?"object"==typeof t[0]?numeric._dim(e):[e.length,t.length]:[e.length]:[]},numeric.mapreduce=function(e,t){return Function("x","accum","_s","_k",'if(typeof accum === "undefined") accum = '+t+';\nif(typeof x === "number") { var xi = x; '+e+'; return accum; }\nif(typeof _s === "undefined") _s = numeric.dim(x);\nif(typeof _k === "undefined") _k = 0;\nvar _n = _s[_k];\nvar i,xi;\nif(_k < _s.length-1) {\n    for(i=_n-1;i>=0;i--) {\n        accum = arguments.callee(x[i],accum,_s,_k+1);\n    }    return accum;\n}\nfor(i=_n-1;i>=1;i-=2) { \n    xi = x[i];\n    '+e+";\n    xi = x[i-1];\n    "+e+";\n}\nif(i === 0) {\n    xi = x[i];\n    "+e+"\n}\nreturn accum;")},numeric.mapreduce2=function(e,t){return Function("x","var n = x.length;\nvar i,xi;\n"+t+";\nfor(i=n-1;i!==-1;--i) { \n    xi = x[i];\n    "+e+";\n}\nreturn accum;")},numeric.same=function e(t,n){var r,i;if(!(t instanceof Array&&n instanceof Array))return!1;if((i=t.length)!==n.length)return!1;for(r=0;r<i;r++)if(t[r]!==n[r]){if("object"!=typeof t[r])return!1;if(!e(t[r],n[r]))return!1}return!0},numeric.rep=function(e,t,n){void 0===n&&(n=0);var r,i=e[n],a=Array(i);if(n===e.length-1){for(r=i-2;r>=0;r-=2)a[r+1]=t,a[r]=t;return-1===r&&(a[0]=t),a}for(r=i-1;r>=0;r--)a[r]=numeric.rep(e,t,n+1);return a},numeric.dotMMsmall=function(e,t){var n,r,i,a,s,o,u,l,c,h,p;for(a=e.length,s=t.length,o=t[0].length,u=Array(a),n=a-1;n>=0;n--){for(l=Array(o),c=e[n],i=o-1;i>=0;i--){for(h=c[s-1]*t[s-1][i],r=s-2;r>=1;r-=2)p=r-1,h+=c[r]*t[r][i]+c[p]*t[p][i];0===r&&(h+=c[0]*t[0][i]),l[i]=h}u[n]=l}return u},numeric._getCol=function(e,t,n){var r;for(r=e.length-1;r>0;--r)n[r]=e[r][t],n[--r]=e[r][t];0===r&&(n[0]=e[0][t])},numeric.dotMMbig=function(e,t){var n,r,i,a=numeric._getCol,s=t.length,o=Array(s),u=e.length,l=t[0].length,c=new Array(u),h=numeric.dotVV;for(--s,r=--u;-1!==r;--r)c[r]=Array(l);for(r=--l;-1!==r;--r)for(a(t,r,o),i=u;-1!==i;--i)0,n=e[i],c[i][r]=h(n,o);return c},numeric.dotMV=function(e,t){var n,r=e.length,i=(t.length,Array(r)),a=numeric.dotVV;for(n=r-1;n>=0;n--)i[n]=a(e[n],t);return i},numeric.dotVM=function(e,t){var n,r,i,a,s,o,u;for(i=e.length,a=t[0].length,s=Array(a),r=a-1;r>=0;r--){for(o=e[i-1]*t[i-1][r],n=i-2;n>=1;n-=2)u=n-1,o+=e[n]*t[n][r]+e[u]*t[u][r];0===n&&(o+=e[0]*t[0][r]),s[r]=o}return s},numeric.dotVV=function(e,t){var n,r,i=e.length,a=e[i-1]*t[i-1];for(n=i-2;n>=1;n-=2)r=n-1,a+=e[n]*t[n]+e[r]*t[r];return 0===n&&(a+=e[0]*t[0]),a},numeric.dot=function(e,t){var n=numeric.dim;switch(1e3*n(e).length+n(t).length){case 2002:return t.length<10?numeric.dotMMsmall(e,t):numeric.dotMMbig(e,t);case 2001:return numeric.dotMV(e,t);case 1002:return numeric.dotVM(e,t);case 1001:return numeric.dotVV(e,t);case 1e3:return numeric.mulVS(e,t);case 1:return numeric.mulSV(e,t);case 0:return e*t;default:throw new Error("numeric.dot only works on vectors and matrices")}},numeric.diag=function(e){var t,n,r,i,a=e.length,s=Array(a);for(t=a-1;t>=0;t--){for(i=Array(a),n=t+2,r=a-1;r>=n;r-=2)i[r]=0,i[r-1]=0;for(r>t&&(i[r]=0),i[t]=e[t],r=t-1;r>=1;r-=2)i[r]=0,i[r-1]=0;0===r&&(i[0]=0),s[t]=i}return s},numeric.getDiag=function(e){var t,n=Math.min(e.length,e[0].length),r=Array(n);for(t=n-1;t>=1;--t)r[t]=e[t][t],r[--t]=e[t][t];return 0===t&&(r[0]=e[0][0]),r},numeric.identity=function(e){return numeric.diag(numeric.rep([e],1))},numeric.pointwise=function(e,t,n){void 0===n&&(n="");var r,i,a=[],s=/\[i\]$/,o="",u=!1;for(r=0;r<e.length;r++)s.test(e[r])?o=i=e[r].substring(0,e[r].length-3):i=e[r],"ret"===i&&(u=!0),a.push(i);return a[e.length]="_s",a[e.length+1]="_k",a[e.length+2]='if(typeof _s === "undefined") _s = numeric.dim('+o+');\nif(typeof _k === "undefined") _k = 0;\nvar _n = _s[_k];\nvar i'+(u?"":", ret = Array(_n)")+";\nif(_k < _s.length-1) {\n    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee("+e.join(",")+",_s,_k+1);\n    return ret;\n}\n"+n+"\nfor(i=_n-1;i!==-1;--i) {\n    "+t+"\n}\nreturn ret;",Function.apply(null,a)},numeric.pointwise2=function(e,t,n){void 0===n&&(n="");var r,i,a=[],s=/\[i\]$/,o="",u=!1;for(r=0;r<e.length;r++)s.test(e[r])?o=i=e[r].substring(0,e[r].length-3):i=e[r],"ret"===i&&(u=!0),a.push(i);return a[e.length]="var _n = "+o+".length;\nvar i"+(u?"":", ret = Array(_n)")+";\n"+n+"\nfor(i=_n-1;i!==-1;--i) {\n"+t+"\n}\nreturn ret;",Function.apply(null,a)},numeric._biforeach=function e(t,n,r,i,a){var s;if(i!==r.length-1)for(s=r[i]-1;s>=0;s--)e("object"==typeof t?t[s]:t,"object"==typeof n?n[s]:n,r,i+1,a);else a(t,n)},numeric._biforeach2=function e(t,n,r,i,a){if(i===r.length-1)return a(t,n);var s,o=r[i],u=Array(o);for(s=o-1;s>=0;--s)u[s]=e("object"==typeof t?t[s]:t,"object"==typeof n?n[s]:n,r,i+1,a);return u},numeric._foreach=function e(t,n,r,i){var a;if(r!==n.length-1)for(a=n[r]-1;a>=0;a--)e(t[a],n,r+1,i);else i(t)},numeric._foreach2=function e(t,n,r,i){if(r===n.length-1)return i(t);var a,s=n[r],o=Array(s);for(a=s-1;a>=0;a--)o[a]=e(t[a],n,r+1,i);return o},numeric.ops2={add:"+",sub:"-",mul:"*",div:"/",mod:"%",and:"&&",or:"||",eq:"===",neq:"!==",lt:"<",gt:">",leq:"<=",geq:">=",band:"&",bor:"|",bxor:"^",lshift:"<<",rshift:">>",rrshift:">>>"},numeric.opseq={addeq:"+=",subeq:"-=",muleq:"*=",diveq:"/=",modeq:"%=",lshifteq:"<<=",rshifteq:">>=",rrshifteq:">>>=",bandeq:"&=",boreq:"|=",bxoreq:"^="},numeric.mathfuns=["abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","isNaN","isFinite"],numeric.mathfuns2=["atan2","pow","max","min"],numeric.ops1={neg:"-",not:"!",bnot:"~",clone:""},numeric.mapreducers={any:["if(xi) return true;","var accum = false;"],all:["if(!xi) return false;","var accum = true;"],sum:["accum += xi;","var accum = 0;"],prod:["accum *= xi;","var accum = 1;"],norm2Squared:["accum += xi*xi;","var accum = 0;"],norminf:["accum = max(accum,abs(xi));","var accum = 0, max = Math.max, abs = Math.abs;"],norm1:["accum += abs(xi)","var accum = 0, abs = Math.abs;"],sup:["accum = max(accum,xi);","var accum = -Infinity, max = Math.max;"],inf:["accum = min(accum,xi);","var accum = Infinity, min = Math.min;"]},function(){var e,t;for(e=0;e<numeric.mathfuns2.length;++e)t=numeric.mathfuns2[e],numeric.ops2[t]=t;for(e in numeric.ops2)if(numeric.ops2.hasOwnProperty(e)){t=numeric.ops2[e];var n,r,i="";-1!==numeric.myIndexOf.call(numeric.mathfuns2,e)?(i="var "+t+" = Math."+t+";\n",n=function(e,n,r){return e+" = "+t+"("+n+","+r+")"},r=function(e,n){return e+" = "+t+"("+e+","+n+")"}):(n=function(e,n,r){return e+" = "+n+" "+t+" "+r},r=numeric.opseq.hasOwnProperty(e+"eq")?function(e,n){return e+" "+t+"= "+n}:function(e,n){return e+" = "+e+" "+t+" "+n}),numeric[e+"VV"]=numeric.pointwise2(["x[i]","y[i]"],n("ret[i]","x[i]","y[i]"),i),numeric[e+"SV"]=numeric.pointwise2(["x","y[i]"],n("ret[i]","x","y[i]"),i),numeric[e+"VS"]=numeric.pointwise2(["x[i]","y"],n("ret[i]","x[i]","y"),i),numeric[e]=Function("var n = arguments.length, i, x = arguments[0], y;\nvar VV = numeric."+e+"VV, VS = numeric."+e+"VS, SV = numeric."+e+'SV;\nvar dim = numeric.dim;\nfor(i=1;i!==n;++i) { \n  y = arguments[i];\n  if(typeof x === "object") {\n      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n  else '+r("x","y")+"\n}\nreturn x;\n"),numeric[t]=numeric[e],numeric[e+"eqV"]=numeric.pointwise2(["ret[i]","x[i]"],r("ret[i]","x[i]"),i),numeric[e+"eqS"]=numeric.pointwise2(["ret[i]","x"],r("ret[i]","x"),i),numeric[e+"eq"]=Function("var n = arguments.length, i, x = arguments[0], y;\nvar V = numeric."+e+"eqV, S = numeric."+e+'eqS\nvar s = numeric.dim(x);\nfor(i=1;i!==n;++i) { \n  y = arguments[i];\n  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n  else numeric._biforeach(x,y,s,0,S);\n}\nreturn x;\n')}for(e=0;e<numeric.mathfuns2.length;++e)t=numeric.mathfuns2[e],delete numeric.ops2[t];for(e=0;e<numeric.mathfuns.length;++e)t=numeric.mathfuns[e],numeric.ops1[t]=t;for(e in numeric.ops1)numeric.ops1.hasOwnProperty(e)&&(i="",t=numeric.ops1[e],-1!==numeric.myIndexOf.call(numeric.mathfuns,e)&&Math.hasOwnProperty(t)&&(i="var "+t+" = Math."+t+";\n"),numeric[e+"eqV"]=numeric.pointwise2(["ret[i]"],"ret[i] = "+t+"(ret[i]);",i),numeric[e+"eq"]=Function("x",'if(typeof x !== "object") return '+t+"x\nvar i;\nvar V = numeric."+e+"eqV;\nvar s = numeric.dim(x);\nnumeric._foreach(x,s,0,V);\nreturn x;\n"),numeric[e+"V"]=numeric.pointwise2(["x[i]"],"ret[i] = "+t+"(x[i]);",i),numeric[e]=Function("x",'if(typeof x !== "object") return '+t+"(x)\nvar i;\nvar V = numeric."+e+"V;\nvar s = numeric.dim(x);\nreturn numeric._foreach2(x,s,0,V);\n"));for(e=0;e<numeric.mathfuns.length;++e)t=numeric.mathfuns[e],delete numeric.ops1[t];for(e in numeric.mapreducers)numeric.mapreducers.hasOwnProperty(e)&&(t=numeric.mapreducers[e],numeric[e+"V"]=numeric.mapreduce2(t[0],t[1]),numeric[e]=Function("x","s","k",t[1]+'if(typeof x !== "object") {    xi = x;\n'+t[0]+';\n    return accum;\n}if(typeof s === "undefined") s = numeric.dim(x);\nif(typeof k === "undefined") k = 0;\nif(k === s.length-1) return numeric.'+e+"V(x);\nvar xi;\nvar n = x.length, i;\nfor(i=n-1;i!==-1;--i) {\n   xi = arguments.callee(x[i]);\n"+t[0]+";\n}\nreturn accum;\n"))}(),numeric.truncVV=numeric.pointwise(["x[i]","y[i]"],"ret[i] = round(x[i]/y[i])*y[i];","var round = Math.round;"),numeric.truncVS=numeric.pointwise(["x[i]","y"],"ret[i] = round(x[i]/y)*y;","var round = Math.round;"),numeric.truncSV=numeric.pointwise(["x","y[i]"],"ret[i] = round(x/y[i])*y[i];","var round = Math.round;"),numeric.trunc=function(e,t){return"object"==typeof e?"object"==typeof t?numeric.truncVV(e,t):numeric.truncVS(e,t):"object"==typeof t?numeric.truncSV(e,t):Math.round(e/t)*t},numeric.inv=function(e){var t,n,r,i,a,s,o,u=numeric.dim(e),l=Math.abs,c=u[0],h=u[1],p=numeric.clone(e),f=numeric.identity(c);for(s=0;s<h;++s){var d=-1,m=-1;for(a=s;a!==c;++a)(o=l(p[a][s]))>m&&(d=a,m=o);for(n=p[d],p[d]=p[s],p[s]=n,i=f[d],f[d]=f[s],f[s]=i,e=n[s],o=s;o!==h;++o)n[o]/=e;for(o=h-1;-1!==o;--o)i[o]/=e;for(a=c-1;-1!==a;--a)if(a!==s){for(t=p[a],r=f[a],e=t[s],o=s+1;o!==h;++o)t[o]-=n[o]*e;for(o=h-1;o>0;--o)r[o]-=i[o]*e,r[--o]-=i[o]*e;0===o&&(r[0]-=i[0]*e)}}return f},numeric.det=function(e){var t=numeric.dim(e);if(2!==t.length||t[0]!==t[1])throw new Error("numeric: det() only works on square matrices");var n,r,i,a,s,o,u,l,c=t[0],h=1,p=numeric.clone(e);for(r=0;r<c-1;r++){for(i=r,n=r+1;n<c;n++)Math.abs(p[n][r])>Math.abs(p[i][r])&&(i=n);for(i!==r&&(u=p[i],p[i]=p[r],p[r]=u,h*=-1),a=p[r],n=r+1;n<c;n++){for(o=(s=p[n])[r]/a[r],i=r+1;i<c-1;i+=2)l=i+1,s[i]-=a[i]*o,s[l]-=a[l]*o;i!==c&&(s[i]-=a[i]*o)}if(0===a[r])return 0;h*=a[r]}return h*p[r][r]},numeric.transpose=function(e){var t,n,r,i,a,s=e.length,o=e[0].length,u=Array(o);for(n=0;n<o;n++)u[n]=Array(s);for(t=s-1;t>=1;t-=2){for(i=e[t],r=e[t-1],n=o-1;n>=1;--n)(a=u[n])[t]=i[n],a[t-1]=r[n],(a=u[--n])[t]=i[n],a[t-1]=r[n];0===n&&((a=u[0])[t]=i[0],a[t-1]=r[0])}if(0===t){for(r=e[0],n=o-1;n>=1;--n)u[n][0]=r[n],u[--n][0]=r[n];0===n&&(u[0][0]=r[0])}return u},numeric.negtranspose=function(e){var t,n,r,i,a,s=e.length,o=e[0].length,u=Array(o);for(n=0;n<o;n++)u[n]=Array(s);for(t=s-1;t>=1;t-=2){for(i=e[t],r=e[t-1],n=o-1;n>=1;--n)(a=u[n])[t]=-i[n],a[t-1]=-r[n],(a=u[--n])[t]=-i[n],a[t-1]=-r[n];0===n&&((a=u[0])[t]=-i[0],a[t-1]=-r[0])}if(0===t){for(r=e[0],n=o-1;n>=1;--n)u[n][0]=-r[n],u[--n][0]=-r[n];0===n&&(u[0][0]=-r[0])}return u},numeric._random=function e(t,n){var r,i,a=t[n],s=Array(a);if(n===t.length-1){for(i=Math.random,r=a-1;r>=1;r-=2)s[r]=i(),s[r-1]=i();return 0===r&&(s[0]=i()),s}for(r=a-1;r>=0;r--)s[r]=e(t,n+1);return s},numeric.random=function(e){return numeric._random(e,0)},numeric.norm2=function(e){return Math.sqrt(numeric.norm2Squared(e))},numeric.linspace=function(e,t,n){if(void 0===n&&(n=Math.max(Math.round(t-e)+1,1)),n<2)return 1===n?[e]:[];var r,i=Array(n);for(r=--n;r>=0;r--)i[r]=(r*t+(n-r)*e)/n;return i},numeric.getBlock=function(e,t,n){var r=numeric.dim(e);return function e(i,a){var s,o=t[a],u=n[a]-o,l=Array(u);if(a===r.length-1){for(s=u;s>=0;s--)l[s]=i[s+o];return l}for(s=u;s>=0;s--)l[s]=e(i[s+o],a+1);return l}(e,0)},numeric.setBlock=function(e,t,n,r){var i=numeric.dim(e);return function e(r,a,s){var o,u=t[s],l=n[s]-u;if(s===i.length-1)for(o=l;o>=0;o--)r[o+u]=a[o];for(o=l;o>=0;o--)e(r[o+u],a[o],s+1)}(e,r,0),e},numeric.getRange=function(e,t,n){var r,i,a,s,o=t.length,u=n.length,l=Array(o);for(r=o-1;-1!==r;--r)for(l[r]=Array(u),a=l[r],s=e[t[r]],i=u-1;-1!==i;--i)a[i]=s[n[i]];return l},numeric.blockMatrix=function(e){var t=numeric.dim(e);if(t.length<4)return numeric.blockMatrix([e]);var n,r,i,a,s,o=t[0],u=t[1];for(n=0,r=0,i=0;i<o;++i)n+=e[i][0].length;for(a=0;a<u;++a)r+=e[0][a][0].length;var l=Array(n);for(i=0;i<n;++i)l[i]=Array(r);var c,h,p,f,d,m=0;for(i=0;i<o;++i){for(c=r,a=u-1;-1!==a;--a)for(c-=(s=e[i][a])[0].length,p=s.length-1;-1!==p;--p)for(d=s[p],h=l[m+p],f=d.length-1;-1!==f;--f)h[c+f]=d[f];m+=e[i][0].length}return l},numeric.tensor=function(e,t){if("number"==typeof e||"number"==typeof t)return numeric.mul(e,t);var n=numeric.dim(e),r=numeric.dim(t);if(1!==n.length||1!==r.length)throw new Error("numeric: tensor product is only defined for vectors");var i,a,s,o,u=n[0],l=r[0],c=Array(u);for(a=u-1;a>=0;a--){for(i=Array(l),o=e[a],s=l-1;s>=3;--s)i[s]=o*t[s],i[--s]=o*t[s],i[--s]=o*t[s],i[--s]=o*t[s];for(;s>=0;)i[s]=o*t[s],--s;c[a]=i}return c},numeric.T=function(e,t){this.x=e,this.y=t},numeric.t=function(e,t){return new numeric.T(e,t)},numeric.Tbinop=function(e,t,n,r,i){var a;numeric.indexOf;if("string"!=typeof i)for(a in i="",numeric)numeric.hasOwnProperty(a)&&(e.indexOf(a)>=0||t.indexOf(a)>=0||n.indexOf(a)>=0||r.indexOf(a)>=0)&&a.length>1&&(i+="var "+a+" = numeric."+a+";\n");return Function(["y"],"var x = this;\nif(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n"+i+"\nif(x.y) {  if(y.y) {    return new numeric.T("+r+");\n  }\n  return new numeric.T("+n+");\n}\nif(y.y) {\n  return new numeric.T("+t+");\n}\nreturn new numeric.T("+e+");\n")},numeric.T.prototype.add=numeric.Tbinop("add(x.x,y.x)","add(x.x,y.x),y.y","add(x.x,y.x),x.y","add(x.x,y.x),add(x.y,y.y)"),numeric.T.prototype.sub=numeric.Tbinop("sub(x.x,y.x)","sub(x.x,y.x),neg(y.y)","sub(x.x,y.x),x.y","sub(x.x,y.x),sub(x.y,y.y)"),numeric.T.prototype.mul=numeric.Tbinop("mul(x.x,y.x)","mul(x.x,y.x),mul(x.x,y.y)","mul(x.x,y.x),mul(x.y,y.x)","sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))"),numeric.T.prototype.reciprocal=function(){var e=numeric.mul,t=numeric.div;if(this.y){var n=numeric.add(e(this.x,this.x),e(this.y,this.y));return new numeric.T(t(this.x,n),t(numeric.neg(this.y),n))}return new T(t(1,this.x))},numeric.T.prototype.div=function(e){if(e instanceof numeric.T||(e=new numeric.T(e)),e.y)return this.mul(e.reciprocal());var t=numeric.div;return this.y?new numeric.T(t(this.x,e.x),t(this.y,e.x)):new numeric.T(t(this.x,e.x))},numeric.T.prototype.dot=numeric.Tbinop("dot(x.x,y.x)","dot(x.x,y.x),dot(x.x,y.y)","dot(x.x,y.x),dot(x.y,y.x)","sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))"),numeric.T.prototype.transpose=function(){var e=numeric.transpose,t=this.x,n=this.y;return n?new numeric.T(e(t),e(n)):new numeric.T(e(t))},numeric.T.prototype.transjugate=function(){var e=numeric.transpose,t=this.x,n=this.y;return n?new numeric.T(e(t),numeric.negtranspose(n)):new numeric.T(e(t))},numeric.Tunop=function(e,t,n){return"string"!=typeof n&&(n=""),Function("var x = this;\n"+n+"\nif(x.y) {  "+t+";\n}\n"+e+";\n")},numeric.T.prototype.exp=numeric.Tunop("return new numeric.T(ex)","return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))","var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;"),numeric.T.prototype.conj=numeric.Tunop("return new numeric.T(x.x);","return new numeric.T(x.x,numeric.neg(x.y));"),numeric.T.prototype.neg=numeric.Tunop("return new numeric.T(neg(x.x));","return new numeric.T(neg(x.x),neg(x.y));","var neg = numeric.neg;"),numeric.T.prototype.sin=numeric.Tunop("return new numeric.T(numeric.sin(x.x))","return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));"),numeric.T.prototype.cos=numeric.Tunop("return new numeric.T(numeric.cos(x.x))","return x.exp().add(x.neg().exp()).div(2);"),numeric.T.prototype.abs=numeric.Tunop("return new numeric.T(numeric.abs(x.x));","return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));","var mul = numeric.mul;"),numeric.T.prototype.log=numeric.Tunop("return new numeric.T(numeric.log(x.x));","var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\nreturn new numeric.T(numeric.log(r.x),theta.x);"),numeric.T.prototype.norm2=numeric.Tunop("return numeric.norm2(x.x);","var f = numeric.norm2Squared;\nreturn Math.sqrt(f(x.x)+f(x.y));"),numeric.T.prototype.inv=function(){var e=this;if(void 0===e.y)return new numeric.T(numeric.inv(e.x));var t,n,r,i,a,s,o,u,l,c,h,p,f,d,m,y,g,v,x=e.x.length,b=numeric.identity(x),S=numeric.rep([x,x],0),E=numeric.clone(e.x),D=numeric.clone(e.y);for(l=0;l<x;l++){for(p=(d=E[l][l])*d+(m=D[l][l])*m,h=l,c=l+1;c<x;c++)(f=(d=E[c][l])*d+(m=D[c][l])*m)>p&&(h=c,p=f);for(h!==l&&(v=E[l],E[l]=E[h],E[h]=v,v=D[l],D[l]=D[h],D[h]=v,v=b[l],b[l]=b[h],b[h]=v,v=S[l],S[l]=S[h],S[h]=v),t=E[l],n=D[l],a=b[l],s=S[l],d=t[l],m=n[l],c=l+1;c<x;c++)y=t[c],g=n[c],t[c]=(y*d+g*m)/p,n[c]=(g*d-y*m)/p;for(c=0;c<x;c++)y=a[c],g=s[c],a[c]=(y*d+g*m)/p,s[c]=(g*d-y*m)/p;for(c=l+1;c<x;c++){for(r=E[c],i=D[c],o=b[c],u=S[c],d=r[l],m=i[l],h=l+1;h<x;h++)y=t[h],g=n[h],r[h]-=y*d-g*m,i[h]-=g*d+y*m;for(h=0;h<x;h++)y=a[h],g=s[h],o[h]-=y*d-g*m,u[h]-=g*d+y*m}}for(l=x-1;l>0;l--)for(a=b[l],s=S[l],c=l-1;c>=0;c--)for(o=b[c],u=S[c],d=E[c][l],m=D[c][l],h=x-1;h>=0;h--)y=a[h],g=s[h],o[h]-=d*y-m*g,u[h]-=d*g+m*y;return new numeric.T(b,S)},numeric.T.prototype.get=function(e){var t,n=this.x,r=this.y,i=0,a=e.length;if(r){for(;i<a;)n=n[t=e[i]],r=r[t],i++;return new numeric.T(n,r)}for(;i<a;)n=n[t=e[i]],i++;return new numeric.T(n)},numeric.T.prototype.set=function(e,t){var n,r=this.x,i=this.y,a=0,s=e.length,o=t.x,u=t.y;if(0===s)return u?this.y=u:i&&(this.y=void 0),this.x=r,this;if(u){for(i||(i=numeric.rep(numeric.dim(r),0),this.y=i);a<s-1;)r=r[n=e[a]],i=i[n],a++;return r[n=e[a]]=o,i[n]=u,this}if(i){for(;a<s-1;)r=r[n=e[a]],i=i[n],a++;return r[n=e[a]]=o,i[n]=o instanceof Array?numeric.rep(numeric.dim(o),0):0,this}for(;a<s-1;)r=r[n=e[a]],a++;return r[n=e[a]]=o,this},numeric.T.prototype.getRows=function(e,t){var n,r,i=t-e+1,a=Array(i),s=this.x,o=this.y;for(n=e;n<=t;n++)a[n-e]=s[n];if(o){for(r=Array(i),n=e;n<=t;n++)r[n-e]=o[n];return new numeric.T(a,r)}return new numeric.T(a)},numeric.T.prototype.setRows=function(e,t,n){var r,i=this.x,a=this.y,s=n.x,o=n.y;for(r=e;r<=t;r++)i[r]=s[r-e];if(o)for(a||(a=numeric.rep(numeric.dim(i),0),this.y=a),r=e;r<=t;r++)a[r]=o[r-e];else if(a)for(r=e;r<=t;r++)a[r]=numeric.rep([s[r-e].length],0);return this},numeric.T.prototype.getRow=function(e){var t=this.x,n=this.y;return n?new numeric.T(t[e],n[e]):new numeric.T(t[e])},numeric.T.prototype.setRow=function(e,t){var n=this.x,r=this.y,i=t.x,a=t.y;return n[e]=i,a?(r||(r=numeric.rep(numeric.dim(n),0),this.y=r),r[e]=a):r&&(r=numeric.rep([i.length],0)),this},numeric.T.prototype.getBlock=function(e,t){var n=this.x,r=this.y,i=numeric.getBlock;return r?new numeric.T(i(n,e,t),i(r,e,t)):new numeric.T(i(n,e,t))},numeric.T.prototype.setBlock=function(e,t,n){n instanceof numeric.T||(n=new numeric.T(n));var r=this.x,i=this.y,a=numeric.setBlock,s=n.x,o=n.y;if(o)return i||(this.y=numeric.rep(numeric.dim(this),0),i=this.y),a(r,e,t,s),a(i,e,t,o),this;a(r,e,t,s),i&&a(i,e,t,numeric.rep(numeric.dim(s),0))},numeric.T.rep=function(e,t){var n=numeric.T;t instanceof n||(t=new n(t));var r=t.x,i=t.y,a=numeric.rep;return i?new n(a(e,r),a(e,i)):new n(a(e,r))},numeric.T.diag=function(e){e instanceof numeric.T||(e=new numeric.T(e));var t=e.x,n=e.y,r=numeric.diag;return n?new numeric.T(r(t),r(n)):new numeric.T(r(t))},numeric.T.eig=function(){if(this.y)throw new Error("eig: not implemented for complex matrices.");return numeric.eig(this.x)},numeric.T.identity=function(e){return new numeric.T(numeric.identity(e))},numeric.T.prototype.getDiag=function(){var e=numeric,t=this.x,n=this.y;return n?new e.T(e.getDiag(t),e.getDiag(n)):new e.T(e.getDiag(t))},numeric.house=function(e){var t=numeric.clone(e),n=(e[0]>=0?1:-1)*numeric.norm2(e);t[0]+=n;var r=numeric.norm2(t);if(0===r)throw new Error("eig: internal error");return numeric.div(t,r)},numeric.toUpperHessenberg=function(e){var t=numeric.dim(e);if(2!==t.length||t[0]!==t[1])throw new Error("numeric: toUpperHessenberg() only works on square matrices");var n,r,i,a,s,o,u,l,c,h,p=t[0],f=numeric.clone(e),d=numeric.identity(p);for(r=0;r<p-2;r++){for(a=Array(p-r-1),n=r+1;n<p;n++)a[n-r-1]=f[n][r];if(numeric.norm2(a)>0){for(s=numeric.house(a),o=numeric.getBlock(f,[r+1,r],[p-1,p-1]),u=numeric.tensor(s,numeric.dot(s,o)),n=r+1;n<p;n++)for(l=f[n],c=u[n-r-1],i=r;i<p;i++)l[i]-=2*c[i-r];for(o=numeric.getBlock(f,[0,r+1],[p-1,p-1]),u=numeric.tensor(numeric.dot(o,s),s),n=0;n<p;n++)for(l=f[n],c=u[n],i=r+1;i<p;i++)l[i]-=2*c[i-r-1];for(o=Array(p-r-1),n=r+1;n<p;n++)o[n-r-1]=d[n];for(u=numeric.tensor(s,numeric.dot(s,o)),n=r+1;n<p;n++)for(h=d[n],c=u[n-r-1],i=0;i<p;i++)h[i]-=2*c[i]}}return{H:f,Q:d}},numeric.epsilon=2220446049250313e-31,numeric.QRFrancis=function(e,t){void 0===t&&(t=1e4),e=numeric.clone(e);numeric.clone(e);var n,r,i,a,s,o,u,l,c,h,p,f,d,m,y,g,v,x,b=numeric.dim(e)[0],S=numeric.identity(b);if(b<3)return{Q:S,B:[[0,b-1]]};var E=numeric.epsilon;for(x=0;x<t;x++){for(g=0;g<b-1;g++)if(Math.abs(e[g+1][g])<E*(Math.abs(e[g][g])+Math.abs(e[g+1][g+1]))){var D=numeric.QRFrancis(numeric.getBlock(e,[0,0],[g,g]),t),w=numeric.QRFrancis(numeric.getBlock(e,[g+1,g+1],[b-1,b-1]),t);for(f=Array(g+1),y=0;y<=g;y++)f[y]=S[y];for(d=numeric.dot(D.Q,f),y=0;y<=g;y++)S[y]=d[y];for(f=Array(b-g-1),y=g+1;y<b;y++)f[y-g-1]=S[y];for(d=numeric.dot(w.Q,f),y=g+1;y<b;y++)S[y]=d[y-g-1];return{Q:S,B:D.B.concat(numeric.add(w.B,g+1))}}var A,C,T;if(i=e[b-2][b-2],a=e[b-2][b-1],s=e[b-1][b-2],l=i+(o=e[b-1][b-1]),u=i*o-a*s,c=numeric.getBlock(e,[0,0],[2,2]),l*l>=4*u)A=.5*(l+Math.sqrt(l*l-4*u)),C=.5*(l-Math.sqrt(l*l-4*u)),c=numeric.add(numeric.sub(numeric.dot(c,c),numeric.mul(c,A+C)),numeric.diag(numeric.rep([3],A*C)));else c=numeric.add(numeric.sub(numeric.dot(c,c),numeric.mul(c,l)),numeric.diag(numeric.rep([3],u)));for(n=[c[0][0],c[1][0],c[2][0]],r=numeric.house(n),f=[e[0],e[1],e[2]],d=numeric.tensor(r,numeric.dot(r,f)),y=0;y<3;y++)for(p=e[y],m=d[y],v=0;v<b;v++)p[v]-=2*m[v];for(f=numeric.getBlock(e,[0,0],[b-1,2]),d=numeric.tensor(numeric.dot(f,r),r),y=0;y<b;y++)for(p=e[y],m=d[y],v=0;v<3;v++)p[v]-=2*m[v];for(f=[S[0],S[1],S[2]],d=numeric.tensor(r,numeric.dot(r,f)),y=0;y<3;y++)for(h=S[y],m=d[y],v=0;v<b;v++)h[v]-=2*m[v];for(g=0;g<b-2;g++){for(v=g;v<=g+1;v++)if(Math.abs(e[v+1][v])<E*(Math.abs(e[v][v])+Math.abs(e[v+1][v+1]))){D=numeric.QRFrancis(numeric.getBlock(e,[0,0],[v,v]),t),w=numeric.QRFrancis(numeric.getBlock(e,[v+1,v+1],[b-1,b-1]),t);for(f=Array(v+1),y=0;y<=v;y++)f[y]=S[y];for(d=numeric.dot(D.Q,f),y=0;y<=v;y++)S[y]=d[y];for(f=Array(b-v-1),y=v+1;y<b;y++)f[y-v-1]=S[y];for(d=numeric.dot(w.Q,f),y=v+1;y<b;y++)S[y]=d[y-v-1];return{Q:S,B:D.B.concat(numeric.add(w.B,v+1))}}for(T=Math.min(b-1,g+3),n=Array(T-g),y=g+1;y<=T;y++)n[y-g-1]=e[y][g];for(r=numeric.house(n),f=numeric.getBlock(e,[g+1,g],[T,b-1]),d=numeric.tensor(r,numeric.dot(r,f)),y=g+1;y<=T;y++)for(p=e[y],m=d[y-g-1],v=g;v<b;v++)p[v]-=2*m[v-g];for(f=numeric.getBlock(e,[0,g+1],[b-1,T]),d=numeric.tensor(numeric.dot(f,r),r),y=0;y<b;y++)for(p=e[y],m=d[y],v=g+1;v<=T;v++)p[v]-=2*m[v-g-1];for(f=Array(T-g),y=g+1;y<=T;y++)f[y-g-1]=S[y];for(d=numeric.tensor(r,numeric.dot(r,f)),y=g+1;y<=T;y++)for(h=S[y],m=d[y-g-1],v=0;v<b;v++)h[v]-=2*m[v]}}throw new Error("numeric: eigenvalue iteration does not converge -- increase maxiter?")},numeric.eig=function(e,t){var n,r,i,a,s,o,u,l,c,h,p,f,d,m,y,g,v=numeric.toUpperHessenberg(e),x=numeric.QRFrancis(v.H,t),b=numeric.T,S=e.length,E=x.B,D=numeric.dot(x.Q,numeric.dot(v.H,numeric.transpose(x.Q))),w=new b(numeric.dot(x.Q,v.Q)),A=E.length,C=Math.sqrt;for(r=0;r<A;r++)if((n=E[r][0])===E[r][1]);else{if(a=n+1,s=D[n][n],o=D[n][a],u=D[a][n],l=D[a][a],0===o&&0===u)continue;(h=(c=-s-l)*c-4*(s*l-o*u))>=0?((y=(s-(p=c<0?-.5*(c-C(h)):-.5*(c+C(h))))*(s-p)+o*o)>(g=u*u+(l-p)*(l-p))?(d=(s-p)/(y=C(y)),m=o/y):(d=u/(g=C(g)),m=(l-p)/g),i=new b([[m,-d],[d,m]]),w.setRows(n,a,i.dot(w.getRows(n,a)))):(p=-.5*c,f=.5*C(-h),(y=(s-p)*(s-p)+o*o)>(g=u*u+(l-p)*(l-p))?(d=(s-p)/(y=C(y+f*f)),m=o/y,p=0,f/=y):(d=u/(g=C(g+f*f)),m=(l-p)/g,p=f/g,f=0),i=new b([[m,-d],[d,m]],[[p,f],[f,-p]]),w.setRows(n,a,i.dot(w.getRows(n,a))))}var T=w.dot(e).dot(w.transjugate()),k=(S=e.length,numeric.T.identity(S));for(a=0;a<S;a++)if(a>0)for(r=a-1;r>=0;r--){var F=T.get([r,r]),P=T.get([a,a]);numeric.neq(F.x,P.x)||numeric.neq(F.y,P.y)?(p=T.getRow(r).getBlock([r],[a-1]),f=k.getRow(a).getBlock([r],[a-1]),k.set([a,r],T.get([r,a]).neg().sub(p.dot(f)).div(F.sub(P)))):k.setRow(a,k.getRow(r))}for(a=0;a<S;a++)p=k.getRow(a),k.setRow(a,p.div(p.norm2()));return k=k.transpose(),k=w.transjugate().dot(k),{lambda:T.getDiag(),E:k}},numeric.ccsSparse=function(e){var t,n,r,i=e.length,a=[];for(n=i-1;-1!==n;--n)for(r in t=e[n]){for(r=parseInt(r);r>=a.length;)a[a.length]=0;0!==t[r]&&a[r]++}var s=a.length,o=Array(s+1);for(o[0]=0,n=0;n<s;++n)o[n+1]=o[n]+a[n];var u=Array(o[s]),l=Array(o[s]);for(n=i-1;-1!==n;--n)for(r in t=e[n])0!==t[r]&&(a[r]--,u[o[r]+a[r]]=n,l[o[r]+a[r]]=t[r]);return[o,u,l]},numeric.ccsFull=function(e){var t,n,r,i,a=e[0],s=e[1],o=e[2],u=numeric.ccsDim(e),l=u[0],c=u[1],h=numeric.rep([l,c],0);for(t=0;t<c;t++)for(r=a[t],i=a[t+1],n=r;n<i;++n)h[s[n]][t]=o[n];return h},numeric.ccsTSolve=function(e,t,n,r,i){var a,s,o,u,l,c,h,p=e[0],f=e[1],d=e[2],m=p.length-1,y=Math.max,g=0;function v(e){var t;if(0===n[e]){for(n[e]=1,t=p[e];t<p[e+1];++t)v(f[t]);i[g]=e,++g}}for(void 0===r&&(n=numeric.rep([m],0)),void 0===r&&(r=numeric.linspace(0,n.length-1)),void 0===i&&(i=[]),a=r.length-1;-1!==a;--a)v(r[a]);for(i.length=g,a=i.length-1;-1!==a;--a)n[i[a]]=0;for(a=r.length-1;-1!==a;--a)s=r[a],n[s]=t[s];for(a=i.length-1;-1!==a;--a){for(s=i[a],o=p[s],u=y(p[s+1],o),l=o;l!==u;++l)if(f[l]===s){n[s]/=d[l];break}for(h=n[s],l=o;l!==u;++l)(c=f[l])!==s&&(n[c]-=h*d[l])}return n},numeric.ccsDFS=function(e){this.k=Array(e),this.k1=Array(e),this.j=Array(e)},numeric.ccsDFS.prototype.dfs=function(e,t,n,r,i,a){var s,o,u,l=0,c=i.length,h=this.k,p=this.k1,f=this.j;if(0===r[e])for(r[e]=1,f[0]=e,h[0]=o=t[e],p[0]=u=t[e+1];;)if(o>=u){if(i[c]=f[l],0===l)return;++c,o=h[--l],u=p[l]}else 0===r[s=a[n[o]]]?(r[s]=1,h[l]=o,f[++l]=s,o=t[s],p[l]=u=t[s+1]):++o},numeric.ccsLPSolve=function(e,t,n,r,i,a,s){var o,u,l,c,h,p,f,d,m,y=e[0],g=e[1],v=e[2],x=(y.length,t[0]),b=t[1],S=t[2];for(u=x[i],l=x[i+1],r.length=0,o=u;o<l;++o)s.dfs(a[b[o]],y,g,n,r,a);for(o=r.length-1;-1!==o;--o)n[r[o]]=0;for(o=u;o!==l;++o)n[c=a[b[o]]]=S[o];for(o=r.length-1;-1!==o;--o){for(h=y[c=r[o]],p=y[c+1],f=h;f<p;++f)if(a[g[f]]===c){n[c]/=v[f];break}for(m=n[c],f=h;f<p;++f)(d=a[g[f]])!==c&&(n[d]-=m*v[f])}return n},numeric.ccsLUP1=function(e,t){var n,r,i,a,s,o,u,l=e[0].length-1,c=[numeric.rep([l+1],0),[],[]],h=[numeric.rep([l+1],0),[],[]],p=c[0],f=c[1],d=c[2],m=h[0],y=h[1],g=h[2],v=numeric.rep([l],0),x=numeric.rep([l],0),b=numeric.ccsLPSolve,S=(Math.max,Math.abs),E=numeric.linspace(0,l-1),D=numeric.linspace(0,l-1),w=new numeric.ccsDFS(l);for(void 0===t&&(t=1),n=0;n<l;++n){for(b(c,e,v,x,n,D,w),a=-1,s=-1,r=x.length-1;-1!==r;--r)(i=x[r])<=n||(o=S(v[i]))>a&&(s=i,a=o);for(S(v[n])<t*a&&(r=E[n],a=E[s],E[n]=a,D[a]=n,E[s]=r,D[r]=s,a=v[n],v[n]=v[s],v[s]=a),a=p[n],s=m[n],u=v[n],f[a]=E[n],d[a]=1,++a,r=x.length-1;-1!==r;--r)o=v[i=x[r]],x[r]=0,v[i]=0,i<=n?(y[s]=i,g[s]=o,++s):(f[a]=E[i],d[a]=o/u,++a);p[n+1]=a,m[n+1]=s}for(r=f.length-1;-1!==r;--r)f[r]=D[f[r]];return{L:c,U:h,P:E,Pinv:D}},numeric.ccsDFS0=function(e){this.k=Array(e),this.k1=Array(e),this.j=Array(e)},numeric.ccsDFS0.prototype.dfs=function(e,t,n,r,i,a,s){var o,u,l,c=0,h=i.length,p=this.k,f=this.k1,d=this.j;if(0===r[e])for(r[e]=1,d[0]=e,p[0]=u=t[a[e]],f[0]=l=t[a[e]+1];;){if(isNaN(u))throw new Error("Ow!");if(u>=l){if(i[h]=a[d[c]],0===c)return;++h,u=p[--c],l=f[c]}else 0===r[o=n[u]]?(r[o]=1,p[c]=u,d[++c]=o,u=t[o=a[o]],f[c]=l=t[o+1]):++u}},numeric.ccsLPSolve0=function(e,t,n,r,i,a,s,o){var u,l,c,h,p,f,d,m,y,g=e[0],v=e[1],x=e[2],b=(g.length,t[0]),S=t[1],E=t[2];for(l=b[i],c=b[i+1],r.length=0,u=l;u<c;++u)o.dfs(S[u],g,v,n,r,a,s);for(u=r.length-1;-1!==u;--u)n[s[h=r[u]]]=0;for(u=l;u!==c;++u)n[h=S[u]]=E[u];for(u=r.length-1;-1!==u;--u){for(m=s[h=r[u]],p=g[h],f=g[h+1],d=p;d<f;++d)if(v[d]===m){n[m]/=x[d];break}for(y=n[m],d=p;d<f;++d)n[v[d]]-=y*x[d];n[m]=y}},numeric.ccsLUP0=function(e,t){var n,r,i,a,s,o,u,l=e[0].length-1,c=[numeric.rep([l+1],0),[],[]],h=[numeric.rep([l+1],0),[],[]],p=c[0],f=c[1],d=c[2],m=h[0],y=h[1],g=h[2],v=numeric.rep([l],0),x=numeric.rep([l],0),b=numeric.ccsLPSolve0,S=(Math.max,Math.abs),E=numeric.linspace(0,l-1),D=numeric.linspace(0,l-1),w=new numeric.ccsDFS0(l);for(void 0===t&&(t=1),n=0;n<l;++n){for(b(c,e,v,x,n,D,E,w),a=-1,s=-1,r=x.length-1;-1!==r;--r)(i=x[r])<=n||(o=S(v[E[i]]))>a&&(s=i,a=o);for(S(v[E[n]])<t*a&&(r=E[n],a=E[s],E[n]=a,D[a]=n,E[s]=r,D[r]=s),a=p[n],s=m[n],u=v[E[n]],f[a]=E[n],d[a]=1,++a,r=x.length-1;-1!==r;--r)o=v[E[i=x[r]]],x[r]=0,v[E[i]]=0,i<=n?(y[s]=i,g[s]=o,++s):(f[a]=E[i],d[a]=o/u,++a);p[n+1]=a,m[n+1]=s}for(r=f.length-1;-1!==r;--r)f[r]=D[f[r]];return{L:c,U:h,P:E,Pinv:D}},numeric.ccsLUP=numeric.ccsLUP0,numeric.ccsDim=function(e){return[numeric.sup(e[1])+1,e[0].length-1]},numeric.ccsGetBlock=function(e,t,n){var r=numeric.ccsDim(e),i=r[0],a=r[1];void 0===t?t=numeric.linspace(0,i-1):"number"==typeof t&&(t=[t]),void 0===n?n=numeric.linspace(0,a-1):"number"==typeof n&&(n=[n]);var s,o,u,l,c=t.length,h=n.length,p=numeric.rep([a],0),f=[],d=[],m=[p,f,d],y=e[0],g=e[1],v=e[2],x=numeric.rep([i],0),b=0,S=numeric.rep([i],0);for(o=0;o<h;++o){var E=y[l=n[o]],D=y[l+1];for(s=E;s<D;++s)S[u=g[s]]=1,x[u]=v[s];for(s=0;s<c;++s)S[t[s]]&&(f[b]=s,d[b]=x[t[s]],++b);for(s=E;s<D;++s)S[u=g[s]]=0;p[o+1]=b}return m},numeric.ccsDot=function(e,t){var n,r,i,a,s,o,u,l,c,h,p,f=e[0],d=e[1],m=e[2],y=t[0],g=t[1],v=t[2],x=numeric.ccsDim(e),b=numeric.ccsDim(t),S=x[0],E=(x[1],b[1]),D=numeric.rep([S],0),w=numeric.rep([S],0),A=Array(S),C=numeric.rep([E],0),T=[],k=[],F=[C,T,k];for(i=0;i!==E;++i){for(a=y[i],s=y[i+1],c=0,r=a;r<s;++r)for(h=g[r],p=v[r],o=f[h],u=f[h+1],n=o;n<u;++n)0===w[l=d[n]]&&(A[c]=l,w[l]=1,c+=1),D[l]=D[l]+m[n]*p;for(s=(a=C[i])+c,C[i+1]=s,r=c-1;-1!==r;--r)p=a+r,n=A[r],T[p]=n,k[p]=D[n],w[n]=0,D[n]=0;C[i+1]=C[i]+c}return F},numeric.ccsLUPSolve=function(e,t){var n=e.L,r=e.U,i=(e.P,t[0]),a=!1;"object"!=typeof i&&(i=(t=[[0,t.length],numeric.linspace(0,t.length-1),t])[0],a=!0);var s,o,u,l,c,h,p=t[1],f=t[2],d=n[0].length-1,m=i.length-1,y=numeric.rep([d],0),g=Array(d),v=numeric.rep([d],0),x=Array(d),b=numeric.rep([m+1],0),S=[],E=[],D=numeric.ccsTSolve,w=0;for(s=0;s<m;++s){for(c=0,u=i[s],l=i[s+1],o=u;o<l;++o)h=e.Pinv[p[o]],x[c]=h,v[h]=f[o],++c;for(x.length=c,D(n,v,y,x,g),o=x.length-1;-1!==o;--o)v[x[o]]=0;if(D(r,y,v,g,x),a)return v;for(o=g.length-1;-1!==o;--o)y[g[o]]=0;for(o=x.length-1;-1!==o;--o)h=x[o],S[w]=h,E[w]=v[h],v[h]=0,++w;b[s+1]=w}return[b,S,E]},numeric.ccsbinop=function(e,t){return void 0===t&&(t=""),Function("X","Y","var Xi = X[0], Xj = X[1], Xv = X[2];\nvar Yi = Y[0], Yj = Y[1], Yv = Y[2];\nvar n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\nvar Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\nvar x = numeric.rep([m],0),y = numeric.rep([m],0);\nvar xk,yk,zk;\nvar i,j,j0,j1,k,p=0;\n"+t+"for(i=0;i<n;++i) {\n  j0 = Xi[i]; j1 = Xi[i+1];\n  for(j=j0;j!==j1;++j) {\n    k = Xj[j];\n    x[k] = 1;\n    Zj[p] = k;\n    ++p;\n  }\n  j0 = Yi[i]; j1 = Yi[i+1];\n  for(j=j0;j!==j1;++j) {\n    k = Yj[j];\n    y[k] = Yv[j];\n    if(x[k] === 0) {\n      Zj[p] = k;\n      ++p;\n    }\n  }\n  Zi[i+1] = p;\n  j0 = Xi[i]; j1 = Xi[i+1];\n  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n  j0 = Zi[i]; j1 = Zi[i+1];\n  for(j=j0;j!==j1;++j) {\n    k = Zj[j];\n    xk = x[k];\n    yk = y[k];\n"+e+"\n    Zv[j] = zk;\n  }\n  j0 = Xi[i]; j1 = Xi[i+1];\n  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n  j0 = Yi[i]; j1 = Yi[i+1];\n  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n}\nreturn [Zi,Zj,Zv];")},function(){var k,A,B,C;for(k in numeric.ops2)A=isFinite(eval("1"+numeric.ops2[k]+"0"))?"[Y[0],Y[1],numeric."+k+"(X,Y[2])]":"NaN",B=isFinite(eval("0"+numeric.ops2[k]+"1"))?"[X[0],X[1],numeric."+k+"(X[2],Y)]":"NaN",C=isFinite(eval("1"+numeric.ops2[k]+"0"))&&isFinite(eval("0"+numeric.ops2[k]+"1"))?"numeric.ccs"+k+"MM(X,Y)":"NaN",numeric["ccs"+k+"MM"]=numeric.ccsbinop("zk = xk "+numeric.ops2[k]+"yk;"),numeric["ccs"+k]=Function("X","Y",'if(typeof X === "number") return '+A+';\nif(typeof Y === "number") return '+B+";\nreturn "+C+";\n")}(),numeric.ccsScatter=function(e){var t,n=e[0],r=e[1],i=e[2],a=numeric.sup(r)+1,s=n.length,o=numeric.rep([a],0),u=Array(s),l=Array(s),c=numeric.rep([a],0);for(t=0;t<s;++t)c[r[t]]++;for(t=0;t<a;++t)o[t+1]=o[t]+c[t];var h,p,f=o.slice(0);for(t=0;t<s;++t)u[h=f[p=r[t]]]=n[t],l[h]=i[t],f[p]=f[p]+1;return[o,u,l]},numeric.ccsGather=function(e){var t,n,r,i,a,s=e[0],o=e[1],u=e[2],l=s.length-1,c=o.length,h=Array(c),p=Array(c),f=Array(c);for(a=0,t=0;t<l;++t)for(r=s[t],i=s[t+1],n=r;n!==i;++n)p[a]=t,h[a]=o[n],f[a]=u[n],++a;return[h,p,f]},numeric.sdim=function e(t,n,r){if(void 0===n&&(n=[]),"object"!=typeof t)return n;var i;for(i in void 0===r&&(r=0),r in n||(n[r]=0),t.length>n[r]&&(n[r]=t.length),t)t.hasOwnProperty(i)&&e(t[i],n,r+1);return n},numeric.sclone=function e(t,n,r){void 0===n&&(n=0),void 0===r&&(r=numeric.sdim(t).length);var i,a=Array(t.length);if(n===r-1){for(i in t)t.hasOwnProperty(i)&&(a[i]=t[i]);return a}for(i in t)t.hasOwnProperty(i)&&(a[i]=e(t[i],n+1,r));return a},numeric.sdiag=function(e){var t,n,r=e.length,i=Array(r);for(t=r-1;t>=1;t-=2)n=t-1,i[t]=[],i[t][t]=e[t],i[n]=[],i[n][n]=e[n];return 0===t&&(i[0]=[],i[0][0]=e[t]),i},numeric.sidentity=function(e){return numeric.sdiag(numeric.rep([e],1))},numeric.stranspose=function(e){var t,n,r,i=[];e.length;for(t in e)if(e.hasOwnProperty(t))for(n in r=e[t])r.hasOwnProperty(n)&&("object"!=typeof i[n]&&(i[n]=[]),i[n][t]=r[n]);return i},numeric.sLUP=function(e,t){throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.")},numeric.sdotMM=function(e,t){var n,r,i,a,s,o,u,l=e.length,c=(t.length,numeric.stranspose(t)),h=c.length,p=Array(l);for(i=l-1;i>=0;i--){for(u=[],n=e[i],s=h-1;s>=0;s--){for(a in o=0,r=c[s],n)n.hasOwnProperty(a)&&a in r&&(o+=n[a]*r[a]);o&&(u[s]=o)}p[i]=u}return p},numeric.sdotMV=function(e,t){var n,r,i,a,s=e.length,o=Array(s);for(r=s-1;r>=0;r--){for(i in a=0,n=e[r])n.hasOwnProperty(i)&&t[i]&&(a+=n[i]*t[i]);a&&(o[r]=a)}return o},numeric.sdotVM=function(e,t){var n,r,i,a,s=[];for(n in e)if(e.hasOwnProperty(n))for(r in i=t[n],a=e[n],i)i.hasOwnProperty(r)&&(s[r]||(s[r]=0),s[r]+=a*i[r]);return s},numeric.sdotVV=function(e,t){var n,r=0;for(n in e)e[n]&&t[n]&&(r+=e[n]*t[n]);return r},numeric.sdot=function(e,t){var n=numeric.sdim(e).length,r=numeric.sdim(t).length;switch(1e3*n+r){case 0:return e*t;case 1001:return numeric.sdotVV(e,t);case 2001:return numeric.sdotMV(e,t);case 1002:return numeric.sdotVM(e,t);case 2002:return numeric.sdotMM(e,t);default:throw new Error("numeric.sdot not implemented for tensors of order "+n+" and "+r)}},numeric.sscatter=function(e){var t,n,r,i,a=e[0].length,s=e.length,o=[];for(n=a-1;n>=0;--n)if(e[s-1][n]){for(i=o,r=0;r<s-2;r++)i[t=e[r][n]]||(i[t]=[]),i=i[t];i[e[r][n]]=e[r+1][n]}return o},numeric.sgather=function e(t,n,r){var i,a,s;for(a in void 0===n&&(n=[]),void 0===r&&(r=[]),i=r.length,t)if(t.hasOwnProperty(a))if(r[i]=parseInt(a),"number"==typeof(s=t[a])){if(s){if(0===n.length)for(a=i+1;a>=0;--a)n[a]=[];for(a=i;a>=0;--a)n[a].push(r[a]);n[i+1].push(s)}}else e(s,n,r);return r.length>i&&r.pop(),n},numeric.cLU=function(e){var t,n,r,i,a,s,o=e[0],u=e[1],l=e[2],c=o.length,h=0;for(t=0;t<c;t++)o[t]>h&&(h=o[t]);h++;var p,f=Array(h),d=Array(h),m=numeric.rep([h],1/0),y=numeric.rep([h],-1/0);for(r=0;r<c;r++)t=o[r],(n=u[r])<m[t]&&(m[t]=n),n>y[t]&&(y[t]=n);for(t=0;t<h-1;t++)y[t]>y[t+1]&&(y[t+1]=y[t]);for(t=h-1;t>=1;t--)m[t]<m[t-1]&&(m[t-1]=m[t]);for(t=0;t<h;t++)d[t]=numeric.rep([y[t]-m[t]+1],0),f[t]=numeric.rep([t-m[t]],0),t-m[t]+1,y[t]-t+1;for(r=0;r<c;r++)d[t=o[r]][u[r]-m[t]]=l[r];for(t=0;t<h-1;t++)for(i=t-m[t],x=d[t],n=t+1;m[n]<=t&&n<h;n++)if(a=t-m[n],s=y[t]-t,p=(b=d[n])[a]/x[i]){for(r=1;r<=s;r++)b[r+a]-=p*x[r+i];f[n][t-m[n]]=p}var g,v,x=[],b=[],S=[],E=[],D=[],w=[];for(c=0,g=0,t=0;t<h;t++){for(i=m[t],a=y[t],v=d[t],n=t;n<=a;n++)v[n-i]&&(x[c]=t,b[c]=n,S[c]=v[n-i],c++);for(v=f[t],n=i;n<t;n++)v[n-i]&&(E[g]=t,D[g]=n,w[g]=v[n-i],g++);E[g]=t,D[g]=t,w[g]=1,g++}return{U:[x,b,S],L:[E,D,w]}},numeric.cLUsolve=function(e,t){var n,r,i=e.L,a=e.U,s=numeric.clone(t),o=i[0],u=i[1],l=i[2],c=a[0],h=a[1],p=a[2],f=c.length,d=(o.length,s.length);for(r=0,n=0;n<d;n++){for(;u[r]<n;)s[n]-=l[r]*s[u[r]],r++;r++}for(r=f-1,n=d-1;n>=0;n--){for(;h[r]>n;)s[n]-=p[r]*s[h[r]],r--;s[n]/=p[r],r--}return s},numeric.cgrid=function(e,t){"number"==typeof e&&(e=[e,e]);var n,r,i,a=numeric.rep(e,-1);if("function"!=typeof t)switch(t){case"L":t=function(t,n){return t>=e[0]/2||n<e[1]/2};break;default:t=function(e,t){return!0}}for(i=0,n=1;n<e[0]-1;n++)for(r=1;r<e[1]-1;r++)t(n,r)&&(a[n][r]=i,i++);return a},numeric.cdelsq=function(e){var t,n,r,i,a,s=[[-1,0],[0,-1],[0,1],[1,0]],o=numeric.dim(e),u=o[0],l=o[1],c=[],h=[],p=[];for(t=1;t<u-1;t++)for(n=1;n<l-1;n++)if(!(e[t][n]<0)){for(r=0;r<4;r++)i=t+s[r][0],a=n+s[r][1],e[i][a]<0||(c.push(e[t][n]),h.push(e[i][a]),p.push(-1));c.push(e[t][n]),h.push(e[t][n]),p.push(4)}return[c,h,p]},numeric.cdotMV=function(e,t){var n,r,i,a=e[0],s=e[1],o=e[2],u=a.length;for(i=0,r=0;r<u;r++)a[r]>i&&(i=a[r]);for(i++,n=numeric.rep([i],0),r=0;r<u;r++)n[a[r]]+=o[r]*t[s[r]];return n},numeric.Spline=function(e,t,n,r,i){this.x=e,this.yl=t,this.yr=n,this.kl=r,this.kr=i},numeric.Spline.prototype._at=function(e,t){var n,r,i,a=this.x,s=this.yl,o=this.yr,u=this.kl,l=this.kr,c=numeric.add,h=numeric.sub,p=numeric.mul;n=h(p(u[t],a[t+1]-a[t]),h(o[t+1],s[t])),r=c(p(l[t+1],a[t]-a[t+1]),h(o[t+1],s[t]));var f=(i=(e-a[t])/(a[t+1]-a[t]))*(1-i);return c(c(c(p(1-i,s[t]),p(i,o[t+1])),p(n,f*(1-i))),p(r,f*i))},numeric.Spline.prototype.at=function(e){if("number"==typeof e){var t,n,r,i=this.x,a=i.length,s=Math.floor;for(t=0,n=a-1;n-t>1;)i[r=s((t+n)/2)]<=e?t=r:n=r;return this._at(e,t)}a=e.length;var o,u=Array(a);for(o=a-1;-1!==o;--o)u[o]=this.at(e[o]);return u},numeric.Spline.prototype.diff=function(){var e,t,n,r=this.x,i=this.yl,a=this.yr,s=this.kl,o=this.kr,u=i.length,l=s,c=o,h=Array(u),p=Array(u),f=numeric.add,d=numeric.mul,m=numeric.div,y=numeric.sub;for(e=u-1;-1!==e;--e)t=r[e+1]-r[e],n=y(a[e+1],i[e]),h[e]=m(f(d(n,6),d(s[e],-4*t),d(o[e+1],-2*t)),t*t),p[e+1]=m(f(d(n,-6),d(s[e],2*t),d(o[e+1],4*t)),t*t);return new numeric.Spline(r,l,c,h,p)},numeric.Spline.prototype.roots=function(){function e(e){return e*e}var t=[],n=this.x,r=this.yl,i=this.yr,a=this.kl,s=this.kr;"number"==typeof r[0]&&(r=[r],i=[i],a=[a],s=[s]);var o,u,l,c,h,p,f,d,m,y,g,v,x,b,S,E,D,w,A,C,T,k,F,P=r.length,M=n.length-1,N=(t=Array(P),Math.sqrt);for(o=0;o!==P;++o){for(c=r[o],h=i[o],p=a[o],f=s[o],d=[],u=0;u!==M;u++){for(u>0&&h[u]*c[u]<0&&d.push(n[u]),E=n[u+1]-n[u],n[u],g=c[u],v=h[u+1],m=p[u]/E,x=(y=f[u+1]/E)+3*g+2*m-3*v,b=3*(y+m+2*(g-v)),(S=e(m-y+3*(g-v))+12*y*g)<=0?D=(w=x/b)>n[u]&&w<n[u+1]?[n[u],w,n[u+1]]:[n[u],n[u+1]]:(w=(x-N(S))/b,A=(x+N(S))/b,D=[n[u]],w>n[u]&&w<n[u+1]&&D.push(w),A>n[u]&&A<n[u+1]&&D.push(A),D.push(n[u+1])),T=D[0],w=this._at(T,u),l=0;l<D.length-1;l++)if(k=D[l+1],A=this._at(k,u),0!==w)if(0===A||w*A>0)T=k,w=A;else{for(var B=0;!((F=(w*k-A*T)/(w-A))<=T||F>=k);)if((C=this._at(F,u))*A>0)k=F,A=C,-1===B&&(w*=.5),B=-1;else{if(!(C*w>0))break;T=F,w=C,1===B&&(A*=.5),B=1}d.push(F),T=D[l+1],w=this._at(T,u)}else d.push(T),T=k,w=A;0===A&&d.push(k)}t[o]=d}return"number"==typeof this.yl[0]?t[0]:t},numeric.spline=function(e,t,n,r){var i,a=e.length,s=[],o=[],u=[],l=numeric.sub,c=numeric.mul,h=numeric.add;for(i=a-2;i>=0;i--)o[i]=e[i+1]-e[i],u[i]=l(t[i+1],t[i]);"string"!=typeof n&&"string"!=typeof r||(n=r="periodic");var p=[[],[],[]];switch(typeof n){case"undefined":s[0]=c(3/(o[0]*o[0]),u[0]),p[0].push(0,0),p[1].push(0,1),p[2].push(2/o[0],1/o[0]);break;case"string":s[0]=h(c(3/(o[a-2]*o[a-2]),u[a-2]),c(3/(o[0]*o[0]),u[0])),p[0].push(0,0,0),p[1].push(a-2,0,1),p[2].push(1/o[a-2],2/o[a-2]+2/o[0],1/o[0]);break;default:s[0]=n,p[0].push(0),p[1].push(0),p[2].push(1)}for(i=1;i<a-1;i++)s[i]=h(c(3/(o[i-1]*o[i-1]),u[i-1]),c(3/(o[i]*o[i]),u[i])),p[0].push(i,i,i),p[1].push(i-1,i,i+1),p[2].push(1/o[i-1],2/o[i-1]+2/o[i],1/o[i]);switch(typeof r){case"undefined":s[a-1]=c(3/(o[a-2]*o[a-2]),u[a-2]),p[0].push(a-1,a-1),p[1].push(a-2,a-1),p[2].push(1/o[a-2],2/o[a-2]);break;case"string":p[1][p[1].length-1]=0;break;default:s[a-1]=r,p[0].push(a-1),p[1].push(a-1),p[2].push(1)}s="number"!=typeof s[0]?numeric.transpose(s):[s];var f=Array(s.length);if("string"==typeof n)for(i=f.length-1;-1!==i;--i)f[i]=numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(p)),s[i]),f[i][a-1]=f[i][0];else for(i=f.length-1;-1!==i;--i)f[i]=numeric.cLUsolve(numeric.cLU(p),s[i]);return f="number"==typeof t[0]?f[0]:numeric.transpose(f),new numeric.Spline(e,t,t,f,f)},numeric.fftpow2=function e(t,n){var r=t.length;if(1!==r){var i,a,s=Math.cos,o=Math.sin,u=Array(r/2),l=Array(r/2),c=Array(r/2),h=Array(r/2);for(a=r/2,i=r-1;-1!==i;--i)c[--a]=t[i],h[a]=n[i],--i,u[a]=t[i],l[a]=n[i];e(u,l),e(c,h),a=r/2;var p,f,d,m=-6.283185307179586/r;for(i=r-1;-1!==i;--i)-1===--a&&(a=r/2-1),f=s(p=m*i),d=o(p),t[i]=u[a]+f*c[a]-d*h[a],n[i]=l[a]+f*h[a]+d*c[a]}},numeric._ifftpow2=function e(t,n){var r=t.length;if(1!==r){var i,a,s=Math.cos,o=Math.sin,u=Array(r/2),l=Array(r/2),c=Array(r/2),h=Array(r/2);for(a=r/2,i=r-1;-1!==i;--i)c[--a]=t[i],h[a]=n[i],--i,u[a]=t[i],l[a]=n[i];e(u,l),e(c,h),a=r/2;var p,f,d,m=6.283185307179586/r;for(i=r-1;-1!==i;--i)-1===--a&&(a=r/2-1),f=s(p=m*i),d=o(p),t[i]=u[a]+f*c[a]-d*h[a],n[i]=l[a]+f*h[a]+d*c[a]}},numeric.ifftpow2=function(e,t){numeric._ifftpow2(e,t),numeric.diveq(e,e.length),numeric.diveq(t,t.length)},numeric.convpow2=function(e,t,n,r){var i,a,s,o,u;for(numeric.fftpow2(e,t),numeric.fftpow2(n,r),i=e.length-1;-1!==i;--i)a=e[i],o=t[i],s=n[i],u=r[i],e[i]=a*s-o*u,t[i]=a*u+o*s;numeric.ifftpow2(e,t)},numeric.T.prototype.fft=function(){var e,t,n=this.x,r=this.y,i=n.length,a=Math.log,s=a(2),o=Math.ceil(a(2*i-1)/s),u=Math.pow(2,o),l=numeric.rep([u],0),c=numeric.rep([u],0),h=Math.cos,p=Math.sin,f=-3.141592653589793/i,d=numeric.rep([u],0),m=numeric.rep([u],0);Math.floor(i/2);for(e=0;e<i;e++)d[e]=n[e];if(void 0!==r)for(e=0;e<i;e++)m[e]=r[e];for(l[0]=1,e=1;e<=u/2;e++)t=f*e*e,l[e]=h(t),c[e]=p(t),l[u-e]=h(t),c[u-e]=p(t);var y=new numeric.T(d,m),g=new numeric.T(l,c);return y=y.mul(g),numeric.convpow2(y.x,y.y,numeric.clone(g.x),numeric.neg(g.y)),(y=y.mul(g)).x.length=i,y.y.length=i,y},numeric.T.prototype.ifft=function(){var e,t,n=this.x,r=this.y,i=n.length,a=Math.log,s=a(2),o=Math.ceil(a(2*i-1)/s),u=Math.pow(2,o),l=numeric.rep([u],0),c=numeric.rep([u],0),h=Math.cos,p=Math.sin,f=3.141592653589793/i,d=numeric.rep([u],0),m=numeric.rep([u],0);Math.floor(i/2);for(e=0;e<i;e++)d[e]=n[e];if(void 0!==r)for(e=0;e<i;e++)m[e]=r[e];for(l[0]=1,e=1;e<=u/2;e++)t=f*e*e,l[e]=h(t),c[e]=p(t),l[u-e]=h(t),c[u-e]=p(t);var y=new numeric.T(d,m),g=new numeric.T(l,c);return y=y.mul(g),numeric.convpow2(y.x,y.y,numeric.clone(g.x),numeric.neg(g.y)),(y=y.mul(g)).x.length=i,y.y.length=i,y.div(i)},numeric.gradient=function(e,t){var n=t.length,r=e(t);if(isNaN(r))throw new Error("gradient: f(x) is a NaN!");var i,a,s,o,u,l,c,h,p,f=Math.max,d=numeric.clone(t),m=Array(n),y=(numeric.div,numeric.sub,f=Math.max,Math.abs),g=Math.min,v=0;for(i=0;i<n;i++)for(var x=f(1e-6*r,1e-8);;){if(++v>20)throw new Error("Numerical gradient fails");if(d[i]=t[i]+x,a=e(d),d[i]=t[i]-x,s=e(d),d[i]=t[i],isNaN(a)||isNaN(s))x/=16;else{if(m[i]=(a-s)/(2*x),o=t[i]-x,u=t[i],l=t[i]+x,c=(a-r)/x,h=(r-s)/x,p=f(y(m[i]),y(r),y(a),y(s),y(o),y(u),y(l),1e-8),!(g(f(y(c-m[i]),y(h-m[i]),y(c-h))/p,x/p)>.001))break;x/=16}}return m},numeric.uncmin=function(e,t,n,r,i,a,s){var o=numeric.gradient;void 0===s&&(s={}),void 0===n&&(n=1e-8),void 0===r&&(r=function(t){return o(e,t)}),void 0===i&&(i=1e3);var u,l,c=(t=numeric.clone(t)).length,h=e(t);if(isNaN(h))throw new Error("uncmin: f(x0) is a NaN!");var p=Math.max,f=numeric.norm2;n=p(n,numeric.epsilon);var d,m,y,g,v,x,b,S,E,D,w=s.Hinv||numeric.identity(c),A=numeric.dot,C=(numeric.inv,numeric.sub),T=numeric.add,k=numeric.tensor,F=numeric.div,P=numeric.mul,M=numeric.all,N=numeric.isFinite,B=numeric.neg,_=0,I="";for(m=r(t);_<i;){if("function"==typeof a&&a(_,t,h,m,w)){I="Callback returned true";break}if(!M(N(m))){I="Gradient has Infinity or NaN";break}if(!M(N(d=B(A(w,m))))){I="Search direction has Infinity or NaN";break}if((D=f(d))<n){I="Newton step smaller than tol";break}for(E=1,l=A(m,d),v=t;_<i&&!(E*D<n)&&(v=T(t,g=P(d,E)),(u=e(v))-h>=.1*E*l||isNaN(u));)E*=.5,++_;if(E*D<n){I="Line search step size smaller than tol";break}if(_===i){I="maxit reached during line search";break}S=A(x=C(y=r(v),m),g),b=A(w,x),w=C(T(w,P((S+A(x,b))/(S*S),k(g,g))),F(T(k(b,g),k(g,b)),S)),t=v,h=u,m=y,++_}return{solution:t,f:h,gradient:m,invHessian:w,iterations:_,message:I}},numeric.Dopri=function(e,t,n,r,i,a,s){this.x=e,this.y=t,this.f=n,this.ymid=r,this.iterations=i,this.events=s,this.message=a},numeric.Dopri.prototype._at=function(e,t){function n(e){return e*e}var r,i,a,s,o,u,l,c,h,p=this.x,f=this.y,d=this.f,m=this.ymid,y=(p.length,Math.floor,numeric.add),g=numeric.mul,v=numeric.sub;return r=p[t],i=p[t+1],s=f[t],o=f[t+1],a=r+.5*(i-r),u=m[t],l=v(d[t],g(s,1/(r-a)+2/(r-i))),c=v(d[t+1],g(o,1/(i-a)+2/(i-r))),y(y(y(y(g(s,(h=[n(e-i)*(e-a)/n(r-i)/(r-a),n(e-r)*n(e-i)/n(r-a)/n(i-a),n(e-r)*(e-a)/n(i-r)/(i-a),(e-r)*n(e-i)*(e-a)/n(r-i)/(r-a),(e-i)*n(e-r)*(e-a)/n(r-i)/(i-a)])[0]),g(u,h[1])),g(o,h[2])),g(l,h[3])),g(c,h[4]))},numeric.Dopri.prototype.at=function(e){var t,n,r,i=Math.floor;if("number"!=typeof e){var a=e.length,s=Array(a);for(t=a-1;-1!==t;--t)s[t]=this.at(e[t]);return s}var o=this.x;for(t=0,n=o.length-1;n-t>1;)o[r=i(.5*(t+n))]<=e?t=r:n=r;return this._at(e,t)},numeric.dopri=function(e,t,n,r,i,a,s){void 0===i&&(i=1e-6),void 0===a&&(a=1e3);var o,u,l,c,h,p,f,d,m,y,g,v,x,b=[e],S=[n],E=[r(e,n)],D=[],w=[.075,.225],A=[44/45,-56/15,32/9],C=[19372/6561,-25360/2187,64448/6561,-212/729],T=[9017/3168,-355/33,46732/5247,49/176,-5103/18656],k=[35/384,0,500/1113,125/192,-2187/6784,11/84],F=[.10013431883002395,0,.3918321794184259,-.02982460176594817,.05893268337240795,-.04497888809104361,.023904308236133973],P=[.2,.3,.8,8/9,1,1],M=[-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,.025],N=0,B=(t-e)/10,_=0,I=numeric.add,O=numeric.mul,j=(Math.max,Math.min),L=Math.abs,q=numeric.norminf,R=Math.pow,X=numeric.any,z=numeric.lt,J=numeric.and,U=(numeric.sub,new numeric.Dopri(b,S,E,D,-1,""));for("function"==typeof s&&(g=s(e,n));e<t&&_<a;)if(++_,e+B>t&&(B=t-e),o=r(e+P[0]*B,I(n,O(.2*B,E[N]))),u=r(e+P[1]*B,I(I(n,O(w[0]*B,E[N])),O(w[1]*B,o))),l=r(e+P[2]*B,I(I(I(n,O(A[0]*B,E[N])),O(A[1]*B,o)),O(A[2]*B,u))),c=r(e+P[3]*B,I(I(I(I(n,O(C[0]*B,E[N])),O(C[1]*B,o)),O(C[2]*B,u)),O(C[3]*B,l))),h=r(e+P[4]*B,I(I(I(I(I(n,O(T[0]*B,E[N])),O(T[1]*B,o)),O(T[2]*B,u)),O(T[3]*B,l)),O(T[4]*B,c))),p=r(e+B,m=I(I(I(I(I(n,O(E[N],B*k[0])),O(u,B*k[2])),O(l,B*k[3])),O(c,B*k[4])),O(h,B*k[5]))),(y="number"==typeof(f=I(I(I(I(I(O(E[N],B*M[0]),O(u,B*M[2])),O(l,B*M[3])),O(c,B*M[4])),O(h,B*M[5])),O(p,B*M[6])))?L(f):q(f))>i){if(e+(B=.2*B*R(i/y,.25))===e){U.msg="Step size became too small";break}}else{if(D[N]=I(I(I(I(I(I(n,O(E[N],B*F[0])),O(u,B*F[2])),O(l,B*F[3])),O(c,B*F[4])),O(h,B*F[5])),O(p,B*F[6])),b[++N]=e+B,S[N]=m,E[N]=p,"function"==typeof s){var V,W,K=e,$=e+.5*B;if(v=s($,D[N-1]),X(x=J(z(g,0),z(0,v)))||(K=$,g=v,v=s($=e+B,m),x=J(z(g,0),z(0,v))),X(x)){for(var H,G,Y=0,Q=1,Z=1;;){if("number"==typeof g)W=(Z*v*K-Q*g*$)/(Z*v-Q*g);else for(W=$,d=g.length-1;-1!==d;--d)g[d]<0&&v[d]>0&&(W=j(W,(Z*v[d]*K-Q*g[d]*$)/(Z*v[d]-Q*g[d])));if(W<=K||W>=$)break;G=s(W,V=U._at(W,N-1)),X(H=J(z(g,0),z(0,G)))?($=W,v=G,x=H,Z=1,-1===Y?Q*=.5:Q=1,Y=-1):(K=W,g=G,Q=1,1===Y?Z*=.5:Z=1,Y=1)}return m=U._at(.5*(e+W),N-1),U.f[N]=r(W,V),U.x[N]=W,U.y[N]=V,U.ymid[N-1]=m,U.events=x,U.iterations=_,U}}e+=B,n=m,g=v,B=j(.8*B*R(i/y,.25),4*B)}return U.iterations=_,U},numeric.LU=function(e,t){t=t||!1;var n,r,i,a,s,o,u,l,c,h=Math.abs,p=e.length,f=p-1,d=new Array(p);for(t||(e=numeric.clone(e)),i=0;i<p;++i){for(u=i,c=h((o=e[i])[i]),r=i+1;r<p;++r)c<(a=h(e[r][i]))&&(c=a,u=r);for(d[i]=u,u!=i&&(e[i]=e[u],e[u]=o,o=e[i]),s=o[i],n=i+1;n<p;++n)e[n][i]/=s;for(n=i+1;n<p;++n){for(l=e[n],r=i+1;r<f;++r)l[r]-=l[i]*o[r],l[++r]-=l[i]*o[r];r===f&&(l[r]-=l[i]*o[r])}}return{LU:e,P:d}},numeric.LUsolve=function(e,t){var n,r,i,a,s,o=e.LU,u=o.length,l=numeric.clone(t),c=e.P;for(n=u-1;-1!==n;--n)l[n]=t[n];for(n=0;n<u;++n)for(i=c[n],c[n]!==n&&(s=l[n],l[n]=l[i],l[i]=s),a=o[n],r=0;r<n;++r)l[n]-=l[r]*a[r];for(n=u-1;n>=0;--n){for(a=o[n],r=n+1;r<u;++r)l[n]-=l[r]*a[r];l[n]/=a[n]}return l},numeric.solve=function(e,t,n){return numeric.LUsolve(numeric.LU(e,n),t)},numeric.echelonize=function(e){var t,n,r,i,a,s,o,u,l=numeric.dim(e),c=l[0],h=l[1],p=numeric.identity(c),f=Array(c),d=Math.abs,m=numeric.diveq;for(e=numeric.clone(e),t=0;t<c;++t){for(r=0,a=e[t],s=p[t],n=1;n<h;++n)d(a[r])<d(a[n])&&(r=n);for(f[t]=r,m(s,a[r]),m(a,a[r]),n=0;n<c;++n)if(n!==t){for(u=(o=e[n])[r],i=h-1;-1!==i;--i)o[i]-=a[i]*u;for(o=p[n],i=c-1;-1!==i;--i)o[i]-=s[i]*u}}return{I:p,A:e,P:f}},numeric.__solveLP=function(e,t,n,r,i,a,s){var o,u,l,c,h=numeric.sum,p=(numeric.log,numeric.mul),f=numeric.sub,d=numeric.dot,m=numeric.div,y=numeric.add,g=e.length,v=n.length,x=!1,b=1,S=(numeric.transpose(t),numeric.svd,numeric.transpose),E=(numeric.leq,Math.sqrt),D=Math.abs,w=(numeric.muleq,numeric.norminf,numeric.any,Math.min),A=numeric.all,C=numeric.gt,T=Array(g),k=Array(v),F=(numeric.rep([v],1),numeric.solve),P=f(n,d(t,a)),M=d(e,e);for(l=0;l<i;++l){var N,B;for(N=v-1;-1!==N;--N)k[N]=m(t[N],P[N]);var _=S(k);for(N=g-1;-1!==N;--N)T[N]=h(_[N]);b=.25*D(M/d(e,T));var I=100*E(M/d(T,T));for((!isFinite(b)||b>I)&&(b=I),c=y(e,p(b,T)),u=d(_,k),N=g-1;-1!==N;--N)u[N][N]+=1;B=F(u,m(c,b),!0);var O=m(P,d(t,B)),j=1;for(N=v-1;-1!==N;--N)O[N]<0&&(j=w(j,-.999*O[N]));if(o=f(a,p(B,j)),!A(C(P=f(n,d(t,o)),0)))return{solution:a,message:"",iterations:l};if(a=o,b<r)return{solution:o,message:"",iterations:l};if(s){var L=d(e,c),q=d(t,c);for(x=!0,N=v-1;-1!==N;--N)if(L*q[N]<0){x=!1;break}}else x=!(a[g-1]>=0);if(x)return{solution:o,message:"Unbounded",iterations:l}}return{solution:a,message:"maximum iteration count exceeded",iterations:l}},numeric._solveLP=function(e,t,n,r,i){var a=e.length,s=n.length,o=(numeric.sum,numeric.log,numeric.mul,numeric.sub),u=numeric.dot,l=(numeric.div,numeric.add,numeric.rep([a],0).concat([1])),c=numeric.rep([s,1],-1),h=numeric.blockMatrix([[t,c]]),p=n,f=numeric.rep([a],0).concat(Math.max(0,numeric.sup(numeric.neg(n)))+1),d=numeric.__solveLP(l,h,p,r,i,f,!1),m=numeric.clone(d.solution);if(m.length=a,numeric.inf(o(n,u(t,m)))<0)return{solution:NaN,message:"Infeasible",iterations:d.iterations};var y=numeric.__solveLP(e,t,n,r,i-d.iterations,m,!0);return y.iterations+=d.iterations,y},numeric.solveLP=function(e,t,n,r,i,a,s){if(void 0===s&&(s=1e3),void 0===a&&(a=numeric.epsilon),void 0===r)return numeric._solveLP(e,t,n,a,s);var o,u=r.length,l=r[0].length,c=t.length,h=numeric.echelonize(r),p=numeric.rep([l],0),f=h.P,d=[];for(o=f.length-1;-1!==o;--o)p[f[o]]=1;for(o=l-1;-1!==o;--o)0===p[o]&&d.push(o);var m=numeric.getRange,y=numeric.linspace(0,u-1),g=numeric.linspace(0,c-1),v=m(r,y,d),x=m(t,g,f),b=m(t,g,d),S=numeric.dot,E=numeric.sub,D=S(x,h.I),w=E(b,S(D,v)),A=E(n,S(D,i)),C=Array(f.length),T=Array(d.length);for(o=f.length-1;-1!==o;--o)C[o]=e[f[o]];for(o=d.length-1;-1!==o;--o)T[o]=e[d[o]];var k=E(T,S(C,S(h.I,v))),F=numeric._solveLP(k,w,A,a,s),P=F.solution;if(P!=P)return F;var M=S(h.I,E(i,S(v,P))),N=Array(e.length);for(o=f.length-1;-1!==o;--o)N[f[o]]=M[o];for(o=d.length-1;-1!==o;--o)N[d[o]]=P[o];return{solution:N,message:F.message,iterations:F.iterations}},numeric.MPStoLP=function(e){e instanceof String&&e.split("\n");var t,n,r,i,a=0,s=["Initial state","NAME","ROWS","COLUMNS","RHS","BOUNDS","ENDATA"],o=e.length,u=0,l={},c=[],h=0,p={},f=0,d=[],m=[],y=[];function g(n){throw new Error("MPStoLP: "+n+"\nLine "+t+": "+e[t]+"\nCurrent state: "+s[a]+"\n")}for(t=0;t<o;++t){var v=(r=e[t]).match(/\S*/g),x=[];for(n=0;n<v.length;++n)""!==v[n]&&x.push(v[n]);if(0!==x.length){for(n=0;n<s.length&&r.substr(0,s[n].length)!==s[n];++n);if(n<s.length){if(a=n,1===n&&(i=x[1]),6===n)return{name:i,c:d,A:numeric.transpose(m),b:y,rows:l,vars:p}}else switch(a){case 0:case 1:g("Unexpected line");case 2:switch(x[0]){case"N":0===u?u=x[1]:g("Two or more N rows");break;case"L":l[x[1]]=h,c[h]=1,y[h]=0,++h;break;case"G":l[x[1]]=h,c[h]=-1,y[h]=0,++h;break;case"E":l[x[1]]=h,c[h]=0,y[h]=0,++h;break;default:g("Parse error "+numeric.prettyPrint(x))}break;case 3:p.hasOwnProperty(x[0])||(p[x[0]]=f,d[f]=0,m[f]=numeric.rep([h],0),++f);var b=p[x[0]];for(n=1;n<x.length;n+=2)if(x[n]!==u){var S=l[x[n]];m[b][S]=(c[S]<0?-1:1)*parseFloat(x[n+1])}else d[b]=parseFloat(x[n+1]);break;case 4:for(n=1;n<x.length;n+=2)y[l[x[n]]]=(c[l[x[n]]]<0?-1:1)*parseFloat(x[n+1]);break;case 5:break;case 6:g("Internal error")}}}g("Reached end of file without ENDATA")},numeric.seedrandom={pow:Math.pow,random:Math.random},function(e,t,n,r,i,a,s){function o(e){var t,r,i=this,a=e.length,s=0,o=i.i=i.j=i.m=0;for(i.S=[],i.c=[],a||(e=[a++]);s<n;)i.S[s]=s++;for(s=0;s<n;s++)o=c(o+(t=i.S[s])+e[s%a]),r=i.S[o],i.S[s]=r,i.S[o]=t;i.g=function(e){var t=i.S,r=c(i.i+1),a=t[r],s=c(i.j+a),o=t[s];t[r]=o,t[s]=a;for(var u=t[c(a+o)];--e;)r=c(r+1),o=t[s=c(s+(a=t[r]))],t[r]=o,t[s]=a,u=u*n+t[c(a+o)];return i.i=r,i.j=s,u},i.g(n)}function u(e,t,n,r,i){if(n=[],i=typeof e,t&&"object"==i)for(r in e)if(r.indexOf("S")<5)try{n.push(u(e[r],t-1))}catch(e){}return n.length?n:e+("string"!=i?"\0":"")}function l(e,t,n,r){for(e+="",n=0,r=0;r<e.length;r++)t[c(r)]=c((n^=19*t[c(r)])+e.charCodeAt(r));for(r in e="",t)e+=String.fromCharCode(t[r]);return e}function c(e){return e&n-1}t.seedrandom=function(r,c){var h,p=[];return r=l(u(c?[r,e]:arguments.length?r:[(new Date).getTime(),e,window],3),p),l((h=new o(p)).S,e),t.random=function(){for(var e=h.g(6),t=s,r=0;e<i;)e=(e+r)*n,t*=n,r=h.g(1);for(;e>=a;)e/=2,t/=2,r>>>=1;return(e+r)/t},r},s=t.pow(n,6),i=t.pow(2,i),a=2*i,l(t.random(),e)}([],numeric.seedrandom,256,0,52),function(e){function t(e){if("object"!=typeof e)return e;var n,r=[],i=e.length;for(n=0;n<i;n++)r[n+1]=t(e[n]);return r}function n(e){if("object"!=typeof e)return e;var t,r=[],i=e.length;for(t=1;t<i;t++)r[t-1]=n(e[t]);return r}function r(e,t,n,r,i,a,s,o,u,l,c,h,p,f,d,m){var y,g,v,x,b,S,E,D,w,A,C,T,k,F,P,M,N,B,_,I,O,j,L,q,R,X,z;k=Math.min(r,l),v=2*r+k*(k+5)/2+2*l+1,q=1e-60;do{R=1+.1*(q+=q),X=1+.2*q}while(R<=1||X<=1);for(y=1;y<=r;y+=1)d[y]=t[y];for(y=r+1;y<=v;y+=1)d[y]=0;for(y=1;y<=l;y+=1)h[y]=0;if(b=[],0===m[1]){if(function(e,t,n,r){var i,a,s,o,u,l;for(a=1;a<=n;a+=1){if(r[1]=a,l=0,(s=a-1)<1){if((l=e[a][a]-l)<=0)break;e[a][a]=Math.sqrt(l)}else{for(o=1;o<=s;o+=1){for(u=e[o][a],i=1;i<o;i+=1)u-=e[i][a]*e[i][o];u/=e[o][o],e[o][a]=u,l+=u*u}if((l=e[a][a]-l)<=0)break;e[a][a]=Math.sqrt(l)}r[1]=0}}(e,0,r,b),0!==b[1])return void(m[1]=2);!function(e,t,n,r){var i,a,s,o;for(a=1;a<=n;a+=1){for(o=0,i=1;i<a;i+=1)o+=e[i][a]*r[i];r[a]=(r[a]-o)/e[a][a]}for(s=1;s<=n;s+=1)for(r[a=n+1-s]=r[a]/e[a][a],o=-r[a],i=1;i<a;i+=1)r[i]=r[i]+o*e[i][a]}(e,0,r,t),function(e,t,n){var r,i,a,s,o;for(a=1;a<=n;a+=1){for(e[a][a]=1/e[a][a],o=-e[a][a],r=1;r<a;r+=1)e[r][a]=o*e[r][a];if(n<(s=a+1))break;for(i=s;i<=n;i+=1)for(o=e[a][i],e[a][i]=0,r=1;r<=a;r+=1)e[r][i]=e[r][i]+o*e[r][a]}}(e,0,r)}else{for(g=1;g<=r;g+=1)for(i[g]=0,y=1;y<=g;y+=1)i[g]=i[g]+e[y][g]*t[y];for(g=1;g<=r;g+=1)for(t[g]=0,y=g;y<=r;y+=1)t[g]=t[g]+e[g][y]*i[y]}for(a[1]=0,g=1;g<=r;g+=1)for(i[g]=t[g],a[1]=a[1]+d[g]*i[g],d[g]=0,y=g+1;y<=r;y+=1)e[y][g]=0;for(a[1]=-a[1]/2,m[1]=0,F=(A=(w=(C=(D=(E=r)+r)+k)+k+1)+k*(k+1)/2)+l,y=1;y<=l;y+=1){for(M=0,g=1;g<=r;g+=1)M+=s[g][y]*s[g][y];d[F+y]=Math.sqrt(M)}function J(){for(f[1]=f[1]+1,v=A,y=1;y<=l;y+=1){for(v+=1,M=-o[y],g=1;g<=r;g+=1)M+=s[g][y]*i[g];if(Math.abs(M)<q&&(M=0),y>c)d[v]=M;else if(d[v]=-Math.abs(M),M>0){for(g=1;g<=r;g+=1)s[g][y]=-s[g][y];o[y]=-o[y]}}for(y=1;y<=p;y+=1)d[A+h[y]]=0;for(T=0,P=0,y=1;y<=l;y+=1)d[A+y]<P*d[F+y]&&(T=y,P=d[A+y]/d[F+y]);return 0===T?999:0}function U(){for(y=1;y<=r;y+=1){for(M=0,g=1;g<=r;g+=1)M+=e[g][y]*s[g][T];d[y]=M}for(x=E,y=1;y<=r;y+=1)d[x+y]=0;for(g=p+1;g<=r;g+=1)for(y=1;y<=r;y+=1)d[x+y]=d[x+y]+e[y][g]*d[g];for(j=!0,y=p;y>=1;y-=1){for(M=d[y],x=(v=w+y*(y+3)/2)-y,g=y+1;g<=p;g+=1)M-=d[v]*d[D+g],v+=g;if(M/=d[x],d[D+y]=M,h[y]<c)break;if(M<0)break;j=!1,S=y}if(!j)for(N=d[C+S]/d[D+S],y=1;y<=p&&!(h[y]<c)&&!(d[D+y]<0);y+=1)(P=d[C+y]/d[D+y])<N&&(N=P,S=y);for(M=0,y=E+1;y<=E+r;y+=1)M+=d[y]*d[y];if(Math.abs(M)<=q){if(j)return m[1]=1,999;for(y=1;y<=p;y+=1)d[C+y]=d[C+y]-N*d[D+y];return d[C+p+1]=d[C+p+1]+N,700}for(M=0,y=1;y<=r;y+=1)M+=d[E+y]*s[y][T];for(B=-d[A+T]/M,L=!0,j||N<B&&(B=N,L=!1),y=1;y<=r;y+=1)i[y]=i[y]+B*d[E+y],Math.abs(i[y])<q&&(i[y]=0);for(a[1]=a[1]+B*M*(B/2+d[C+p+1]),y=1;y<=p;y+=1)d[C+y]=d[C+y]-B*d[D+y];if(d[C+p+1]=d[C+p+1]+B,!L){for(M=-o[T],g=1;g<=r;g+=1)M+=i[g]*s[g][T];if(T>c)d[A+T]=M;else if(d[A+T]=-Math.abs(M),M>0){for(g=1;g<=r;g+=1)s[g][T]=-s[g][T];o[T]=-o[T]}return 700}for(h[p+=1]=T,v=w+(p-1)*p/2+1,y=1;y<=p-1;y+=1)d[v]=d[y],v+=1;if(p===r)d[v]=d[r];else{for(y=r;y>=p+1&&0!==d[y]&&(_=Math.max(Math.abs(d[y-1]),Math.abs(d[y])),I=Math.min(Math.abs(d[y-1]),Math.abs(d[y])),P=d[y-1]>=0?Math.abs(_*Math.sqrt(1+I*I/(_*_))):-Math.abs(_*Math.sqrt(1+I*I/(_*_))),_=d[y-1]/P,I=d[y]/P,1!==_);y-=1)if(0===_)for(d[y-1]=I*P,g=1;g<=r;g+=1)P=e[g][y-1],e[g][y-1]=e[g][y],e[g][y]=P;else for(d[y-1]=P,O=I/(1+_),g=1;g<=r;g+=1)P=_*e[g][y-1]+I*e[g][y],e[g][y]=O*(e[g][y-1]+P)-e[g][y],e[g][y-1]=P;d[v]=d[p]}return 0}function V(){if(0===d[x=(v=w+S*(S+1)/2+1)+S])return 798;if(_=Math.max(Math.abs(d[x-1]),Math.abs(d[x])),I=Math.min(Math.abs(d[x-1]),Math.abs(d[x])),P=d[x-1]>=0?Math.abs(_*Math.sqrt(1+I*I/(_*_))):-Math.abs(_*Math.sqrt(1+I*I/(_*_))),_=d[x-1]/P,I=d[x]/P,1===_)return 798;if(0===_){for(y=S+1;y<=p;y+=1)P=d[x-1],d[x-1]=d[x],d[x]=P,x+=y;for(y=1;y<=r;y+=1)P=e[y][S],e[y][S]=e[y][S+1],e[y][S+1]=P}else{for(O=I/(1+_),y=S+1;y<=p;y+=1)P=_*d[x-1]+I*d[x],d[x]=O*(d[x-1]+P)-d[x],d[x-1]=P,x+=y;for(y=1;y<=r;y+=1)P=_*e[y][S]+I*e[y][S+1],e[y][S+1]=O*(e[y][S]+P)-e[y][S+1],e[y][S]=P}return 0}function W(){for(x=v-S,y=1;y<=S;y+=1)d[x]=d[v],v+=1,x+=1;return d[C+S]=d[C+S+1],h[S]=h[S+1],(S+=1)<p?797:0}function K(){return d[C+p]=d[C+p+1],d[C+p+1]=0,h[p]=0,p-=1,f[2]=f[2]+1,0}for(p=0,f[1]=0,f[2]=0,z=0;;){if(999===(z=J()))return;for(;0!==(z=U());){if(999===z)return;if(700===z)if(S===p)K();else{for(;V(),797===(z=W()););K()}}}}e.solveQP=function(e,i,a,s,o,u){e=t(e),i=t(i),a=t(a);var l,c,h,p,f,d=[],m=[],y=[],g=[],v=[];if(o=o||0,u=u?t(u):[void 0,0],s=s?t(s):[],c=e.length-1,h=a[1].length-1,!s)for(l=1;l<=h;l+=1)s[l]=0;for(l=1;l<=h;l+=1)m[l]=0;for(0,p=Math.min(c,h),l=1;l<=c;l+=1)y[l]=0;for(d[1]=0,l=1;l<=2*c+p*(p+5)/2+2*h+1;l+=1)g[l]=0;for(l=1;l<=2;l+=1)v[l]=0;return r(e,i,0,c,y,d,a,s,0,h,o,m,0,v,g,u),f="",1===u[1]&&(f="constraints are inconsistent, no solution!"),2===u[1]&&(f="matrix D in quadratic function is not positive definite!"),{solution:n(y),value:n(d),unconstrained_solution:n(i),iterations:n(v),iact:n(m),message:f}}}(numeric),numeric.svd=function(e){var t,n=numeric.epsilon,r=1e-64/n,i=0,a=0,s=0,o=0,u=0,l=numeric.clone(e),c=l.length,h=l[0].length;if(c<h)throw"Need more rows than columns";var p=new Array(h),f=new Array(h);for(a=0;a<h;a++)p[a]=f[a]=0;var d=numeric.rep([h,h],0);function m(e,t){return(e=Math.abs(e))>(t=Math.abs(t))?e*Math.sqrt(1+t*t/e/e):0==t?e:t*Math.sqrt(1+e*e/t/t)}var y=0,g=0,v=0,x=0,b=0,S=0,E=0;for(a=0;a<h;a++){for(p[a]=g,E=0,u=a+1,s=a;s<c;s++)E+=l[s][a]*l[s][a];if(E<=r)g=0;else for(y=l[a][a],g=Math.sqrt(E),y>=0&&(g=-g),v=y*g-E,l[a][a]=y-g,s=u;s<h;s++){for(E=0,o=a;o<c;o++)E+=l[o][a]*l[o][s];for(y=E/v,o=a;o<c;o++)l[o][s]+=y*l[o][a]}for(f[a]=g,E=0,s=u;s<h;s++)E+=l[a][s]*l[a][s];if(E<=r)g=0;else{for(y=l[a][a+1],g=Math.sqrt(E),y>=0&&(g=-g),v=y*g-E,l[a][a+1]=y-g,s=u;s<h;s++)p[s]=l[a][s]/v;for(s=u;s<c;s++){for(E=0,o=u;o<h;o++)E+=l[s][o]*l[a][o];for(o=u;o<h;o++)l[s][o]+=E*p[o]}}(b=Math.abs(f[a])+Math.abs(p[a]))>x&&(x=b)}for(a=h-1;-1!=a;a+=-1){if(0!=g){for(v=g*l[a][a+1],s=u;s<h;s++)d[s][a]=l[a][s]/v;for(s=u;s<h;s++){for(E=0,o=u;o<h;o++)E+=l[a][o]*d[o][s];for(o=u;o<h;o++)d[o][s]+=E*d[o][a]}}for(s=u;s<h;s++)d[a][s]=0,d[s][a]=0;d[a][a]=1,g=p[a],u=a}for(a=h-1;-1!=a;a+=-1){for(u=a+1,g=f[a],s=u;s<h;s++)l[a][s]=0;if(0!=g){for(v=l[a][a]*g,s=u;s<h;s++){for(E=0,o=u;o<c;o++)E+=l[o][a]*l[o][s];for(y=E/v,o=a;o<c;o++)l[o][s]+=y*l[o][a]}for(s=a;s<c;s++)l[s][a]=l[s][a]/g}else for(s=a;s<c;s++)l[s][a]=0;l[a][a]+=1}for(n*=x,o=h-1;-1!=o;o+=-1)for(var D=0;D<50;D++){var w=!1;for(u=o;-1!=u;u+=-1){if(Math.abs(p[u])<=n){w=!0;break}if(Math.abs(f[u-1])<=n)break}if(!w){i=0,E=1;var A=u-1;for(a=u;a<o+1&&(y=E*p[a],p[a]=i*p[a],!(Math.abs(y)<=n));a++)for(v=m(y,g=f[a]),f[a]=v,i=g/v,E=-y/v,s=0;s<c;s++)b=l[s][A],S=l[s][a],l[s][A]=b*i+S*E,l[s][a]=-b*E+S*i}if(S=f[o],u==o){if(S<0)for(f[o]=-S,s=0;s<h;s++)d[s][o]=-d[s][o];break}if(D>=49)throw"Error: no convergence.";for(x=f[u],g=m(y=(((b=f[o-1])-S)*(b+S)+((g=p[o-1])-(v=p[o]))*(g+v))/(2*v*b),1),y=y<0?((x-S)*(x+S)+v*(b/(y-g)-v))/x:((x-S)*(x+S)+v*(b/(y+g)-v))/x,i=1,E=1,a=u+1;a<o+1;a++){for(g=p[a],b=f[a],v=E*g,g*=i,S=m(y,v),p[a-1]=S,y=x*(i=y/S)+g*(E=v/S),g=-x*E+g*i,v=b*E,b*=i,s=0;s<h;s++)x=d[s][a-1],S=d[s][a],d[s][a-1]=x*i+S*E,d[s][a]=-x*E+S*i;for(S=m(y,v),f[a-1]=S,y=(i=y/S)*g+(E=v/S)*b,x=-E*g+i*b,s=0;s<c;s++)b=l[s][a-1],S=l[s][a],l[s][a-1]=b*i+S*E,l[s][a]=-b*E+S*i}p[u]=0,p[o]=y,f[o]=x}for(a=0;a<f.length;a++)f[a]<n&&(f[a]=0);for(a=0;a<h;a++)for(s=a-1;s>=0;s--)if(f[s]<f[a]){for(i=f[s],f[s]=f[a],f[a]=i,o=0;o<l.length;o++)t=l[o][a],l[o][a]=l[o][s],l[o][s]=t;for(o=0;o<d.length;o++)t=d[o][a],d[o][a]=d[o][s],d[o][s]=t;a=s}return{U:l,S:f,V:d}}}).call(this,__webpack_require__(47))},,function(e,t,n){var r;r=function(e){e.version="1.0.2";var t=Math;function n(e,t){for(var n=0,r=0;n<e.length;++n)r=t*r+e[n];return r}function r(e,t,n,r,i){if(0===t)return n;if(1===t)return r;for(var a=2/e,s=r,o=1;o<t;++o)s=r*o*a+i*n,n=r,r=s;return s}function i(e,t,n,i,a){return function(n,s){if(i){if(0===n)return 1==i?-1/0:1/0;if(n<0)return NaN}return 0===s?e(n):1===s?t(n):s<0?NaN:r(n,s|=0,e(n),t(n),a)}}var a,s,o,u,l,c,h,p,f,d,m,y,g,v=function(){var e=.636619772,i=[57568490574,-13362590354,651619640.7,-11214424.18,77392.33017,-184.9052456].reverse(),a=[57568490411,1029532985,9494680.718,59272.64853,267.8532712,1].reverse(),s=[1,-.001098628627,2734510407e-14,-2073370639e-15,2.093887211e-7].reverse(),o=[-.01562499995,.0001430488765,-6911147651e-15,7.621095161e-7,-9.34935152e-8].reverse();function u(r){var u=0,l=0,c=0,h=r*r;if(r<8)u=(l=n(i,h))/(c=n(a,h));else{var p=r-.785398164;l=n(s,h=64/h),c=n(o,h),u=t.sqrt(e/r)*(t.cos(p)*l-t.sin(p)*c*8/r)}return u}var l=[72362614232,-7895059235,242396853.1,-2972611.439,15704.4826,-30.16036606].reverse(),c=[144725228442,2300535178,18583304.74,99447.43394,376.9991397,1].reverse(),h=[1,.00183105,-3516396496e-14,2457520174e-15,-2.40337019e-7].reverse(),p=[.04687499995,-.0002002690873,8449199096e-15,-8.8228987e-7,1.05787412e-7].reverse();function f(r){var i=0,a=0,s=0,o=r*r,u=t.abs(r)-2.356194491;return Math.abs(r)<8?i=(a=r*n(l,o))/(s=n(c,o)):(a=n(h,o=64/o),s=n(p,o),i=t.sqrt(e/t.abs(r))*(t.cos(u)*a-t.sin(u)*s*8/t.abs(r)),r<0&&(i=-i)),i}return function e(n,i){if(i=Math.round(i),!isFinite(n))return isNaN(n)?n:0;if(i<0)return(i%2?-1:1)*e(n,-i);if(n<0)return(i%2?-1:1)*e(-n,i);if(0===i)return u(n);if(1===i)return f(n);if(0===n)return 0;var a=0;if(n>i)a=r(n,i,u(n),f(n),-1);else{for(var s=!1,o=0,l=0,c=1,h=0,p=2/n,d=2*t.floor((i+t.floor(t.sqrt(40*i)))/2);d>0;d--)h=d*p*c-o,o=c,c=h,t.abs(c)>1e10&&(c*=1e-10,o*=1e-10,a*=1e-10,l*=1e-10),s&&(l+=c),s=!s,d==i&&(a=o);a/=l=2*l-c}return a}}(),x=(a=.636619772,s=[-2957821389,7062834065,-512359803.6,10879881.29,-86327.92757,228.4622733].reverse(),o=[40076544269,745249964.8,7189466.438,47447.2647,226.1030244,1].reverse(),u=[1,-.001098628627,2734510407e-14,-2073370639e-15,2.093887211e-7].reverse(),l=[-.01562499995,.0001430488765,-6911147651e-15,7.621095161e-7,-9.34945152e-8].reverse(),c=[-4900604943e3,127527439e4,-51534381390,734926455.1,-4237922.726,8511.937935].reverse(),h=[249958057e5,424441966400,3733650367,22459040.02,102042.605,354.9632885,1].reverse(),p=[1,.00183105,-3516396496e-14,2457520174e-15,-2.40337019e-7].reverse(),f=[.04687499995,-.0002002690873,8449199096e-15,-8.8228987e-7,1.05787412e-7].reverse(),i((function(e){var r=0,i=0,c=0,h=e*e,p=e-.785398164;return e<8?r=(i=n(s,h))/(c=n(o,h))+a*v(e,0)*t.log(e):(i=n(u,h=64/h),c=n(l,h),r=t.sqrt(a/e)*(t.sin(p)*i+t.cos(p)*c*8/e)),r}),(function(e){var r=0,i=0,s=0,o=e*e,u=e-2.356194491;return e<8?r=(i=e*n(c,o))/(s=n(h,o))+a*(v(e,1)*t.log(e)-1/e):(i=n(p,o=64/o),s=n(f,o),r=t.sqrt(a/e)*(t.sin(u)*i+t.cos(u)*s*8/e)),r}),0,1,-1)),b=(d=[1,3.5156229,3.0899424,1.2067492,.2659732,.0360768,.0045813].reverse(),m=[.39894228,.01328592,.00225319,-.00157565,.00916281,-.02057706,.02635537,-.01647633,.00392377].reverse(),y=[.5,.87890594,.51498869,.15084934,.02658733,.00301532,32411e-8].reverse(),g=[.39894228,-.03988024,-.00362018,.00163801,-.01031555,.02282967,-.02895312,.01787654,-.00420059].reverse(),function e(r,i){if(0===(i=Math.round(i)))return function(e){return e<=3.75?n(d,e*e/14.0625):t.exp(t.abs(e))/t.sqrt(t.abs(e))*n(m,3.75/t.abs(e))}(r);if(1===i)return function(e){return e<3.75?e*n(y,e*e/14.0625):(e<0?-1:1)*t.exp(t.abs(e))/t.sqrt(t.abs(e))*n(g,3.75/t.abs(e))}(r);if(i<0)return NaN;if(0===t.abs(r))return 0;if(r==1/0)return 1/0;var a,s=0,o=2/t.abs(r),u=0,l=1,c=0;for(a=2*t.round((i+t.round(t.sqrt(40*i)))/2);a>0;a--)c=a*o*l+u,u=l,l=c,t.abs(l)>1e10&&(l*=1e-10,u*=1e-10,s*=1e-10),a==i&&(s=u);return s*=e(r,0)/l,r<0&&i%2?-s:s}),S=function(){var e=[-.57721566,.4227842,.23069756,.0348859,.00262698,1075e-7,74e-7].reverse(),r=[1.25331414,-.07832358,.02189568,-.01062446,.00587872,-.0025154,53208e-8].reverse(),a=[1,.15443144,-.67278579,-.18156897,-.01919402,-.00110404,-4686e-8].reverse(),s=[1.25331414,.23498619,-.0365562,.01504268,-.00780353,.00325614,-68245e-8].reverse();return i((function(i){return i<=2?-t.log(i/2)*b(i,0)+n(e,i*i/4):t.exp(-i)/t.sqrt(i)*n(r,2/i)}),(function(e){return e<=2?t.log(e/2)*b(e,1)+1/e*n(a,e*e/4):t.exp(-e)/t.sqrt(e)*n(s,2/e)}),0,2,1)}();e.besselj=v,e.bessely=x,e.besseli=b,e.besselk=S},"undefined"==typeof DO_NOT_EXPORT_BESSEL?r(t):r({})},,,,,,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(111)),s=i(n(16));t.types=s;var o=n(122);t.parse=o.parse;var u=n(137),l=n(16);function c(e,t){return new u.Printer(t).print(e)}function h(t){e.stdout.write(t)}t.visit=l.visit,t.print=c,t.prettyPrint=function(e,t){return new u.Printer(t).printGenerically(e)},t.run=function(t,n){return function(e,t,n){a.default.readFile(e,"utf-8",(function(e,r){e?console.error(e):function(e,t,n){var r=n&&n.writeback||h;t(o.parse(e,n),(function(e){r(c(e,n).code)}))}(r,t,n)}))}(e.argv[2],t,n)}}).call(this,n(57))},,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(113)),s=r(n(115)),o=r(n(59)),u=r(n(58));t.default=function(e){var t=function(){var e=[],t=[];var n={use:function(r){var i=e.indexOf(r);return-1===i&&(i=e.length,e.push(r),t[i]=r(n)),t[i]}};return n}(),n=t.use(i.default);e.forEach(t.use),n.finalize();var r=t.use(a.default);return{Type:n.Type,builtInTypes:n.builtInTypes,namedTypes:n.namedTypes,builders:n.builders,defineMethod:n.defineMethod,getFieldNames:n.getFieldNames,getFieldValue:n.getFieldValue,eachField:n.eachField,someField:n.someField,getSupertypeNames:n.getSupertypeNames,getBuilderName:n.getBuilderName,astNodesAreEquivalent:t.use(s.default),finalize:n.finalize,Path:t.use(o.default),NodePath:t.use(u.default),PathVisitor:r,use:t.use,visit:r.visit}},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(58)),s=Object.prototype.hasOwnProperty;t.default=function(e){var t=e.use(i.default),n=e.use(a.default),r=t.builtInTypes.array,o=t.builtInTypes.object,u=t.builtInTypes.function,l=function e(){if(!(this instanceof e))throw new Error("PathVisitor constructor cannot be invoked without 'new'");this._reusableContextStack=[],this._methodNameTable=function(e){var n=Object.create(null);for(var r in e)/^visit[A-Z]/.test(r)&&(n[r.slice("visit".length)]=!0);for(var i=t.computeSupertypeLookupTable(n),a=Object.create(null),s=Object.keys(i),o=s.length,l=0;l<o;++l){var c=s[l];r="visit"+i[c],u.check(e[r])&&(a[c]=r)}return a}(this),this._shouldVisitComments=s.call(this._methodNameTable,"Block")||s.call(this._methodNameTable,"Line"),this.Context=f(this),this._visiting=!1,this._changeReported=!1};function c(e,t){for(var n in t)s.call(t,n)&&(e[n]=t[n]);return e}l.fromMethodsObject=function(e){if(e instanceof l)return e;if(!o.check(e))return new l;var t=function e(){if(!(this instanceof e))throw new Error("Visitor constructor cannot be invoked without 'new'");l.call(this)},n=t.prototype=Object.create(h);return n.constructor=t,c(n,e),c(t,l),u.assert(t.fromMethodsObject),u.assert(t.visit),new t},l.visit=function(e,t){return l.fromMethodsObject(t).visit(e)};var h=l.prototype;function p(e,i){if(!(e instanceof n))throw new Error("");if(!(i instanceof l))throw new Error("");var a=e.value;if(r.check(a))e.each(i.visitWithoutReset,i);else if(o.check(a)){var u=t.getFieldNames(a);i._shouldVisitComments&&a.comments&&u.indexOf("comments")<0&&u.push("comments");for(var c=u.length,h=[],p=0;p<c;++p){var f=u[p];s.call(a,f)||(a[f]=t.getFieldValue(a,f)),h.push(e.get(f))}for(p=0;p<c;++p)i.visitWithoutReset(h[p])}else;return e.value}function f(e){function t(r){if(!(this instanceof t))throw new Error("");if(!(this instanceof l))throw new Error("");if(!(r instanceof n))throw new Error("");Object.defineProperty(this,"visitor",{value:e,writable:!1,enumerable:!0,configurable:!1}),this.currentPath=r,this.needToCallTraverse=!0,Object.seal(this)}if(!(e instanceof l))throw new Error("");var r=t.prototype=Object.create(e);return r.constructor=t,c(r,d),t}h.visit=function(){if(this._visiting)throw new Error("Recursively calling visitor.visit(path) resets visitor state. Try this.visit(path) or this.traverse(path) instead.");this._visiting=!0,this._changeReported=!1,this._abortRequested=!1;for(var e,t=arguments.length,r=new Array(t),i=0;i<t;++i)r[i]=arguments[i];r[0]instanceof n||(r[0]=new n({root:r[0]}).get("root")),this.reset.apply(this,r);try{var a=this.visitWithoutReset(r[0]);e=!0}finally{if(this._visiting=!1,!e&&this._abortRequested)return r[0].value}return a},h.AbortRequest=function(){},h.abort=function(){var e=this;e._abortRequested=!0;var t=new e.AbortRequest;throw t.cancel=function(){e._abortRequested=!1},t},h.reset=function(e){},h.visitWithoutReset=function(e){if(this instanceof this.Context)return this.visitor.visitWithoutReset(e);if(!(e instanceof n))throw new Error("");var t=e.value,r=t&&"object"==typeof t&&"string"==typeof t.type&&this._methodNameTable[t.type];if(!r)return p(e,this);var i=this.acquireContext(e);try{return i.invokeVisitorMethod(r)}finally{this.releaseContext(i)}},h.acquireContext=function(e){return 0===this._reusableContextStack.length?new this.Context(e):this._reusableContextStack.pop().reset(e)},h.releaseContext=function(e){if(!(e instanceof this.Context))throw new Error("");this._reusableContextStack.push(e),e.currentPath=null},h.reportChanged=function(){this._changeReported=!0},h.wasChangeReported=function(){return this._changeReported};var d=Object.create(null);return d.reset=function(e){if(!(this instanceof this.Context))throw new Error("");if(!(e instanceof n))throw new Error("");return this.currentPath=e,this.needToCallTraverse=!0,this},d.invokeVisitorMethod=function(e){if(!(this instanceof this.Context))throw new Error("");if(!(this.currentPath instanceof n))throw new Error("");var t=this.visitor[e].call(this,this.currentPath);if(!1===t?this.needToCallTraverse=!1:void 0!==t&&(this.currentPath=this.currentPath.replace(t)[0],this.needToCallTraverse&&this.traverse(this.currentPath)),!1!==this.needToCallTraverse)throw new Error("Must either call this.traverse or return false in "+e);var r=this.currentPath;return r&&r.value},d.traverse=function(e,t){if(!(this instanceof this.Context))throw new Error("");if(!(e instanceof n))throw new Error("");if(!(this.currentPath instanceof n))throw new Error("");return this.needToCallTraverse=!1,p(e,l.fromMethodsObject(t||this.visitor))},d.visit=function(e,t){if(!(this instanceof this.Context))throw new Error("");if(!(e instanceof n))throw new Error("");if(!(this.currentPath instanceof n))throw new Error("");return this.needToCallTraverse=!1,l.fromMethodsObject(t||this.visitor).visitWithoutReset(e)},d.reportChanged=function(){this.visitor.reportChanged()},d.abort=function(){this.needToCallTraverse=!1,this.visitor.abort()},l},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=Object.prototype.hasOwnProperty;t.default=function(e){var t=e.use(i.default),n=t.Type,r=t.namedTypes,s=r.Node,o=r.Expression,u=t.builtInTypes.array,l=t.builders,c=function e(t,n){if(!(this instanceof e))throw new Error("Scope constructor cannot be invoked without 'new'");var r;if(p.assert(t.value),n){if(!(n instanceof e))throw new Error("");r=n.depth+1}else n=null,r=0;Object.defineProperties(this,{path:{value:t},node:{value:t.value},isGlobal:{value:!n,enumerable:!0},depth:{value:r},parent:{value:n},bindings:{value:{}},types:{value:{}}})},h=[r.Program,r.Function,r.CatchClause],p=n.or.apply(n,h);c.isEstablishedBy=function(e){return p.check(e)};var f=c.prototype;function d(e,n,i){var l=e.value;e.parent&&r.FunctionExpression.check(e.parent.node)&&e.parent.node.id&&y(e.parent.get("id"),n),l&&(u.check(l)?e.each((function(e){m(e,n,i)})):r.Function.check(l)?(e.get("params").each((function(e){y(e,n)})),m(e.get("body"),n,i)):r.TypeAlias&&r.TypeAlias.check(l)||r.InterfaceDeclaration&&r.InterfaceDeclaration.check(l)||r.TSTypeAliasDeclaration&&r.TSTypeAliasDeclaration.check(l)||r.TSInterfaceDeclaration&&r.TSInterfaceDeclaration.check(l)?function(e,t){var n=e.value;r.Pattern.assert(n),r.Identifier.check(n)&&(a.call(t,n.name)?t[n.name].push(e):t[n.name]=[e])}(e.get("id"),i):r.VariableDeclarator.check(l)?(y(e.get("id"),n),m(e.get("init"),n,i)):"ImportSpecifier"===l.type||"ImportNamespaceSpecifier"===l.type||"ImportDefaultSpecifier"===l.type?y(e.get(l.local?"local":l.name?"name":"id"),n):s.check(l)&&!o.check(l)&&t.eachField(l,(function(t,r){var a=e.get(t);if(!function(e,t){if(e.value===t)return!0;if(Array.isArray(e.value)&&0===e.value.length&&Array.isArray(t)&&0===t.length)return!0;return!1}(a,r))throw new Error("");m(a,n,i)})))}function m(e,t,n){var i=e.value;if(!i||o.check(i));else if(r.FunctionDeclaration.check(i)&&null!==i.id)y(e.get("id"),t);else if(r.ClassDeclaration&&r.ClassDeclaration.check(i))y(e.get("id"),t);else if(p.check(i)){if(r.CatchClause.check(i)&&r.Identifier.check(i.param)){var s=i.param.name,u=a.call(t,s);d(e.get("body"),t,n),u||delete t[s]}}else d(e,t,n)}function y(e,t){var n=e.value;r.Pattern.assert(n),r.Identifier.check(n)?a.call(t,n.name)?t[n.name].push(e):t[n.name]=[e]:r.AssignmentPattern&&r.AssignmentPattern.check(n)?y(e.get("left"),t):r.ObjectPattern&&r.ObjectPattern.check(n)?e.get("properties").each((function(e){var n=e.value;r.Pattern.check(n)?y(e,t):r.Property.check(n)?y(e.get("value"),t):r.SpreadProperty&&r.SpreadProperty.check(n)&&y(e.get("argument"),t)})):r.ArrayPattern&&r.ArrayPattern.check(n)?e.get("elements").each((function(e){var n=e.value;r.Pattern.check(n)?y(e,t):r.SpreadElement&&r.SpreadElement.check(n)&&y(e.get("argument"),t)})):r.PropertyPattern&&r.PropertyPattern.check(n)?y(e.get("pattern"),t):(r.SpreadElementPattern&&r.SpreadElementPattern.check(n)||r.SpreadPropertyPattern&&r.SpreadPropertyPattern.check(n))&&y(e.get("argument"),t)}return f.didScan=!1,f.declares=function(e){return this.scan(),a.call(this.bindings,e)},f.declaresType=function(e){return this.scan(),a.call(this.types,e)},f.declareTemporary=function(e){if(e){if(!/^[a-z$_]/i.test(e))throw new Error("")}else e="t$";e+=this.depth.toString(36)+"$",this.scan();for(var n=0;this.declares(e+n);)++n;var r=e+n;return this.bindings[r]=t.builders.identifier(r)},f.injectTemporary=function(e,t){e||(e=this.declareTemporary());var n=this.path.get("body");return r.BlockStatement.check(n.value)&&(n=n.get("body")),n.unshift(l.variableDeclaration("var",[l.variableDeclarator(e,t||null)])),e},f.scan=function(e){if(e||!this.didScan){for(var t in this.bindings)delete this.bindings[t];!function(e,t,n){var i=e.value;p.assert(i),r.CatchClause.check(i)?y(e.get("param"),t):d(e,t,n)}(this.path,this.bindings,this.types),this.didScan=!0}},f.getBindings=function(){return this.scan(),this.bindings},f.getTypes=function(){return this.scan(),this.types},f.lookup=function(e){for(var t=this;t&&!t.declares(e);t=t.parent);return t},f.lookupType=function(e){for(var t=this;t&&!t.declaresType(e);t=t.parent);return t},f.getGlobalScope=function(){for(var e=this;!e.isGlobal;)e=e.parent;return e},c},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3));t.default=function(e){var t=e.use(i.default),n=t.getFieldNames,r=t.getFieldValue,a=t.builtInTypes.array,s=t.builtInTypes.object,o=t.builtInTypes.Date,u=t.builtInTypes.RegExp,l=Object.prototype.hasOwnProperty;function c(e,t,n){return a.check(n)?n.length=0:n=null,p(e,t,n)}function h(e){return/[_$a-z][_$a-z0-9]*/i.test(e)?"."+e:"["+JSON.stringify(e)+"]"}function p(e,t,i){return e===t||(a.check(e)?function(e,t,n){a.assert(e);var r=e.length;if(!a.check(t)||t.length!==r)return n&&n.push("length"),!1;for(var i=0;i<r;++i){if(n&&n.push(i),i in e!=i in t)return!1;if(!p(e[i],t[i],n))return!1;if(n){var s=n.pop();if(s!==i)throw new Error(""+s)}}return!0}(e,t,i):s.check(e)?function(e,t,i){if(s.assert(e),!s.check(t))return!1;if(e.type!==t.type)return i&&i.push("type"),!1;var a=n(e),o=a.length,u=n(t),c=u.length;if(o===c){for(var h=0;h<o;++h){var f=a[h],d=r(e,f),m=r(t,f);if(i&&i.push(f),!p(d,m,i))return!1;if(i){var y=i.pop();if(y!==f)throw new Error(""+y)}}return!0}if(!i)return!1;var g=Object.create(null);for(h=0;h<o;++h)g[a[h]]=!0;for(h=0;h<c;++h){if(f=u[h],!l.call(g,f))return i.push(f),!1;delete g[f]}for(f in g){i.push(f);break}return!1}(e,t,i):o.check(e)?o.check(t)&&+e==+t:u.check(e)?u.check(t)&&e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.ignoreCase===t.ignoreCase:e==t)}return c.assert=function(e,t){var n=[];if(!c(e,t,n)){if(0!==n.length)throw new Error("Nodes differ in the following path: "+n.map(h).join(""));if(e!==t)throw new Error("Nodes must be equal")}},c},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(20)),a=r(n(3)),s=r(n(14));t.default=function(e){e.use(i.default);var t=e.use(a.default),n=t.Type.def,r=t.Type.or,o=e.use(s.default).defaults;n("JSXAttribute").bases("Node").build("name","value").field("name",r(n("JSXIdentifier"),n("JSXNamespacedName"))).field("value",r(n("Literal"),n("JSXExpressionContainer"),null),o.null),n("JSXIdentifier").bases("Identifier").build("name").field("name",String),n("JSXNamespacedName").bases("Node").build("namespace","name").field("namespace",n("JSXIdentifier")).field("name",n("JSXIdentifier")),n("JSXMemberExpression").bases("MemberExpression").build("object","property").field("object",r(n("JSXIdentifier"),n("JSXMemberExpression"))).field("property",n("JSXIdentifier")).field("computed",Boolean,o.false);var u=r(n("JSXIdentifier"),n("JSXNamespacedName"),n("JSXMemberExpression"));n("JSXSpreadAttribute").bases("Node").build("argument").field("argument",n("Expression"));var l=[r(n("JSXAttribute"),n("JSXSpreadAttribute"))];n("JSXExpressionContainer").bases("Expression").build("expression").field("expression",n("Expression")),n("JSXElement").bases("Expression").build("openingElement","closingElement","children").field("openingElement",n("JSXOpeningElement")).field("closingElement",r(n("JSXClosingElement"),null),o.null).field("children",[r(n("JSXElement"),n("JSXExpressionContainer"),n("JSXFragment"),n("JSXText"),n("Literal"))],o.emptyArray).field("name",u,(function(){return this.openingElement.name}),!0).field("selfClosing",Boolean,(function(){return this.openingElement.selfClosing}),!0).field("attributes",l,(function(){return this.openingElement.attributes}),!0),n("JSXOpeningElement").bases("Node").build("name","attributes","selfClosing").field("name",u).field("attributes",l,o.emptyArray).field("selfClosing",Boolean,o.false),n("JSXClosingElement").bases("Node").build("name").field("name",u),n("JSXFragment").bases("Expression").build("openingElement","closingElement","children").field("openingElement",n("JSXOpeningFragment")).field("closingElement",n("JSXClosingFragment")).field("children",[r(n("JSXElement"),n("JSXExpressionContainer"),n("JSXFragment"),n("JSXText"),n("Literal"))],o.emptyArray),n("JSXOpeningFragment").bases("Node").build(),n("JSXClosingFragment").bases("Node").build(),n("JSXText").bases("Literal").build("value").field("value",String),n("JSXEmptyExpression").bases("Expression").build(),n("JSXSpreadChild").bases("Expression").build("expression").field("expression",n("Expression"))},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(20)),a=r(n(3)),s=r(n(14));t.default=function(e){e.use(i.default);var t=e.use(a.default),n=e.use(s.default).defaults,r=t.Type.def,o=t.Type.or;r("VariableDeclaration").field("declarations",[o(r("VariableDeclarator"),r("Identifier"))]),r("Property").field("value",o(r("Expression"),r("Pattern"))),r("ArrayPattern").field("elements",[o(r("Pattern"),r("SpreadElement"),null)]),r("ObjectPattern").field("properties",[o(r("Property"),r("PropertyPattern"),r("SpreadPropertyPattern"),r("SpreadProperty"))]),r("ExportSpecifier").bases("ModuleSpecifier").build("id","name"),r("ExportBatchSpecifier").bases("Specifier").build(),r("ExportDeclaration").bases("Declaration").build("default","declaration","specifiers","source").field("default",Boolean).field("declaration",o(r("Declaration"),r("Expression"),null)).field("specifiers",[o(r("ExportSpecifier"),r("ExportBatchSpecifier"))],n.emptyArray).field("source",o(r("Literal"),null),n.null),r("Block").bases("Comment").build("value","leading","trailing"),r("Line").bases("Comment").build("value","leading","trailing")},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(63)),a=r(n(61));t.default=function(e){e.use(i.default),e.use(a.default)},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(63)),a=r(n(62)),s=r(n(3)),o=r(n(14));t.default=function(e){e.use(i.default),e.use(a.default);var t=e.use(s.default),n=t.namedTypes,r=t.Type.def,u=t.Type.or,l=e.use(o.default).defaults,c=t.Type.from((function(e,t){return!(!n.StringLiteral||!n.StringLiteral.check(e,t))||!(!n.Literal||!n.Literal.check(e,t)||"string"!=typeof e.value)}),"StringLiteral");r("TSType").bases("Node");var h=u(r("Identifier"),r("TSQualifiedName"));r("TSTypeReference").bases("TSType","TSHasOptionalTypeParameterInstantiation").build("typeName","typeParameters").field("typeName",h),r("TSHasOptionalTypeParameterInstantiation").field("typeParameters",u(r("TSTypeParameterInstantiation"),null),l.null),r("TSHasOptionalTypeParameters").field("typeParameters",u(r("TSTypeParameterDeclaration"),null,void 0),l.null),r("TSHasOptionalTypeAnnotation").field("typeAnnotation",u(r("TSTypeAnnotation"),null),l.null),r("TSQualifiedName").bases("Node").build("left","right").field("left",h).field("right",h),r("TSAsExpression").bases("Expression","Pattern").build("expression","typeAnnotation").field("expression",r("Expression")).field("typeAnnotation",r("TSType")).field("extra",u({parenthesized:Boolean},null),l.null),r("TSNonNullExpression").bases("Expression","Pattern").build("expression").field("expression",r("Expression")),["TSAnyKeyword","TSBigIntKeyword","TSBooleanKeyword","TSNeverKeyword","TSNullKeyword","TSNumberKeyword","TSObjectKeyword","TSStringKeyword","TSSymbolKeyword","TSUndefinedKeyword","TSUnknownKeyword","TSVoidKeyword","TSThisType"].forEach((function(e){r(e).bases("TSType").build()})),r("TSArrayType").bases("TSType").build("elementType").field("elementType",r("TSType")),r("TSLiteralType").bases("TSType").build("literal").field("literal",u(r("NumericLiteral"),r("StringLiteral"),r("BooleanLiteral"),r("TemplateLiteral"),r("UnaryExpression"))),["TSUnionType","TSIntersectionType"].forEach((function(e){r(e).bases("TSType").build("types").field("types",[r("TSType")])})),r("TSConditionalType").bases("TSType").build("checkType","extendsType","trueType","falseType").field("checkType",r("TSType")).field("extendsType",r("TSType")).field("trueType",r("TSType")).field("falseType",r("TSType")),r("TSInferType").bases("TSType").build("typeParameter").field("typeParameter",r("TSTypeParameter")),r("TSParenthesizedType").bases("TSType").build("typeAnnotation").field("typeAnnotation",r("TSType"));var p=[u(r("Identifier"),r("RestElement"),r("ArrayPattern"),r("ObjectPattern"))];["TSFunctionType","TSConstructorType"].forEach((function(e){r(e).bases("TSType","TSHasOptionalTypeParameters","TSHasOptionalTypeAnnotation").build("parameters").field("parameters",p)})),r("TSDeclareFunction").bases("Declaration","TSHasOptionalTypeParameters").build("id","params","returnType").field("declare",Boolean,l.false).field("async",Boolean,l.false).field("generator",Boolean,l.false).field("id",u(r("Identifier"),null),l.null).field("params",[r("Pattern")]).field("returnType",u(r("TSTypeAnnotation"),r("Noop"),null),l.null),r("TSDeclareMethod").bases("Declaration","TSHasOptionalTypeParameters").build("key","params","returnType").field("async",Boolean,l.false).field("generator",Boolean,l.false).field("params",[r("Pattern")]).field("abstract",Boolean,l.false).field("accessibility",u("public","private","protected",void 0),l[void 0]).field("static",Boolean,l.false).field("computed",Boolean,l.false).field("optional",Boolean,l.false).field("key",u(r("Identifier"),r("StringLiteral"),r("NumericLiteral"),r("Expression"))).field("kind",u("get","set","method","constructor"),(function(){return"method"})).field("access",u("public","private","protected",void 0),l[void 0]).field("decorators",u([r("Decorator")],null),l.null).field("returnType",u(r("TSTypeAnnotation"),r("Noop"),null),l.null),r("TSMappedType").bases("TSType").build("typeParameter","typeAnnotation").field("readonly",u(Boolean,"+","-"),l.false).field("typeParameter",r("TSTypeParameter")).field("optional",u(Boolean,"+","-"),l.false).field("typeAnnotation",u(r("TSType"),null),l.null),r("TSTupleType").bases("TSType").build("elementTypes").field("elementTypes",[r("TSType")]),r("TSRestType").bases("TSType").build("typeAnnotation").field("typeAnnotation",r("TSType")),r("TSOptionalType").bases("TSType").build("typeAnnotation").field("typeAnnotation",r("TSType")),r("TSIndexedAccessType").bases("TSType").build("objectType","indexType").field("objectType",r("TSType")).field("indexType",r("TSType")),r("TSTypeOperator").bases("TSType").build("operator").field("operator",String).field("typeAnnotation",r("TSType")),r("TSTypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation",u(r("TSType"),r("TSTypeAnnotation"))),r("TSIndexSignature").bases("Declaration","TSHasOptionalTypeAnnotation").build("parameters","typeAnnotation").field("parameters",[r("Identifier")]).field("readonly",Boolean,l.false),r("TSPropertySignature").bases("Declaration","TSHasOptionalTypeAnnotation").build("key","typeAnnotation","optional").field("key",r("Expression")).field("computed",Boolean,l.false).field("readonly",Boolean,l.false).field("optional",Boolean,l.false).field("initializer",u(r("Expression"),null),l.null),r("TSMethodSignature").bases("Declaration","TSHasOptionalTypeParameters","TSHasOptionalTypeAnnotation").build("key","parameters","typeAnnotation").field("key",r("Expression")).field("computed",Boolean,l.false).field("optional",Boolean,l.false).field("parameters",p),r("TSTypePredicate").bases("TSTypeAnnotation").build("parameterName","typeAnnotation").field("parameterName",u(r("Identifier"),r("TSThisType"))).field("typeAnnotation",r("TSTypeAnnotation")),["TSCallSignatureDeclaration","TSConstructSignatureDeclaration"].forEach((function(e){r(e).bases("Declaration","TSHasOptionalTypeParameters","TSHasOptionalTypeAnnotation").build("parameters","typeAnnotation").field("parameters",p)})),r("TSEnumMember").bases("Node").build("id","initializer").field("id",u(r("Identifier"),c)).field("initializer",u(r("Expression"),null),l.null),r("TSTypeQuery").bases("TSType").build("exprName").field("exprName",u(h,r("TSImportType")));var f=u(r("TSCallSignatureDeclaration"),r("TSConstructSignatureDeclaration"),r("TSIndexSignature"),r("TSMethodSignature"),r("TSPropertySignature"));r("TSTypeLiteral").bases("TSType").build("members").field("members",[f]),r("TSTypeParameter").bases("Identifier").build("name","constraint","default").field("name",String).field("constraint",u(r("TSType"),void 0),l[void 0]).field("default",u(r("TSType"),void 0),l[void 0]),r("TSTypeAssertion").bases("Expression","Pattern").build("typeAnnotation","expression").field("typeAnnotation",r("TSType")).field("expression",r("Expression")).field("extra",u({parenthesized:Boolean},null),l.null),r("TSTypeParameterDeclaration").bases("Declaration").build("params").field("params",[r("TSTypeParameter")]),r("TSTypeParameterInstantiation").bases("Node").build("params").field("params",[r("TSType")]),r("TSEnumDeclaration").bases("Declaration").build("id","members").field("id",r("Identifier")).field("const",Boolean,l.false).field("declare",Boolean,l.false).field("members",[r("TSEnumMember")]).field("initializer",u(r("Expression"),null),l.null),r("TSTypeAliasDeclaration").bases("Declaration","TSHasOptionalTypeParameters").build("id","typeAnnotation").field("id",r("Identifier")).field("declare",Boolean,l.false).field("typeAnnotation",r("TSType")),r("TSModuleBlock").bases("Node").build("body").field("body",[r("Statement")]),r("TSModuleDeclaration").bases("Declaration").build("id","body").field("id",u(c,h)).field("declare",Boolean,l.false).field("global",Boolean,l.false).field("body",u(r("TSModuleBlock"),r("TSModuleDeclaration"),null),l.null),r("TSImportType").bases("TSType","TSHasOptionalTypeParameterInstantiation").build("argument","qualifier","typeParameters").field("argument",c).field("qualifier",u(h,void 0),l[void 0]),r("TSImportEqualsDeclaration").bases("Declaration").build("id","moduleReference").field("id",r("Identifier")).field("isExport",Boolean,l.false).field("moduleReference",u(h,r("TSExternalModuleReference"))),r("TSExternalModuleReference").bases("Declaration").build("expression").field("expression",c),r("TSExportAssignment").bases("Statement").build("expression").field("expression",r("Expression")),r("TSNamespaceExportDeclaration").bases("Declaration").build("id").field("id",r("Identifier")),r("TSInterfaceBody").bases("Node").build("body").field("body",[f]),r("TSExpressionWithTypeArguments").bases("TSType","TSHasOptionalTypeParameterInstantiation").build("expression","typeParameters").field("expression",h),r("TSInterfaceDeclaration").bases("Declaration","TSHasOptionalTypeParameters").build("id","body").field("id",h).field("declare",Boolean,l.false).field("extends",u([r("TSExpressionWithTypeArguments")],null),l.null).field("body",r("TSInterfaceBody")),r("TSParameterProperty").bases("Pattern").build("parameter").field("accessibility",u("public","private","protected",void 0),l[void 0]).field("readonly",Boolean,l.false).field("parameter",u(r("Identifier"),r("AssignmentPattern"))),r("ClassProperty").field("access",u("public","private","protected",void 0),l[void 0]),r("ClassBody").field("body",[u(r("MethodDefinition"),r("VariableDeclarator"),r("ClassPropertyDefinition"),r("ClassProperty"),r("ClassPrivateProperty"),r("ClassMethod"),r("ClassPrivateMethod"),r("TSDeclareMethod"),f)])},e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),a=r(n(14)),s=r(n(37));t.default=function(e){e.use(s.default);var t=e.use(i.default),n=t.Type,r=t.Type.def,o=n.or,u=e.use(a.default).defaults;r("OptionalMemberExpression").bases("MemberExpression").build("object","property","computed","optional").field("optional",Boolean,u.true),r("OptionalCallExpression").bases("CallExpression").build("callee","arguments","optional").field("optional",Boolean,u.true);var l=o("||","&&","??");r("LogicalExpression").field("operator",l)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.namedTypes||(t.namedTypes={})},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(17)),s=i(n(16)),o=s.builders,u=s.builtInTypes.object,l=s.builtInTypes.array,c=n(38),h=n(27),p=n(69),f=i(n(18));t.parse=function(e,t){t=c.normalize(t);var r,i,a=h.fromString(e,t),s=a.toString({tabWidth:t.tabWidth,reuseWhitespace:!1,useTabs:!1}),u=[],l=t.parser.parse(s,{jsx:!0,loc:!0,locations:!0,range:t.range,comment:!0,onComment:u,tolerant:f.getOption(t,"tolerant",!0),ecmaVersion:6,sourceType:f.getOption(t,"sourceType","module")}),m=Array.isArray(l.tokens)?l.tokens:n(68).tokenize(s,{loc:!0});delete l.tokens,m.forEach((function(e){"string"!=typeof e.value&&(e.value=a.sliceString(e.loc.start,e.loc.end))})),Array.isArray(l.comments)&&(u=l.comments,delete l.comments),l.loc?f.fixFaultyLocations(l,a):l.loc={start:a.firstPos(),end:a.lastPos()},l.loc.lines=a,l.loc.indent=0,"Program"===l.type?(i=l,(r=o.file(l,t.sourceFileName||null)).loc={start:a.firstPos(),end:a.lastPos(),lines:a,indent:0}):"File"===l.type&&(i=(r=l).program),t.tokens&&(r.tokens=m);var y=f.getTrueLoc({type:i.type,loc:i.loc,body:[],comments:u},a);return i.loc.start=y.start,i.loc.end=y.end,p.attach(u,i.body.length?r.program:r,a),new d(a,m).copy(r)};var d=function e(t,n){a.default.ok(this instanceof e),this.lines=t,this.tokens=n,this.startTokenIndex=0,this.endTokenIndex=n.length,this.indent=0,this.seen=new Map},m=d.prototype;m.copy=function(e){if(this.seen.has(e))return this.seen.get(e);if(l.check(e)){var t=new Array(e.length);return this.seen.set(e,t),e.forEach((function(e,n){t[n]=this.copy(e)}),this),t}if(!u.check(e))return e;f.fixFaultyLocations(e,this.lines);t=Object.create(Object.getPrototypeOf(e),{original:{value:e,configurable:!1,enumerable:!1,writable:!0}});this.seen.set(e,t);var n=e.loc,r=this.indent,i=r,a=this.startTokenIndex,s=this.endTokenIndex;n&&(("Block"===e.type||"Line"===e.type||"CommentBlock"===e.type||"CommentLine"===e.type||this.lines.isPrecededOnlyByWhitespace(n.start))&&(i=this.indent=n.start.column),n.lines=this.lines,n.tokens=this.tokens,n.indent=i,this.findTokenRange(n));for(var o=Object.keys(e),c=o.length,h=0;h<c;++h){var p=o[h];"loc"===p?t[p]=e[p]:"tokens"===p&&"File"===e.type?t[p]=e[p]:t[p]=this.copy(e[p])}return this.indent=r,this.startTokenIndex=a,this.endTokenIndex=s,t},m.findTokenRange=function(e){for(;this.startTokenIndex>0;){var t=e.tokens[this.startTokenIndex];if(!(f.comparePos(e.start,t.loc.start)<0))break;--this.startTokenIndex}for(;this.endTokenIndex<e.tokens.length;){t=e.tokens[this.endTokenIndex];if(!(f.comparePos(t.loc.end,e.end)<0))break;++this.endTokenIndex}for(;this.startTokenIndex<this.endTokenIndex;){t=e.tokens[this.startTokenIndex];if(!(f.comparePos(t.loc.start,e.start)<0))break;++this.startTokenIndex}for(e.start.token=this.startTokenIndex;this.endTokenIndex>this.startTokenIndex;){t=e.tokens[this.endTokenIndex-1];if(!(f.comparePos(e.end,t.loc.end)<0))break;--this.endTokenIndex}e.end.token=this.endTokenIndex}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function s(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,o,u=s(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))i.call(n,c)&&(u[c]=n[c]);if(r){o=r(n);for(var h=0;h<o.length;h++)a.call(n,o[h])&&(u[o[h]]=n[o[h]])}}return u}},function(e,t,n){(function(e){var r=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++)n[t[r]]=Object.getOwnPropertyDescriptor(e,t[r]);return n},i=/%[sdj%]/g;t.format=function(e){if(!g(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(o(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,a=r.length,s=String(e).replace(i,(function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),u=r[n];n<a;u=r[++n])m(u)||!b(u)?s+=" "+u:s+=" "+o(u);return s},t.deprecate=function(n,r){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(r);e.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var a,s={};function o(e,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&t._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),c(r,e,r.depth)}function u(e,t){var n=o.styles[t];return n?"["+o.colors[n][0]+"m"+e+"["+o.colors[n][1]+"m":e}function l(e,t){return e}function c(e,n,r){if(e.customInspect&&n&&D(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return g(i)||(i=c(e,i,r)),i}var a=function(e,t){if(v(t))return e.stylize("undefined","undefined");if(g(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(y(t))return e.stylize(""+t,"number");if(d(t))return e.stylize(""+t,"boolean");if(m(t))return e.stylize("null","null")}(e,n);if(a)return a;var s=Object.keys(n),o=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(n)),E(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return h(n);if(0===s.length){if(D(n)){var u=n.name?": "+n.name:"";return e.stylize("[Function"+u+"]","special")}if(x(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(S(n))return e.stylize(Date.prototype.toString.call(n),"date");if(E(n))return h(n)}var l,b="",w=!1,A=["{","}"];(f(n)&&(w=!0,A=["[","]"]),D(n))&&(b=" [Function"+(n.name?": "+n.name:"")+"]");return x(n)&&(b=" "+RegExp.prototype.toString.call(n)),S(n)&&(b=" "+Date.prototype.toUTCString.call(n)),E(n)&&(b=" "+h(n)),0!==s.length||w&&0!=n.length?r<0?x(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=w?function(e,t,n,r,i){for(var a=[],s=0,o=t.length;s<o;++s)k(t,String(s))?a.push(p(e,t,n,r,String(s),!0)):a.push("");return i.forEach((function(i){i.match(/^\d+$/)||a.push(p(e,t,n,r,i,!0))})),a}(e,n,r,o,s):s.map((function(t){return p(e,n,r,o,t,w)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(l,b,A)):A[0]+b+A[1]}function h(e){return"["+Error.prototype.toString.call(e)+"]"}function p(e,t,n,r,i,a){var s,o,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?o=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(o=e.stylize("[Setter]","special")),k(r,i)||(s="["+i+"]"),o||(e.seen.indexOf(u.value)<0?(o=m(n)?c(e,u.value,null):c(e,u.value,n-1)).indexOf("\n")>-1&&(o=a?o.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+o.split("\n").map((function(e){return"   "+e})).join("\n")):o=e.stylize("[Circular]","special")),v(s)){if(a&&i.match(/^\d+$/))return o;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+o}function f(e){return Array.isArray(e)}function d(e){return"boolean"==typeof e}function m(e){return null===e}function y(e){return"number"==typeof e}function g(e){return"string"==typeof e}function v(e){return void 0===e}function x(e){return b(e)&&"[object RegExp]"===w(e)}function b(e){return"object"==typeof e&&null!==e}function S(e){return b(e)&&"[object Date]"===w(e)}function E(e){return b(e)&&("[object Error]"===w(e)||e instanceof Error)}function D(e){return"function"==typeof e}function w(e){return Object.prototype.toString.call(e)}function A(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(v(a)&&(a=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!s[n])if(new RegExp("\\b"+n+"\\b","i").test(a)){var r=e.pid;s[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,r,e)}}else s[n]=function(){};return s[n]},t.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=f,t.isBoolean=d,t.isNull=m,t.isNullOrUndefined=function(e){return null==e},t.isNumber=y,t.isString=g,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=v,t.isRegExp=x,t.isObject=b,t.isDate=S,t.isError=E,t.isFunction=D,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(125);var C=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(){var e=new Date,t=[A(e.getHours()),A(e.getMinutes()),A(e.getSeconds())].join(":");return[e.getDate(),C[e.getMonth()],t].join(" ")}function k(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",T(),t.format.apply(t,arguments))},t.inherits=n(126),t._extend=function(e,t){if(!t||!b(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e};var F="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function P(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(F&&e[F]){var t;if("function"!=typeof(t=e[F]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,F,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,r=new Promise((function(e,r){t=e,n=r})),i=[],a=0;a<arguments.length;a++)i.push(arguments[a]);i.push((function(e,r){e?n(e):t(r)}));try{e.apply(this,i)}catch(e){n(e)}return r}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),F&&Object.defineProperty(t,F,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,r(e))},t.promisify.custom=F,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var a=this,s=function(){return i.apply(a,arguments)};t.apply(this,n).then((function(t){e.nextTick(s,null,t)}),(function(t){e.nextTick(P,t,s)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,r(t)),n}}).call(this,n(57))},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(18);t.parse=function(e,t){var i=[],a=n(68).parse(e,{loc:!0,locations:!0,comment:!0,onComment:i,range:r.getOption(t,"range",!1),tolerant:r.getOption(t,"tolerant",!0),tokens:!0});return Array.isArray(a.comments)||(a.comments=i),a}},function(e,t){var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");t.encode=function(e){if(0<=e&&e<n.length)return n[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}},function(e,t,n){var r=n(21);function i(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}i.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},i.prototype.add=function(e){var t,n,i,a,s,o;t=this._last,n=e,i=t.generatedLine,a=n.generatedLine,s=t.generatedColumn,o=n.generatedColumn,a>i||a==i&&o>=s||r.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},i.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},t.MappingList=i},function(e,t,n){var r=n(21),i=n(131),a=n(67).ArraySet,s=n(66),o=n(132).quickSort;function u(e,t){var n=e;return"string"==typeof e&&(n=r.parseSourceMapInput(e)),null!=n.sections?new h(n,t):new l(n,t)}function l(e,t){var n=e;"string"==typeof e&&(n=r.parseSourceMapInput(e));var i=r.getArg(n,"version"),s=r.getArg(n,"sources"),o=r.getArg(n,"names",[]),u=r.getArg(n,"sourceRoot",null),l=r.getArg(n,"sourcesContent",null),c=r.getArg(n,"mappings"),h=r.getArg(n,"file",null);if(i!=this._version)throw new Error("Unsupported version: "+i);u&&(u=r.normalize(u)),s=s.map(String).map(r.normalize).map((function(e){return u&&r.isAbsolute(u)&&r.isAbsolute(e)?r.relative(u,e):e})),this._names=a.fromArray(o.map(String),!0),this._sources=a.fromArray(s,!0),this._absoluteSources=this._sources.toArray().map((function(e){return r.computeSourceURL(u,e,t)})),this.sourceRoot=u,this.sourcesContent=l,this._mappings=c,this._sourceMapURL=t,this.file=h}function c(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function h(e,t){var n=e;"string"==typeof e&&(n=r.parseSourceMapInput(e));var i=r.getArg(n,"version"),s=r.getArg(n,"sections");if(i!=this._version)throw new Error("Unsupported version: "+i);this._sources=new a,this._names=new a;var o={line:-1,column:0};this._sections=s.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var n=r.getArg(e,"offset"),i=r.getArg(n,"line"),a=r.getArg(n,"column");if(i<o.line||i===o.line&&a<o.column)throw new Error("Section offsets must be ordered and non-overlapping.");return o=n,{generatedOffset:{generatedLine:i+1,generatedColumn:a+1},consumer:new u(r.getArg(e,"map"),t)}}))}u.fromSourceMap=function(e,t){return l.fromSourceMap(e,t)},u.prototype._version=3,u.prototype.__generatedMappings=null,Object.defineProperty(u.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),u.prototype.__originalMappings=null,Object.defineProperty(u.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),u.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},u.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},u.GENERATED_ORDER=1,u.ORIGINAL_ORDER=2,u.GREATEST_LOWER_BOUND=1,u.LEAST_UPPER_BOUND=2,u.prototype.eachMapping=function(e,t,n){var i,a=t||null;switch(n||u.GENERATED_ORDER){case u.GENERATED_ORDER:i=this._generatedMappings;break;case u.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var s=this.sourceRoot;i.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=r.computeSourceURL(s,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,a)},u.prototype.allGeneratedPositionsFor=function(e){var t=r.getArg(e,"line"),n={source:r.getArg(e,"source"),originalLine:t,originalColumn:r.getArg(e,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var a=[],s=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,i.LEAST_UPPER_BOUND);if(s>=0){var o=this._originalMappings[s];if(void 0===e.column)for(var u=o.originalLine;o&&o.originalLine===u;)a.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[++s];else for(var l=o.originalColumn;o&&o.originalLine===t&&o.originalColumn==l;)a.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[++s]}return a},t.SourceMapConsumer=u,l.prototype=Object.create(u.prototype),l.prototype.consumer=u,l.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=r.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},l.fromSourceMap=function(e,t){var n=Object.create(l.prototype),i=n._names=a.fromArray(e._names.toArray(),!0),s=n._sources=a.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map((function(e){return r.computeSourceURL(n.sourceRoot,e,t)}));for(var u=e._mappings.toArray().slice(),h=n.__generatedMappings=[],p=n.__originalMappings=[],f=0,d=u.length;f<d;f++){var m=u[f],y=new c;y.generatedLine=m.generatedLine,y.generatedColumn=m.generatedColumn,m.source&&(y.source=s.indexOf(m.source),y.originalLine=m.originalLine,y.originalColumn=m.originalColumn,m.name&&(y.name=i.indexOf(m.name)),p.push(y)),h.push(y)}return o(n.__originalMappings,r.compareByOriginalPositions),n},l.prototype._version=3,Object.defineProperty(l.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),l.prototype._parseMappings=function(e,t){for(var n,i,a,u,l,h=1,p=0,f=0,d=0,m=0,y=0,g=e.length,v=0,x={},b={},S=[],E=[];v<g;)if(";"===e.charAt(v))h++,v++,p=0;else if(","===e.charAt(v))v++;else{for((n=new c).generatedLine=h,u=v;u<g&&!this._charIsMappingSeparator(e,u);u++);if(a=x[i=e.slice(v,u)])v+=i.length;else{for(a=[];v<u;)s.decode(e,v,b),l=b.value,v=b.rest,a.push(l);if(2===a.length)throw new Error("Found a source, but no line and column");if(3===a.length)throw new Error("Found a source and line, but no column");x[i]=a}n.generatedColumn=p+a[0],p=n.generatedColumn,a.length>1&&(n.source=m+a[1],m+=a[1],n.originalLine=f+a[2],f=n.originalLine,n.originalLine+=1,n.originalColumn=d+a[3],d=n.originalColumn,a.length>4&&(n.name=y+a[4],y+=a[4])),E.push(n),"number"==typeof n.originalLine&&S.push(n)}o(E,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=E,o(S,r.compareByOriginalPositions),this.__originalMappings=S},l.prototype._findMapping=function(e,t,n,r,a,s){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return i.search(e,t,a,s)},l.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},l.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositionsDeflated,r.getArg(e,"bias",u.GREATEST_LOWER_BOUND));if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===t.generatedLine){var a=r.getArg(i,"source",null);null!==a&&(a=this._sources.at(a),a=r.computeSourceURL(this.sourceRoot,a,this._sourceMapURL));var s=r.getArg(i,"name",null);return null!==s&&(s=this._names.at(s)),{source:a,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}},l.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},l.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var i,a=e;if(null!=this.sourceRoot&&(a=r.relative(this.sourceRoot,a)),null!=this.sourceRoot&&(i=r.urlParse(this.sourceRoot))){var s=a.replace(/^file:\/\//,"");if("file"==i.scheme&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!i.path||"/"==i.path)&&this._sources.has("/"+a))return this.sourcesContent[this._sources.indexOf("/"+a)]}if(t)return null;throw new Error('"'+a+'" is not in the SourceMap.')},l.prototype.generatedPositionFor=function(e){var t=r.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:r.getArg(e,"line"),originalColumn:r.getArg(e,"column")},i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,r.getArg(e,"bias",u.GREATEST_LOWER_BOUND));if(i>=0){var a=this._originalMappings[i];if(a.source===n.source)return{line:r.getArg(a,"generatedLine",null),column:r.getArg(a,"generatedColumn",null),lastColumn:r.getArg(a,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},t.BasicSourceMapConsumer=l,h.prototype=Object.create(u.prototype),h.prototype.constructor=u,h.prototype._version=3,Object.defineProperty(h.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),h.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=i.search(t,this._sections,(function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn})),a=this._sections[n];return a?a.consumer.originalPositionFor({line:t.generatedLine-(a.generatedOffset.generatedLine-1),column:t.generatedColumn-(a.generatedOffset.generatedLine===t.generatedLine?a.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},h.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},h.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},h.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(r.getArg(e,"source"))){var i=n.consumer.generatedPositionFor(e);if(i)return{line:i.line+(n.generatedOffset.generatedLine-1),column:i.column+(n.generatedOffset.generatedLine===i.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},h.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var i=this._sections[n],a=i.consumer._generatedMappings,s=0;s<a.length;s++){var u=a[s],l=i.consumer._sources.at(u.source);l=r.computeSourceURL(i.consumer.sourceRoot,l,this._sourceMapURL),this._sources.add(l),l=this._sources.indexOf(l);var c=null;u.name&&(c=i.consumer._names.at(u.name),this._names.add(c),c=this._names.indexOf(c));var h={source:l,generatedLine:u.generatedLine+(i.generatedOffset.generatedLine-1),generatedColumn:u.generatedColumn+(i.generatedOffset.generatedLine===u.generatedLine?i.generatedOffset.generatedColumn-1:0),originalLine:u.originalLine,originalColumn:u.originalColumn,name:c};this.__generatedMappings.push(h),"number"==typeof h.originalLine&&this.__originalMappings.push(h)}o(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),o(this.__originalMappings,r.compareByOriginalPositions)},t.IndexedSourceMapConsumer=h},function(e,t){t.GREATEST_LOWER_BOUND=1,t.LEAST_UPPER_BOUND=2,t.search=function(e,n,r,i){if(0===n.length)return-1;var a=function e(n,r,i,a,s,o){var u=Math.floor((r-n)/2)+n,l=s(i,a[u],!0);return 0===l?u:l>0?r-u>1?e(u,r,i,a,s,o):o==t.LEAST_UPPER_BOUND?r<a.length?r:-1:u:u-n>1?e(n,u,i,a,s,o):o==t.LEAST_UPPER_BOUND?u:n<0?-1:n}(-1,n.length,e,n,r,i||t.GREATEST_LOWER_BOUND);if(a<0)return-1;for(;a-1>=0&&0===r(n[a],n[a-1],!0);)--a;return a}},function(e,t){function n(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function r(e,t,i,a){if(i<a){var s=i-1;n(e,(c=i,h=a,Math.round(c+Math.random()*(h-c))),a);for(var o=e[a],u=i;u<a;u++)t(e[u],o)<=0&&n(e,s+=1,u);n(e,s+1,u);var l=s+1;r(e,t,i,l-1),r(e,t,l+1,a)}var c,h}t.quickSort=function(e,t){r(e,t,0,e.length-1)}},function(e,t,n){var r=n(65).SourceMapGenerator,i=n(21),a=/(\r?\n)/,s="$$$isSourceNode$$$";function o(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[s]=!0,null!=r&&this.add(r)}o.fromStringWithSourceMap=function(e,t,n){var r=new o,s=e.split(a),u=0,l=function(){return e()+(e()||"");function e(){return u<s.length?s[u++]:void 0}},c=1,h=0,p=null;return t.eachMapping((function(e){if(null!==p){if(!(c<e.generatedLine)){var t=(n=s[u]||"").substr(0,e.generatedColumn-h);return s[u]=n.substr(e.generatedColumn-h),h=e.generatedColumn,f(p,t),void(p=e)}f(p,l()),c++,h=0}for(;c<e.generatedLine;)r.add(l()),c++;if(h<e.generatedColumn){var n=s[u]||"";r.add(n.substr(0,e.generatedColumn)),s[u]=n.substr(e.generatedColumn),h=e.generatedColumn}p=e}),this),u<s.length&&(p&&f(p,l()),r.add(s.splice(u).join(""))),t.sources.forEach((function(e){var a=t.sourceContentFor(e);null!=a&&(null!=n&&(e=i.join(n,e)),r.setSourceContent(e,a))})),r;function f(e,t){if(null===e||void 0===e.source)r.add(t);else{var a=n?i.join(n,e.source):e.source;r.add(new o(e.originalLine,e.originalColumn,a,t,e.name))}}},o.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e[s]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},o.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[s]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},o.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n])[s]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},o.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},o.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[s]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},o.prototype.setSourceContent=function(e,t){this.sourceContents[i.toSetString(e)]=t},o.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t][s]&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(i.fromSetString(r[t]),this.sourceContents[r[t]])},o.prototype.toString=function(){var e="";return this.walk((function(t){e+=t})),e},o.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new r(e),i=!1,a=null,s=null,o=null,u=null;return this.walk((function(e,r){t.code+=e,null!==r.source&&null!==r.line&&null!==r.column?(a===r.source&&s===r.line&&o===r.column&&u===r.name||n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name}),a=r.source,s=r.line,o=r.column,u=r.name,i=!0):i&&(n.addMapping({generated:{line:t.line,column:t.column}}),a=null,i=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(a=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name})):t.column++})),this.walkSourceContents((function(e,t){n.setSourceContent(e,t)})),{code:t.code,map:n}},t.SourceNode=o},function(e,t){t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n",t.homedir=function(){return"/"}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(17)),a=n(18),s=function(){function e(e,t,n){void 0===n&&(n=t),this.sourceLines=e,this.sourceLoc=t,this.targetLoc=n}return e.prototype.slice=function(t,n,r){void 0===r&&(r=t.lastPos());var s=this.sourceLines,o=this.sourceLoc,l=this.targetLoc;function c(e){var u=o[e],c=l[e],h=n;return"end"===e?h=r:i.default.strictEqual(e,"start"),function(e,t,n,r,s){var o=a.comparePos(r,s);if(0===o)return t;if(o<0){var u=e.skipSpaces(t)||e.lastPos(),l=n.skipSpaces(r)||n.lastPos(),c=s.line-l.line;for(u.line+=c,l.line+=c,c>0?(u.column=0,l.column=0):i.default.strictEqual(c,0);a.comparePos(l,s)<0&&n.nextPos(l,!0);)i.default.ok(e.nextPos(u,!0)),i.default.strictEqual(e.charAt(u),n.charAt(l))}else{u=e.skipSpaces(t,!0)||e.firstPos(),l=n.skipSpaces(r,!0)||n.firstPos(),c=s.line-l.line;for(u.line+=c,l.line+=c,c<0?(u.column=e.getLineLength(u.line),l.column=n.getLineLength(l.line)):i.default.strictEqual(c,0);a.comparePos(s,l)<0&&n.prevPos(l,!0);)i.default.ok(e.prevPos(u,!0)),i.default.strictEqual(e.charAt(u),n.charAt(l))}return u}(s,u,t,c,h)}if(a.comparePos(n,l.start)<=0)if(a.comparePos(l.end,r)<=0)l={start:u(l.start,n.line,n.column),end:u(l.end,n.line,n.column)};else{if(a.comparePos(r,l.start)<=0)return null;o={start:o.start,end:c("end")},l={start:u(l.start,n.line,n.column),end:u(r,n.line,n.column)}}else{if(a.comparePos(l.end,n)<=0)return null;a.comparePos(l.end,r)<=0?(o={start:c("start"),end:o.end},l={start:{line:1,column:0},end:u(l.end,n.line,n.column)}):(o={start:c("start"),end:c("end")},l={start:{line:1,column:0},end:u(r,n.line,n.column)})}return new e(this.sourceLines,o,l)},e.prototype.add=function(t,n){return new e(this.sourceLines,this.sourceLoc,{start:o(this.targetLoc.start,t,n),end:o(this.targetLoc.end,t,n)})},e.prototype.subtract=function(t,n){return new e(this.sourceLines,this.sourceLoc,{start:u(this.targetLoc.start,t,n),end:u(this.targetLoc.end,t,n)})},e.prototype.indent=function(t,n,r){if(void 0===n&&(n=!1),void 0===r&&(r=!1),0===t)return this;var i=this.targetLoc,a=i.start.line,s=i.end.line;if(n&&1===a&&1===s)return this;if(i={start:i.start,end:i.end},!n||a>1){var o=i.start.column+t;i.start={line:a,column:r?Math.max(0,o):o}}if(!n||s>1){var u=i.end.column+t;i.end={line:s,column:r?Math.max(0,u):u}}return new e(this.sourceLines,this.sourceLoc,i)},e}();function o(e,t,n){return{line:e.line+t-1,column:1===e.line?e.column+n:e.column}}function u(e,t,n){return{line:e.line-t+1,column:e.line===t?e.column-n:e.column}}t.default=s},function(e,t,n){"use strict";var r=Object,i=Object.defineProperty,a=Object.create;function s(e,t,n){if(i)try{i.call(r,e,t,{value:n})}catch(r){e[t]=n}else e[t]=n}function o(e){return e&&(s(e,"call",e.call),s(e,"apply",e.apply)),e}o(i),o(a);var u=o(Object.prototype.hasOwnProperty),l=o(Number.prototype.toString),c=o(String.prototype.slice),h=function(){};function p(e){return a?a.call(r,e):(h.prototype=e||null,new h)}var f=Math.random,d=p(null);function m(){do{var e=y(c.call(l.call(f(),36),2))}while(u.call(d,e));return d[e]=e}function y(e){var t={};return t[e]=!0,Object.keys(t)[0]}t.makeUniqueKey=m;var g=Object.getOwnPropertyNames;function v(e){return p(null)}Object.getOwnPropertyNames=function(e){for(var t=g(e),n=0,r=0,i=t.length;n<i;++n)u.call(d,t[n])||(n>r&&(t[r]=t[n]),++r);return t.length=r,t},t.makeAccessor=function(e){var t=m(),n=p(null);function r(r){return u.call(r,t)||function(r){var i;s(r,t,(function(t,a){if(t===n)return a?i=null:i||(i=e(r))}))}(r),r[t](n)}return e=e||v,r.forget=function(e){u.call(e,t)&&e[t](n,!0)},r}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(17)),s=n(69),o=n(27),u=n(38),l=n(138),c=i(n(16)),h=c.namedTypes,p=c.builtInTypes.string,f=c.builtInTypes.object,d=r(n(70)),m=i(n(18)),y=function e(t,n){a.default.ok(this instanceof e),p.assert(t),this.code=t,n&&(f.assert(n),this.map=n)},g=!1;y.prototype.toString=function(){return g||(console.warn("Deprecation warning: recast.print now returns an object with a .code property. You appear to be treating the object as a string, which might still work but is strongly discouraged."),g=!0),this.code};var v=new y("");function x(e,t,n,r){a.default.ok(e instanceof d.default);var i=e.getValue(),s=[],u=function(e,t,n){var r=e.getValue();if(!r)return o.fromString("");if("string"==typeof r)return o.fromString(r,t);h.Printable.assert(r);var i=[];switch(r.type){case"File":return e.call(n,"program");case"Program":return r.directives&&e.each((function(e){i.push(n(e),";\n")}),"directives"),r.interpreter&&i.push(e.call(n,"interpreter")),i.push(e.call((function(e){return b(e,t,n)}),"body")),o.concat(i);case"Noop":case"EmptyStatement":return o.fromString("");case"ExpressionStatement":return o.concat([e.call(n,"expression"),";"]);case"ParenthesizedExpression":return o.concat(["(",e.call(n,"expression"),")"]);case"BinaryExpression":case"LogicalExpression":case"AssignmentExpression":return o.fromString(" ").join([e.call(n,"left"),r.operator,e.call(n,"right")]);case"AssignmentPattern":return o.concat([e.call(n,"left")," = ",e.call(n,"right")]);case"MemberExpression":case"OptionalMemberExpression":i.push(e.call(n,"object"));var s=e.call(n,"property"),u="OptionalMemberExpression"===r.type&&r.optional;return r.computed?i.push(u?"?.[":"[",s,"]"):i.push(u?"?.":".",s),o.concat(i);case"MetaProperty":return o.concat([e.call(n,"meta"),".",e.call(n,"property")]);case"BindExpression":return r.object&&i.push(e.call(n,"object")),i.push("::",e.call(n,"callee")),o.concat(i);case"Path":return o.fromString(".").join(r.body);case"Identifier":return o.concat([o.fromString(r.name,t),r.optional?"?":"",e.call(n,"typeAnnotation")]);case"SpreadElement":case"SpreadElementPattern":case"RestProperty":case"SpreadProperty":case"SpreadPropertyPattern":case"ObjectTypeSpreadProperty":case"RestElement":return o.concat(["...",e.call(n,"argument"),e.call(n,"typeAnnotation")]);case"FunctionDeclaration":case"FunctionExpression":case"TSDeclareFunction":return r.declare&&i.push("declare "),r.async&&i.push("async "),i.push("function"),r.generator&&i.push("*"),r.id?i.push(" ",e.call(n,"id"),e.call(n,"typeParameters")):r.typeParameters&&i.push(e.call(n,"typeParameters")),i.push("(",D(e,t,n),")",e.call(n,"returnType")),r.body&&i.push(" ",e.call(n,"body")),o.concat(i);case"ArrowFunctionExpression":return r.async&&i.push("async "),r.typeParameters&&i.push(e.call(n,"typeParameters")),t.arrowParensAlways||1!==r.params.length||r.rest||"Identifier"!==r.params[0].type||r.params[0].typeAnnotation||r.returnType?i.push("(",D(e,t,n),")",e.call(n,"returnType")):i.push(e.call(n,"params",0)),i.push(" => ",e.call(n,"body")),o.concat(i);case"MethodDefinition":return S(e,t,n);case"YieldExpression":return i.push("yield"),r.delegate&&i.push("*"),r.argument&&i.push(" ",e.call(n,"argument")),o.concat(i);case"AwaitExpression":return i.push("await"),r.all&&i.push("*"),r.argument&&i.push(" ",e.call(n,"argument")),o.concat(i);case"ModuleDeclaration":return i.push("module",e.call(n,"id")),r.source?(a.default.ok(!r.body),i.push("from",e.call(n,"source"))):i.push(e.call(n,"body")),o.fromString(" ").join(i);case"ImportSpecifier":return r.importKind&&"value"!==r.importKind&&i.push(r.importKind+" "),r.imported?(i.push(e.call(n,"imported")),r.local&&r.local.name!==r.imported.name&&i.push(" as ",e.call(n,"local"))):r.id&&(i.push(e.call(n,"id")),r.name&&i.push(" as ",e.call(n,"name"))),o.concat(i);case"ExportSpecifier":return r.local?(i.push(e.call(n,"local")),r.exported&&r.exported.name!==r.local.name&&i.push(" as ",e.call(n,"exported"))):r.id&&(i.push(e.call(n,"id")),r.name&&i.push(" as ",e.call(n,"name"))),o.concat(i);case"ExportBatchSpecifier":return o.fromString("*");case"ImportNamespaceSpecifier":return i.push("* as "),r.local?i.push(e.call(n,"local")):r.id&&i.push(e.call(n,"id")),o.concat(i);case"ImportDefaultSpecifier":return r.local?e.call(n,"local"):e.call(n,"id");case"TSExportAssignment":return o.concat(["export = ",e.call(n,"expression")]);case"ExportDeclaration":case"ExportDefaultDeclaration":case"ExportNamedDeclaration":return w(e,t,n);case"ExportAllDeclaration":return i.push("export *"),r.exported&&i.push(" as ",e.call(n,"exported")),i.push(" from ",e.call(n,"source"),";"),o.concat(i);case"TSNamespaceExportDeclaration":return i.push("export as namespace ",e.call(n,"id")),N(o.concat(i));case"ExportNamespaceSpecifier":return o.concat(["* as ",e.call(n,"exported")]);case"ExportDefaultSpecifier":return e.call(n,"exported");case"Import":return o.fromString("import",t);case"ImportDeclaration":if(i.push("import "),r.importKind&&"value"!==r.importKind&&i.push(r.importKind+" "),r.specifiers&&r.specifiers.length>0){var l=[],c=[];if(e.each((function(e){var t=e.getValue();"ImportSpecifier"===t.type?c.push(n(e)):"ImportDefaultSpecifier"!==t.type&&"ImportNamespaceSpecifier"!==t.type||l.push(n(e))}),"specifiers"),l.forEach((function(e,t){t>0&&i.push(", "),i.push(e)})),c.length>0){var p=o.fromString(", ").join(c);p.getLineLength(1)>t.wrapColumn&&(p=o.concat([o.fromString(",\n").join(c).indent(t.tabWidth),","])),l.length>0&&i.push(", "),p.length>1?i.push("{\n",p,"\n}"):t.objectCurlySpacing?i.push("{ ",p," }"):i.push("{",p,"}")}i.push(" from ")}return i.push(e.call(n,"source"),";"),o.concat(i);case"BlockStatement":var f=e.call((function(e){return b(e,t,n)}),"body");return!f.isEmpty()||r.directives&&0!==r.directives.length?(i.push("{\n"),r.directives&&e.each((function(e){i.push(N(n(e).indent(t.tabWidth)),r.directives.length>1||!f.isEmpty()?"\n":"")}),"directives"),i.push(f.indent(t.tabWidth)),i.push("\n}"),o.concat(i)):o.fromString("{}");case"ReturnStatement":if(i.push("return"),r.argument){var d=e.call(n,"argument");d.startsWithComment()||d.length>1&&h.JSXElement&&h.JSXElement.check(r.argument)?i.push(" (\n",d.indent(t.tabWidth),"\n)"):i.push(" ",d)}return i.push(";"),o.concat(i);case"CallExpression":case"OptionalCallExpression":return i.push(e.call(n,"callee")),r.typeParameters&&i.push(e.call(n,"typeParameters")),r.typeArguments&&i.push(e.call(n,"typeArguments")),"OptionalCallExpression"===r.type&&"OptionalMemberExpression"!==r.callee.type&&i.push("?."),i.push(E(e,t,n)),o.concat(i);case"ObjectExpression":case"ObjectPattern":case"ObjectTypeAnnotation":var y=!1,g="ObjectTypeAnnotation"===r.type,v=t.flowObjectCommas?",":g?";":",",x=[];g&&(x.push("indexers","callProperties"),null!=r.internalSlots&&x.push("internalSlots")),x.push("properties");var k=0;x.forEach((function(e){k+=r[e].length}));var P=g&&1===k||0===k,B=r.exact?"{|":"{",_=r.exact?"|}":"}";i.push(P?B:B+"\n");var I=i.length-1,O=0;if(x.forEach((function(r){e.each((function(e){var r=n(e);P||(r=r.indent(t.tabWidth));var a=!g&&r.length>1;a&&y&&i.push("\n"),i.push(r),O<k-1?(i.push(v+(a?"\n\n":"\n")),y=!a):1!==k&&g?i.push(v):!P&&m.isTrailingCommaEnabled(t,"objects")&&i.push(v),O++}),r)})),r.inexact){var j=o.fromString("...",t);P?(k>0&&i.push(v," "),i.push(j)):i.push("\n",j.indent(t.tabWidth))}return i.push(P?_:"\n"+_),0!==O&&P&&t.objectCurlySpacing&&(i[I]=B+" ",i[i.length-1]=" "+_),r.typeAnnotation&&i.push(e.call(n,"typeAnnotation")),o.concat(i);case"PropertyPattern":return o.concat([e.call(n,"key"),": ",e.call(n,"pattern")]);case"ObjectProperty":case"Property":if(r.method||"get"===r.kind||"set"===r.kind)return S(e,t,n);if(r.shorthand&&"AssignmentPattern"===r.value.type)return e.call(n,"value");var L=e.call(n,"key");return r.computed?i.push("[",L,"]"):i.push(L),r.shorthand||i.push(": ",e.call(n,"value")),o.concat(i);case"ClassMethod":case"ObjectMethod":case"ClassPrivateMethod":case"TSDeclareMethod":return S(e,t,n);case"PrivateName":return o.concat(["#",e.call(n,"id")]);case"Decorator":return o.concat(["@",e.call(n,"expression")]);case"ArrayExpression":case"ArrayPattern":k=r.elements.length;var q=e.map(n,"elements"),R=o.fromString(", ").join(q);return(P=R.getLineLength(1)<=t.wrapColumn)?t.arrayBracketSpacing?i.push("[ "):i.push("["):i.push("[\n"),e.each((function(e){var n=e.getName();if(e.getValue()){var r=q[n];P?n>0&&i.push(" "):r=r.indent(t.tabWidth),i.push(r),(n<k-1||!P&&m.isTrailingCommaEnabled(t,"arrays"))&&i.push(","),P||i.push("\n")}else i.push(",")}),"elements"),P&&t.arrayBracketSpacing?i.push(" ]"):i.push("]"),r.typeAnnotation&&i.push(e.call(n,"typeAnnotation")),o.concat(i);case"SequenceExpression":return o.fromString(", ").join(e.map(n,"expressions"));case"ThisExpression":return o.fromString("this");case"Super":return o.fromString("super");case"NullLiteral":return o.fromString("null");case"RegExpLiteral":return o.fromString(r.extra.raw);case"BigIntLiteral":return o.fromString(r.value+"n");case"NumericLiteral":return r.extra&&"string"==typeof r.extra.raw&&Number(r.extra.raw)===r.value?o.fromString(r.extra.raw,t):o.fromString(r.value,t);case"BooleanLiteral":case"StringLiteral":case"Literal":return"number"==typeof r.value&&"string"==typeof r.raw&&Number(r.raw)===r.value?o.fromString(r.raw,t):"string"!=typeof r.value?o.fromString(r.value,t):o.fromString(M(r.value,t),t);case"Directive":return e.call(n,"value");case"DirectiveLiteral":return o.fromString(M(r.value,t));case"InterpreterDirective":return o.fromString("#!"+r.value+"\n",t);case"ModuleSpecifier":if(r.local)throw new Error("The ESTree ModuleSpecifier type should be abstract");return o.fromString(M(r.value,t),t);case"UnaryExpression":return i.push(r.operator),/[a-z]$/.test(r.operator)&&i.push(" "),i.push(e.call(n,"argument")),o.concat(i);case"UpdateExpression":return i.push(e.call(n,"argument"),r.operator),r.prefix&&i.reverse(),o.concat(i);case"ConditionalExpression":return o.concat([e.call(n,"test")," ? ",e.call(n,"consequent")," : ",e.call(n,"alternate")]);case"NewExpression":return i.push("new ",e.call(n,"callee")),r.typeParameters&&i.push(e.call(n,"typeParameters")),r.typeArguments&&i.push(e.call(n,"typeArguments")),r.arguments&&i.push(E(e,t,n)),o.concat(i);case"VariableDeclaration":r.declare&&i.push("declare "),i.push(r.kind," ");var X=0;q=e.map((function(e){var t=n(e);return X=Math.max(t.length,X),t}),"declarations");1===X?i.push(o.fromString(", ").join(q)):q.length>1?i.push(o.fromString(",\n").join(q).indentTail(r.kind.length+1)):i.push(q[0]);var z=e.getParentNode();return h.ForStatement.check(z)||h.ForInStatement.check(z)||h.ForOfStatement&&h.ForOfStatement.check(z)||h.ForAwaitStatement&&h.ForAwaitStatement.check(z)||i.push(";"),o.concat(i);case"VariableDeclarator":return r.init?o.fromString(" = ").join([e.call(n,"id"),e.call(n,"init")]):e.call(n,"id");case"WithStatement":return o.concat(["with (",e.call(n,"object"),") ",e.call(n,"body")]);case"IfStatement":var J=T(e.call(n,"consequent"),t);return i.push("if (",e.call(n,"test"),")",J),r.alternate&&i.push(F(J)?" else":"\nelse",T(e.call(n,"alternate"),t)),o.concat(i);case"ForStatement":var U=e.call(n,"init"),V=U.length>1?";\n":"; ",W=o.fromString(V).join([U,e.call(n,"test"),e.call(n,"update")]).indentTail("for (".length),K=o.concat(["for (",W,")"]),$=T(e.call(n,"body"),t);return i.push(K),K.length>1&&(i.push("\n"),$=$.trimLeft()),i.push($),o.concat(i);case"WhileStatement":return o.concat(["while (",e.call(n,"test"),")",T(e.call(n,"body"),t)]);case"ForInStatement":return o.concat([r.each?"for each (":"for (",e.call(n,"left")," in ",e.call(n,"right"),")",T(e.call(n,"body"),t)]);case"ForOfStatement":case"ForAwaitStatement":return i.push("for "),(r.await||"ForAwaitStatement"===r.type)&&i.push("await "),i.push("(",e.call(n,"left")," of ",e.call(n,"right"),")",T(e.call(n,"body"),t)),o.concat(i);case"DoWhileStatement":var H=o.concat(["do",T(e.call(n,"body"),t)]);return i.push(H),F(H)?i.push(" while"):i.push("\nwhile"),i.push(" (",e.call(n,"test"),");"),o.concat(i);case"DoExpression":var G=e.call((function(e){return b(e,t,n)}),"body");return o.concat(["do {\n",G.indent(t.tabWidth),"\n}"]);case"BreakStatement":return i.push("break"),r.label&&i.push(" ",e.call(n,"label")),i.push(";"),o.concat(i);case"ContinueStatement":return i.push("continue"),r.label&&i.push(" ",e.call(n,"label")),i.push(";"),o.concat(i);case"LabeledStatement":return o.concat([e.call(n,"label"),":\n",e.call(n,"body")]);case"TryStatement":return i.push("try ",e.call(n,"block")),r.handler?i.push(" ",e.call(n,"handler")):r.handlers&&e.each((function(e){i.push(" ",n(e))}),"handlers"),r.finalizer&&i.push(" finally ",e.call(n,"finalizer")),o.concat(i);case"CatchClause":return i.push("catch "),r.param&&i.push("(",e.call(n,"param")),r.guard&&i.push(" if ",e.call(n,"guard")),r.param&&i.push(") "),i.push(e.call(n,"body")),o.concat(i);case"ThrowStatement":return o.concat(["throw ",e.call(n,"argument"),";"]);case"SwitchStatement":return o.concat(["switch (",e.call(n,"discriminant"),") {\n",o.fromString("\n").join(e.map(n,"cases")),"\n}"]);case"SwitchCase":return r.test?i.push("case ",e.call(n,"test"),":"):i.push("default:"),r.consequent.length>0&&i.push("\n",e.call((function(e){return b(e,t,n)}),"consequent").indent(t.tabWidth)),o.concat(i);case"DebuggerStatement":return o.fromString("debugger;");case"JSXAttribute":return i.push(e.call(n,"name")),r.value&&i.push("=",e.call(n,"value")),o.concat(i);case"JSXIdentifier":return o.fromString(r.name,t);case"JSXNamespacedName":return o.fromString(":").join([e.call(n,"namespace"),e.call(n,"name")]);case"JSXMemberExpression":return o.fromString(".").join([e.call(n,"object"),e.call(n,"property")]);case"JSXSpreadAttribute":return o.concat(["{...",e.call(n,"argument"),"}"]);case"JSXSpreadChild":return o.concat(["{...",e.call(n,"expression"),"}"]);case"JSXExpressionContainer":return o.concat(["{",e.call(n,"expression"),"}"]);case"JSXElement":case"JSXFragment":var Y="opening"+("JSXElement"===r.type?"Element":"Fragment"),Q="closing"+("JSXElement"===r.type?"Element":"Fragment"),Z=e.call(n,Y);if(r[Y].selfClosing)return a.default.ok(!r[Q],"unexpected "+Q+" element in self-closing "+r.type),Z;var ee=o.concat(e.map((function(e){var t=e.getValue();if(h.Literal.check(t)&&"string"==typeof t.value){if(/\S/.test(t.value))return t.value.replace(/^\s+|\s+$/g,"");if(/\n/.test(t.value))return"\n"}return n(e)}),"children")).indentTail(t.tabWidth),te=e.call(n,Q);return o.concat([Z,ee,te]);case"JSXOpeningElement":i.push("<",e.call(n,"name"));var ne=[];e.each((function(e){ne.push(" ",n(e))}),"attributes");var re=o.concat(ne);return(re.length>1||re.getLineLength(1)>t.wrapColumn)&&(ne.forEach((function(e,t){" "===e&&(a.default.strictEqual(t%2,0),ne[t]="\n")})),re=o.concat(ne).indentTail(t.tabWidth)),i.push(re,r.selfClosing?" />":">"),o.concat(i);case"JSXClosingElement":return o.concat(["</",e.call(n,"name"),">"]);case"JSXOpeningFragment":return o.fromString("<>");case"JSXClosingFragment":return o.fromString("</>");case"JSXText":return o.fromString(r.value,t);case"JSXEmptyExpression":return o.fromString("");case"TypeAnnotatedIdentifier":return o.concat([e.call(n,"annotation")," ",e.call(n,"identifier")]);case"ClassBody":return 0===r.body.length?o.fromString("{}"):o.concat(["{\n",e.call((function(e){return b(e,t,n)}),"body").indent(t.tabWidth),"\n}"]);case"ClassPropertyDefinition":return i.push("static ",e.call(n,"definition")),h.MethodDefinition.check(r.definition)||i.push(";"),o.concat(i);case"ClassProperty":var ie=r.accessibility||r.access;"string"==typeof ie&&i.push(ie," "),r.static&&i.push("static "),r.abstract&&i.push("abstract "),r.readonly&&i.push("readonly ");L=e.call(n,"key");return r.computed&&(L=o.concat(["[",L,"]"])),r.variance&&(L=o.concat([C(e,n),L])),i.push(L),r.optional&&i.push("?"),r.typeAnnotation&&i.push(e.call(n,"typeAnnotation")),r.value&&i.push(" = ",e.call(n,"value")),i.push(";"),o.concat(i);case"ClassPrivateProperty":return r.static&&i.push("static "),i.push(e.call(n,"key")),r.typeAnnotation&&i.push(e.call(n,"typeAnnotation")),r.value&&i.push(" = ",e.call(n,"value")),i.push(";"),o.concat(i);case"ClassDeclaration":case"ClassExpression":return r.declare&&i.push("declare "),r.abstract&&i.push("abstract "),i.push("class"),r.id&&i.push(" ",e.call(n,"id")),r.typeParameters&&i.push(e.call(n,"typeParameters")),r.superClass&&i.push(" extends ",e.call(n,"superClass"),e.call(n,"superTypeParameters")),r.implements&&r.implements.length>0&&i.push(" implements ",o.fromString(", ").join(e.map(n,"implements"))),i.push(" ",e.call(n,"body")),o.concat(i);case"TemplateElement":return o.fromString(r.value.raw,t).lockIndentTail();case"TemplateLiteral":var ae=e.map(n,"expressions");return i.push("`"),e.each((function(e){var t=e.getName();i.push(n(e)),t<ae.length&&i.push("${",ae[t],"}")}),"quasis"),i.push("`"),o.concat(i).lockIndentTail();case"TaggedTemplateExpression":return o.concat([e.call(n,"tag"),e.call(n,"quasi")]);case"Node":case"Printable":case"SourceLocation":case"Position":case"Statement":case"Function":case"Pattern":case"Expression":case"Declaration":case"Specifier":case"NamedSpecifier":case"Comment":case"Flow":case"FlowType":case"FlowPredicate":case"MemberTypeAnnotation":case"Type":case"TSHasOptionalTypeParameterInstantiation":case"TSHasOptionalTypeParameters":case"TSHasOptionalTypeAnnotation":throw new Error("unprintable type: "+JSON.stringify(r.type));case"CommentBlock":case"Block":return o.concat(["/*",o.fromString(r.value,t),"*/"]);case"CommentLine":case"Line":return o.concat(["//",o.fromString(r.value,t)]);case"TypeAnnotation":return r.typeAnnotation?("FunctionTypeAnnotation"!==r.typeAnnotation.type&&i.push(": "),i.push(e.call(n,"typeAnnotation")),o.concat(i)):o.fromString("");case"ExistentialTypeParam":case"ExistsTypeAnnotation":return o.fromString("*",t);case"EmptyTypeAnnotation":return o.fromString("empty",t);case"AnyTypeAnnotation":return o.fromString("any",t);case"MixedTypeAnnotation":return o.fromString("mixed",t);case"ArrayTypeAnnotation":return o.concat([e.call(n,"elementType"),"[]"]);case"TupleTypeAnnotation":q=e.map(n,"types"),R=o.fromString(", ").join(q);return(P=R.getLineLength(1)<=t.wrapColumn)?t.arrayBracketSpacing?i.push("[ "):i.push("["):i.push("[\n"),e.each((function(e){var n=e.getName();if(e.getValue()){var a=q[n];P?n>0&&i.push(" "):a=a.indent(t.tabWidth),i.push(a),(n<r.types.length-1||!P&&m.isTrailingCommaEnabled(t,"arrays"))&&i.push(","),P||i.push("\n")}else i.push(",")}),"types"),P&&t.arrayBracketSpacing?i.push(" ]"):i.push("]"),o.concat(i);case"BooleanTypeAnnotation":return o.fromString("boolean",t);case"BooleanLiteralTypeAnnotation":return a.default.strictEqual(typeof r.value,"boolean"),o.fromString(""+r.value,t);case"InterfaceTypeAnnotation":return i.push("interface"),r.extends&&r.extends.length>0&&i.push(" extends ",o.fromString(", ").join(e.map(n,"extends"))),i.push(" ",e.call(n,"body")),o.concat(i);case"DeclareClass":return A(e,["class ",e.call(n,"id")," ",e.call(n,"body")]);case"DeclareFunction":return A(e,["function ",e.call(n,"id"),";"]);case"DeclareModule":return A(e,["module ",e.call(n,"id")," ",e.call(n,"body")]);case"DeclareModuleExports":return A(e,["module.exports",e.call(n,"typeAnnotation")]);case"DeclareVariable":return A(e,["var ",e.call(n,"id"),";"]);case"DeclareExportDeclaration":case"DeclareExportAllDeclaration":return o.concat(["declare ",w(e,t,n)]);case"InferredPredicate":return o.fromString("%checks",t);case"DeclaredPredicate":return o.concat(["%checks(",e.call(n,"value"),")"]);case"FunctionTypeAnnotation":var se=e.getParentNode(0),oe=!(h.ObjectTypeCallProperty.check(se)||h.ObjectTypeInternalSlot.check(se)&&se.method||h.DeclareFunction.check(e.getParentNode(2)));return oe&&!h.FunctionTypeParam.check(se)&&i.push(": "),i.push("(",D(e,t,n),")"),r.returnType&&i.push(oe?" => ":": ",e.call(n,"returnType")),o.concat(i);case"FunctionTypeParam":return o.concat([e.call(n,"name"),r.optional?"?":"",": ",e.call(n,"typeAnnotation")]);case"GenericTypeAnnotation":return o.concat([e.call(n,"id"),e.call(n,"typeParameters")]);case"DeclareInterface":i.push("declare ");case"InterfaceDeclaration":case"TSInterfaceDeclaration":return r.declare&&i.push("declare "),i.push("interface ",e.call(n,"id"),e.call(n,"typeParameters")," "),r.extends&&r.extends.length>0&&i.push("extends ",o.fromString(", ").join(e.map(n,"extends"))," "),r.body&&i.push(e.call(n,"body")),o.concat(i);case"ClassImplements":case"InterfaceExtends":return o.concat([e.call(n,"id"),e.call(n,"typeParameters")]);case"IntersectionTypeAnnotation":return o.fromString(" & ").join(e.map(n,"types"));case"NullableTypeAnnotation":return o.concat(["?",e.call(n,"typeAnnotation")]);case"NullLiteralTypeAnnotation":return o.fromString("null",t);case"ThisTypeAnnotation":return o.fromString("this",t);case"NumberTypeAnnotation":return o.fromString("number",t);case"ObjectTypeCallProperty":return e.call(n,"value");case"ObjectTypeIndexer":return o.concat([C(e,n),"[",e.call(n,"id"),": ",e.call(n,"key"),"]: ",e.call(n,"value")]);case"ObjectTypeProperty":return o.concat([C(e,n),e.call(n,"key"),r.optional?"?":"",": ",e.call(n,"value")]);case"ObjectTypeInternalSlot":return o.concat([r.static?"static ":"","[[",e.call(n,"id"),"]]",r.optional?"?":"","FunctionTypeAnnotation"!==r.value.type?": ":"",e.call(n,"value")]);case"QualifiedTypeIdentifier":return o.concat([e.call(n,"qualification"),".",e.call(n,"id")]);case"StringLiteralTypeAnnotation":return o.fromString(M(r.value,t),t);case"NumberLiteralTypeAnnotation":case"NumericLiteralTypeAnnotation":return a.default.strictEqual(typeof r.value,"number"),o.fromString(JSON.stringify(r.value),t);case"StringTypeAnnotation":return o.fromString("string",t);case"DeclareTypeAlias":i.push("declare ");case"TypeAlias":return o.concat(["type ",e.call(n,"id"),e.call(n,"typeParameters")," = ",e.call(n,"right"),";"]);case"DeclareOpaqueType":i.push("declare ");case"OpaqueType":return i.push("opaque type ",e.call(n,"id"),e.call(n,"typeParameters")),r.supertype&&i.push(": ",e.call(n,"supertype")),r.impltype&&i.push(" = ",e.call(n,"impltype")),i.push(";"),o.concat(i);case"TypeCastExpression":return o.concat(["(",e.call(n,"expression"),e.call(n,"typeAnnotation"),")"]);case"TypeParameterDeclaration":case"TypeParameterInstantiation":return o.concat(["<",o.fromString(", ").join(e.map(n,"params")),">"]);case"Variance":return"plus"===r.kind?o.fromString("+"):"minus"===r.kind?o.fromString("-"):o.fromString("");case"TypeParameter":return r.variance&&i.push(C(e,n)),i.push(e.call(n,"name")),r.bound&&i.push(e.call(n,"bound")),r.default&&i.push("=",e.call(n,"default")),o.concat(i);case"TypeofTypeAnnotation":return o.concat([o.fromString("typeof ",t),e.call(n,"argument")]);case"UnionTypeAnnotation":return o.fromString(" | ").join(e.map(n,"types"));case"VoidTypeAnnotation":return o.fromString("void",t);case"NullTypeAnnotation":return o.fromString("null",t);case"TSType":throw new Error("unprintable type: "+JSON.stringify(r.type));case"TSNumberKeyword":return o.fromString("number",t);case"TSBigIntKeyword":return o.fromString("bigint",t);case"TSObjectKeyword":return o.fromString("object",t);case"TSBooleanKeyword":return o.fromString("boolean",t);case"TSStringKeyword":return o.fromString("string",t);case"TSSymbolKeyword":return o.fromString("symbol",t);case"TSAnyKeyword":return o.fromString("any",t);case"TSVoidKeyword":return o.fromString("void",t);case"TSThisType":return o.fromString("this",t);case"TSNullKeyword":return o.fromString("null",t);case"TSUndefinedKeyword":return o.fromString("undefined",t);case"TSUnknownKeyword":return o.fromString("unknown",t);case"TSNeverKeyword":return o.fromString("never",t);case"TSArrayType":return o.concat([e.call(n,"elementType"),"[]"]);case"TSLiteralType":return e.call(n,"literal");case"TSUnionType":return o.fromString(" | ").join(e.map(n,"types"));case"TSIntersectionType":return o.fromString(" & ").join(e.map(n,"types"));case"TSConditionalType":return i.push(e.call(n,"checkType")," extends ",e.call(n,"extendsType")," ? ",e.call(n,"trueType")," : ",e.call(n,"falseType")),o.concat(i);case"TSInferType":return i.push("infer ",e.call(n,"typeParameter")),o.concat(i);case"TSParenthesizedType":return o.concat(["(",e.call(n,"typeAnnotation"),")"]);case"TSFunctionType":return o.concat([e.call(n,"typeParameters"),"(",D(e,t,n),")",e.call(n,"typeAnnotation")]);case"TSConstructorType":return o.concat(["new ",e.call(n,"typeParameters"),"(",D(e,t,n),")",e.call(n,"typeAnnotation")]);case"TSMappedType":return i.push(r.readonly?"readonly ":"","[",e.call(n,"typeParameter"),"]",r.optional?"?":""),r.typeAnnotation&&i.push(": ",e.call(n,"typeAnnotation"),";"),o.concat(["{\n",o.concat(i).indent(t.tabWidth),"\n}"]);case"TSTupleType":return o.concat(["[",o.fromString(", ").join(e.map(n,"elementTypes")),"]"]);case"TSRestType":return o.concat(["...",e.call(n,"typeAnnotation"),"[]"]);case"TSOptionalType":return o.concat([e.call(n,"typeAnnotation"),"?"]);case"TSIndexedAccessType":return o.concat([e.call(n,"objectType"),"[",e.call(n,"indexType"),"]"]);case"TSTypeOperator":return o.concat([e.call(n,"operator")," ",e.call(n,"typeAnnotation")]);case"TSTypeLiteral":var ue=o.fromString(",\n").join(e.map(n,"members"));return ue.isEmpty()?o.fromString("{}",t):(i.push("{\n",ue.indent(t.tabWidth),"\n}"),o.concat(i));case"TSEnumMember":return i.push(e.call(n,"id")),r.initializer&&i.push(" = ",e.call(n,"initializer")),o.concat(i);case"TSTypeQuery":return o.concat(["typeof ",e.call(n,"exprName")]);case"TSParameterProperty":return r.accessibility&&i.push(r.accessibility," "),r.export&&i.push("export "),r.static&&i.push("static "),r.readonly&&i.push("readonly "),i.push(e.call(n,"parameter")),o.concat(i);case"TSTypeReference":return o.concat([e.call(n,"typeName"),e.call(n,"typeParameters")]);case"TSQualifiedName":return o.concat([e.call(n,"left"),".",e.call(n,"right")]);case"TSAsExpression":return(he=r.extra&&!0===r.extra.parenthesized)&&i.push("("),i.push(e.call(n,"expression"),o.fromString(" as "),e.call(n,"typeAnnotation")),he&&i.push(")"),o.concat(i);case"TSNonNullExpression":return o.concat([e.call(n,"expression"),"!"]);case"TSTypeAnnotation":se=e.getParentNode(0);var le=": ";return(h.TSFunctionType.check(se)||h.TSConstructorType.check(se))&&(le=" => "),h.TSTypePredicate.check(se)&&(le=" is "),o.concat([le,e.call(n,"typeAnnotation")]);case"TSIndexSignature":return o.concat([r.readonly?"readonly ":"","[",e.map(n,"parameters"),"]",e.call(n,"typeAnnotation")]);case"TSPropertySignature":return i.push(C(e,n),r.readonly?"readonly ":""),r.computed?i.push("[",e.call(n,"key"),"]"):i.push(e.call(n,"key")),i.push(r.optional?"?":"",e.call(n,"typeAnnotation")),o.concat(i);case"TSMethodSignature":return r.computed?i.push("[",e.call(n,"key"),"]"):i.push(e.call(n,"key")),r.optional&&i.push("?"),i.push(e.call(n,"typeParameters"),"(",D(e,t,n),")",e.call(n,"typeAnnotation")),o.concat(i);case"TSTypePredicate":return o.concat([e.call(n,"parameterName"),e.call(n,"typeAnnotation")]);case"TSCallSignatureDeclaration":return o.concat([e.call(n,"typeParameters"),"(",D(e,t,n),")",e.call(n,"typeAnnotation")]);case"TSConstructSignatureDeclaration":return r.typeParameters?i.push("new",e.call(n,"typeParameters")):i.push("new "),i.push("(",D(e,t,n),")",e.call(n,"typeAnnotation")),o.concat(i);case"TSTypeAliasDeclaration":return o.concat([r.declare?"declare ":"","type ",e.call(n,"id"),e.call(n,"typeParameters")," = ",e.call(n,"typeAnnotation"),";"]);case"TSTypeParameter":i.push(e.call(n,"name"));se=e.getParentNode(0);var ce=h.TSMappedType.check(se);return r.constraint&&i.push(ce?" in ":" extends ",e.call(n,"constraint")),r.default&&i.push(" = ",e.call(n,"default")),o.concat(i);case"TSTypeAssertion":var he;return(he=r.extra&&!0===r.extra.parenthesized)&&i.push("("),i.push("<",e.call(n,"typeAnnotation"),"> ",e.call(n,"expression")),he&&i.push(")"),o.concat(i);case"TSTypeParameterDeclaration":case"TSTypeParameterInstantiation":return o.concat(["<",o.fromString(", ").join(e.map(n,"params")),">"]);case"TSEnumDeclaration":i.push(r.declare?"declare ":"",r.const?"const ":"","enum ",e.call(n,"id"));var pe=o.fromString(",\n").join(e.map(n,"members"));return pe.isEmpty()?i.push(" {}"):i.push(" {\n",pe.indent(t.tabWidth),"\n}"),o.concat(i);case"TSExpressionWithTypeArguments":return o.concat([e.call(n,"expression"),e.call(n,"typeParameters")]);case"TSInterfaceBody":var fe=o.fromString(";\n").join(e.map(n,"body"));return fe.isEmpty()?o.fromString("{}",t):o.concat(["{\n",fe.indent(t.tabWidth),";","\n}"]);case"TSImportType":return i.push("import(",e.call(n,"argument"),")"),r.qualifier&&i.push(".",e.call(n,"qualifier")),r.typeParameters&&i.push(e.call(n,"typeParameters")),o.concat(i);case"TSImportEqualsDeclaration":return r.isExport&&i.push("export "),i.push("import ",e.call(n,"id")," = ",e.call(n,"moduleReference")),N(o.concat(i));case"TSExternalModuleReference":return o.concat(["require(",e.call(n,"expression"),")"]);case"TSModuleDeclaration":if("TSModuleDeclaration"===e.getParentNode().type)i.push(".");else if(r.declare&&i.push("declare "),!r.global)if("StringLiteral"===r.id.type||"Literal"===r.id.type&&"string"==typeof r.id.value)i.push("module ");else if(r.loc&&r.loc.lines&&r.id.loc){r.loc.lines.sliceString(r.loc.start,r.id.loc.start).indexOf("module")>=0?i.push("module "):i.push("namespace ")}else i.push("namespace ");if(i.push(e.call(n,"id")),r.body&&"TSModuleDeclaration"===r.body.type)i.push(e.call(n,"body"));else if(r.body){var de=e.call(n,"body");de.isEmpty()?i.push(" {}"):i.push(" {\n",de.indent(t.tabWidth),"\n}")}return o.concat(i);case"TSModuleBlock":return e.call((function(e){return b(e,t,n)}),"body");case"ClassHeritage":case"ComprehensionBlock":case"ComprehensionExpression":case"Glob":case"GeneratorExpression":case"LetStatement":case"LetExpression":case"GraphExpression":case"GraphIndexExpression":case"XMLDefaultDeclaration":case"XMLAnyName":case"XMLQualifiedIdentifier":case"XMLFunctionQualifiedIdentifier":case"XMLAttributeSelector":case"XMLFilterExpression":case"XML":case"XMLElement":case"XMLList":case"XMLEscape":case"XMLText":case"XMLStartTag":case"XMLEndTag":case"XMLPointTag":case"XMLName":case"XMLAttribute":case"XMLCdata":case"XMLComment":case"XMLProcessingInstruction":default:throw new Error("unknown type: "+JSON.stringify(r.type))}}(e,t,r);if(!i||u.isEmpty())return u;var l=!1,c=function(e,t){var n=[],r=e.getValue();r.decorators&&r.decorators.length>0&&!m.getParentExportDeclaration(e)?e.each((function(e){n.push(t(e),"\n")}),"decorators"):m.isExportDeclaration(r)&&r.declaration&&r.declaration.decorators&&e.each((function(e){n.push(t(e),"\n")}),"declaration","decorators");return o.concat(n)}(e,r);return c.isEmpty()?n.avoidRootParens||(l=e.needsParens()):s.push(c),l&&s.unshift("("),s.push(u),l&&s.push(")"),o.concat(s)}function b(e,t,n){var r=[],i=!1,s=!1;e.each((function(e){var t=e.getValue();t&&("EmptyStatement"!==t.type||t.comments&&t.comments.length>0)&&(h.Comment.check(t)?i=!0:h.Statement.check(t)?s=!0:p.assert(t),r.push({node:t,printed:n(e)}))})),i&&a.default.strictEqual(s,!1,"Comments may appear as statements in otherwise empty statement lists, but may not coexist with non-Comment nodes.");var u=null,l=r.length,c=[];return r.forEach((function(e,n){var r,i,a=e.printed,s=e.node,h=a.length>1,p=n>0,f=n<l-1,d=s&&s.loc&&s.loc.lines,y=d&&t.reuseWhitespace&&m.getTrueLoc(s,d);if(p)if(y){var g=d.skipSpaces(y.start,!0),v=g?g.line:1,x=y.start.line-v;r=Array(x+1).join("\n")}else r=h?"\n\n":"\n";else r="";if(f)if(y){var b=d.skipSpaces(y.end),S=(b?b.line:d.length)-y.end.line;i=Array(S+1).join("\n")}else i=h?"\n\n":"\n";else i="";c.push(function(e,t){if(!e&&!t)return o.fromString("");if(!e)return o.fromString(t);if(!t)return o.fromString(e);var n=o.fromString(e),r=o.fromString(t);if(r.length>n.length)return r;return n}(u,r),a),f?u=i:i&&c.push(i)})),o.concat(c)}function S(e,t,n){var r=e.getNode(),i=r.kind,a=[],s=r.value;h.FunctionExpression.check(s)||(s=r);var u=r.accessibility||r.access;"string"==typeof u&&a.push(u," "),r.static&&a.push("static "),r.abstract&&a.push("abstract "),r.readonly&&a.push("readonly "),s.async&&a.push("async "),s.generator&&a.push("*"),"get"!==i&&"set"!==i||a.push(i," ");var l=e.call(n,"key");return r.computed&&(l=o.concat(["[",l,"]"])),a.push(l),r.optional&&a.push("?"),r===s?(a.push(e.call(n,"typeParameters"),"(",D(e,t,n),")",e.call(n,"returnType")),r.body?a.push(" ",e.call(n,"body")):a.push(";")):(a.push(e.call(n,"value","typeParameters"),"(",e.call((function(e){return D(e,t,n)}),"value"),")",e.call(n,"value","returnType")),s.body?a.push(" ",e.call(n,"value","body")):a.push(";")),o.concat(a)}function E(e,t,n){var r=e.map(n,"arguments"),i=m.isTrailingCommaEnabled(t,"parameters"),a=o.fromString(", ").join(r);return a.getLineLength(1)>t.wrapColumn?(a=o.fromString(",\n").join(r),o.concat(["(\n",a.indent(t.tabWidth),i?",\n)":"\n)"])):o.concat(["(",a,")"])}function D(e,t,n){var r=e.getValue();if(r.params)var i=r.params,a=e.map(n,"params");else r.parameters&&(i=r.parameters,a=e.map(n,"parameters"));r.defaults&&e.each((function(e){var t=e.getName(),r=a[t];r&&e.getValue()&&(a[t]=o.concat([r," = ",n(e)]))}),"defaults"),r.rest&&a.push(o.concat(["...",e.call(n,"rest")]));var s=o.fromString(", ").join(a);return s.length>1||s.getLineLength(1)>t.wrapColumn?(s=o.fromString(",\n").join(a),s=m.isTrailingCommaEnabled(t,"parameters")&&!r.rest&&"RestElement"!==i[i.length-1].type?o.concat([s,",\n"]):o.concat([s,"\n"]),o.concat(["\n",s.indent(t.tabWidth)])):s}function w(e,t,n){var r=e.getValue(),i=["export "];r.exportKind&&"value"!==r.exportKind&&i.push(r.exportKind+" ");var a=t.objectCurlySpacing;if(h.Declaration.assert(r),(r.default||"ExportDefaultDeclaration"===r.type)&&i.push("default "),r.declaration)i.push(e.call(n,"declaration"));else if(r.specifiers){if(1===r.specifiers.length&&"ExportBatchSpecifier"===r.specifiers[0].type)i.push("*");else if(0===r.specifiers.length)i.push("{}");else if("ExportDefaultSpecifier"===r.specifiers[0].type){var s=[],u=[];if(e.each((function(e){"ExportDefaultSpecifier"===e.getValue().type?s.push(n(e)):u.push(n(e))}),"specifiers"),s.forEach((function(e,t){t>0&&i.push(", "),i.push(e)})),u.length>0){var l=o.fromString(", ").join(u);l.getLineLength(1)>t.wrapColumn&&(l=o.concat([o.fromString(",\n").join(u).indent(t.tabWidth),","])),s.length>0&&i.push(", "),l.length>1?i.push("{\n",l,"\n}"):t.objectCurlySpacing?i.push("{ ",l," }"):i.push("{",l,"}")}}else i.push(a?"{ ":"{",o.fromString(", ").join(e.map(n,"specifiers")),a?" }":"}");r.source&&i.push(" from ",e.call(n,"source"))}var c=o.concat(i);return";"===k(c)||r.declaration&&("FunctionDeclaration"===r.declaration.type||"ClassDeclaration"===r.declaration.type||"TSModuleDeclaration"===r.declaration.type||"TSInterfaceDeclaration"===r.declaration.type||"TSEnumDeclaration"===r.declaration.type)||(c=o.concat([c,";"])),c}function A(e,t){var n=m.getParentExportDeclaration(e);return n?a.default.strictEqual(n.type,"DeclareExportDeclaration"):t.unshift("declare "),o.concat(t)}function C(e,t){return e.call((function(e){var n=e.getValue();return n?"plus"===n?o.fromString("+"):"minus"===n?o.fromString("-"):t(e):o.fromString("")}),"variance")}function T(e,t){return e.length>1?o.concat([" ",e]):o.concat(["\n",N(e).indent(t.tabWidth)])}function k(e){var t=e.lastPos();do{var n=e.charAt(t);if(/\S/.test(n))return n}while(e.prevPos(t))}function F(e){return"}"===k(e)}function P(e){return e.replace(/['"]/g,(function(e){return'"'===e?"'":'"'}))}function M(e,t){switch(p.assert(e),t.quote){case"auto":var n=JSON.stringify(e),r=P(JSON.stringify(P(e)));return n.length>r.length?r:n;case"single":return P(JSON.stringify(P(e)));case"double":default:return JSON.stringify(e)}}function N(e){var t=k(e);return!t||"\n};".indexOf(t)<0?o.concat([e,";"]):e}t.Printer=function e(t){a.default.ok(this instanceof e);var n=t&&t.tabWidth;function r(e,t){return e=Object.assign({},e,t),function(t){return i(t,e)}}function i(e,o){if(a.default.ok(e instanceof d.default),(o=o||{}).includeComments)return s.printComments(e,r(o,{includeComments:!1}));var u=t.tabWidth;if(!n){var c=e.getNode().loc;c&&c.lines&&c.lines.guessTabWidth&&(t.tabWidth=c.lines.guessTabWidth())}var h=l.getReprinter(e),p=h?h(i):x(e,t,o,r(o,{includeComments:!0,avoidRootParens:!1}));return t.tabWidth=u,p}(t=u.normalize(t)).sourceFileName=null,this.print=function(e){if(!e)return v;var n=i(d.default.from(e),{includeComments:!0,avoidRootParens:!1});return new y(n.toString(t),m.composeSourceMaps(t.inputSourceMap,n.getSourceMap(t.sourceMapName,t.sourceRoot)))},this.printGenerically=function(e){if(!e)return v;var n=d.default.from(e),r=t.reuseWhitespace;t.reuseWhitespace=!1;var i=new y(function e(n){return s.printComments(n,(function(n){return x(n,t,{includeComments:!0,avoidRootParens:!1},e)}))}(n).toString(t));return t.reuseWhitespace=r,i}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(17)),s=i(n(27)),o=i(n(16)),u=o.namedTypes.Printable,l=o.namedTypes.Expression,c=o.namedTypes.ReturnStatement,h=o.namedTypes.SourceLocation,p=n(18),f=r(n(70)),d=o.builtInTypes.object,m=o.builtInTypes.array,y=o.builtInTypes.string,g=/[0-9a-z_$]/i,v=function e(t){a.default.ok(this instanceof e),a.default.ok(t instanceof s.Lines);var n=[];this.replace=function(e,t){y.check(t)&&(t=s.fromString(t)),n.push({lines:t,start:e.start,end:e.end})},this.get=function(e){var r=(e=e||{start:{line:1,column:0},end:{line:t.length,column:t.getLineLength(t.length)}}).start,i=[];function o(e,n){a.default.ok(p.comparePos(e,n)<=0),i.push(t.slice(e,n))}return n.sort((function(e,t){return p.comparePos(e.start,t.start)})).forEach((function(e){p.comparePos(r,e.start)>0||(o(r,e.start),i.push(e.lines),r=e.end)})),o(r,e.end),s.concat(i)}};t.Patcher=v;var x=v.prototype;function b(e){var t=[];return e.comments&&e.comments.length>0&&e.comments.forEach((function(e){(e.leading||e.trailing)&&t.push(e)})),t}function S(e,t,n){var r=e.getValue();return r===t.getValue()||(m.check(r)?E(e,t,n):!!d.check(r)&&function(e,t,n){var r=e.getValue();if(d.assert(r),null===r.original)return!1;var i=t.getValue();if(!d.check(i))return!1;if(r===i||e.valueIsDuplicate()||t.valueIsDuplicate())return!0;if(u.check(r)){if(!u.check(i))return!1;if(r.type===i.type){var a=[];if(D(e,t,a))n.push.apply(n,a);else{if(!i.loc)return!1;n.push({oldPath:t.copy(),newPath:e.copy()})}return!0}return!!(l.check(r)&&l.check(i)&&i.loc)&&(n.push({oldPath:t.copy(),newPath:e.copy()}),!0)}return D(e,t,n)}(e,t,n))}function E(e,t,n){var r=e.getValue(),i=t.getValue();if(r===i||e.valueIsDuplicate()||t.valueIsDuplicate())return!0;m.assert(r);var a=r.length;if(!m.check(i)||i.length!==a)return!1;for(var s=0;s<a;++s){e.stack.push(s,r[s]),t.stack.push(s,i[s]);var o=S(e,t,n);if(e.stack.length-=2,t.stack.length-=2,!o)return!1}return!0}function D(e,t,n){var r=e.getValue(),i=t.getValue();if(d.assert(r),d.assert(i),null===r.original)return!1;if(e.needsParens()&&!t.hasParens())return!1;var a=p.getUnionOfKeys(i,r);"File"!==i.type&&"File"!==r.type||delete a.tokens,delete a.loc;var s=n.length;for(var u in a)if("_"!==u.charAt(0)){e.stack.push(u,o.getFieldValue(r,u)),t.stack.push(u,o.getFieldValue(i,u));var l=S(e,t,n);if(e.stack.length-=2,t.stack.length-=2,!l)return!1}return!(c.check(e.getNode())&&n.length>s)}x.tryToReprintComments=function(e,t,n){var r=this;if(!e.comments&&!t.comments)return!0;var i=f.default.from(e),s=f.default.from(t);i.stack.push("comments",b(e)),s.stack.push("comments",b(t));var o=[],u=E(i,s,o);return u&&o.length>0&&o.forEach((function(e){var t=e.oldPath.getValue();a.default.ok(t.leading||t.trailing),r.replace(t.loc,n(e.newPath).indentTail(t.loc.indent))})),u},x.deleteComments=function(e){if(e.comments){var t=this;e.comments.forEach((function(n){n.leading?t.replace({start:n.loc.start,end:e.loc.lines.skipSpaces(n.loc.end,!1,!1)},""):n.trailing&&t.replace({start:e.loc.lines.skipSpaces(n.loc.start,!0,!1),end:n.loc.end},"")}))}},t.getReprinter=function(e){a.default.ok(e instanceof f.default);var t=e.getValue();if(u.check(t)){var n=t.original,r=n&&n.loc,i=r&&r.lines,o=[];if(i&&function(e,t){var n=e.getValue();u.assert(n);var r=n.original;if(u.assert(r),a.default.deepEqual(t,[]),n.type!==r.type)return!1;var i=new f.default(r),s=D(e,i,t);s||(t.length=0);return s}(e,o))return function(t){var a=new v(i);o.forEach((function(e){var n=e.newPath.getValue(),r=e.oldPath.getValue();h.assert(r.loc,!0);var o=!a.tryToReprintComments(n,r,t);o&&a.deleteComments(r);var u=t(e.newPath,{includeComments:o,avoidRootParens:r.type===n.type&&e.oldPath.hasParens()}).indentTail(r.loc.indent),l=function(e,t,n){var r=p.copyPos(t.start),i=e.prevPos(r)&&e.charAt(r),a=n.charAt(n.firstPos());return i&&g.test(i)&&a&&g.test(a)}(i,r.loc,u),c=function(e,t,n){var r=e.charAt(t.end),i=n.lastPos(),a=n.prevPos(i)&&n.charAt(i);return a&&g.test(a)&&r&&g.test(r)}(i,r.loc,u);if(l||c){var f=[];l&&f.push(" "),f.push(u),c&&f.push(" "),u=s.concat(f)}a.replace(r.loc,u)}));var u=a.get(r).indentTail(-n.loc.indent);return e.needsParens()?s.concat(["(",u,")"]):u}}}}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,