!function(e){function t(t){for(var a,o,l=t[0],s=t[1],d=t[2],u=0,m=[];u<l.length;u++)o=l[u],Object.prototype.hasOwnProperty.call(n,o)&&n[o]&&m.push(n[o][0]),n[o]=0;for(a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a]);for(c&&c(t);m.length;)m.shift()();return r.push.apply(r,d||[]),i()}function i(){for(var e,t=0;t<r.length;t++){for(var i=r[t],a=!0,l=1;l<i.length;l++){var s=i[l];0!==n[s]&&(a=!1)}a&&(r.splice(t--,1),e=o(o.s=i[0]))}return e}var a={},n={2:0,0:0},r=[];function o(t){if(a[t])return a[t].exports;var i=a[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=a,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)o.d(i,a,function(t){return e[t]}.bind(null,a));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var l=window.wpJsonpFlightsWidget=window.wpJsonpFlightsWidget||[],s=l.push.bind(l);l.push=t,l=l.slice();for(var d=0;d<l.length;d++)t(l[d]);var c=s;r.push([60,1]),i()}([function(e,t,i){"use strict";function a(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function n(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.h=t.Element=void 0;var r=function(){function e(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"==typeof t?(this.el=document.createElement(t),this.el.className=i):this.el=t,this.data={}}var t,i,r;return t=e,(i=[{key:"data",value:function(e,t){return void 0!==t?(this.data[e]=t,this):this.data[e]}},{key:"on",value:function(e,t){var i=a(e.split(".")),n=i[0],r=i.slice(1),o=n;return"mousewheel"===o&&/Firefox/i.test(window.navigator.userAgent)&&(o="DOMMouseScroll"),this.el.addEventListener(o,(function(e){t(e);for(var i=0;i<r.length;i+=1){var a=r[i];if("left"===a&&0!==e.button)return;if("right"===a&&2!==e.button)return;"stop"===a&&e.stopPropagation()}})),this}},{key:"offset",value:function(e){var t=this;if(void 0!==e)return Object.keys(e).forEach((function(i){t.css(i,"".concat(e[i],"px"))})),this;var i=this.el;return{top:i.offsetTop,left:i.offsetLeft,height:i.offsetHeight,width:i.offsetWidth}}},{key:"scroll",value:function(e){var t=this.el;return void 0!==e&&(void 0!==e.left&&(t.scrollLeft=e.left),void 0!==e.top&&(t.scrollTop=e.top)),{left:t.scrollLeft,top:t.scrollTop}}},{key:"box",value:function(){return this.el.getBoundingClientRect()}},{key:"parent",value:function(){return new e(this.el.parentNode)}},{key:"children",value:function(){for(var e=this,t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];return 0===arguments.length?this.el.childNodes:(i.forEach((function(t){return e.child(t)})),this)}},{key:"child",value:function(t){var i=t;return"string"==typeof t?i=document.createTextNode(t):t instanceof e&&(i=t.el),this.el.appendChild(i),this}},{key:"contains",value:function(e){return this.el.contains(e)}},{key:"className",value:function(e){return void 0!==e?(this.el.className=e,this):this.el.className}},{key:"addClass",value:function(e){return this.el.classList.add(e),this}},{key:"hasClass",value:function(e){return this.el.classList.contains(e)}},{key:"removeClass",value:function(e){return this.el.classList.remove(e),this}},{key:"toggle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"active";return this.toggleClass(e)}},{key:"toggleClass",value:function(e){return this.el.classList.toggle(e)}},{key:"active",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"active";return e?this.addClass(t):this.removeClass(t),this}},{key:"checked",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.active(e,"checked"),this}},{key:"disabled",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return e?this.addClass("disabled"):this.removeClass("disabled"),this}},{key:"attr",value:function(e,t){var i=this;if(void 0!==t)this.el.setAttribute(e,t);else{if("string"==typeof e)return this.el.getAttribute(e);Object.keys(e).forEach((function(t){i.el.setAttribute(t,e[t])}))}return this}},{key:"removeAttr",value:function(e){return this.el.removeAttribute(e),this}},{key:"html",value:function(e){return void 0!==e?(this.el.innerHTML=e,this):this.el.innerHTML}},{key:"val",value:function(e){return void 0!==e?(this.el.value=e,this):this.el.value}},{key:"cssRemoveKeys",value:function(){for(var e=this,t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];return i.forEach((function(t){return e.el.style.removeProperty(t)})),this}},{key:"css",value:function(e,t){var i=this;return void 0===t&&"string"!=typeof e?(Object.keys(e).forEach((function(t){i.el.style[t]=e[t]})),this):void 0!==t?(this.el.style[e]=t,this):this.el.style[e]}},{key:"removeEl",value:function(){this.el&&this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},{key:"computedStyle",value:function(){return window.getComputedStyle(this.el,null)}},{key:"isShow",value:function(){return"block"===this.el.style.display}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"display",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"block";return this.css(e,t),this}},{key:"hide",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"display",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"none";return this.css(e,t),this}}])&&n(t.prototype,i),r&&n(t,r),e}();t.Element=r;t.h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new r(e,t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.offsetTop=t.offsetLeft=t.filterFormula=t.look2=t.look=t.cssPrefix=void 0;t.cssPrefix="fin-cell";t.look=["*悬浮查看*","*HYPERLINK*","*MULTIPLECELLS*"];t.look2="#CHECK！";t.filterFormula=["CITY"];t.offsetLeft=60;t.offsetTop=70},,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CellRange=t.default=void 0;var a=i(5);function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t,i,a,n){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sri=t,this.sci=i,this.eri=a,this.eci=n,this.w=r,this.h=o}var t,i,o;return t=e,o=[{key:"valueOf",value:function(t){var i=t.split(":"),r=n((0,a.expr2xy)(i[0]),2),o=r[0],l=r[1],s=l,d=o;if(i.length>1){var c=n((0,a.expr2xy)(i[1]),2);d=c[0],s=c[1]}return new e(l,o,s,d)}}],(i=[{key:"set",value:function(e,t,i,a){this.sri=e,this.sci=t,this.eri=i,this.eci=a}},{key:"multiple",value:function(){return this.eri-this.sri>0||this.eci-this.sci>0}},{key:"includes",value:function(){for(var e=0,t=0,i=arguments.length,r=new Array(i),o=0;o<i;o++)r[o]=arguments[o];if(1===r.length){var l=(0,a.expr2xy)(r[0]),s=n(l,2);t=s[0],e=s[1]}else 2===r.length&&(e=r[0],t=r[1]);var d=this.sri,c=this.sci,u=this.eri,m=this.eci;return d<=e&&e<=u&&c<=t&&t<=m}},{key:"each",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0},i=this.sri,a=this.sci,n=this.eri,r=this.eci,o=i;o<=n;o+=1)if(t(o))for(var l=a;l<=r;l+=1)e(o,l)}},{key:"getType",value:function(){var e=this.sri,t=this.sci,i=this.eri,a=this.eci;return e===i&&t!==a?1:e!==i&&t===a?2:e!==i&&t!==a?3:e===i&&t===a?1:(console.error("未知情况"),4)}},{key:"move",value:function(e,t){var i=this.eri-this.sri,a=this.eci-this.sci;this.sri=e,this.sci=t,this.eri=this.sri+i,this.eci=this.sci+a}},{key:"move2",value:function(e,t,i,a){this.sri=e,this.sci=t,this.eri=i,this.eci=a}},{key:"contains",value:function(e){return this.sri<=e.sri&&this.sci<=e.sci&&this.eri>=e.eri&&this.eci>=e.eci}},{key:"within",value:function(e){return this.sri>=e.sri&&this.sci>=e.sci&&this.eri<=e.eri&&this.eci<=e.eci}},{key:"disjoint",value:function(e){return this.sri>e.eri||this.sci>e.eci||e.sri>this.eri||e.sci>this.eci}},{key:"intersects",value:function(e){return this.sri<=e.eri&&this.sci<=e.eci&&e.sri<=this.eri&&e.sci<=this.eci}},{key:"getMovePos",value:function(e,t){var i=this.sri,a=this.sci,n=this.eri,r=this.eci,o=0;return e>n&&t>r?o=1:e>n&&t<a?o=7:e<i&&t>r?o=8:t<a&&e<i?o=4:e>n?o=2:t>r?o=3:t<a?o=5:e<i&&(o=6),o}},{key:"union",value:function(t){var i=this.sri,a=this.sci,n=this.eri,r=this.eci;return new e(t.sri<i?t.sri:i,t.sci<a?t.sci:a,t.eri>n?t.eri:n,t.eci>r?t.eci:r)}},{key:"difference",value:function(t){var i=[],a=function(t,a,n,r){i.push(new e(t,a,n,r))},n=this.sri,r=this.sci,o=this.eri,l=this.eci,s=t.sri-n,d=t.sci-r,c=o-t.eri,u=l-t.eci;return s>0?(a(n,r,t.sri-1,l),c>0?(a(t.eri+1,r,o,l),d>0&&a(t.sri,r,t.eri,t.sci-1),u>0&&a(t.sri,t.eci+1,t.eri,l)):(d>0&&a(t.sri,r,o,t.sci-1),u>0&&a(t.sri,t.eci+1,o,l))):c>0&&(a(t.eri+1,r,o,l),d>0&&a(n,r,t.eri,t.sci-1),u>0&&a(n,t.eci+1,t.eri,l)),d>0?(a(n,r,o,t.sci-1),u>0?(a(n,t.eri+1,o,l),s>0&&a(n,t.sci,t.sri-1,t.eci),c>0&&a(t.sri+1,t.sci,o,t.eci)):(s>0&&a(n,t.sci,t.sri-1,l),c>0&&a(t.sri+1,t.sci,o,l))):u>0&&(a(o,t.eci+1,o,l),s>0&&a(n,r,t.sri-1,t.eci),c>0&&a(t.eri+1,r,o,t.eci)),i}},{key:"size",value:function(){return[this.eri-this.sri+1,this.eci-this.sci+1]}},{key:"toString",value:function(){var e=this.sri,t=this.sci,i=this.eri,n=this.eci,r=(0,a.xy2expr)(t,e);return this.multiple()&&(r="".concat(r,":").concat((0,a.xy2expr)(n,i))),r}},{key:"includeByRiCi",value:function(e,t){var i=this.sri,a=this.sci,n=this.eri,r=this.eci;return i<=e&&n>=e&&a<=t&&r>=t}},{key:"getLocationArray",value:function(e){var t=[],i=0;return this.each((function(a,n){t.push({ri:a,ci:n,v:e[i%e.length].tmp,type:e[i%e.length].type}),i+=1})),t}},{key:"equals",value:function(e){return this.eri===e.eri&&this.eci===e.eci&&this.sri===e.sri&&this.sci===e.sci}}])&&r(t.prototype,i),o&&r(t,o),e}();t.CellRange=o;var l=o;t.default=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLegal=function(e){var t=function(e){return"("===e||"["===e||"{"===e||"/*"===e?0:")"===e||"]"===e||"}"===e||"*/"===e?1:2},i=[];if(null!==e||""!==e||void 0!==e){for(var a=0;a<e.length;a++){var n=e.charAt(a);if(0===t(n))i.push(n);else if(!(1!==t(n)||0!==i.length&&(r=i.pop(),o=n,"("===r&&")"===o||"{"===r&&"}"===o||"["===r&&"]"===o||"/*"===r&&"*/"===o)))return!1}return 0===i.length}var r,o},t.distinct=function(e){return function(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(new Set(e))},t.changeFormula=function(e){for(var t=0;t<e.length;t++){var i=e[t];-1===i.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)&&(e[t]="".concat(i,":").concat(i))}return e},t.deepCopy=function e(t){var i=Array.isArray(t)?[]:{};for(var a in t)t.hasOwnProperty(a)&&("object"===n(t[a])&&null!==t[a]?i[a]=e(t[a]):i[a]=t[a]);return i},t.positionAngle=t.cuttingByPos2=t.cuttingByPosEnd2=t.isSheetVale=t.splitStr=t.value2absolute=t.cuttingByPosEnd=t.operation3=t.cutFirst=t.cuttingByPos=t.isAbsoluteValue=t.cutting2=t.cutting=t.cutStr=t.operation=t.operator=void 0;var a=i(16);function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=["+","-","*","/","&","^","(",",","="," "," ","，"];t.operator=r;var o=["+","-","*","/","&","^","(",",","="," ","，"],l=["+","-","*","/","&","^","(",",","=",")","，"],s=function(e){for(var t=0;t<r.length;t++)if(r[t]===e)return 1;return 0};t.operation=s;var d=function(e){for(var t=0;t<r.length;t++)if(o[t]===e)return 1;return 0};t.operation3=d;var c=function(e){for(var t=0;t<l.length;t++)if(l[t]===e)return 1;return 0};t.value2absolute=function(e){for(var t="",i=!1,a=0;a<e.length;a++)!1===i&&1*e[a]>=0&&1*e[a]<=9&&(t+="$",i=!0),t+=e[a];return{s1:t,s2:"$"+e,s3:"$"+t}};t.cutStr=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("="!==(e=(e+="").toUpperCase())[0])return[];for(var n=e.split((0,a.str2Re)(a.logicOperator)),r=0;r<n.length;r++)n[r]=n[r].replace((0,a.str2Re)(a.blankOperator),"");var o=[],l=0;return n.filter((function(e){var r=!0;n.length>l+1&&(-1!==n[l+1].indexOf("(")&&(r=!1));if(i&&r)-1===(e=e.replace(/\$/g,"")).search((0,a.str2Re)(a.letterOperator))&&-1===e.search((0,a.str2Re)(a.letterAndLetterOperator))||-1===o.indexOf(e)&&o.push(e);else if(r){if(-1!==e.search((0,a.str2Re)(a.letterOperator))||-1!==e.search((0,a.str2Re)(a.letterOperatorWithDollor))||-1!==e.search((0,a.str2Re)(a.letterOperatorWithDollorEnd))||-1!==e.search((0,a.str2Re)(a.letterOperatorWithDollorPrex)))-1!==o.indexOf(e)&&!0!==t||o.push(e);else-1!==e.replace(/\$/g,"").search((0,a.str2Re)(a.letterAndLetterOperator))&&o.push(e)}l+=1})),o};t.cutFirst=function(e){for(var t="",i=0;i<e.length;i++){if(c(e[i]))return t;t+=e[i]}return t};t.cuttingByPos=function(e,t){for(var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a="",n=!1,r=t-1;r>0&&!1===n;r--)!1===(n=!1===i?1===d(e[r]):1===s(e[r]))&&(a+=e[r]);return i&&(a=a.replace(/\s/g,"")),(a=a.split("").reverse().join("")).toUpperCase()};t.cuttingByPos2=function(e,t){for(var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a="",n=!1,r=t-1;r>0&&!1===n;r--)!1===(n=!1===i?1===d(e[r]):1===s(e[r]))&&(a+=e[r]);return i&&(a=a.replace(/\s/g,"")),a=a.split("").reverse().join("")};t.cuttingByPosEnd=function(e,t){for(var i="",a=!1,n=t-1;n<e.length&&!1===a;n++)!1===(a=1===s(e[n]))&&")"!==e[n]&&(i+=e[n]);return i.toUpperCase()};t.cuttingByPosEnd2=function(e,t){for(var i="",a=t-1;a<e.length;a++)i+=e[a];return i};t.cutting=function(e){for(var t=[],i=0;i<e.length;i++)e[i]&&t.push(e[i]);return t};t.isSheetVale=function(e){return-1!==(e=e.toUpperCase()).search(/[\u4E00-\u9FA50-9a-zA-Z]+![A-Za-z]+\$\d+/)||(-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+!\$[A-Za-z]+\d+/)||(-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+!\$[A-Za-z]+\$\d+/)||-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+![A-Za-z]+\d+/)))};t.positionAngle=function(e,t,i,a){var n,r,o,l,s=0,d=Math.abs((o=(r={x:t,y:a}).x-(n={x:e,y:i}).x,l=r.y-n.y,360*Math.atan(l/o)/(2*Math.PI)));return e<t&&i<a?s=1:e>t&&i<a?s=2:e<t&&i>a?s=3:e>t&&i>a&&(s=4),1===s&&d<45?s=3:2===s&&d>30?s=1:3===s&&d>30?s=4:4===s&&d<45?s=2:s};t.isAbsoluteValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e=e.toUpperCase(),1===t?-1!==e.search(/^\$[A-Z]+\$\d+$/)?3:-1!==e.search(/^\$[A-Z]+\d+$/)?1:-1!==e.search(/^[A-Z]+\$\d+$/)&&2:3===t?-1!==e.search(/^\$[A-Z]+\$\d+$/)||(-1!==e.search(/^[A-Z]+\d+$/)||(-1!==e.search(/^\$[A-Z]+\d+$/)||-1!==e.search(/^[A-Z]+\$\d+$/))):4!==t?5===t?-1!==e.search(/^[A-Z]+\d+:\$[A-Z]+\d+$/)?8:-1!==e.search(/^[A-Z]+\d+:[A-Z]+\$\d+$/)?9:-1!==e.search(/^[A-Z]+\$\d+:[A-Z]+\d+$/)?10:-1!==e.search(/^\$[A-Z]+\d+:[A-Z]+\d+$/)?11:-1!==e.search(/^\$[A-Z]+\$\d+$/)?3:-1!==e.search(/^[A-Z]+\d+$/)?12:-1!==e.search(/^[A-Z]+\d+:[A-Z]+\d+$/)?13:-1!==e.search(/^\$[A-Z]+\d+$/)?1:-1!==e.search(/^[A-Z]+\$\d+$/)?2:-1!==e.search(/^[A-Z]+\$\d+:[A-Z]+\$\d+$/)?4:-1!==e.search(/^[A-Z]+\$\d+:\$[A-Z]+\d+$/)?5:-1!==e.search(/^\$[A-Z]+\d+:[A-Z]+\$\d+$/)?6:-1!==e.search(/^\$[A-Z]+\d+:\$[A-Z]+\d+$/)&&7:6===t?-1!==(e=e.replace(/\$/g,"")).search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/):-1!==e.search(/^[A-Za-z]+\d+$/)||-1!==e.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/):-1!==e.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)||void 0};t.splitStr=function(e){for(var t=e.split(/([(-\/,+，*\s=^&])/),i=[],a=0;a<t.length;a++){var n=1;if(t.length>a+1){var r=t[a+1];"("===t[a]?n=3:-1!==r.indexOf("(")&&(n=2)}3!==n&&(2===n?i.push(t[a]+"("):i.push(t[a]))}return i};t.cutting2=function(e){for(var t=e.split(/([(-\/,+，*\s=^&])/),i=0,a=[],n=0;n<t.length;n++)t[n]&&a.push(t[n]);for(var r=[],o=0;o<a.length;o++){var l=a[o].toUpperCase(),s=!0;if(a.length>o+1)-1!==a[o+1].indexOf("(")&&(s=!1);if(-1===l.search(/^[A-Z]+\d+$/)&&-1===l.search(/^\$[A-Z]+\$\d+$/)&&-1===l.search(/^[A-Z]+\$\d+$/)&&-1===l.search(/^\$[A-Z]+\d+$/)&&-1===l.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)||!s){if(-1!==l.replace(/\$/g,"").search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)&&s){for(var d=0;d<a[o].length;d++)r.push({code:i,data:a[o][d]});i+=1}else for(var c=0;c<a[o].length;c++)r.push({code:-1,data:a[o][c]})}else{for(var u=0;u<a[o].length;u++)r.push({code:i,data:a[o][u]});i+=1}}return r}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.stringAt=n,t.indexAt=r,t.expr2xy=o,t.xy2expr=l,t.default=void 0;var a=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];function n(e){for(var t="",i=e;i>=a.length;)i/=a.length,i-=1,t+=a[parseInt(i,10)%a.length];var n=e%a.length;return t+=a[n]}function r(e){for(var t=0,i=0;i<e.length-1;i+=1){var n=e.charCodeAt(i)-65,r=e.length-1-i;t+=Math.pow(a.length,r)+a.length*n}return t+=e.charCodeAt(e.length-1)-65}function o(e){for(var t="",i="",a=0;a<e.length;a+=1)e.charAt(a)>="0"&&e.charAt(a)<="9"?i+=e.charAt(a):t+=e.charAt(a);return[r(t),parseInt(i,10)-1]}function l(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e*=1,t*=1,2===i?"".concat(n(e),"$").concat(t+1):1===i?"$".concat(n(e)).concat(t+1):"".concat(n(e)).concat(t+1)}var s={expr2xy:o,xy2expr:l};t.default=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bind=n,t.remove=function(){for(var e=0;e<a.length;e++){var t=a[e];r(t.target,t.name,t.fn)}},t.unbind=r,t.unbindClickoutside=o,t.createEvent=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"keydown",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,n=document.createEvent("HTMLEvents");n.initEvent(i,!0,!0),n.eventType="message",n.buttons=a,n.keyCode=e,n.metaKey=t,document.dispatchEvent(n)},t.bindClickoutside=function(e,t){e.xclickoutside=function(i){2===i.detail||e.contains(i.target)||(t?t(e):(e.hide(),o(e)))},n(window.document.body,"click",e.xclickoutside)},t.mouseMoveUp=function(e,t,i){n(e,"mousemove",t),e.xEvtUp=function(a){r(e,"mousemove",t),r(e,"mouseup",e.xEvtUp),i(a)},n(e,"mouseup",e.xEvtUp)},t.bindTouch=function(e,t){var i=t.move,a=t.end,r=0,o=0;n(e,"touchstart",(function(e){var t=e.touches[0],i=t.pageX,a=t.pageY;r=i,o=a})),n(e,"touchmove",(function(e){if(i){var t=e.changedTouches[0],a=t.pageX,n=t.pageY,s=a-r,d=n-o;(Math.abs(s)>10||Math.abs(d)>10)&&(l(s,d,e,i),r=a,o=n),e.preventDefault()}})),n(e,"touchend",(function(e){if(a){var t=e.changedTouches[0],i=t.pageX,n=t.pageY;l(i-r,n-o,e,a)}}))};var a=[];function n(e,t,i){e.addEventListener(t,i),a.push({name:t,fn:i,target:e})}function r(e,t,i){e.removeEventListener(t,i)}function o(e){e.xclickoutside&&(r(window.document.body,"click",e.xclickoutside),delete e.xclickoutside)}function l(e,t,i,a){Math.abs(e)>Math.abs(t)?a(e>0?"right":"left",e,i):a(t>0?"down":"up",t,i)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isHave=function(e){if(void 0===e)return!1;if(null===e)return!1;return!0}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.locale=function(e,t){r=e,t&&(o[e]=t)},t.t=s,t.tf=function(e){return function(){return s(e)}},t.default=void 0;var a,n=(a=i(102))&&a.__esModule?a:{default:a};var r="en",o={en:n.default};function l(e,t){if(t&&t[r])for(var i=t[r],a=e.split("."),n=0;n<a.length;n+=1){var o=i[a[n]];if(n===a.length-1)return o;if(!o)return;i=o}}function s(e){var t=l(e,o);return!t&&window&&window.x&&window.x.spreadsheet&&window.x.spreadsheet.$messages&&(t=l(e,window.x.spreadsheet.$messages)),t||""}var d={t:s};t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function l(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=l(this,s(t).call(this,"div","".concat(n.cssPrefix,"-icon")))).iconNameEl=(0,a.h)("div","".concat(n.cssPrefix,"-icon-img ").concat(e)),i.child(i.iconNameEl),i}var i,r,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),i=t,(r=[{key:"setName",value:function(e){this.iconNameEl.className("".concat(n.cssPrefix,"-icon-img ").concat(e))}}])&&o(i.prototype,r),c&&o(i,c),t}(a.Element);t.default=c},,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(6),r=i(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=function(e){function t(e,i,n,o,l){var c,u,m=l.type,h=l.change,f=l.arrowChange,v=l.historyBorder;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(u=s(this,d(t).call(this,"div","".concat(r.cssPrefix,"-dropdown ").concat(o)))).title=e,u.change=function(){},"string"==typeof e?u.title=(0,a.h)("div","".concat(r.cssPrefix,"-dropdown-title")).child(e):n&&u.title.addClass("arrow-left");for(var p=arguments.length,g=new Array(p>5?p-5:0),y=5;y<p;y++)g[y-5]=arguments[y];return u.contentEl=(c=(0,a.h)("div","".concat(r.cssPrefix,"-dropdown-content"))).children.apply(c,g).css("width",i).hide(),m?(u.headerEl=(0,a.h)("div","".concat(r.cssPrefix,"-dropdown-header")).on("click",h),u.headerEl.children(u.title,n?(0,a.h)("div","".concat(r.cssPrefix,"-icon arrow-right_d")).child((0,a.h)("div","".concat(r.cssPrefix,"-icon-img arrow-down")).on("click.stop",(function(e){f(v),"block"!==u.contentEl.css("display")?u.show():u.hide()}))):""),u.children(u.headerEl,u.contentEl)):(u.headerEl=(0,a.h)("div","".concat(r.cssPrefix,"-dropdown-header")),u.headerEl.on("click",(function(){"block"!==u.contentEl.css("display")?u.show():u.hide()})).children(u.title,n?(0,a.h)("div","".concat(r.cssPrefix,"-icon arrow-right")).child((0,a.h)("div","".concat(r.cssPrefix,"-icon-img arrow-down"))):""),u.children(u.headerEl,u.contentEl)),u}var i,o,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),i=t,(o=[{key:"setTitle",value:function(e){this.title.html(e),this.hide()}},{key:"show",value:function(){var e=this;this.contentEl.show(),this.parent().active(),(0,n.bindClickoutside)(this.parent(),(function(){e.hide()}))}},{key:"hide",value:function(){this.parent().active(!1),this.contentEl.hide(),(0,n.unbindClickoutside)(this.parent())}}])&&l(i.prototype,o),u&&l(i,u),t}(a.Element);t.default=u},,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cloneDeep=function(e){return JSON.parse(JSON.stringify(e))},t.find=function(e,t){for(var i=0;i<e.length;i++)if(-1!==t.indexOf(e[i]))return!0;return!1},t.isOusideViewRange=function(e,t,i,a,n){if(44===n&&i-e+100>0)return!0;if(11===n&&a-100<0)return!0;if(33===n&&a-t+100>0)return!0;if(22===n&&i-100<0)return!0;return!1},t.equals=function e(t,i){var a=Object.keys(t);if(a.length!==Object.keys(i).length)return!1;for(var n=0;n<a.length;n+=1){var r=a[n],o=t[r],l=i[r];if(void 0===l)return!1;if("string"==typeof o||"number"==typeof o||"boolean"==typeof o){if(o!==l)return!1}else if(Array.isArray(o)){if(o.length!==l.length)return!1;for(var s=0;s<o.length;s+=1)if(!e(o[s],l[s]))return!1}else if("function"!=typeof o&&!Array.isArray(o)&&o instanceof Object&&!e(o,l))return!1}return!0},t.isValueValid=function(e){if(void 0===e)return!1;if(null===e)return!1;return null!==e},t.rangeReduceIf=function(e,t,i,a,n,r){for(var o=i,l=a,s=e;s<t&&!(o>n);s+=1)l=r(s),o+=l;return[s,o-l,l]},t.rangeSum=function(e,t,i){for(var a=0,n=e;n<t;n+=1)a+=i(n);return a},t.isNumber=function(e){return"NaN"!==parseFloat(e).toString()},t.arrayEquals=function(e,t){if(e.length!==t.length)return!1;for(var i=0;i<e.length;i+=1)if(e[i]!==t[i])return!1;return!0},t.merge=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return a.apply(void 0,[{}].concat(t))},t.sum=t.mergeDeep=void 0;var a=function e(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length,a=new Array(i>1?i-1:0),n=1;n<i;n++)a[n-1]=arguments[n];return a.forEach((function(i){null!=i&&Object.keys(i).forEach((function(a){var n=i[a];"string"==typeof n||"number"==typeof n||"boolean"==typeof n?t[a]=n:"function"!=typeof n&&!Array.isArray(n)&&n instanceof Object?(t[a]=t[a]||{},e(t[a],n)):t[a]=n}))})),t};t.mergeDeep=a;t.sum=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},i=0,a=0;return Object.keys(e).forEach((function(n){i+=t(e[n],n),a+=1})),[i,a]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.str2Re=function(e){return new RegExp(e,"g")},t.calendarPattern=t.datePattern2=t.datePattern=t.letterOperatorWithDollorPrex=t.letterOperatorWithDollorEnd=t.letterAndLetterOperator=t.letterOperatorWithDollor=t.letterOperatorIgnoreBracket=t.letterOperator=t.blankOperator=t.logicOperator=void 0;t.logicOperator="([(-\\/,+*，=^&])";t.blankOperator="(^\\s*)|(\\s*$)";t.letterOperator="^[A-Z]+\\d+$";t.letterOperatorIgnoreBracket="^[A-Z]+\\d+$";t.letterOperatorWithDollor="^\\$[A-Z]+\\$\\d+$";t.letterAndLetterOperator="^[A-Za-z]+\\d+:[A-Za-z]+\\d+$";t.letterOperatorWithDollorEnd="^[A-Z]+\\$\\d+$";t.letterOperatorWithDollorPrex="^\\$[A-Z]+\\d+$";t.datePattern=["^(\\d{4})[-/](\\d{1,2})[-/](\\d{1,2})$","^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$"];t.datePattern2="((^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$))";t.calendarPattern="^\\d{4}-\\d{1,2}-\\d{1,2}$"},,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(7),n=i(5);function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,i,a,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.ri=t,this.ci=i,this.cell=a,this.expr=n,this.empty=r}var t,i,l;return t=e,(i=[{key:"isInclude",value:function(){}},{key:"each",value:function(e){var t=this.cell;if(!1!==(0,a.isHave)(t.depend))for(var i=0;i<t.depend.length;i++){var o=t.depend[i],l=r((0,n.expr2xy)(o),2),s=l[0];e(l[1],s)}}}])&&o(t.prototype,i),l&&o(t,l),e}();t.default=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lockCells=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,n=this.data,l=this.editor,s=e.offsetX,u=e.offsetY,m=n.getCellRectByXY(s,u),h=m.ri,v=m.ci,p=l.pos,g=l.editorText.getText(),y="";l.handler(g);var b=l.mousedownIndex;if((0,r.isAbsoluteValue)((0,r.cuttingByPos)(g,p),2)||t)if(t){var x=t.selector.range,A=x.sri,w=x.sci,E=x.eri,C=x.eci,T=(0,o.xy2expr)(w,A),O=(0,o.xy2expr)(C,E),S=T===O?T:"".concat(T,":").concat(O);if(2===i){var R=(0,r.value2absolute)(T),k=(0,r.value2absolute)(O);S=R.s1===k.s1?R.s1:"".concat(R.s1,":").concat(k.s1)}else if(1===i){var I=(0,r.value2absolute)(T),P=(0,r.value2absolute)(O);S=I.s2===P.s2?I.s2:"".concat(I.s2,":").concat(P.s2)}else if(3===i){var D=(0,r.value2absolute)(T),M=(0,r.value2absolute)(O);S=D.s3===M.s3?D.s3:"".concat(D.s3,":").concat(M.s3)}t.erpx=S,l.isCors&&(p=1);var N=-1!==a?a:p-(0,r.cuttingByPos)(g,p).length;y=g.substring(0,N)+S+g.substring(p,g.length),l.setText(y),l.setCursorPos(g.substring(0,N).length+S.length)}else for(var _=0,L=0;L<this.selectors.length&&0===_;L++){var j=this.selectors[L].erpx;if(j===(0,r.cuttingByPos)(g,p)){var B=m.ri,F=m.ci;this.selectors[L].ri=B,this.selectors[L].ci=F,this.selectors[L].erpx=(0,o.xy2expr)(F,B),this.selectors[L].selector.set(B,F),y="".concat(g.substring(0,p-j.length)).concat((0,o.xy2expr)(F,B)).concat(g.substring(p,g.length)),l.setText(y),l.setCursorPos(g.substring(0,p-j.length).length+(0,o.xy2expr)(F,B).length),_=1}}else if(b.length>0){if((0,r.operation)(b[1][0])&&(0,r.isAbsoluteValue)((0,r.cuttingByPos)(b[1],b[1].length),2))return void l.setLock(!1);var U=c.call(this,h,v);this.selectors.push(U);var H=(y="".concat(b[0]).concat((0,o.xy2expr)(v,h)).concat(b[1])).substring(b[0].length+(0,o.xy2expr)(v,h).length,y.length),V=(0,r.cutFirst)(H.substring(1));if((0,r.operation)(H[0])&&!(0,r.isAbsoluteValue)(V,2))return l.setText(y),void l.setMouseDownIndex([]);V=(0,r.cutFirst)(b[1]),console.log((0,o.xy2expr)(v,h));var z=(0,r.cutStr)("".concat(b[0]).concat((0,o.xy2expr)(v,h),"+4").concat(b[1])),W=d.call(this,z),$=W.selectors_delete,Y=W.selectors_new;Object.keys($).forEach((function(e){$[e].removeEl()})),this.selectors=Y,y=y.replace(V,""),l.setText(y),l.setCursorPos(b[0].length+(0,o.xy2expr)(v,h).length)}else{var X=l.pos,G=t||c.call(this,h,v);if(-1!==X){for(var K="",Z=!1,q=X,Q="",J=X;J<g.length;J++)Q+=g[J];for(var ee=(0,r.cutFirst)(Q).length,te=0;te<g.length;te++)X===te&&(Z=!0,K+=(0,o.xy2expr)(v,h)),q===te&&ee>0?(q+=1,ee-=1):K+=g[te];if(t){var ie=n.selector.range,ae=ie.sri,ne=ie.sci,re=ie.eri,oe=ie.eci,le=(0,o.xy2expr)(ne,ae),se=(0,o.xy2expr)(oe,re);y=le===se?le:"".concat(le,":").concat(se),K=Z?K:K+y}else this.selectors.push(G),K=Z?K:K+(0,o.xy2expr)(v,h);l.setText(K),l.setCursorPos(K.length),l.parse()}else this.selectors.push(G),y="".concat(g).concat((0,o.xy2expr)(v,h)),l.setText(y)}if(l.parse(l.pos),this.selectors.length>0||t){var de=l.editorText.getText(),ce=!1,ue=this.data.merges;Object.keys(ue._).forEach((function(e){for(var t=ue._[e],i=(0,r.cutStr)(de,!0),a=0;a<i.length;a++)if(-1!==i[a].indexOf(":")){var n=i[a].split(":")[0],l=i[a].split(":")[1],s=(0,o.expr2xy)(n),d=(0,o.expr2xy)(l);t.sci>=s[0]&&t.sri>=s[1]&&t.eci<=d[0]&&t.eri<=d[1]&&(de=de.replace(new RegExp(i[a],"g"),n),ce=!0)}})),f.call(this,(0,r.cutting)(de),(0,r.cutting2)(de)),ce&&setTimeout((function(){l.setCursorPos(de.length)}),10)}},t.clearSelectors=function(){this.selectorsEl.html(""),this.selectors=[];var e=this.editor,t=this.selector;e.setLock(!1),e.state=1,t.el.show()},t.editingSelectors=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if("number"==typeof t)return;var i=(0,r.cutStr)(t,!0),a=d.call(this,i).selectors_delete;Object.keys(a).forEach((function(e){a[e].removeEl()}));var n=[];Object.keys(i).forEach((function(t){var a=1;Object.keys(e.selectors).forEach((function(t){e.selectors[t].selector.el.removeEl()}));var l="",s=i[t].replace(/\$/g,"");if((0,r.isAbsoluteValue)(i[t])){var d=i[t].replace(/\$/g,"");l=(0,o.expr2xy)(d)}else-1!==s.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)?a=2:l=(0,o.expr2xy)(i[t]);if(1===a){var u=l[1],m=l[0],h=c.call(e,u,m,n);h.erpx=i[t],n.push(h)}else if(2===a){var f=i[t].replace(/\$/g,"").split(":")[0],v=i[t].replace(/\$/g,"").split(":")[1],p=(0,o.expr2xy)(f),g=(0,o.expr2xy)(v),y=c.call(e,p[1],p[0],n,!0,null,!1);(y=c.call(e,g[1],g[0],n,!0,y.selector,!0)).erpx=i[t],n.push(y)}})),this.selectors=n,(this.selectors.length>0||"="===t[0])&&f.call(this,(0,r.cutting)(t),(0,r.cutting2)(t))},t.findBracket=function(e,t,i){var a={left:0,right:0,exist:!1};if(")"!==i[e])return a;var n=e,r=u.call(this,t,n);-1!==r&&-1!==n&&(a={left:r,right:n,exist:!0});return a},t.suggestContent=h,t.makeSelector=c;var a,n=(a=i(111))&&a.__esModule?a:{default:a},r=i(4),o=i(5),l=i(53),s=i(0);function d(e){var t=this,i=[],a=[];return Object.keys(this.selectors).forEach((function(n){for(var r=t.selectors[n],o=r.erpx,l=0,s=0;s<e.length&&0===l;s++)e[s].replace(/\$/g,"")===o&&(l=1,i.push(r));0===l&&a.push(r.selector.el)})),{selectors_delete:a,selectors_new:i}}function c(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.selectors,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4?arguments[4]:void 0,d=arguments.length>5?arguments[5]:void 0,c=this.data,u=null,m=this.editor.editorText.getText(),h=(0,l.selectorColor)(i.length),f=h.color,v=h.index;if(s)u=s;else{var p="selector".concat(999999*Math.random());(u=new n.default(c,this,p)).el.attr("class","".concat(p," clear_selector")),u.setCss(f)}a?d?u.setEnd(e,t):u.set(e,t,!0):u.set(e,t,!1),u.el.css("z-index","100");var g=m.split((0,o.xy2expr)(t,e)).length-2,y=(0,o.xy2expr)(t,e),b=c.merges;Object.keys(b._).forEach((function(e){for(var t=b._[e],i=(0,r.cutStr)(y,!0),a=0;a<i.length;a++)if(-1!==i[a].indexOf(":")){var n=i[a].split(":")[0],l=i[a].split(":")[1],s=(0,o.expr2xy)(n),d=(0,o.expr2xy)(l);t.sci>=s[0]&&t.sri>=s[1]&&t.eci<=d[0]&&t.eri<=d[1]&&(y=y.replace(new RegExp(i[a],"g"),n))}}));var x={ri:e,ci:t,index:g,color:f,index2:v,className:u.el.el.className,erpx:y,selector:u};return d||(u.el.show(),this.selectorsEl.child(u.el)),a?x:(this.selectorsEl.child(u.el),x)}function u(e,t){for(var i=-1,a=0,n=!1,r=t-1;r>0&&!1===n;r--)"("===e[r]&&(n=!0),")"===e[r]&&a++;for(var o=t;o>0&&-1===i;o--)"("===e[o]&&(0===a&&(i=o),a--);return i}function m(e,t){for(var i=-1,a=0,n=!1,r=t+1;r<e.length&&!1===n;r++)")"===e[r]&&(n=!0),"("===e[r]&&a++;for(var o=t;o<e.length&&-1===i;o++)")"===e[o]&&(0===a&&(i=o),a--);return i}function h(e,t,i){var a={suggestContent:!1,cut:"",pos:1},n=e-1,o=u.call(this,t,n),l=m.call(this,t,o);o<=n&&-1!==o&&(l>=n||-1===l)&&(a.suggestContent=!0,a.cut=(0,r.cuttingByPos)(i,o));for(var s=o;s<n+1;s++)","===i[s]&&(a.pos+=2);return a}function f(e,t){var i=this.editor,a=[],n=-1,r=-1;Object.keys(e).forEach((function(i){var n=(0,s.h)("span","formula_span".concat(i));Object.keys(t).forEach((function(){if(t[i]&&-1!==t[i].code&&t[i].data===e[i]){var a=(0,l.selectorColor)(t[i].code).color;n.css("color",a)}})),n.css("display","inline-block"),n.css("cursor","text")," "===e[i]?n.html("&emsp;"):n.html(e[i]),a.push(n)}));var o=i.pos,d=i.editorText.getText(),c={suggestContent:!1,cut:""};if(")"===d[o-1]?(n=o-1,r=u.call(this,e,n)):c=h.call(this,o+1,e,d),""!==d&&a.length<=0){var m=(0,s.h)("span","formula_span");a.push(m)}i.mount2span(a,n,r,c)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFontSizePxByPt=function(e){for(var t=0;t<a.length;t+=1){var i=a[t];if(i.pt===e)return i.px}return e},t.baseFonts=t.fontSizes=void 0;t.baseFonts=[{key:"Arial",title:"Arial"},{key:"Helvetica",title:"Helvetica"},{key:"Source Sans Pro",title:"Source Sans Pro"},{key:"Comic Sans MS",title:"Comic Sans MS"},{key:"Courier New",title:"Courier New"},{key:"Verdana",title:"Verdana"},{key:"Lato",title:"Lato"}];var a=[{pt:7.5,px:10},{pt:8,px:11},{pt:9,px:12},{pt:10,px:13},{pt:10.5,px:14},{pt:11,px:15},{pt:12,px:16},{pt:14,px:18.7},{pt:15,px:20},{pt:16,px:21.3},{pt:18,px:24},{pt:22,px:29.3},{pt:24,px:32},{pt:26,px:34.7},{pt:36,px:48},{pt:42,px:56}];t.fontSizes=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.testValid=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.valid;(0,a.isHave)(e)&&e.assert()};var a=i(7)},function(e,t,i){"use strict";function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.MockCalc=t.fnNameArrayWithKey=t.emptyWorkbook=t.allFnObj=void 0;var n=["abs","add"];t.allFnObj=n;t.emptyWorkbook={sheets:{sheet1:{A1:{}}}};var r=Object.getOwnPropertyNames(n).map((function(e){return{key:e,title:e}}));t.fnNameArrayWithKey=r;var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,n;return t=e,(i=[{key:"calculateRows",value:function(e,t){return null}}])&&a(t.prototype,i),n&&a(t,n),e}();t.MockCalc=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFormula=x,t.Rows=void 0;var a=i(15),n=i(7),r=i(5),o=i(4),l=v(i(33)),s=i(4),d=v(i(34)),c=v(i(97)),u=v(i(49)),m=v(i(3)),h=v(i(20)),f=v(i(98));function v(e){return e&&e.__esModule?e:{default:e}}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function x(e){return e&&"="===e[0]}function A(e,t,i,a,n,r,o,l){var s=this.getCellByTopCell(e,i,a,"other",l,0),d=s.text,c=s.formulas,u=""!==c?c:d;this.isFormula(u)?this.calcFormulaCellByTopCell(u,t,e,i,a,r):this.calcCellByTopCell(r,n,s,t,a,u,e,d)}function w(e,t,i,a,n,r,o,l){var s="";a?n=Math.abs(n):n*=-1,l?s=this.getCellByTopCell(e,i,a):(s={text:e.v,formulas:e.v},n=0),this.calcNumberCellByTopCell(s,n,t,e,r,o)}function E(e,t,i,a,n,r,o){var l=t,s="",d=i?1:-1;o?s=this.getCellByTopCell(e,l,i,"date"):(s={text:e.v,formulas:e.v},d=0),this.calcDateCellByTopCell(s,a,e,i,n,r,d)}var C=function(){function e(t){var i=t.len,a=t.height,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._={},this.len=i,this.height=a,this.data=n,this.pasteProxy=new c.default,this.workbook=null}var t,i,v;return t=e,(i=[{key:"getHeight",value:function(e){var t=this.get(e);return t&&t.height?t.height:this.height}},{key:"setHeight",value:function(e,t){this.getOrNew(e).height=t}},{key:"setStyle",value:function(e,t){this.getOrNew(e).style=t}},{key:"sumHeight",value:function(e,t,i){var n=this;return(0,a.rangeSum)(e,t,(function(e){return i&&i.has(e)?0:n.getHeight(e)}))}},{key:"totalHeight",value:function(){return this.sumHeight(0,this.len)}},{key:"get",value:function(e){return this._[e]}},{key:"getOrNew",value:function(e){return this._[e]=this._[e]||{cells:{}},this._[e]}},{key:"getCell",value:function(e,t){var i=this.get(e);return void 0!==i&&void 0!==i.cells&&void 0!==i.cells[t]&&((0,n.isHave)(i.cells[t].text)||(0,n.isHave)(i.cells[t].formulas)||(0,n.isHave)(i.cells[t].style||"object"===y(i.cells[t])))?i.cells[t]:null}},{key:"getCellMerge",value:function(e,t){var i=this.getCell(e,t);return i&&i.merge?i.merge:[0,0]}},{key:"getCellOrNew",value:function(e,t){var i=this.getOrNew(e);return i.cells[t]=i.cells[t]||{},i.cells[t]}},{key:"toString",value:function(e){return!1===(0,n.isHave)(e)&&(e=""),e+""}},{key:"isBackEndFunc",value:function(e){return-1!==e.indexOf("MD.RTD")}},{key:"isReferOtherSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.formulas&&"="===e.formulas[0]&&(t||(0,s.isSheetVale)(e.formulas))}},{key:"isEmpty",value:function(e){return e&&(e.text||e.formulas||e.depend)}},{key:"isFormula",value:function(e){return x(e)}},{key:"setValue",value:function(e,t,i){i[e]=t}},{key:"setCell",value:function(e,t,i){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all",o=this.data,l=this.getOrNew(e),s=new f.default;if(s.setCell(i),"all"===a)l.cells[t]=s;else if("formulas"===a)l.cells[t]=l.cells[t]||{},l.cells[t].formulas=s.formulas;else if("text"===a)l.cells[t]=l.cells[t]||{},l.cells[t].text=s.text;else if("format"===a)l.cells[t]=l.cells[t]||{},l.cells[t].style=s.style,i.merge&&(l.cells[t].merge=s.merge);else if("date"===a||"datetime"===a)(0,n.isHave)(l.cells[t])||(l.cells[t]={}),this.isFormula(i.formulas)?l.cells[t].formulas=s.formulas:l.cells[t].formulas=s.text,l.cells[t].text=s.text,l.cells[t].style=s.style,l.cells[t].to_calc_num=s.to_calc_num;else if("normal"===a||"number"===a)(0,n.isHave)(l.cells[t])||(l.cells[t]={}),this.isFormula(i.formulas)?l.cells[t].formulas=s.formulas:l.cells[t].formulas=s.text,l.cells[t].text=s.text,l.cells[t].style=s.style;else if("rmb"===a||"percent"===a)(0,n.isHave)(l.cells[t])||(l.cells[t]={}),l.cells[t].text=s.text,l.cells[t].formulas=s.formulas,l.cells[t].style=s.style;else{if("all_with_no_workbook"===a)return void(l.cells[t]=s);if("style"===a)return(0,n.isHave)(l.cells[t])||(l.cells[t]={}),void(l.cells[t].style=s.style);"assign"===a&&Object.assign(l.cells[t],i)}this.getDependCell((0,r.xy2expr)(t,e),this.getCell(e,t)),s.setFormatText(o.tryParseToNum(s,e,t))}},{key:"getDependCell",value:function(e,t){var i=t.formulas;if(!1!==(0,n.isHave)(i)&&x(i)){for(var a=(0,o.cutStr)(i,!0,!0),l=0;l<a.length;l++){var d,c=this.mergeCellExpr(a[l]);c.state&&(d=a).push.apply(d,g(c.mergeArr))}a=(0,s.distinct)(a),!1===(0,n.isHave)(t.depend)&&(t.depend=[]);for(var u=0;u<a.length;u++){var m=a[u],h=p((0,r.expr2xy)(m),2),f=h[0],v=h[1],y=this.getCell(v,f);!1===(0,n.isHave)(y)&&(y={}),!1===(0,n.isHave)(y.depend)&&(y.depend=[]),y.depend.push(e),y.depend=(0,s.distinct)(y.depend),this.setCell(v,f,y,"all_with_no_workbook")}}}},{key:"mergeCellExpr",value:function(e){if(!(0,o.isAbsoluteValue)(e,6))return{state:!1};e=(e=e.replace(/\$/g,"")).split(":");var t=(0,r.expr2xy)(e[0]),i=(0,r.expr2xy)(e[1]);if(t[0]>i[0]){var a=i[0];i[0]=t[0],t[0]=a}if(t[1]>i[1]){var n=i[1];i[1]=t[1],t[1]=n}var l=new m.default(t[1],t[0],i[1],i[0]),s=[];return l.each((function(e,t){s.push((0,r.xy2expr)(t,e))})),{state:!0,mergeArr:s}}},{key:"useOne",value:function(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return!1===(0,n.isHave)(e)?t:i&&this.isFormula(e)?t:e}},{key:"setCellText",value:function(e,t,i){var a=i.text,n=i.style,o=i.formulas,l=i.merge,s=void 0===l?"":l,d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all";if("all_with_no_workbook"!==d){var c=this.getCellOrNew(e,t),u=new f.default;u.setCell(c),"style"===d?(u.style=n,u.formulas=a):"format"===d?(u.formulas=c.formulas,u.style=n):"cell"===d?(u.style=n,u.formulas=o,u.merge=void 0,""!==s&&(u.merge=s)):u.formulas=a,u.text=a,this.setCell(e,t,u),this.getDependCell((0,r.xy2expr)(t,e),this.getCell(e,t))}else this.setCell(e,t,{},"all_with_no_workbook")}},{key:"setCellAll",value:function(e,t,i){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",n=this.getCellOrNew(e,t),o=new f.default;o.formulas=""===a?n.formulas:a,o.text=i,this.setCell(e,t,o,"formulas"),this.setCell(e,t,o,"text"),this.getDependCell((0,r.xy2expr)(t,e),this.getCell(e,t))}},{key:"moveChange",value:function(e,t,i){var a=this;if(e.length===t.length||i.length===t.length)for(var r=function(r){var l=e[r].expr;e[r].each((function(e,s){var d=a.getCell(e,s);!1===(0,n.isHave)(d)&&(d={}),(0,n.isHave)(d.formulas)||(d.formulas="");var c=(0,o.changeFormula)((0,o.cutStr)(d.formulas));if(-1!==c.indexOf(l)){var u=i[r].expr.replace(/\$/g,"\\$");a.setCellAll(e,s,d.text.replace(new RegExp(u,"g"),t[r].expr),d.formulas.replace(u,t[r].expr))}else{var m=(0,o.value2absolute)(l),h=(0,o.value2absolute)(t[r].expr);-1!==c.indexOf(m.s3)?((m=(0,o.value2absolute)(i[r].expr)).s3=m.s3.replace(/\$/g,"\\$"),a.setCellAll(e,s,d.text.replace(new RegExp(m.s3,"g"),h.s3),d.formulas.replace(new RegExp(m.s3,"g"),h.s3))):-1!==c.indexOf(m.s2)?((m=(0,o.value2absolute)(i[r].expr)).s2=m.s2.replace(/\$/g,"\\$"),a.setCellAll(e,s,d.text.replace(new RegExp(m.s2,"g"),h.s2),d.formulas.replace(new RegExp(m.s2,"g"),h.s2))):-1!==c.indexOf(m.s1)&&((m=(0,o.value2absolute)(i[r].expr)).s1=m.s1.replace(/\$/g,"\\$"),a.setCellAll(e,s,d.text.replace(new RegExp(m.s1,"g"),h.s1),d.formulas.replace(new RegExp(m.s1,"g"),h.s1)))}}))},l=0;l<e.length;l++)r(l)}},{key:"formatMoney",value:function(e,t){if(/[^0-9\.]/.test(e))return"0";if(null==e||""===e)return"0";e=(e=((e=e.toString().replace(/^(\d*)$/,"$1."))+"00").replace(/(\d*\.\d\d)\d*/,"$1")).replace(".",",");for(var i=/(\d)(\d{3},)/;i.test(e);)e=e.replace(i,"$1,$2");if(e=e.replace(/,(\d\d)$/,".$1"),0===t){var a=e.split(".");"00"===a[1]&&(e=a[0])}return e}},{key:"getCellStyleConvert",value:function(e,t){return e&&e.format&&"number"===e.format?"number":e&&e.format&&"rmb"===e.format?"rmb":e&&e.format&&"normal"===e.format?"normal":e&&e.format&&"percent"===e.format?"percent":e&&e.format&&"datetime"===e.format?"datetime":t&&!(0,n.isHave)(e)||t&&e&&"normal"!==e.format||e&&e.format&&"date"===e.format?"date":""}},{key:"getCellTextIsAdd",value:function(e,t,i,a,n,o){var l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,s=arguments.length>7?arguments[7]:void 0,d=!1,c="";return e&&(t<=i[1]&&a&&s?(c=(0,r.xy2expr)(i[0]+n,i[1]+o,l),d=!0):t<=i[1]&&!a&&s?(c=(0,r.xy2expr)(i[0]+n,i[1]+o,l),d=!0):t<=i[0]&&a&&!1===s&&(c=(0,r.xy2expr)(i[0]+n,i[1]+o,l),d=!0)),{enter:d,data:c}}},{key:"eachRange",value:function(e){var t=this,i=[];return e.each((function(e,a){var o,l,d,c=t.getCell(e,a);if((0,n.isHave)(c)){var u=(o=c,!((0,n.isHave)(o)&&""!==o||(0,n.isHave)(l)&&""!==l||(0,n.isHave)(d)));c=(0,s.deepCopy)(c);var m=new h.default(e,a,c,(0,r.xy2expr)(e,a),u);i.push(m)}else{c={};var f=new h.default(e,a,c,(0,r.xy2expr)(e,a),!0);i.push(f)}})),i}},{key:"getCellTextByShift",value:function(e,t,i){for(var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,s=arguments.length>6&&void 0!==arguments[6]&&arguments[6],d=!1,c=!1,u="",m=0;m<e.length;m++){if("string"==typeof e[m]&&(e[m]=e[m].toUpperCase()),-1!==e[m].search(/^[A-Z]+\d+$/)){var h=(0,r.expr2xy)(e[m]);(h[0]+t<0||h[1]+i<0)&&(d=!0);var f=this.getCellTextIsAdd(a,l,h,n,t,i,0,s);f.enter?e[m]=f.data:!1===a&&(e[m]=(0,r.xy2expr)(h[0]+t,h[1]+i)),c=!0}else if(-1!==e[m].search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var v=e[m].split(":")[0],p=e[m].split(":")[1],g=(0,r.expr2xy)(v),y=(0,r.expr2xy)(p);(g[0]+t<0||g[1]+i<0)&&(d=!0),(y[0]+t<0||y[1]+i<0)&&(d=!0);var b="",x=this.getCellTextIsAdd(a,l,g,n,t,i,0,s);b=x.enter?x.data+":":!1===a?(0,r.xy2expr)(g[0]+t,g[1]+i)+":":v+":",(x=this.getCellTextIsAdd(a,l,y,n,t,i,0,s)).enter?b+=x.data:b+=!1===a?(0,r.xy2expr)(y[0]+t,y[1]+i):p,c=!0,e[m]=b}else{var A=(0,o.isAbsoluteValue)(e[m],5);if(2===A){var w=(0,r.expr2xy)(e[m].replace(/\$/g,""));(w[0]+t<0||w[1]+i<0)&&(d=!0);var E=this.getCellTextIsAdd(a,l,w,n,t,i,2,s);E.enter?e[m]=E.data:!1===a&&(e[m]=(0,r.xy2expr)(w[0]+t,w[1],2)),c=!0}else if(1===A){var C=(0,r.expr2xy)(e[m].replace(/\$/g,""));(C[0]+t<0||C[1]+i<0)&&(d=!0);var T=this.getCellTextIsAdd(a,l,C,n,t,i,1,s);T.enter?e[m]=T.data:!1===a&&(e[m]=(0,r.xy2expr)(C[0],C[1]+i,1)),c=!0}else if(4===A){var O=e[m].split(":");console.log(e[m],O);for(var S=0;S<O.length;S++){var R=(0,r.expr2xy)(O[S].replace(/\$/g,""));(R[0]+t<0||R[1]+i<0)&&(d=!0);var k=this.getCellTextIsAdd(a,l,R,n,t,i,2,s);k.enter?O[S]=k.data:!1===a&&(O[S]=(0,r.xy2expr)(R[0]+t,R[1],2))}e[m]=O.join(":"),c=!0}else if(5===A){for(var I=e[m].split(":"),P=0;P<I.length;P++){var D=(0,r.expr2xy)(I[P].replace(/\$/g,""));if((D[0]+t<0||D[1]+i<0)&&(d=!0),1===P){var M=this.getCellTextIsAdd(a,l,D,n,t,i,1,s);M.enter?I[P]=M.data:!1===a&&(I[P]=(0,r.xy2expr)(D[0],D[1]+i,1))}else{var N=this.getCellTextIsAdd(a,l,D,n,t,i,2,s);N.enter?I[P]=N.data:!1===a&&(I[P]=(0,r.xy2expr)(D[0],D[1]+i,2))}}e[m]=I.join(":"),c=!0}else if(7===A){for(var _=e[m].split(":"),L=0;L<_.length;L++){var j=(0,r.expr2xy)(_[L].replace(/\$/g,""));(j[0]+t<0||j[1]+i<0)&&(d=!0);var B=this.getCellTextIsAdd(a,l,j,n,t,i,1,s);B.enter?_[L]=B.data:!1===a&&(_[L]=(0,r.xy2expr)(j[0],j[1]+i,1))}e[m]=_.join(":"),c=!0}else if(6===A){for(var F=e[m].split(":"),U=0;U<F.length;U++){var H=(0,r.expr2xy)(F[U].replace(/\$/g,""));if((H[0]+t<0||H[1]+i<0)&&(d=!0),0===U){var V=this.getCellTextIsAdd(a,l,H,n,t,i,1,s);V.enter?F[U]=V.data:!1===a&&(F[U]=(0,r.xy2expr)(H[0],H[1]+i,1))}else{var z=this.getCellTextIsAdd(a,l,H,n,t,i,2,s);z.enter?F[U]=z.data:!1===a&&(F[U]=(0,r.xy2expr)(H[0]+t,H[1],2))}}e[m]=F.join(":"),c=!0}else if(8===A){for(var W=e[m].split(":"),$=0;$<W.length;$++){var Y=(0,r.expr2xy)(W[$].replace(/\$/g,""));if((Y[0]+t<0||Y[1]+i<0)&&(d=!0),0===$){var X=this.getCellTextIsAdd(a,l,Y,n,t,i,0,s);X.enter?W[$]=X.data:!1===a&&(W[$]=(0,r.xy2expr)(Y[0]+t,Y[1]+i,0))}else{var G=this.getCellTextIsAdd(a,l,Y,n,t,i,1,s);G.enter?W[$]=G.data:!1===a&&(W[$]=(0,r.xy2expr)(Y[0]+t,Y[1],1))}}e[m]=W.join(":"),c=!0}else if(9===A){for(var K=e[m].split(":"),Z=0;Z<K.length;Z++){var q=(0,r.expr2xy)(K[Z].replace(/\$/g,""));if((q[0]+t<0||q[1]+i<0)&&(d=!0),0===Z){var Q=this.getCellTextIsAdd(a,l,q,n,t,i,1,s);Q.enter?K[Z]=Q.data:!1===a&&(K[Z]=(0,r.xy2expr)(q[0]+t,q[1]+i,0))}else{var J=this.getCellTextIsAdd(a,l,q,n,t,i,2,s);J.enter?K[Z]=J.data:!1===a&&(K[Z]=(0,r.xy2expr)(q[0]+t,q[1],2))}}e[m]=K.join(":"),c=!0}else if(10===A){for(var ee=e[m].split(":"),te=0;te<ee.length;te++){var ie=(0,r.expr2xy)(ee[te].replace(/\$/g,""));if((ie[0]+t<0||ie[1]+i<0)&&(d=!0),1===te){var ae=this.getCellTextIsAdd(a,l,ie,n,t,i,0,s);ae.enter?ee[te]=ae.data:!1===a&&(ee[te]=(0,r.xy2expr)(ie[0]+t,ie[1]+i,0))}else{var ne=this.getCellTextIsAdd(a,l,ie,n,t,i,2,s);ne.enter?ee[te]=ne.data:!1===a&&(ee[te]=(0,r.xy2expr)(ie[0]+t,ie[1],2))}}e[m]=ee.join(":"),c=!0}else if(11===A){for(var re=e[m].split(":"),oe=0;oe<re.length;oe++){var le=(0,r.expr2xy)(re[oe].replace(/\$/g,""));if((le[0]+t<0||le[1]+i<0)&&(d=!0),1===oe){var se=this.getCellTextIsAdd(a,l,le,n,t,i,0,s);se.enter?re[oe]=se.data:!1===a&&(re[oe]=(0,r.xy2expr)(le[0]+t,le[1]+i,0))}else{var de=this.getCellTextIsAdd(a,l,le,n,t,i,1,s);de.enter?re[oe]=de.data:!1===a&&(re[oe]=(0,r.xy2expr)(le[0]+t,le[1],1))}}e[m]=re.join(":"),c=!0}}u+=e[m]}return{bad:d,enter:c,result:u}}},{key:"autoFilterRef",value:function(e,t){for(var i=p((0,r.expr2xy)(e),2),a=i[0],n=i[1],o=this.getCell(n,a);null!==o;)n+=1,o=this.getCell(n,a);return t.eri=n,t}},{key:"getAllDataType",value:function(e){var t=this,i=!0,a=!0,n=[];return e.each((function(e,r){var o=!1,l=t.getCell(e,r);if(l){l=(0,s.deepCopy)(l);var d=new u.default(l).getCellDataType(n,{isDate:a,isNumber:i});a=d.isDate,i=d.isNumber}else o=!0,i=!1,a=!1;o&&n.push({text:0,formulas:0,tmp:"",type:"other"})})),{isDate:a,isNumber:i,sarr:n}}},{key:"calcNumberCellByTopCell",value:function(e,t,i,a,n,r){var o=e.text,l=e.formulas;o=this.toString(o),l=this.toString(l);var s={};if(this.isFormula(l)){var d=1*o.replace("=","")+t;s={text:"="+d,formulas:"="+d}}else if(""!==o){var c=1*o;if(-1!==o.indexOf(",")){c=c.replace(/,/g,"");var u=parseFloat(c)+t;c=this.formatMoney(u,0)}else c+=t;s={text:c+"",formulas:c+""}}this.copyRender(i,a.ri,a.ci,s,n,r)}},{key:"calcFormulaCellByTopCell",value:function(e,t,i,a,n,r){var o=(0,s.splitStr)(e),l=this.getRangeByTopCell({ri:i.ri,ci:i.ci},a,n),d=i.ri-l.ri,c=i.ci-l.ci,u=this.getCellTextByShift(o,c,d),m=u.bad,h=u.result;this.updateCellReferenceByShift(m,h,i.ri,i.ci,r)}},{key:"calcCellByTopCell",value:function(e,t,i,a,r,o,l,s){if((0,n.isHave)(o)||(o=""),isNaN(o)){var d=this.toString(o).split(/\d+/g);if(d){var c=0;i.text=r?o.replace(/\d+/g,(function(e){return c+=1,d.length-1===c?1*e+1:e})):o.replace(/\d+/g,(function(e){return c+=1,d.length-1===c?1*e-1:e})),i.formulas=i.text}}else i.text=o,i.formulas=i.text;this.copyRender(a,l.ri,l.ci,i,t,e)}},{key:"calcDateCellByTopCell",value:function(e,t,i,a,n,r,o){if(""!==e.text){var s=e.text,d="";d=(0,l.default)(s).add(o,"day").format("YYYY-MM-DD"),e.text=this.toString(d),e.formulas=this.toString(d),this.copyRender(t,i.ri,i.ci,e,n,r)}}},{key:"getRangeByTopCell",value:function(e,t,i){var a=e.ri,n=e.ci;return i?(a=t?a:a-1,n=t?n-1:n):(a=t?a:a+1,n=t?n+1:n),{ri:a,ci:n}}},{key:"getCellByTopCell",value:function(e,t,i){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all",n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(arguments.length>5&&void 0!==arguments[5]&&arguments[5],"date"!==a){var r=this.getRangeByTopCell({ri:i?e.ri-n:e.ri+n,ci:e.ci},t,i),o=r.ri,l=r.ci;return this.getCellByCell(o,l)}if(1===t){var s=this.getRangeByTopCell({ri:i?e.ri-n:e.ri+n,ci:e.ci},!1,i),d=s.ri,c=s.ci;return this.getCellByCell(d,c)}return 2===t?this.getCellByCell(e.ri,e.ci-1):3===t?this.getCellByCell(e.ri,e.ci+1):void 0}},{key:"getCellByCell",value:function(e,t){var i=this.getCell(e,t);return i||(i={text:"",formulas:""}),(0,a.cloneDeep)(i)}},{key:"updateCellReferenceByShift",value:function(e,t,i,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},r={};e?(r.text="#REF!",r.formulas="#REF!"):(r.text=""!==t?t:"",r.formulas=""!==t?t:""),this.setCell(i,a,r,"all"),n(i,a,r)}},{key:"copyPaste",value:function(e,t,i){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},n=this.pasteProxy;n.setSrcAndDstCellRange(e,t);for(var r=n.use(),o=r.rn,l=r.cn,s=n.autoFilterDirection(),d=s?o:l,c=0;c<d;c++){for(var u=n.upOrDown(),m=n.getOneDRangeObj(s,c),h=m.srcOneDRange,f=m.dstOneDRange,v=this.getAllDataType(h),p=v.isNumber,g=v.isDate,y=v.sarr,b=f.getLocationArray(y),x=n.leftOrRight(),C=!1,T=0;T<b.length;T++){var O=b[T];(p||"number"===O.type||g||"date"===O.type)&&(C=!0)}if(u)for(var S=0;S<b.length;S++){var R=b[S];if(p||"number"===R.type){var k=n.calcDiff(y,u);w.call(this,b[S],b,s,u,k,i,a,p)}else g||"date"===R.type?E.call(this,b[S],x,u,b,i,a,g):A.call(this,b[S],b,s,u,i,a,C,y.length-1)}else for(var I=b.length-1;I>=0;I--){var P=b[I];if(p||"number"===P.type){var D=n.calcDiff(y,u);w.call(this,b[I],b,s,u,D,i,a,p)}else g||"date"===P.type?E.call(this,b[I],x,u,b,i,a,g):A.call(this,b[I],b,s,u,i,a,C,y.length-1)}}}},{key:"copyRender",value:function(e,t,i,a,n,r){for(var o=!1,l=0;!1===o&&l<e.length;l++)e[l].ri===t&&e[l].ci===i&&(o=!0);o&&(this.setCell(t,i,a,n),r(t,i,a))}},{key:"cutPaste",value:function(e,t){var i=this,a=[];this.each((function(n){i.eachCells(n,(function(r){var o=parseInt(n,10),l=parseInt(r,10);e.includes(n,r)&&(o=t.sri+(o-e.sri),l=t.sci+(l-e.sci)),1*n===o&&1*r===l||""!==i._[n].cells[r].text&&""!==i._[n].cells[r].formulas&&a.push({nri:o,nci:l,ri:n,ci:r,cell:(0,s.deepCopy)(i._[n].cells[r])})}))}));for(var n=0;n<a.length;n++){var r=a[n],o=r.ri,l=r.ci;this.setCell(o,l,{},"all")}for(var d=0;d<a.length;d++){var c=a[d],u=c.nri,m=c.nci,h=c.cell;this.setCell(u,m,h,"all")}}},{key:"insert",value:function(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,a={},r=[];this.each((function(o,l){var d=parseInt(o,10);d>=e&&(d+=i,t.eachCells(o,(function(a,o){if((0,n.isHave)(o)&&(0,n.isHave)(o.formulas)&&t.isFormula(o.formulas)){var l=t.getCellTextByShift((0,s.splitStr)(o.formulas),0,i,!0,!0,e,!0),c=l.bad,u=l.result;l.enter&&!c&&r.push({ri:d,ci:a,cell:{text:u,formulas:u}})}}))),a[d]=l})),this._=a;for(var o=0;o<r.length;o++){var l=r[o],d=l.ri,c=l.ci,u=l.cell;this.setCell(d,c,u,"all")}this.len+=i}},{key:"delete",value:function(e,t){var i=this,a=t-e+1,r={},o=[];this.each((function(l,d){var c=parseInt(l,10);c<e?r[c]=d:l>t&&(r[c-a]=d,i.eachCells(l,(function(t,r){if((0,n.isHave)(r)&&(0,n.isHave)(r.formulas)&&i.isFormula(r.formulas)){var l=i.getCellTextByShift((0,s.splitStr)(r.formulas),0,-1*a,!0,!1,e,!0),d=l.bad,u=l.result;l.enter&&!d&&o.push({ri:c-a,ci:t,cell:{text:u,formulas:u}})}})))})),this._=r;for(var l=0;l<o.length;l++){var d=o[l],c=d.ri,u=d.ci,m=d.cell;this.setCell(c,u,m,"all")}this.len-=a}},{key:"insertColumn",value:function(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,a=[];this.each((function(r,o){var l={};t.eachCells(r,(function(o,d){var c=parseInt(o,10);if(c>=e&&(c+=i,(0,n.isHave)(d)&&(0,n.isHave)(d.formulas)&&t.isFormula(d.formulas))){var u=t.getCellTextByShift((0,s.splitStr)(d.formulas),i,0,!0,!0,e,!1),m=u.bad,h=u.result;u.enter&&!m&&a.push({ri:r,ci:c,cell:{text:h,formulas:h}})}l[c]=d})),o.cells=l}));for(var r=0;r<a.length;r++){var o=a[r],l=o.ri,d=o.ci,c=o.cell;this.setCell(l,d,c,"all")}}},{key:"deleteColumn",value:function(e,t){var i=this,a=t-e+1;this.each((function(n,r){var o={};i.eachCells(n,(function(i,n){var r=parseInt(i,10);r<e?o[r]=n:r>t&&(o[r-a]=n)})),r.cells=o}))}},{key:"deleteCells",value:function(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"all";e.each((function(e,a){t.deleteCell(e,a,i)}))}},{key:"deleteCell",value:function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"all",a=this.get(e);if(null!==a){var r=this.getCell(e,t);null!==r&&("all"===i?delete a.cells[t]:"text"===i?((0,n.isHave)(r.text)&&delete r.text,(0,n.isHave)(r.value)&&delete r.value,(0,n.isHave)(r.formulas)&&delete r.formulas):"format"===i?(void 0!==r.style&&delete r.style,r.merge&&delete r.merge):"merge"===i&&r.merge&&delete r.merge)}}},{key:"each",value:function(e){Object.entries(this._).forEach((function(t){var i=p(t,2),a=i[0],n=i[1];e(a,n)}))}},{key:"eachCells",value:function(e,t){this._[e]&&this._[e].cells&&Object.entries(this._[e].cells).forEach((function(e){var i=p(e,2),a=i[0],n=i[1];t(a,n)}))}},{key:"recast",value:function(e){try{if(this.isReferOtherSheet(e,!0)){var t=new d.default(e.formulas);t.parse(),e.recast=t}else e.recast=null}catch(t){e.recast=null}}},{key:"init",value:function(){var e=this;this.each((function(t){e.eachCells(t,(function(i){e.getDependCell((0,r.xy2expr)(i,t),e.getCell(t,i))}))}))}},{key:"setData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];try{e.len&&(this.len=e.len,delete e.len),this._=e,i||""!==t&&(console.time("setData"),a&&(this.init(),t.toolbar.change("close","")),console.timeEnd("setData"))}catch(e){console.error(e)}}},{key:"getData",value:function(){var e=this.len;return Object.assign({len:e},this._)}}])&&b(t.prototype,i),v&&b(t,v),e}();t.Rows=C},,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.process=v,t.mountImg=g,t.isHaveStyle=function(e,t){for(var i=0;i<e.length;i++)if(x(e[i],t))return i;return-1},t.mountPaste=function(e,t){for(var i=this,r=e.clipboardData,o=!1,l=0;l<r.items.length;l++){var s=r.items[l];if("string"===s.kind)s.getAsString((function(e){var t=(0,n.h)("head",""),r=(0,n.h)("span","");-1===e.indexOf("<span")&&-1===e.indexOf("span>")&&-1===e.indexOf("<table")&&-1===e.indexOf("table>")?(r.html(e),t.child(r.el),t=t.el):(t.html(e),t=t.el);var l=t.getElementsByTagName("img")[0],s=t.getElementsByTagName("style")[0],d=t.getElementsByTagName("table")[0],c=t.getElementsByTagName("span")[0];if(l&&!s)g.call(i,l),o=!0;else if(d){if(s)i.el.child(s);d&&!1===o&&(v.call(i,d,s),o=!0)}else setTimeout((function(){if(!o){if(c&&(d=f.call(i,c,d)),s)i.el.child(s);if(d&&!1===o)i.el.child(d),A.call(i,d),d.parentNode.removeChild(d),s&&s.parentNode.removeChild(s),a.sheetReset.call(i),o=!0}}),100)}));else if("file"===s.kind&&!o){var d=s.getAsFile(),c=new FileReader;if(c.onload=function(e){var t=(0,n.h)("img","paste-img");t.el.src=e.target.result,setTimeout((function(){o||(o=!0,g.call(i,t.el))}),0)},!d)return;c.readAsDataURL(d)}}setTimeout((function(){if(o){var e=i.data;e.change(e.getData())}else t()}))},t.hideDirectionArr=y,t.deleteImg=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.data.pasteDirectionsArr,i=[],a=[];if(this.direction=!1,t.length>0)for(var n=0;n<t.length;n++)!0===t[n].state||!0===e?a.push(t[n]):i.push(t[n]);Object.keys(a).forEach((function(e){a[e].img.removeEl()})),this.pasteDirectionsArr=i;var r=this.data;r.pasteDirectionsArr=i,r.change(r.getData())},t.GetInfoFromTable=A,t.dragOption=t.resizeOption=void 0;var a=i(29),n=i(0),r=u(i(59)),o=u(i(143)),l=i(1),s=i(57),d=u(i(3)),c=u(i(144));function u(e){return e&&e.__esModule?e:{default:e}}var m={onBegin:function(e){console.log("obegin",e)},onEnd:function(e){},onResize:function(e,t){var i=s.getChooseImg.call(t);i&&(i.img2.style.width=i.img.el.style.width,i.img2.style.height=i.img.el.style.height)}};t.resizeOption=m;var h={onBegin:function(e){console.log("obegin",e)},onEnd:function(e,t){var i=e.left,a=e.top,n=s.getChooseImg.call(t);if(n){a-31<0?a=0:i-60<0&&(i=0);var r=t.data.getCellRectByXY(i+60,a+31);r.sri=r.ri,r.sci=r.ci,r.eri=r.ri,r.eci=r.ci;var o=i-r.left+50,l=a-r.top+21;n.offsetLeft=o,n.offsetTop=l,n.range=r,void 0!==n.lastCi&&void 0!==n.lastRi&&(n.ri=n.lastRi,n.ci=n.lastCi),n.lastCi=r.ci,n.lastRi=r.ri}},onDrag:function(e){}};function f(e,t){for(var i=(0,n.h)("table",""),a=(0,n.h)("tbody",""),r=e.innerText.split("\n"),o=0;o<r.length;o++){var l=r[o],s=(0,n.h)("tr",""),d=(0,n.h)("td","");d.html(l),d.css("background",e.style.background),d.css("font-weight",e.style["font-weight"]),d.css("color",e.style.color),s.child(d),a.child(s)}return i.child(a),i.el}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=this.el;this.data;i.child(e),A.call(this,e),e.parentNode.removeChild(e),t&&t.parentNode.removeChild(t),a.sheetReset.call(this)}function p(e,t){for(var i=0,a=0,n=this.data.pasteDirectionsArr,r=0,o=0;o<n.length;o++){var l=n[o];l.ri===e&&l.ci===t&&(a<l.nextLeft&&(a=l.nextLeft),i<l.nextTop&&(i=l.nextTop),r++)}return{top:i,left:a,number:r}}function g(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=arguments.length>2?arguments[2]:void 0,c=arguments.length>3?arguments[3]:void 0,u=arguments.length>4?arguments[4]:void 0,f=new Image;f.src=e.src,f.onload=function(){var v=f.width,g=f.height,y=e,x=t.container,A=t.data,w=A.pasteDirectionsArr,E=A.selector,C=E.ri,T=E.ci;i&&(C=a,T=c);var O=t.pictureOffsetLeft,S=t.pictureOffsetTop,R=A.getMoveRect(new d.default(C,T,C,T)),k=R.left+O,I=R.top+S,P=0,D=s.getChooseImg.call(t);if(D){var M=p.call(t,D.ri,D.ci);k=M.left,I=M.top,C=D.ri,T=D.ci,P=M.number}var N=(0,n.h)("div","".concat(l.cssPrefix,"-object-container")).css("position","absolute").css("top","".concat(I,"px")).css("width","".concat(v,"px")).css("height","".concat(g,"px")).css("z-index","100000").css("left","".concat(k,"px")).child(y);x.child(N),new r.default(h,t).register(N.el),setTimeout((function(){var e=t.data,a=new o.default(m,t).register(N.el),n=w.length;w.push({src:y.src,state:!0,arr:a,img:N,index:n,img2:y,ri:C,ci:T,offsetLeft:0,offsetTop:0,number:P,range:i?u:e.selector.range,top:I,left:k,nextLeft:k+15,nextTop:I+15}),i||t.data.change(t.data.getData()),t.direction=!0,N.css("width","".concat(y.offsetWidth,"px")),N.css("height","".concat(y.offsetHeight,"px")),b.call(t,a,n,w,i),N.on("mousedown",(function(){return b.call(t,a,n,w)}))}),0)}}function y(){var e=this.data.pasteDirectionsArr;if(this.direction=!1,e.length>0)for(var t=0;t<e.length;t++){var i=e[t].arr;if(i.length>0)for(var a=0;a<i.length;a++)i[a].style.display="none";e[t].state=!1,e[t].img.css("z-index","10000"),e[t].img2.style.border="none"}}function b(e,t,i,a){y.call(this),this.direction=!0,Object.keys(e).forEach((function(t){e[t].style.display="block"}));var n=this.selector,r=this.editor;a?y.call(this):(n.hide(),r.clear(),i[t].img.css("z-index","99999999"),i[t].state=!0)}function x(e,t){if(!(e instanceof Object)||!(t instanceof Object))return e===t;if(Object.keys(e).length!==Object.keys(t).length)return!1;var i=Object.keys(e);for(var a in i){var n=e[a=i[a]]instanceof Object,r=t[a]instanceof Object;if(n&&r){var o=x(e[a],t[a]);if(!o)return o}else if(e[a]!==t[a])return!1}return!0}function A(e){var t=this.data,i=t.selector,a=i.ri,n=i.ci,r=t.styles;console.time("paste");var o=new c.default(t);o.extend(e,{ri:a,ci:n}),o.dealColSpan(e),o.dealStyle(e,{ri:a,ci:n});var l=o.dealReference(e,{ri:a,ci:n}).reference;this.setCellRange(l,o,!0,o.parseTableCellRange(e,{ri:a,ci:n}));var s=t.getSelectedRect(),d=s.left+s.width+60,u=s.top+s.height+31,m=this.advice;return this.editor.clear(),m.show(d,u,1,l,o),console.timeEnd("paste"),{rows:t.rows._,styles:r}}t.dragOption=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectorCellText=Ee,t.insertDeleteRowColumn=Se,t.sheetReset=$,t.selectorSet=j,t.default=void 0;var a=i(0),n=i(6),r=M(i(103)),o=M(i(104)),l=M(i(51)),s=M(i(106)),d=M(i(117)),c=M(i(30)),u=M(i(118)),m=M(i(130)),h=M(i(134)),f=i(135),v=i(1),p=i(24),g=i(22),y=M(i(136)),b=i(21),x=i(28),A=i(57),w=M(i(137)),E=i(4),C=(i(50),M(i(3))),T=i(15),O=i(5),S=M(i(139)),R=M(i(140)),k=i(23),I=M(i(141)),P=M(i(58)),D=M(i(142));function M(e){return e&&e.__esModule?e:{default:e}}function N(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function L(){var e=this.data,t=this.verticalScrollbar,i=this.horizontalScrollbar,a=e.getSelectedRect(),n=a.l,r=a.t,o=a.left,l=a.top,s=a.width,d=a.height,c=this.getTableOffset();if(Math.abs(o)+s>c.width)i.move({left:n+s-c.width});else{var u=e.freezeTotalWidth();o<u&&i.move({left:n-1-u})}if(Math.abs(1*l)+d>c.height)t.move({top:r+d-c.height-1});else{var m=e.freezeTotalHeight();l<m&&t.move({top:r-1-m})}}function j(e,t,i){var a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=this.table,o=this.selector,l=this.toolbar;e?o.setEnd(t,i,n,!0):o.set(t,i,a),l.reset(),clearTimeout(this.render_timer),this.render_timer=setTimeout((function(){r.render()}),100)}function B(e,t){var i=this.selector,a=this.data,n=this.editor,r=a.rows,o=a.cols;n.isCors&&(i.indexes=[n.ri,n.ci]);var l=_(i.indexes,2),s=l[0],d=l[1],c=i.range.eci;if(e){var u=_(i.moveIndexes,2);s=u[0],d=u[1]}"left"===t?d>0&&(d-=1):"right"===t?(c!==d&&(d=c),d<o.len-1&&(d+=1)):"up"===t?s>0&&(s-=1):"down"===t?s<r.len-1&&(s+=1):"row-first"===t?d=0:"row-last"===t?d=o.len-1:"col-first"===t?s=0:"col-last"===t&&(s=r.len-1),e&&(i.moveIndexes=[s,d]),i.selectCell.setData(s,d),i.selectCell.resetSelectOffset(),j.call(this,e,s,d),ue.call(this),L.call(this)}function F(e){if(0===e.buttons&&e.target.className!=="".concat(v.cssPrefix,"-resizer-hover")){var t=e.offsetX,i=e.offsetY,a=this.rowResizer,n=this.colResizer,r=this.tableEl,o=this.data,l=this.website,s=o.getCellRectByXY(e.offsetX,e.offsetY);l.show(s.ri,s.ci);var d=o.rows,c=o.cols;if(t>c.indexWidth&&i>d.height)return a.hide(),void n.hide();var u=r.box();s.ri>=0&&-1===s.ci?(s.width=c.indexWidth,a.show(s,{width:u.width})):a.hide(),-1===s.ri&&s.ci>=0?(s.height=d.height,n.show(s,{height:u.height})):n.hide()}}function U(e){var t=this.verticalScrollbar,i=this.data,a=i.settings.autoLoad,n=t.scroll().top,r=e.deltaY,o=i.rows;if(e.detail&&(r=40*e.detail),r>0&&!0===a){var l=i.scroll.ri+1;l<o.len&&t.move({top:n+o.getHeight(l)-1})}else if(!0===a){var s=i.scroll.ri-1;s>=0&&t.move({top:0===s?0:n-o.getHeight(s)})}}function H(e,t){var i=this.verticalScrollbar,a=this.horizontalScrollbar,n=i.scroll().top,r=a.scroll().left;"left"===e||"right"===e?a.move({left:r-t}):"up"!==e&&"down"!==e||i.move({top:n-t})}function V(){var e=this.data,t=this.verticalScrollbar,i=this.getTableOffset().height;t.set(i,e.rows.totalHeight())}function z(){var e=this.data,t=this.horizontalScrollbar,i=this.getTableOffset().width;e&&t.set(i,e.cols.totalWidth())}function W(){var e=this.selector,t=this.data,i=this.editor,a=_(t.freeze,2),n=a[0],r=a[1];if(n>0||r>0){var o=t.freezeTotalWidth(),l=t.freezeTotalHeight();i.setFreezeLengths(o,l)}e.resetAreaOffset()}function $(){var e=this.tableEl,t=this.overlayerEl,i=this.overlayerCEl,a=this.table,n=this.toolbar,r=this.selector,o=this.el,l=this.getTableOffset(),s=this.getRect();e.attr(s),t.offset(s),i.offset(l),o.css("width","".concat(s.width,"px")),ge.call(this),ye.call(this),V.call(this),z.call(this),W.call(this),r.selectCell.toolbarChangeSelectorCell(),a.render(),n.reset(),r.reset()}function Y(){var e=this.data,t=this.selector;e.clearClipboard(),t.hideClipboard()}function X(){var e=this.data,t=this.selector;e.copy(),t.showClipboard()}function G(){var e=this.data,t=this.selector;e.cut(),t.showClipboard()}function K(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){e&&(Y.call(t),$.call(t))},a=this.data.paste(e,(function(e){return(0,f.xtoast)("Tip",e)}));return i(a),a}function Z(){this.data.autofilter(),$.call(this)}function q(){var e=this,t=this.toolbar,i=this.data;t.paintformatActive()&&(i.paintFormatChange((function(t,i){j.call(e,!0,t,i,!0,!0)})),Y.call(this),t.paintformatToggle(),t.reset())}function Q(e,t,i,a,n,r,o){var l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,s=arguments.length>8?arguments[8]:void 0,d=arguments.length>9?arguments[9]:void 0,c=arguments.length>10?arguments[10]:void 0;this.selector.setBoxinner("none"),this.container.css("pointer-events","none");var u=a.getCellRectByXYWithNotTotalResult(e.layerX||e.clientX,e.layerY||e.clientY),m=u.ri,h=u.ci;if(t){var f=J.call(this,a,i,n,d,s,e,r,c,m,h,l),v=f.rpos,p=f.ey,g=f.ex,y=i.showAutofill(m,h,v);(0,T.isOusideViewRange)(this.data.settings.view.height(),this.data.settings.view.width(),p,g,y)&&ie.call(this,y,n,d,c,r,a)}else if(1===e.buttons&&!e.shiftKey){var b=a.viewRange().getMovePos(m,h);ee.call(this,b,n,d,c,r,a),console.log("ri: ",m,"ci: ",h),j.call(this,!0,m,h,!0,!0)}}function J(e,t,i,a,n,r,o,l,s,d,c){var u=e.getRect(t.range),m=new R.default(u),h=u.width+u.left,f=u.height+u.top+v.offsetTop,p=r.clientX-n.l-v.offsetLeft,g=r.clientY;return m.isLocInside(p,g)?(c=-1,t.arange=null):c=m.getUpDownLeftRight(p,g,h,f),{rpos:c,ex:p,ey:g}}function ee(e,t,i,a,n,r){2===e?te.call(this,1,t,i,n,r,a):6===e?te.call(this,2,t,i,n,r,a):3===e?te.call(this,4,t,i,n,r,a):5===e?te.call(this,3,t,i,n,r,a):1===e?(te.call(this,1,t,i,n,r,a),te.call(this,4,t,i,n,r,a)):7===e?(te.call(this,1,t,i,n,r,a),te.call(this,3,t,i,n,r,a)):8===e?(te.call(this,2,t,i,n,r,a),te.call(this,4,t,i,n,r,a)):4===e&&(te.call(this,2,t,i,n,r,a),te.call(this,3,t,i,n,r,a))}function te(e,t,i,a,n,r){if(1===Math.round(Math.random())){var o=0,l=0;if(1===e){var s=t.scroll().top;o=n.scroll.ri+1,t.move({top:s+a.getHeight(o)-1})}else if(2===e){var d=t.scroll().top;o=n.scroll.ri-1,t.move({top:0===o?0:d-a.getHeight(o)})}else if(4===e){var c=i.scroll().left;l=n.scroll.ci+1,i.move({left:c+r.getWidth(l)})}else if(3===e){var u=i.scroll().left;l=n.scroll.ci-1,i.move({left:u-r.getWidth(l)})}}}function ie(e,t,i,a,n,r){var o=0,l=0;if(44===e){var s=t.scroll().top;o=r.scroll.ri+1,t.move({top:s+n.getHeight(o)-1})}else if(22===e){var d=t.scroll().top;(o=r.scroll.ri-1)>=0&&t.move({top:0===o?0:d-n.getHeight(o)})}else if(33===e&&1===Math.round(Math.random())&&1===Math.round(Math.random())){var c=i.scroll().left;l=r.scroll.ci+1,i.move({left:c+a.getWidth(l)})}else if(11===e&&1===Math.round(Math.random())&&1===Math.round(Math.random())){var u=i.scroll().left;l=r.scroll.ci-1,i.move({left:u-a.getWidth(l)})}}function ae(e){var t=this,i=this.selector,a=this.data,r=this.sortFilter,o=this.editor,l=this.advice,s=e.offsetX,d=e.offsetY,c=e.target.className==="".concat(v.cssPrefix,"-selector-corner"),u=a.getCellRectByXY(s,d),m=u.left,h=u.top,p=u.width,g=u.height,y=u.ri,b=u.ci;o.setRiCi(y,b);var A=a.autoFilter;if(x.hideDirectionArr.call(this),l.el.hide(),A.includes2(y,b)&&A.getSet(a.exceptRowSet,y),A.includes(y,b)&&m+p-20<s&&h+g-20<d){var w=A.items(b,(function(e,t){return a.rows.getCell(e,t)}));return r.set(b,w,A.getFilter(b),A.getSort(b)),void r.setOffset({left:m,top:h+g+2})}if(!e.shiftKey){c?i.showAutofill(y,b):j.call(this,!1,y,b);var E=this.verticalScrollbar,C=this.horizontalScrollbar,T=a.rows,O=a.cols;y=a.scroll.ri+1;var S=function(e){for(var t=e.offsetTop,i=e.offsetLeft;e=e.offsetParent;)t+=e.offsetTop,i+=e.offsetLeft;return{t:t,l:i}}(this.el.el);(0,n.mouseMoveUp)(window,(function(n){console.log("dropdown"),re.call(t),ne.call(t,n,c,i,a,E,T,e,S,C,O),Q.call(t,n,c,i,a,E,T,e,0,S,C,O)}),(function(){re.call(t),c&&a.autofill(i.arange,"all",(function(e){return(0,f.xtoast)("Tip",e)}))&&(k.testValid.call(t),oe.call(t)),t.selector.setBoxinner("auto"),i.hideAutofill(),q.call(t),t.container.css("pointer-events","auto")}))}c||1!==e.buttons||e.shiftKey&&j.call(this,!0,y,b)}function ne(e,t,i,a,n,r,o,l,s,d){var c=this,u=setTimeout((function(){var u=setInterval((function(){Q.call(c,e,t,i,a,n,r,o,0,l,s,d)}),50);c.stopTimer2.push(u)}),200);this.stopTimer.push(u)}function re(){this.stopTimer.clear(),this.stopTimer2.clear()}function oe(){this.data;var e=this.table;this.editor.display=!0;this.selector.arange=null,le.call(this),e.render()}function le(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]}function se(e){Ae.call(this,{ri:-1,ci:0,left:60,top:0,width:100},e)}function de(){var e=this.data.getSelectedRect(),t=e.left+e.width+60,i=e.top+e.height+31;this.advice.el.el.style.top="".concat(i,"px"),this.advice.el.el.style.left="".concat(t,"px")}function ce(){var e=this.data,t=this.pictureOffsetLeft,i=this.pictureOffsetTop;this.data.pasteDirectionsArr.forEach((function(a){var n=e.getMoveRect(a.range);a.img.el.style.top="".concat(n.top+i+15*a.number+a.offsetTop,"px"),a.img.el.style.left="".concat(n.left+t+15*a.number+a.offsetLeft,"px")}))}function ue(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=this.selector,n=this.data,r=this.editor,o=_(a.indexes,2),l=o[0],s=o[1];l=-1===t?l:t,s=-1===i?s:i;var d=n.getMoveRect(new C.default(l,s,a.range.eri,a.range.eci)),c=this.getTableOffset(),u="top";d.top>c.height/2&&(u="bottom"),r.setOffset(d,u,e),setTimeout((function(){r.setCursorPos(r.editorText.getText().length)}))}function me(){for(var e=0;e<this.selectors.length;e++){var t=this.selectors[e];t.selector.resetSelectorBRLAreaOffset(new C.default(t.ri,t.ci,t.ri,t.ci))}}function he(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.overlayerCEl=!0===e?(0,a.h)("div","".concat(v.cssPrefix,"-overlayer-content")).children(this.editor.el,this.selectorMoveEl.el,this.selector.el,this.chartView.el):(0,a.h)("div","".concat(v.cssPrefix,"-overlayer-content")).children(this.selectorMoveEl.el,this.chartView.el)}function fe(){var e=this.editor,t=this.data,i=this.selector,a=t.getMax(),n=a.mri,r=a.mci;n!==i.range.eri-i.range.sri+1&&r!==i.range.eci-i.range.sci+1&&(ue.call(this),e.setCellEnd(t.getSelectedCell()),this.data.settings.showEditor&&i.el.hide(),Y.call(this),setTimeout((function(){e.setCursorPos(e.editorText.getText().length)})))}function ve(e){var t=this,i=this.data,a=this.table,n=this.selector,r=this.editor;i.scrolly(e,(function(){r.display=!1,n.resetBRLAreaOffset(),ce.call(t),de.call(t),me.call(t),ue.call(t,!1),a.render()}))}function pe(e){var t=this,i=this.data,a=this.table,n=this.selector,r=this.editor;i.scrollx(e,(function(){r.display=!1,n.resetBRTAreaOffset(),ce.call(t),de.call(t),me.call(t),ue.call(t,!1),a.render()}))}function ge(){var e=this.data,t=this.table,i=e.viewRange2(),a=e.settings.style.autoAdapt,n=e.settings.ignoreRi,r=0;if(a){if(i.each((function(e,i){var a=t.getCellTextContent(e,i),r=t.getDrawBox(e,i);if(void 0!==a){var o=t.getCellTextStyle(e,i),l=Object.assign({},o.font);l.size=(0,g.getFontSizePxByPt)(l.size);var s=null;void 0!==o.format||(s=t.draw.selfAdaptionTxtWidth(a,l,r)),(void 0===t.autoAdaptList[i]||t.autoAdaptList[i]<s)&&e>n-1&&(t.autoAdaptList[i]=s)}})),t.autoAdaptList.length<0)return;for(var o=e.settings.ignore,l=0;l<t.autoAdaptList.length;l++){for(var s=!1,d=0;d<o.length;d++)l===o[d]&&(s=!0);!1===s&&(void 0===t.autoAdaptList[l]?(r+=50,e.cols.setWidth(l,50)):(t.autoAdaptList[l]<30&&(t.autoAdaptList[l]=30),e.cols.setWidth(l,t.autoAdaptList[l]))),r+=t.autoAdaptList[l]}r>0&&(e.settings.cellWidth=function(){return r})}}function ye(){var e=this.data,t=this.table,i=e.viewRange2(),a=0,n=0,r=e.settings.row.height,o=e.settings.style.autoAdapt,l=0;if(o){i.each((function(i,o){var s=t.getCellTextContent(a,o),d=t.getCellTextStyle(i,o),c=Object.assign({},d.font);c.size=(0,g.getFontSizePxByPt)(c.size);var u=t.getDrawBox(a,o);if(a!==i&&void 0!==s){var m=e.rows.getHeight(a);if(r*n!==m){var h=c.size*n+2*u.padding+2*n;e.rows.setHeight(a,h),l+=h}else l+=m;n=0}else if(void 0!==s&&a===i&&void 0!==s){var f=t.draw.selfAdaptionHeight(u,s,c);(f>n||0===n)&&(n=f)}a=i}));var s=e.rows.getHeight(a),d=t.getCellTextStyle(s,0),c=Object.assign({},d.font);c.size=(0,g.getFontSizePxByPt)(c.size);var u=t.getDrawBox(a,0);if(r*n!==s&&l>0){var m=c.size*n+2*u.padding;l+=m,e.rows.setHeight(a,m)}else l>0&&(l+=s)}console.log(503,l),l>0&&(e.settings.view.height=function(){return l+40})}function be(e){if(e.target.className==="".concat(v.cssPrefix,"-overlayer")){var t=this.selector,i=this.data,a=e.offsetX,n=e.offsetY,r=i.getCellRectByXY(a,n);t.selectCell.setData(r.ri,r.ci),t.selectCell.resetSelectOffset()}}function xe(e,t){var i=e.ri,a=this.table,n=this.selector,r=this.data,o=this.toolbar;r.setRowHeight(i,t),r.change(r.getData()),o.reset(),a.render(),n.resetAreaOffset(),V.call(this),ue.call(this)}function Ae(e,t){var i=e.ci,a=this.table,n=this.selector,r=this.data,o=this.toolbar;r.setColWidth(i,t),r.change(r.getData()),o.reset(),a.render(),n.resetAreaOffset(),z.call(this),ue.call(this)}function we(e,t){var i=this.errorPopUp;return e&&!i.open?(i.show(t),{state:!0,msg:t}):i.open?(i.hide(),{state:!0,msg:t}):{state:!1,msg:t}}function Ee(e,t,i,a){var n=i.text,r=i.style,o=this.data,l=this.editor,s=o.selectorCellText(e,t,n+"",a);return!(!s.state||!(s=we.call(this,!0,s.msg)).state)||(o.setCellText(e,t,{text:n,style:r}),l.setRiCi(-1,-1),!1)}function Ce(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"finished",i=this.data,a=this.table,n=this.editor,r=i.selector,o=r.ri,l=r.ci;n.ri!==o&&-1!==n.ri||n.ci!==l&&-1!==n.ci||(i.setSelectedCellText(e,t),"finished"===t&&a.render())}function Te(){this.data.throwFormula()}function Oe(){}function Se(e){var t=this.data;"insert-row"===e?t.insert("row"):"delete-row"===e?t.delete("row"):"insert-column"===e?t.insert("column"):"delete-column"===e?t.delete("column"):"delete-cell"===e?t.deleteCell():"delete-cell-format"===e?t.deleteCell("format"):"delete-cell-text"===e&&t.deleteCell("text"),Y.call(this),$.call(this)}function Re(e,t){var i=this.data;if("undo"===e)this.undo();else if("undoList"===e)t.setContent(i.historyList(1));else if("redoList"===e)t.setContent(i.historyList(2));else if("redo"===e)this.redo();else if("print"===e);else if("paintformat"===e)!0===t?X.call(this):Y.call(this);else if("chart"===e)console.log("chaet"),Oe.call(this),this.toolbar.reset();else if("clearformat"===e)Se.call(this,"delete-cell-format");else if("link"===e);else if("autofilter"===e)Z.call(this);else if("throwFormula"===e)Te.call(this);else if("close"===e){var a=i.getMax(),n=a.mri,r=a.mci;i.changeDataForCalc=new P.default({type:999,action:"重新计算",ri:-1,ci:-1,oldCell:{},newCell:i.rows.eachRange(new C.default(0,0,n,r))},this.data),$.call(this)}else if("freeze"===e){var o=i.settings.showFreeze;if(t&&!0===o){var l=i.selector,s=l.ri,d=l.ci;this.freeze(s,d)}else this.freeze(0,0)}else"add"===e?(i.showEquation=!i.showEquation,$.call(this,!0)):(i.setSelectedCellAttr(e,t),"border"===e&&ke.call(this,"none"),"cellFormulaProxy"===e&&fe.call(this),$.call(this))}function ke(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"1px solid rgb(75, 137, 255";this.selector.br.border(e)}function Ie(e,t,i,a){this.data.setAutoFilter(e,t,i,a),$.call(this)}function Pe(e){if(e.getLock()||2===e.state){var t=e.ri,i=e.ci,a=e.editorText.getText();return this.selector.indexes=[t,i],Ee.call(this,t,i,{text:a},"input")}return!1}function De(e){var t=this;Y.call(this),x.mountPaste.call(this,e,(function(){$.call(t);var e=t.data;e.change(e.getData())}))}function Me(){var e=this,t=this.overlayerEl,i=this.rowResizer,a=this.colResizer,r=this.verticalScrollbar,o=this.horizontalScrollbar,l=this.editor,s=this.contextMenu,d=this.data,c=this.toolbar,u=this.modalValidation,m=this.sortFilter;t.on("mousemove",(function(t){F.call(e,t)})).on("mousedown",(function(t){if(2===t.buttons)d.xyInSelectedRect(t.offsetX,t.offsetY)?(s.setPosition(t.offsetX,t.offsetY),t.stopPropagation()):(s.hide(),ae.call(e,t),setTimeout((function(){s.setPosition(t.offsetX,t.offsetY),t.stopPropagation()}),100)),be.call(e,t);else if(2===t.detail){if(clearTimeout(e.render_timer),l.setMouseDownIndex([]),l.getLock())return;fe.call(e)}else{if(l.getLock()||l.isCors){var i=null,a=0;(0,n.mouseMoveUp)(window,(function(n){e.container.css("pointer-events","none"),i&&i.selector&&i.selector.setBoxinner("none");var r=!0,o=d.merges,s=l.editorText.getText();if(Object.keys(o._).forEach((function(e){for(var t=o._[e],i=(0,E.cutStr)(s,!0),a=0;a<i.length;a++)if(-1!==i[a].indexOf(":")){var n=i[a].split(":")[0],l=i[a].split(":")[1],d=(0,O.expr2xy)(n),c=(0,O.expr2xy)(l);t.sci>=d[0]&&t.sri>=d[1]&&t.eci<=c[0]&&t.eri<=c[1]&&(r=!1)}})),r&&1===n.buttons&&!n.shiftKey){var c=d.getCellRectByXY(n.offsetX,n.offsetY),u=c.ri,m=c.ci;if(i&&i.selector)i=b.makeSelector.call(e,u,m,e.selectors,!0,i.selector,!0),b.lockCells.call(e,t,i),e.mergeSelector=!0;else{for(var h=l.pos,f=l.editorText.getText(),v=0;v<e.selectors.length;v++){var p=e.selectors[v];if(p.erpx===(0,E.cuttingByPos)(f,h)){a=1,(i=p).selector.set(u,m,!0);break}}i=i||b.makeSelector.call(e,u,m,e.selectors,!0,null,!1)}}}),(function(){if(e.container.css("pointer-events","auto"),i&&i.selector&&i.selector.setBoxinner("auto"),!1===e.mergeSelector?(i&&!a&&e.selectors.push(i),b.lockCells.call(e,t,i)):i&&!a&&i.selector&&e.selectors.push(i),i)for(var n=0;n<e.selectors.length;n++){var r=e.selectors[n];if(r.className===i.className){r.erpx=i.erpx;break}}i=null,a=0,e.mergeSelector=!1}))}if(console.time("dbclick time1"),!l.getLock()&&!l.isCors){console.time("dbclick time2");var r=l.ri,o=l.ci,c=l.editorText.getText();if(-1!==r&&-1!==o&&"="===c[0])if(Ee.call(e,r,o,{text:c},"input"))return;console.timeEnd("dbclick time2"),l.clear()&&le.call(e),e.selector.longTimeBefore(),ae.call(e,t),be.call(e,t),ke.call(e),b.clearSelectors.call(e),ue.call(e)}k.testValid.call(e),console.timeEnd("dbclick time1")}})).on("mousewheel.stop",(function(t){U.call(e,t)})),(0,n.bindTouch)(t.el,{move:function(t,i){H.call(e,t,i)}}),c.change=function(t,i){return Re.call(e,t,i)},m.ok=function(t,i,a,n){return Ie.call(e,t,i,a,n)},i.finishedFn=function(t,i){xe.call(e,t,i)},a.finishedFn=function(t,i){Ae.call(e,t,i)},r.moveFn=function(t,i){ve.call(e,t,i)},o.moveFn=function(t,i){pe.call(e,t,i)},l.change=function(t,i){if("finish"===t)return d.editorChangeToHistory(l.editorText.getOldCell(),l.editorText.getRICI(),1),void l.editorText.setOldCell({},{ri:-1,ci:-1});if("@~esc"===i){var a=l.editorText.getOldCell(),n=a.text,r=a.formulas;l.editorText.setOldCell({text:"",formulas:""});var o=l.ri,s=l.ci;return d.setSelectedCell(n,"input",r,o,s),l.setText(""),b.clearSelectors.call(e),void l.clear(!0)}"format"===t&&d.setSelectedCellAttr(t,"rmb");var c=l.lock;l.setMouseDownIndex(d.rows,[]),b.editingSelectors.call(e,i),c&&"="!==i||"format"!==t&&Ce.call(e,i,t)},u.change=function(e){if("save"===e){for(var t=arguments.length,i=new Array(t>1?t-1:0),a=1;a<t;a++)i[a-1]=arguments[a];d.addValidation.apply(d,i)}else d.removeValidation()},s.itemClick=function(t){"validation"===t?u.setValue(d.getSelectedValidation()):"copy"===t?X.call(e):"cut"===t?G.call(e):"paste"===t||("paste-value"===t?K.call(e,"text"):"paste-format"===t?K.call(e,"format"):Se.call(e,t))},(0,n.bind)(window,"resize",(function(){e.reload()})),(0,n.bind)(window,"click",(function(e){t.contains(e.target)})),(0,n.bind)(this.el.el,"copy",(function(t){A.mountCopy.call(e,t)})),(0,n.bind)(this.el.el,"cut",(function(t){console.log("cut",t),G.call(e),A.mountCopy.call(e,t);var i=e.data;i.history.add(i.getData())})),(0,n.bind)(this.el.el,"paste",(function(t){De.call(e,t)})),(0,n.bind)(window,"keydown",(function(t){var i=t.keyCode||t.which,a=t.key,n=t.ctrlKey,r=t.shiftKey,o=t.metaKey;if(A.getChooseImg.call(e)){switch(console.log(i),i){case 8:d.history.addPic(d.getData().pictures,"add"),x.deleteImg.call(e)}(n||o)&&90===i&&(e.undo(),t.preventDefault())}else if(n||o)switch(i){case 90:e.undo(),t.preventDefault();break;case 89:e.redo(),t.preventDefault();break;case 67:if(A.getChooseImg.call(e))return;X.call(e),t.preventDefault();break;case 88:G.call(e),t.preventDefault();break;case 85:c.trigger("underline"),t.preventDefault();break;case 86:break;case 37:B.call(e,r,"row-first"),t.preventDefault();break;case 38:B.call(e,r,"col-first"),t.preventDefault();break;case 39:B.call(e,r,"row-last"),t.preventDefault();break;case 40:B.call(e,r,"col-last"),t.preventDefault();break;case 32:j.call(e,!1,-1,d.selector.ci,!1),t.preventDefault();break;case 66:c.trigger("font-bold");break;case 73:c.trigger("font-italic")}else{switch(i){case 32:r&&j.call(e,!1,d.selector.ri,-1,!1);break;case 27:s.hide(),Y.call(e);break;case 37:B.call(e,r,"left"),t.preventDefault();break;case 38:B.call(e,r,"up"),t.preventDefault();break;case 39:B.call(e,r,"right"),t.preventDefault();break;case 40:B.call(e,r,"down"),t.preventDefault();break;case 9:if(Pe.call(e,l))return;l.clear(),B.call(e,!1,r?"left":"right"),t.preventDefault(),b.clearSelectors.call(e);break;case 13:if(Pe.call(e,l))return;l.clear(),ge.call(e),ye.call(e),B.call(e,!1,r?"up":"down"),le.call(e),t.preventDefault(),ue.call(e,!0),b.clearSelectors.call(e);break;case 8:Se.call(e,"delete-cell-text")}"Delete"===a?(Se.call(e,"delete-cell-text"),t.preventDefault()):i>=65&&i<=90||i>=48&&i<=57||i>=96&&i<=105||"="===t.key||113===i&&fe.call(e)}}))}var Ne=function(){function e(t,i){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var f=i.settings,g=f.view,b=f.showToolbar,x=f.showContextmenu,A=f.showEditor,E=f.rowWidth;this.el=(0,a.h)("div","".concat(v.cssPrefix,"-sheet")),this.toolbar=new u.default(i,g.width,!b),t.children(this.toolbar.el,this.el),this.pictureOffsetLeft=10,this.pictureOffsetTop=10,this.data=i,this.tableEl=(0,a.h)("canvas","".concat(v.cssPrefix,"-table")),this.rowResizer=new r.default(!1,i.rows.height),this.colResizer=new r.default(!0,i.cols.minWidth),this.verticalScrollbar=new o.default(!0),this.horizontalScrollbar=new o.default(!1),this.editor=new s.default(p.fnNameArrayWithKey,(function(){return n.getTableOffset()}),i.rows.height,i.cols.width,i,this),this.stopTimer=new I.default,this.stopTimer2=new I.default,this.website=new w.default(i,this.editor),this.modalValidation=new m.default,this.errorPopUp=new S.default,this.contextMenu=new d.default((function(){return n.getTableOffset()}),!x),this.selector=new l.default(i,this,!0),this.selectorMoveEl=new l.default(i,this,!1),this.advice=new y.default(i,this),this.chartView=new D.default,this.overlayerCEl=he.call(this,A),this.selectors=[],this.container=(0,a.h)("div",""),this.selectorsEl=(0,a.h)("div","selector_clear").attr("id","selector_clear"),this.overlayerCEl.children(this.selectorsEl,this.container),this.mergeSelector=!1,this.overlayerEl=(0,a.h)("div","".concat(v.cssPrefix,"-overlayer")).children(this.overlayerCEl),this.sortFilter=new h.default,this.direction=!1,this.el.children(this.tableEl,this.rowResizer.el,this.overlayerEl.el,this.colResizer.el,this.verticalScrollbar.el,this.horizontalScrollbar.el,this.contextMenu.el,this.modalValidation.el,this.errorPopUp.el,this.sortFilter.el,this.advice.el,this.website.el,this.website.tableEl),this.table=new c.default(this.tableEl.el,i),Me.call(this),$.call(this,!1),j.call(this,!1,0,0),E&&E.state&&se.call(this,E.width)}var t,i,g;return t=e,(i=[{key:"selectorMoveReset",value:function(){ue.call(this),this.editor.setRiCi(this.data.selector.ri,this.data.selector.ci),$.call(this)}},{key:"getTable",value:function(){return{recalc:!1,table:this.table}}},{key:"clickCopyPaste",value:function(){var e=this.data,t=e.clickCopyPaste();t.enter&&(this.selector.arange=t.dstCellRange,e.clickAutofill(t.srcCellRange,t.dstCellRange,"all",(function(e){return(0,f.xtoast)("Tip",e)})),oe.call(this))}},{key:"setCellRange",value:function(e,t,i,a){this.data.paste(a);for(var n=0;n<e.length;n++){var r=e[n],o=r.ri,l=r.ci,s=(0,E.deepCopy)(t.rows.getCellOrNew(o,l));!1===i&&delete s.style,Ee.call(this,o,l,s,"style"),j.call(this,!0,o,l,!0,!0)}}},{key:"selectorEditorReset",value:function(e,t){var i=this.selector;ue.call(this,!0,e,t),this.editor.setRiCi(e,t),i.hide(),$.call(this)}},{key:"loadData",value:function(e){return this.data.setData(e,this),$.call(this),this}},{key:"freeze",value:function(e,t){return this.data.setFreeze(e,t),$.call(this),this}},{key:"undo",value:function(){this.data.undo(this),$.call(this)}},{key:"redo",value:function(){this.data.redo(),$.call(this)}},{key:"reload",value:function(){return $.call(this),this}},{key:"removeEvent",value:function(){n.remove.call(this)}},{key:"getRect",value:function(){var e=this.data;return{width:e.viewWidth(),height:e.viewHeight()}}},{key:"getTableOffset",value:function(){var e=this.data,t=e.rows,i=e.cols,a=this.getRect(),n=a.width,r=a.height;return{width:n-i.indexWidth,height:r-t.height,left:i.indexWidth,top:t.height}}}])&&N(t.prototype,i),g&&N(t,g),e}();t.default=Ne},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toUpperCase=function(e){return e=e.toString().toUpperCase()},t.default=void 0;var a=i(5),n=i(22),r=u(i(114)),o=i(115),l=i(116),s=i(1),d=i(23),c=i(7);u(i(54));function u(e){return e&&e.__esModule?e:{default:e}}function m(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function h(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var f=5,v={fillStyle:"#f4f5f8"},p={fillStyle:"#fff",lineWidth:l.thinLineWidth,strokeStyle:"#e6e6e6"};function g(e,t){var i=this.data.cellRect(e,t),a=i.left,n=i.top,r=i.width,o=i.height;return new l.DrawBox(a,n,r,o,f)}function y(){var e=this.data.changeDataForCalc;return(0,c.isHave)(e)?{state:!0,data:e}:{state:!1,data:null}}function b(){}function x(){var e=this.data,t=y.call(this);if((0,c.isHave)(t.data)){try{e.calc.calculateRows(e.rows,t.data)}catch(e){console.log("公式模块报错："+e)}t.state&&(e.changeDataForCalc=null)}}function A(e,t){var i=this.draw,a=this.data,r=a.sortedRowMap,l=e;r.has(e)&&(l=r.get(e));var d=a.getCell(l,t);if((0,c.isHave)(d)){var u=a.getCellStyleOrDefault(l,t),m=g.call(this,e,t);m.bgcolor=u.bgcolor,void 0!==u.border&&(m.setBorders(u.border),i.strokeBorders(m));var h="";a.showEquation?(0,c.isHave)(d.formulas)&&(h=d.formulas):(0,c.isHave)(d.text)&&(h=d.text),i.rect2(m,(function(){var r=a.renderFormat(u,d,l,t,!1);h=r.state?r.cellText:h;var c=Object.assign({},u.font);c.size=(0,n.getFontSizePxByPt)(c.size);var f=a.settings,v=f.ignore,p=f.minus,g=u.color;!0===p&&(0,o.isMinus)(h)&&(g="red");var y=u.underline,b="www"===(h+="").substr(0,3).toLowerCase()?"http://"+h:h;(/^http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?$/.test(b)||function(e){return!!(e+="")&&1===s.look.indexOf(e.split("!")[0])}(d.text))&&(g="#4b89ff",y=!0),i.text(h,m,{align:u.align,valign:u.valign,font:c,color:g,strike:u.strike,underline:y,ignore:v,cindex:t},u.textwrap),a.validations.getError(e,t)&&i.error(m)}))}}function w(){for(var e=this.draw,t=this.data.autoFilter.flex,i=0;i<t.length;i++){for(var a=t[i],n=a.ri,r=a.ci,o=a.state,l=0,s=0;s<i;s++){var d=t[s],c=d.set_total;!0===d.state&&(l+=c)}var u=g.call(this,n,r);e.dropUp(u,o,25*l)}}function E(e){var t=this,i=this.data,a=this.draw;if(e){var n=i.autoFilter;if(!n.active())return;var r=n.hrange();e.intersects(r)&&r.each((function(e,i){var n=g.call(t,e,i);a.dropdown(n)}))}}function C(e,t,i,a,n){var r=this,o=this.draw,l=this.data;o.save(),o.translate(t,i).translate(a,n);var s=l.exceptRowSet;o.save(),e.each((function(e,t){A.call(r,e,t)}),(function(e){return function(e){var t=s.has(e);if(t){var i=l.rows.getHeight(e);o.translate(0,-i)}return!t}(e)})),o.restore();var d=new Set;o.save(),l.eachMergesInView(e,(function(e){var t=e.sri,i=e.sci,a=e.eri;if(s.has(t)){if(!d.has(t)){d.add(t);var n=l.rows.sumHeight(t,a+1);o.translate(0,-n)}}else A.call(r,t,i)})),o.restore(),E.call(this,e),w.call(this),o.restore()}function T(e,t,i,a){var n=this.draw;n.save(),n.attr({fillStyle:"rgba(75, 137, 255, 0.08)"}).fillRect(e,t,i,a),n.restore()}function O(e,t,i,n,r,o){var s=this,d=this.draw,c=this.data,u=t.h,m=t.w,h=o+n,f=r+i;d.save(),d.attr(v),"all"!==e&&"left"!==e||d.fillRect(0,h,i,u),"all"!==e&&"top"!==e||d.fillRect(f,0,m,n);var p=c.selector.range,g=p.sri,y=p.sci,b=p.eri,x=p.eci;d.attr({textAlign:"center",textBaseline:"middle",font:"500 ".concat((0,l.npx)(12),"px Source Sans Pro"),fillStyle:"#585757",lineWidth:(0,l.thinLineWidth)(),strokeStyle:"#e6e6e6"}),"all"!==e&&"left"!==e||(c.rowEach(t.sri,t.eri,(function(e,t,a){var n=h+t,r=e;d.line([0,n],[i,n]),g<=r&&r<b+1&&T.call(s,0,n,i,a),d.fillText(r+1,i/2,n+a/2)})),d.line([0,u+h],[i,u+h]),d.line([i,h],[i,u+h])),"all"!==e&&"top"!==e||(c.colEach(t.sci,t.eci,(function(e,t,i){var r=f+t,o=e;d.line([r,0],[r,n]),y<=o&&o<x+1&&T.call(s,r,0,i,n),d.fillText((0,a.stringAt)(o),r+i/2,n/2)})),d.line([m+f,0],[m+f,n]),d.line([0,n],[m+f,n])),d.restore()}function S(e,t){var i=this.draw;i.save(),i.attr({fillStyle:"#f4f5f8"}).fillRect(0,0,e,t),i.restore()}function R(e,t,i,a,n){var r=e.sri,o=e.sci,l=e.eri,s=e.eci,d=e.w,c=e.h,u=this.draw,m=this.data,h=m.settings;u.save(),u.attr(p).translate(t+a,i+n),u.clearRect(0,0,d,c),h.showGrid?(m.rowEach(r,l,(function(e,t,i){e!==r&&u.line([0,t],[d,t]),e===l&&u.line([0,t+i],[d,t+i])})),m.colEach(o,s,(function(e,t,i){e!==o&&u.line([t,0],[t,c]),e===s&&u.line([t+i,0],[t+i,c])})),u.restore()):u.restore()}function k(e,t,i,a){var n=this.draw,r=this.data,o=r.viewWidth()-e,l=r.viewHeight()-t;n.save().translate(e,t).attr({strokeStyle:"rgba(75, 137, 255, .6)"}),n.line([0,a],[o,a]),n.line([i,0],[i,l]),n.restore()}var I=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.draw=new l.Draw(t,i.viewWidth(),i.viewHeight()),this.data=i}var t,i,a;return t=e,(i=[{key:"getCellTextContent",value:function(e,t){var i=this.data,a=i.sortedRowMap,n=e;a.has(e)&&(n=a.get(e));var o=i.getCell(n,t);if(null!==o)return r.default.render(o.text||"",i,(function(e,t){return i.getCellTextOrDefault(t,e)}))}},{key:"getDrawBox",value:function(e,t){var i=this.data.cellRect(e,t),a=i.left,n=i.top,r=i.width,o=i.height;return new l.DrawBox(a,n,r,o,f)}},{key:"getCellTextStyle",value:function(e,t){var i=this.data,a=i.sortedRowMap,n=e;return a.has(e)&&(n=a.get(e)),i.getCellStyleOrDefault(n,t)}},{key:"render",value:function(){var e=this.data,t=e.rows,i=e.cols,a=e.viewRange();x.call(this),b.call(this),this.clear(),this.draw.resize(e.viewWidth(),e.viewHeight());var n=e.freezeTotalWidth(),r=e.freezeTotalHeight(),o=e.scroll,l=o.x,s=o.y,c=i.indexWidth,u=t.height;R.call(this,a,c,u,n,r),C.call(this,a,c,u,-l,-s),O.call(this,"all",a,c,u,n,r),S.call(this,c,u);var h=m(e.freeze,2),f=h[0],v=h[1];if(f>0||v>0){if(f>0){var p=a.clone();p.sri=0,p.eri=f-1,p.h=r,R.call(this,p,c,u,n,0),C.call(this,p,c,u,-l,0),O.call(this,"top",p,c,u,n,0)}if(v>0){var g=a.clone();g.sci=0,g.eci=v-1,g.w=n,R.call(this,g,c,u,0,r),O.call(this,"left",g,c,u,0,r),C.call(this,g,c,u,0,-s)}var y=e.freezeViewRange();R.call(this,y,c,u,0,0),O.call(this,"all",y,c,u,0,0),C.call(this,y,c,u,0,0),k.call(this,c,u,n,r)}d.testValid.call(this)}},{key:"clear",value:function(){this.draw.clear()}}])&&h(t.prototype,i),a&&h(t,a),e}();t.default=I},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiply=c,t.formatNumberRender=t.baseFormats=t.formatm=void 0;var a=i(8),n=i(15),r=i(7);function o(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var l=function(e){return e},s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;if(!(0,r.isHave)(e)||!(0,n.isNumber)(e))return e;if(/^(-?\d*.?\d*)$/.test(e)){var i=-1===t?e.toString():Number(e).toFixed(t).toString(),a=i.split("\\."),l=o(a),s=l[0],d=(l.slice(1),s.replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"));return"NaN"===d?e:d}return e};t.formatNumberRender=s;var d=[{key:"normal",title:(0,a.tf)("format.normal"),type:"string",render:l},{key:"number",title:(0,a.tf)("format.number"),type:"number",label:"1,000.12",render:s},{key:"percent",title:(0,a.tf)("format.percent"),type:"number",label:"10.12%",render:function(e){var t=c(e,100),i="".concat(t);return"".concat(i,"%")}},{key:"rmb",title:(0,a.tf)("format.rmb"),type:"number",label:"￥10.00",render:function(e){return"￥".concat(s(e))}},{key:"date",title:(0,a.tf)("format.date"),type:"date",label:"2009-01-01",render:l},{key:"datetime",title:(0,a.tf)("format.datetime"),type:"datetime",label:"2009年01月01日",render:l}];function c(e,t,i){return m(e,t,i,"multiply")}function u(e){var t,i={times:1,num:0},a=e<0;if(t=e,Math.floor(t)===t)return i.num=e,i;var n="".concat(e),r=n.indexOf("."),o=n.substr(r+1).length,l=Math.pow(10,o),s=parseInt(Math.abs(e)*l+.5,10);return i.times=l,a&&(s=-s),i.num=s,i}function m(e,t,i,a){var n=u(e),r=u(t),o=n.num,l=r.num,s=n.times,d=r.times,c=s>d?s:d;switch(a){case"add":return(s===d?o+l:s>d?o+l*(s/d):o*(d/s)+l)/c;case"subtract":return(s===d?o-l:s>d?o-l*(s/d):o*(d/s)-l)/c;case"multiply":return o*l/(s*d);case"divide":return o/l*(d/s)}}t.baseFormats=d;var h={};t.formatm=h,d.forEach((function(e){h[e.key]=e}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1),r=i(8);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var i,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=l(this,s(t).call(this,"div","".concat(n.cssPrefix,"-button ").concat(a)))).child((0,r.t)("button.".concat(e))),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),t}(a.Element);t.default=c},,function(e,t,i){"use strict";function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=i(67),r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.formula=t,this.ast=""}var t,i,r;return t=e,(i=[{key:"preProcess",value:function(){this.formula=this.formula.replace(/=/g,""),this.formula=this.formula.replace(/:/g,"$$$"),this.formula=this.formula.replace(/""""/g,""),this.formula=this.formula.replace(/!/g,""),this.formula=this.formula.replace(/{/g,""),this.formula=this.formula.replace(/}/g,""),this.formula=this.formula.replace(/#/g,""),this.formula=this.formula.replace(/\./g,"a"),this.formula=this.formula.replace(/[0-9][0-9]*/g,"a"),this.formula=this.formula.replace(/\“/g,'"'),this.formula=this.formula.replace(/\（/g,"("),this.formula=this.formula.replace(/\）/g,")"),this.formula=this.formula.replace(/\”/g,'"'),this.formula=this.formula.replace(/\%/g,""),this.formula=this.formula.replace(/\,/g,""),this.formula=this.formula.replace(/\，/g,""),this.formula=this.formula.replace(/"([\s\S]+)"""/g,""),this.formula=this.formula.replace(/""/,"")}},{key:"parse",value:function(){this.preProcess();var e=this.formula;this.ast=n.parse(e)}},{key:"ignoreSpace",value:function(){}}])&&a(t.prototype,i),r&&a(t,r),e}();t.default=r},,,,,,,,,,,,,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(7),n=i(25),r=i(16);function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cell=t}var t,i,l;return t=e,(i=[{key:"renderFormat",value:function(e,t,i,n,r){if(!1===(0,a.isHave)(e)||!1===(0,a.isHave)(e.format))return{cellText:"",state:!1};var o=this.cell,l="";if(e.format){var s=n.tryParseToNum(o,t,i);return s.state?r?"date"===s.style||"datetime"===s.style?l=s.text:s.state=!1:l=s.text:(!1===(0,a.isHave)(o.text)&&(o.text=""),l=o.text),{cellText:l,state:s.state}}return{cellText:l,state:!1}}},{key:"getCellDataType",value:function(e,t){var i=t.isDate,o=t.isNumber,l=this.cell,s=!0;(0,a.isHave)(l.formulas)||(l.formulas=""),(0,a.isHave)(l.text)||(l.text="");var d=""!==l.formulas?l.formulas+"":l.text+"",c=1*(d=d.replace(/,/g,""));return!c&&0!==c||"number"!=typeof c||isNaN(c)||!0!==/^\d+$/.test(d)?d&&!0===s&&(0,n.isFormula)(d)?(s=!0,o=!1,i=!1,l.type="na"):d&&-1!==d.search((0,r.str2Re)(r.datePattern2),"")?(!0===i?(s=!1,o=!1,i=!0):(s=!1,o=!1,i=!1),l.type="date"):(s=!1,o=!1,i=!1,l.type="other"):(!0===o?(o=!0,s=!1,i=!1):(s=!1,o=!1,i=!1),l.type="number"),l.tmp=d,e.push(l),{nA:s,isDate:i,isNumber:o}}}])&&o(t.prototype,i),l&&o(t,l),e}();t.default=l},function(e,t,i){"use strict";function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=null,this.state="move"}var t,i,n;return t=e,(i=[{key:"move",value:function(e){return this.range=e,this.state="move",this}}])&&a(t.prototype,i),n&&a(t,n),e}();t.default=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.selectorHeightBorderWidth=void 0;var a=i(0),n=i(1),r=i(3),o=i(6),l=i(5),s=i(4),d=u(i(105)),c=u(i(20));function u(e){return e&&e.__esModule?e:{default:e}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function f(e,t,i){return t&&h(e.prototype,t),i&&h(e,i),e}t.selectorHeightBorderWidth=3;var v=10,p=function(){function e(t,i,r){var o=this;m(this,e),this.cornerEl=(0,a.h)("div","".concat(n.cssPrefix,"-selector-corner")),this.data=t,this.sheet=r,this._selector=i,this.l=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-l")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(1)})),this.r=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-r")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(2)})).on("click",(function(e){2===e.detail&&e.stopPropagation()})),this.t=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-t")).on("mousedown.stop",(function(e){e.detail,e.stopPropagation(),o.moveEvent(3)})),this.b=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-b")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(4)})),this.cornerEl.on("mousedown",(function(e){2===e.detail&&(r.clickCopyPaste(),e.stopPropagation())})),this.boxinner=(0,a.h)("div","".concat(n.cssPrefix,"-selector-boxinner")).children(this.b,this.t,this.r,this.l),this.areaEl=(0,a.h)("div","".concat(n.cssPrefix,"-selector-area")).children(this.cornerEl,this.boxinner).hide(),this.clipboardEl=(0,a.h)("div","".concat(n.cssPrefix,"-selector-clipboard")).hide(),this.autofillEl=(0,a.h)("div","".concat(n.cssPrefix,"-selector-autofill")).hide(),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-selector")).css("z-index","".concat(v)).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),v+=1}return f(e,[{key:"border",value:function(e){this.areaEl.css("border",e)}},{key:"longTimeBefore",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;this.boxinner.hide(),setTimeout((function(){e.boxinner.show()}),t)}},{key:"moveEvent",value:function(e){console.log(60);var t=this.data,i=this._selector,a=this.sheet,n=t.selector,d=i.range,u=d.sri,m=d.sci,h=d.eri,f=d.eci,v=d.w,p=d.h,g=new r.CellRange(u,m,h,f,v,p),y=new r.CellRange(u,m,h,f,v,p),b=a.selectorMoveEl;b.set(-1,-1,!0),b.hide(),(0,o.mouseMoveUp)(window,(function(e){a.container.css("pointer-events","none"),i.setBoxinner("none");var n=t.getCellRectByXY(e.layerX,e.layerY),o=n.ri,l=n.ci;if(-1!==o&&-1!==l){(y=new r.CellRange(u,m,h,f,v,p)).move(o,l);var s=t.getMoveRect(y);b.range=y,b.setMove(s),b.el.show()}}),(function(){var e=t.rows,r=[],o=[],d=[];g.each((function(t,i){console.log(e.getCell(t,i),t,i);var a=e.getCell(t,i),n=new c.default(t,i,(0,s.deepCopy)(a||{}),"".concat((0,l.xy2expr)(i,t),":").concat((0,l.xy2expr)(i,t))),o=new c.default(t,i,(0,s.deepCopy)(a||{}),"".concat((0,l.xy2expr)(i,t)));r.push(n),d.push(o)})),y.each((function(t,i){var a=new c.default(t,i,(0,s.deepCopy)(e.getCell(t,i)||{}),(0,l.xy2expr)(i,t));o.push(a)})),t.cutPaste(g,y,!1),a.container.css("pointer-events","auto"),i.setBoxinner("auto"),b.hide();var u=t.getMoveRect(y);n.range=y,n.ci=y.sci,n.ri=y.sri,i.indexes=[n.ri,n.ci],i.moveIndexes=[y.sri,y.sci],i.range=y,i.setMove(u),a.selector.selectCell.setData(y.sri,y.sci),console.time("move"),e.moveChange(r,o,d),console.timeEnd("move"),a.selectorMoveReset()}))}},{key:"setCss",value:function(e){this.areaEl.css("border","2px dashed ".concat(e)),this.el.css("z-index","-1")}},{key:"setOffset",value:function(e){return this.el.offset(e).show(),this}},{key:"setBoxinner",value:function(e){this.l.css("pointer-events",e),this.r.css("pointer-events",e),this.t.css("pointer-events",e),this.b.css("pointer-events",e),this.cornerEl.css("pointer-events",e)}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"setAreaOffset",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.areaEl.offset({width:a-3+.8,height:n-3+.8,left:t-.8,top:i-.8}).show()}},{key:"setClipboardOffset",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.clipboardEl.offset({left:t,top:i,width:a-5,height:n-5})}},{key:"showAutofill",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.autofillEl.offset({width:a-3,height:n-3,left:t,top:i}).show()}},{key:"hideAutofill",value:function(){this.autofillEl.hide()}},{key:"showClipboard",value:function(){this.clipboardEl.show()}},{key:"hideClipboard",value:function(){this.clipboardEl.hide()}}]),e}();function g(e){var t=this.data,i=e.left,a=e.top,n=e.width,r=e.height,o=e.scroll,l=e.l,s=e.t,d=t.freezeTotalWidth(),c=t.freezeTotalHeight(),u=i-d;d>l&&(u-=o.x);var m=a-c;return c>s&&(m-=o.y),{left:u,top:m,width:n,height:r}}function y(e){var t=this.data,i=e.left,a=e.width,n=e.height,r=e.l,o=e.t,l=e.scroll,s=t.freezeTotalWidth(),d=i-s;return s>r&&(d-=l.x),{left:d,top:o,width:a,height:n}}function b(e){var t=this.data,i=e.top,a=e.width,n=e.height,r=e.l,o=e.t,l=e.scroll,s=t.freezeTotalHeight(),d=i-s;return s>o&&(d-=l.y),{left:r,top:d,width:a,height:n}}function x(e){this.br.setAreaOffset(g.call(this,e))}function A(e){this.tl.setAreaOffset(e)}function w(e){this.t.setAreaOffset(y.call(this,e))}function E(e){this.l.setAreaOffset(b.call(this,e))}function C(e){this.l.setClipboardOffset(b.call(this,e))}function T(e){this.br.setClipboardOffset(g.call(this,e))}function O(e){this.tl.setClipboardOffset(e)}function S(e){this.t.setClipboardOffset(y.call(this,e))}function R(e){x.call(this,e),A.call(this,e),w.call(this,e),E.call(this,e)}function k(e){T.call(this,e),O.call(this,e),S.call(this,e),C.call(this,e)}var I=function(){function e(t,i){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];m(this,e),this.data=t,this.br=new p(t,this,i),this.t=new p(t,this,i),this.l=new p(t,this,i),this.tl=new p(t,this,i),this.sheet=i,this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=(0,a.h)("div","".concat(n.cssPrefix,"-selectors")).children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),r?(this.selectCell=new d.default(t,r),this.el.child(this.selectCell.el)):this.selectCell=new d.default(t,r),this.lastri=-1,this.lastci=-1,v+=1}return f(e,[{key:"longTimeBefore",value:function(){this.tl.longTimeBefore(),this.br.longTimeBefore(),this.t.longTimeBefore(),this.l.longTimeBefore()}},{key:"setCss",value:function(e){this.br.setCss(e),this.t.setCss(e),this.l.setCss(e),this.tl.setCss(e)}},{key:"hide",value:function(){this.el.hide()}},{key:"resetOffset",value:function(){var e=this.data,t=this.tl,i=this.t,a=this.l,n=this.br;this.selectCell.resetSelectOffset();var r=e.freezeTotalHeight(),o=e.freezeTotalWidth();r>0||o>0?(t.setOffset({width:o,height:r}),i.setOffset({left:o,height:r}),a.setOffset({top:r,width:o}),n.setOffset({left:o,top:r})):(t.hide(),i.hide(),a.hide(),n.setOffset({left:0,top:0}))}},{key:"resetAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();R.call(this,e),k.call(this,t),this.resetOffset()}},{key:"resetBRTAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();x.call(this,e),w.call(this,e),T.call(this,t),S.call(this,t),this.resetOffset()}},{key:"resetBRLAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();x.call(this,e),E.call(this,e),T.call(this,t),C.call(this,t),this.resetOffset()}},{key:"resetSelectorBRLAreaOffset",value:function(e){var t=this.data.getMoveRect(e),i=this.data.getClipboardRect();x.call(this,t),E.call(this,t),T.call(this,i),C.call(this,i),this.resetOffset()}},{key:"set",value:function(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=this.data,n=a.calSelectedRangeByStart(e,t),r=n.sri,o=n.sci;if(i){var l=e,s=t;e<0&&(l=0),t<0&&(s=0),a.selector.setIndexes(l,s),this.indexes=[l,s]}this.moveIndexes=[r,o],this.range=n,this.resetAreaOffset(),this.el.show()}},{key:"autoFilterRef",value:function(){console.log(this.range)}},{key:"setEnd",value:function(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],this.data);i&&(this.lastri=e,this.lastci=t),this.range=a.calSelectedRangeByEnd(e,t),R.call(this,this.data.getSelectedRect())}},{key:"setBoxinner",value:function(e){this.br.setBoxinner(e),this.t.setBoxinner(e),this.l.setBoxinner(e),this.tl.setBoxinner(e)}},{key:"reset",value:function(){var e=this.data.selector.range,t=e.eri,i=e.eci,a=e.sci,n=e.sri;this.set(n,a),this.setEnd(t,i,!0,!0)}},{key:"setMove",value:function(e){R.call(this,e)}},{key:"showAutofill",value:function(e,t,i){if(-1!==e||-1!==t){var a=this.range,n=a.sri,o=a.sci,l=a.eri,s=a.eci,d=0,c=e,u=t;if(2===i)d=11,this.arange=new r.CellRange(n,u,l,o-1);else if(4===i)d=22,this.arange=new r.CellRange(c,o,n-1,s);else if(3===i)d=33,this.arange=new r.CellRange(n,s+1,l,u);else{if(1!==i)return this.arange=null,d;d=44,this.arange=new r.CellRange(l+1,o,c,s)}if(null!==this.arange){var m=this.data.getRect(this.arange);m.width+=2,m.height+=2;var h=this.br,f=this.l,v=this.t,p=this.tl;h.showAutofill(g.call(this,m)),f.showAutofill(b.call(this,m)),v.showAutofill(y.call(this,m)),p.showAutofill(m)}return d}}},{key:"hideAutofill",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideAutofill()}))}},{key:"showClipboard",value:function(){var e=this,t=this.data.getClipboardRect();k.call(this,t),["br","l","t","tl"].forEach((function(t){e[t].showClipboard()}))}},{key:"hideClipboard",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideClipboard()}))}}]),e}();t.default=I},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=i(6),o=i(1),l=(a=i(3))&&a.__esModule?a:{default:a};function s(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function d(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function c(e){e.preventDefault(),e.stopPropagation();var t=this.filterItems;t.length<=0||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex-=1,this.itemIndex<0&&(this.itemIndex=t.length-1,this.el.el.scrollTop=this.el.el.scrollHeight),this.el.el.scrollTop=33*(this.itemIndex-9),t[this.itemIndex].toggle())}function u(e){e.stopPropagation();var t=this.filterItems;t.length<=0||t.length<this.itemIndex||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex+=1,this.itemIndex>t.length-1&&(this.itemIndex=0,this.el.el.scrollTop=0),this.el.el.scrollTop=33*(this.itemIndex-9),console.log(t.length),t[this.itemIndex].toggle())}function m(e){e.preventDefault();var t=this.filterItems;if(!(t.length<=0)){if(e.stopPropagation(),this.itemIndex<0)return this.itemIndex=0,this.hide(),void r.createEvent.call(this,13,!1);t[this.itemIndex].el.click(),this.hide()}}function h(e){var t=e.keyCode;switch(e.ctrlKey&&e.stopPropagation(),t){case 37:e.stopPropagation();break;case 38:c.call(this,e),e.stopPropagation();break;case 39:e.stopPropagation();break;case 40:u.call(this,e),e.stopPropagation();break;case 13:case 9:m.call(this,e);break;default:e.stopPropagation()}}var f=function(){function e(t,i,a,r){var l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"200px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filterItems=[],this.items=t,this.data=a,this.editor=r,this.el=(0,n.h)("div","".concat(o.cssPrefix,"-suggest")).css("width",l).css("overflow-y","auto").css("max-height","306px").hide(),this.el.attr("tabindex",0),this.itemClick=i,this.itemIndex=-1,this.show=!1}var t,i,a;return t=e,(i=[{key:"setOffset",value:function(e){this.el.cssRemoveKeys("top","bottom").offset(e)}},{key:"hide",value:function(){var e=this.el;this.filterItems=[],this.itemIndex=-1,e.hide(),this.show=!1,(0,r.unbindClickoutside)(this.el.parent())}},{key:"setItems",value:function(e){this.items=e}},{key:"search",value:function(e){var t,i=this,a=this.items,d=this.data,c=this.editor;if(/^\s*$/.test(e)||(a=a.filter((function(t){return(t.key.toUpperCase()||t.toUpperCase()).startsWith(e.toUpperCase())}))),a=a.map((function(e){var t=e.title;t?"function"==typeof t&&(t=t()):t=e;var a=(0,n.h)("div","".concat(o.cssPrefix,"-item")).child(t).on("click.stop",(function(){i.itemClick(e)}));return e.label&&a.child((0,n.h)("div","label").html(e.label)),a})),this.filterItems=a,a.length<=0)return this.hide(),void(this.show=!1);var u=this.el,m=d.getRect(new l.default(c.ri,c.ci,c.ri,c.ci)),h=m.left+55,f=m.top+50;a.length>=9&&m.top-306>=50&&(f-=306,f-=m.height),u.css("left","".concat(h,"px")),u.css("top","".concat(f,"px")),(t=u.html("")).children.apply(t,s(a)).show(),this.show=!0,(0,r.bindClickoutside)(u.parent(),(function(){i.hide(),i.show=!1}))}},{key:"bindInputEvents",value:function(e){var t=this;e.on("keydown",(function(e){return h.call(t,e)}))}}])&&d(t.prototype,i),a&&d(t,a),e}();t.default=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectorColor=function(e){return e%=s.length,{color:s[e],index:e}},t.default=void 0;var a=i(0),n=i(1);function r(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var o=["#ffffff","#000100","#e7e5e6","#445569","#5b9cd6","#ed7d31","#a5a5a5","#ffc001","#4371c6","#71ae47"],l=[["#f2f2f2","#7f7f7f","#d0cecf","#d5dce4","#deeaf6","#fce5d5","#ededed","#fff2cd","#d9e2f3","#e3efd9"],["#d8d8d8","#595959","#afabac","#adb8ca","#bdd7ee","#f7ccac","#dbdbdb","#ffe59a","#b3c6e7","#c5e0b3"],["#bfbfbf","#3f3f3f","#756f6f","#8596b0","#9cc2e6","#f4b184","#c9c9c9","#fed964","#8eaada","#a7d08c"],["#a5a5a5","#262626","#3a3839","#333f4f","#2e75b5","#c45a10","#7b7b7b","#bf8e01","#2f5596","#538136"],["#7f7f7f","#0c0c0c","#171516","#222a35","#1f4e7a","#843c0a","#525252","#7e6000","#203864","#365624"]],s=["#EE0000","#8A2BE2","#FF3E96","#8B4500","#3A5FCD","#FF7F24"];var d=["#c00000","#fe0000","#fdc101","#ffff01","#93d051","#00b04e","#01b0f1","#0170c1","#012060","#7030a0"];function c(e){var t=this,i=(0,a.h)("div","".concat(n.cssPrefix,"-color-palette-cell")).on("click.stop",(function(){return t.change(e)})).css("background-color",e);return this.items.push(i),(0,a.h)("td","").child(i)}t.default=function e(){var t,i,s,u=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-color-palette")),this.change=function(){},this.items=[];var m=(0,a.h)("table","").children((t=(0,a.h)("tbody","")).children.apply(t,[(i=(0,a.h)("tr","".concat(n.cssPrefix,"-theme-color-placeholders"))).children.apply(i,r(o.map((function(e){return c.call(u,e)}))))].concat(r(l.map((function(e){var t;return(t=(0,a.h)("tr","".concat(n.cssPrefix,"-theme-colors"))).children.apply(t,r(e.map((function(e){return c.call(u,e)}))))}))),[(s=(0,a.h)("tr","".concat(n.cssPrefix,"-standard-colors"))).children.apply(s,r(d.map((function(e){return c.call(u,e)}))))])));this.el.child(m)}},function(e,t,i){"use strict";function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._=[]}var t,i,n;return t=e,(i=[{key:"setData",value:function(e){this._=e}}])&&a(t.prototype,i),n&&a(t,n),e}();t.default=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(i(11)),n=o(i(9)),r=o(i(53));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function d(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=function(e){function t(e,i){var a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new n.default(e).css("height","16px").css("border-bottom","3px solid ".concat(i)),l=new r.default;return l.change=function(e){a.setTitle(e),a.change(e)},(a=d(this,c(t).call(this,o,"auto",!1,"bottom-left",{type:!1},l.el))).colorPalette=l,a}var i,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),i=t,(a=[{key:"setTitle",value:function(e){this.title.css("border-color",e),this.hide()}}])&&s(i.prototype,a),o&&s(i,o),t}(a.default);t.default=m},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=(a=i(9))&&a.__esModule?a:{default:a},o=i(1),l=i(6);function s(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function d(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var c=function(){function e(t,i){var a,l=this,d=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"600px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.title=t,this.el=(0,n.h)("div","".concat(o.cssPrefix,"-modal")).css("width",d).children((0,n.h)("div","".concat(o.cssPrefix,"-modal-header")).children(new r.default("close").on("click.stop",(function(){return l.hide()})),this.title),(a=(0,n.h)("div","".concat(o.cssPrefix,"-modal-content"))).children.apply(a,s(i))).hide(),this.open=!1}var t,i,a;return t=e,(i=[{key:"show",value:function(){var e=this;this.dimmer=(0,n.h)("div","".concat(o.cssPrefix,"-dimmer active")),document.body.appendChild(this.dimmer.el);var t=this.el.show().box(),i=t.width,a=t.height,r=document.documentElement,s=r.clientHeight,d=r.clientWidth;this.el.offset({left:(d-i)/2,top:(s-a)/3}),window.xkeydownEsc=function(t){27===t.keyCode&&e.hide()},this.open=!0,(0,l.bind)(window,"keydown",window.xkeydownEsc)}},{key:"hide",value:function(){this.el.hide(),this.open=!1,document.body.removeChild(this.dimmer.el),(0,l.unbind)(window,"keydown",window.xkeydownEsc),delete window.xkeydownEsc}}])&&d(t.prototype,i),a&&d(t,a),e}();t.default=c},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mountCopy=function(e){e.preventDefault();var t=r.call(this);if(t)return void(e.clipboardData&&(e.clipboardData.setData("text/html",l(t.img2)),e.clipboardData.setData("text/plain","")));var i=o.call(this);e.clipboardData&&(e.clipboardData.setData("text/html",l(i.html.el)),e.clipboardData.setData("text/plain",i.plain))},t.getChooseImg=r,t.sheetCopy=o;var a=i(0),n=i(4);function r(){var e=this.data.pasteDirectionsArr;if(this.direction=!1,e.length>0)for(var t=0;t<e.length;t++)if(!0===e[t].state)return this.container.css("pointer-events","auto"),e[t];return null}function o(){for(var e={plain:"",html:(0,a.h)("table","")},t=this.data,i=t.selector,r=t.rows,o=t.styles,l=i.range,s=l.sri,d=l.eri,c=l.sci,u=l.eci,m=(0,a.h)("tbody",""),h=s;h<=d;h+=1){for(var f=(0,a.h)("tr",""),v=c;v<=u;v+=1){var p=(0,a.h)("td","");if(r._[h]&&r._[h].cells&&r._[h].cells[v]){if(r._[h].cells[v]&&o[r._[h].cells[v].style]){if(p.css("color",o[r._[h].cells[v].style].color),o[r._[h].cells[v].style]&&o[r._[h].cells[v].style].font&&o[r._[h].cells[v].style].font.bold){var g=o[r._[h].cells[v].style].font.bold?"900":"";p.css("font-weight",g)}p.css("background",o[r._[h].cells[v].style].bgcolor)}r._[h].cells[v].text||(r._[h].cells[v].text=""),r._[h].cells[v].formulas||(r._[h].cells[v].formulas="");var y=""!==r._[h].cells[v].formulas?r._[h].cells[v].formulas:r._[h].cells[v].text;if(r._[h].cells[v].formulas&&(0,n.cutStr)(r._[h].cells[v].formulas,!1,!0).length>0){var b=(0,a.h)("reference","");b.html(y),b.attr("ri",h),b.attr("ci",v),p.child(b.el)}else p.html(y);e.plain+=y,e.plain+="\t"}else e.plain+="\t";f.child(p)}m.child(f),e.plain+="\n"}return e.html.child(m),e}function l(e){var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(4),n=i(7),r=i(5);function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e){for(var t=[],i=0;i<e.length;i++)(0,n.isHave)(e[i])&&(0,n.isHave)(e[i].expr)&&t.push(e[i].expr),(0,n.isHave)(e[i])&&(0,n.isHave)(e[i].cell)&&(0,n.isHave)(e[i].cell.depend)&&t.push.apply(t,l(e[i].cell.depend)),(0,n.isHave)(e[i])&&(0,n.isHave)(e[i].cell)&&(0,n.isHave)(e[i].cell.multivalueRefsCell)&&t.push(e[i].cell.multivalueRefsCell);return t}var d=function(){function e(t,i){var a=t.type,n=void 0===a?-1:a,r=t.action,o=void 0===r?"":r,l=t.ri,s=void 0===l?-1:l,d=t.ci,c=void 0===d?-1:d,u=t.oldData,m=void 0===u?"":u,h=t.newData,f=void 0===h?"":h,v=t.expr,p=void 0===v?"":v,g=t.oldStep,y=void 0===g?"":g,b=t.cellRange,x=void 0===b?"":b,A=t.cells,w=void 0===A?{}:A,E=t.height,C=void 0===E?-1:E,T=t.width,O=void 0===T?-1:T,S=t.oldCell,R=void 0===S?{}:S,k=t.newCell,I=void 0===k?{}:k,P=t.newMergesData,D=void 0===P?"":P,M=t.oldMergesData,N=void 0===M?"":M,_=t.property,L=void 0===_?"":_,j=t.value,B=void 0===j?"":j;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type=n,this.action=o,this.ri=s,this.ci=c,this.expr=p,this.cellRange=x,this.cells=w,this.height=C,this.width=O,this.oldCell=R,this.newCell=I,this.oldMergesData=N,this.newMergesData=D,this.property=L,this.value=B,this.oldStep=y,this.oldData=m,this.newData=f,this.data=i}var t,i,n;return t=e,(i=[{key:"isRefresh",value:function(){return 999===this.type}},{key:"findAllNeedCalcCell",value:function(){var e,t,i=[],n=this.oldCell,o=this.newCell,d=this.ri,c=this.ci;return(e=i).push.apply(e,l(s(n))),(t=i).push.apply(t,l(s(o))),-1!==d&&-1!==c&&i.push((0,r.xy2expr)(c,d)),i=(0,a.distinct)(i)}},{key:"restore",value:function(e,t,i){var n=this.type;if(1===n){var r=this.oldCell,o=this.newCell,l="";l=1===i?(0,a.deepCopy)(r):(0,a.deepCopy)(o);for(var s=0;s<l.length;s++){var d=l[s],c=d.cell,u=d.ri,m=d.ci;e.rows.setCellText(u,m,c,"cell")}}else if(13===n){var h=this.oldData,f=this.newData,v="";v=1===i?(0,a.deepCopy)(f):(0,a.deepCopy)(h),e.setData(v)}else if(2===n||5===n||6===n||11===n||12===n){var p=this.newCell,g=this.oldCell,y=this.oldMergesData,b=this.newMergesData,x=(this.cellRange,this.property),A=(this.value,"");A=1===i?(0,a.deepCopy)(g):(0,a.deepCopy)(p),"merge"===x&&(1===i?this.data.merges.setData(y):this.data.merges.setData(b));for(var w=0;w<A.length;w++){var E=A[w],C=E.cell,T=E.ri,O=E.ci;e.rows.setCellText(T,O,C,"cell")}}else if(3===n){var S=this.ri,R=this.height,k=this.oldStep;1===i?e.rows.setHeight(S,k.height):e.rows.setHeight(S,R)}else if(4===n){var I=this.ci,P=this.width,D=this.oldStep;1===i?e.cols.setWidth(I,D.width):e.cols.setWidth(I,P)}}}])&&o(t.prototype,i),n&&o(t,n),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(e,t){this.register=function(i){i.addEventListener("mousedown",(function(a){if(0===a.button){var n=a.clientX,r=a.clientY,o=i.offsetLeft,l=i.offsetTop;e&&e.onBegin&&e.onBegin.call(i,{left:n-o,top:r-l});var s=!0;i.style.cursor="move";var d=n,c=r;window.onmousemove=function(t){if(s){var a=t.clientX,u=t.clientY;return d=a-(n-o),c=u-(r-l),i.style.left=d>0?d+"px":"0px",i.style.top=c>0?c+"px":"0px",e&&e.onDrag&&e.onDrag.call(i,{left:d,top:c,x:a-n,y:u-r,isDown:s}),!1}},window.onmouseup=function(){return s=!1,i.style.cursor="default",e&&e.onEnd&&e.onEnd.call(i,{left:parseInt(i.style.left),top:parseInt(i.style.top)},t),!1},a.stopPropagation?a.stopPropagation():a.preventDefault&&a.preventDefault()}}))}};t.default=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.spreadsheet=void 0;var a=i(0),n=u(i(61)),r=u(i(29)),o=i(1),l=i(8);i(148);var s=u(i(149)),d=i(150),c=u(i(59));function u(e){return e&&e.__esModule?e:{default:e}}function m(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var h=function(){function e(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"sheet1";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var c=t;"string"==typeof t&&(c=document.querySelector(t)),this.locale("zh-cn",s.default),this.data=new n.default(d,i,l);var u=(0,a.h)("div","".concat(o.cssPrefix)).on("contextmenu",(function(e){return e.preventDefault()}));c.appendChild(u.el),this.sheet=new r.default(u,this.data),this.data.belongSheet=this.sheet}var t,i,d;return t=e,d=[{key:"locale",value:function(e,t){(0,l.locale)(e,t)}}],(i=[{key:"setDataSettings",value:function(e){this.data.settings.showEditor=e}},{key:"loadData",value:function(e){return this.sheet.loadData(e),this}},{key:"getData",value:function(){return this.data.getData()}},{key:"validate",value:function(){return this.data.validations.errors.size<=0}},{key:"change",value:function(e){return this.data.change=e,this}},{key:"locale",value:function(e,t){(0,l.locale)(e,t)}},{key:"getText",value:function(e,t,i){for(var a=this.sheet,n=a.selectors,r=a.data,o=a.table,l="",s=0;s<n.length;s++)l+=n[s].erpx;return r.getCellByExpr(l,o,e,t,i)}},{key:"removeEvent",value:function(){this.sheet.removeEvent()}}])&&m(t.prototype,i),d&&m(t,d),e}(),f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new h(e,t)};t.spreadsheet=f,window&&(window.drag=c.default,window.x=window.x||{},window.bugout=d.bugout,window.x.spreadsheet=f,window.x.spreadsheet.locale=function(e,t){return(0,l.locale)(e,t)})},function(e,t,i){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=i(24),r=P(i(62)),o=P(i(63)),l=P(i(64)),s=P(i(65)),d=i(66),c=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=I();if(t&&t.has(e))return t.get(e);var i={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=n?Object.getOwnPropertyDescriptor(e,r):null;o&&(o.get||o.set)?Object.defineProperty(i,r,o):i[r]=e[r]}i.default=e,t&&t.set(e,i);return i}(i(15)),u=i(7),m=i(25),h=i(99),f=i(100),v=i(3),p=i(5),g=i(8),y=P(i(50)),b=i(0),x=i(28),A=(i(30),i(4)),w=P(i(34)),E=i(145),C=i(31),T=P(i(146)),O=P(i(49)),S=P(i(20)),R=P(i(147)),k=P(i(54));function I(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return I=function(){return e},e}function P(e){return e&&e.__esModule?e:{default:e}}function D(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function M(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function N(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var _={view:{height:function(){return document.documentElement.clientHeight},width:function(){return document.documentElement.clientWidth}},formula:{},showGrid:!0,showToolbar:!0,showContextmenu:!0,showEditor:!0,autoLoad:!0,ignore:[],cellWidth:0,ignoreRi:0,minus:!1,row:{len:100,height:25},col:{len:26,width:100,indexWidth:60,minWidth:10},rowsInit:!1,style:{bgcolor:"#ffffff",align:"left",valign:"middle",textwrap:!1,strike:!1,flexible:!1,underline:!1,autoAdapt:!1,color:"#0a0a0a",font:{name:"Arial",size:10,bold:!1,italic:!1}}};function L(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};if(!t)return!1;var a=this.merges,n=t.clone(),r=N(e.size(),2),o=r[0],l=r[1],s=N(t.size(),2),d=s[0],c=s[1];return o>d&&(n.eri=t.sri+o-1),l>c&&(n.eci=t.sci+l-1),!a.intersects(n)||(i((0,g.t)("error.pasteForMergedCell")),!1)}function j(e,t,i){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=this.rows,r=this.merges;"all"!==i&&"format"!==i||(n.deleteCells(t,i),r.deleteWithin(t)),n.copyPaste(e,t,i,a,(function(e,t,i){if(i&&i.merge){var a=N(i.merge,2),n=a[0],o=a[1];if(n<=0&&o<=0)return;r.add(new v.CellRange(e,t,e+n,t+o))}}))}function B(e,t,i){var a=this.clipboard,n=this.rows,r=this.merges;n.cutPaste(e,t),r.move(e,t.sri-e.sri,t.sci-e.sci),i&&a.clear()}function F(e,t,i){var a=this.styles,n=this.rows.getCellOrNew(e,t),r={};(0,u.isHave)(n.style)&&(r=c.cloneDeep(a[n.style])),Object.assign(r,{border:i}),n.style=this.addStyle(r)}function U(e,t,i,a){if(-1===e||-1===t)return{state:!0,msg:"单元格坐标有误"};if("style"!==a&&(!i||"="!==i[0]))return{state:!1,msg:"正确"};var n=H.call(this,i);return"style"!==a&&!0===n.state?{msg:n.msg,state:!0}:{msg:n.msg,state:!1}}function H(e){var t=!1,i="";try{new w.default(e).parse()}catch(e){i="您输入的公式存在问题，请更正, 错误原因: "+e.description,t=!0}return!0===t&&!1===(0,A.isLegal)(e)&&(i="缺少左括号或右括号",t=!0),t?{state:!0,msg:i}:{state:!1,msg:i}}function V(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"to",i=arguments.length>2?arguments[2]:void 0;if("to"===t){for(var a=[],n=0;n<e.length;n++){var r=e[n];console.log(r);var o={src:r.img2.src,ri:r.ri,ci:r.ci,top:r.top,left:r.left,range:r.range,offsetLeft:r.offsetLeft,offsetTop:r.offsetTop,nextLeft:r.nextLeft,nextTop:r.nextTop,img:r.img,arr:r.arr,img2:r.img2};a.push(o)}return a}if("from"===t){if("string"==typeof i)return;for(var l=0;l<e.length;l++){var s=e[l],d=(0,b.h)("img","");d.el.src=s.src,x.mountImg.call(i,d.el,!0,s.ri,s.ci,s.range)}}}function z(e,t){for(var i=this.rows,a=e+1,n=!0;n;){var r=i.getCellOrNew(a,t);r&&r.text?a+=1:n=!1}return a}function W(e){var t=this,i=e.mode,a=e.style,n=e.color,r=this.styles,o=this.selector,l=this.rows,s=o.range,d=s.sri,u=s.sci,m=s.eri,h=s.eci,f=!this.isSignleSelected();if(f||"inside"!==i&&"horizontal"!==i&&"vertical"!==i){for(var v=d;v<=m;v+=1)for(var p=u;p<=h;p+=1)F.call(this,v,p,{});if("outside"!==i||f){if("none"===i)o.range.each((function(e,i){var a=l.getCell(e,i);if(a&&void 0!==a.style){var n=c.cloneDeep(r[a.style]);delete n.border,a.style=t.addStyle(n)}}));else if("all"===i||"inside"===i||"outside"===i||"horizontal"===i||"vertical"===i)!function(){for(var e=[],r=d;r<=m;r+=1)for(var o=u;o<=h;o+=1){for(var s=[],c=0;c<e.length;c+=1){var v=N(e[c],4),p=v[0],g=v[1],y=v[2],b=v[3];if(r===p+y+1&&s.push(c),p<=r&&r<=p+y&&o===g){o+=b+1;break}}if(s.forEach((function(t){return e.splice(t,1)})),o>h)break;var x=l.getCell(r,o),A=0,w=0;if(x&&x.merge){var E=N(x.merge,2);A=E[0],w=E[1],e.push([r,o,A,w])}var C=A>0&&r+A===m,T=w>0&&o+w===h,O={};"all"===i?O={bottom:[a,n],top:[a,n],left:[a,n],right:[a,n]}:"inside"===i?(!T&&o<h&&(O.right=[a,n]),!C&&r<m&&(O.bottom=[a,n])):"horizontal"===i?!C&&r<m&&(O.bottom=[a,n]):"vertical"===i?!T&&o<=h&&(O.right=[a,n]):"outside"===i&&f&&(d===r&&(O.top=[a,n]),(C||m===r)&&(O.bottom=[a,n]),u===o&&(O.left=[a,n]),(T||h===o)&&(O.right=[a,n])),Object.keys(O).length>0&&F.call(t,r,o,O),o+=w}}();else if("top"===i||"bottom"===i)for(var g=u;g<=h;g+=1)"top"===i&&(F.call(this,d,g,{top:[a,n]}),g+=l.getCellMerge(d,g)[1]),"bottom"===i&&(F.call(this,m,g,{bottom:[a,n]}),g+=l.getCellMerge(m,g)[1]);else if("left"===i||"right"===i)for(var y=d;y<=m;y+=1)"left"===i&&(F.call(this,y,u,{left:[a,n]}),y+=l.getCellMerge(y,u)[0]),"right"===i&&(F.call(this,y,h,{right:[a,n]}),y+=l.getCellMerge(y,h)[0])}else F.call(this,d,u,{top:[a,n],bottom:[a,n],left:[a,n],right:[a,n]})}}function $(e,t){var i=this.rows,a=this.freezeTotalHeight(),n=i.height;a+i.height<e&&(n-=t);for(var r=this.exceptRowSet,o=0,l=n,s=i.height;o<i.len&&!(l>e);o+=1)r.has(o)||(l+=s=i.getHeight(o));return(l-=s)<=0?{ri:-1,top:0,height:s}:{ri:o-1,top:l,height:s}}function Y(e,t){var i=this.cols,a=this.freezeTotalWidth(),n=i.indexWidth;a+i.indexWidth<=e&&(n-=t);var r=N(c.rangeReduceIf(0,i.len,n,i.indexWidth,e,(function(e){return i.getWidth(e)})),3),o=r[0],l=r[1],s=r[2];return l<=0?{ci:-1,left:0,width:i.indexWidth}:{ci:o-1,left:l,width:s}}function X(e,t,i){var a=e.text,n=e.formula,r=t.symbol,o=t.position;if(!(0,u.isHave)(a)||!(0,c.isNumber)(a))return null;var l=i((0,C.formatNumberRender)(a,-1));return n=(0,m.isFormula)(n)?n:l,isNaN(l)?null:{text:"begin"===o?r+l:l+r,value:a,formulas:n}}function G(e,t,i){return K.call(this,t,i,e)}function K(e,t,i){var a=this.rows,n=this.getCellStyle(e,t),r=(0,E.dateDiff)(i.text),o=r.isValid,l=r.diff,s=a.getCellStyleConvert(n,o);if("number"===s){var d=i.text,h=i.formulas,f={};return f=o?{text:l.toFixed(2),formulas:h}:{text:d=(0,C.formatNumberRender)(d,2),value:i.text,formulas:h},(0,u.isHave)(f.text)&&(0,c.isNumber)(f.text)?{state:!0,style:s,text:f.text,cell:f}:{state:!1,style:s,text:f.text,cell:f}}if("date"===s||"datetime"===s){var v=i.text;if(!o){var p=(0,E.formatDate)(v),g=p.state,y=p.date;o=g,l=i.text,v=y}return o&&"datetime"===s&&(v=(0,E.changeFormat)((0,E.formatDate)((0,E.dateDiff)(v).diff).date)),{state:o,style:s,text:(0,u.isHave)(n)?v:l}}if("normal"===s){if(o){var b=l,x=i.formulas,A={formulas:a.toString(x),text:a.toString(b)};return{state:!0,text:A.text,style:s,cell:A}}var w=i.text,T={formulas:i.formulas,text:w};return{state:!0,style:s,text:T.text,cell:T}}if("rmb"===s){var O="",S="";o?(O=l,S=(0,m.isFormula)(i.formulas)?i.formulas:l):(O=(0,C.formatNumberRender)(i.text,0),S=i.formulas);var R=X({text:O,formula:S},{symbol:"￥",position:"begin"},(function(e){return e}));if(R)return{state:!0,style:s,text:R.text,cell:R}}else if("percent"===s){var k="",I="";o?(k=l,I=(0,m.isFormula)(i.formulas)?i.formulas:l):(k=a.useOne(i.value,i.text),I=i.formulas);var P=X({text:k,formula:I},{symbol:"%",position:"end"},(function(e){return Number(100*e).toFixed(2)}));if(P)return{state:!0,style:s,text:P.text,cell:P}}return{state:!1,style:s,text:i.text,cell:{}}}var Z=function(){function e(t,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.settings=c.merge(_,i||{}),this.name=t||"belongSheet",this.methods=a,this.freeze=[0,0],this.styles=[],this.merges=new d.Merges,this.rows=new m.Rows(this.settings.row,this),this.cols=new h.Cols(this.settings.col),this.validations=new f.Validations,this.hyperlinks={},this.comments={},this.showEquation=!1,this.calc=new n.MockCalc,this.pasteDirectionsArr=[],this.changeDataForCalc=null,this.chart=new k.default,this.multiPreAction=new T.default(this),this.selector=new r.default,this.scroll=new o.default,this.clipboard=new l.default,this.moved=new y.default,this.autoFilter=new s.default,this.change=function(){},this.exceptRowSet=new Set,this.sortedRowMap=new Map,this.unsortedRowMap=new Map}var t,i,a;return t=e,(i=[{key:"addValidation",value:function(e,t,i){var a=this;this.changeData((function(){a.validations.add(e,t,i)}))}},{key:"removeValidation",value:function(){var e=this,t=this.selector.range;this.changeData((function(){e.validations.remove(t)}))}},{key:"tryParseToNum",value:function(e,t,i){return G.call(this,e,t,i)}},{key:"clickCopyPaste",value:function(){var e=this.selector.range.eri,t=this.selector.range.eci,i=this.rows,a=i.getCellOrNew(e,t),n=i.getCellOrNew(e+1,t);if(!a||!a.text||n&&n.text)return{enter:!1};for(var r=z.call(this,e,t-1),o=z.call(this,e,t+1),l=r<o?o:r,s=!1,d=1;d<l&&!1===s;d++){var c=i.getCellOrNew(e+d,t);c&&c.text&&(l=e+d,s=!0)}return{enter:!0,dstCellRange:new v.CellRange(e+1,t,l-1,t),srcCellRange:new v.CellRange(e,t,e,t)}}},{key:"getSelectedValidation",value:function(){var e=this.selector,t=e.ri,i=e.ci,a=e.range,n=this.validations.get(t,i),r={ref:a.toString()};return null!==n&&(r.mode=n.mode,r.validator=n.validator),r}},{key:"canUndo",value:function(){return this.multiPreAction.getItems(1).length>0}},{key:"canRedo",value:function(){return this.multiPreAction.getItems(2).length>0}},{key:"undo",value:function(){this.multiPreAction.undo(),this.changeDataForCalc=this.getChangeDataToCalc()}},{key:"historyList",value:function(e){return this.multiPreAction.getItems(e)}},{key:"redo",value:function(){this.multiPreAction.redo(),this.changeDataForCalc=this.getChangeDataToCalc()}},{key:"copy",value:function(){document.execCommand("copy",!0),this.clipboard.copy(this.selector.range)}},{key:"makeCellPropArr",value:function(e,t,i){for(var a=[],n=this.rows.eachRange(e),r=0;r<n.length;r++){var o=n[r],l=o.ri,s=o.ci,d=o.cell;if((0,u.isHave)(d)&&!1===(0,u.isHave)(d.style)){var c=this.defaultStyle();d.style=this.addStyle(c)}var m=new S.default(l+t,s+i,d,(0,p.xy2expr)(l+t,s+i));a.push(m)}return a}},{key:"setCellByCellProp",value:function(e,t){for(var i=this.rows,a=0;a<e.length;a++){var n=e[a],r=n.ri,o=n.ci,l=n.cell;(0,u.isHave)(l)&&(0,u.isHave)(l.style)&&i.setCell(r,o,l,"style"),t(r,o)}}},{key:"paintFormatChange",value:function(e){var t=this;this.changeData((function(){var i=t.clipboard,a=t.selector,n=i.range,r=a.ri,o=a.ci,l=r-n.sri,s=o-n.sci,d=t.makeCellPropArr(n,l,s);if(a.range.eri-a.range.sri==0&&a.range.eci-a.range.sci==0)t.setCellByCellProp(d,e);else{var c=new R.default(n,a.range),u=c.getPaintType(),m=c.makePaintArr(u,d);t.setCellByCellProp(m,e)}}),{type:12,cellRange:this.selector.range})}},{key:"move",value:function(){this.moved.move()}},{key:"cut",value:function(){this.clipboard.cut(this.selector.range)}},{key:"paste",value:function(e){this.changeData((function(){}),{type:6,cellRange:e})}},{key:"autofill",value:function(e,t){var i=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=this.selector.range;return!!L.call(this,n,e,a)&&(this.changeData((function(){j.call(i,n,e,t,!0)}),{type:5,cellRange:e}),!0)}},{key:"clickAutofill",value:function(e,t,i){var a=this,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};return!!L.call(this,e,t,n)&&(this.changeData((function(){j.call(a,e,t,i,!0)})),!0)}},{key:"clearClipboard",value:function(){this.clipboard.clear()}},{key:"calSelectedRangeByEnd",value:function(e,t){var i=this.selector,a=this.rows,n=this.cols,r=this.merges,o=i.range,l=o.sri,s=o.sci,d=o.eri,c=o.eci,u=i.ri,m=i.ci,h=e,f=t;return e<0&&(h=a.len-1),t<0&&(f=n.len-1),h<=u?(l=h,d=u):d=h,f<=m?(s=f,c=m):c=f,i.range=r.union(new v.CellRange(l,s,d,c)),i.range}},{key:"calSelectedRangeByStart",value:function(e,t){var i=this.selector,a=this.rows,n=this.cols,r=this.merges.getFirstIncludes(e,t);return null===r&&(r=new v.CellRange(e,t,e,t),-1===e&&(r.sri=0,r.eri=a.len-1),-1===t&&(r.sci=0,r.eci=n.len-1)),i.range=r,r}},{key:"setSelectedCellAttr",value:function(e,t){var i=this;this.changeData((function(){var a=i.selector,n=i.styles,r=i.rows;if("merge"===e)t?i.merge():i.unmerge();else if("border"===e)W.call(i,t);else if("cellFormulaProxy"===e){var o=r.getCellOrNew(a.ri,a.ci);o.text="=".concat(t,"()"),o.formulas="=".concat(t,"()")}else a.range.each((function(a,o){var l=r.getCellOrNew(a,o),s={};if((0,u.isHave)(l.style)&&(s=c.cloneDeep(n[l.style])),"format"===e)s.format=t,r.setCellText(a,o,{text:l.text,style:i.addStyle(s)},"format");else if("font-bold"===e||"font-italic"===e||"font-name"===e||"font-size"===e){var d={};d[e.split("-")[1]]=t,s.font=Object.assign(s.font||{},d),l.style=i.addStyle(s)}else"flexible"===e?(i.exceptRowSet.has(a+1)&&i.exceptRowSet.has(a+2)&&!i.exceptRowSet.has(a+3)?(i.exceptRowSet.delete(a),i.exceptRowSet.delete(a+1),i.exceptRowSet.delete(a+2)):(i.exceptRowSet.add(a),i.exceptRowSet.add(a+1),i.exceptRowSet.add(a+2)),s[e]=t,l.style=i.addStyle(s)):"strike"!==e&&"textwrap"!==e&&"underline"!==e&&"align"!==e&&"valign"!==e&&"color"!==e&&"bgcolor"!==e||(s[e]=t,l.style=i.addStyle(s))}))}),{type:11,cellRange:this.selector.range,property:e,value:t})}},{key:"setSelectedCellText",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input",i=this.selector,a=i.ri,n=i.ci,r=a;this.unsortedRowMap.has(a)&&(r=this.unsortedRowMap.get(a)),this.setCellText(r,n,{text:e},t),this.resetAutoFilter()}},{key:"setSelectedCell",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input",i=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;this.setCellAll(a,n,e,i,t),this.resetAutoFilter()}},{key:"getSelectedCell",value:function(){var e=this.selector,t=e.ri,i=e.ci,a=t;return this.unsortedRowMap.has(t)&&(a=this.unsortedRowMap.get(t)),this.rows.getCell(a,i)}},{key:"editorChangeToHistory",value:function(e,t,i){var a=t.ri,n=t.ci;if(-1===a||-1===n)return{state:!1};var r=this.rows.getCell(a,n),o=this.multiPreAction,l=(0,p.xy2expr)(n,a),s=o.getStepType(i,{ri:a,ci:n,expr:l,text:r.text}),d=new S.default(a,n,e,l),c=new S.default(a,n,r,l);return o.addStep(s,{oldCell:[d],newCell:[c]}),this.changeDataForCalc=this.getChangeDataToCalc(),{state:!0}}},{key:"changeToHistory",value:function(e,t){var i=e.ri,a=e.type,n=e.ci,r=e.cellRange,o=e.property,l=e.value,s=e.oldCell,d=e.oldMergesData;if(-1===a)return{state:!1};var c=this.multiPreAction,u=this.selector,m=c.getStepType(a,{expr:"",property:o,value:l,oldCell:s,range:u.range,ri:i,ci:n,cellRange:r});return c.addStep(m,{oldCell:s,oldMergesData:d,newMergesData:this.merges.getData(),oldStep:t}),{state:!0}}},{key:"getSelectedCellRiCi",value:function(e,t){var i=e;return this.unsortedRowMap.has(e)&&(i=this.unsortedRowMap.get(e)),this.rows.getCell(i,t)}},{key:"xyInSelectedRect",value:function(e,t){var i=this.getSelectedRect(),a=i.left,n=i.top,r=i.width,o=i.height,l=e-this.cols.indexWidth,s=t-this.rows.height;return l>a&&l<a+r&&s>n&&s<n+o}},{key:"getSelectedRect",value:function(){return this.getRect(this.selector.range)}},{key:"getClipboardRect",value:function(){var e=this.clipboard;return e.isClear()?{left:-100,top:-100}:this.getRect(e.range)}},{key:"getMoveRect",value:function(e){return this.getRect(e)}},{key:"getRect",value:function(e){var t=this.scroll,i=this.rows,a=this.cols,n=this.exceptRowSet,r=e.sri,o=e.sci,l=e.eri,s=e.eci;if(r<0&&o<0)return{left:0,l:0,top:0,t:0,scroll:t};var d=a.sumWidth(0,o),c=i.sumHeight(0,r,n),u=i.sumHeight(r,l+1,n),m=a.sumWidth(o,s+1),h=d-t.x,f=c-t.y,v=this.freezeTotalHeight(),p=this.freezeTotalWidth();return p>0&&p>d&&(h=d),v>0&&v>c&&(f=c),{l:d,t:c,left:h,top:f,height:u,width:m,scroll:t}}},{key:"getCellRectByXY",value:function(e,t){var i=this.scroll,a=this.merges,n=this.rows,r=this.cols,o=$.call(this,t,i.y),l=o.ri,s=o.top,d=o.height,c=Y.call(this,e,i.x),u=c.ci,m=c.left,h=c.width;if(-1===u&&(h=r.totalWidth()),-1===l&&(d=n.totalHeight()),l>=0||u>=0){var f=a.getFirstIncludes(l,u);if(f){l=f.sri,u=f.sci;var v=this.cellRect(l,u);m=v.left,s=v.top,h=v.width,d=v.height}}return{ri:l,ci:u,left:m,top:s,width:h,height:d}}},{key:"getCellRectByXYWithNotTotalResult",value:function(e,t){var i=this.scroll,a=this.merges,n=$.call(this,t,i.y),r=n.ri,o=n.top,l=n.height,s=Y.call(this,e,i.x),d=s.ci,c=s.left,u=s.width;if(r>=0||d>=0){var m=a.getFirstIncludes(r,d);if(m){r=m.sri,d=m.sci;var h=this.cellRect(r,d);c=h.left,o=h.top,u=h.width,l=h.height}}return{ri:r,ci:d,left:c,top:o,width:u,height:l}}},{key:"isSignleSelected",value:function(){var e=this.selector.range,t=e.sri,i=e.sci,a=e.eri,n=e.eci,r=this.getCell(t,i);if(r&&r.merge){var o=N(r.merge,2),l=o[0],s=o[1];if(t+l===a&&i+s===n)return!0}return!this.selector.multiple()}},{key:"canUnmerge",value:function(){var e=this.selector.range,t=e.sri,i=e.sci,a=e.eri,n=e.eci,r=this.getCell(t,i);if(r&&r.merge){var o=N(r.merge,2),l=o[0],s=o[1];if(t+l===a&&i+s===n)return!0}return!1}},{key:"merge",value:function(){var e=this.selector,t=this.rows;if(!this.isSignleSelected()){var i=N(e.size(),2),a=i[0],n=i[1];if(a>1||n>1){var r=e.range,o=r.sri,l=r.sci,s=t.getCellOrNew(o,l);s.merge=[a-1,n-1],this.merges.add(e.range),this.rows.deleteCells(e.range),this.rows.setCell(o,l,s)}}}},{key:"unmerge",value:function(){var e=this,t=this.selector;if(this.isSignleSelected()){var i=t.range,a=i.sri,n=i.sci;this.changeData((function(){e.rows.deleteCell(a,n,"merge"),e.merges.deleteWithin(t.range)}))}}},{key:"canAutofilter",value:function(){return!this.autoFilter.active()}},{key:"autofilter",value:function(){var e=this,t=this.autoFilter,i=this.selector;this.changeData((function(){if(t.active())t.clear(),e.exceptRowSet=new Set,e.sortedRowMap=new Map,e.unsortedRowMap=new Map;else{for(var a=i.range.toString(),n=i.range.eri,r=e.rows,o=i.range.sci;o<=i.range.eci;o++){var l=new v.CellRange(i.range.sri,o,i.range.sri,o);n<(l=r.autoFilterRef(a,l)).eri&&(n=l.eri)}var s=new v.CellRange(i.range.sri,i.range.sci,n,i.range.eci);t.ref=s.toString()}}))}},{key:"throwFormula",value:function(){var e=this.selector,t=this.rows;this.changeData((function(){e.range.each((function(e,i){var a=t.getCellOrNew(e,i);a&&a.text&&a.formulas&&t.setCellAll(e,i,a.text,a.text)}))}))}},{key:"setAutoFilter",value:function(e,t,i,a){var n=this.autoFilter;n.addFilter(e,i,a),n.setSort(e,t),this.resetAutoFilter()}},{key:"resetAutoFilter",value:function(){var e=this,t=this.autoFilter,i=this.rows;if(t.active()){var a=t.sort,n=t.filteredRows((function(e,t){return i.getCell(e,t)})),r=n.rset,o=n.fset,l=Array.from(o),s=Array.from(o);a&&l.sort((function(e,t){return"asc"===a.order?e-t:"desc"===a.order?t-e:0})),this.exceptRowSet=r,this.sortedRowMap=new Map,this.unsortedRowMap=new Map,l.forEach((function(t,i){e.sortedRowMap.set(s[i],t),e.unsortedRowMap.set(t,s[i])}))}}},{key:"deleteCell",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all",i=this.selector;this.changeData((function(){e.rows.deleteCells(i.range,t),"all"!==t&&"format"!==t||e.merges.deleteWithin(i.range)}),{type:2})}},{key:"insert",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=this.selector.range,n=a.sri,r=a.sci,o=this.rows,l=this.merges,s=this.cols;i="row"===e?-1!==i?i:n:-1!==i?i:r,this.changeData((function(){var a=i;"row"===e?o.insert(i,t):"column"===e&&(o.insertColumn(i,t),a=i,s.len+=t),l.shift(e,a,t,(function(e,t,i,a){var n=o.getCell(e,t);n.merge[0]+=i,n.merge[1]+=a}))}),{type:13,data:this.getData(),property:"insert"})}},{key:"delete",value:function(e){var t=this;this.changeData((function(){var i=t.rows,a=t.merges,n=t.selector,r=t.cols,o=n.range,l=n.range,s=l.sri,d=l.sci,c=l.eri,u=l.eci,m=N(n.range.size(),2),h=m[0],f=m[1],v=s,p=h;"row"===e?i.delete(s,c):"column"===e&&(i.deleteColumn(d,u),v=o.sci,p=f,r.len-=1),a.shift(e,v,-p,(function(e,t,a,n){var r=i.getCell(e,t);r.merge[0]+=a,r.merge[1]+=n,0===r.merge[0]&&0===r.merge[1]&&delete r.merge}))}))}},{key:"scrollx",value:function(e,t){var i=this.scroll,a=this.freeze,n=this.cols,r=N(a,2)[1],o=N(c.rangeReduceIf(r,n.len,0,0,e,(function(e){return n.getWidth(e)})),3),l=o[0],s=o[1],d=o[2],u=s;e>0&&(u+=d),i.x!==u&&(i.ci=e>0?l:0,i.x=u,t())}},{key:"scrolly",value:function(e,t){var i=this.scroll,a=this.freeze,n=this.rows,r=N(a,1)[0],o=N(c.rangeReduceIf(r,n.len,0,0,e,(function(e){return n.getHeight(e)})),3),l=o[0],s=o[1],d=o[2],u=s;e>0&&(u+=d),i.y!==u&&(i.ri=e>0?l:0,i.y=u,t())}},{key:"cellRect",value:function(e,t){var i=this.rows,a=this.cols,n=a.sumWidth(0,t),r=i.sumHeight(0,e),o=i.getCell(e,t),l=a.getWidth(t),s=i.getHeight(e);if(null!==o&&o.merge){var d=N(o.merge,2),c=d[0],u=d[1];if(c>0)for(var m=1;m<=c;m+=1)s+=i.getHeight(e+m);if(u>0)for(var h=1;h<=u;h+=1)l+=a.getWidth(t+h)}return{left:n,top:r,width:l,height:s,cell:o}}},{key:"getCell",value:function(e,t){return this.rows.getCell(e,t)}},{key:"getMax",value:function(){var e=this.cols.len;return{mri:this.rows.len,mci:e}}},{key:"renderFormat",value:function(e,t,i,a,n){return new O.default(t).renderFormat(e,i,a,this,n)}},{key:"isFormula",value:function(e){return this.rows.isFormula(e)}},{key:"toString",value:function(e){return this.rows.toString(e)}},{key:"getCellTextOrDefault",value:function(e,t){var i=this.getCell(e,t);return i&&i.text?i.text:""}},{key:"getCellStyle",value:function(e,t){var i=this.getCell(e,t);return i&&void 0!==i.style?this.styles[i.style]:null}},{key:"getCellStyleOrDefault",value:function(e,t){var i=this.styles,a=this.rows.getCell(e,t),n=a&&void 0!==a.style?i[a.style]:{};return c.merge(this.defaultStyle(),n)}},{key:"getSelectedCellStyle",value:function(){var e=this.selector,t=e.ri,i=e.ci;return this.getCellStyleOrDefault(t,i)}},{key:"getCellByExpr",value:function(e,t,i,a,n){}},{key:"setCellText",value:function(e,t,i,a){var n=i.text,r=i.style,o=this.rows,l=this.history,s=this.validations;"finished"===a?(o.setCellText(e,t,{text:""}),l.add(this.getData()),o.setCellText(e,t,{text:n})):("end"===a?o.setCellAll(e,t,n):"formulas"===a?o.setCellAll(e,t,n,"-"):"style"===a?o.setCellText(e,t,{text:n,style:r},"style"):o.setCellText(e,t,{text:n}),this.change(this.getData())),s.validate(e,t,n)}},{key:"setCellAll",value:function(e,t,i,a,n){var r=this.rows,o=this.history,l=this.validations;"finished"===n?(r.setCellAll(e,t,"",""),o.add(this.getData()),r.setCellAll(e,t,i,a)):r.setCellAll(e,t,i,a),l.validate(e,t,i,a)}},{key:"equationIsActive",value:function(){return this.showEquation}},{key:"freezeIsActive",value:function(){var e=N(this.freeze,2),t=e[0],i=e[1];return t>0||i>0}},{key:"setFreeze",value:function(e,t){var i=this;this.changeData((function(){i.freeze=[e,t]}))}},{key:"freezeTotalWidth",value:function(){return this.cols.sumWidth(0,this.freeze[1])}},{key:"freezeTotalHeight",value:function(){return this.rows.sumHeight(0,this.freeze[0])}},{key:"setRowHeight",value:function(e,t){var i=this;this.changeData((function(){i.rows.setHeight(e,t)}),{type:3,ri:e})}},{key:"setColWidth",value:function(e,t){var i=this;this.changeData((function(){i.cols.setWidth(e,t)}),{type:4,ci:e})}},{key:"viewHeight",value:function(){var e=this.settings,t=e.view,i=e.showToolbar,a=t.height();return i&&(a-=41),a}},{key:"viewWidth",value:function(){return this.settings.view.width()}},{key:"freezeViewRange",value:function(){var e=N(this.freeze,2),t=e[0],i=e[1];return new v.CellRange(0,0,t-1,i-1,this.freezeTotalWidth(),this.freezeTotalHeight())}},{key:"viewRange",value:function(){var e=this.scroll,t=this.rows,i=this.cols,a=this.freeze,n=e.ri,r=e.ci;n<=0&&(n=N(a,1)[0]),r<=0&&(r=N(a,2)[1]);for(var o=0,l=0,s=[t.len,i.len],d=s[0],c=s[1],u=n;u<t.len&&(d=u,!((l+=t.getHeight(u))>this.viewHeight()));u+=1);for(var m=r;m<i.len&&(c=m,!((o+=i.getWidth(m))>this.viewWidth()));m+=1);return new v.CellRange(n,r,d,c,o,l)}},{key:"viewRange2",value:function(){var e=this.scroll,t=this.rows,i=this.cols,a=this.freeze,n=e.ri,r=e.ci;n<=0&&(n=N(a,1)[0]),r<=0&&(r=N(a,2)[1]);for(var o=0,l=0,s=[t.len,i.len],d=s[0],c=s[1],u=n;u<t.len&&(d=u,!((l+=t.getHeight(u))>this.viewHeight()));u+=1);for(var m=r;m<i.len;m+=1)o+=i.getWidth(m),c=m;return new v.CellRange(n,r,d,c,o,l)}},{key:"eachMergesInView",value:function(e,t){this.merges.filterIntersects(e).forEach((function(e){return t(e)}))}},{key:"rowEach",value:function(e,t,i){for(var a=0,n=this.rows,r=this.exceptRowSet,o=D(r),l=0,s=0;s<o.length;s+=1)o[s]<e&&(l+=1);for(var d=e+l;d<=t+l;d+=1)if(r.has(d))l+=1;else{var c=n.getHeight(d);if(i(d,a,c),(a+=c)>this.viewHeight())break}}},{key:"colEach",value:function(e,t,i){for(var a=0,n=this.cols,r=e;r<=t;r+=1){var o=n.getWidth(r);if(i(r,a,o),(a+=o)>this.viewWidth())break}}},{key:"defaultStyle",value:function(){return this.settings.style}},{key:"addStyle",value:function(e){for(var t=this.styles,i=0;i<t.length;i+=1){var a=t[i];if(c.equals(a,e))return i}return t.push(e),t.length-1}},{key:"getChangeDataToCalc",value:function(){var e=this.multiPreAction;if(e.undoItems.length<=0)return null;var t=e.undoItems[e.undoItems.length-1];return(0,u.isHave)(t)?t:null}},{key:"changeData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,i=t.type,a=void 0===i?-1:i,n=t.ri,r=void 0===n?-1:n,o=t.ci,l=void 0===o?-1:o,s=t.cellRange,d=void 0===s?"":s,c=t.property,u=void 0===c?"":c,m=t.value,h=void 0===m?"":m;if(!1!==this.settings.showEditor){var f={},v=this.merges.getData(),p=this.multiPreAction,g=this.selector,y=p.getStepType(a,{expr:"",property:u,value:h,oldCell:f,range:g.range,ri:r,ci:l,cellRange:d});if(""!==d){var b=this.multiPreAction;f=b.eachRange(d)}e(),this.changeToHistory({type:a,ri:r,ci:l,cellRange:d,property:u,value:h,oldCell:f,oldMergesData:v,newData:this.getData()},y),this.changeDataForCalc=this.getChangeDataToCalc(),this.change(this.getData())}}},{key:"cutPaste",value:function(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];B.call(this,e,t,i)}},{key:"setData",value:function(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=this.autoFilter;return Object.keys(e).forEach((function(r){if("merges"===r||"cols"===r||"validations"===r||"chart"===r)t[r].setData(e[r]);else if("flex"===r)n.addFiexRows(e[r]);else if("rows"===r)t[r].setData(e[r],i,a,t.settings.rowsInit);else if("freeze"===r){var o=N((0,p.expr2xy)(e[r]),2),l=o[0],s=o[1];t.freeze=[s,l]}else"pictures"===r?e[r]&&V.call(t,e[r],"from",i):"autofilter"===r?e[r]&&e[r].ref&&(n.ref=e[r].ref,n.filters=e[r].filters,n.sort=e[r].sort):void 0!==e[r]&&(t[r]=e[r])})),this}},{key:"selectorCellText",value:function(e,t,i,a){return U.call(this,e,t,i,a)}},{key:"getData",value:function(){var e=this.name,t=this.freeze,i=this.styles,a=this.merges,n=this.rows,r=this.cols,o=this.validations,l=this.autoFilter,s=this.pasteDirectionsArr;return{editor:this.settings.showEditor,name:e,freeze:(0,p.xy2expr)(t[1],t[0]),styles:i,pictures:V(s,"to"),merges:a.getData(),rows:n.getData(),cols:r.getData(),validations:o.getData(),autofilter:l.getData()}}}])&&M(t.prototype,i),a&&M(t,a),e}();t.default=Z},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(3);function n(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=new a.CellRange(0,0,0,0),this.ri=0,this.ci=0}var t,i,r;return t=e,(i=[{key:"multiple",value:function(){return this.range.multiple()}},{key:"setIndexes",value:function(e,t){this.ri=e,this.ci=t}},{key:"size",value:function(){return this.range.size()}}])&&n(t.prototype,i),r&&n(t,r),e}();t.default=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.x=0,this.y=0,this.ri=0,this.ci=0}},function(e,t,i){"use strict";function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=null,this.state="clear"}var t,i,n;return t=e,(i=[{key:"copy",value:function(e){return this.range=e,this.state="copy",this}},{key:"cut",value:function(e){return this.range=e,this.state="cut",this}},{key:"isClear",value:function(){return"clear"===this.state}},{key:"clear",value:function(){this.range=null,this.state="clear"}}])&&a(t.prototype,i),n&&a(t,n),e}();t.default=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(3);function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function o(e,t,i){return t&&r(e.prototype,t),i&&r(e,i),e}var l=function(){function e(t,i,a){n(this,e),this.ci=t,this.operator=i,this.value=a}return o(e,[{key:"set",value:function(e,t){this.operator=e,this.value=t}},{key:"includes",value:function(e){var t=this.operator,i=this.value;return"all"===t||"in"===t&&i.includes(e)}},{key:"getData",value:function(){return{ci:this.ci,operator:this.operator,value:this.value}}}]),e}(),s=function(){function e(t,i){n(this,e),this.ci=t,this.order=i}return o(e,[{key:"asc",value:function(){return"asc"===this.order}},{key:"desc",value:function(){return"desc"===this.order}}]),e}(),d=function(){function e(){n(this,e),this.ref=null,this.filters=[],this.sort=null,this.flex=[]}return o(e,[{key:"setData",value:function(e){var t=e.ref,i=e.filters,a=e.sort;null!==t&&(this.ref=t,this.fitlers=i.map((function(e){return new l(e.ci,e.operator,e.value)})),a&&(this.sort=new s(a.ci,a.order)))}},{key:"getData",value:function(){if(this.active()){var e=this.ref,t=this.filters,i=this.sort;return{ref:e,filters:t.map((function(e){return e.getData()})),sort:i}}return{}}},{key:"addFilter",value:function(e,t,i){var a=this.getFilter(e);null==a?this.filters.push(new l(e,t,i)):a.set(t,i)}},{key:"addFiexRows",value:function(e){this.flex=e}},{key:"setSort",value:function(e,t){this.sort=t?new s(e,t):null}},{key:"includes",value:function(e,t){return!!this.active()&&this.hrange().includes(e,t)}},{key:"getSet",value:function(e,t){for(var i=0;i<this.flex.length;i++)for(var a=this.flex[i],n=a.ri,r=a.set_total,o=a.state,l=n;l<r+n;l++)console.log(o,"114",t,n,o),!1===o&&t===n?(e.add(l+1),this.flex[i].state=!0):!0===o&&t===n&&(e.delete(l+1),this.flex[i].state=!1);return e}},{key:"includes2",value:function(e,t){for(var i=!1,a=0;a<this.flex.length;a++){var n=this.flex[a],r=n.ri,o=n.ci;e===r&&t===o&&(i=!0)}return i}},{key:"getSort",value:function(e){var t=this.sort;return t&&t.ci===e?t:null}},{key:"getFilter",value:function(e){for(var t=this.filters,i=0;i<t.length;i+=1)if(t[i].ci===e)return t[i];return null}},{key:"filteredRows",value:function(e){var t=new Set,i=new Set;if(this.active())for(var a=this.range(),n=a.sri,r=a.eri,o=this.filters,l=n+1;l<=r;l+=1)for(var s=0;s<o.length;s+=1){var d=o[s],c=e(l,d.ci),u=c?c.text:"";if(!d.includes(u)){t.add(l);break}i.add(l)}return{rset:t,fset:i}}},{key:"items",value:function(e,t){var i={};if(this.active())for(var a=this.range(),n=a.sri,r=a.eri,o=n+1;o<=r;o+=1){var l=t(o,e);if(null===l||/^\s*$/.test(l.text))i[""]=(i[""]||0)+1;else{var s=l.text;i[s]=(i[s]||0)+1}}return i}},{key:"range",value:function(){return a.CellRange.valueOf(this.ref)}},{key:"hrange",value:function(){var e=this.range();return e.eri=e.sri,e}},{key:"clear",value:function(){this.ref=null,this.filters=[],this.sort=null}},{key:"active",value:function(){return null!==this.ref}}]),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Merges=void 0;var a=i(3);function n(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._=t}var t,i,r;return t=e,(i=[{key:"forEach",value:function(e){this._.forEach(e)}},{key:"each",value:function(e){this._.forEach((function(t){return e(t)}))}},{key:"deleteWithin",value:function(e){this._=this._.filter((function(t){return!t.within(e)}))}},{key:"getFirstIncludes",value:function(e,t){for(var i=0;i<this._.length;i+=1){var a=this._[i];if(a.includes(e,t))return a}return null}},{key:"filterIntersects",value:function(t){return new e(this._.filter((function(e){return e.intersects(t)})))}},{key:"intersects",value:function(e){for(var t=0;t<this._.length;t+=1)if(this._[t].intersects(e))return!0;return!1}},{key:"union",value:function(e){var t=e;return this._.forEach((function(e){e.intersects(t)&&(t=e.union(t))})),t}},{key:"add",value:function(e){this.deleteWithin(e),this._.push(e)}},{key:"shift",value:function(e,t,i,a){this._.forEach((function(n){var r=n.sri,o=n.sci,l=n.eri,s=n.eci,d=n;"row"===e?r>=t?(d.sri+=i,d.eri+=i):r<t&&t<=l&&(d.eri+=i,a(r,o,i,0)):"column"===e&&(o>=t?(d.sci+=i,d.eci+=i):o<t&&t<=s&&(d.eci+=i,a(r,o,0,i)))}))}},{key:"move",value:function(e,t,i){this._.forEach((function(a){var n=a;n.within(e)&&(n.eri+=t,n.sri+=t,n.sci+=i,n.eci+=i)}))}},{key:"setData",value:function(e){return this._=e.map((function(e){return a.CellRange.valueOf(e)})),this}},{key:"getData",value:function(){return this._.map((function(e){return e.toString()}))}}])&&n(t.prototype,i),r&&n(t,r),e}();t.Merges=r},,function(e,t){},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=(a=i(3))&&a.__esModule?a:{default:a};function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.srcCellRange="",this.dstCellRange="",this.srcOneDRange="",this.dstOneDRange=""}var t,i,a;return t=e,(i=[{key:"setSrcAndDstCellRange",value:function(e,t){this.srcCellRange=e,this.dstCellRange=t}},{key:"use",value:function(){var e=this.srcCellRange,t=this.dstCellRange,i=e.sri,a=e.sci,n=e.eri,o=e.eci,l=t.sri,s=t.sci,d=t.eri,c=t.eci,u=r(e.size(),2),m=u[0],h=u[1],f=r(t.size(),2);return{sri:i,sci:a,eri:n,eci:o,dsri:l,dsci:s,deri:d,deci:c,rn:m,cn:h,drn:f[0],dcn:f[1]}}},{key:"autoFilterDirection",value:function(){var e=this.use(),t=e.sri,i=e.dsri,a=e.deri,n=e.eri,r=!1;return t===i&&a===n&&(r=!0),r}},{key:"upOrDown",value:function(){var e=this.use(),t=e.deri,i=e.sri,a=e.deci,n=e.sci,r=!0;return(t<i||a<n)&&(r=!1),r}},{key:"leftOrRight",value:function(){var e=this.getRangeByWay(),t=e.srcOneDRange,i=e.dstOneDRange,a=1;return t.sri===t.eri&&i.eci>t.eci?a=2:t.sri===t.eri&&i.eci<t.eci&&(a=3),a}},{key:"getOneDRangeObj",value:function(e,t){var i=this.use(),a=i.sri,r=i.sci,o=i.eri,l=i.eci,s=i.dsri,d=i.dsci,c=i.deri,u=i.deci;return e?(this.srcOneDRange=new n.default(a+t,r,a+t,l),this.dstOneDRange=new n.default(s+t,d,s+t,u)):(this.srcOneDRange=new n.default(a,r+t,o,r+t),this.dstOneDRange=new n.default(s,d+t,c,d+t)),this.getRangeByWay()}},{key:"getRangeByWay",value:function(){return{srcOneDRange:this.srcOneDRange,dstOneDRange:this.dstOneDRange}}},{key:"calcDiff",value:function(e,t){var i=1;if(t||(i=1),t&&e.length>1){var a=e[e.length-2];i=1*e[e.length-1].text-1*a.text}else if(e.length>1){var n=e[1];i=1*e[0].text-1*n.text}return isNaN(i)&&(i=1),i}}])&&o(t.prototype,i),a&&o(t,a),e}();t.default=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(7);function n(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.text="",this.depend=[],this.formulas="",this.style=null,this.merge=null,this.formatText=null,this.multivalueRefsCell=null,this.source_v=null}var t,i,r;return t=e,(i=[{key:"setCell",value:function(e){(0,a.isHave)(e)&&((0,a.isHave)(e.text)&&(this.text=e.text),(0,a.isHave)(e.formulas)&&(this.formulas=e.formulas),(0,a.isHave)(e.formatText)&&(this.formatText=e.formatText),(0,a.isHave)(e.depend)&&(this.depend=e.depend),(0,a.isHave)(e.style)&&(this.style=e.style),(0,a.isHave)(e.multivalueRefsCell)&&(this.multivalueRefsCell=e.multivalueRefsCell),(0,a.isHave)(e.merge)&&(this.merge=e.merge),(0,a.isHave)(e.source_v)&&(this.source_v=e.source_v))}},{key:"setFormatText",value:function(e){e.state&&(this.formatText=e.text)}}])&&n(t.prototype,i),r&&n(t,r),e}();t.default=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cols=void 0;var a=i(15);function n(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t){var i=t.len,a=t.width,n=t.indexWidth,r=t.minWidth;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._={},this.len=i,this.width=a,this.indexWidth=n,this.minWidth=r}var t,i,r;return t=e,(i=[{key:"setData",value:function(e){e.len&&(this.len=e.len,delete e.len),this._=e}},{key:"getData",value:function(){var e=this.len;return Object.assign({len:e},this._)}},{key:"getWidth",value:function(e){var t=this._[e];return t&&t.width?t.width:this.width}},{key:"getOrNew",value:function(e){return this._[e]=this._[e]||{},this._[e]}},{key:"setWidth",value:function(e,t){this.getOrNew(e).width=t}},{key:"sumWidth",value:function(e,t){var i=this;return(0,a.rangeSum)(e,t,(function(e){return i.getWidth(e)}))}},{key:"totalWidth",value:function(){return this.sumWidth(0,this.len)}}])&&n(t.prototype,i),r&&n(t,r),e}();t.Cols=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validations=void 0;var a,n=(a=i(101))&&a.__esModule?a:{default:a},r=i(3);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function d(e,t,i){return t&&s(e.prototype,t),i&&s(e,i),e}var c=function(){function e(t,i,a){l(this,e),this.refs=i,this.mode=t,this.validator=a}return d(e,[{key:"includes",value:function(e,t){for(var i=this.refs,a=0;a<i.length;a+=1){if(r.CellRange.valueOf(i[a]).includes(e,t))return!0}return!1}},{key:"addRef",value:function(e){this.remove(r.CellRange.valueOf(e)),this.refs.push(e)}},{key:"remove",value:function(e){var t=[];this.refs.forEach((function(i){var a=r.CellRange.valueOf(i);a.intersects(e)?a.difference(e).forEach((function(e){return t.push(e.toString())})):t.push(i)})),this.refs=t}},{key:"getData",value:function(){var e=this.refs,t=this.mode,i=this.validator;return{refs:e,mode:t,type:i.type,required:i.required,operator:i.operator,value:i.value}}}],[{key:"valueOf",value:function(t){var i=t.refs,a=t.mode,r=t.type,o=t.required,l=t.operator,s=t.value;return new e(a,i,new n.default(r,o,s,l))}}]),e}(),u=function(){function e(){l(this,e),this._=[],this.errors=new Map}return d(e,[{key:"getError",value:function(e,t){return this.errors.get("".concat(e,"_").concat(t))}},{key:"validate",value:function(e,t,i){var a=this.get(e,t),n="".concat(e,"_").concat(t),r=this.errors;if(null!==a){var l=o(a.validator.validate(i),2),s=l[0],d=l[1];s?r.delete(n):r.set(n,d)}else r.delete(n);return!0}},{key:"add",value:function(e,t,i){var a=i.type,r=i.required,o=i.value,l=i.operator,s=new n.default(a,r,o,l),d=this.getByValidator(s);null!==d?d.addRef(t):this._.push(new c(e,[t],s))}},{key:"getByValidator",value:function(e){for(var t=0;t<this._.length;t+=1){var i=this._[t];if(i.validator.equals(e))return i}return null}},{key:"get",value:function(e,t){for(var i=0;i<this._.length;i+=1){var a=this._[i];if(a.includes(e,t))return a}return null}},{key:"remove",value:function(e){this.each((function(t){t.remove(e)}))}},{key:"each",value:function(e){this._.forEach((function(t){return e(t)}))}},{key:"getData",value:function(){return this._.filter((function(e){return e.refs.length>0})).map((function(e){return e.getData()}))}},{key:"setData",value:function(e){this._=e.map((function(e){return c.valueOf(e)}))}}]),e}();t.Validations=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(8),n=i(15);function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l={phone:/^[1-9]\d{10}$/,email:/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/};function s(e,t){var i="";if(!e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];i=a.t.apply(void 0,["validation.".concat(t)].concat(r))}return[e,i]}var d=function(){function e(t,i,a,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.required=i,this.value=a,this.type=t,this.operator=n,this.message=""}var t,i,a;return t=e,(i=[{key:"parseValue",value:function(e){var t=this.type;return"date"===t?new Date(e):"number"===t?Number(e):e}},{key:"equals",value:function(e){var t=this.type===e.type&&this.required===e.required&&this.operator===e.operator;return t&&(t=Array.isArray(this.value)?(0,n.arrayEquals)(this.value,e.value):this.value===e.value),t}},{key:"values",value:function(){return this.value.split(",")}},{key:"validate",value:function(e){var t=this.required,i=this.operator,a=this.value,n=this.type;if(t&&/^\s*$/.test(e))return s(!1,"required");if(/^\s*$/.test(e))return[!0];if(l[n]&&!l[n].test(e))return s(!1,"notMatch");if("list"===n)return s(this.values().includes(e),"notIn");if(i){var o=this.parseValue(e);if("be"===i){var d=r(a,2),c=d[0],u=d[1];return s(o>=this.parseValue(c)&&o<=this.parseValue(u),"between",c,u)}if("nbe"===i){var m=r(a,2),h=m[0],f=m[1];return s(o<this.parseValue(h)||o>this.parseValue(f),"notBetween",h,f)}if("eq"===i)return s(o===this.parseValue(a),"equal",a);if("neq"===i)return s(o!==this.parseValue(a),"notEqual",a);if("lt"===i)return s(o<this.parseValue(a),"lessThan",a);if("lte"===i)return s(o<=this.parseValue(a),"lessThanEqual",a);if("gt"===i)return s(o>this.parseValue(a),"greaterThan",a);if("gte"===i)return s(o>=this.parseValue(a),"greaterThanEqual",a)}return[!0]}}])&&o(t.prototype,i),a&&o(t,a),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={toolbar:{undo:"Undo",redo:"Redo",paintformat:"Paint format",clearformat:"Clear format",format:"Format",font:"Font",fontSize:"Font size",fontBold:"Font bold",fontItalic:"Font italic",underline:"Underline",strike:"Strike",textColor:"Text color",fillColor:"Fill color",border:"Borders",merge:"Merge cells",align:"Horizontal align",valign:"Vertical align",textwrap:"Text wrapping",freeze:"Freeze cell",add:"display equation",autofilter:"Filter",formula:"Functions",more:"More",flexible:"Flexible",throwFormula:"Throw formulas",comeBack:"come back"},contextmenu:{copy:"Copy",cut:"Cut",paste:"Paste",pasteValue:"Paste values only",pasteFormat:"Paste format only",insertRow:"Insert row",insertColumn:"Insert column",deleteRow:"Delete row",deleteColumn:"Delete column",deleteCell:"Delete cell",deleteCellText:"Delete cell text",validation:"Data validations",recover:"recover"},format:{normal:"Normal",text:"Plain Text",number:"Number",percent:"Percent",rmb:"RMB",usd:"USD",date:"Date",time:"Time",datetime:"Date time",duration:"Duration"},date_formula:{sum:"Sum",average:"Average",max:"Max",min:"Min",concat:"Concat",wland:"MD.WLAND",wfr:"MD.WFR",rtd:"MD.RTD"},validation:{required:"it must be required",notMatch:"it not match its validation rule",between:"it is between {} and {}",notBetween:"it is not between {} and {}",notIn:"it is not in list",equal:"it equal to {}",notEqual:"it not equal to {}",lessThan:"it less than {}",lessThanEqual:"it less than or equal to {}",greaterThan:"it greater than {}",greaterThanEqual:"it greater than or equal to {}"},error:{pasteForMergedCell:"Unable to do this for merged cells"},calendar:{weeks:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]},button:{cancel:"Cancel",remove:"Remove",save:"Save",ok:"OK"},sort:{desc:"Sort Z -> A",asc:"Sort A -> Z"},filter:{empty:"empty"},dataValidation:{mode:"Mode",range:"Cell SUnitRangeRef",criteria:"Criteria",modeType:{cell:"Cell",column:"Colun",row:"Row"},type:{list:"List",number:"Number",date:"Date",phone:"Phone",email:"Email"},operator:{be:"between",nbe:"not betwwen",lt:"less than",lte:"less than or equal to",gt:"greater than",gte:"greater than or equal to",eq:"equal to",neq:"not equal to"}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(6),r=i(1);function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(){var t=this,i=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1?arguments[1]:void 0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.moving=!1,this.vertical=i,this.el=(0,a.h)("div","".concat(r.cssPrefix,"-resizer ").concat(i?"vertical":"horizontal")).children(this.hoverEl=(0,a.h)("div","".concat(r.cssPrefix,"-resizer-hover")).on("mousedown.stop",(function(e){return t.mousedownHandler(e)})),this.lineEl=(0,a.h)("div","".concat(r.cssPrefix,"-resizer-line")).hide()).hide(),this.cRect=null,this.finishedFn=null,this.minDistance=n}var t,i,l;return t=e,(i=[{key:"show",value:function(e,t){var i=this.moving,a=this.vertical,n=this.hoverEl,r=this.lineEl,o=this.el;if(!i){this.cRect=e;var l=e.left,s=e.top,d=e.width,c=e.height;o.offset({left:a?l+d-5:l,top:a?s:s+c-5}).show(),n.offset({width:a?5:d,height:a?c:5}),r.offset({width:a?0:t.width,height:a?t.height:0})}}},{key:"hide",value:function(){this.el.offset({left:0,top:0}).hide()}},{key:"mousedownHandler",value:function(e){var t=this,i=e,a=this.el,r=this.lineEl,o=this.cRect,l=this.vertical,s=this.minDistance,d=l?o.width:o.height;r.show(),(0,n.mouseMoveUp)(window,(function(e){t.moving=!0,null!==i&&1===e.buttons&&(l?(d+=e.movementX)>s&&a.css("left","".concat(o.left+d,"px")):(d+=e.movementY)>s&&a.css("top","".concat(o.top+d,"px")),i=e)}),(function(){i=null,r.hide(),t.moving=!1,t.hide(),t.finishedFn&&(d<s&&(d=s),t.finishedFn(o,d))}))}}])&&o(t.prototype,i),l&&o(t,l),e}();t.default=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1);function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vertical=t,this.moveFn=null,this.el=(0,a.h)("div","".concat(n.cssPrefix,"-scrollbar ").concat(t?"vertical":"horizontal")).child(this.contentEl=(0,a.h)("div","")).on("scroll.stop",(function(e){var t=e.target,a=t.scrollTop,n=t.scrollLeft;i.moveFn&&i.moveFn(i.vertical?a:n,e)}))}var t,i,o;return t=e,(i=[{key:"move",value:function(e){return this.el.scroll(e),this}},{key:"scroll",value:function(){return this.el.scroll()}},{key:"set",value:function(e,t){var i=e-1;if(t>i){var a=this.vertical?"height":"width";this.el.css(a,"".concat(i-15,"px")).show(),this.contentEl.css(this.vertical?"width":"height","1px").css(a,"".concat(t,"px"))}else this.el.hide();return this}}])&&r(t.prototype,i),o&&r(t,o),e}();t.default=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(3),n=i(1),r=i(0),o=i(51);function l(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,r.h)("div","".concat(n.cssPrefix,"-selector-cell")),this.data=t,this._=new a.CellRange(0,0,0,0)}var t,i,s;return t=e,(i=[{key:"resetSelectOffset",value:function(){var e=this.data.getRect(this._);this.setOffset(e)}},{key:"setData",value:function(e,t){var i=this;e=-1===e?0:e,t=-1===t?0:t;var n=this.data.merges,r=!1;n.each((function(a){a.includeByRiCi(e,t)&&(i._=a,r=!0)})),r||(this._=new a.CellRange(e,t,e,t))}},{key:"toolbarChangeSelectorCell",value:function(){var e=this._.sri,t=this._.sci;this.setData(e,t)}},{key:"setOffset",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.el.offset({width:a-o.selectorHeightBorderWidth+.8,height:n-o.selectorHeightBorderWidth+.8,left:t-.8,top:i-.8}).show()}}])&&l(t.prototype,i),s&&l(t,s),e}();t.default=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=f(i(52)),r=f(i(107)),o=i(1),l=i(4),s=f(i(109)),d=i(21),c=i(6),u=f(i(113)),m=i(23),h=i(7);function f(e){return e&&e.__esModule?e:{default:e}}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function g(){var e=this.textlineEl,t=this.textEl,i=this.areaOffset;if(i){var a=e.offset().width+9+15,n=this.viewFn().width-i.left-9;if(a>i.width&&0!==i.width){var r=a;if(a>n){r=n-15;var o=parseInt(a/(n-15),10);o+=a%n>0?1:0,(o*=this.rowHeight)>i.height&&t.css("height","".concat(o,"px"))}t.css("width","".concat(r,"px"))}}}var y=function(){var e=this;if(window.getSelection().rangeCount<=0)return 0;var t=window.getSelection().getRangeAt(0),i=t.cloneRange();i.selectNodeContents(this.textEl.el),i.setEnd(t.startContainer,t.startOffset);var a=i.toString().length,n=this.editorText.getText(),r=(0,d.findBracket)(a-1,(0,l.cutting)(n),n),o=r.exist,s=r.left,c=r.right;Object.keys(this.spanArr).forEach((function(t){e.spanArr[t].css("background-color","rgba(255,255,255,0.1)")}));var u=this.spanArr[s],m=this.spanArr[c];if(this.suggestContent.hide(),o&&u&&m)u.css("background-color","rgb(229, 229, 229)"),m.css("background-color","rgb(229, 229, 229)");else{var h=this.suggest.show,f=d.suggestContent.call(this,a,(0,l.cutting)(n),n);f.suggestContent&&!h&&this.suggestContent.content(f.cut,f.pos)}return a};function b(e){if(this){var t=this.pos,i=this.pos,a=0,n=document.createRange();n.setStart(e,0),n.collapse(!0);for(var r,o=[e],l=!1,s=!1;!s&&(r=o.pop());)if(3===r.nodeType){var d=a+r.length;!l&&t>=a&&t<=d&&(n.setStart(r,t-a),l=!0),l&&i>=a&&i<=d&&(n.setEnd(r,i-a),s=!0),a=d}else for(var c=r.childNodes.length;c--;)o.push(r.childNodes[c]);var u=window.getSelection();u.removeAllRanges(),u.addRange(n)}}function x(){var e=this.editorText.getText();this.pos=y.call(this),T.call(this,e,this.pos)}function A(){if(!1===P.call(this)){var e=this.data.getCell(this.ri,this.ci);this.editorText.setOldCell((0,l.deepCopy)(e),{ri:this.ri,ci:this.ci})}}function w(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"input";if(A.call(this),e){var r=e.inputType;if("insertFromPaste"===r&&"black"!==this.textEl.el.style["caret-color"])return void(this.copy=!0);if("historyUndo"===r)return}var o=this.editorText;setTimeout((function(){if(!1!==t.chinese){var r="";if(t.data.settings.showEditor){if(t.sheet.selector.hide(),""===i&&e&&e.target&&e.target.childNodes){for(var s="",d=0,c=e.target.childNodes.length;d<c;d++)1===e.target.childNodes[d].nodeType?r+=e.target.childNodes[d].innerText:3===e.target.childNodes[d].nodeType&&(s+=e.target.childNodes[d].nodeValue);r=""!==s?s:r}else r=""===i&&e&&(0,h.isHave)(e.data)?""!==e.data?e.data:r:i;t.copy&&(t.copy=!1,r=e&&e.data?e.data:"",t.textEl.html(r),t.pos=r.length,b.call(t,t.textEl.el,-1)),t.changed=!0;var u=t.suggest,m=t.textlineEl,f=t.validator,v=t.textEl;if(o.setText("".concat(r)),o.changeText(1),t.pos=y.call(t),f)"list"===f.type?u.search(r):u.hide();else{var p=(r+="").lastIndexOf("=");-1!==t.pos?T.call(t,r,t.pos):C.call(t,r);var x=!1,A=(0,l.cuttingByPos2)(r,t.pos,!0);if(r.length>=t.pos){var w="".concat(r[t.pos]);-1!==w.search(/^[0-9]+.?[0-9]*$/)?x=!0:w&&(A+=(0,l.cuttingByPosEnd)(r,t.pos+1))}0===p&&r.length>1&&""!==A&&!x&&A.trim().length>0?u.search(A):u.hide()}m.html(a||r),o.setText(a||r),t.suggest.itemIndex=-1,g.call(t),r&&"="!==r[0]&&b.call(t,v.el,-1),a&&"="===a[0]&&(r=a),t.change(n,r),setTimeout((function(){t.show()}))}}}))}function E(e){this.pos=y.call(this),"ArrowRight"===e.code?this.pos=this.pos+1:"ArrowLeft"===e.code&&(this.pos=this.pos-1);var t=e.keyCode||e.which;27===t&&"black"===this.textEl.el.style["caret-color"]&&"1"===this.textEl.el.style.opacity&&this.change("input","@~esc")}function C(e){var t=e.lastIndexOf("=");0===t&&e.length>=1&&(0,l.operation)(e[e.length-1])?this.setLock(!0):(this.setLock(!1),this.state=2),0!==t?this.setLock(!1):0===t&&1===e.length&&this.setLock(!0),(0,l.isAbsoluteValue)((0,l.cuttingByPos)(e,this.pos),2)&&this.setLock(!0),0!==t&&this.setLock(!1)}function T(e,t){var i=(e+="").lastIndexOf("=");0===i&&e.length>=1&&(0,l.operation)(e[t-1])?this.setLock(!0):(this.setLock(!1),this.state=2),0!==i?this.setLock(!1):0===i&&1===e.length&&this.setLock(!0),(0,l.isAbsoluteValue)((0,l.cuttingByPos)(e,t),2)&&this.setLock(!0),0!==i&&this.setLock(!1)}function O(){var e=this,t=this.textEl.el;setTimeout((function(){b.call(e,t)}),0)}function S(e){var t=this.textEl,i=this.textlineEl,a=this.tmp;t.el.blur(),a.html(e),i.html(e),O.call(this)}function R(e){var t=this.validator,i=this.editorText,a=i.getText();if(t&&"list"===t.type)a=i.setText(e);else{this.pos=y.call(this);for(var n=this.pos-(0,l.cuttingByPos)(a,this.pos).length,r=(0,l.cuttingByPosEnd)(a,this.pos+1),o=["",""],s=this.pos+r.length,d=0;d<a.length;d++)d<n&&(o[0]+=a[d]),d>s-1&&(o[1]+=a[d]);a=i.setText("".concat(o[0]+e.key,"(")),this.pos=i.getText().length,a=i.setText(a+")".concat(o[1]))}this.textEl.html(a),this.textlineEl.html(a),this.suggest.hide(),T.call(this,a,this.pos),this.change("input",a),b.call(this,this.textEl.el,-1),g.call(this)}function k(){this.suggestContent.hide()}function I(){this.suggest.setItems(this.formulas)}function P(){return"black"===this.textEl.el.style["caret-color"]&&"1"===this.textEl.el.style.opacity}var D=function(){function e(t,i,l,d,m,h){var f=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.viewFn=i,this.rowHeight=l,this.formulas=t,this.sheet=h,this.display=!0,this.suggest=new n.default(t,(function(e){R.call(f,e)}),m,this),this.suggestContent=new s.default,this.lock=!1,this.state=1,this.data=m,this.datepicker=new r.default,this.isCors=!1,this.datepicker.change((function(e){f.setText(function(e){var t=e.getMonth()+1,i=e.getDate();return t<10&&(t="0".concat(t)),i<10&&(i="0".concat(i)),"".concat(e.getFullYear(),"-").concat(t,"-").concat(i)}(e)),f.clear()})),this.ri=-1,this.ci=-1,this.spanArr=[],this.mousedownIndex=[],this.changed=!1,this.chinese=!0,this.editorText=new u.default(""),this.areaEl=(0,a.h)("div","".concat(o.cssPrefix,"-editor-area")).children(this.textEl=(0,a.h)("div","".concat(o.cssPrefix,"-editor-textEl")).on("input",(function(e){return w.call(f,e)})).on("click",(function(){return x.call(f)})).on("keyup",(function(e){return E.call(f,e)})).on("mousedown",(function(e){if(2===e.detail){if(P.call(f))return;f.show(),setTimeout((function(){var e=f.ri,t=f.ci;console.log(e,t),f.setCellEnd(m.getSelectedCellRiCi(e,t))}))}})).on("compositionstart",(function(){f.chinese=!1})).on("compositionend",(function(){f.chinese=!0})).on("paste",(function(e){"black"===f.textEl.el.style["caret-color"]&&e.stopPropagation()})).on("copy",(function(e){"black"===f.textEl.el.style["caret-color"]&&e.stopPropagation()})).on("keydown",(function(e){g.call(f),f.textlineEl.html(e.currentTarget.innerText);var t=e.keyCode;if(38!==t&&40!==t||e.preventDefault(),115===t){var i=f.editorText.f4ShortcutKey(y.call(f)),a=i.inputText,n=i.pos;return w.call(f,null,a,a),void setTimeout((function(){f.pos=n,b.call(f,f.textEl.el,-1)}))}if("black"!==f.textEl.el.style["caret-color"]){var r=e.ctrlKey,o=e.metaKey;8===t||46===t?c.createEvent.call(f,8,!1):40===t?(f.clear(),c.createEvent.call(f,40,!1)):39===t?(f.clear(),c.createEvent.call(f,39,!1)):37===t?(f.clear(),c.createEvent.call(f,37,!1)):38===t?(f.clear(),c.createEvent.call(f,38,!1)):(r||o)&&(67===t?c.createEvent.call(f,67,!0):86===t?c.createEvent.call(f,86,!0):88===t?c.createEvent.call(f,88,!0):90===t?c.createEvent.call(f,90,!0):66===t&&c.createEvent.call(f,66,!0))}})),this.textlineEl=(0,a.h)("div","textline"),this.suggestContent.el,this.datepicker.el).on("mousemove.stop",(function(){})).on("mousedown.stop",(function(){})),h.el.child(this.suggest.el),this.el=(0,a.h)("div","".concat(o.cssPrefix,"-editor")).children(this.areaEl),this.suggest.bindInputEvents(this.textEl),this.textEl.on("paste",(function(e){!1!==P.call(f)&&function(e){e.preventDefault();var t="",i=(e.originalEvent||e).clipboardData;if(null==i){if(""!==(t=window.clipboardData.getData("text")||""))if(window.getSelection){var a=document.createElement("span");a.innerHTML=t,window.getSelection().getRangeAt(0).insertNode(a)}else document.selection.createRange().pasteHTML(t)}else""!==(t=i.getData("text/plain")||"")&&document.execCommand("insertText",!1,t)}(e)})),this.tmp=(0,a.h)("span","span_tmp").hide(),this.textEl.attr("contenteditable","true"),this.textEl.css("width","".concat(d-3,"px")),this.textEl.css("height","".concat(l-2,"px")),this.textEl.child(this.tmp),this.pos=0,this.areaOffset=null,this.freeze={w:0,h:0},this.cell=null,setTimeout((function(){f.show(!1)})),this.change=function(){}}var t,i,l;return t=e,(i=[{key:"setFreezeLengths",value:function(e,t){this.freeze.w=e,this.freeze.h=t}},{key:"setMouseDownIndex",value:function(e){this.mousedownIndex=e}},{key:"setRiCi",value:function(e,t){this.ri=e,this.ci=t}},{key:"setLock",value:function(e){this.lock=e}},{key:"getLock",value:function(){return this.lock}},{key:"show",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];e&&this.data.settings.showEditor?(this.textEl.css("caret-color","black"),this.textEl.css("cursor","text"),this.textEl.css("opacity","1"),this.textEl.el.focus(),this.areaEl.css("pointer-events","auto"),this.areaEl.css("border","2px solid #4b89ff"),this.areaEl.css("background","white")):(this.textEl.css("caret-color","white"),this.textEl.css("cursor","default"),this.textEl.css("opacity","0"),this.textEl.el.blur(),this.areaEl.css("pointer-events","none"),this.areaEl.css("background","rgba(75, 137, 255, 0)"),this.areaEl.css("border","none"))}},{key:"parse",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=this.editorText,i=t.getText();-1!==e?(this.pos=y.call(this),T.call(this,i,this.pos)):C.call(this,i)}},{key:"clear",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=this.editorText,a=i.getText();return this.display=P.call(this),""!==a&&isNaN(a)&&0===a.replace(/\s/g,"").lastIndexOf("¥")?this.change("format",a):this.changed&&this.change("finish",a),this.changed=!1,this.cell=null,this.areaOffset=null,i.setText(""),this.show(!1),this.copy=!1,b.call(this,this.textEl.el,-1),this.pos=0,this.tmp.hide(),this.textEl.html(""),this.textlineEl.html(""),k.call(this),I.call(this),this.datepicker.hide(),!t&&(setTimeout((function(){var t=e.data.selector,i=t.ri,a=t.ci;e.setRiCi(i,a)})),this.display)}},{key:"mount2span",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{suggestContent:!1,cut:"",pos:-1};if(this.spanArr!==e){var r,o=this.suggest.show;n.suggestContent&&!o?this.suggestContent.content(n.cut,n.pos):this.suggestContent.hide(),Object.keys(e).forEach((function(t){e[t].css("background-color","rgba(255,255,255,0.1)")})),"-1"!==t&&-1!==i&&e[t]&&(e[t].css("background-color","#e5e5e5"),e[i].css("background-color","#e5e5e5")),e.length>0&&(this.textEl.html(""),this.tmp=(r=(0,a.h)("span","span_tmp")).children.apply(r,v(e)).css("top","0px").css("color","black").css("font-size","14px").css("font-family","m-inconsolata,monospace,arial,sans,sans-serif"),this.textEl.el.insertBefore(this.tmp.el,this.textEl.el.childNodes[0]),b.call(this,this.textEl.el,-1)),this.spanArr=e}}},{key:"handler",value:function(e){var t=this.editorText.getText(),i=this.pos;if(i>=t)this.setMouseDownIndex([]);else{var a=e.substring(0,i),n=e.substring(i,e.length);C.call(this,a),""!==n?this.setMouseDownIndex([a,n]):this.setMouseDownIndex([])}}},{key:"setOffset",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=this.textEl,n=this.areaEl,r=this.suggest,o=this.freeze,l=this.el;if(e){this.areaOffset=e;var s=e.left,d=e.top,c=e.width,u=e.height,m=e.l,h=e.t,f={left:0,top:0};o.w>m&&o.h>h||(o.w<m&&o.h<h?(f.left=o.w,f.top=o.h):o.w>m?f.top=o.h:o.h>h&&(f.left=o.w)),l.offset(f),n.offset({left:s-f.left-.8,top:d-f.top-.8}),a.offset({width:c-2+.8,height:u-3+.8});var v={left:0};v[t]=u,r.hide(),g.call(this),i&&this.show(!1)}}},{key:"setCellEnd",value:function(e){var t=this,i="",a=e&&e.formulas||"";(0,h.isHave)(e)&&(0,h.isHave)(e.text)&&(i=e.text),(0,h.isHave)(e)&&(0,h.isHave)(e.formulas)&&(i=e.formulas);var n=this.data,r=n.rows,o=n.getCellStyleOrDefault(this.ri,this.ci),l=n.renderFormat(o,e,this.ri,this.ci,!0);l.state&&(i=l.cellText,a=l.cellText),this.textEl.child(i+""),this.pos=i.length,b.call(this,this.textEl.el,-1),this.editorText.setOldCell({text:e&&e.text||"",formulas:e&&e.formulas||""},{ri:this.ri,ci:this.ci}),m.testValid.call(this),w.call(this,null,i,a,"end"),setTimeout((function(){t.pos=r.toString(i).length,b.call(t,t.textEl.el,-1)}),20)}},{key:"setCell",value:function(e,t){var i=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;this.cell=e,this.show();var n=e&&e.formulas||"";n=""===n?e&&e.text||"":n,this.editorText.setOldCell({text:e&&e.text||"",formulas:e&&e.formulas||""},{ri:this.ri,ci:this.ci});var r=this.el,o=this.datepicker,l=this.suggest;if(r.show(),this.textEl.show(),b.call(this,this.textEl.el,-1),setTimeout((function(){i.pos=n.length,b.call(i,i.textEl.el)}),10),this.validator=t,t){var s=t.type;"date"===s&&(o.show(),/^\s*$/.test(n)||o.setValue(n)),"list"===s&&(l.setItems(t.values()),l.search(""))}2===a&&""!==n&&"="===n[0]?(w.call(this,null,n),this.pos=n.length,b.call(this,this.textEl.el,n.length)):2===a&&"="!==n[0]&&this.textEl.child(n),setTimeout((function(){i.textlineEl.html(n),g.call(i)}))}},{key:"isDisplay2",value:function(){return P.call(this)}},{key:"setCursorPos",value:function(e){this.pos=e,b.call(this,this.textEl.el)}},{key:"setText",value:function(e){this.editorText.setText(e),S.call(this,e),g.call(this),this.textEl.child(this.tmp)}}])&&p(t.prototype,i),l&&p(t,l),e}();t.default=D},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=(a=i(108))&&a.__esModule?a:{default:a},r=i(0),o=i(1),l=i(16);function s(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var d=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calendar=new n.default(new Date),this.el=(0,r.h)("div","".concat(o.cssPrefix,"-datepicker")).child(this.calendar.el).hide()}var t,i,a;return t=e,(i=[{key:"setValue",value:function(e){var t=this.calendar;return"string"==typeof e?(0,l.str2Re)(l.calendarPattern).test(e)&&t.setValue(new Date(e.replace(new RegExp("-","g"),"/"))):e instanceof Date&&t.setValue(e),this}},{key:"change",value:function(e){var t=this;this.calendar.selectChange=function(i){e(i),t.hide()}}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){this.el.hide()}}])&&s(t.prototype,i),a&&s(t,a),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=(a=i(9))&&a.__esModule?a:{default:a},o=i(8);function l(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function d(e,t){e.setMonth(e.getMonth()+t)}function c(e,t){var i=new Date(e);return i.setDate(t-e.getDay()+1),i}var u=function(){function e(t){var i,a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t,this.cvalue=new Date(t),this.headerLeftEl=(0,n.h)("div","calendar-header-left"),this.bodyEl=(0,n.h)("tbody",""),this.buildAll(),this.el=(0,n.h)("div","fin-cell-calendar").children((0,n.h)("div","calendar-header").children(this.headerLeftEl,(0,n.h)("div","calendar-header-right").children((0,n.h)("a","calendar-prev").on("click.stop",(function(){return a.prev()})).child(new r.default("chevron-left")),(0,n.h)("a","calendar-next").on("click.stop",(function(){return a.next()})).child(new r.default("chevron-right")))),(0,n.h)("table","calendar-body").children((0,n.h)("thead","").child((i=(0,n.h)("tr","")).children.apply(i,l((0,o.t)("calendar.weeks").map((function(e){return(0,n.h)("th","cell").child(e)}))))),this.bodyEl)),this.selectChange=function(){}}var t,i,a;return t=e,(i=[{key:"setValue",value:function(e){this.value=e,this.cvalue=new Date(e),this.buildAll()}},{key:"prev",value:function(){d(this.value,-1),this.buildAll()}},{key:"next",value:function(){d(this.value,1),this.buildAll()}},{key:"buildAll",value:function(){this.buildHeaderLeft(),this.buildBody()}},{key:"buildHeaderLeft",value:function(){var e=this.value;this.headerLeftEl.html("".concat((0,o.t)("calendar.months")[e.getMonth()]," ").concat(e.getFullYear()))}},{key:"buildBody",value:function(){var e,t=this,i=this.value,a=this.cvalue,r=this.bodyEl,o=function(e,t,i){for(var a=new Date(e,t,1,23,59,59),n=[[],[],[],[],[],[]],r=0;r<6;r+=1)for(var o=0;o<7;o+=1){var l=c(a,7*r+o),s=l.getMonth()!==t,d=l.getMonth()===i.getMonth()&&l.getDate()===i.getDate();n[r][o]={d:l,disabled:s,active:d}}return n}(i.getFullYear(),i.getMonth(),a).map((function(e){var i,a=e.map((function(e){var i="cell";return e.disabled&&(i+=" disabled"),e.active&&(i+=" active"),(0,n.h)("td","").child((0,n.h)("div",i).on("click.stop",(function(){t.selectChange(e.d)})).child(e.d.getDate().toString()))}));return(i=(0,n.h)("tr","")).children.apply(i,l(a))}));(e=r.html("")).children.apply(e,l(o))}}])&&s(t.prototype,i),a&&s(t,a),e}();t.default=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(1),n=i(0),r=i(110),o=i(6);function l(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function s(e,t,i,a){for(var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"",l=(0,n.h)("div",a),s=0;s<e[t].length;s++){var d=e[t][s],c=d.name,u=d.editor,m=d.index;i===s?l.child((0,n.h)("span",r).child(c)):!0===u&&i>=m?l.child((0,n.h)("span",r).child(c)):l.child((0,n.h)("span",o).child(c))}return l}var d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"300px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-suggest-content")).css("width",t).css("z-index","10000").css("position","absolute").hide(),this.el.attr("tabindex",0),(0,o.bind)(this.el.el,"paste",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"copy",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"keydown",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"keyup",(function(e){e.stopPropagation()}))}var t,i,d;return t=e,(i=[{key:"hide",value:function(){this.el.hide()}},{key:"content",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,o=this.el;t=t.toUpperCase();var l={};if(Object.keys(r.helpFormula).forEach((function(e){e===t&&(l=r.helpFormula[e])})),l&&"{}"!==JSON.stringify(l)){var d=[],c=s.call(this,l,"title",i,"".concat(a.cssPrefix,"-help-title"),"".concat(a.cssPrefix,"-help-span-title"),"".concat(a.cssPrefix,"-help-span2-title")),u=(0,n.h)("div","".concat(a.cssPrefix,"-help-section-title")).child("示例"),m=s.call(this,l,"example",i,"".concat(a.cssPrefix,"-help-section-content"),"".concat(a.cssPrefix,"-help-span3-title"));d.push.apply(d,[c,u,m]),Object.keys(l.content).forEach((function(e){var t=l.content[e],i=(0,n.h)("div","".concat(a.cssPrefix,"-help-section-title")).child(e),r=(0,n.h)("div","".concat(a.cssPrefix,"-help-section-content")).child(t);d.push.apply(d,[i,r])})),(e=o.html("")).children.apply(e,d).show()}}}])&&l(t.prototype,i),d&&l(t,d),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.helpFormula=void 0;t.helpFormula={ADD:{title:[{name:"ADD(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ADD(",editor:!1},{name:"2",editor:!1},{name:"，",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数值之和。相当于 + 运算符。",value1:"第一个加数。",value2:"第二个加数。"}},IRR:{title:[{name:"IRR(",editor:!1},{name:"values",editor:!1},{name:",",editor:!1},{name:"guess",editor:!1},{name:")",editor:!1}],example:[{name:"IRR(",editor:!1},{name:"A1:A10",editor:!1},{name:",",editor:!1},{name:"0.1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由数值代表的一组现金流的内部收益率。这些现金流不必为均衡的，但作为年金，它们必须按固定的间隔产生，如按月或按年。内部收益率为投资的回收利率，其中包含定期支付（负值）和定期收入（正值）。",values:"为数组或单元格的引用，包含用来计算返回的内部收益率的数字。至少各含一个正值和一个负值",guess:"对函数 IRR 计算结果的估计值，默认为0.1"}},SUM:{title:[{name:"SUM(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"[value2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUM(",editor:!1},{name:"A2:A100",editor:!1},{name:",",editor:!1},{name:"101",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一组数值和/或单元格的总和。",value1:"要相加的第一个数值或范围。",value2:"要与“value1”相加的其他数值或范围。"}},ABS:{title:[{name:"ABS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ABS(",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的绝对值。绝对值没有符号。",value:"需要计算其绝对值的实数。"}},SQRT:{title:[{name:"SQRT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SQRT(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回正平方根。",value:"要计算平方根的数。"}},CEILING:{title:[{name:"CEILING(",editor:!1},{name:"number",editor:!1},{name:",",editor:!1},{name:"significance",editor:!1},{name:")",editor:!1}],example:[{name:"CEILING(",editor:!1},{name:"10.4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"将参数 Number 向上舍入（沿绝对值增大的方向）为最接近的 significance 的倍数。",number:"所要四舍五入的数值。",significance:"用以进行舍入计算的倍数。"}},CONCATENATE:{title:[{name:"CONCATENATE(",editor:!1},{name:"text1",editor:!1},{name:"，",editor:!1},{name:"[text2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"CONCATENATE(",editor:!1},{name:"文本1",editor:!1},{name:"，",editor:!1},{name:"文本2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将两个或多个文本字符串合并为一个文本字符串。",text1:"待合并文本字符串",text2:"要与“text1”合并的其他待合并文本字符串。"}},PMT:{title:[{name:"PMT(",editor:!1},{name:"rate",editor:!1},{name:",",editor:!1},{name:"nper",editor:!1},{name:",",editor:!1},{name:"pv",editor:!1},{name:",",editor:!1},{name:"fv",editor:!1},{name:",",editor:!1},{name:"type",editor:!1},{name:")",editor:!1}],example:[{name:"PMT(",editor:!1},{name:"0.1",editor:!1},{name:",",editor:!1},{name:"120",editor:!1},{name:",",editor:!1},{name:"1000",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回贷款的每期付款额。",rate:"贷款利率。",nper:"该项贷款的付款期数。",pv:"现值，或一系列未来付款的当前值的累积和，也称为本金。",fv:"为未来值，或在最后一次付款后希望得到的现金余额，如果省略 fv，则假设其值为零，也就是一笔贷款的未来值为零。",type:"指定各期的付款时间是在期初还是期末。0或者省略为期初，1为期末"}},COUNTA:{title:[{name:"COUNTA(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"[value2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNTA(",editor:!1},{name:"A1",editor:!1},{name:"，",editor:!1},{name:"A5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数列表中非空值的单元格个数。",value1:"要计数的单元格",value2:"要计数的单元格"}},STDEV:{title:[{name:"STDEV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEV(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"估算基于样本的标准偏差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数。也可以用单一数组或对某个数组的引用来代替用逗号分隔的参数"}},AVERAGE:{title:[{name:"AVERAGE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3}],example:[{name:"AVERAGE(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3}],content:{abstract:"返回参数的平均值 (算术平均值)",value1:"要计算平均值的第一个数字、单元格引用或单元格区域",value2:"要计算平均值的其他数字、单元格引用或单元格区域，最多可包含 255 个"}},EXP:{title:[{name:"Exp(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"Exp(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 e 的 n 次幂",value1:"底数 e 的指数"}},LN:{title:[{name:"LN(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"LN(",editor:!1},{name:"86",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个数的自然对数",value1:"想要计算其自然对数的正实数"}},TRIM:{title:[{name:"TRIM(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TRIM(",editor:!1},{name:"(' First Quarter Earnings  ')",editor:!1},{name:")",editor:!1}],content:{abstract:"除了单词之间的单个空格外，清除文本中所有的空格",text:"需要删除其中空格的文本"}},HYPERLINK:{title:[{name:"HYPERLINK(",editor:!1},{name:"网址",editor:!1},{name:",",editor:!1},{name:"[链接标签]",editor:!1},{name:")",editor:!1}],example:[{name:"HYPERLINK(",editor:!1},{name:'"http://www.google.com/"',editor:!1},{name:",",editor:!1},{name:'"Google"',editor:!1},{name:")",editor:!1}],content:{abstract:"在单元格内创建一个超链接。",url:"以引号括住的链接位置的完整网址，或对包含这种网址的单元格的引用。",linktag:"用引号括住的要在单元格中作为链接显示的文字，或对包含此类标签的单元格的引用。"}},LEN:{title:[{name:"LEN(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"LEN(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中的字符数",text:"要查找其长度的文本,也可为单元格引用。空格将作为字符进行计数"}},ISBLANK:{title:[{name:"ISBLANK(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ISBLANK(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"检验指定值并根据参数取值返回 TRUE 或 FALSE",value1:"要检验的值。参数 value 可以是空白（空单元格）、错误值、逻辑值、文本、数字、引用值，或者引用要检验的以上任意值的名称"}},ACCRINT:{title:[{name:"ACCRINT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"利率",editor:!1},{name:",",editor:!1},{name:"票面值",editor:!1},{name:",",editor:!1},{name:"年付息次数",editor:!1},{name:")",editor:!1}],example:[{name:"ACCRINT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期付息证券的应计利息",date1:"证券的发行日",date2:"证券的首次计息日",date3:"证券的结算日。证券结算日是在发行日期之后，证券卖给购买者的日期",rate:"证券的年息票利率",price:"证券的票面值。如果省略此参数，则 ACCRINT 使用 ￥1,000",frequency:"年付息次数。如果按年支付，frequency = 1；按半年期支付，frequency = 2；按季支付，frequency = 4"}},ACCRINTM:{title:[{name:"ACCRINTM(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"利率",editor:!1},{name:"'",editor:!1},{name:"票面值",editor:!1},{name:")",editor:!1}],example:[{name:"ACCRINTM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:"'",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期一次性付息有价证券的应计利息",date1:"证券的发行日",date2:"证券的到期日",rate:"证券的年息票利率",price:"证券的票面值。如果省略此参数，则 ACCRINTM 使用 ￥1,000"}},ACOS:{title:[{name:"ACOS(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOS(",editor:!1},{name:"-0.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反余弦值",value1:"所需的角度余弦值，必须介于 -1 到 1 之间"}},ACOSH:{title:[{name:"ACOSH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOSH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 value1 参数的反双曲余弦值",value1:"大于等于 1 的任意实数"}},ACOT:{title:[{name:"ACOT(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOT(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反余切值的主值",value1:"value1 为所需角度的余切值。 此值必须是实数"}},ACOTH:{title:[{name:"ACOTH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOTH(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反双曲余切值",value1:"value1 的绝对值必须大于 1"}},AMORDEGRC:{title:[{name:"AMORDEGRC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],example:[{name:"AMORDEGRC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每个结算期间的折旧值",value1:"资产原值",date1:"购入资产的日期",date2:"第一个期间结束时的日期",value2:"资产在使用寿命结束时的残值",value3:"期间",depreciationrate:"折旧率"}},AMORLINC:{title:[{name:"AMORLINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"期间",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],example:[{name:"AMORLINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"期间",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每个结算期间的折旧值，该函数为法国会计系统提供。如果某项资产是在结算期间的中期购入的，则按线性折旧法计算",value1:"资产原值",date1:"购入资产的日期",date2:"第一个期间结束时的日期",value2:"资产在使用寿命结束时的残值",period:"期间",depreciationrate:"折旧率"}},AND:{title:[{name:"AND(",editor:!1},{name:"逻辑值1",editor:!1},{name:",",editor:!1},{name:"[逻辑值2,...]",editor:!0,index:3}],example:[{name:"AND(",editor:!1},{name:"A2>1",editor:!1},{name:",",editor:!1},{name:"A2<100",editor:!0,index:3}],content:{abstract:"所有参数的计算结果为 TRUE 时，AND 函数返回 TRUE；只要有一个参数的计算结果为 FALSE，即返回 FALSE",logic1:"第一个想要测试且计算结果可为 TRUE 或 FALSE 的条件",logic2:"其他想要测试且计算结果可为 TRUE 或 FALSE 的条件（最多 255 个条件）"}},ARABIC:{title:[{name:"ARABIC(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"ARABIC(",editor:!1},{name:"'LVII'",editor:!1},{name:")",editor:!1}],content:{abstract:"将罗马数字转换为阿拉伯数字",text:"用引号引起的字符串、空字符串 ('') 或对包含文本的单元格的引用"}},ASC:{title:[{name:"ASC(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"ASC(",editor:!1},{name:"'EXCEL' ",editor:!1},{name:")",editor:!1}],content:{abstract:"对于双字节字符集 (DBCS) 语言，将全角（双字节）字符更改为半角（单字节）字符",text:"文本或对包含要更改的文本的单元格的引用。如果文本中不包含任何全角字母，则文本不会更改"}},ASIN:{title:[{name:"ASIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ASIN(",editor:!1},{name:"-0.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反正弦值",value:"所需的角度正弦值，必须介于 -1 到 1 之间"}},ASINH:{title:[{name:"ASINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ASINH(",editor:!1},{name:"-2.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反双曲正弦值",value:"任意实数"}},ATAN:{title:[{name:"ATAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ATAN(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回反正切值",value:"所需的角度正切值"}},ATAN2:{title:[{name:"ATAN2(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ATAN2(",editor:!1},{name:"-1",editor:!1},{name:",",editor:!1},{name:"-1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定的 X 及 Y 坐标值的反正切值",value1:"点的 x 坐标",value2:"点的 y 坐标"}},ATANH:{title:[{name:"ATANH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ATANH(",editor:!1},{name:"-0.1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反双曲正切值，参数必须介于 -1 到 1 之间（除去 -1 和 1）",value:"-1 到 1 之间的任意实数"}},AVEDEV:{title:[{name:"AVEDEV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"AVEDEV(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据与其均值的绝对偏差的平均值，AVEDEV 用于评测这组数据的离散度",value1:"任意实数",value2:"用于计算绝对偏差平均值的一组参数，参数的个数可以为 1 到 255 个"}},AVERAGEA:{title:[{name:"AVERAGEA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"AVERAGEA(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"计算参数列表中数值的平均值",value1:"任意实数",value2:"需要计算平均值的 1 到 255 个单元格、单元格区域或值"}},AVERAGEIF:{title:[{name:"AVERAGEIF(",editor:!1},{name:"引用范围",editor:!1},{name:",",editor:!1},{name:"标准条件",editor:!1},{name:")",editor:!1}],example:[{name:"AVERAGEIF(",editor:!1},{name:"B2:B5",editor:!1},{name:",",editor:!1},{name:"'<23000'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个区域内满足给定条件的所有单元格的平均值（算术平均值）",referencearea:"要计算平均值的一个或多个单元格，其中包括数字或包含数字的名称、数组或引用",standardcondition:"数字、表达式、单元格引用或文本形式的条件，用于定义要对哪些单元格计算平均值"}},AVERAGEIFS:{title:[{name:"AVERAGEIFS(",editor:!1},{name:"引用范围",editor:!1},{name:",",editor:!1},{name:"标准条件_适用范围1",editor:!1},{name:",",editor:!1},{name:"标准条件1",editor:!1},{name:",",editor:!1},{name:"[标准条件_适用范围2,标准条件2,...]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"AVERAGEIFS(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"C2:C7",editor:!1},{name:",",editor:!1},{name:"毕尔褔",editor:!1},{name:",",editor:!1},{name:"D2:D7",editor:!1},{name:",",editor:!1},{name:"'>2'",editor:!1},{name:",",editor:!1},{name:"E2:E7",editor:!1},{name:",",editor:!1},{name:"'是'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回满足多重条件的所有单元格的平均值（算术平均值）",referencearea:"要计算平均值的一个或多个单元格，其中包括数字或包含数字的名称、数组或引用",standardcondition_area1:"要计算平均值的实际单元格集",standardcondition1:"定义要对适用范围1中的哪些单元格计算平均值",standardcondition_area2:"适用范围及其对应的标准条件"}},BAHTTEXT:{title:[{name:"BAHTTEXT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"BAHTTEXT(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字转换为泰语文本并添加后缀“泰铢”",value:"要转换成文本的数字、对包含数字的单元格的引用或结果为数字的公式"}},BASE:{title:[{name:"BASE(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"基",editor:!1},{name:",",editor:!1},{name:"[最小长度]",editor:!0,index:6},{name:")",editor:!1}],example:[{name:"BASE(",editor:!1},{name:"15",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"10",editor:!0,index:6},{name:")",editor:!1}],content:{abstract:"将数字转换为具备给定基数的文本表示",value:"要转换的数字。 必须是大于或等于0且小于 2 ^ 53 的整数",basic:"要将数字转换为的基础基数。 必须是大于或等于2且小于或等于36的整数",minlength:"返回的字符串的最小长度。 必须是大于或等于0的整数"}},BESSELI:{title:[{name:"BESSELI(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELI(",editor:!1},{name:"1.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回修正 Bessel 函数值，它与用纯虚数参数运算时的 Bessel 函数值相等",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELJ:{title:[{name:"BESSELJ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELJ(",editor:!1},{name:"1.9",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Bessel 函数值",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELK:{title:[{name:"BESSELK(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELK(",editor:!1},{name:"1.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回修正 Bessel 函数值，它与用纯虚数参数运算时的 Bessel 函数值相等",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELY:{title:[{name:"BESSELY(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELY(",editor:!1},{name:"2.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Bessel 函数值，也称为 Weber 函数或 Neumann 函数",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},"BETA.DIST":{title:[{name:"BETA.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"逻辑值",editor:!1},{name:",",editor:!1},{name:"[下界]",editor:!0,index:10},{name:",",editor:!1},{name:"[上界]",editor:!0,index:12},{name:")",editor:!1}],example:[{name:"BETA.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"True",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:10},{name:",",editor:!1},{name:"A6",editor:!0,index:12},{name:")",editor:!1}],content:{abstract:"返回 Beta 分布",value1:"介于 A 和 B 之间用来进行函数计算的值",value2:"分布参数",value3:"分布参数",logic:"决定函数形式的逻辑值。如果 cumulative 为 TRUE，BETA.DIST 返回累积分布函数；如果为 FALSE，则返回概率密度函数",lowbound:"value1所属区间的下界",upbound:"value1所属区间的上界"}},"BETA.INV":{title:[{name:"BETA.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[下界]",editor:!0,index:8},{name:",",editor:!1},{name:"[上界]",editor:!0,index:10},{name:")",editor:!1}],example:[{name:"BETA.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:8},{name:",",editor:!1},{name:"A6",editor:!0,index:10},{name:")",editor:!1}],content:{abstract:"返回 Beta 累积概率密度函数 (BETA.DIST) 的反函数",value1:"与 beta 分布相关的概率",value2:"分布参数",value3:"分布参数",lowbound:"value1所属区域的下界",upbound:"value1所属区域的上界"}},BIN2DEC:{title:[{name:"BIN2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2DEC(",editor:!1},{name:"1100100",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为十进制数",value:"希望转换的二进制数"}},BIN2HEX:{title:[{name:"BIN2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2HEX(",editor:!1},{name:"11111011",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为十六进制数",value1:"希望转换的二进制数",value2:"要使用的字符数"}},BIN2OCT:{title:[{name:"BIN2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2OCT(",editor:!1},{name:"1001",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为八进制数",value1:"希望转换的二进制数",value2:"要使用的字符数"}},"BINOM.DIST":{title:[{name:"BINOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"BINOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回二项式分布的概率",value1:"试验成功的次数",value2:"独立试验的次数",value3:"每次试验中成功的概率",value4:"决定函数形式的逻辑值"}},"BINOM.INV":{title:[{name:"BINOM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"BINOM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回使累积二项式分布大于等于临界值的最小值",value1:"伯努利试验次数",value2:"每次试验中成功的概率",value3:"临界值"}},BITAND:{title:[{name:"BITAND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITAND(",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"25",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数的按位“与”",value1:"必须为十进制格式且大于等于 0",value2:"必须为十进制格式且大于等于 0"}},BITLSHIFT:{title:[{name:"BITLSHIFT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITLSHIFT(",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回向左移动指定位数后的数值",value1:"必须是大于或等于0的整数",value2:"必须是整数"}},BITOR:{title:[{name:"BITOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITOR(",editor:!1},{name:"23",editor:!1},{name:",",editor:!1},{name:"10",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数的按位“或”",value1:"必须为十进制格式且大于等于 0",value2:"必须为十进制格式且大于等于 0"}},BITRSHIFT:{title:[{name:"BITRSHIFT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITRSHIFT(",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回向右移动指定位数后的数值",value1:"必须是大于或等于0的整数",value2:"必须是整数"}},BITXOR:{title:[{name:"BITXOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITXOR(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数值的按位“异或”结果",value1:"必须大于或等于 0",value2:"必须大于或等于 0"}},"CEILING.MATH":{title:[{name:"CEILING.MATH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"CEILING.MATH(",editor:!1},{name:"-5.5",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:",",editor:!1},{name:"-1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字向上舍入为最接近的整数或最接近的指定基数的倍数",value1:"必须小于 9.99 E + 307 且大于-2.229 E-308",value2:"要将数字舍入到的倍数",value3:"对于负数, 控制数字是舍入还是远离零"}},"CEILING.PRECISE":{title:[{name:"CEILING.PRECISE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"CEILING.PRECISE(",editor:!1},{name:"4.3",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向上舍入为最接近的整数或最接近的有效位的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的倍数,如果省略，则其默认值为 1"}},CELL:{title:[{name:"CELL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"CELL(",editor:!1},{name:"“row”",editor:!1},{name:",",editor:!1},{name:"A20",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有关单元格的格式、位置或内容的信息",value1:"一个文本值，指定要返回的单元格信息的类型",value2:"需要其相关信息的单元格。如果省略，则将 value1 参数中指定的信息返回给最后更改的单元格。如果参数 value2 是某一单元格区域，则函数只将该信息返回给该区域左上角的单元格"}},CHAR:{title:[{name:"CHAR(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CHAR(",editor:!1},{name:"65",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于数字代码的字符",value:"介于 1 到 255 之间用于指定所需字符的数字"}},CHIDIST:{title:[{name:"CHIDIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHIDIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的右尾概率",value1:"用来计算分布的值",value2:"自由度的数值"}},CHIINV:{title:[{name:"CHIINV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHIINV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的右尾概率的反函数",value1:"与 χ2 分布相关的概率",value2:"自由度的数值"}},"CHISQ.DIST":{title:[{name:"CHISQ.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.DIST(",editor:!1},{name:"0.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布",value1:"用来计算分布的值",value2:"自由度数",value3:"决定函数形式的逻辑值。如果为 TRUE，则返回累积分布函数；如果为 FALSE，则返回概率密度函数"}},"CHISQ.INV":{title:[{name:"CHISQ.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.INV(",editor:!1},{name:"0.93",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的左尾概率的反函数",value1:"与 χ2 分布相关联的概率",value2:"自由度数"}},"CHISQ.TEST":{title:[{name:"CHISQ.TEST(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.TEST(",editor:!1},{name:"A2:B4",editor:!1},{name:",",editor:!1},{name:"A6:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回独立性检验值",area1:"包含观察值的数据区域，用于检验预期值",area2:"包含行列汇总的乘积与总计值之比率的数据区域"}},CHOOSE:{title:[{name:"CHOOSE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"CHOOSE(",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"使用 value1 返回数值参数列表中的数值",value1:"指定所选定的值参数。value1 必须为 1 到 254 之间的数字，或者为公式或对包含 1 到 254 之间某个数字的单元格的引用",value2:"value2 是必需的，后续值是可选的。可以为数字、单元格引用、已定义名称、公式、函数或文本",value3:"可以为数字、单元格引用、已定义名称、公式、函数或文本"}},CLEAN:{title:[{name:"CLEAN(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"CLEAN(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"删除文本中不能打印的字符",text:"要从中删除非打印字符的任何工作表信息"}},CODE:{title:[{name:"CODE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"CODE(",editor:!1},{name:"“A”",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中第一个字符的数字代码",text:"需要得到其第一个字符代码的文本"}},COLUMN:{title:[{name:"COLUMN(",editor:!1},{name:"[数值]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"COLUMN(",editor:!1},{name:"C10",editor:!0,index:1},{name:")",editor:!1}],content:{abstract:"返回指定单元格引用的列号",value:"要返回其列号的单元格或单元格区域"}},COLUMNS:{title:[{name:"COLUMNS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"COLUMNS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数组或引用的列数",array:"需要得到其列数的数组、数组公式或对单元格区域的引用"}},COMBIN:{title:[{name:"COMBIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"COMBIN(",editor:!1},{name:"8",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"计算从给定数目的对象集合中提取若干对象的组合数",value1:"项目的数量",value2:"每一组合中项目的数量"}},COMBINA:{title:[{name:"COMBINA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"COMBINA(",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定数目的项的组合数（包含重复）",value1:"必须大于或等于 0 并大于或等于 Number_chosen。 非整数值将被截尾取整",value2:"必须大于或等于 0。 非整数值将被截尾取整"}},COMPLEX:{title:[{name:"COMPLEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[后缀]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"COMPLEX(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"“j”",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将实系数及虚系数转换为 x+yi 或 x+yj 形式的复数",value1:"复数的实部",value2:"复数的虚部",suffix:"复数中虚部的后缀，如果省略，则认为它为 i"}},CONFIDENCE:{title:[{name:"CONFIDENCE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"CONFIDENCE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"使用正态分布返回总体平均值的置信区间",value1:"用于计算置信度的显著水平参数",value2:"数据区域的总体标准偏差,假设为已知",value3:"样本容量"}},CONVERT:{title:[{name:"CONVERT(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"单位1",editor:!1},{name:",",editor:!1},{name:"单位2",editor:!1},{name:")",editor:!1}],example:[{name:"CONVERT(",editor:!1},{name:"1.0",editor:!1},{name:",",editor:!1},{name:"'lbm'",editor:!1},{name:",",editor:!1},{name:"'kg'",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字从一个度量系统转换到另一个度量系统中",value:"以单位1为单位的需要进行转换的数值",unit1:"数值的单位",unit2:"结果的单位"}},CORREL:{title:[{name:"CORREL(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"CORREL(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回单元格区域 array1 和 array2 之间的相关系数",array1:"第一组数值单元格区域",array2:"第二组数值单元格区域"}},COS:{title:[{name:"COS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COS(",editor:!1},{name:"1.047",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定角度的余弦值",value:"想要求余弦的角度，以弧度表示"}},COTH:{title:[{name:"COTH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COTH(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个双曲角度的双曲余切值",value:"想要求双曲余弦值的角度值"}},COUNT:{title:[{name:"COUNT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNT(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"计算包含数字的单元格以及参数列表中数字的个数",value1:"要计算其中数字的个数的第一个项、单元格引用或区域",value2:"要计算其中数字的个数的其他项、单元格引用或区域，最多可包含 255 个"}},COUNTBLANK:{title:[{name:"COUNTBLANK(",editor:!1},{name:"区域",editor:!1},{name:")",editor:!1}],example:[{name:"COUNTBLANK(",editor:!1},{name:"A2:B5",editor:!1},{name:")",editor:!1}],content:{abstract:"计算指定单元格区域中空白单元格的个数",area:"需要计算其中空白单元格个数的区域"}},COUNTIF:{title:[{name:"COUNTIF(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"标准条件",editor:!1},{name:")",editor:!1}],example:[{name:"COUNTIF(",editor:!1},{name:"A2:A7",editor:!1},{name:",",editor:!1},{name:"'?果'",editor:!1},{name:")",editor:!1}],content:{abstract:"对区域中满足单个指定条件的单元格进行计数",area:"要对其进行计数的一个或多个单元格，其中包括数字或名称、数组或包含数字的引用。空值和文本值将被忽略",standardcondition:"用于定义将对哪些单元格进行计数的数字、表达式、单元格引用或文本字符串"}},COUNTIFS:{title:[{name:"COUNTIFS(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"标准条件1",editor:!1},{name:",",editor:!1},{name:"[区域2,标准条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNTIFS(",editor:!1},{name:"B2:D2",editor:!1},{name:",",editor:!1},{name:"'=是'",editor:!1},{name:")",editor:!1}],content:{abstract:"将条件应用于跨多个区域的单元格，并计算符合所有条件的次数",area1:"在其中计算关联条件的第一个区域",standardcondition1:"条件的形式为数字、表达式、单元格引用或文本，可用来定义将对哪些单元格进行计数",standardcondition2:"附加的区域及其关联条件。最多允许 127 个区域/条件对"}},COUPDAYBS:{title:[{name:"COUPDAYBS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYBS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从付息期开始到结算日的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPDAYS:{title:[{name:"COUPDAYS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回结算日所在的付息期的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPDAYSNC:{title:[{name:"COUPDAYSNC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYSNC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从结算日到下一付息日之间的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPNCD:{title:[{name:"COUPNCD",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPNCD",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个表示在结算日之后下一个付息日的数字",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPNUM:{title:[{name:"COUPNUM(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPNUM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在结算日和到期日之间的付息次数，向上舍入到最近的整数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPPCD:{title:[{name:"COUPPCD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPPCD(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示结算日之前的上一个付息日的数字",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COVAR:{title:[{name:"COVAR(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVAR(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回协方差，即两个数据集中每对数据点的偏差乘积的平均数",array1:"第一个所含数据为整数的单元格区域",array2:"第二个所含数据为整数的单元格区域"}},"COVARIANCE.P":{title:[{name:"COVARIANCE.P(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVARIANCE.P(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回总体协方差，即两个数据集中每对数据点的偏差乘积的平均数",array1:"第一个所含数据为整数的单元格区域",array2:"第二个所含数据为整数的单元格区域"}},"COVARIANCE.S":{title:[{name:"COVARIANCE.S(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVARIANCE.S(",editor:!1},{name:"A3:A5",editor:!1},{name:",",editor:!1},{name:"B3:B5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回样本协方差，即两个数据集中每对数据点的偏差乘积的平均值",array1:"整数的第一个单元格区域",array2:"整数的第二个单元格区域"}},CSC:{title:[{name:"CSC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CSC(",editor:!1},{name:"15",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的余割值，以弧度表示",value:"要求余割值的角度值"}},CSCH:{title:[{name:"CSCH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CSCH(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的双曲余割值，以弧度表示",value:"要求双曲余割值的角度值"}},CUMIPMT:{title:[{name:"CUMIPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:",",editor:!1},{name:"value6",editor:!1},{name:")",editor:!1}],example:[{name:"CUMIPMT(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3*12",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一笔贷款在给定的 value4 到 value5 期间累计偿还的利息数额",value1:"利率",value2:"总付款期数",value3:"现值",value4:"计算中的首期。 付款期数从 1 开始计数",value5:"计算中的末期",value6:"付款时间类型"}},CUMPRINC:{title:[{name:"CUMPRINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:",",editor:!1},{name:"value6",editor:!1},{name:")",editor:!1}],example:[{name:"CUMPRINC(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3*12",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一笔贷款在给定的 start_period 到 end_period 期间累计偿还的本金数额",value1:"利率",value2:"总付款期数",value3:"现值",value4:"计算中的首期。 付款期数从 1 开始计数",value5:"计算中的末期",value6:"付款时间类型"}},DATE:{title:[{name:"DATE(",editor:!1},{name:"年",editor:!1},{name:",",editor:!1},{name:"月",editor:!1},{name:",",editor:!1},{name:"日",editor:!1},{name:")",editor:!1}],example:[{name:"DATE(",editor:!1},{name:"2008",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示特定日期的连续序列号",year:"年",month:"月",day:"日"}},DATEVALUE:{title:[{name:"DATEVALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"DATEVALUE(",editor:!1},{name:"'8/22/2008'",editor:!1},{name:")",editor:!1}],content:{abstract:"可将存储为文本的日期转换为 Excel 识别为日期的序列号",text:"表示 Excel 日期格式的日期的文本，或者是对表示 Excel 日期格式的日期的文本所在单元格的单元格引用"}},DAVERAGE:{title:[{name:"DAVERAGE(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DAVERAGE(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"A4:E10",editor:!1},{name:")",editor:!1}],content:{abstract:"对列表或数据库中满足指定条件的记录字段（列）中的数值求平均值",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"是包含所指定条件的单元格区域"}},DAY:{title:[{name:"DAY(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"DAY(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以序列号表示的某日期的天数，用整数 1 到 31 表示",date:"要查找的那一天的日期"}},DAYS:{title:[{name:"DAYS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"DAYS(",editor:!1},{name:"'2011-3-15'",editor:!1},{name:",",editor:!1},{name:"'2011-2-1'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个日期之间的天数",date1:"用于计算期间天数的起始日期",date2:"用于计算期间天数的终止日期"}},DAYS360:{title:[{name:"DAYS360(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"DAYS360(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"按照一年 360 天的算法（每个月以 30 天计，一年共计 12 个月），返回两日期间相差的天数，这在一些会计计算中将会用到",date1:"要计算期间天数的起始日期",date2:"要计算期间天数的终止日期"}},DB:{title:[{name:"DB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:10},{name:")",editor:!1}],example:[{name:"DB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"7",editor:!0,index:10},{name:")",editor:!1}],content:{abstract:"使用固定余额递减法，计算一笔资产在给定期间内的折旧值",value1:"资产原值",value2:"资产在折旧期末的价值",value3:"资产的折旧期数",value4:"需要计算折旧值的期间",value5:"第一年的月份数，如省略，则假设为 12"}},DBCS:{title:[{name:"DBCS(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"DBCS(",editor:!1},{name:"EXCEL",editor:!1},{name:")",editor:!1}],content:{abstract:"将字符串中的半角（单字节）字母转换为全角（双字节）字符",text:"文本或包含要转换的文本的单元格的引用"}},DCOUNT:{title:[{name:"DCOUNT(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DCOUNT(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Age'",editor:!1},{name:",",editor:!1},{name:"A1:F2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中包含数字的单元格的个数",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DCOUNTA:{title:[{name:"DCOUNTA(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DCOUNTA(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Profit'",editor:!1},{name:",",editor:!1},{name:"A1:F2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的非空单元格的个数",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DDB:{title:[{name:"DDB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"DDB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"1.5",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"使用双倍余额递减法或其他指定方法，计算一笔资产在给定期间内的折旧值",value1:"资产原值",value2:"资产在折旧期末的价值（有时也称为资产残值）。此值可以是 0",value3:"资产的折旧期数",value4:"需要计算折旧值的期间",value5:"余额递减速率"}},DEC2BIN:{title:[{name:"DEC2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2BIN(",editor:!1},{name:"9",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为二进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DEC2HEX:{title:[{name:"DEC2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2HEX(",editor:!1},{name:"100",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为十六进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DEC2OCT:{title:[{name:"DEC2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2OCT(",editor:!1},{name:"58",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为八进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DECIMAL:{title:[{name:"DECIMAL(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"数制",editor:!1},{name:")",editor:!1}],example:[{name:"DECIMAL(",editor:!1},{name:"'FF'",editor:!1},{name:",",editor:!1},{name:"16",editor:!1},{name:")",editor:!1}],content:{abstract:"按给定基数将数字的文本表示形式转换成十进制数",text:"所要转换的文本",numtype:"转换所用的数制,必须是整数"}},DEGREES:{title:[{name:"DEGREES(",editor:!1},{name:"弧度角",editor:!1},{name:")",editor:!1}],example:[{name:"DEGREES(",editor:!1},{name:"PI()",editor:!1},{name:")",editor:!1}],content:{abstract:"将弧度转换为度",arctangle:"待转换的弧度角"}},DELTA:{title:[{name:"DELTA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DELTA(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"测试两个数值是否相等",value1:"第一个数字",value2:"第二个数字。如果省略，假设 Number2 的值为零"}},DEVSQ:{title:[{name:"DEVSQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEVSQ(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据点与各自样本平均值偏差的平方和",value1:"必需",value2:"参数的个数可以为 1 到 255 个"}},DGET:{title:[{name:"DGET(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DGET(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Yield'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"从列表或数据库的列中提取符合指定条件的单个值",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DISC:{title:[{name:"DISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"DISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有价证券的贴现率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的价格（按面值为 ￥100 计算）",value2:"有价证券的兑换值（按面值为 ￥100 计算）"}},DMAX:{title:[{name:"DMAX(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DMAX(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'利润'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的最大数字",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DMIN:{title:[{name:"DMIN(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DMIN(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Profit'",editor:!1},{name:",",editor:!1},{name:"A1:B2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的最小数字",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DOLLAR:{title:[{name:"DOLLAR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DOLLAR(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字转换为货币格式使用小数位数舍入到您指定的位数的文本",value1:"数字、对包含数字的单元格的引用或是计算结果为数字的公式",value2:"数值小数点右边的位数"}},DOLLARDE:{title:[{name:"DOLLARDE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"DOLLARDE(",editor:!1},{name:"1.02",editor:!1},{name:",",editor:!1},{name:"16",editor:!1},{name:")",editor:!1}],content:{abstract:"将以整数部分和分数部分表示的价格（例如 1.02）转换为以小数部分表示的价格",value1:"以整数部份和分数部分表示的数字，用小数点隔开",value2:"用作分数中的分母的整数"}},DPRODUCT:{title:[{name:"DPRODUCT(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DPRODUCT(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的数值的乘积",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSTDEV:{title:[{name:"DSTDEV(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSTDEV(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体标准偏差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSTDEVP:{title:[{name:"DSTDEVP(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSTDEVP(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为样本总体计算出的总体标准偏差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSUM:{title:[{name:"DSUM(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSUM(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'利润'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的数字之和",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DURATION:{title:[{name:"DURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"DURATION(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回假设面值为 ￥ 100 的 Macauley 工期",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",returnrate:"有价证券的年收益率",frequency:"年付息次数"}},DVAR:{title:[{name:"DVAR(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DVAR(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'产量",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体方差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DVARP:{title:[{name:"DVARP(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DVARP(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'产量",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"通过使用列表或数据库中满足指定条件的记录字段（列）中的数字计算样本总体的样本总体方差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},EDATE:{title:[{name:"EDATE(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EDATE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示某个日期的序列号，该日期与指定日期 (start_date) 相隔（之前或之后）指示的月份数",date:"一个代表开始日期的日期",value:"日期之前或之后的月份数"}},EFFECT:{title:[{name:"EFFECT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"EFFECT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"利用给定的名义年利率和每年的复利期数，计算有效的年利率",value1:"名义利率",value2:"每年的复利期数"}},EOMONTH:{title:[{name:"EOMONTH(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EOMONTH(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个月份最后一天的序列号，该月份与 日期 相隔（之后或之后）指示的月份数",date:"表示开始日期的日期",value:"日期 之前或之后的月份数"}},ERF:{title:[{name:"ERF(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ERF(",editor:!1},{name:"0.745",editor:!1},{name:")",editor:!1}],content:{abstract:"返回误差函数在上下限之间的积分",value1:"函数的积分下限",value2:"函数的积分上限。 如果省略，ERF 积分将在零到 lower_limit 之间"}},ERFCPRECISE:{title:[{name:"ERFCPRECISE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ERFCPRECISE(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从 数值 到无穷大积分的互补 ERF 函数",value:"函数的积分下限"}},"ERROR.TYPE":{title:[{name:"ERROR.TYPE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ERROR.TYPE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于 Microsoft Excel 中的错误值之一的数字或返回“#N/A”错误（如果不存在错误）",value:"要查找其标识号的错误值"}},EVEN:{title:[{name:"EVEN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EVEN(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字向上舍入到的最接近的偶数",value:"要舍入的值"}},EXACT:{title:[{name:"EXACT(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:")",editor:!1}],example:[{name:"EXACT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"B2",editor:!1},{name:")",editor:!1}],content:{abstract:"比较两个文本字符串，如果它们完全相同，则返回 TRUE，否则返回 FALSE",text1:"第一个文本字符串",text2:"第二个文本字符串"}},"EXPON.DIST":{title:[{name:"EXPON.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"EXPON.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指数分布",value1:"函数值",value2:"参数值",value3:"逻辑值，用于指定指数函数的形式"}},"F.DIST":{title:[{name:"F.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"F.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 F 概率分布函数的函数值",value1:"用来计算函数的值",value2:"分子自由度",value3:"分母自由度",value4:"决定函数形式的逻辑值"}},"F.INV":{title:[{name:"F.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 F 概率分布函数的反函数值",value1:"F 累积分布的概率值",value2:"分子自由度",value3:"分母自由度"}},"F.TEST":{title:[{name:"F.TEST(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"F.TEST(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断两个样本的方差是否不同",array1:"第一个数组或数据区域",array2:"第二个数组或数据区域"}},FACT:{title:[{name:"FACT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FACT(",editor:!1},{name:"5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某数的阶乘",value:"要计算其阶乘的非负数"}},FACTDOUBLE:{title:[{name:"FACTDOUBLE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FACTDOUBLE(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双倍阶乘",value:"要计算其双倍阶乘的数值"}},FALSE:{title:[{name:"FALSE(",editor:!1},{name:")",editor:!1}],example:[{name:"FALSE(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回逻辑值 FALSE"}},"F.DIST.RT":{title:[{name:"F.DIST.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.DIST.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数据集的（右尾）F 概率分布（变化程度）",value1:"用来计算函数的值",value2:"分子自由度",value3:"分母自由度"}},FIND:{title:[{name:"FIND(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FIND(",editor:!1},{name:"'M'",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"用于在文本2中定位文本1，并返回文本1的起始位置的值，该值从文本2的第一个字符算起",text1:"要查找的文本",text2:"包含要查找文本的文本"}},"F.INV.RT":{title:[{name:"F.INV.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.INV.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回（右尾）F 概率分布函数的反函数值",value1:"F 累积分布的概率值",value2:"分子自由度",value3:"分母自由度"}},FISHER:{title:[{name:"FISHER(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FISHER(",editor:!1},{name:"0.75",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的 Fisher 变换值",value:"要对其进行变换的数值"}},FISHERINV:{title:[{name:"FISHERINV(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FISHERINV(",editor:!1},{name:"0.972955",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Fisher 逆变换值",value:"要对其进行逆变换的数值"}},FIXED:{title:[{name:"FIXED(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FIXED(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"-1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字舍入到指定的小数位数，使用句点和逗号，以十进制数格式对该数进行格式设置，并以文本形式返回结果",value1:"要进行舍入并转换为文本的数字",value2:"小数点右边的位数",value3:"一个逻辑值，如果为 TRUE，则会禁止 FIXED 在返回的文本中包含逗号"}},FLOOR:{title:[{name:"FLOOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"FLOOR(",editor:!1},{name:"3.7",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将参数 value1 向下舍入（沿绝对值减小的方向）为最接近的 value2 的倍数",value1:"要舍入的数值",value2:"要舍入到的倍数"}},"FLOOR.MATH":{title:[{name:"FLOOR.MATH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FLOOR.MATH(",editor:!1},{name:"-5.5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"-1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字向下舍入为最接近的整数或最接近的指定基数的倍数",value1:"要向下舍入的数字",value2:"要舍入到的倍数",value3:"舍入负数的方向（接近或远离 0）"}},"FLOOR.PRECISE":{title:[{name:"FLOOR.PRECISE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"FLOOR.PRECISE(",editor:!1},{name:"-3.2",editor:!1},{name:",",editor:!1},{name:"-1",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向下舍入为最接近的整数或最接近的 value2 的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的倍数。如果省略,则其默认值为 1"}},FORECAST:{title:[{name:"FORECAST(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"FORECAST(",editor:!1},{name:"30",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"根据现有值计算或预测未来值",value:"需要进行值预测的数据点",area1:"相关数组或数据区域",area2:"独立数组或数据区域"}},FREQUENCY:{title:[{name:"FREQUENCY(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"FREQUENCY(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"B2:B4",editor:!1},{name:")",editor:!1}],content:{abstract:"函数计算值在某个范围内出现的频率, 然后返回一个垂直的数字数组",array1:" 要对其频率进行计数的一组数值或对这组数值的引用",array2:" 要将 array1 中的值插入到的间隔数组或对间隔的引用"}},FV:{title:[{name:"FV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"FV(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:7},{name:",",editor:!1},{name:"A6",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"用于根据固定利率计算投资的未来值",value1:"各期利率",value2:"年金的付款总期数",value3:"各期所应支付的金额，在整个年金期间保持不变",value4:" 现值，或一系列未来付款的当前值的累积和。 如果省略 value4，则假定其值为 0",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末。如果省略 value5，则假定其值为 0"}},FVSCHEDULE:{title:[{name:"FVSCHEDULE(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"FVSCHEDULE(",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"{0.09,0.11,0.1}",editor:!1},{name:")",editor:!1}],content:{abstract:"返回应用一系列复利率计算的初始本金的未来值",value:"现值",array:"要应用的利率数组"}},GAMMA:{title:[{name:"GAMMA(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA(",editor:!1},{name:"2.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 gamma 函数值",value:"返回一个数字"}},"GAMMA.DIST":{title:[{name:"GAMMA.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛分布函数的函数值",value1:"用来计算分布的数值",value2:"分布参数",value3:"分布参数",value4:"决定函数形式的逻辑值"}},"GAMMA.INV":{title:[{name:"GAMMA.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛累积分布函数的反函数值",value1:"伽玛分布相关的概率",value2:"分布参数",value3:"分布参数"}},GAMMALN:{title:[{name:"GAMMALN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMALN(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛函数的自然对数",value:"要计算其 GAMMALN 的数值"}},"GAMMALN.PRECISE":{title:[{name:"GAMMALN.PRECISE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMALN.PRECISE(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛函数的自然对数",value:"要计算其 GAMMALN.PRECISE 的数值"}},GAUSS:{title:[{name:"GAUSS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAUSS(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"计算标准正态总体的成员处于平均值与平均值的 z 倍标准偏差之间的概率",value:"返回一个数字"}},GCD:{title:[{name:"GCD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GCD(",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"36",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回两个或多个整数的最大公约数",value1:"任意实数",value2:"任意实数,个数介于 1 和 255 之间"}},GEOMEAN:{title:[{name:"GEOMEAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GEOMEAN(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组正数数据或正数数据区域的几何平均值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},GESTEP:{title:[{name:"GESTEP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GESTEP(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"可以使用此函数来筛选一组值",value1:"要针对步骤进行测试的值",value2:"如果省略，则 GESTEP 使用零"}},GROWTH:{title:[{name:"GROWTH(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"GROWTH(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"A2:A7",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"使用现有数据计算预测的指数等比",set1:"关系表达式 y = b*m^x 中已知的 y 值集合",set2:"关系表达式 y=b*m^x 中已知的 x 值集合",value1:" 需要 GROWTH 返回对应 y 值的新 x 值",value2:" 一个逻辑值，用于指定是否将常量 b 强制设为 1"}},HARMEAN:{title:[{name:"HARMEAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HARMEAN(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的调和平均值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},HEX2BIN:{title:[{name:"HEX2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HEX2BIN(",editor:!1},{name:"'F'",editor:!1},{name:",",editor:!1},{name:"8",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为二进制数",value1:"要转换的十六进制数",value2:"要使用的字符数"}},HEX2DEC:{title:[{name:"HEX2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"HEX2DEC(",editor:!1},{name:"'FFFFFFFF5B'",editor:!1},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为十进制数",value:"要转换的十六进制数"}},HEX2OCT:{title:[{name:"HEX2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HEX2OCT(",editor:!1},{name:"'F'",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为八进制数",value1:"要转换的十六进制数",value2:"要使用的字符数"}},HLOOKUP:{title:[{name:"HLOOKUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"HLOOKUP(",editor:!1},{name:"'B'",editor:!1},{name:",",editor:!1},{name:"A1:C1",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在表格的首行或数值数组中搜索值，然后返回表格或数组中指定行的所在列中的值",value1:"要在表格的第一行中查找的值",array1:"在其中查找数据的信息表",value2:"array1 中将返回匹配值的行号",value3:"一个逻辑值，指定希望 HLOOKUP 查找精确匹配值还是近似匹配值"}},HOUR:{title:[{name:"HOUR(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"HOUR(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值的小时数",time:"时间值，其中包含要查找的小时数"}},"HYPGEOM.DIST":{title:[{name:"HYPGEOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:".",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:")",editor:!1}],example:[{name:"HYPGEOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:".",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回超几何分布",value1:"样本中成功的次数",value2:"样本量",value3:"总体中成功的次数",value4:"总体大小",value5:"决定函数形式的逻辑值"}},IF:{title:[{name:"IF(",editor:!1},{name:"条件",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"IF(",editor:!1},{name:"A2>B2",editor:!1},{name:",",editor:!1},{name:"'超出预算'",editor:!1},{name:",",editor:!1},{name:"'正常'",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"如果条件为真，该函数将返回一个值；如果条件为假，函数将返回另一个值",conditon:"要测试的条件",value1:"条件的结果为 TRUE 时，您希望返回的值",value2:"条件的结果为 FALSE 时，您希望返回的值"}},IFERROR:{title:[{name:"IFERROR(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"值2",editor:!1},{name:")",editor:!1}],example:[{name:"IFERROR(",editor:!1},{name:"A2/B2",editor:!1},{name:",",editor:!1},{name:"'计算中有错误'",editor:!1},{name:")",editor:!1}],content:{abstract:"可以使用 IFERROR 函数捕获和处理公式中的错误",value1:"检查是否存在错误的参数",value2:"公式计算错误时返回的值"}},IFNA:{title:[{name:"IFNA(",editor:!1},{name:"参数",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IFNA(",editor:!1},{name:'VLOOKUP("Seattle",$A$5:$B$10,0)',editor:!1},{name:",",editor:!1},{name:"'Not found'",editor:!1},{name:")",editor:!1}],content:{abstract:"如果公式返回错误值 #N/A，则结果返回您指定的值；否则返回公式的结果",param:"用于检查错误值 #N/A 的参数",value:"公式计算结果为错误值 #N/A 时要返回的值"}},IFS:{title:[{name:"IFS(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[条件2,值2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"IFS(",editor:!1},{name:"A2>89",editor:!1},{name:",",editor:!1},{name:"'A'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数检查是否满足一个或多个条件，且返回符合第一个 TRUE 条件的值",condition1:"计算结果为 TRUE 或 FALSE 的条件",value:"当 条件1 的计算结果为 TRUE 时要返回结果。 可以为空。",condition2:"其他参数对"}},IMABS:{title:[{name:"IMABS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMABS(",editor:!1},{name:"'5+12i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的绝对值",value:"需要计算其绝对值的复数"}},IMAGINARY:{title:[{name:"IMAGINARY(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMAGINARY(",editor:!1},{name:"'3+4i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的虚系数",value:"需要计算其虚系数的复数"}},IMARGUMENT:{title:[{name:"IMARGUMENT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMARGUMENT(",editor:!1},{name:"'3+4i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数  θ (theta)，即以弧度表示的角",value:"需要计算其参数  θ 的复数"}},IMCONJUGATE:{title:[{name:"IMCONJUGATE(",editor:!1},{name:"value",editor:!1},{name:"",editor:!1}],example:[{name:"IMCONJUGATE(",editor:!1},{name:"'3+4i'",editor:!1},{name:"",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的共轭复数",value:"需要计算其共轭数的复数"}},IMCOS:{title:[{name:"IMCOS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOS(",editor:!1},{name:"'1+i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余弦",value:"需要计算其余弦的复数"}},IMCOSH:{title:[{name:"IMCOSH",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOSH",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲余弦值",value:"需要计算其双曲余弦值的复数"}},IMCOT:{title:[{name:"IMCOT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOT(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余切值",value:"要对其余切值的复数"}},IMCSC:{title:[{name:"IMCSC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCSC(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余割值",value:"要对其余割值的复数"}},IMCSCH:{title:[{name:"IMCSCH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCSCH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲余割值",value:"需要计算其双曲余割值的复数"}},IMDIV:{title:[{name:"IMDIV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMDIV(",editor:!1},{name:"'-238+240i'",editor:!1},{name:",",editor:!1},{name:"'10+24i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个复数的商",value1:"复数分子或被除数",value2:"复数分母或除数"}},IMEXP:{title:[{name:"IMEXP(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMEXP(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的指数",value:"需要计算其指数的复数"}},IMLN:{title:[{name:"IMLN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的自然对数",value:"需要计算其自然对数的复数"}},IMLOG2:{title:[{name:"IMLOG2(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLOG2(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返返回以 x+yi 或 x+yj 文本格式表示的复数的以 2 为底数的对数",value:"需要计算以 2 为底数的对数的复数"}},IMLOG10:{title:[{name:"IMLOG10(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLOG10(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x + yi 或 x + yj 文本格式表示的复数的常用对数（以 10 为底数）",value:"需要计算其常用对数的复数"}},IMPOWER:{title:[{name:"IMPOWER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMPOWER(",editor:!1},{name:"'4+3i'",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的 n 次幂",value1:"需要计算其幂值的复数",value2:"需要对复数应用的幂次"}},IMPRODUCT:{title:[{name:"IMPRODUCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"IMPRODUCT(",editor:!1},{name:"'1+2i'",editor:!1},{name:",",editor:!1},{name:"30",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的乘积",value1:"任意复数",value2:"任意复数,个数介于1到255之间"}},IMREAL:{title:[{name:"IMREAL(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMREAL(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的实系数",value:"需要计算其实系数的复数"}},IMSEC:{title:[{name:"IMSEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSEC(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正割值",value:"需要计算其正割值的复数"}},IMSECH:{title:[{name:"IMSECH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSECH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲正割值",value:"需要计算其双曲正割值的复数"}},IMSIN:{title:[{name:"IMSIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSIN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正弦值",value:"需要计算其正弦的复数"}},IMSINH:{title:[{name:"IMSINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSINH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x + yi 或 x + yj 文本格式的复数的双曲正弦值",value:"要对其双曲正弦值的复数"}},IMSQRT:{title:[{name:"IMSQRT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSQRT(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的平方根",value:"需要计算其平方根的复数"}},IMSUB:{title:[{name:"IMSUB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMSUB(",editor:!1},{name:"'13+4i'",editor:!1},{name:",",editor:!1},{name:"'5+3i",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个复数的差",value1:"从（复）数中减去 value2",value2:"从 value1 中减（复）数"}},IMSUM:{title:[{name:"IMSUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"IMSUM(",editor:!1},{name:"'3+4i'",editor:!1},{name:",",editor:!1},{name:"'5-3i'",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个或多个复数的和",value1:"任意复数",value2:"任意复数,个数介于1到255之间"}},IMTAN:{title:[{name:"IMTAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMTAN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正切值",value:"要对其进行切线的复数"}},INDEX:{title:[{name:"INDEX(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"函数适用行",editor:!1},{name:",",editor:!1},{name:"[函数适用列]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"INDEX(",editor:!1},{name:"A2:B3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"函数返回表格或区域中的值或值的引用",array:"单元格区域或数组常量",funcrow:"选择数组中的某行，函数从该行返回数值",funccolum:"选择数组中的某列，函数从该列返回数值"}},INFO:{title:[{name:"INFO(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"INFO(",editor:!1},{name:"'numfile'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有关当前操作环境的信息",text:"用于指定要返回的信息类型的文本"}},INT:{title:[{name:"INT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"INT(",editor:!1},{name:"8.9",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字向下舍入到最接近的整数",value:"需要进行向下舍入取整的实数"}},INTERCEPT:{title:[{name:"INTERCEPT(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"集合2",editor:!1},{name:")",editor:!1}],example:[{name:"INTERCEPT(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"利用已知的 x 值与 y 值计算直线与 y 轴交叉点",set1:"因变的观察值或数据的集合",set2:"自变的观察值或数据的集合"}},INTRATE:{title:[{name:"INTRATE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"INTRATE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回完全投资型证券的利率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的投资额",value2:"有价证券到期时的兑换值"}},IPMT:{title:[{name:"IPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:",",editor:!1},{name:"[value6]",editor:!0,index:11},{name:")",editor:!1}],example:[{name:"IPMT(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4*12",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回给定期数内对投资的利息偿还额",value1:"各期利率",value2:"用于计算其利息数额的期数，必须在 1 到 value3 之间",value3:"年金的付款总期数",value4:"现值，或一系列未来付款的当前值的累积和",value5:"未来值，或在最后一次付款后希望得到的现金余额",value6:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末。 如果省略 value6，则假定其值为 0"}},ISERR:{title:[{name:"ISERR(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISERR(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"检验是否存在错误情形",value:"值为任意错误值（除去 #N/A）,则返回TRUE"}},ISERROR:{title:[{name:"ISERROR(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISERROR(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"检验是否存在错误情形",value:"值为任意错误值,则返回TRUE"}},ISEVEN:{title:[{name:"ISEVEN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ISEVEN(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"如果参数 数值 为偶数，返回 TRUE，否则返回 FALSE",value:"要测试的值"}},ISFORMULA:{title:[{name:"ISFORMULA(",editor:!1},{name:"引用",editor:!1},{name:")",editor:!1}],example:[{name:"ISFORMULA(",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"检查是否存在包含公式的单元格引用，然后返回 TRUE 或 FALSE",reference:"引用是对要测试单元格的引用"}},ISLOGICAL:{title:[{name:"ISLOGICAL(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISLOGICAL(",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为逻辑值",value:"如果为逻辑值返回TRUE,否则返回FALSE"}},ISNA:{title:[{name:"ISNA(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNA(",editor:!1},{name:"#N/A",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为#N/A",value:"如果为#N/A返回TRUE,否则返回FALSE"}},ISNONTEXT:{title:[{name:"ISNONTEXT(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNONTEXT(",editor:!1},{name:"#N/A",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为非文本的任意项",value:"如果为非文本的任意项返回TRUE,否则返回FALSE"}},ISNUMBER:{title:[{name:"ISNUMBER(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNUMBER(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为数字",value:"如果为数字返回TRUE,否则返回FALSE"}},"ISO.CEILING":{title:[{name:"ISO.CEILING(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ISO.CEILING(",editor:!1},{name:"4.3",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向上舍入为最接近的整数或最接近的有效位的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的可选倍数。如果省略，则其默认值为 1"}},ISODD:{title:[{name:"ISODD(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISODD(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为奇数",value:"如果为奇数返回TRUE,否则返回FALSE"}},ISOWEEKNUM:{title:[{name:"ISOWEEKNUM(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"ISOWEEKNUM(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定日期在全年中的 ISO 周数",date:"日期是 Excel 用于日期和时间计算的日期-时间代码"}},ISPMT:{title:[{name:"ISPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ISPMT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"计算付薪 (或投资) 指定期间内 (甚至本金付款) 支付的利息 (或接收)",value1:"投资的利率",value2:"要查找其利息的期间, 并且必须介于1和 value3 之间",value3:"投资的总支付期数",value4:"投资的现值"}},ISREF:{title:[{name:"ISREF(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISREF(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为引用",value:"如果为引用返回TRUE,否则返回FALSE"}},KURT:{title:[{name:"KURT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"KURT(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的峰值",value1:"任意值",value2:"任意值,个数介于1到255之间"}},LARGE:{title:[{name:"LARGE(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"LARGE(",editor:!1},{name:"A2:B6",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集中第 k 个最大值",area:"需要确定第 数值 个最大值的数组或数据区域",value:"返回值在数组或数据单元格区域中的位置（从大到小排）"}},LCM:{title:[{name:"KURT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"LCM(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回整数的最小公倍数",value1:"任意整数",value2:"任意整数,个数介于1到255之间"}},LEFT:{title:[{name:"LEFT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:3},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"LEFT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"从文本字符串的第一个字符开始返回指定个数的字符",text:"包含要提取的字符的文本字符串",value1:"指定要由 LEFT 提取的字符的数量",value2:"按字节指定要由 LEFTB 提取的字符的数量"}},LINEST:{title:[{name:"LINEST(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"LINEST(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:3},{name:",",editor:!1},{name:"FALSE",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"使用最小二乘法计算与现有数据最佳拟合的直线，来计算某直线的统计值，然后返回描述此直线的数组",set1:"关系表达式 y = mx + b 中已知的 y 值集合",set2:"关系表达式 y = mx + b 中已知的 x 值集合",value1:"一个逻辑值，用于指定是否将常量 b 强制设为 0",value2:"一个逻辑值，用于指定是否返回附加回归统计值"}},LOG:{title:[{name:"LOG(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"LOG(",editor:!1},{name:"8",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"根据指定底数返回数字的对数",value1:"想要计算其对数的正实数",value2:"对数的底数。 如果省略，则假定其值为 10"}},LOG10:{title:[{name:"LOG10(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"LOG10(",editor:!1},{name:"86",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字以 10 为底的对数",value:"想要计算其以 10 为底的对数的正实数"}},LOGEST:{title:[{name:"LOGEST(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"LOGEST(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"A2:A7",editor:!0,index:3},{name:",",editor:!1},{name:"TRUE",editor:!0,index:5},{name:",",editor:!1},{name:"FALSE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"计算适合您的数据的指数曲线, 并返回描述该曲线的值数组",set1:"关系表达式 y = b*m^x 中已知的 y 值集合",set2:"关系表达式 y=b*m^x 中已知的 x 值集合",value1:"一个逻辑值，用于指定是否将常量 b 强制设为 1",value2:"一个逻辑值，用于指定是否返回附加回归统计值"}},LOGINV:{title:[{name:"LOGINV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"LOGINV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数累积分布函数的反函数值，此处的 ln(x) 是服从 value2 和 value3 的正态分布",value1:"与对数分布相关的概率",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差"}},"LOGNORM.DIST":{title:[{name:"LOGNORM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"LOGNORM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数分布函数，此处的 ln(x) 是含有 value2 与 value3 参数的正态分布",value1:"用来计算函数的值",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差",value4:"决定函数形式的逻辑值"}},"LOGNORM.INV":{title:[{name:"LOGNORM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"LOGNORM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数累积分布函数的反函数值，此处的 ln(x) 是服从参数 value2 和 value3 的正态分布",value1:"与对数分布相关的概率",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差"}},LOWER:{title:[{name:"LOWER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"LOWER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将一个文本字符串中的所有大写字母转换为小写字母",text:"要转换为小写字母的文本"}},MATCH:{title:[{name:"MATCH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"MATCH(",editor:!1},{name:"39",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"在 范围 单元格中搜索特定的项，然后返回该项在此区域中的相对位置",value1:"要在 区域 中匹配的值",area:"要搜索的单元格区域",value2:"数字 -1、0 或 1"}},MAX:{title:[{name:"MAX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MAX(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组值中的最大值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MDETERM:{title:[{name:"MDETERM(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"MDETERM(",editor:!1},{name:"A2:D5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个数组的矩阵行列式的值",array:"行数和列数相等的数值数组"}},MDURATION:{title:[{name:"MDURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"MDURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回假设面值 ￥100 的有价证券的 Macauley 修正期限",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的年收益率",value3:"年付息次数"}},MEDIAN:{title:[{name:"MEDIAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MEDIAN(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组已知数字的中值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MID:{title:[{name:"MID(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"MID(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中从指定位置开始的特定数目的字符，该数目由用户指定",text:"包含要提取字符的文本字符串",value1:"文本中要提取的第一个字符的位置",value2:"指定希望 MID 从文本中返回字符的个数"}},MIN:{title:[{name:"MIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MIN(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组值中的最小值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MINA:{title:[{name:"MINA(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MINA(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数列表中的最小值",value1:"任意值",value2:"任意值,个数介于1到255之间"}},MINUTE:{title:[{name:"MINUTE(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"MINUTE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值中的分钟。 分钟是一个介于 0 到 59 之间的整数",time:"一个时间值，其中包含要查找的分钟"}},MINVERSE:{title:[{name:"MINVERSE(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"MINVERSE(",editor:!1},{name:"A2:B3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数组中存储的矩阵的逆矩阵",array:"行数和列数相等的数值数组"}},MIRR:{title:[{name:"MIRR(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MIRR(",editor:!1},{name:"A2:A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一系列定期现金流的已修改内部收益率",array:"数组或对包含数字的单元格的引用",value1:"现金流中使用的资金支付的利率",value2:"将现金流再投资的收益率"}},MMULT:{title:[{name:"MMULT(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"MMULT(",editor:!1},{name:"A2:B3",editor:!1},{name:",",editor:!1},{name:"A5:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数组的矩阵乘积",array1:"要进行矩阵乘法运算的第一个数组",array2:"要进行矩阵乘法运算的第二个数组"}},MOD:{title:[{name:"MOD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MOD(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数相除的余数",value1:"要计算余数的被除数",value2:"除数"}},MODE:{title:[{name:"MODE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE(",editor:!1},{name:"A2:A7",editor:!1},{name:")",editor:!1}],content:{abstract:"回的数组或数据区域中出现频率最高或重复出现",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"MODE.MULT":{title:[{name:"MODE.MULT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE.MULT(",editor:!1},{name:"A2:A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据或数据区域中出现频率最高或重复出现的数值的垂直数组",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"MODE.SNGL":{title:[{name:"MODE.SNGL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE.SNGL(",editor:!1},{name:"A2:A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据或数据区域中出现频率最高或重复出现的数值的垂直数组",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MONTH:{title:[{name:"MONTH(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"MONTH(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回日期（以序列数表示）中的月份。 月份是介于 1（一月）到 12（十二月）之间的整数",date:"您尝试查找的月份的日期"}},MROUND:{title:[{name:"MROUND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MROUND(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回舍入到所需倍数的数字",value1:"要舍入的值",value2:"要舍入到的倍数"}},MULTINOMIAL:{title:[{name:"MULTINOMIAL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MULTINOMIAL(",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数和的阶乘与各参数阶乘乘积的比值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MUNIT:{title:[{name:"MUNIT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"MUNIT(",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定维度的单位矩阵",value:"指定要返回的单位矩阵的维度"}},N:{title:[{name:"N(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"N(",editor:!1},{name:"7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回转化为数值后的值",value:"要转换的值"}},NA:{title:[{name:"NA(",editor:!1},{name:")",editor:!1}],example:[{name:"NA(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 #N/A. 的错误值"}},"NEGBINOM.DIST":{title:[{name:"NEGBINOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"NEGBINOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回负二项式分布",value1:"失败的次数",value2:"成功次数的阈值",value3:"成功的概率",value4:"决定函数形式的逻辑值"}},NETWORKDAYS:{title:[{name:"NETWORKDAYS(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NETWORKDAYS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回参数 value1 和 value2 之间完整的工作日数值",value1:" 一个代表开始日期的日期",value2:" 一个代表终止日期的日期",value3:"不在工作日历中的一个或多个日期所构成的可选区域"}},"NETWORKDAYS.INTL":{title:[{name:"NETWORKDAYS.INTL(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NETWORKDAYS.INTL(",editor:!1},{name:"DATE(2006,1,1)",editor:!1},{name:",",editor:!1},{name:"DATE(2006,1,31)",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回两个日期之间的所有工作日数，使用参数指示哪些天是周末，以及有多少天是周末",date1:"一个代表开始日期的日期",date2:"一个代表终止日期的日期",value:"表示介于 日期1 和 日期2 之间但又不包括在所有工作日数中的周末日"}},NOMINAL:{title:[{name:"NOMINAL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"NOMINAL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"基于给定的实际利率和年复利期数，返回名义年利率",value1:"实际利率",value2:"每年的复利期数"}},"NORM.DIST":{title:[{name:"NORM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定平均值和标准偏差的正态分布函数",value1:"需要计算其分布的数值",value2:"分布的算术平均值",value3:"分布的标准偏差",value4:"确定函数形式的逻辑值"}},"NORM.INV":{title:[{name:"NORM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定平均值和标准偏差的正态累积分布函数的反函数值",value1:"对应于正态分布的概率",value2:"分布的算术平均值",value3:"分布的标准偏差"}},"NORM.S.DIST":{title:[{name:"NORM.S.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.S.DIST(",editor:!1},{name:"1.333333",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回标准正态分布函数",value1:"需要计算其分布的数值",value2:"决定函数形式的逻辑值"}},NOT:{title:[{name:"NOT(",editor:!1},{name:"逻辑函数",editor:!1},{name:")",editor:!1}],example:[{name:"NOT(",editor:!1},{name:"A2>100",editor:!1},{name:")",editor:!1}],content:{abstract:"函数会对其参数的值进行求反",logicfunc:"计算结果为 TRUE 或 FALSE 的任何值或表达式"}},NOW:{title:[{name:"NOW(",editor:!1},{name:")",editor:!1}],example:[{name:"NOW(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回当前日期和时间的序列号"}},NPER:{title:[{name:"NPER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"NPER(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:7},{name:",",editor:!1},{name:"TRUE",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回某项投资的总期数",value1:"各期利率",value2:"各期所应支付的金额，在整个年金期间保持不变",value3:"现值，或一系列未来付款的当前值的累积和",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},NPV:{title:[{name:"NPV(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NPV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"使用贴现率和一系列未来支出（负值）和收益（正值）来计算一项投资的净现值",value:"某一期间的贴现率",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},NUMBERVALUE:{title:[{name:"NUMBERVALUE(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[字符1]",editor:!0,index:3},{name:",",editor:!1},{name:"[字符2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NUMBERVALUE(",editor:!1},{name:"'2.500,27'",editor:!1},{name:",",editor:!1},{name:"','",editor:!0,index:3},{name:",",editor:!1},{name:"'.'",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"以与区域设置无关的方式将文本转换为数字",text:"要转换为数字的文本",character1:"用于分隔结果的整数和小数部分的字符",character2:" 用于分隔数字分组的字符"}},OCT2DEC:{title:[{name:"OCT2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"OCT2DEC(",editor:!1},{name:"54",editor:!1},{name:")",editor:!1}],content:{abstract:"将八进制数转换为十进制数",value:"要转换的八进制数"}},OCT2BIN:{title:[{name:"OCT2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OCT2BIN(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将八进制数转换为二进制数",value1:"要转换的八进制数",value2:"要使用的字符数"}},OCT2HEX:{title:[{name:"OCT2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OCT2HEX(",editor:!1},{name:"100",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将八进制数转换为十六进制数",value1:"要转换的八进制数",value2:"要使用的字符数"}},ODD:{title:[{name:"ODD(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ODD(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字向上舍入到的最接近的奇数",value:"要舍入的值"}},ODDFPRICE:{title:[{name:"ODDFPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"日期4",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDFPRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回首期付息日不固定（长期或短期）的面值 ￥100 的有价证券价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日",date4:"有价证券的首期付息日",value1:"有价证券的利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDFYIELD:{title:[{name:"ODDFYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"日期4",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDFYIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回首期付息日不固定（长期或短期）的面值 ￥100 的有价证券价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日",date4:"有价证券的首期付息日",value1:"有价证券的利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDLPRICE:{title:[{name:"ODDLPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDLPRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回末期付息日不固定的面值 ￥100 的有价证券（长期或短期）的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的末期付息日",value1:"有价证券的利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDLYIELD:{title:[{name:"ODDLYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDLYIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回末期付息日不固定的面值 ￥100 的有价证券（长期或短期）的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的末期付息日",value1:"有价证券的利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},OR:{title:[{name:"OR(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OR(",editor:!1},{name:"A2>1",editor:!1},{name:",",editor:!1},{name:"A2<100",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"函数的任意参数计算为 TRUE，则其返回 TRUE；如果其所有参数均计算机为 FALSE，则返回 FALSE",condition1:"第一个想要测试且计算结果可为 TRUE 或 FALSE 的条件",condition2:"其他想要测试且计算结果可为 TRUE 或 FALSE 的条件（最多 255 个条件）"}},PDURATION:{title:[{name:"PDURATION(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"PDURATION(",editor:!1},{name:"2.5%",editor:!1},{name:",",editor:!1},{name:"2000",editor:!1},{name:",",editor:!1},{name:"2200",editor:!1},{name:")",editor:!1}],content:{abstract:"返回投资到达指定值所需的期数",value1:"费率是指每期的利率",value2:"投资的现值",value3:"所需投资的未来值"}},PEARSON:{title:[{name:"PEARSON(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"PEARSON(",editor:!1},{name:"A3:A7",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回皮尔生(Pearson)乘积矩相关系数 r，这是一个范围在 -1.0 到 1.0 之间（包括 -1.0 和 1.0 在内）的无量纲指数，反映了两个数据集合之间的线性相关程度",array:"自变量集合",array2:"因变量集合"}},PERCENTILE:{title:[{name:"PERCENTILE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 k 个百分点的值",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},"PERCENTILE.EXC":{title:[{name:"PERCENTILE.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE.EXC(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 K 个百分点的值，其中 k 为 0 到 1 之间的值，不包含 0 和 1",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},"PERCENTILE.INC":{title:[{name:"PERCENTILE.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE.INC(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 K 个百分点的值，K 为 0 到 1 之间的百分点值，包含 0 和 1",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},PERCENTRANK:{title:[{name:"PERCENTRANK(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将某个数值在数据集中的排位作为数据集的百分比值返回，此处的百分比值的范围为 0 到 1",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},"PERCENTRANK.EXC":{title:[{name:"PERCENTRANK.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK.EXC(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个数值在一个数据集中的百分比（0 到 1，不包括 0 和 1）排位",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},"PERCENTRANK.INC":{title:[{name:"PERCENTRANK.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK.INC(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将某个数值在数据集中的排位作为数据集的百分比值返回，此处的百分比值的范围为 0 到 1（含 0 和 1）",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},PERMUT:{title:[{name:"PERMUT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PERMUT(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回可从数字对象中选择的给定数目对象的排列数",value1:"表示对象个数的整数",value2:"表示每个排列中对象个数的整数"}},PERMUTATIONA:{title:[{name:"PERMUTATIONA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PERMUTATIONA(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回可从对象总数中选择的给定数目对象（含重复）的排列数",value1:"表示对象总数的整数",value2:"表示每个排列中对象数目的整数"}},PHI:{title:[{name:"PHI(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PHI(",editor:!1},{name:"0.75",editor:!1},{name:")",editor:!1}],content:{abstract:"返回标准正态分布的密度函数值",value:"所需的标准正态分布密度值"}},PI:{title:[{name:"PI(",editor:!1},{name:")",editor:!1}],example:[{name:"PI(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字 3.14159265358979（数学常量 pi），精确到 15 个数字"}},POISSON:{title:[{name:"POISSON(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"POISSON(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回泊松分布",value1:"事件数",value2:"期望值",value3:"一逻辑值，确定所返回的概率分布的形式"}},"POISSON.DIST":{title:[{name:"POISSON.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"POISSON.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回泊松分布",value1:"事件数",value2:"期望值",value3:"一逻辑值，确定所返回的概率分布的形式"}},POWER:{title:[{name:"POWER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"POWER(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字乘幂的结果",value1:"基数。 可为任意实数",value2:"基数乘幂运算的指数"}},PPMT:{title:[{name:"PPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"PPMT(",editor:!1},{name:"A11",editor:!1},{name:",",editor:!1},{name:"A12",editor:!1},{name:",",editor:!1},{name:"10",editor:!1},{name:",",editor:!1},{name:"A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回根据定期固定付款和固定利率而定的投资在已知期间内的本金偿付额",value1:"各期利率",value2:"指定期数，该值必须在 1 到 value3 范围内",value3:"年金的付款总期数",value4:"现值即一系列未来付款当前值的总和",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},PRICE:{title:[{name:"PRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"PRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期付息的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},PRICEDISC:{title:[{name:"PRICEDISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PRICEDISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回折价发行的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的贴现率",value2:"面值 ￥100 的有价证券的清偿价值"}},PRICEMAT:{title:[{name:"PRICEMAT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"PRICEMAT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期付息的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日，以时间序列号表示",value1:"有价证券在发行日的利率",value2:"有价证券的年收益率"}},PROB:{title:[{name:"PROB(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"PROB(",editor:!1},{name:"A3:A6",editor:!1},{name:",",editor:!1},{name:"B3:B6",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:5},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"返回区域中的数值落在指定区间内的概率",area:"具有各自相应概率值的 x 数值区域",array:"与 区域 中的值相关联的一组概率值",value1:"要计算其概率的数值下界",value2:"要计算其概率的可选数值上界"}},PRODUCT:{title:[{name:"PRODUCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"PRODUCT(",editor:!1},{name:"A2:A4",editor:!1},{name:")",editor:!1}],content:{abstract:"函数将以参数形式给出的所有数字相乘, 并返回该产品",value1:"要相乘的第一个数字或范围",value2:"要相乘的其他数字或单元格区域，最多可以使用 255 个参数"}},PROPER:{title:[{name:"PROPER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"PROPER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本字符串的首字母以及文字中任何非字母字符之后的任何其他字母转换成大写",text:"用引号括起来的文本、返回文本值的公式，或者对包含要进行部分大写转换文本的单元格的引用"}},PV:{title:[{name:"PV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"PV(",editor:!1},{name:"A3/12",editor:!1},{name:",",editor:!1},{name:"12*A4",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:",",editor:!1},{name:"0",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"用于根据固定利率计算贷款或投资的现值",value1:"各期利率",value2:"年金的付款总期数",value3:"每期的付款金额，在年金周期内不能更改",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},QUARTILE:{title:[{name:"QUARTILE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的四分位点",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},"QUARTILE.EXC":{title:[{name:"QUARTILE.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE.EXC(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"基于 0 到 1 之间（不包括 0 和 1）的百分点值返回数据集的四分位数",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},"QUARTILE.INC":{title:[{name:"QUARTILE.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE.INC(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"根据 0 到 1 之间的百分点值（包含 0 和 1）返回数据集的四分位数",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},QUOTIENT:{title:[{name:"QUOTIENT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"QUOTIENT(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回除法的整数部分",value1:"被除数",value2:"除数"}},RADIANS:{title:[{name:"RADIANS(",editor:!1},{name:"角度",editor:!1},{name:")",editor:!1}],example:[{name:"RADIANS(",editor:!1},{name:"270",editor:!1},{name:")",editor:!1}],content:{abstract:"将度数转换为弧度",tangle:"要转换的以度数表示的角度"}},RAND:{title:[{name:"RAND(",editor:!1},{name:")",editor:!1}],example:[{name:"RAND(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回了一个大于等于 0 且小于 1 的平均分布的随机实数"}},RANDBETWEEN:{title:[{name:"RANDBETWEEN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"RANDBETWEEN(",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"100",editor:!1},{name:")",editor:!1}],content:{abstract:"返回位于两个指定数之间的一个随机整数。 每次计算工作表时都将返回一个新的随机整数",value1:"将返回的最小整数",value2:"将返回的最大整数"}},RANK:{title:[{name:"RANK(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位。 数字的排位是其相对于列表中其他值的大小",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},"RANK.AVG":{title:[{name:"RANK.AVG(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK.AVG(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位：数字的排位是其大小与列表中其他值的比值；如果多个值具有相同的排位，则将返回平均排位",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},"RANK.EQ":{title:[{name:"RANK.EQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK.EQ(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位。 其大小与列表中其他值相关；如果多个值具有相同的排位，则返回该组值的最高排位",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},RATE:{title:[{name:"RATE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"RATE(",editor:!1},{name:"A2*12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每期年金的利率",value1:"年金的付款总期数",value2:"每期的付款金额，在年金周期内不能更改",value3:"现值即一系列未来付款当前值的总和",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},RECEIVED:{title:[{name:"RECEIVED(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"RECEIVED(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一次性付息的有价证券到期收回的金额",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的投资额",value2:"有价证券的贴现率"}},REPLACE:{title:[{name:"REPLACE(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:")",editor:!1}],example:[{name:"REPLACE(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"'*'",editor:!1},{name:")",editor:!1}],content:{abstract:"根据指定的字符数，REPLACE 将部分文本字符串替换为不同的文本字符串",text1:"要替换其部分字符的文本",value1:"文本1中要替换为 文本2 的字符位置",value2:"文本1 中希望 REPLACE 使用 文本2 来进行替换的字符数",text2:"将替换 文本1 中字符的文本"}},REPT:{title:[{name:"REPT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"REPT(",editor:!1},{name:"'*_'",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本重复一定次数",text:"需要重复显示的文本",value:"用于指定文本重复次数的正数"}},RIGHT:{title:[{name:"RIGHT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"RIGHT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"根据所指定的字符数返回文本字符串中最后一个或多个字符",text:"包含要提取字符的文本字符串",value:"指定希望 RIGHT 提取的字符数"}},ROMAN:{title:[{name:"ROMAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ROMAN(",editor:!1},{name:"499",editor:!1},{name:",",editor:!1},{name:"0",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将阿拉伯数字转换为文字形式的罗马数字",value1:"需要转换的阿拉伯数字",value2:"一个数字, 指定所需的罗马数字类型"}},ROUND:{title:[{name:"ROUND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUND(",editor:!1},{name:"2.15",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"函数将数字四舍五入到指定的位数",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROUNDDOWN:{title:[{name:"ROUNDDOWN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUND(",editor:!1},{name:"3.2",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"朝着零的方向将数字进行向下舍入",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROUNDUP:{title:[{name:"ROUNDUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUNDUP(",editor:!1},{name:"2.15",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"朝着远离 0（零）的方向将数字进行向上舍入",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROW:{title:[{name:"ROW(",editor:!1},{name:"区域",editor:!1},{name:")",editor:!1}],example:[{name:"ROW(",editor:!1},{name:"C10",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用的行号",area:"需要得到其行号的单元格或单元格区域"}},ROWS:{title:[{name:"ROWS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"ROW(",editor:!1},{name:"C1:E4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用或数组的行数",area:"需要得到其行数的数组、数组公式或对单元格区域的引用"}},RRI:{title:[{name:"RRI(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"RRI(",editor:!1},{name:"96",editor:!1},{name:",",editor:!1},{name:"10000",editor:!1},{name:",",editor:!1},{name:"11000",editor:!1},{name:")",editor:!1}],content:{abstract:"返回投资增长的等效利率",value1:"投资的总期数",value2:"投资的现值",value3:"投资的未来值"}},RSQ:{title:[{name:"RSQ(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"RSQ(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"通过 known_y's 和 known_x's 中的数据点返回皮尔生乘积矩相关系数的平方",area1:"数组或数据点区域",area2:"数组或数据点区域"}},SEARCH:{title:[{name:"SEARCH(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SEARCH(",editor:!1},{name:"'e'",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"可在第二个文本字符串中查找第一个文本字符串，并返回第一个文本字符串的起始位置的编号，该编号从第二个文本字符串的第一个字符算起",text1:"要查找的文本",text2:"要在其中搜索 文本1 参数的值的文本",value:"文本2 参数中从之开始搜索的字符编号"}},SEC:{title:[{name:"SEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SEC(",editor:!1},{name:"45",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的正割值",value:"需要对其进行正割的角度 "}},SECH:{title:[{name:"SECH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SECH(",editor:!1},{name:"45",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的双曲正割值",value:"对应所需双曲正割值的角度，以弧度表示"}},SECOND:{title:[{name:"SECOND(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"SECOND(",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值的秒数。 秒数是 0（零）到 59 范围内的整数",time:"一个时间值，其中包含要查找的秒数"}},SERIESSUM:{title:[{name:"SERIESSUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"SERIESSUM(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"A4:A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回基于SERIES公式的幂级数之和",value1:"幂级数的输入值",value2:"value1 的首项乘幂",value3:"级数中每一项的乘幂 n 的步长增加值",array:"与 value1 的每个连续乘幂相乘的一组系数"}},SHEET:{title:[{name:"SHEET(",editor:!1},{name:"[值]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"SHEET(",editor:!1},{name:"Table1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用工作表的工作表编号",value:"需要工作表编号的工作表或引用的名称"}},SHEETS:{title:[{name:"SHEETS(",editor:!1},{name:"[引用]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"SHEETS(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用中的工作表数",reference:"引用是要了解其包含的工作表数的引用"}},SIGN:{title:[{name:"SIGN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SIGN(",editor:!1},{name:"10",editor:!1},{name:")",editor:!1}],content:{abstract:"确定数字的符号",value:"任意实数"}},SIN:{title:[{name:"SIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SIN(",editor:!1},{name:"PI()",editor:!1},{name:")",editor:!1}],content:{abstract:"返回已知角度的正弦",value:"需要求正弦的角度，以弧度表示"}},SINH:{title:[{name:"SINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SINH(",editor:!1},{name:"0.0342*1.03",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双曲正弦",value:"任意实数"}},SKEW:{title:[{name:"SKEW(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SKEW(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回分布的偏斜度",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"SKEW.P":{title:[{name:"SKEW.P(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SKEW(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回基于样本总体的分布不对称度：表明分布相对于平均值的不对称程度",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},SLN:{title:[{name:"SLN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"SLN(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个期间内的资产的直线折旧",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数"}},SLOPE:{title:[{name:"SLOPE(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"集合2",editor:!1},{name:")",editor:!1}],example:[{name:"SLOPE(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回通过 集合1 和 集合2 中数据点的线性回归线的斜率",set1:"数字型因变量数据点数组或单元格区域",set2:"自变量数据点集合"}},SMALL:{title:[{name:"SMALL(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SMALL(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集中的第 k 个最小值",area:"需要找到第 k 个最小值的数组或数值数据区域",value:"要返回的数据在数组或数据区域里的位置"}},SQRTPI:{title:[{name:"SQRTPI(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SQRTPI(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某数与 pi 的乘积的平方根",value:"与 pi 相乘的数"}},STANDARDIZE:{title:[{name:"STANDARDIZE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"STANDARDIZE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由 value2 和 value3 表示的分布的规范化值",value1:"需要进行正态化的数值",value2:"分布的算术平均值",value3:"分布的标准偏差"}},STDEVA:{title:[{name:"STDEVA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVA(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据样本估计标准偏差",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},STDEVP:{title:[{name:"STDEVP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVP(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据作为参数给定的整个总体计算标准偏差",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},STDEVPA:{title:[{name:"STDEVPA(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVPA(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据作为参数（包括文字和逻辑值）给定的整个总体计算标准偏差",value1:"任意值",value2:"任意值,个数介于1到255之间"}},STEYX:{title:[{name:"STEYX(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"STEYX(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回通过线性回归法预测每个 x 的 y 值时所产生的标准误差",area1:"因变量数据点数组或区域",area2:"自变量数据点数组或区域"}},SUBSTITUTE:{title:[{name:"SUBSTITUTE(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"文本3",editor:!1},{name:",",editor:!1},{name:"[事件]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"SUBSTITUTE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"'销售额'",editor:!1},{name:",",editor:!1},{name:"'成本'",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在文本字符串中用 文本3 替换 文本2",text1:"需要替换其中字符的文本，或对含有文本（需要替换其中字符）的单元格的引用",text2:"需要替换的文本",text3:"用于替换 文本2 的文本",event:"指定要用 文本3 替换 文本2 的事件"}},SUBTOTAL:{title:[{name:"SUBTOTAL(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"[区域2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUBTOTAL(",editor:!1},{name:"9",editor:!1},{name:",",editor:!1},{name:"A2:A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中的分类汇总",value:"数字 1-11 或 101-111，用于指定要为分类汇总使用的函数",area1:"要对其进行分类汇总计算的第一个命名区域或引用",area2:"要对其进行分类汇总计算的第 2 个至第 254 个命名区域或引用"}},SUMIF:{title:[{name:"SUMIF(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"条件",editor:!1},{name:",",editor:!1},{name:"[区域2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUMIF(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"'>160000'",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"对 范围 中符合指定条件的值求和",area1:"要按条件计算的单元格区域",condition:"定义哪些单元格将被添加的数字、表达式、单元格引用、文本或函数形式的条件",area2:"要添加的实际单元格 (如果要添加的单元格不在range参数中指定的单元格)"}},SUMIFS:{title:[{name:"SUMIFS(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[区域2,条件2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUMIFS(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"'>160000'",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"对 范围 中符合指定条件的值求和",area1:"要按条件计算的单元格区域",condition1:"定义哪些单元格将被添加的数字、表达式、单元格引用、文本或函数形式的条件",condition2:"其他的区域,条件对"}},SUMPRODUCT:{title:[{name:"SUMPRODUCT(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"[array2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUMPRODUCT(",editor:!1},{name:"A1:D1",editor:!1},{name:",",editor:!1},{name:"A2:D2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"对给定数组中的相应组件执行简单的算术运算, 并返回这些计算的和",array1:"其相应元素需要进行相乘并求和的第一个数组参数",array2:" 2 到 255 个数组参数，其相应元素需要进行相乘并求和"}},SUMSQ:{title:[{name:"SUMSQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUMSQ(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数的平方和",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},SUMX2MY2:{title:[{name:"SUMX2MY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMX2MY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应数值的平方差之和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SUMX2PY2:{title:[{name:"SUMX2PY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMX2PY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应值的平方和之和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SUMXMY2:{title:[{name:"SUMXMY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMXMY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应数值之差的平方和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SWITCH:{title:[{name:"SWITCH(",editor:!1},{name:"表达式",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"结果1",editor:!1},{name:",",editor:!1},{name:"[值2,结果2,...]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"SWITCH(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"'星期天'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数根据值列表计算一个值（称为表达式），并返回与第一个匹配值对应的结果",formula:"用来比较的值",value1:"任意值",result1:"值1 与 表达式 匹配后返回的值",result2:"其他值与结果对,最多125个"}},SYD:{title:[{name:"SYD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"SYD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在指定期间内资产按年限总和折旧法计算的折旧",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数",value4:"期间，必须与 value3 使用相同的单位"}},T:{title:[{name:"T(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"T(",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回值引用的文字",value:"要测试的值"}},TAN:{title:[{name:"TAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TAN(",editor:!1},{name:"0.785",editor:!1},{name:")",editor:!1}],content:{abstract:"返回已知角度的正切",value:"要求正切的角度，以弧度表示"}},TANH:{title:[{name:"TANH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TAN(",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双曲正切",value:"任意实数"}},TBILLEQ:{title:[{name:"TBILLEQ(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLEQ(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回国库券的等效收益率",date1:"国库券的结算日",date2:"国库券的到期日",value:"国库券的贴现率"}},TBILLPRICE:{title:[{name:"TBILLPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLPRICE(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回面值 ￥100 的国库券的价格",date1:"国库券的结算日",date2:"国库券的到期日",value:"国库券的贴现率"}},TBILLYIELD:{title:[{name:"TBILLYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLYIELD(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回国库券的收益率",date1:"国库券的结算日",date2:"国库券的到期日",value:"面值 ￥100 的国库券的价格"}},"T.DIST":{title:[{name:"T.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"T.DIST(",editor:!1},{name:"60",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回学生的左尾 t 分布。 t 分布用于小型样本数据集的假设检验",value1:"需要计算分布的数值",value2:"一个表示自由度数的整数",value3:"决定函数形式的逻辑值"}},"T.DIST.RT":{title:[{name:"T.DIST.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.DIST.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"t 分布用于小型样本数据集的假设检验",value1:"需要计算分布的数值",value2:"一个表示自由度数的整数"}},TEXT:{title:[{name:"TEXT(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TEXT(",editor:!1},{name:"1234.567",editor:!1},{name:",",editor:!1},{name:"'$#,##0.00'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数可通过格式代码向数字应用格式，进而更改数字的显示方式",value:"要转换为文本的数值",text:"一个文本字符串，定义要应用于所提供值的格式"}},TIME:{title:[{name:"TIME(",editor:!1},{name:"时",editor:!1},{name:",",editor:!1},{name:"分",editor:!1},{name:",",editor:!1},{name:"秒",editor:!1},{name:")",editor:!1}],example:[{name:"TIME(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"B2",editor:!1},{name:",",editor:!1},{name:"C2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回特定时间的十进制数字",hour:"0（零）到 32767 之间的数字，代表小时",minute:" 0 到 32767 之间的数字，代表分钟",second:"0 到 32767 之间的数字，代表秒"}},TIMEVALUE:{title:[{name:"TIMEVALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TIMEVALUE(",editor:!1},{name:"'2:24 AM'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由文本字符串表示的时间的十进制数字",text:"一个文本字符串，代表以任一 Microsoft Excel 时间格式表示的时间"}},"T.INV":{title:[{name:"T.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.INV(",editor:!1},{name:"0.75",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回学生的 t 分布的左尾反函数",value1:"与学生的 t 分布相关的概率",value2:"与学生的 t 分布相关的概率"}},TODAY:{title:[{name:"TODAY(",editor:!1},{name:")",editor:!1}],example:[{name:"TODAY(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回当前日期的序列号"}},TRANSPOSE:{title:[{name:"TRANSPOSE(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"TRANSPOSE(",editor:!1},{name:"A1:F6",editor:!1},{name:")",editor:!1}],content:{abstract:"可返回转置单元格区域，即将行单元格区域转置成列单元格区域，反之亦然",array:"要转置的工作表上的数组或单元格区域"}},TREND:{title:[{name:"TREND(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"TREND(",editor:!1},{name:"E2:E13",editor:!1},{name:",",editor:!1},{name:"D2:D13",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"函数返回沿线性趋势的值",set1:"关系 y = mx + b 中已知道的 y 值集",set2:"在关系 y = mx + b 中可能已经知道的一组可选 x 值",value1:"要返回其趋势的新 x 值返回对应的 y 值",value2:"一个逻辑值, 指定是否强制常量 b 等于0"}},TRIMMEAN:{title:[{name:"TRIMMEAN(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TRIMMEAN(",editor:!1},{name:"A2:A12",editor:!1},{name:",",editor:!1},{name:"0.2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集的内部平均值",array:"需要进行整理并求平均值的数组或数值区域",value:"从计算中排除数据点的分数"}},TRUE:{title:[{name:"TRUE(",editor:!1},{name:")",editor:!1}],example:[{name:"TRUE(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回逻辑值 TRUE"}},TRUNC:{title:[{name:"TRUNC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"TRUNC(",editor:!1},{name:"8.9",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字的小数部分截去，返回整数",value1:"需要截尾取整的数字",value2:"用于指定取整精度的数字,默认为零"}},"T.TEST":{title:[{name:"T.TEST(",editor:!1},{name:"数据集1",editor:!1},{name:",",editor:!1},{name:"数据集2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.TEST(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"B2:B10",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回与学生 t-检验相关的概率",dataset1:"第一个数据集",dataset2:"第二个数据集",value1:"指定分布尾数",value2:"要执行的 t 检验的类型"}},TYPE:{title:[{name:"TYPE(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"TYPE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数值的类型",value:"需要返回值类型的值"}},UNICHAR:{title:[{name:"UNICHAR(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"UNICHAR(",editor:!1},{name:"32",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定数值引用的 Unicode 字符",value:"代表字符的 Unicode 数字"}},UNICODE:{title:[{name:"UNICODE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"UNICODE(",editor:!1},{name:"'B'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于文本的第一个字符的数字（代码点）",text:"要获得其 Unicode 值的字符"}},UNIQUE:{title:[{name:"UNIQUE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:3},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"UNIQUE(",editor:!1},{name:"D2:D11",editor:!1},{name:")",editor:!1}],content:{abstract:"函数返回列表或范围中的一系列唯一值",array:"要从其中返回唯一值的范围或数组",value1:"为逻辑值，用于指示比较方式；By row = FALSE 或省略；By column = TRUE",value2:"为逻辑值：仅返回出现一次的唯一值 = TRUE；包含所有唯一值 = FALSE 或省略"}},UPPER:{title:[{name:"UPPER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"UPPER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本转换为大写字母",text:"要转换为大写字母的文本。 文本可以是引用或文本字符串"}},VALUE:{title:[{name:"VALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"VALUE(",editor:!1},{name:"'$1,000'",editor:!1},{name:")",editor:!1}],content:{abstract:"将表示数字的文本字符串转换为数字",text:"用引号括起来的文本或包含要转换文本的单元格的引用"}},VAR:{title:[{name:"VAR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于给定样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},"VAR.P":{title:[{name:"VAR.P(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR.P(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于整个样本总体的方差（忽略样本总体中的逻辑值和文本）",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},VARA:{title:[{name:"VARA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VARA(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于给定样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},"VAR.S":{title:[{name:"VAR.S(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR.S(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"估算基于样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},VDB:{title:[{name:"VDB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:11},{name:",",editor:!1},{name:"[value5]",editor:!0,index:13},{name:")",editor:!1}],example:[{name:"VDB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"0.875",editor:!1},{name:",",editor:!1},{name:"1.5",editor:!0,index:11},{name:")",editor:!1}],content:{abstract:"使用双倍余额递减法或其他指定方法，返回一笔资产在给定期间（包括部分期间）内的折旧值",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数",date1:"您要计算折旧的起始时期",date2:"您要计算折旧的终止时期",value4:"余额递减速率",value5:"逻辑值，指定当折旧值大于余额递减计算值时，是否转用直线折旧法"}},VLOOKUP:{title:[{name:"VLOOKUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"VLOOKUP(",editor:!1},{name:"B3",editor:!1},{name:",",editor:!1},{name:"B2:E7",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在表格或区域中按行查找项目",value1:"要查找的值",area1:"搜索 value1 和返回值的单元格区域",value2:"包含返回值的列号",value3:"一个逻辑值，该值指定希望 VLOOKUP 查找近似匹配还是精确匹配"}},WEEKDAY:{title:[{name:"WEEKDAY(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"WEEKDAY(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回对应于某个日期的一周中的第几天",value1:"一个序列号，代表尝试查找的那一天的日期",value2:"用于确定返回值类型的数字"}},WEEKNUM:{title:[{name:"WEEKNUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"WEEKNUM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回特定日期的周数",value1:"代表一周中的日期",value2:"一数字，确定星期从哪一天开始"}},WEIBULL:{title:[{name:"WEIBULL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"WEIBULL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Weibull 分布",value1:"用来计算函数的值",value2:"分布参数",value3:"分布参数",value4:"确定函数的形式"}},WORKDAY:{title:[{name:"WORKDAY(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"[数组]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"WORKDAY(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在某日期（起始日期）之前或之后、与该日期相隔指定工作日的某一日期的日期值",date:"一个代表开始日期的日期",value:"日期 之前或之后不含周末及节假日的天数",array:"一个可选列表，其中包含需要从工作日历中排除的一个或多个日期，例如各种省/市/自治区和国家/地区的法定假日及非法定假日"}},"WORKDAY.INTL":{title:[{name:"WORKDAY.INTL(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"[数组]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"WORKDAY.INTL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定的若干个工作日之前或之后的日期的序列号（使用自定义周末参数）",date:"开始日期",value:"日期 之前或之后不含周末及节假日的天数",array:"指示一周中属于周末的日子和不作为工作日的日子"}},XIRR:{title:[{name:"XIRR(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"XIRR(",editor:!1},{name:"A3:A7",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:",",editor:!1},{name:"0.1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一组不一定定期发生的现金流的内部收益率",array1:"与 array2 中的支付时间相对应的一系列现金流",array2:"与现金流支付相对应的支付日期表",value:"对函数 XIRR 计算结果的估计值"}},XNPV:{title:[{name:"XNPV(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"XNPV(",editor:!1},{name:".09",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一组现金流的净现值，这些现金流不一定定期发生",value:"对函数 XIRR 计算结果的估计值",array1:"与 array2 中的支付时间相对应的一系列现金流",array2:"与现金流支付相对应的支付日期表"}},XOR:{title:[{name:"XOR(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"XOR(",editor:!1},{name:"(3>0",editor:!1},{name:",",editor:!1},{name:"2<9",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回所有参数的逻辑异或",condition1:"计算值为TRUE或FALSE",condition2:"要检验的 1 至 254 个条件，可为 TRUE 或 FALSE，且可为逻辑值、数组或引用"}},YEAR:{title:[{name:"YEAR(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"YEAR(",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于某个日期的年份",date:"要查找的年份的日期"}},YEARFRAC:{title:[{name:"YEARFRAC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"YEARFRAC(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"可计算两个日期（日期1 和 日期2）之间的天数",date1:"一个代表开始日期的日期",date2:"一个代表终止日期的日期"}},YIELD:{title:[{name:"YIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"YIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期支付利息的债券的收益",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},YIELDDISC:{title:[{name:"YIELDDISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"YIELDDISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回折价发行的有价证券的年收益率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的价格（按面值为 ￥100 计算）",value2:"面值 ￥100 的有价证券的清偿价值"}},YIELDMAT:{title:[{name:"YIELDMAT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"YIELDMAT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期付息的有价证券的年收益率",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日，以时间序列号表示",value1:"有价证券在发行日的利率",value2:"有价证券的价格"}},"Z.TEST":{title:[{name:"Z.TEST(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"Z.TEST(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回 z 检验的单尾 P 值",area:"用来检验 x 的数组或数据区域",value1:"要测试的值",value2:"总体（已知）标准偏差。 如果省略，则使用样本标准偏差"}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=i(1),o=i(3),l=i(6),s=i(21),d=i(4),c=i(5),u=(a=i(112))&&a.__esModule?a:{default:a};function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function f(e,t,i){return t&&h(e.prototype,t),i&&h(e,i),e}var v=10;var p=function(){function e(t,i,a){var o=this;m(this,e),this.data=t,this._selector=i,this.sheet=a,this.l=(0,n.h)("div","".concat(r.cssPrefix,"-selector-box-l")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.r=(0,n.h)("div","".concat(r.cssPrefix,"-selector-box-r")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.t=(0,n.h)("div","".concat(r.cssPrefix,"-selector-box-t")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.b=(0,n.h)("div","".concat(r.cssPrefix,"-selector-box-b")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.boxinner=(0,n.h)("div","".concat(r.cssPrefix,"-selector-boxinner")).children(this.b,this.t,this.r,this.l),this.selectorMove=new u.default(this.boxinner,t,a,i),this.areaEl=(0,n.h)("div","".concat(r.cssPrefix,"-selector-area")).child(this.boxinner).hide(),this.clipboardEl=(0,n.h)("div","".concat(r.cssPrefix,"-selector-clipboard")).hide(),this.autofillEl=(0,n.h)("div","".concat(r.cssPrefix,"-selector-autofill")).hide(),this.el=(0,n.h)("div","".concat(r.cssPrefix,"-selector")).css("z-index","".concat(v)).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),v+=1}return f(e,[{key:"moveEvent",value:function(e){var t=this,i=this.data,a=this._selector,n=this.sheet,r=null,u=i.selector.range,m=u.sri,h=u.sci,f=u.eri,v=u.eci,p=u.w,g=u.h,y=new o.CellRange(m,h,f,v,p,g),b=-1;(0,l.mouseMoveUp)(window,(function(l){var u=t.sheet.selectors;n.container.css("pointer-events","none");for(var m=0;m<u.length;m++){u[m].selector.setBoxinner("none")}var h,f,v=i.getCellRectByXY(l.layerX,l.layerY),x=v.ri,A=v.ci;if(-1!==x&&-1!==A){var w=t.sheet.editor.pos,E=t.sheet.editor.editorText.getText(),C=(0,d.cuttingByPos)(E,w-1,!0);E.length>w-1&&(C+=(0,d.cuttingByPosEnd)(E,w-1));for(var T=0;T<u.length;T++){var O=u[T],S=O.className,R=O.erpx;if(R===C&&S===a.className+" clear_selector"){if(r=r||O,-1!==R.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var k=R.split(":"),I=(0,c.expr2xy)(k[0]),P=(0,c.expr2xy)(k[1]);(y=new o.CellRange(I[1],I[0],P[1],P[0],p,g)).move(x,A);var D=i.getMoveRect(y);r.selector.range=y,r.selector.setMove(D)}else r.selector.set(x,A,!0);break}if(R!==C&&S===a.className+" clear_selector"){if(b=-1!==b?b:(h=E,f=O.erpx,h.lastIndexOf(f)),t.sheet.editor.setCursorPos(b+O.erpx.length),r=r||O,-1!==O.erpx.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var M=R.split(":"),N=(0,c.expr2xy)(M[0]),_=(0,c.expr2xy)(M[1]);(y=new o.CellRange(N[1],N[0],_[1],_[0],p,g)).move(x,A);var L=i.getMoveRect(y);r.selector.range=y,r.selector.setMove(L)}else r.selector.set(x,A,!0);break}}r&&(r.selector.setCss(r.color,!1),s.lockCells.call(t.sheet,e,r,(0,d.isAbsoluteValue)(r.erpx),b))}}),(function(){var e=t.sheet.selectors;n.container.css("pointer-events","auto");for(var i=0;i<e.length;i++){e[i].selector.setBoxinner("all")}b=-1,r&&r.selector&&r.selector.setCss(r.color,!0),r=null}))}},{key:"setBoxinner",value:function(e){this.l.css("pointer-events",e),this.r.css("pointer-events",e),this.t.css("pointer-events",e),this.b.css("pointer-events",e),this.selectorMove.l.css("pointer-events",e),this.selectorMove.r.css("pointer-events",e),this.selectorMove.t.css("pointer-events",e),this.selectorMove.b.css("pointer-events",e)}},{key:"setCss",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t?this.areaEl.css("border","2px dashed ".concat(e)):this.areaEl.css("border","2px solid ".concat(e)),this.el.css("z-index","-1")}},{key:"setOffset",value:function(e){return this.el.offset(e).show(),this}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"setAreaOffset",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.areaEl.offset({width:a-3+.8,height:n-3+.8,left:t-.8,top:i-.8}).show()}},{key:"setClipboardOffset",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.clipboardEl.offset({left:t,top:i,width:a-5,height:n-5})}},{key:"showAutofill",value:function(e){var t=e.left,i=e.top,a=e.width,n=e.height;this.autofillEl.offset({width:a-3,height:n-3,left:t,top:i}).show()}},{key:"hideAutofill",value:function(){this.autofillEl.hide()}},{key:"showClipboard",value:function(){this.clipboardEl.show()}},{key:"hideClipboard",value:function(){this.clipboardEl.hide()}}]),e}();function g(e){var t=this.data,i=e.left,a=e.top,n=e.width,r=e.height,o=e.scroll,l=e.l,s=e.t,d=t.freezeTotalWidth(),c=t.freezeTotalHeight(),u=i-d;d>l&&(u-=o.x);var m=a-c;return c>s&&(m-=o.y),{left:u,top:m,width:n,height:r}}function y(e){var t=this.data,i=e.left,a=e.width,n=e.height,r=e.l,o=e.t,l=e.scroll,s=t.freezeTotalWidth(),d=i-s;return s>r&&(d-=l.x),{left:d,top:o,width:a,height:n}}function b(e){var t=this.data,i=e.top,a=e.width,n=e.height,r=e.l,o=e.t,l=e.scroll,s=t.freezeTotalHeight(),d=i-s;return s>o&&(d-=l.y),{left:r,top:d,width:a,height:n}}function x(e){this.br.setAreaOffset(g.call(this,e))}function A(e){this.tl.setAreaOffset(e)}function w(e){this.t.setAreaOffset(y.call(this,e))}function E(e){this.l.setAreaOffset(b.call(this,e))}function C(e){this.l.setClipboardOffset(b.call(this,e))}function T(e){this.br.setClipboardOffset(g.call(this,e))}function O(e){this.tl.setClipboardOffset(e)}function S(e){this.t.setClipboardOffset(y.call(this,e))}function R(e){x.call(this,e),A.call(this,e),w.call(this,e),E.call(this,e)}function k(e){T.call(this,e),O.call(this,e),S.call(this,e),C.call(this,e)}var I=function(){function e(t,i,a){m(this,e),this.data=t,this.className=a,this.br=new p(t,this,i),this.t=new p(t,this,i),this.l=new p(t,this,i),this.tl=new p(t,this,i),this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=(0,n.h)("div","".concat(r.cssPrefix,"-selectors")).children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),this.lastri=-1,this.lastci=-1,v+=1}return f(e,[{key:"setCss",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.br.setCss(e,t),this.t.setCss(e,t),this.l.setCss(e,t),this.tl.setCss(e,t)}},{key:"hide",value:function(){this.el.hide()}},{key:"resetOffset",value:function(){var e=this.data,t=this.tl,i=this.t,a=this.l,n=this.br,r=e.freezeTotalHeight(),o=e.freezeTotalWidth();r>0||o>0?(t.setOffset({width:o,height:r}),i.setOffset({left:o,height:r}),a.setOffset({top:r,width:o}),n.setOffset({left:o,top:r})):(t.hide(),i.hide(),a.hide(),n.setOffset({left:0,top:0}))}},{key:"resetAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();R.call(this,e),k.call(this,t),this.resetOffset()}},{key:"resetBRTAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();x.call(this,e),w.call(this,e),T.call(this,t),S.call(this,t),this.resetOffset()}},{key:"resetSelectorBRLAreaOffset",value:function(e){var t=this.data.getMoveRect(e),i=this.data.getClipboardRect();x.call(this,t),E.call(this,t),T.call(this,i),C.call(this,i),this.resetOffset()}},{key:"resetBRLAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();x.call(this,e),E.call(this,e),T.call(this,t),C.call(this,t),this.resetOffset()}},{key:"set",value:function(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=this.data,n=a.calSelectedRangeByStart(e,t),r=n.sri,o=n.sci;if(i){var l=e,s=t;e<0&&(l=0),t<0&&(s=0),a.selector.setIndexes(l,s),this.indexes=[l,s]}this.moveIndexes=[r,o],this.range=n,this.resetAreaOffset(),this.el.show()}},{key:"setMove",value:function(e){R.call(this,e)}},{key:"setEnd",value:function(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=this.data,n=this.lastri,r=this.lastci;if(i){if(e===n&&t===r)return;this.lastri=e,this.lastci=t}this.range=a.calSelectedRangeByEnd(e,t),R.call(this,this.data.getSelectedRect())}},{key:"setBoxinner",value:function(e){this.br.setBoxinner(e),this.t.setBoxinner(e),this.l.setBoxinner(e),this.tl.setBoxinner(e)}},{key:"showAutofill",value:function(e,t){if(-1!==e||-1!==t){var i=this.range,a=i.sri,n=i.sci,r=i.eri,l=i.eci,s=e,d=t,c=a-e,u=r-e,m=l-t;if(n-t>0)this.arange=new o.CellRange(a,d,r,n-1);else if(c>0)this.arange=new o.CellRange(s,n,a-1,l);else if(m<0)this.arange=new o.CellRange(a,l+1,r,d);else{if(!(u<0))return void(this.arange=null);this.arange=new o.CellRange(r+1,n,s,l)}if(null!==this.arange){var h=this.data.getRect(this.arange);h.width+=2,h.height+=2;var f=this.br,v=this.l,p=this.t,x=this.tl;f.showAutofill(g.call(this,h)),v.showAutofill(b.call(this,h)),p.showAutofill(y.call(this,h)),x.showAutofill(h)}}}},{key:"hideAutofill",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideAutofill()}))}},{key:"showClipboard",value:function(){var e=this,t=this.data.getClipboardRect();k.call(this,t),["br","l","t","tl"].forEach((function(t){e[t].showClipboard()}))}},{key:"hideClipboard",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideClipboard()}))}}]),e}();t.default=I},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1),r=i(4),o=i(5),l=i(21),s=i(3),d=i(6);function c(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var u=function(){function e(t,i,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.l=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-l-move-l")),this.r=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-l-move-r")),this.t=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-l-move-t")),this.b=(0,a.h)("div","".concat(n.cssPrefix,"-selector-box-l-move-b")),this.data=i,this.sheet=r,this._selector=o,this.event(this.l,1),this.event(this.r,2),this.event(this.t,3),this.event(this.b,4),this.boxinner=t,this.boxinner.children(this.l,this.r,this.t,this.b)}var t,i,u;return t=e,(i=[{key:"event",value:function(e,t){var i=this,a=null;e.on("mousedown.stop",(function(e){var n=i.data,c=i.sheet,u=i._selector,m=-1,h=n.selector,f=null,v=h.range,p=v.sri,g=v.sci,y=v.eri,b=v.eci,x=v.w,A=v.h,w=new s.CellRange(p,g,y,b,x,A),E=null,C=c.selectors,T=-1,O=-1,S=-1,R=-1;(0,d.mouseMoveUp)(window,(function(d){clearTimeout(a),a=setTimeout((function(){c.container.css("pointer-events","none");for(var a=0;a<C.length;a++)C[a].selector.setBoxinner("none");var h,v,p=n.getCellRectByXY(d.layerX,d.layerY),g=p.ri,y=p.ci;if(-1!==g&&-1!==y){var b=i.sheet.editor.pos,k=i.sheet.editor.editorText.getText(),I=(0,r.cuttingByPos)(k,b-1,!0);k.length>b-1&&(I+=(0,r.cuttingByPosEnd)(k,b-1));for(var P=0;P<C.length;P++){var D=C[P],M=D.className,N=D.erpx;if(N===I&&M===u.className+" clear_selector"){if(f=f||D,-1!==N.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var _=N.split(":"),L=(0,o.expr2xy)(_[0]),j=(0,o.expr2xy)(_[1]);(w=new s.CellRange(L[1],L[0],j[1],j[0],x,A)).move(g,y);var B=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(B)}else f.selector.set(g,y,!0);break}if(N!==I&&M===u.className+" clear_selector"){if(m=-1!==m?m:(h=k,v=D.erpx,h.lastIndexOf(v)),i.sheet.editor.setCursorPos(m+D.erpx.length),f=f||D,-1!==D.erpx.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var F=N.split(":"),U=(0,o.expr2xy)(F[0]),H=(0,o.expr2xy)(F[1]);if(w=new s.CellRange(U[1],U[0],H[1],H[0],x,A),null===E&&(E=w),4===t){var V=n.getCellRectByXY(d.layerX,d.layerY);w.move2(U[1],U[0],V.ri,V.ci);var z=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(z)}else if(1===t){var W=n.getCellRectByXY(d.layerX,d.layerY);w.move2(U[1],W.ci,W.ri,H[0]);var $=n.getMoveRect(w);f.selector.range=w,f.selector.setMove($)}else if(3===t){var Y=n.getCellRectByXY(d.layerX,d.layerY);w.move2(Y.ri,Y.ci,H[1],H[0]);var X=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(X)}else if(2===t){var G=n.getCellRectByXY(d.layerX,d.layerY);w.move2(G.ri,U[0],H[1],G.ci);var K=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(K)}}else{var Z=(0,o.expr2xy)(D.erpx),q=(0,o.expr2xy)(D.erpx),Q=n.getCellRectByXY(d.layerX,d.layerY);if(4===t){w.move2(Z[1],Z[0],Q.ri,Q.ci);var J=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(J)}else if(1===t){w.move2(Z[1],Q.ci,Q.ri,q[0]);var ee=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(ee)}else if(3===t){w.move2(Q.ri,Q.ci,q[1],q[0]);var te=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(te)}else if(2===t){w.move2(Q.ri,Z[0],q[1],Q.ci);var ie=n.getMoveRect(w);f.selector.range=w,f.selector.setMove(ie)}}break}}!f||T===w.sri&&O===w.sci&&S===w.eri&&R===w.eci||(f.selector.setCss(f.color,!1),l.lockCells.call(i.sheet,e,f,(0,r.isAbsoluteValue)(f.erpx),m)),T=w.sri,O=w.sci,S=w.eri,R=w.eci}}),6)}),(function(){clearTimeout(a);var e=i.sheet.selectors;c.container.css("pointer-events","auto");for(var t=0;t<e.length;t++)e[t].selector.setBoxinner("all");m=-1,f&&f.selector&&f.selector.setCss(f.color,!0),f=null}))}))}}])&&c(t.prototype,i),u&&c(t,u),e}();t.default=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(4),n=i(30);function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.inputText="",this.oldCell="",this.ri=-1,this.ci=-1}var t,i,o;return t=e,(i=[{key:"setText",value:function(e){return this.inputText=e,this.getText()}},{key:"getText",value:function(){return this.inputText}},{key:"setOldCell",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,i=t.ri,a=void 0===i?-1:i,n=t.ci,r=void 0===n?-1:n;return this.oldCell=e,this.ri=a,this.ci=r,this.getOldCell()}},{key:"getOldCell",value:function(){return this.oldCell}},{key:"getRICI",value:function(){return{ri:this.ri,ci:this.ci}}},{key:"changeText",value:function(e){1===e&&this.setText(this.getText().replace(/，/g,","))}},{key:"isFormula",value:function(){return 0===this.getText().lastIndexOf("=")}},{key:"f4ShortcutKey",value:function(e){var t=this.setText((0,n.toUpperCase)(this.inputText)),i=(0,a.cuttingByPos)(t,e,!0),r=(0,a.cuttingByPosEnd2)(t,e+1);console.log(r);var o=(0,a.isAbsoluteValue)(i,5),l="",s=i.split(":")[1];if(s&&(o=2===(o=1===(o=12===(o=3===(o=(0,a.isAbsoluteValue)(s,5))?6:o)?9:o)?7:o)?8:o,console.log(o)),!1!==o)switch(o){case 13:s=i.split(":")[1],l=(0,a.value2absolute)(s.replace(/\$/g,"")).s1;var d=t.substring(0,t.lastIndexOf(s));t=this.setText(d+l);break;case 12:s=i,l=(0,a.value2absolute)(s.replace(/\$/g,"")).s3,console.log((0,a.value2absolute)(i)),t=this.setText(t.substring(0,t.lastIndexOf(s))+l),console.log(this.getText());break;case 11:case 10:s=i.split(":")[1],l=(0,a.value2absolute)(s.replace(/\$/g,"")).s3,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 9:s=i.split(":")[1],l=(0,a.value2absolute)(s.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 8:l=(s=i.split(":")[1]).replace(/\$/g,""),t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 7:s=i.split(":")[1],l=(0,a.value2absolute)(s.replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 6:s=i.split(":")[1],l=(0,a.value2absolute)(s.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 5:l=(0,a.value2absolute)(i.split(":")[1].replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(i))+l);break;case 4:l=(0,a.value2absolute)(i.split(":")[1].replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(i))+l);break;case 3:l=(0,a.value2absolute)(i.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(i))+l);break;case 2:l=i.replace(/\$/g,""),t=this.setText(t.substring(0,t.lastIndexOf(i))+l);break;case 1:l=(0,a.value2absolute)(i.replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(i))+l)}return{pos:t.length,inputText:t=this.setText(t+r)}}}])&&r(t.prototype,i),o&&r(t,o),e}();t.default=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cellRender=l,t.infixExprToSuffixExpr=t.render=void 0;var a=i(5),n=i(1);function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}t.infixExprToSuffixExpr=function(e){for(var t=[],i=[],n=[],o=0,l=1,s=0;s<e.length;s+=1){var d=e.charAt(s);if(" "!==d)if(d>="a"&&d<="z")n.push(d.toUpperCase());else if(d>="0"&&d<="9"||d>="A"&&d<="Z"||"."===d)n.push(d);else if('"'===d){for(s+=1;'"'!==e.charAt(s);)n.push(e.charAt(s)),s+=1;i.push('"'.concat(n.join(""))),n=[]}else{if("("!==d&&n.length>0&&i.push(n.join("")),")"===d){var c=t.pop();if(2===o)try{for(var u=r((0,a.expr2xy)(i.pop()),2),m=u[0],h=u[1],f=r((0,a.expr2xy)(i.pop()),2),v=f[0],p=f[1],g=0,y=v;y<=m;y+=1)for(var b=p;b<=h;b+=1)i.push((0,a.xy2expr)(y,b)),g+=1;i.push([c,g])}catch(e){}else if(1===o)i.push([c,l]),l=1;else for(;"("!==c&&(i.push(c),!(t.length<=0));)c=t.pop();o=0}else if(":"===d)o=2;else if(","===d)o=1,l+=1;else if("("===d&&n.length>0)t.push(n.join(""));else{if(t.length>0&&("+"===d||"-"===d)){var x=t[t.length-1];if("("!==x&&i.push(t.pop()),"*"===x||"/"===x)for(;t.length>0&&"("!==(x=t[t.length-1]);)i.push(t.pop())}t.push(d)}n=[]}}for(n.length>0&&i.push(n.join(""));t.length>0;)i.push(t.pop());return i};function o(e,t){return"string"==typeof e&&-1!==e.toUpperCase().indexOf(t.toUpperCase())}function l(e,t,i,r,l,s,d){arguments.length>7&&void 0!==arguments[7]&&arguments[7];if(void 0===l)return"";if("string"==typeof l&&-1!==n.look.indexOf(l.split("!")[0])){var c=l.length;l.split(" ")[0]&&(c=l.split(" ")[0].length);var u=JSON.parse(l.substring(l.indexOf("!")+1,c)),m=n.look.indexOf(l.split("!")[0]);if(1===m)return u.text;if(0===m&&u&&u[0]){var h=u[0],f=h.name,v=h.value;if(0===v&&u[1]&&0!==u[1].value)return f;if(0===v&&!u[1])return f}return n.look2}return"="===l[0]&&"="!==l[1]?o(l.substring(1),"wland")||o(l.substring(1),"wfr")||o(l.substring(1),"rtd")||o(l.substring(1),"city")?l.toUpperCase():l.substring(1)&&t&&t.Sheets&&t.Sheets[e.name]&&t.Sheets[e.name][(0,a.xy2expr)(r,i)]?t.Sheets[e.name][(0,a.xy2expr)(r,i)].f&&-1!==t.Sheets[e.name][(0,a.xy2expr)(r,i)].f.search(/\((\+|\-|\*|\/)/)||void 0===t.Sheets[e.name][(0,a.xy2expr)(r,i)].v||""===t.Sheets[e.name][(0,a.xy2expr)(r,i)].v?"#ERROR!":(t.Sheets[e.name][(0,a.xy2expr)(r,i)].v=t.Sheets[e.name][(0,a.xy2expr)(r,i)].v+"",t.Sheets[e.name][(0,a.xy2expr)(r,i)].w?t.Sheets[e.name][(0,a.xy2expr)(r,i)].w:t.Sheets[e.name][(0,a.xy2expr)(r,i)].v.replace(/'/g,'"')):l:l}var s=l;t.render=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMinus=void 0;t.isMinus=function(e){return!isNaN(e)&&(""!==e&&parseInt(e)<0)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.thinLineWidth=c,t.npx=u,t.DrawBox=t.Draw=void 0;var a=i(7);function n(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function s(e,t,i){return t&&l(e.prototype,t),i&&l(e,i),e}function d(){return window.devicePixelRatio||1}function c(){return d()-.5}function u(e){var t=e*d()+"";return parseInt(t,10)}function m(e){var t=u(e);return t>0?t-.5:.5}function h(e,t,i){e.save(),e.beginPath(),e.fillStyle="#707070",e.moveTo(t,i+6),e.lineTo(t+12,i+6),e.stroke(),e.strokeRect(t,i,12,12),e.clip(),e.fill(),e.restore()}function f(e,t,i){e.save(),e.beginPath(),e.fillStyle="#707070",e.moveTo(t+6,i),e.lineTo(t+6,i+12),e.moveTo(t,i+6),e.lineTo(t+12,i+6),e.stroke(),e.strokeRect(t,i,12,12),e.clip(),e.fill(),e.restore()}var v=function(){function e(t,i,a,n){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;o(this,e),this.x=t,this.y=i,this.width=a,this.height=n,this.padding=r,this.bgcolor="#ffffff",this.borderTop=null,this.borderRight=null,this.borderBottom=null,this.borderLeft=null}return s(e,[{key:"setBorders",value:function(e){var t=e.top,i=e.bottom,a=e.left,n=e.right;t&&(this.borderTop=t),n&&(this.borderRight=n),i&&(this.borderBottom=i),a&&(this.borderLeft=a)}},{key:"innerWidth",value:function(){return this.width-2*this.padding}},{key:"innerHeight",value:function(){return this.height-2*this.padding}},{key:"textx",value:function(e){var t=this.width,i=this.padding,a=this.x;return"left"===e?a+=i:"center"===e?a+=t/2:"right"===e&&(a+=t-i),a}},{key:"texty",value:function(e,t,i){var a=this.height,n=this.padding,r=this.y;return"top"===e?r+=n:"middle"===e?r=r+a/2-i:"bottom"===e&&(r+=a-2*i-n),r}},{key:"topxys",value:function(){var e=this.x,t=this.y;return[[e,t],[e+this.width,t]]}},{key:"rightxys",value:function(){var e=this.x,t=this.y,i=this.width;return[[e+i,t],[e+i,t+this.height]]}},{key:"bottomxys",value:function(){var e=this.x,t=this.y,i=this.width,a=this.height;return[[e,t+a],[e+i,t+a]]}},{key:"leftxys",value:function(){var e=this.x,t=this.y;return[[e,t],[e,t+this.height]]}}]),e}();function p(e,t,i,a,n,r,o){var l={x:0,y:0};"underline"===e?l.y="bottom"===n?0:"top"===n?-(r+2):-r/2:"strike"===e&&("bottom"===n?l.y=r/2:"top"===n&&(l.y=-(r/2+2))),"center"===a?l.x=o/2:"right"===a&&(l.x=o),this.line([t-l.x,i-l.y],[t-l.x+o,i-l.y])}t.DrawBox=v;var g=function(){function e(t,i,a){o(this,e),this.el=t,this.ctx=t.getContext("2d"),this.resize(i,a),this.ctx.scale(1*d(),1*d()),this.cxc={indent:250,vIndent:200,canvasContext:this.ctx}}return s(e,[{key:"resize",value:function(e,t){this.el.style.width="".concat(e,"px"),this.el.style.height="".concat(t,"px"),this.el.width=u(e),this.el.height=u(t)}},{key:"clear",value:function(){var e=this.el,t=e.width,i=e.height;return this.ctx.clearRect(0,0,t,i),this}},{key:"attr",value:function(e){return Object.assign(this.ctx,e),this}},{key:"save",value:function(){return this.ctx.save(),this.ctx.beginPath(),this}},{key:"restore",value:function(){return this.ctx.restore(),this}},{key:"beginPath",value:function(){return this.ctx.beginPath(),this}},{key:"translate",value:function(e,t){return this.ctx.translate(u(e),u(t)),this}},{key:"clearRect",value:function(e,t,i,a){return this.ctx.clearRect(e,t,i,a),this}},{key:"fillRect",value:function(e,t,i,a){return this.ctx.fillRect(u(e)-.5,u(t)-.5,u(i),u(a)),this}},{key:"fillText",value:function(e,t,i){return this.ctx.fillText(e,u(t),u(i)),this}},{key:"selfAdaptionHeight",value:function(e,t,i){if(void 0!==i&&void 0!==t){for(var a=1,n={len:0,start:0},r=e.width-2*e.padding,o=0;o<t.length;o+=1)n.len+e.padding>=r&&(a+=1,n.len=0,n.start=o),n.len+=this.selfAdaptionOneTxtWidth(t[o],i);return a}}},{key:"selfAdaptionTxtWidth",value:function(e,t,i){if(!1===(0,a.isHave)(e)||!1===(0,a.isHave)(t)||e.length<=0)return 0;var n=this.ctx;return n.font="".concat(t.italic?"italic":""," ").concat(t.bold?"bold":""," ").concat(u(t.size),"px ").concat(t.name),n.measureText(e).width*t.size/u(t.size)}},{key:"selfAdaptionOneTxtWidth",value:function(e,t){if(!1===(0,a.isHave)(e)||!1===(0,a.isHave)(t)||e.length<=0)return 0;var i=this.ctx;return i.font="".concat(t.italic?"italic":""," ").concat(t.bold?"bold":""," ").concat(u(t.size),"px ").concat(t.name),i.measureText(e).width}},{key:"text",value:function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],n=this.ctx,r=i.align,o=i.valign,l=i.font,s=i.color,d=i.strike,c=i.underline,m=(i.ignore,t.textx(r));n.save(),n.beginPath(),this.attr({textAlign:r,textBaseline:o,font:"".concat(l.italic?"italic":""," ").concat(l.bold?"bold":""," ").concat(u(l.size),"px ").concat(l.name),fillStyle:s,strokeStyle:s});var h=this.selfAdaptionTxtWidth(e,l,t),f=0,v=t.innerWidth();if(a){v=t.width-2*t.padding;var g=this.selfAdaptionHeight(t,e,l);f=(g-1)*l.size/2}var y=t.texty(o,l.size,f);if(a&&h>v){for(var b={len:0,start:0},x=0;x<e.length;x+=1)b.len+t.padding>=v&&(this.fillText(e.substring(b.start,x),m,y),d&&p.call(this,"strike",m,y,r,o,l.size,b.len),c&&p.call(this,"underline",m,y,r,o,l.size,b.len),y+=l.size+2,b.len=0,b.start=x),b.len+=this.selfAdaptionOneTxtWidth(e[x],l);b.len>0&&(this.fillText(e.substring(b.start),m,y),d&&p.call(this,"strike",m,y,r,o,l.size,b.len),c&&p.call(this,"underline",m,y,r,o,l.size,b.len))}else this.fillText(e,m,y),d&&p.call(this,"strike",m,y,r,o,l.size,h),c&&p.call(this,"underline",m,y,r,o,l.size,h);return n.restore(),this}},{key:"border",value:function(e,t){var i=this.ctx;return i.lineWidth=c,i.strokeStyle=t,"medium"===e?i.lineWidth=u(2)-.5:"thick"===e?i.lineWidth=u(3):"dashed"===e?i.setLineDash([u(3),u(2)]):"dotted"===e?i.setLineDash([u(1),u(1)]):"double"===e&&i.setLineDash([u(2),0]),this}},{key:"line",value:function(){var e=this.ctx;if(arguments.length>1){var t=arguments.length<=0?void 0:arguments[0],i=r(t,2),a=i[0],n=i[1];e.moveTo(m(a),m(n));for(var o=1;o<arguments.length;o+=1){var l=o<0||arguments.length<=o?void 0:arguments[o],s=r(l,2),d=s[0],c=s[1];e.lineTo(m(d),m(c))}e.stroke()}return this}},{key:"strokeBorders",value:function(e){var t=this.ctx;t.save(),t.beginPath();var i=e.borderTop,a=e.borderRight,r=e.borderBottom,o=e.borderLeft;i&&(this.border.apply(this,n(i)),this.line.apply(this,n(e.topxys()))),a&&(this.border.apply(this,n(a)),this.line.apply(this,n(e.rightxys()))),r&&(this.border.apply(this,n(r)),this.line.apply(this,n(e.bottomxys()))),o&&(this.border.apply(this,n(o)),this.line.apply(this,n(e.leftxys()))),t.restore()}},{key:"dropUp",value:function(e,t,i){var a=this.ctx,n=e.x+10,r=e.y+e.height-18-i;t?f.call(this,a,u(n),u(r)):h.call(this,a,u(n),u(r))}},{key:"lineTo",value:function(e,t){this.cxc.canvasContext.lineTo(e+this.cxc.indent,t+this.cxc.vIndent)}},{key:"moveTo",value:function(e,t){this.cxc.canvasContext.moveTo(e+this.cxc.indent,t+this.cxc.vIndent)}},{key:"dropdown",value:function(e){var t=this.ctx,i=e.x,a=e.y,n=i+e.width-15,r=a+e.height-15;t.save(),t.beginPath(),t.moveTo(u(n),u(r)),t.lineTo(u(n+8),u(r)),t.lineTo(u(n+4),u(r+6)),t.closePath(),t.fillStyle="rgba(0, 0, 0, .45)",t.fill(),t.restore()}},{key:"error",value:function(e){var t=this.ctx,i=e.x,a=e.y,n=i+e.width-1;t.save(),t.beginPath(),t.moveTo(u(n-8),u(a-1)),t.lineTo(u(n),u(a-1)),t.lineTo(u(n),u(a+8)),t.closePath(),t.fillStyle="rgba(255, 0, 0, .65)",t.fill(),t.restore()}},{key:"rect",value:function(e,t){var i=this.ctx,a=e.x,n=e.y,r=e.width,o=e.height,l=e.bgcolor;i.save(),i.beginPath(),i.fillStyle=l||"#fff",i.rect(m(a+1),m(n+1),u(r-2),u(o-2)),i.clip(),i.fill(),t(),i.restore()}},{key:"rect2",value:function(e,t){var i=this.ctx,a=e.x,n=e.y,r=e.width,o=e.bgcolor,l=e.height;i.save(),i.beginPath(),i.fillStyle="rgba(0, 0, 0, 0)"===o?"#fff":o||"#fff",i.rect(m(a+1),m(n+1),u(r-2),u(l-2)),i.clip(),i.fill(),t(),i.restore()}}]),e}();t.Draw=g},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(6),r=i(1),o=i(8);function l(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var d=[{key:"copy",title:(0,o.tf)("contextmenu.copy"),label:"Ctrl+C"},{key:"cut",title:(0,o.tf)("contextmenu.cut"),label:"Ctrl+X"},{key:"divider"},{key:"insert-row",title:(0,o.tf)("contextmenu.insertRow")},{key:"insert-column",title:(0,o.tf)("contextmenu.insertColumn")},{key:"divider"},{key:"delete-row",title:(0,o.tf)("contextmenu.deleteRow")},{key:"delete-column",title:(0,o.tf)("contextmenu.deleteColumn")},{key:"delete-cell-text",title:(0,o.tf)("contextmenu.deleteCellText")},{key:"divider"},{key:"validation",title:(0,o.tf)("contextmenu.validation")}];function c(e){var t=this;return"divider"===e.key?(0,a.h)("div","".concat(r.cssPrefix,"-item divider")):(0,a.h)("div","".concat(r.cssPrefix,"-item")).on("click",(function(i){t.itemClick(e.key,i),t.hide()})).children(e.title(),(0,a.h)("div","label").child(e.label||""))}function u(){var e=this;return d.map((function(t){return c.call(e,t)}))}var m=function(){function e(t){var i,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.menus=u.call(this),this.el=(i=(0,a.h)("div","".concat(r.cssPrefix,"-contextmenu"))).children.apply(i,l(this.menus)).hide(),this.viewFn=t,this.itemClick=function(){},this.isHide=n}var t,i,o;return t=e,(i=[{key:"hide",value:function(){var e=this.el;e.hide(),(0,n.unbindClickoutside)(e)}},{key:"setPosition",value:function(e,t){if(!this.isHide){var i=this.el,a=i.show().offset(),r=a.height,o=a.width,l=this.viewFn(),s=t,d=e;l.height-t<=r&&(s-=r),l.width-e<=o&&(d-=o),i.offset({left:d,top:s}),(0,n.bindClickoutside)(i)}}}])&&s(t.prototype,i),o&&s(t,o),e}();t.default=m},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildButton=O,t.buildButtonWithIcon=R,t.default=void 0;var a=i(0),n=i(6),r=g(i(119)),o=g(i(120)),l=g(i(121)),s=g(i(122)),d=(g(i(123)),g(i(55))),c=g(i(124)),u=g(i(125)),m=g(i(11)),h=g(i(9)),f=i(1),v=i(8),p=g(i(128));function g(e){return e&&e.__esModule?e:{default:e}}function y(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function A(e){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function E(e,t){return!t||"object"!==A(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){return(0,a.h)("div","".concat(f.cssPrefix,"-toolbar-btn")).on("mouseenter",(function(t){(0,r.default)(e,t.target)})).attr("data-tooltip",e)}function S(){return(0,a.h)("div","".concat(f.cssPrefix,"-toolbar-divider"))}function R(e,t){var i,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};return O(e).child((i=t,new h.default(i))).on("click",(function(){return a()}))}function k(){var e=this;this.ddFormat.change=function(t){return e.change("format",t.key)},this.ddFont.change=function(t){return e.change("font-name",t.key)},this.ddFontSize.change=function(t){return e.change("font-size",t.pt)},this.ddTextColor.change=function(t){return e.change("color",t)},this.ddFillColor.change=function(t){return e.change("bgcolor",t)},this.ddAlign.change=function(t){return e.change("align",t)},this.ddVAlign.change=function(t){return e.change("valign",t)},this.ddBorder.change=function(t){return e.change("border",t)},this.undoEl.change=function(t){return e.change("undo",t)}}function I(e){var t=e,i=e.split("-");i.length>1&&i.forEach((function(e,i){0===i?t=e:t+=e[0].toUpperCase()+e.substring(1)}));var a=this["".concat(t,"El")];a.toggle(),this.change(e,a.hasClass("active"))}var P=function(e){function t(){var e;w(this,t);var i=new h.default("ellipsis"),n=(0,a.h)("div","".concat(f.cssPrefix,"-toolbar-more"));return(e=E(this,C(t).call(this,i,"auto",!1,"bottom-right",!1,n))).moreBtns=n,e.contentEl.css("max-width","420px"),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(t,e),t}(m.default);function D(){this.btns2=this.btnChildren.map((function(e){var t=e.box(),i=e.computedStyle(),a=i.marginLeft,n=i.marginRight;return[e,t.width+parseInt(a,10)+parseInt(n,10)]}))}function M(){var e,t,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.widthFn,a=this.el,n=this.btns,r=this.moreEl,o=this.ddMore,l=this.btns2,s=o.moreBtns,d=o.contentEl;a.css("width","".concat(i()-60,"px"));var c=a.box();console.log("92: ",c);var u=160,m=12,h=[],f=[];l.forEach((function(e,t){var i=x(e,2),a=i[0],n=i[1];u+=n,t===l.length-1||u<c.width?h.push(a):(m+=n,f.push(a))})),(e=n.html("")).children.apply(e,h),(t=s.html("")).children.apply(t,f),d.css("width","".concat(m,"px")),f.length>0?r.show():r.hide()}var N=function(){function e(t,i){var r,m=this,h=arguments.length>2&&void 0!==arguments[2]&&arguments[2];w(this,e),this.data=t,this.change=function(){},this.widthFn=i;var g=t.defaultStyle();this.ddFormat=new s.default,this.ddFont=new o.default,this.ddFontSize=new l.default,this.ddTextColor=new d.default("text-color",g.color),this.ddFillColor=new d.default("fill-color",g.bgcolor),this.ddAlign=new c.default(["left","center","right"],g.align),this.ddVAlign=new c.default(["top","middle","bottom"],g.valign),this.ddBorder=new u.default,this.ddMore=new P,this.undoEl=new p.default("undo",(function(){return m.change("undo")}),(function(e){return m.change("undoList",e)})),this.redoEl=new p.default("redo",(function(){return m.change("redo")}),(function(e){return m.change("redoList",e)})),this.btnChildren=[O("".concat((0,v.t)("toolbar.undo"))).child(this.undoEl.el),O("".concat((0,v.t)("toolbar.redo"))).child(this.redoEl.el),this.paintformatEl=R("".concat((0,v.t)("toolbar.paintformat")),"paintformat",(function(){return I.call(m,"paintformat")})),S(),O("".concat((0,v.t)("toolbar.format"))).child(this.ddFormat.el),S(),O("".concat((0,v.t)("toolbar.font"))).child(this.ddFont.el),O("".concat((0,v.t)("toolbar.fontSize"))).child(this.ddFontSize.el),S(),this.fontBoldEl=R("".concat((0,v.t)("toolbar.fontBold")," (Ctrl+B)"),"bold",(function(){return I.call(m,"font-bold")})),this.fontItalicEl=R("".concat((0,v.t)("toolbar.fontItalic")," (Ctrl+I)"),"italic",(function(){return I.call(m,"font-italic")})),this.underlineEl=R("".concat((0,v.t)("toolbar.underline")," (Ctrl+U)"),"underline",(function(){return I.call(m,"underline")})),this.strikeEl=R("".concat((0,v.t)("toolbar.strike")),"strike",(function(){return I.call(m,"strike")})),O("".concat((0,v.t)("toolbar.textColor"))).child(this.ddTextColor.el),S(),O("".concat((0,v.t)("toolbar.fillColor"))).child(this.ddFillColor.el),O("".concat((0,v.t)("toolbar.border"))).child(this.ddBorder.el),this.mergeEl=R("".concat((0,v.t)("toolbar.merge")),"merge",(function(){return I.call(m,"merge")})),S(),O("".concat((0,v.t)("toolbar.align"))).child(this.ddAlign.el),O("".concat((0,v.t)("toolbar.valign"))).child(this.ddVAlign.el),this.textwrapEl=R("".concat((0,v.t)("toolbar.textwrap")),"textwrap",(function(){return I.call(m,"textwrap")})),S(),this.freezeEl=R("".concat((0,v.t)("toolbar.freeze")),"freeze",(function(){return I.call(m,"freeze")})),this.addEl=R("".concat((0,v.t)("toolbar.add")),"add",(function(){return I.call(m,"add")})),this.closeEl=R("".concat((0,v.t)("toolbar.calc")),"close",(function(){return I.call(m,"close")})),this.autofilterEl=R("".concat((0,v.t)("toolbar.autofilter")),"autofilter",(function(){return I.call(m,"autofilter")})),this.chartEl=R("".concat((0,v.t)("toolbar.chart")),"chart",(function(){return I.call(m,"chart")})),this.moreEl=O("".concat((0,v.t)("toolbar.more"))).child(this.ddMore.el).hide()],this.el=(0,a.h)("div","".concat(f.cssPrefix,"-toolbar")),this.btns=(r=(0,a.h)("div","".concat(f.cssPrefix,"-toolbar-btns"))).children.apply(r,y(this.btnChildren)),this.el.child(this.btns),h&&this.el.hide(),k.call(this),this.reset(),setTimeout((function(){D.call(m),M.call(m)}),0),(0,n.bind)(window,"resize",(function(){M.call(m,t.settings.view.width)}))}var t,i,r;return t=e,(i=[{key:"moreResize",value:function(){var e=this.data;M.call(this,e.settings.view.width)}},{key:"paintformatActive",value:function(){return this.paintformatEl.hasClass("active")}},{key:"paintformatToggle",value:function(){this.paintformatEl.toggle()}},{key:"trigger",value:function(e){I.call(this,e)}},{key:"reset",value:function(){var e=this.data,t=e.getSelectedCellStyle(),i=e.getSelectedCell();this.undoEl.disabled(!e.canUndo()),this.redoEl.disabled(!e.canRedo()),this.mergeEl.active(e.canUnmerge()).disabled(!e.selector.multiple()),this.autofilterEl.active(!e.canAutofilter());var a=t.font;this.ddFont.setTitle(a.name),this.ddFontSize.setTitle(a.size),this.fontBoldEl.active(a.bold),this.fontItalicEl.active(a.italic),this.underlineEl.active(t.underline),this.strikeEl.active(t.strike),this.ddTextColor.setTitle(t.color),this.ddFillColor.setTitle(t.bgcolor),this.ddAlign.setTitle(t.align),this.ddVAlign.setTitle(t.valign),this.textwrapEl.active(t.textwrap),this.addEl.active(e.equationIsActive()),this.closeEl.active(!1),this.chartEl.active(!1),this.freezeEl.active(e.freezeIsActive()),i&&i.format&&this.ddFormat.setTitle(i.format)}}])&&b(t.prototype,i),r&&b(t,r),e}();t.default=N},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t.classList.contains("active"))return;var i=t.getBoundingClientRect(),o=i.left,l=i.top,s=i.width,d=i.height,c=(0,a.h)("div","".concat(r.cssPrefix,"-tooltip")).html(e).show();document.body.appendChild(c.el);var u=c.box();c.css("left","".concat(o+s/2-u.width/2,"px")).css("top","".concat(l+d+2,"px")),(0,n.bind)(t,"mouseleave",(function(){document.body.contains(c.el)&&document.body.removeChild(c.el)})),(0,n.bind)(t,"click",(function(){document.body.contains(c.el)&&document.body.removeChild(c.el)}))};var a=i(0),n=i(6),r=i(1)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=(a=i(11))&&a.__esModule?a:{default:a},r=i(0),o=i(22),l=i(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=o.baseFonts.map((function(e){return(0,r.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){i.setTitle(e.title),i.change(e)})).child(e.title)}));return i=c(this,(e=u(t)).call.apply(e,[this,o.baseFonts[0].title,"160px",!0,"bottom-left",{type:!1}].concat(d(a))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),t}(n.default);t.default=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=(a=i(11))&&a.__esModule?a:{default:a},r=i(0),o=i(22),l=i(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=o.fontSizes.map((function(e){return(0,r.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){i.setTitle("".concat(e.pt)),i.change(e)})).child("".concat(e.pt))}));return i=c(this,(e=u(t)).call.apply(e,[this,"10","60px",!0,"bottom-left",{type:!1}].concat(d(a))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),t}(n.default);t.default=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=(a=i(11))&&a.__esModule?a:{default:a},r=i(0),o=i(31),l=i(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function u(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(){var e,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=o.baseFormats.slice(0);return a.splice(1,0,{key:"divider"}),a.splice(5,0,{key:"divider"}),a=a.map((function(e){var t=(0,r.h)("div","".concat(l.cssPrefix,"-item"));return"divider"===e.key?t.addClass("divider"):(t.child(e.title()).on("click",(function(){i.setTitle(e.title()),i.change(e)})),e.label&&t.child((0,r.h)("div","label").html(e.label))),t})),i=u(this,(e=m(t)).call.apply(e,[this,"Normal","220px",!0,"bottom-left",{type:!1}].concat(d(a))))}var i,a,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),i=t,(a=[{key:"setTitle",value:function(e){for(var t=0;t<o.baseFormats.length;t+=1)o.baseFormats[t].key===e&&this.title.html(o.baseFormats[t].title);this.hide()}}])&&c(i.prototype,a),n&&c(i,n),t}(n.default);t.default=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(i(11)),n=s(i(9)),r=i(0),o=i(24),l=i(1);function s(e){return e&&e.__esModule?e:{default:e}}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(){var e,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=o.allFnObj.map((function(e){return(0,r.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){i.hide(),i.change(e)})).child(e.key)}));return i=u(this,(e=m(t)).call.apply(e,[this,new n.default("cellFormulaProxy"),"180px",!0,"bottom-left",{type:!1}].concat(c(a))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),t}(a.default);t.default=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=l(i(11)),n=i(0),r=l(i(9)),o=i(1);function l(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function u(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(e,i){var a,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var s=new r.default("align-".concat(i)),c=e.map((function(e){return(t="align-".concat(e),(0,n.h)("div","".concat(o.cssPrefix,"-item")).child(new r.default(t))).on("click",(function(){l.setTitle(e),l.change(e)}));var t}));return l=u(this,(a=m(t)).call.apply(a,[this,s,"auto",!0,"bottom-left",{type:!1}].concat(d(c))))}var i,a,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),i=t,(a=[{key:"setTitle",value:function(e){this.title.setName("align-".concat(e)),this.hide()}}])&&c(i.prototype,a),l&&c(i,l),t}(a.default);t.default=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(i(11)),n=o(i(9)),r=o(i(126));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=new n.default("border-all"),a=new r.default;return a.change=function(t){e.change(t),e.hide()},(e=s(this,d(t).call(this,i,"auto",!1,"bottom-left",{type:!1},a.el))).borderPalette=a,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(a.default);t.default=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=s(i(9)),r=s(i(55)),o=s(i(127)),l=i(1);function s(e){return e&&e.__esModule?e:{default:e}}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var i=[],a=!0,n=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(a=(o=l.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){n=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(n)throw r}}return i}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(){var e;return(0,a.h)("table","").child((e=(0,a.h)("tbody","")).children.apply(e,arguments))}function m(e){var t=this,i=(0,a.h)("div","".concat(l.cssPrefix,"-border-palette-cell"));return this.items.push(i),(0,a.h)("td","").child(i.child(new n.default("border-".concat(e))).on("click",(function(){t.mode=e;var i=t.mode,a=t.style,n=t.color;t.change({mode:i,style:a,color:n})})))}t.default=function e(){var t,i,n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.color="#000",this.style="thin",this.mode="all",this.change=function(){},this.ddColor=new r.default("line-color",this.color),this.ddColor.change=function(e){n.color=e},this.ddType=new o.default(this.style),this.ddType.change=function(e){var t=c(e,1)[0];n.style=t},this.el=(0,a.h)("div","".concat(l.cssPrefix,"-border-palette")),this.items=[];var s=u((0,a.h)("tr","").children((0,a.h)("td","".concat(l.cssPrefix,"-border-palette-left")).child(u((t=(0,a.h)("tr","")).children.apply(t,d(["all","inside","horizontal","vertical","outside"].map((function(e){return m.call(n,e)})))),(i=(0,a.h)("tr","")).children.apply(i,d(["left","top","right","bottom","none"].map((function(e){return m.call(n,e)})))))),(0,a.h)("td","".concat(l.cssPrefix,"-border-palette-right")).children((0,a.h)("div","".concat(l.cssPrefix,"-toolbar-btn")).child(this.ddColor.el),(0,a.h)("div","".concat(l.cssPrefix,"-toolbar-btn")).child(this.ddType.el))));this.el.child(s)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=l(i(11)),n=i(0),r=l(i(9)),o=i(1);function l(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=[["thin",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" style="user-select: none;"></line></svg>'],["medium",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="2" style="user-select: none;"><line x1="0" y1="1.0" x2="50" y2="1.0" stroke-width="2" stroke="black" style="user-select: none;"></line></svg>'],["thick",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="3" style="user-select: none;"><line x1="0" y1="1.5" x2="50" y2="1.5" stroke-width="3" stroke="black" style="user-select: none;"></line></svg>'],["dashed",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="2" style="user-select: none;"></line></svg>'],["dotted",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="1" style="user-select: none;"></line></svg>']],f=function(e){function t(e){var i,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var l=new r.default("line-type"),s=0,m=h.map((function(t,i){return(0,n.h)("div","".concat(o.cssPrefix,"-item state ").concat(e===t[0]?"checked":"")).on("click",(function(){m[s].toggle("checked"),m[i].toggle("checked"),s=i,a.hide(),a.change(t)})).child((0,n.h)("div","".concat(o.cssPrefix,"-line-type")).html(t[1]))}));return a=c(this,(i=u(t)).call.apply(i,[this,l,"auto",!1,"bottom-left",{type:!1}].concat(d(m))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),t}(a.default);t.default=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(i(11)),n=o(i(9)),r=o(i(129));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=function(e){function t(e,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new n.default(e).css("height","18px"),l=new r.default;return s(this,d(t).call(this,o,"auto",!0,"bottom-left",{type:!0,change:i,arrowChange:a,historyBorder:l},l.el))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(a.default);t.default=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1);function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-history-border")),this.history=(0,a.h)("div","".concat(n.cssPrefix,"-history-content")).html("暂无内容"),this.el.child(this.history)}var t,i,o;return t=e,(i=[{key:"setContent",value:function(e){var t;e=e.slice(e.length-100<0?0:e.length,e.length),this.el.html("");for(var i=[],n=e.length-1;n>=0;n--){var r=(0,a.h)("div",""),o=e[n].action;r.html(o),i.push(r)}console.log(this,this.el),(t=this.el).children.apply(t,i)}}])&&r(t.prototype,i),o&&r(t,o),e}();t.default=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=u(i(56)),n=u(i(131)),r=u(i(132)),o=u(i(133)),l=u(i(32)),s=i(8),d=i(0),c=i(1);function u(e){return e&&e.__esModule?e:{default:e}}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function f(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=100,y=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=new o.default(new r.default("cell",["cell"],"100%",(function(e){return(0,s.t)("dataValidation.modeType.".concat(e))})),{required:!0},"".concat((0,s.t)("dataValidation.range"),":"),g),a=new o.default(new n.default("120px","E3 or E3:F12"),{required:!0,pattern:/^([A-Z]{1,2}[1-9]\d*)(:[A-Z]{1,2}[1-9]\d*)?$/}),u=new o.default(new r.default("list",["list","number","date","phone","email"],"100%",(function(e){return(0,s.t)("dataValidation.type.".concat(e))}),(function(t){return e.criteriaSelected(t)})),{required:!0},"".concat((0,s.t)("dataValidation.criteria"),":"),g),m=new o.default(new r.default("be",["be","nbe","eq","neq","lt","lte","gt","gte"],"160px",(function(e){return(0,s.t)("dataValidation.operator.".concat(e))}),(function(t){return e.criteriaOperatorSelected(t)})),{required:!0}).hide(),h=new o.default(new n.default("70px","10"),{required:!0}).hide(),p=new o.default(new n.default("70px","100"),{required:!0,type:"number"}).hide(),y=new o.default(new n.default("120px","a,b,c"),{required:!0}),b=new o.default(new n.default("70px","10"),{required:!0,type:"number"}).hide();return(e=f(this,v(t).call(this,(0,s.t)("contextmenu.validation"),[(0,d.h)("div","".concat(c.cssPrefix,"-form-fields")).children(i.el,a.el),(0,d.h)("div","".concat(c.cssPrefix,"-form-fields")).children(u.el,m.el,h.el,p.el,b.el,y.el),(0,d.h)("div","".concat(c.cssPrefix,"-buttons")).children(new l.default("cancel").on("click",(function(){return e.btnClick("cancel")})),new l.default("remove").on("click",(function(){return e.btnClick("remove")})),new l.default("save","primary").on("click",(function(){return e.btnClick("save")})))]))).mf=i,e.rf=a,e.cf=u,e.of=m,e.minvf=h,e.maxvf=p,e.vf=b,e.svf=y,e.change=function(){},e}var i,a,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),i=t,(a=[{key:"criteriaSelected",value:function(e){var t=this.of,i=this.minvf,a=this.maxvf,n=this.vf,r=this.svf;"date"===e||"number"===e?(t.show(),i.rule.type=e,a.rule.type=e,"date"===e?(i.hint("2018-11-12"),a.hint("2019-11-12")):(i.hint("10"),a.hint("100")),i.show(),a.show(),n.hide(),r.hide()):("list"===e?r.show():r.hide(),n.hide(),t.hide(),i.hide(),a.hide())}},{key:"criteriaOperatorSelected",value:function(e){if(e){var t=this.minvf,i=this.maxvf,a=this.vf;if("be"===e||"nbe"===e)t.show(),i.show(),a.hide();else{var n=this.cf.val();a.rule.type=n,"date"===n?a.hint("2018-11-12"):a.hint("10"),a.show(),t.hide(),i.hide()}}}},{key:"btnClick",value:function(e){if("cancel"===e)this.hide();else if("remove"===e)this.change("remove"),this.hide();else if("save"===e){for(var t=["mf","rf","cf","of","svf","vf","minvf","maxvf"],i=0;i<t.length;i+=1){var a=this[t[i]];if(a.isShow()&&!a.validate())return}var n=this.mf.val(),r=this.rf.val(),o=this.cf.val(),l=this.of.val(),s=this.svf.val();"number"!==o&&"date"!==o||(s="be"===l||"nbe"===l?[this.minvf.val(),this.maxvf.val()]:this.vf.val()),this.change("save",n,r,{type:o,operator:l,required:!1,value:s}),this.hide()}}},{key:"setValue",value:function(e){if(e){var t=this.mf,i=this.rf,a=this.cf,n=this.of,r=this.svf,o=this.vf,l=this.minvf,s=this.maxvf,d=e.mode,c=e.ref,u=e.validator||{type:"list"},m=u.type,h=u.operator,f=u.value;t.val(d||"cell"),i.val(c),a.val(m),n.val(h),Array.isArray(f)?(l.val(f[0]),s.val(f[1])):(r.val(f||""),o.val(f||"")),this.criteriaSelected(m),this.criteriaOperatorSelected(h)}this.show()}}])&&h(i.prototype,a),u&&h(i,u),t}(a.default);t.default=y},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1);function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t,i){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vchange=function(){},this.el=(0,a.h)("div","".concat(n.cssPrefix,"-form-input")),this.input=(0,a.h)("input","").css("width",t).on("input",(function(e){return r.vchange(e)})).attr("placeholder",i),this.el.child(this.input)}var t,i,o;return t=e,(i=[{key:"hint",value:function(e){this.input.attr("placeholder",e)}},{key:"val",value:function(e){return this.input.val(e)}}])&&r(t.prototype,i),o&&r(t,o),e}();t.default=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=(a=i(52))&&a.__esModule?a:{default:a},o=i(1);function l(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t,i,a){var l=this,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(e){return e},d=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.key=t,this.getTitle=s,this.vchange=function(){},this.el=(0,n.h)("div","".concat(o.cssPrefix,"-form-select")),this.suggest=new r.default(i.map((function(e){return{key:e,title:l.getTitle(e)}})),(function(e){l.itemClick(e.key),d(e.key),l.vchange(e.key)}),a,this.el),this.el.children(this.itemEl=(0,n.h)("div","input-text").html(this.getTitle(t)),this.suggest.el).on("click",(function(){return l.show()}))}var t,i,a;return t=e,(i=[{key:"show",value:function(){this.suggest.search("")}},{key:"itemClick",value:function(e){this.key=e,this.itemEl.html(this.getTitle(e))}},{key:"val",value:function(e){return void 0!==e?(this.key=e,this.itemEl.html(this.getTitle(e)),this):this.key}}])&&l(t.prototype,i),a&&l(t,a),e}();t.default=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1),r=i(8);function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l={number:/(^\d+$)|(^\d+(\.\d{0,4})?$)/,date:/^\d{4}-\d{1,2}-\d{1,2}$/},s=function(){function e(t,i,r,o){var l=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.label="",this.rule=i,r&&(this.label=(0,a.h)("label","label").css("width","".concat(o,"px")).html(r)),this.tip=(0,a.h)("div","tip").child("tip").hide(),this.input=t,this.input.vchange=function(){return l.validate()},this.el=(0,a.h)("div","".concat(n.cssPrefix,"-form-field")).children(this.label,t.el,this.tip)}var t,i,s;return t=e,(i=[{key:"isShow",value:function(){return"none"!==this.el.css("display")}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"val",value:function(e){return this.input.val(e)}},{key:"hint",value:function(e){this.input.hint(e)}},{key:"validate",value:function(){var e=this.input,t=this.rule,i=this.tip,a=this.el,n=e.val();return t.required&&/^\s*$/.test(n)?(i.html((0,r.t)("validation.required")),a.addClass("error"),!1):!t.type&&!t.pattern||(t.pattern||l[t.type]).test(n)?(a.removeClass("error"),!0):(i.html((0,r.t)("validation.notMatch")),a.addClass("error"),!1)}}])&&o(t.prototype,i),s&&o(t,s),e}();t.default=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=(a=i(32))&&a.__esModule?a:{default:a},o=i(6),l=i(1),s=i(8);function d(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function c(e){return(0,n.h)("div","".concat(l.cssPrefix,"-item ").concat(e))}function u(e){var t=this;return c("state").child((0,s.t)("sort.".concat(e))).on("click.stop",(function(){return t.itemClick(e)}))}function m(e){var t=this,i=this.filterbEl,a=this.filterValues;i.html(""),Object.keys(e).forEach((function(r,o){var d=e[r],c=a.includes(r)?"checked":"";i.child((0,n.h)("div","".concat(l.cssPrefix,"-item state ").concat(c)).on("click.stop",(function(){return t.filterClick(o,r)})).children(""===r?(0,s.t)("filter.empty"):r,(0,n.h)("div","label").html("(".concat(d,")"))))}))}function h(){var e=this.filterhEl,t=this.filterValues,i=this.values;e.html("".concat(t.length," / ").concat(i.length)),e.checked(t.length===i.length)}var f=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filterbEl=(0,n.h)("div","".concat(l.cssPrefix,"-body")),this.filterhEl=(0,n.h)("div","".concat(l.cssPrefix,"-header state")).on("click.stop",(function(){return t.filterClick(0,"all")})),this.tindex=1,this.el=(0,n.h)("div","".concat(l.cssPrefix,"-sort-filter")).children(this.sortAscEl=u.call(this,"asc"),this.sortDescEl=u.call(this,"desc"),c("divider"),(0,n.h)("div","".concat(l.cssPrefix,"-filter")).children(this.filterhEl,this.filterbEl),(0,n.h)("div","".concat(l.cssPrefix,"-buttons")).children(new r.default("cancel").on("click",(function(){return t.btnClick("cancel")})),new r.default("ok","primary").on("click",(function(){return t.btnClick("ok")})))).hide(),this.el.on("mousedown.stop",(function(e){t.tindex=1})),this.ci=null,this.sortDesc=null,this.values=null,this.filterValues=[]}var t,i,a;return t=e,(i=[{key:"btnClick",value:function(e){if("ok"===e){var t=this.ci,i=this.sort,a=this.filterValues;this.ok&&this.ok(t,i,"in",a)}this.hide()}},{key:"itemClick",value:function(e){this.sort=e;var t=this.sortAscEl,i=this.sortDescEl;t.checked("asc"===e),i.checked("desc"===e)}},{key:"filterClick",value:function(e,t){var i=this.filterbEl,a=this.filterValues,r=this.values,o=i.children();"all"===t?o.length===a.length?(this.filterValues=[],o.forEach((function(e){return(0,n.h)(e).checked(!1)}))):(this.filterValues=Array.from(r),o.forEach((function(e){return(0,n.h)(e).checked(!0)}))):(0,n.h)(o[e]).toggle("checked")?a.push(t):a.splice(a.findIndex((function(e){return e===t})),1),h.call(this)}},{key:"set",value:function(e,t,i,a){this.ci=e;var n=this.sortAscEl,r=this.sortDescEl;null!==a?(this.sort=a.order,n.checked(a.asc()),r.checked(a.desc())):(this.sortDesc=null,n.checked(!1),r.checked(!1)),this.values=Object.keys(t),this.filterValues=i?Array.from(i.value):Object.keys(t),m.call(this,t,i),h.call(this)}},{key:"setOffset",value:function(e){var t=this;if(this.el.isShow())this.hide();else{this.el.offset(e).show();var i=1;console.log(this.el),(0,o.bindClickoutside)(this.el,(function(){0===i&&t.hide(),i=0}))}}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){this.el.hide(),(0,o.unbindClickoutside)(this.el)}}])&&d(t.prototype,i),a&&d(t,a),e}();t.default=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.xtoast=function(e,t){var i=(0,n.h)("div","".concat(o.cssPrefix,"-toast")),a=(0,n.h)("div","".concat(o.cssPrefix,"-dimmer active"));i.children((0,n.h)("div","".concat(o.cssPrefix,"-toast-header")).children(new r.default("close").on("click.stop",(function(){return document.body.removeChild(i.el),void document.body.removeChild(a.el)})),e),(0,n.h)("div","".concat(o.cssPrefix,"-toast-content")).html(t)),document.body.appendChild(i.el),document.body.appendChild(a.el);var l=i.box(),s=l.width,d=l.height,c=document.documentElement,u=c.clientHeight,m=c.clientWidth;i.offset({left:(m-s)/2,top:(u-d)/3})};var a,n=i(0),r=(a=i(9))&&a.__esModule?a:{default:a},o=i(1)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1),r=i(29);function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,i){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-advice")).children(this.save=(0,a.h)("div","".concat(n.cssPrefix,"-advice-style")).css("border-bottom","1px solid"),this.text=(0,a.h)("div","".concat(n.cssPrefix,"-advice-style"))).hide(),this.save.children(this.saveCheck=(0,a.h)("span","check").hide("visibility","hidden"),(0,a.h)("span","").html("保留样式")),this.text.children(this.textCheck=(0,a.h)("span","check").hide("visibility","hidden"),(0,a.h)("span","").html("仅文本")),this.data=t,this.sheet=i,this.left=0,this.top=0,this.save.on("mousedown.stop",(function(){o.saveCheck.show("visibility","initial"),o.textCheck.hide("visibility","hidden"),o.sheet.setCellRange(o.reference,o.tableProxy,!0),r.sheetReset.call(o.sheet)})),this.text.on("mousedown.stop",(function(){o.sheet.setCellRange(o.reference,o.tableProxy,!1),o.saveCheck.show("visibility","hidden"),o.textCheck.hide("visibility","initial"),r.sheetReset.call(o.sheet)}))}var t,i,l;return t=e,(i=[{key:"show",value:function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;this.el.css("left","".concat(e,"px")),this.el.css("top","".concat(t,"px")),1===i&&(this.saveCheck.show("visibility","initial"),this.textCheck.hide("visibility","hidden")),this.left=parseInt(e),this.top=parseInt(t),this.tableProxy=n,this.reference=a,this.el.show()}}])&&o(t.prototype,i),l&&o(t,l),e}();t.default=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(0),r=i(1),o=(a=i(3))&&a.__esModule?a:{default:a},l=i(138);function s(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var d=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.el=(0,n.h)("div","".concat(r.cssPrefix,"-hyperlink-tooltip")).hide(),this.tableEl=(0,n.h)("div","".concat(r.cssPrefix,"-hyperlink-tooltip")).hide(),this.editor=i,this.tableEl.attr("tabindex",0),this.tableEl.css("overflow-y","auto"),this.tableEl.css("max-height","400px"),this.timer=null,this.timer2=null}var t,i,a;return t=e,(i=[{key:"show",value:function(e,t){var i=this;if(this.editor.isDisplay2())return this.el.hide(),void this.tableEl.hide();var a=this.data,s=a.getCellTextOrDefault(e,t)+"";if(clearTimeout(this.timer),clearTimeout(this.timer2),0===r.look.indexOf(s.split("!")[0])){var d=a.getRect(new o.default(e,t,e,t)),c=d.left+55,u=d.top+50,m=JSON.parse(s.substring(s.indexOf("!")+1,s.length));this.tableEl.css("left","".concat(c,"px")),this.tableEl.css("top","".concat(u,"px")),this.tableEl.css("user-select","text"),this.tableEl.html("");var h=(0,n.h)("table","");h.css("border-spacing","0px");var f=(0,n.h)("tr","");f.children((0,n.h)("td","").css("border","1px solid black").html("序号"),(0,n.h)("td","").css("border","1px solid black").html("项目名称"),(0,n.h)("td","").css("border","1px solid black").html("城市"),(0,n.h)("td","").css("border","1px solid black").html("占地面积"),(0,n.h)("td","").css("border","1px solid black").html("差额")),h.children(f);for(var v=0;v<m.length;v++){var p=m[v],g=p.number,y=p.name,b=p.city,x=p.area,A=p.value,w=(0,n.h)("tr",""),E=(0,n.h)("td","");E.html(g),E.css("border","1px solid black");var C=(0,n.h)("td","");C.html(y),C.css("border","1px solid black");var T=(0,n.h)("td","");T.html(b),T.css("border","1px solid black");var O=(0,n.h)("td","");O.html(x),O.css("border","1px solid black");var S=(0,n.h)("td","");S.html(A),S.css("border","1px solid black"),w.children(E,C,T,O,S),h.children(w)}this.tableEl.children(h),this.timer=setTimeout((function(){i.tableEl.show(),i.el.hide()}),150)}else{var R=(0,l.isSpecialWebsite)(s);if(R.state&&(s=R.text),"http://"!==(s="www"===s.substr(0,3).toLowerCase()?"http://"+s:s).substr(0,7).toLowerCase()&&"https://"!==s.substr(0,8).toLowerCase())return this.el.hide(),void this.tableEl.hide();var k=a.getRect(new o.default(e,t,e,t)),I=k.left+55,P=k.top+5;this.el.html(""),this.el.css("color","blue"),this.el.children((0,n.h)("div","aaa").css("border-bottom","1px solid blue").on("click",(function(e){console.log(e);var t=e.screenX,i=e.screenY;window.open(s,"","width=".concat(650,",height=").concat(500,",left=").concat(t+k.width,",top=").concat(i))})).html(s)),this.el.css("left","".concat(I,"px")),this.el.css("top","".concat(P,"px")),this.timer2=setTimeout((function(){i.el.show(),i.tableEl.hide()}),150)}}}])&&s(t.prototype,i),a&&s(t,a),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSpecialWebsite=function(e){if(1===a.look.indexOf(e.split("!")[0]))return{state:!0,text:JSON.parse(e.split("!")[1]).url};return{state:!1,text:""}},t.specialWebsiteValue=function(e,t){var i=function(e,t){if(1===a.look.indexOf(e.split("!")[0])&&-1===t.toUpperCase().indexOf(n))return 2;return 0}(e,t);if(2===i){var r=e.split(" "),o="";if(r.length>=1){e=r[0];for(var l=1;l<r.length;l++)o+=r[l]}return{state:!0,type:i,text:JSON.parse(e.split("!")[1]).text+o}}return{state:!1,type:i,text:""}},t.multipleCellsRender=function(e,t){var i=[];return Object.keys(t).forEach((function(a){e[a]=t[a],i.push(a)})),i};var a=i(1),n="HYPERLINK"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(i(56)),n=i(0),r=s(i(32)),o=i(8),l=i(1);function s(e){return e&&e.__esModule?e:{default:e}}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function u(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e,t,i){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,i){var a=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(a){var n=Object.getOwnPropertyDescriptor(a,t);return n.get?n.get.call(i):n.value}})(e,t,i||e)}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=(0,n.h)("span","").html("您输入的公式好像至少缺少一个左括号");return(e=u(this,h(t).call(this,(0,o.t)("contextmenu.errorPop"),[(0,n.h)("div","".concat(l.cssPrefix,"-form-fields")).children(i),(0,n.h)("div","".concat(l.cssPrefix,"-form-fields")),(0,n.h)("div","".concat(l.cssPrefix,"-buttons")).children(new r.default("ok","primary").on("click",(function(){return e.btnClick("ok")})))]))).tip=i,e}var i,a,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),i=t,(a=[{key:"show",value:function(e){this.tip.html(e),m(h(t.prototype),"show",this).call(this)}},{key:"btnClick",value:function(e){"ok"===e&&this.hide()}}])&&c(i.prototype,a),s&&c(i,s),t}(a.default);t.default=v},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(1),n=i(4);function r(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rect=t}var t,i,o;return t=e,(i=[{key:"isLocInside",value:function(e,t){var i=this.rect;return e<i.width+i.left&&e>i.left&&t-a.offsetTop>i.top&&t-a.offsetTop<i.top+i.height}},{key:"getUpDownLeftRight",value:function(e,t,i,r){var o=this.rect,l=0;return e<o.width+o.left&&e>o.left?t>o.top+o.height+a.offsetTop?l=1:t-a.offsetTop<o.top&&(l=4):t-(o.top-o.height+a.offsetTop)>0&&o.height+o.top+a.offsetTop>t&&(e>o.width+o.left?l=3:e<o.left&&(l=2)),0===l&&(l=(0,n.positionAngle)(i,e,r,t)),1===l&&t<0?l=4:document.body.clientHeight<t&&4===l&&(l=1),3===l&&e<0?l=2:document.body.clientWidth<e&&2===l&&(l=3),l}}])&&r(t.prototype,i),o&&r(t,o),e}();t.default=o},function(e,t,i){"use strict";function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.timer=[]}var t,i,n;return t=e,(i=[{key:"push",value:function(e){this.timer.push(e)}},{key:"clear",value:function(){for(var e=0;e<this.timer.length;e++){var t=this.timer[e];clearTimeout(t),clearInterval(t)}}}])&&a(t.prototype,i),n&&a(t,n),e}();t.default=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(0),n=i(1);t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-chart"))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(e,t){this.register=function(i){var a=[],n=["nw","w","ws","s","se","e","ne","n"];n.forEach((function(e){var t=document.createElement("div");t.style.display="block",t.className="direction "+e,a.push(t),i.appendChild(t)}));for(var r=0;r<4;r++){var o=document.createElement("div");o.style.display="block",o.className="line".concat(r+1),i.appendChild(o),a.push(o)}var l=document.createElement("div");function s(a){a<20&&(a=20),e.onResize({width:a},t),i.style.width=a+"px"}function d(a){a<20&&(a=20),e.onResize({height:a},t),i.style.height=a+"px"}l.className="border",i.appendChild(l),n.forEach((function(t){var a=i.querySelector("."+t);a.onmousedown=function(n){if(0===n.button){var r={ox:n.clientX,oy:n.clientY,ow:i.offsetWidth,oh:i.offsetHeight,ol:i.offsetLeft,ot:i.offsetTop};e&&e.onBegin&&e.onBegin.call(i,r);var o=!0;window.onmousemove=function(e){if(o){var i=e.clientX,n=e.clientY,l=i-r.ox,s=n-r.oy;r.width=l,r.height=s;var d=c[t];d&&d.call(a,r,e),e.stopPropagation()}},window.onmouseup=function(t){o=!1,t.stopPropagation(),e&&e.onEnd&&e.onEnd.call(i)},n.stopPropagation()}}})),e?e.onResize||(e.onResize=function(){}):e={onResize:function(){}};var c={s:function(e){d(e.oh+e.height)},e:function(e){s(e.ow+e.width)},w:function(a){var n=a.width,r=a.ol+n,o=a.ow+Math.abs(n);n>0&&(o=a.ow-n),o>20&&(!function(a){e.onResize({left:a},t),i.style.left=a+"px"}(r),s(o))},n:function(a){var n=a.height,r=a.ot+n,o=a.oh+Math.abs(n);n>0&&(o=a.oh-n),o>20&&(d(o),function(a){e.onResize({top:a},t),i.style.top=a+"px"}(r))},se:function(e){c.s(e),c.e(e)},nw:function(e){c.n(e),c.w(e)},ws:function(e){c.w(e),c.s(e)},ne:function(e){c.n(e),c.e(e)}};return a}};t.default=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(28),r=i(25),o=i(4),l=(a=i(3))&&a.__esModule?a:{default:a},s=i(7);function d(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.rows=new r.Rows({len:0,height:0},t)}var t,i,a;return t=e,(i=[{key:"getComputedStyle",value:function(e){var t=!1;return e.fontWeight>400&&(t=!0),{color:e.color,bgcolor:e.background.substring(0,e.background.indexOf(")")+1),font:{bold:t}}}},{key:"extend",value:function(e,t){var i=t.ri,a=t.ci,n=this.data;if(e.rows.length>=n.rows.len-i){var r=e.rows.length-(n.rows.len-i);r>0&&n.insert("row",r)}if(!1!==(0,s.isHave)(e.rows[0])&&!1!==(0,s.isHave)(e.rows[0].cells)){var o=e.rows[0].cells.length;if(o>=n.cols.len){var l=o-(n.cols.len-a);l>0&&n.insert("column",l,n.cols.len)}}}},{key:"each",value:function(e,t){for(var i=0;i<e.rows.length;i++)for(var a=0;a<e.rows[i].cells.length;a++)t(i,a,e.rows[i].cells[a])}},{key:"dealColSpan",value:function(e){this.each(e,(function(t,i,a){var n=a.getAttribute("colspan");if(n&&n>1)for(var r=0;r<n-1;r++)e.rows[t].insertBefore(document.createElement("td"),e.rows[t].cells[i+1])}))}},{key:"dealStyle",value:function(e,t){var i=this,a=t.ri,r=t.ci,o=this.data,l=this.rows,s=o.styles;this.each(e,(function(e,t,o){var d=document.defaultView.getComputedStyle(o,null),c=i.getComputedStyle(d),u=(0,n.isHaveStyle)(s,c);-1===u&&s.push(c),l.setCell(a+e,r+t,{style:-1===u?s.length-1:u},"all")}))}},{key:"parseTableCellRange",value:function(e,t){var i=t.ri,a=t.ci,n=i,r=a;return this.each(e,(function(e,t){var o=i+e,l=a+t;n<o&&(n=o),r<l&&(r=l)})),new l.default(i,a,n,r)}},{key:"dealReference",value:function(e,t){var i=t.ri,a=t.ci,n=this.rows,r=[];return this.each(e,(function(e,t,l){var s=l.querySelector("reference"),d=l.innerText||"";if(s){var c=s.getAttribute("ri"),u=s.getAttribute("ci"),m=(0,o.splitStr)(d),h=e+i-c,f=t+a-u,v=n.getCellTextByShift(m,f,h),p=v.bad,g=v.result;n.updateCellReferenceByShift(p,g,i+e,a+t)}else{var y=n.getCell(i+e,a+t)||{};y.text=d,y.formulas=d,n.setCell(i+e,a+t,y,"all")}r.push({ri:i+e,ci:a+t})})),{reference:r}}}])&&d(t.prototype,i),a&&d(t,a),e}();t.default=c},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatDate=function(e){if(!(0,l.isHave)(e)||!(0,l.isNumber)(e))return{state:!1,date_formula:"",minute:!1};var t=s(e,(function(e){return 24*e*60}));t=(0,o.formatNumberRender)(t,5);var i=(0,n.default)("1900-01-01"),a=(0,n.default)("1900-01-01"),r=!1;if((0,l.isHave)(t)&&1*t>0){var d=s(t,(function(e){return 60*e}));r=!0,d=(0,o.formatNumberRender)(d,5),a=(0,n.default)("1900-01-01  00:00:00").set("minute",t).set("second",d)}var c="";if(r){c=i.add(e,"day").subtract(2,"day").format("YYYY-MM-DD");var u=a.add(e,"day").subtract(2,"day").format("YYYY-MM-DD  h:mm:ss");return{state:"Invalid Date"!==c,date:c,date_formula:u,minute:!0}}return{state:"Invalid Date"!==(c=i.add(e,"day").subtract(2,"day").format("YYYY-MM-DD")),date:c,date_formula:"",minute:!1}},t.changeFormat=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"YYYY年MM月DD日";return(0,n.default)(e).format(t)},t.calcDecimals=s,t.dateDiff=function(e){for(var t=!1,i=0;!1===t&&i<r.datePattern.length;i++)t=(0,r.str2Re)(r.datePattern[i]).test(e);return!1===t?{isValid:!1}:(e=(e=e.replace(/[年|月]/g,"-")).replace(/[日]/g,""),{diff:(0,n.default)(e).diff((0,n.default)("1900-01-01"),"day")+2,isValid:!0})};var a,n=(a=i(33))&&a.__esModule?a:{default:a},r=i(16),o=i(31),l=i(15);function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},i=e.toString().split(".");if(i.length>2)return e;for(var a=i[1]+"",n=a,r=0;r<a.length;r++)n*=.1;return t(n)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=i(5),r=(a=i(58))&&a.__esModule?a:{default:a},o=i(23);function l(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function s(e){this.undoItems.push(e),this.redoItems=[]}var d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.undoItems=[],this.redoItems=[],this.data=t}var t,i,a;return t=e,(i=[{key:"addStep",value:function(e,t){var i=e.type,a=e.action,n=e.ri,l=e.ci,d=e.expr,c=e.cellRange,u=e.cells,m=e.height,h=e.width,f=e.property,v=e.value,p=e.oldData,g=t.oldCell,y=t.newCell,b=t.oldMergesData,x=t.newMergesData,A=t.oldStep,w="";1===i?(w=new r.default({type:i,action:a,ri:n,ci:l,expr:d,oldCell:g,newCell:y},this.data),s.call(this,w)):2===i||5===i||11===i||12===i||6===i?(w=new r.default({type:i,oldMergesData:b,property:f,value:v,newMergesData:x,action:a,cellRange:c,oldCell:g,newCell:u},this.data),s.call(this,w)):13===i?(w=new r.default({type:i,oldData:p,newData:A.oldData,action:a},this.data),s.call(this,w)):3===i?(w=new r.default({type:i,action:a,height:m,ri:n,oldStep:A},this.data),s.call(this,w)):4===i&&(w=new r.default({type:i,action:a,width:h,ci:l,oldStep:A},this.data),s.call(this,w)),o.testValid.call(this)}},{key:"getStepType",value:function(e,t){var i=t.ri,a=t.ci,r=t.expr,o=t.text,l=t.range,s=t.cellRange,d=t.property,c=t.value,u="",m=this.data,h=m.rows,f=m.cols;if(1===e)return{action:u="在".concat(r,'中键入"').concat(o,'"'),type:e,ri:i,ci:a,expr:r};if(2===e){var v=(0,n.xy2expr)(l.sci,l.sri),p=(0,n.xy2expr)(l.eci,l.eri);return r=v===p?v:"".concat(v,":").concat(p),{action:u="删除".concat(r,"的单元格内容"),type:e,cellRange:l,cells:this.eachRange(l)}}return 3===e?{action:u="行宽",type:e,height:h.getHeight(i),ri:i}:4===e?{action:u="列宽",type:e,width:f.getWidth(a),ci:a}:5===e?{action:u="自动填充",type:e,cellRange:l,cells:this.eachRange(s)}:12===e?{action:u="选择性粘贴",type:e,cellRange:l,property:d,value:c,cells:this.eachRange(s)}:13===e?{action:u="插入单元格",type:e,oldData:this.data.getData()}:11===e?("font-bold"===d||"font-italic"===d||"font-name"===d||"font-size"===d||"color"===d?u="字体":"underline"===d?u="下划线":"bgcolor"===d||"format"===d?u="单元格格式":"align"===d?"left"===c?u="左对齐":"center"===c?u="居中":"right"===c&&(u="右对齐"):"valign"===d?"top"===c?u="顶端对齐":"center"===c?u="居中":"bottom"===c&&(u="底端对齐"):"border"===d?u="边框":"strike"===d?u="删除线":"merge"===d&&(u="合并单元格"),{action:u,type:e,cellRange:l,property:d,value:c,cells:this.eachRange(s)}):6===e?{action:u="粘贴",type:e,cellRange:l,cells:this.eachRange(s)}:void 0}},{key:"undo",value:function(){var e=this.does(this.getItems(1),1);this.redoItems.push(e)}},{key:"redo",value:function(){var e=this.does(this.getItems(2),2);this.undoItems.push(e)}},{key:"eachRange",value:function(e){return this.data.rows.eachRange(e)}},{key:"does",value:function(e,t){if(this.data.settings.showEditor&&!(e.length<=0)){var i=this.data,a=i.sheet,n=e.pop();return n.restore(i,a,t),n}}},{key:"getItems",value:function(e){return 1===e?this.undoItems:this.redoItems}}])&&l(t.prototype,i),a&&l(t,a),e}();t.default=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,n=(a=i(20))&&a.__esModule?a:{default:a},r=i(5);function o(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.selectorRange=t,this.dstRange=i}var t,i,a;return t=e,(i=[{key:"getPaintType",value:function(){var e=this.dstRange,t=this.selectorRange;return function(e,t){return 1===e&&1===t?1:1===e&&2===t?2:1===e&&3===t?3:2===e&&1===t?4:3===e&&1===t?5:2===e&&2===t?6:2===e&&3===t?7:3===e&&2===t?8:3===e&&3===t?9:void 0}(e.getType(),t.getType())}},{key:"makePaintArr",value:function(e,t){var i=this.dstRange,a=this.selectorRange,o=[],l=a.eci-a.sci,s=0,d=i.sri,c=0,u=function(e,t){var i=t.sri,a=[],n=[],r=0;return t.each((function(t,o){i!==t&&(i=t,a.push(n),n=[]),n.push(e[r]),r+=1})),a.push(n),a}(t,a);return i.each((function(e,t){d!==e&&(s=0,(c+=1)===u.length&&(c=0));var i=u[c][s].cell,a=new n.default(e,t,i,(0,r.xy2expr)(e,t));o.push(a),s===l?s=0:s+=1,d=e})),o}}])&&o(t.prototype,i),a&&o(t,a),e}();t.default=l},function(e,t,i){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={toolbar:{undo:"撤销",redo:"恢复",paintformat:"格式刷",clearformat:"清除格式",format:"数据格式",font:"字体",fontSize:"字号",fontBold:"加粗",fontItalic:"倾斜",underline:"下划线",strike:"删除线",textColor:"字体颜色",fillColor:"填充颜色",border:"边框",merge:"合并单元格",align:"水平对齐",valign:"垂直对齐",textwrap:"自动换行",freeze:"冻结",autofilter:"自动筛选",add:"显示公式",calc:"开始计算",formula:"函数",more:"更多",comeBack:"返回",chart:"插入图表"},revision:{comeBack:"退出"},contextmenu:{copy:"复制",cut:"剪切",paste:"粘贴",pasteValue:"粘贴数据",pasteFormat:"粘贴格式",insertRow:"插入行",insertColumn:"插入列",deleteRow:"删除行",deleteColumn:"删除列",deleteCell:"删除",deleteCellText:"删除数据",validation:"数据验证",errorPop:"出现问题",recover:"恢复此版本"},format:{normal:"常规",text:"文本",number:"数值",percent:"百分比",rmb:"人民币",usd:"美元",date:"短日期",time:"时间",datetime:"长日期",duration:"持续时间"},date_formula:{sum:"求和",average:"求平均值",max:"求最大值",min:"求最小值",concat:"字符拼接",wland:"MD.WLAND",wfr:"MD.WFR",rtd:"MD.RTD"},validation:{required:"此值必填",notMatch:"此值不匹配验证规则",between:"此值应在 {} 和 {} 之间",notBetween:"此值不应在 {} 和 {} 之间",notIn:"此值不在列表中",equal:"此值应该等于 {}",notEqual:"此值不应该等于 {}",lessThan:"此值应该小于 {}",lessThanEqual:"此值应该小于等于 {}",greaterThan:"此值应该大于 {}",greaterThanEqual:"此值应该大于等于 {}"},error:{pasteForMergedCell:"无法对合并的单元格执行此操作"},calendar:{weeks:["日","一","二","三","四","五","六"],months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]},button:{cancel:"取消",remove:"删除",save:"保存",ok:"确认"},sort:{desc:"降序",asc:"升序"},filter:{empty:"空白"},dataValidation:{mode:"模式",range:"单元区间",criteria:"条件",modeType:{cell:"单元格",column:"列模式",row:"行模式"},type:{list:"列表",number:"数字",date:"日期",phone:"手机号",email:"电子邮件"},operator:{be:"在区间",nbe:"不在区间",lt:"小于",lte:"小于等于",gt:"大于",gte:"大于等于",eq:"等于",neq:"不等于"}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bugout=void 0;var a=i(151),n="";t.bugout=n;try{t.bugout=n=new a.debugout}catch(e){console.error(e)}},function(e,t,i){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.debugout=function(){var e=this;if(e.realTimeLoggingOn=!0,e.useTimestamps=!1,e.useLocalStorage=!0,e.recordLogs=!0,e.autoTrim=!0,e.maxLines=2500,e.tailNumLines=100,e.logFilename="debugout.txt",e.depth=0,e.parentSizes=[0],e.currentResult="",e.startTime=new Date,e.output="",this.version=function(){return"0.5.0"},this.getLog=function(){var t=new Date;if(e.recordLogs||e.log("[debugout.js] log recording is off."),e.useLocalStorage){var i=window.localStorage.getItem("debugout.js");i&&(i=JSON.parse(i),e.startTime=new Date(i.startTime),e.output=i.log,t=new Date(i.lastLog))}return e.output+"\n---- Log retrieved: "+t+" ----\n"+e.formatSessionDuration(e.startTime,t)},this.tail=function(t){t=t||e.tailLines;return e.trimLog(e.getLog(),t)},this.search=function(t){for(var i=e.output.split("\n"),a=new RegExp(t),n=[],r=0;r<i.length;r++){var o="["+r+"] ";i[r].match(a)&&n.push(o+i[r])}var l=n.join("\n");return 0===l.length&&(l='Nothing found for "'+t+'".'),l},this.getSlice=function(t,i){return e.output.split("\n").slice(t,t+i).join("\n")},this.downloadLog=function(){var t="data:text/plain;charset=utf-8,",i=e.getLog();t+=encodeURIComponent(i);var a=document.createElement("a");a.href=t,a.target="_blank",a.download=e.logFilename,document.body.appendChild(a),a.click(),a.remove()},this.clear=function(){var t=new Date;if(e.output="---- Log cleared: "+t+" ----\n",e.useLocalStorage){var i={startTime:e.startTime,log:e.output,lastLog:t};i=JSON.stringify(i),window.localStorage.setItem("debugout.js",i)}e.realTimeLoggingOn&&console.log("[debugout.js] clear()")},this.log=function(t){if(e.realTimeLoggingOn&&console.log(t),null!==e.determineType(t)&&e.recordLogs){var i=t;if(e.useTimestamps){var a=new Date;e.output+=e.formatTimestamp(a)}if(e.output+=i+"\n",e.autoTrim&&(e.output=e.trimLog(e.output,e.maxLines)),e.useLocalStorage){var n=new Date,r={startTime:e.startTime,log:e.output,lastLog:n};r=JSON.stringify(r),window.localStorage.setItem("debugout.js",r)}}e.depth=0,e.parentSizes=[0],e.currentResult=""},this.determineType=function(e){if(null!==e){var t,i=a(e);if("object"===i)t=null===e.length?"function"==typeof e.getTime?"Date":"function"==typeof e.test?"RegExp":"Object":"Array";else t=i;return t}return null},this.formatType=function(t,i){switch(t){case"Object":e.currentResult+="{\n",e.depth++,e.parentSizes.push(e.objectSize(i));var a=0;for(var n in i){e.currentResult+=e.indentsForDepth(e.depth),e.currentResult+=n+": ";var r=e.determineType(i[n]);(o=e.formatType(r,i[n]))?(e.currentResult+=o,a!==e.parentSizes[e.depth]-1&&(e.currentResult+=","),e.currentResult+="\n"):(a!==e.parentSizes[e.depth]-1&&(e.currentResult+=","),e.currentResult+="\n"),a++}if(e.depth--,e.parentSizes.pop(),e.currentResult+=e.indentsForDepth(e.depth),e.currentResult+="}",0===e.depth)return e.currentResult;break;case"Array":e.currentResult+="[",e.depth++,e.parentSizes.push(i.length);for(a=0;a<i.length;a++){var o;"Object"!==(r=e.determineType(i[a]))&&"Array"!==r||(e.currentResult+="\n"+e.indentsForDepth(e.depth)),(o=e.formatType(r,i[a]))?(e.currentResult+=o,a!==e.parentSizes[e.depth]-1&&(e.currentResult+=", "),"Array"===r&&(e.currentResult+="\n")):(a!==e.parentSizes[e.depth]-1&&(e.currentResult+=", "),"Object"!==r?e.currentResult+="\n":a===e.parentSizes[e.depth]-1&&(e.currentResult+="\n"))}if(e.depth--,e.parentSizes.pop(),e.currentResult+="]",0===e.depth)return e.currentResult;break;case"function":var l=(i+="").split("\n");for(a=0;a<l.length;a++)l[a].match(/\}/)&&e.depth--,e.currentResult+=e.indentsForDepth(e.depth),l[a].match(/\{/)&&e.depth++,e.currentResult+=l[a]+"\n";return e.currentResult;case"RegExp":return"/"+i.source+"/";case"Date":case"string":return e.depth>0||0===i.length?'"'+i+'"':i;case"boolean":return i?"true":"false";case"number":return i+""}},this.indentsForDepth=function(e){for(var t="",i=0;i<e;i++)t+="\t";return t},this.trimLog=function(e,t){var i=e.split("\n");return i.length>t&&(i=i.slice(i.length-t)),i.join("\n")},this.lines=function(){return e.output.split("\n").length},this.formatSessionDuration=function(e,t){var i=t-e,a=Math.floor(i/1e3/60/60),n=("0"+a).slice(-2);i-=1e3*a*60*60;var r=Math.floor(i/1e3/60),o=("0"+r).slice(-2);i-=1e3*r*60;var l=Math.floor(i/1e3);return i-=1e3*l,"---- Session duration: "+n+":"+o+":"+("0"+l).slice(-2)+" ----"},this.formatTimestamp=function(e){var t=e.getFullYear(),i=e.getDate();return"["+t+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+i+" "+Number(e.getHours())+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"]: "},this.objectSize=function(e){var t,i=0;for(t in e)e.hasOwnProperty(t)&&i++;return i},e.useLocalStorage){var t=window.localStorage.getItem("debugout.js");if(t){t=JSON.parse(t),e.output=t.log;var i=new Date(t.startTime),n=new Date(t.lastLog);e.output+="\n---- Session end: "+t.lastLog+" ----\n",e.output+=e.formatSessionDuration(i,n),e.output+="\n\n"}}e.output+="---- Session started: "+e.startTime+" ----\n\n"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,