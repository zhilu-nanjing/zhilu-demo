!function(e){function t(t){for(var n,o,l=t[0],s=t[1],u=t[2],d=0,f=[];d<l.length;d++)o=l[d],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&f.push(a[o][0]),a[o]=0;for(n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n]);for(c&&c(t);f.length;)f.shift()();return i.push.apply(i,u||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,l=1;l<r.length;l++){var s=r[l];0!==a[s]&&(n=!1)}n&&(i.splice(t--,1),e=o(o.s=r[0]))}return e}var n={},a={2:0,0:0},i=[];function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var l=window.webpackJsonp=window.webpackJsonp||[],s=l.push.bind(l);l.push=t,l=l.slice();for(var u=0;u<l.length;u++)t(l[u]);var c=s;i.push([80,1]),r()}([function(e,t,r){"use strict";function n(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.h=t.Element=void 0;var i=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"==typeof t?(this.el=document.createElement(t),this.el.className=r):this.el=t,this.data={}}var t,r,i;return t=e,(r=[{key:"data",value:function(e,t){return void 0!==t?(this.data[e]=t,this):this.data[e]}},{key:"on",value:function(e,t){var r=n(e.split(".")),a=r[0],i=r.slice(1),o=a;return"mousewheel"===o&&/Firefox/i.test(window.navigator.userAgent)&&(o="DOMMouseScroll"),this.el.addEventListener(o,(function(e){t(e);for(var r=0;r<i.length;r+=1){var n=i[r];if("left"===n&&0!==e.button)return;if("right"===n&&2!==e.button)return;"stop"===n&&e.stopPropagation()}})),this}},{key:"offset",value:function(e){var t=this;if(void 0!==e)return Object.keys(e).forEach((function(r){t.css(r,"".concat(e[r],"px"))})),this;var r=this.el;return{top:r.offsetTop,left:r.offsetLeft,height:r.offsetHeight,width:r.offsetWidth}}},{key:"scroll",value:function(e){var t=this.el;return void 0!==e&&(void 0!==e.left&&(t.scrollLeft=e.left),void 0!==e.top&&(t.scrollTop=e.top)),{left:t.scrollLeft,top:t.scrollTop}}},{key:"box",value:function(){return this.el.getBoundingClientRect()}},{key:"parent",value:function(){return new e(this.el.parentNode)}},{key:"children",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return 0===arguments.length?this.el.childNodes:(r.forEach((function(t){return e.child(t)})),this)}},{key:"child",value:function(t){var r=t;return"string"==typeof t?r=document.createTextNode(t):t instanceof e&&(r=t.el),this.el.appendChild(r),this}},{key:"contains",value:function(e){return this.el.contains(e)}},{key:"className",value:function(e){return void 0!==e?(this.el.className=e,this):this.el.className}},{key:"addClass",value:function(e){return this.el.classList.add(e),this}},{key:"hasClass",value:function(e){return this.el.classList.contains(e)}},{key:"removeClass",value:function(e){return this.el.classList.remove(e),this}},{key:"toggle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"active";return this.toggleClass(e)}},{key:"toggleClass",value:function(e){return this.el.classList.toggle(e)}},{key:"active",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"active";return e?this.addClass(t):this.removeClass(t),this}},{key:"checked",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.active(e,"checked"),this}},{key:"disabled",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return e?this.addClass("disabled"):this.removeClass("disabled"),this}},{key:"attr",value:function(e,t){var r=this;if(void 0!==t)this.el.setAttribute(e,t);else{if("string"==typeof e)return this.el.getAttribute(e);Object.keys(e).forEach((function(t){r.el.setAttribute(t,e[t])}))}return this}},{key:"removeAttr",value:function(e){return this.el.removeAttribute(e),this}},{key:"html",value:function(e){return void 0!==e?(this.el.innerHTML=e,this):this.el.innerHTML}},{key:"val",value:function(e){return void 0!==e?(this.el.value=e,this):this.el.value}},{key:"cssRemoveKeys",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.forEach((function(t){return e.el.style.removeProperty(t)})),this}},{key:"css",value:function(e,t){var r=this;return void 0===t&&"string"!=typeof e?(Object.keys(e).forEach((function(t){r.el.style[t]=e[t]})),this):void 0!==t?(this.el.style[e]=t,this):this.el.style[e]}},{key:"removeEl",value:function(){this.el&&this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},{key:"computedStyle",value:function(){return window.getComputedStyle(this.el,null)}},{key:"isShow",value:function(){return"block"===this.el.style.display}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"display",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"block";return this.css(e,t),this}},{key:"hide",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"display",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"none";return this.css(e,t),this}}])&&a(t.prototype,r),i&&a(t,i),e}();t.Element=i;t.h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new i(e,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.offsetTop=t.offsetLeft=t.filterFormula=t.look2=t.look=t.cssPrefix=void 0;t.cssPrefix="fin-cell";t.look=["*悬浮查看*","*HYPERLINK*","*MULTIPLECELLS*"];t.look2="#CHECK！";t.filterFormula=["CITY"];t.offsetLeft=60;t.offsetTop=70},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.errorObj=t.errorMsgArr=t.ERROR_NON_SOLVED=t.ERROR_SYNTAX=t.ERROR_ERROR=t.ERROR_CIRCULAR=t.ERROR_DATE_STR=t.ERROR_GETTING_DATA=t.ERROR_NA=t.ERROR_NUM=t.ERROR_NAME=t.ERROR_REF=t.ERROR_VALUE=t.ERROR_DIV0=t.ERROR_NULL=void 0;t.ERROR_NULL="#NULL!";t.ERROR_DIV0="#DIV/0!";t.ERROR_VALUE="#VALUE!";t.ERROR_REF="#REF!";t.ERROR_NAME="#NAME?";t.ERROR_NUM="#NUM!";t.ERROR_NA="#N/A";t.ERROR_GETTING_DATA="#GETTING_DATA!";t.ERROR_DATE_STR="#DATE!";t.ERROR_CIRCULAR="#CIRCULA!";t.ERROR_ERROR="#ERROR!";t.ERROR_SYNTAX="#SYNTAX";t.ERROR_NON_SOLVED="NON_SOLVED";var n=["#NULL!","#DIV/0!","#VALUE!","#REF!","#NAME?","#NUM!","#N/A","#GETTING_DATA!","#DATE!","#CIRCULA!","#ERROR!","#SYNTAX"];t.errorMsgArr=n;var a={ERROR_NULL:new Error("#NULL!"),ERROR_DIV0:new Error("#DIV/0!"),ERROR_VALUE:new Error("#VALUE!"),ERROR_REF:new Error("#REF!"),ERROR_NAME:new Error("#NAME?"),ERROR_NUM:new Error("#NUM!"),ERROR_NA:new Error("#N/A"),ERROR_GETTING_DATA:new Error("#GETTING_DATA!"),ERROR_DATE_STR:new Error("#DATE!"),ERROR_CIRCULAR:new Error("#CIRCULA!"),ERROR_ERROR:new Error("#ERROR!"),ERROR_SYNTAX:new Error("#SYNTAX"),ERROR_NON_SOLVED:new Error("NON_SOLVED")};t.errorObj=a},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.stringAt=a,t.indexAt=i,t.expr2xy=o,t.xy2expr=l,t.default=void 0;var n=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];function a(e){for(var t="",r=e;r>=n.length;)r/=n.length,r-=1,t+=n[parseInt(r,10)%n.length];var a=e%n.length;return t+=n[a]}function i(e){for(var t=0,r=0;r<e.length-1;r+=1){var a=e.charCodeAt(r)-65,i=e.length-1-r;t+=Math.pow(n.length,i)+n.length*a}return t+=e.charCodeAt(e.length-1)-65}function o(e){for(var t="",r="",n=0;n<e.length;n+=1)e.charAt(n)>="0"&&e.charAt(n)<="9"?r+=e.charAt(n):t+=e.charAt(n);return[i(t),parseInt(r,10)-1]}function l(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e*=1,t*=1,2===r?"".concat(a(e),"$").concat(t+1):1===r?"$".concat(a(e)).concat(t+1):"".concat(a(e)).concat(t+1)}var s={expr2xy:o,xy2expr:l};t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CellRange=t.default=void 0;var n=r(4);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t,r,n,a){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sri=t,this.sci=r,this.eri=n,this.eci=a,this.w=i,this.h=o}var t,r,o;return t=e,o=[{key:"valueOf",value:function(t){var r=t.split(":"),i=a((0,n.expr2xy)(r[0]),2),o=i[0],l=i[1],s=l,u=o;if(r.length>1){var c=a((0,n.expr2xy)(r[1]),2);u=c[0],s=c[1]}return new e(l,o,s,u)}}],(r=[{key:"set",value:function(e,t,r,n){this.sri=e,this.sci=t,this.eri=r,this.eci=n}},{key:"multiple",value:function(){return this.eri-this.sri>0||this.eci-this.sci>0}},{key:"includes",value:function(){for(var e=0,t=0,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];if(1===i.length){var l=(0,n.expr2xy)(i[0]),s=a(l,2);t=s[0],e=s[1]}else 2===i.length&&(e=i[0],t=i[1]);var u=this.sri,c=this.sci,d=this.eri,f=this.eci;return u<=e&&e<=d&&c<=t&&t<=f}},{key:"each",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0},r=this.sri,n=this.sci,a=this.eri,i=this.eci,o=r;o<=a;o+=1)if(t(o))for(var l=n;l<=i;l+=1)e(o,l)}},{key:"getType",value:function(){var e=this.sri,t=this.sci,r=this.eri,n=this.eci;return e===r&&t!==n?1:e!==r&&t===n?2:e!==r&&t!==n?3:e===r&&t===n?1:(console.error("未知情况"),4)}},{key:"move",value:function(e,t){var r=this.eri-this.sri,n=this.eci-this.sci;this.sri=e,this.sci=t,this.eri=this.sri+r,this.eci=this.sci+n}},{key:"move2",value:function(e,t,r,n){this.sri=e,this.sci=t,this.eri=r,this.eci=n}},{key:"contains",value:function(e){return this.sri<=e.sri&&this.sci<=e.sci&&this.eri>=e.eri&&this.eci>=e.eci}},{key:"within",value:function(e){return this.sri>=e.sri&&this.sci>=e.sci&&this.eri<=e.eri&&this.eci<=e.eci}},{key:"disjoint",value:function(e){return this.sri>e.eri||this.sci>e.eci||e.sri>this.eri||e.sci>this.eci}},{key:"intersects",value:function(e){return this.sri<=e.eri&&this.sci<=e.eci&&e.sri<=this.eri&&e.sci<=this.eci}},{key:"getMovePos",value:function(e,t){var r=this.sri,n=this.sci,a=this.eri,i=this.eci,o=0;return e>a&&t>i?o=1:e>a&&t<n?o=7:e<r&&t>i?o=8:t<n&&e<r?o=4:e>a?o=2:t>i?o=3:t<n?o=5:e<r&&(o=6),o}},{key:"union",value:function(t){var r=this.sri,n=this.sci,a=this.eri,i=this.eci;return new e(t.sri<r?t.sri:r,t.sci<n?t.sci:n,t.eri>a?t.eri:a,t.eci>i?t.eci:i)}},{key:"difference",value:function(t){var r=[],n=function(t,n,a,i){r.push(new e(t,n,a,i))},a=this.sri,i=this.sci,o=this.eri,l=this.eci,s=t.sri-a,u=t.sci-i,c=o-t.eri,d=l-t.eci;return s>0?(n(a,i,t.sri-1,l),c>0?(n(t.eri+1,i,o,l),u>0&&n(t.sri,i,t.eri,t.sci-1),d>0&&n(t.sri,t.eci+1,t.eri,l)):(u>0&&n(t.sri,i,o,t.sci-1),d>0&&n(t.sri,t.eci+1,o,l))):c>0&&(n(t.eri+1,i,o,l),u>0&&n(a,i,t.eri,t.sci-1),d>0&&n(a,t.eci+1,t.eri,l)),u>0?(n(a,i,o,t.sci-1),d>0?(n(a,t.eri+1,o,l),s>0&&n(a,t.sci,t.sri-1,t.eci),c>0&&n(t.sri+1,t.sci,o,t.eci)):(s>0&&n(a,t.sci,t.sri-1,l),c>0&&n(t.sri+1,t.sci,o,l))):d>0&&(n(o,t.eci+1,o,l),s>0&&n(a,i,t.sri-1,t.eci),c>0&&n(t.eri+1,i,o,t.eci)),r}},{key:"size",value:function(){return[this.eri-this.sri+1,this.eci-this.sci+1]}},{key:"toString",value:function(){var e=this.sri,t=this.sci,r=this.eri,a=this.eci,i=(0,n.xy2expr)(t,e);return this.multiple()&&(i="".concat(i,":").concat((0,n.xy2expr)(a,r))),i}},{key:"includeByRiCi",value:function(e,t){var r=this.sri,n=this.sci,a=this.eri,i=this.eci;return r<=e&&a>=e&&n<=t&&i>=t}},{key:"getLocationArray",value:function(e){var t=[],r=0;return this.each((function(n,a){t.push({ri:n,ci:a,v:e[r%e.length].tmp,type:e[r%e.length].type}),r+=1})),t}},{key:"equals",value:function(e){return this.eri===e.eri&&this.eci===e.eci&&this.sri===e.sri&&this.sci===e.sci}}])&&i(t.prototype,r),o&&i(t,o),e}();t.CellRange=o;var l=o;t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLegal=function(e){var t=function(e){return"("===e||"["===e||"{"===e||"/*"===e?0:")"===e||"]"===e||"}"===e||"*/"===e?1:2},r=[];if(null!==e||""!==e||void 0!==e){for(var n=0;n<e.length;n++){var a=e.charAt(n);if(0===t(a))r.push(a);else if(!(1!==t(a)||0!==r.length&&(i=r.pop(),o=a,"("===i&&")"===o||"{"===i&&"}"===o||"["===i&&"]"===o||"/*"===i&&"*/"===o)))return!1}return 0===r.length}var i,o},t.distinct=function(e){return function(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(new Set(e))},t.changeFormula=function(e){for(var t=0;t<e.length;t++){var r=e[t];-1===r.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)&&(e[t]="".concat(r,":").concat(r))}return e},t.deepCopy=function e(t){var r=Array.isArray(t)?[]:{};for(var n in t)t.hasOwnProperty(n)&&("object"===a(t[n])&&null!==t[n]?r[n]=e(t[n]):r[n]=t[n]);return r},t.positionAngle=t.cuttingByPos2=t.cuttingByPosEnd2=t.isSheetVale=t.splitStr=t.value2absolute=t.cuttingByPosEnd=t.operation3=t.cutFirst=t.cuttingByPos=t.isAbsoluteValue=t.cutting2=t.cutting=t.cutStr=t.operation=t.operator=void 0;var n=r(19);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=["+","-","*","/","&","^","(",",","="," "," ","，"];t.operator=i;var o=["+","-","*","/","&","^","(",",","="," ","，"],l=["+","-","*","/","&","^","(",",","=",")","，"],s=function(e){for(var t=0;t<i.length;t++)if(i[t]===e)return 1;return 0};t.operation=s;var u=function(e){for(var t=0;t<i.length;t++)if(o[t]===e)return 1;return 0};t.operation3=u;var c=function(e){for(var t=0;t<l.length;t++)if(l[t]===e)return 1;return 0};t.value2absolute=function(e){for(var t="",r=!1,n=0;n<e.length;n++)!1===r&&1*e[n]>=0&&1*e[n]<=9&&(t+="$",r=!0),t+=e[n];return{s1:t,s2:"$"+e,s3:"$"+t}};t.cutStr=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("="!==(e=(e+="").toUpperCase())[0])return[];for(var a=e.split((0,n.str2Re)(n.logicOperator)),i=0;i<a.length;i++)a[i]=a[i].replace((0,n.str2Re)(n.blankOperator),"");var o=[],l=0;return a.filter((function(e){var i=!0;a.length>l+1&&(-1!==a[l+1].indexOf("(")&&(i=!1));if(r&&i)-1===(e=e.replace(/\$/g,"")).search((0,n.str2Re)(n.letterOperator))&&-1===e.search((0,n.str2Re)(n.letterAndLetterOperator))||-1===o.indexOf(e)&&o.push(e);else if(i){if(-1!==e.search((0,n.str2Re)(n.letterOperator))||-1!==e.search((0,n.str2Re)(n.letterOperatorWithDollor))||-1!==e.search((0,n.str2Re)(n.letterOperatorWithDollorEnd))||-1!==e.search((0,n.str2Re)(n.letterOperatorWithDollorPrex)))-1!==o.indexOf(e)&&!0!==t||o.push(e);else-1!==e.replace(/\$/g,"").search((0,n.str2Re)(n.letterAndLetterOperator))&&o.push(e)}l+=1})),o};t.cutFirst=function(e){for(var t="",r=0;r<e.length;r++){if(c(e[r]))return t;t+=e[r]}return t};t.cuttingByPos=function(e,t){for(var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n="",a=!1,i=t-1;i>0&&!1===a;i--)!1===(a=!1===r?1===u(e[i]):1===s(e[i]))&&(n+=e[i]);return r&&(n=n.replace(/\s/g,"")),(n=n.split("").reverse().join("")).toUpperCase()};t.cuttingByPos2=function(e,t){for(var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n="",a=!1,i=t-1;i>0&&!1===a;i--)!1===(a=!1===r?1===u(e[i]):1===s(e[i]))&&(n+=e[i]);return r&&(n=n.replace(/\s/g,"")),n=n.split("").reverse().join("")};t.cuttingByPosEnd=function(e,t){for(var r="",n=!1,a=t-1;a<e.length&&!1===n;a++)!1===(n=1===s(e[a]))&&")"!==e[a]&&(r+=e[a]);return r.toUpperCase()};t.cuttingByPosEnd2=function(e,t){for(var r="",n=t-1;n<e.length;n++)r+=e[n];return r};t.cutting=function(e){for(var t=[],r=0;r<e.length;r++)e[r]&&t.push(e[r]);return t};t.isSheetVale=function(e){return-1!==(e=e.toUpperCase()).search(/[\u4E00-\u9FA50-9a-zA-Z]+![A-Za-z]+\$\d+/)||(-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+!\$[A-Za-z]+\d+/)||(-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+!\$[A-Za-z]+\$\d+/)||-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+![A-Za-z]+\d+/)))};t.positionAngle=function(e,t,r,n){var a,i,o,l,s=0,u=Math.abs((o=(i={x:t,y:n}).x-(a={x:e,y:r}).x,l=i.y-a.y,360*Math.atan(l/o)/(2*Math.PI)));return e<t&&r<n?s=1:e>t&&r<n?s=2:e<t&&r>n?s=3:e>t&&r>n&&(s=4),1===s&&u<45?s=3:2===s&&u>30?s=1:3===s&&u>30?s=4:4===s&&u<45?s=2:s};t.isAbsoluteValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e=e.toUpperCase(),1===t?-1!==e.search(/^\$[A-Z]+\$\d+$/)?3:-1!==e.search(/^\$[A-Z]+\d+$/)?1:-1!==e.search(/^[A-Z]+\$\d+$/)&&2:3===t?-1!==e.search(/^\$[A-Z]+\$\d+$/)||(-1!==e.search(/^[A-Z]+\d+$/)||(-1!==e.search(/^\$[A-Z]+\d+$/)||-1!==e.search(/^[A-Z]+\$\d+$/))):4!==t?5===t?-1!==e.search(/^[A-Z]+\d+:\$[A-Z]+\d+$/)?8:-1!==e.search(/^[A-Z]+\d+:[A-Z]+\$\d+$/)?9:-1!==e.search(/^[A-Z]+\$\d+:[A-Z]+\d+$/)?10:-1!==e.search(/^\$[A-Z]+\d+:[A-Z]+\d+$/)?11:-1!==e.search(/^\$[A-Z]+\$\d+$/)?3:-1!==e.search(/^[A-Z]+\d+$/)?12:-1!==e.search(/^[A-Z]+\d+:[A-Z]+\d+$/)?13:-1!==e.search(/^\$[A-Z]+\d+$/)?1:-1!==e.search(/^[A-Z]+\$\d+$/)?2:-1!==e.search(/^[A-Z]+\$\d+:[A-Z]+\$\d+$/)?4:-1!==e.search(/^[A-Z]+\$\d+:\$[A-Z]+\d+$/)?5:-1!==e.search(/^\$[A-Z]+\d+:[A-Z]+\$\d+$/)?6:-1!==e.search(/^\$[A-Z]+\d+:\$[A-Z]+\d+$/)&&7:6===t?-1!==(e=e.replace(/\$/g,"")).search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/):-1!==e.search(/^[A-Za-z]+\d+$/)||-1!==e.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/):-1!==e.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)||void 0};t.splitStr=function(e){for(var t=e.split(/([(-\/,+，*\s=^&])/),r=[],n=0;n<t.length;n++){var a=1;if(t.length>n+1){var i=t[n+1];"("===t[n]?a=3:-1!==i.indexOf("(")&&(a=2)}3!==a&&(2===a?r.push(t[n]+"("):r.push(t[n]))}return r};t.cutting2=function(e){for(var t=e.split(/([(-\/,+，*\s=^&])/),r=0,n=[],a=0;a<t.length;a++)t[a]&&n.push(t[a]);for(var i=[],o=0;o<n.length;o++){var l=n[o].toUpperCase(),s=!0;if(n.length>o+1)-1!==n[o+1].indexOf("(")&&(s=!1);if(-1===l.search(/^[A-Z]+\d+$/)&&-1===l.search(/^\$[A-Z]+\$\d+$/)&&-1===l.search(/^[A-Z]+\$\d+$/)&&-1===l.search(/^\$[A-Z]+\d+$/)&&-1===l.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)||!s){if(-1!==l.replace(/\$/g,"").search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)&&s){for(var u=0;u<n[o].length;u++)i.push({code:r,data:n[o][u]});r+=1}else for(var c=0;c<n[o].length;c++)i.push({code:-1,data:n[o][c]})}else{for(var d=0;d<n[o].length;d++)i.push({code:r,data:n[o][d]});r+=1}}return i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bind=a,t.remove=function(){for(var e=0;e<n.length;e++){var t=n[e];i(t.target,t.name,t.fn)}},t.unbind=i,t.unbindClickoutside=o,t.createEvent=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"keydown",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,a=document.createEvent("HTMLEvents");a.initEvent(r,!0,!0),a.eventType="message",a.buttons=n,a.keyCode=e,a.metaKey=t,document.dispatchEvent(a)},t.bindClickoutside=function(e,t){e.xclickoutside=function(r){2===r.detail||e.contains(r.target)||(t?t(e):(e.hide(),o(e)))},a(window.document.body,"click",e.xclickoutside)},t.mouseMoveUp=function(e,t,r){a(e,"mousemove",t),e.xEvtUp=function(n){i(e,"mousemove",t),i(e,"mouseup",e.xEvtUp),r(n)},a(e,"mouseup",e.xEvtUp)},t.bindTouch=function(e,t){var r=t.move,n=t.end,i=0,o=0;a(e,"touchstart",(function(e){var t=e.touches[0],r=t.pageX,n=t.pageY;i=r,o=n})),a(e,"touchmove",(function(e){if(r){var t=e.changedTouches[0],n=t.pageX,a=t.pageY,s=n-i,u=a-o;(Math.abs(s)>10||Math.abs(u)>10)&&(l(s,u,e,r),i=n,o=a),e.preventDefault()}})),a(e,"touchend",(function(e){if(n){var t=e.changedTouches[0],r=t.pageX,a=t.pageY;l(r-i,a-o,e,n)}}))};var n=[];function a(e,t,r){e.addEventListener(t,r),n.push({name:t,fn:r,target:e})}function i(e,t,r){e.removeEventListener(t,r)}function o(e){e.xclickoutside&&(i(window.document.body,"click",e.xclickoutside),delete e.xclickoutside)}function l(e,t,r,n){Math.abs(e)>Math.abs(t)?n(e>0?"right":"left",e,r):n(t>0?"down":"up",t,r)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isHave=function(e){if(void 0===e)return!1;if(null===e)return!1;return!0}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.locale=function(e,t){i=e,t&&(o[e]=t)},t.t=s,t.tf=function(e){return function(){return s(e)}},t.default=void 0;var n,a=(n=r(142))&&n.__esModule?n:{default:n};var i="en",o={en:a.default};function l(e,t){if(t&&t[i])for(var r=t[i],n=e.split("."),a=0;a<n.length;a+=1){var o=r[n[a]];if(a===n.length-1)return o;if(!o)return;r=o}}function s(e){var t=l(e,o);return!t&&window&&window.x&&window.x.spreadsheet&&window.x.spreadsheet.$messages&&(t=l(e,window.x.spreadsheet.$messages)),t||""}var u={t:s};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cloneDeep=function(e){return JSON.parse(JSON.stringify(e))},t.find=function(e,t){for(var r=0;r<e.length;r++)if(-1!==t.indexOf(e[r]))return!0;return!1},t.isOusideViewRange=function(e,t,r,n,a){if(44===a&&r-e+100>0)return!0;if(11===a&&n-100<0)return!0;if(33===a&&n-t+100>0)return!0;if(22===a&&r-100<0)return!0;return!1},t.equals=function e(t,r){var n=Object.keys(t);if(n.length!==Object.keys(r).length)return!1;for(var a=0;a<n.length;a+=1){var i=n[a],o=t[i],l=r[i];if(void 0===l)return!1;if("string"==typeof o||"number"==typeof o||"boolean"==typeof o){if(o!==l)return!1}else if(Array.isArray(o)){if(o.length!==l.length)return!1;for(var s=0;s<o.length;s+=1)if(!e(o[s],l[s]))return!1}else if("function"!=typeof o&&!Array.isArray(o)&&o instanceof Object&&!e(o,l))return!1}return!0},t.isValueValid=function(e){if(void 0===e)return!1;if(null===e)return!1;return null!==e},t.rangeReduceIf=function(e,t,r,n,a,i){for(var o=r,l=n,s=e;s<t&&!(o>a);s+=1)l=i(s),o+=l;return[s,o-l,l]},t.rangeSum=function(e,t,r){for(var n=0,a=e;a<t;a+=1)n+=r(a);return n},t.isNumber=function(e){return"NaN"!==parseFloat(e).toString()},t.arrayEquals=function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(e[r]!==t[r])return!1;return!0},t.merge=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(void 0,[{}].concat(t))},t.sum=t.mergeDeep=void 0;var n=function e(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];return n.forEach((function(r){null!=r&&Object.keys(r).forEach((function(n){var a=r[n];"string"==typeof a||"number"==typeof a||"boolean"==typeof a?t[n]=a:"function"!=typeof a&&!Array.isArray(a)&&a instanceof Object?(t[n]=t[n]||{},e(t[n],a)):t[n]=a}))})),t};t.mergeDeep=n;t.sum=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},r=0,n=0;return Object.keys(e).forEach((function(a){r+=t(e[a],a),n+=1})),[r,n]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.d18991230=t.moneyUnitObj=t.preDefinedConst=t.singleChartOperator=t.multiChartOperator=t.MARK_OBJ=t.FORMULA_STATUS=t.common_operations=t.MS_PER_DAY=void 0;t.MS_PER_DAY=864e5;t.common_operations={"*":"multiply","+":"plus","-":"subtractDays","/":"divide","^":"power","&":"concat","<":"lt",">":"gt","=":"eq"};t.FORMULA_STATUS={created:"created",edited:"edited",working:"working",solved:"solved"};t.MARK_OBJ={percent:"%",star:"*",plus:"+",dash:"-",slash:"/",caret:"^",exclamation:"!",ampersand:"&",lessThen:"<",greaterThen:">",leftParentheses:"(",rightParentheses:")",comma:",",leftBracket:"[",rightBracket:"]",leftBrace:"}",rightBrace:"{",equal:"=",colon:":",hash:"#",at:"@",space:" "};t.multiChartOperator={notEqual:"<>",greaterEqual:">=",lessEqual:"<="};t.singleChartOperator={percent:"%",star:"*",plus:"+",slash:"/",caret:"^",ampersand:"&",lessThen:"<",greaterThen:">",equal:"="};t.preDefinedConst={true:"TRUE",false:"FALSE"};t.moneyUnitObj={dollar:"$",rmb:"￥"};var n=new Date(1899,11,30);t.d18991230=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=l(this,s(t).call(this,"div","".concat(a.cssPrefix,"-icon")))).iconNameEl=(0,n.h)("div","".concat(a.cssPrefix,"-icon-img ").concat(e)),r.child(r.iconNameEl),r}var r,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),r=t,(i=[{key:"setName",value:function(e){this.iconNameEl.className("".concat(a.cssPrefix,"-icon-img ").concat(e))}}])&&o(r.prototype,i),c&&o(r,c),t}(n.Element);t.default=c},function(e,t,r){"use strict";var n=r(2),a=r(11);r(20);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){return e&&e.reduce?e.reduce((function(e,t){var r=Array.isArray(e),n=Array.isArray(t);return r&&n?e.concat(t):r?(e.push(t),e):n?[e].concat(t):[e,t]})):e}function l(e){if(!e)return!1;for(var t=0;t<e.length;++t)if(Array.isArray(e[t]))return!1;return!0}function s(e){if(e instanceof Error)return e;if(e instanceof Array){for(var t=[],r=0;r<e.length;r++){if("string"==typeof e[r][0]&&"default_0"!==e[r][0])return n.errorObj.ERROR_NAME;if("number"==typeof e[r][0]&&t.push(e[r][0]),e[r][0]instanceof Object)return n.errorObj.ERROR_NAME}return t}return"string"==typeof e?"default_0"===e?"pass":n.errorObj.ERROR_NAME:"number"==typeof e?e:void 0}function u(e){return isNaN(parseInt(e))?e.replace('"',"").replace('"',""):parseInt(e)}t.flatten=function(){for(var e=t.argsToArray.apply(null,arguments);!l(e);)e=o(e);return e},t.argsToArray=function(e){return Array.prototype.slice.call(e,0)},t.numbers=function(){var e=this.flatten.apply(null,arguments);return e.filter((function(e){return"number"==typeof e}))},t.flattenNum=function(e){try{if(1===e.length&&"default_0"===e[0][0])return n.errorObj.ERROR_DIV0;for(var t=[],r=0;r<e.length;r++){var a=s(e[r]);if(void 0===a)return n.errorObj.ERROR_NAME;if(a instanceof Error)return a;if("pass"!==a)if(a instanceof Array)for(var i=0;i<a.length;i++)t.push(a[i]);else t.push(a)}return t}catch(e){return n.errorObj.ERROR_NAME}},t.cleanFloat=function(e){return Math.round(1e14*e)/1e14},t.parseBool=function(e){if(void 0===e)return!0;if("boolean"==typeof e)return e;if(e instanceof Error)return e;if("number"==typeof e)return 0!==e;if("string"==typeof e){var t=e.toUpperCase();if("TRUE"===t)return!0;if("FALSE"===t)return!1}return e instanceof Date&&!isNaN(e)||n.errorObj.ERROR_VALUE},t.parseNumber=function(e){return void 0===e||""===e?n.errorObj.ERROR_VALUE:isNaN(e)?n.errorObj.ERROR_VALUE:parseFloat(e)},t.parseNumberArray=function(e){var r,a;if(!e||0===(r=e.length))return n.errorObj.ERROR_VALUE;for(;r--;){if((a=t.parseNumber(e[r]))===n.errorObj.ERROR_VALUE)return a;e[r]=a}return e},t.parseMatrix=function(e){var r;if(!e||0===e.length)return n.errorObj.ERROR_VALUE;for(var a=0;a<e.length;a++)if(r=t.parseNumberArray(e[a]),e[a]=r,r instanceof Error)return r;return e},t.parseDate=function(e){var t;if(!isNaN(e)){e instanceof Date&&(t=e);var r=parseInt(e,10);if(r<0)return n.errorObj.ERROR_NUM;t=new Date(a.d18991230.getTime()+r*a.MS_PER_DAY)}return"string"==typeof e&&(t=new Date(e),isNaN(e)||(t=e)),t instanceof Date?t:n.errorObj.ERROR_VALUE},t.Copy=function(e){if(null==e||"object"!==i(e))return e;if(e instanceof Date){var t=new Date;return t.setTime(e.getTime()),t}if(e instanceof Array){for(var r=[],n=0;n<e.length;++n)r[n]=clone(e[n]);return r}if(e instanceof Object){var a={};for(var o in e)e.hasOwnProperty(o)&&(a[o]=clone(e[o]));return a}throw new Error("Unable to copy obj! Its type isn't supported.")},t.strToMatrix=function(e){for(var t=e.slice(2,e.length-2).split(","),r=[],n=[],a=0;a<t.length;a++){var i=t[a].toString();i.indexOf(";")>0?(n.push(u(i.split(";")[0])),r.push(n),n=[u(i.split(";")[1])]):n.push(u(i))}return r.push(n),r},t.ExcelDateToJSDate=function(e){return"string"==typeof e&&(e=utils.parseDate(issue)),e instanceof Date?e:new Date(Math.round((e-25569)*a.MS_PER_DAY))},t.isNumber=function(e){return!(!/^\d+(\.\d+)?$/.test(e)&&!/^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/.test(e))},t.parseDateArray=function(e){for(var t,r=e.length;r--;){if((t=this.parseDate(e[r]))===n.errorObj.ERROR_VALUE)return t;e[r]=t}return e},t.anyIsError=function(){for(var e=arguments.length;e--;)if(arguments[e]instanceof Error)return!0;return!1},t.arrayValuesToNumbers=function(e){for(var t,r=e.length;r--;)if("number"!=typeof(t=e[r]))if(!0!==t)if(!1!==t){if("string"==typeof t){var n=this.parseNumber(t);n instanceof Error?e[r]=0:e[r]=n}}else e[r]=0;else e[r]=1;return e},t.rest=function(e,t){return t=t||1,e&&"function"==typeof e.slice?e.slice(t):e},t.initial=function(e,t){return t=t||1,e&&"function"==typeof e.slice?e.slice(0,e.length-t):e}},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(7),i=r(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e,r,a,o,l){var c,d,f=l.type,m=l.change,h=l.arrowChange,v=l.historyBorder;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(d=s(this,u(t).call(this,"div","".concat(i.cssPrefix,"-dropdown ").concat(o)))).title=e,d.change=function(){},"string"==typeof e?d.title=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-title")).child(e):a&&d.title.addClass("arrow-left");for(var p=arguments.length,g=new Array(p>5?p-5:0),y=5;y<p;y++)g[y-5]=arguments[y];return d.contentEl=(c=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-content"))).children.apply(c,g).css("width",r).hide(),f?(d.headerEl=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-header")).on("click",m),d.headerEl.children(d.title,a?(0,n.h)("div","".concat(i.cssPrefix,"-icon arrow-right_d")).child((0,n.h)("div","".concat(i.cssPrefix,"-icon-img arrow-down")).on("click.stop",(function(e){h(v),"block"!==d.contentEl.css("display")?d.show():d.hide()}))):""),d.children(d.headerEl,d.contentEl)):(d.headerEl=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-header")),d.headerEl.on("click",(function(){"block"!==d.contentEl.css("display")?d.show():d.hide()})).children(d.title,a?(0,n.h)("div","".concat(i.cssPrefix,"-icon arrow-right")).child((0,n.h)("div","".concat(i.cssPrefix,"-icon-img arrow-down"))):""),d.children(d.headerEl,d.contentEl)),d}var r,o,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),r=t,(o=[{key:"setTitle",value:function(e){this.title.html(e),this.hide()}},{key:"show",value:function(){var e=this;this.contentEl.show(),this.parent().active(),(0,a.bindClickoutside)(this.parent(),(function(){e.hide()}))}},{key:"hide",value:function(){this.parent().active(!1),this.contentEl.hide(),(0,a.unbindClickoutside)(this.parent())}}])&&l(r.prototype,o),d&&l(r,d),t}(n.Element);t.default=d},,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.str2Re=function(e){return new RegExp(e,"g")},t.calendarPattern=t.datePattern2=t.datePattern=t.letterOperatorWithDollorPrex=t.letterOperatorWithDollorEnd=t.letterAndLetterOperator=t.letterOperatorWithDollor=t.letterOperatorIgnoreBracket=t.letterOperator=t.blankOperator=t.logicOperator=void 0;t.logicOperator="([(-\\/,+*，=^&])";t.blankOperator="(^\\s*)|(\\s*$)";t.letterOperator="^[A-Z]+\\d+$";t.letterOperatorIgnoreBracket="^[A-Z]+\\d+$";t.letterOperatorWithDollor="^\\$[A-Z]+\\$\\d+$";t.letterAndLetterOperator="^[A-Za-z]+\\d+:[A-Za-z]+\\d+$";t.letterOperatorWithDollorEnd="^[A-Z]+\\$\\d+$";t.letterOperatorWithDollorPrex="^\\$[A-Z]+\\d+$";t.datePattern=["^(\\d{4})[-/](\\d{1,2})[-/](\\d{1,2})$","^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$"];t.datePattern2="((^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$))";t.calendarPattern="^\\d{4}-\\d{1,2}-\\d{1,2}$"},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.convertToCellV=function(e){if(e instanceof Date)return new c(e);if(e instanceof String)return new h(e);if("number"==typeof e&&!isNaN(e))return new m(e);if(!0===e.isCellV)return e;throw i.ERROR_VALUE},t.CellVString=t.CellVNumber=t.CellVEmpty=t.CellVError=t.CellVDateTime=void 0;var a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var l=a?Object.getOwnPropertyDescriptor(e,i):null;l&&(l.get||l.set)?Object.defineProperty(r,i,l):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(11)),i=r(2);function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}var c=function(){function e(t){l(this,e),this.dateInstance=t,this.isCellV=!0,this.cellVTypeName="CellVDateTime"}return u(e,[{key:"subtractOther",value:function(t){return console.assert(t instanceof e),this.toNumber()-t.toNumber()}},{key:"toString",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.dateInstance.toLocaleDateString("Chinese")}},{key:"toNumber",value:function(){return(this.dateInstance-a.d18991230+60*(a.d18991230.getTimezoneOffset()-this.dateInstance.getTimezoneOffset())*1e3)/a.MS_PER_DAY}},{key:"toDate",value:function(){return this.dateInstance}},{key:"getACopy",value:function(){return new f(this.dateInstance)}}]),e}();t.CellVDateTime=c;var d=function(){function e(t){l(this,e),this.errName=t,this.err=Error(t),this.isCellV=!0,this.cellVTypeName="CellVError"}return u(e,[{key:"toNumber",value:function(){return this.err}},{key:"toString",value:function(){return this.err}},{key:"toDate",value:function(){return this.err}}]),e}();t.CellVError=d;var f=function(){function e(){l(this,e),this.isCellV=!0,this.cellVTypeName="CellVEmpty"}return u(e,[{key:"toString",value:function(){return""}},{key:"toNumber",value:function(){return 0}},{key:"toDate",value:function(){return new Date(0)}}]),e}();t.CellVEmpty=f;var m=function(){function e(t){l(this,e),this.number=t,this.isCellV=!0,this.cellVTypeName="CellVNumber"}return u(e,[{key:"toNumber",value:function(){return this.number}},{key:"toString",value:function(){return String(this.number)}},{key:"toDate",value:function(){return new Date(a.d18991230.getTime()+this.number*a.MS_PER_DAY)}}]),e}();t.CellVNumber=m;var h=function(){function e(t){l(this,e),this.theString=t,this.isCellV=!0,this.cellVTypeName="CellVString"}return u(e,[{key:"toNumber",value:function(){return parseFloat(this.theString)}},{key:"toString",value:function(){return this.theString}},{key:"toDate",value:function(){var e=Date(this.theString);return isNaN(e.getTime())?i.ERROR_VALUE:e}}]),e}();t.CellVString=h},,,function(module,exports,__webpack_require__){"use strict";var _numeric=_interopRequireDefault(__webpack_require__(90)),_utils=_interopRequireDefault(__webpack_require__(13)),_error_config=__webpack_require__(2),_statistical=_interopRequireDefault(__webpack_require__(24)),_information=_interopRequireDefault(__webpack_require__(33));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.ABS=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.abs(_utils.default.parseNumber(e))},exports.ACOS=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.acos(e)},exports.ACOSH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.log(e+Math.sqrt(e*e-1))},exports.ACOT=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.atan(1/e)},exports.ACOTH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:.5*Math.log((e+1)/(e-1))},exports.AGGREGATE=function(e,t,r,n){if(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),"string"==typeof r)return _error_config.errorObj.ERROR_VALUE;if(_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;switch(e){case 1:return _statistical.default.AVERAGE(r);case 2:return _statistical.default.COUNT(r);case 3:return _statistical.default.COUNTA(r);case 4:return _statistical.default.MAX(r);case 5:return _statistical.default.MIN(r);case 6:return exports.PRODUCT(r);case 7:return _statistical.default.STDEV.S(r);case 8:return _statistical.default.STDEV.P(r);case 9:return exports.SUM(r);case 10:return _statistical.default.VAR.S(r);case 11:return _statistical.default.VAR.P(r);case 12:return _statistical.default.MEDIAN(r,n);case 13:return _statistical.default.MODE.SNGL(r);case 14:return _statistical.default.LARGE(r,n);case 15:return null==n?_error_config.errorObj.ERROR_VALUE:_statistical.default.SMALL(r,n);case 16:return _statistical.default.PERCENTILE.INC(r,n);case 17:return _statistical.default.QUARTILE.INC(r,n);case 18:return _statistical.default.PERCENTILE.EXC(r,n);case 19:return _statistical.default.QUARTILE.EXC(r,n)}},exports.ARABIC=function(e){if(e=e.toUpperCase(),!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(e))return _error_config.errorObj.ERROR_VALUE;var t=0;return e.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g,(function(e){t+={M:1e3,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1}[e]})),t},exports.ASIN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.asin(e)},exports.ASINH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.log(e+Math.sqrt(e*e+1))},exports.ATAN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.atan(e)},exports.ATAN2=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:Math.atan2(e,t)},exports.ATANH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.log((1+e)/(1-e))/2},exports.BASE=function(e,t,r){if(r=r||0,e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),r=_utils.default.parseNumber(r),_utils.default.anyIsError(e,t,r))return _error_config.errorObj.ERROR_VALUE;r=void 0===r?0:r;var n=e.toString(t);return new Array(Math.max(r+1-n.length,0)).join("0")+n},exports.CEILING=function(e,t,r){if(t=void 0===t?1:Math.abs(t),r=r||0,e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),r=_utils.default.parseNumber(r),_utils.default.anyIsError(e,t,r))return _error_config.errorObj.ERROR_VALUE;if(0===t)return 0;var n=-Math.floor(Math.log(t)/Math.log(10));return e>=0?exports.ROUND(Math.ceil(e/t)*t,n):0===r?-exports.ROUND(Math.floor(Math.abs(e)/t)*t,n):-exports.ROUND(Math.ceil(Math.abs(e)/t)*t,n)},exports.CEILING.MATH=exports.CEILING,exports.CEILING.PRECISE=exports.CEILING,exports.COMBIN=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:exports.FACT(e)/(exports.FACT(t)*exports.FACT(e-t))},exports.COMBINA=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:0===e&&0===t?1:exports.COMBIN(e+t-1,e-1)},exports.COS=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.cos(e)},exports.COSH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:(Math.exp(e)+Math.exp(-e))/2},exports.COT=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:1/Math.tan(e)},exports.COTH=function(e){if((e=_utils.default.parseNumber(e))instanceof Error)return e;var t=Math.exp(2*e);return(t+1)/(t-1)},exports.CSC=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:1/Math.sin(e)},exports.CSCH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:2/(Math.exp(e)-Math.exp(-e))},exports.DECIMAL=function(e,t){return arguments.length<1?_error_config.errorObj.ERROR_VALUE:parseInt(e,t)},exports.DEGREES=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:180*e/Math.PI},exports.EVEN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:exports.CEILING(e,-2,-1)},exports.EXP=Math.exp;var MEMOIZED_FACT=[];exports.FACT=function(e){if((e=_utils.default.parseNumber(e))<0)return _error_config.errorObj.ERROR_NUM;if(e instanceof Error)return e;var t=Math.floor(e);return 0===t||1===t?1:MEMOIZED_FACT[t]>0?MEMOIZED_FACT[t]:(MEMOIZED_FACT[t]=exports.FACT(t-1)*t,MEMOIZED_FACT[t])},exports.FACTDOUBLE=function(e){if((e=_utils.default.parseNumber(e))instanceof Error)return e;var t=Math.floor(e);return t<=0?1:t*exports.FACTDOUBLE(t-2)},exports.FLOOR={};var ROUND=function(e,t){var r=e,n=t;return Math.round(r*Math.pow(10,n))/Math.pow(10,n)};exports.FLOORMATH=function(e,t,r){if("number"!=typeof e)return _error_config.errorObj.ERROR_VALUE;if(e>0&&t<0)return _error_config.errorObj.ERROR_NUM;if(e<0&&t<0){e=-e,t=-t;var n=-Math.floor(Math.log(t)/Math.log(10));return-ROUND(Math.floor(e/t)*t,n)}if(r=void 0===r?0:r,0===(t=void 0===t?1:t))return 0;t=t?Math.abs(t):1;var a=-Math.floor(Math.log(t)/Math.log(10));return e>=0?ROUND(Math.floor(e/t)*t,a):0===r||void 0===r?-ROUND(Math.ceil(Math.abs(e)/t)*t,a):-ROUND(Math.floor(Math.abs(e)/t)*t,a)},exports.FLOORPRACE=function(e,t,r){if("number"!=typeof e)return _error_config.errorObj.ERROR_VALUE;if(e<0&&t<0){e=-e,t=-t;var n=-Math.floor(Math.log(t)/Math.log(10));return-ROUND(Math.floor(e/t)*t,n)}if(r=void 0===r?0:r,0===(t=void 0===t?1:t))return 0;t=t?Math.abs(t):1;var a=-Math.floor(Math.log(t)/Math.log(10));return e>=0?ROUND(Math.floor(e/t)*t,a):0===r||void 0===r?-ROUND(Math.ceil(Math.abs(e)/t)*t,a):-ROUND(Math.floor(Math.abs(e)/t)*t,a)},exports.FLOOR.MATH=exports.FLOORMATH,exports.FLOOR.PRECISE=exports.FLOORPRACE,exports.GCD=function(){var e=_utils.default.parseNumberArray(_utils.default.flatten(arguments));if(e instanceof Error)return e;for(var t=e.length,r=e[0],n=r<0?-r:r,a=1;a<t;a++){for(var i=e[a],o=i<0?-i:i;n&&o;)n>o?n%=o:o%=n;n+=o}return n},exports.INT=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.floor(e)},exports.ISO={CEILING:exports.CEILING},exports.LCM=function(){var e=_utils.default.parseNumberArray(_utils.default.flatten(arguments));if(e instanceof Error)return e;for(var t,n,a,i;void 0!==(a=e.pop());)for(;a>1;){if(a%2){for(t=3,n=Math.floor(Math.sqrt(a));t<=n&&a%t;t+=2);i=t<=n?t:a}else i=2;for(a/=i,i,t=e.length;t;e[--t]%i==0&&1==(e[t]/=i)&&e.splice(t,1));}return r},exports.LN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.log(e)},exports.LOG=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(t)&&(t=10),t=void 0===t?10:t,Math.log(e)/Math.log(t)},exports.LOG10=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.log(e)/Math.log(10)},exports.MDETERM=function(e){"string"==typeof e&&(e=_utils.default.strToMatrix(e));try{return _numeric.default.det(e)}catch(e){return _error_config.errorObj.ERROR_VALUE}},exports.MINVERSE=function(e){return(e=_utils.default.parseMatrix(e))instanceof Error?e:_numeric.default.inv(e)},exports.MMULT=function(e,t){return e=_utils.default.parseMatrix(e),t=_utils.default.parseMatrix(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(console.log(_numeric.default.dot(e,t)),_numeric.default.dot(e,t))},exports.MOD=function(e,t){if(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;if(0===t)return _error_config.errorObj.ERROR_DIV0;var r=Math.abs(e%t);return t>0?r:-r},exports.MROUND=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e*t<0?_error_config.errorObj.ERROR_NUM:Math.round(e/t)*t},exports.MULTINOMIAL=function(){var e=_utils.default.parseNumberArray(_utils.default.flatten(arguments));if(e instanceof Error)return e;for(var t=0,r=1,n=0;n<e.length;n++)t+=e[n],r*=exports.FACT(e[n]);return exports.FACT(t)/r},exports.MUNIT=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:_numeric.default.identity(e)},exports.ODD=function(e){if((e=_utils.default.parseNumber(e))instanceof Error)return e;var t=Math.ceil(Math.abs(e));return t=1&t?t:t+1,e>0?t:-t},exports.PI=function(){return Math.PI},exports.POWER=function(e,t){if(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=Math.pow(e,t);return isNaN(r)?_error_config.errorObj.ERROR_NUM:r},exports.PRODUCT=function(){var e=_utils.default.parseNumberArray(_utils.default.flatten(arguments));if(e instanceof Error)return e;for(var t=1,r=0;r<e.length;r++)t*=e[r];return t},exports.QUOTIENT=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:parseInt(e/t,10)},exports.RADIANS=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:e*Math.PI/180},exports.RAND=function(){return arguments.length>0&&void 0!==arguments[0]?_error_config.errorObj.ERROR_VALUE:Math.random()},exports.RANDBETWEEN=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e+Math.ceil((t-e+1)*Math.random())-1},exports.ROMAN=function(e){if((e=_utils.default.parseNumber(e))instanceof Error)return e;for(var t=String(e).split(""),r=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"],n="",a=3;a--;)n=(r[+t.pop()+10*a]||"")+n;return new Array(+t.join("")+1).join("M")+n},exports.ROUND=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e<0?(e=0-e,0-Math.round(e*Math.pow(10,t))/Math.pow(10,t)):Math.round(e*Math.pow(10,t))/Math.pow(10,t)},exports.ROUNDDOWN=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(e>0?1:-1)*Math.floor(Math.abs(e)*Math.pow(10,t))/Math.pow(10,t)},exports.ROUNDUP=function(e,t){return e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(e>0?1:-1)*Math.ceil(Math.abs(e)*Math.pow(10,t))/Math.pow(10,t)},exports.SEC=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:1/Math.cos(e)},exports.SECH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:2/(Math.exp(e)+Math.exp(-e))},exports.SERIESSUM=function(e,t,r,n){if(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),r=_utils.default.parseNumber(r),n=_utils.default.parseNumberArray(n),_utils.default.anyIsError(e,t,r,n))return _error_config.errorObj.ERROR_VALUE;for(var a=n[0]*Math.pow(e,t),i=1;i<n.length;i++)a+=n[i]*Math.pow(e,t+i*r);return a},exports.SIGN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:e<0?-1:0===e?0:1},exports.SIN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.sin(e)},exports.SINH=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:(Math.exp(e)-Math.exp(-e))/2},exports.SQRT=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:e<0?_error_config.errorObj.ERROR_NUM:Math.sqrt(e)},exports.SQRTPI=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.sqrt(e*Math.PI)},exports.SUBTOTAL=function(e,t){if((e=_utils.default.parseNumber(e))instanceof Error)return e;switch(e){case 1:return _statistical.default.AVERAGE(t);case 2:return _statistical.default.COUNT(t);case 3:return _statistical.default.COUNTA(t);case 4:return _statistical.default.MAX(t);case 5:return _statistical.default.MIN(t);case 6:return exports.PRODUCT(t);case 7:return _statistical.default.STDEV.S(t);case 8:return _statistical.default.STDEV.P(t);case 9:return exports.SUM(t);case 10:return _statistical.default.VAR.S(t);case 11:return _statistical.default.VAR.P(t);case 101:return _statistical.default.AVERAGE(t);case 102:return _statistical.default.COUNT(t);case 103:return _statistical.default.COUNTA(t);case 104:return _statistical.default.MAX(t);case 105:return _statistical.default.MIN(t);case 106:return exports.PRODUCT(t);case 107:return _statistical.default.STDEV.S(t);case 108:return _statistical.default.STDEV.P(t);case 109:return exports.SUM(t);case 110:return _statistical.default.VAR.S(t);case 111:return _statistical.default.VAR.P(t)}},exports.ADD=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_NAme:e+t)},exports.MINUS=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e-t)},exports.DIVIDE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:0===t?_error_config.errorObj.ERROR_DIV0:e/t)},exports.MULTIPLY=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e*t)},exports.GTE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:e>=t)},exports.LT=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:e<t)},exports.LTE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:e<=t)},exports.EQ=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:e===t},exports.NE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:e!==t},exports.POW=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:exports.POWER(e,t))},exports.SUM=function(){for(var e=0,t=Object.keys(arguments),r=0;r<t.length;++r){var n=arguments[t[r]];if("number"==typeof n)e+=n;else if("string"==typeof n){var a=parseFloat(n);!isNaN(a)&&(e+=a)}else Array.isArray(n)&&(e+=exports.SUM.apply(null,n))}return e},exports.SUMIF=function(range,criteria){if(range=_utils.default.parseNumberArray(_utils.default.flatten(range)),range instanceof Error)return range;for(var result=0,i=0;i<range.length;i++)result+=eval(range[i]+criteria)?range[i]:0;return result},exports.SUMIFS=function(){var e=_utils.default.argsToArray(arguments),t=_utils.default.flatten(e.shift());if(t instanceof Error)return t;if(e.length%2!=0)return _error_config.errorObj.ERROR_VALUE;for(var r=0;r<e.length;r+=2)if(e[r].length!==t.length||!e[r+1])return _error_config.errorObj.ERROR_VALUE;for(var n=[],a=0,i=0;i<e.length;i+=2){for(var o=[],l=0;l<e[i].length;l++){var s=e[i+1]+"";if(0==s.lastIndexOf(">=")?(s=s.replace(/>=/,""),isNaN(s)&&(str=!0),1*s<=e[i][l][0]&&o.push(l)):0==s.lastIndexOf("<=")&&(s=s.replace(/<=/,""),isNaN(s)&&(str=!0),1*s>=e[i][l][0]&&o.push(l)),0==(s=s.replace("=","")).lastIndexOf("<>"))(s=s.replace(/<>/,""))!==e[i][l][0]&&o.push(l);else{var u=!1;if(0==s.lastIndexOf("<"))s=s.replace(/</,""),isNaN(s)&&(u=!0),1*s>e[i][l][0]&&o.push(l);else if(0==s.lastIndexOf(">"))s=s.replace(/>/,""),isNaN(s)&&(u=!0),1*s<e[i][l][0]&&o.push(l);else{if(s.indexOf("*")>0){var c=s;c=c.replace("*",""),"string"==typeof e[i][l][0]&&e[i][l][0].indexOf(c)>=0&&o.push(l)}isNaN(s)?s===e[i][l][0]&&o.push(l):1*s===e[i][l][0]&&o.push(l)}if(u)return _error_config.errorObj.ERROR_VALUE}}n.push(o)}for(var d=[],f=0;f<n.length;f++)for(var m=0;m<n[f].length;m++){for(var h=n[f][m],v=1,p=0;3!==v&&p<n.length;p++)p!==f&&-1!==n[p].indexOf(h)?v=2:p!==f&&(v=3);1==v&&n.length>1?v=3:1==v&&1===n.length&&(v=2),2==v&&-1==d.indexOf(h)&&d.push(h)}if(n.length<=0)return _error_config.errorObj.ERROR_VALUE;for(var g=0;g<d.length;g++){var y=t[d[g]];if(!y||isNaN(y))return 0;a+=y}return a},exports.SUMPRODUCT=function(){if(!arguments||0===arguments.length)return _error_config.errorObj.ERROR_VALUE;for(var e,t,r,n,a=arguments.length+1,i=0,o=0;o<arguments[0].length;o++)if(arguments[0][o]instanceof Array)for(var l=0;l<arguments[0][o].length;l++){for(e=1,t=1;t<a;t++){if((n=_utils.default.parseNumber(arguments[t-1][o][l]))instanceof Error)return n;e*=n}i+=e}else{for(e=1,t=1;t<a;t++){if((r=_utils.default.parseNumber(arguments[t-1][o]))instanceof Error)return r;e*=r}i+=e}return i},exports.SUMSQ=function(){var e=_utils.default.parseNumberArray(_utils.default.flatten(arguments));if(e instanceof Error)return e;for(var t=0,r=e.length,n=0;n<r;n++)t+=_information.default.ISNUMBER(e[n])?e[n]*e[n]:0;return t},exports.SUMX2MY2=function(e,t){if("string"==typeof e&&(e=_utils.default.strToMatrix(e)),"string"==typeof t&&(t=_utils.default.strToMatrix(t)),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=0;e=_utils.default.parseNumberArray(_utils.default.flatten(e)),t=_utils.default.parseNumberArray(_utils.default.flatten(t));for(var n=0;n<e.length;n++)r+=e[n]*e[n]-t[n]*t[n];return r},exports.SUMX2PY2=function(e,t){if("string"==typeof e&&(e=_utils.default.strToMatrix(e)),"string"==typeof t&&(t=_utils.default.strToMatrix(t)),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=0;e=_utils.default.parseNumberArray(_utils.default.flatten(e)),t=_utils.default.parseNumberArray(_utils.default.flatten(t));for(var n=0;n<e.length;n++)r+=e[n]*e[n]+t[n]*t[n];return r},exports.SUMXMY2=function(e,t){if("string"==typeof e&&(e=_utils.default.strToMatrix(e)),"string"==typeof t&&(t=_utils.default.strToMatrix(t)),e=_utils.default.parseNumberArray(_utils.default.flatten(e)),t=_utils.default.parseNumberArray(_utils.default.flatten(t)),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=0;e=_utils.default.flatten(e),t=_utils.default.flatten(t);for(var n=0;n<e.length;n++)r+=Math.pow(e[n]-t[n],2);return r},exports.TAN=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:Math.tan(e)},exports.TANH=function(e){if((e=_utils.default.parseNumber(e))instanceof Error)return e;var t=Math.exp(2*e);return(t-1)/(t+1)},exports.TRUNC=function(e,t){return t=void 0===t?0:t,e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(e>0?1:-1)*Math.floor(Math.abs(e)*Math.pow(10,t))/Math.pow(10,t)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=m(r(23)),o=m(r(32)),l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=f();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(48)),s=m(r(13)),u=r(2),c=m(r(49)),d=m(r(91));function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function m(e){return e&&e.__esModule?e:{default:e}}t.AVEDEV=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));return e instanceof Error?e:l.sum(l(e).subtract(l.mean(e)).abs()[0])/e.length},t.AVERAGE=function(){var e=s.default.flattenNum(arguments);if(e instanceof Error)return e;if(0===e.length)return u.errorObj.e;for(var t=e.length,r=0,n=0,a=0;a<t;a++)r+=e[a],n+=1;return r/n},t.AVERAGEA=function(){var e=s.default.flattenNum(arguments);if(1===e.length&&isNaN(e[0]))return u.errorObj.ERROR_VALUE;for(var t=e.length,r=0,n=0,a=0;a<t;a++){var i=e[a];"number"==typeof i&&(r+=i),!0===i&&r++,null!==i&&n++}return r/n},t.AVERAGEIF=function(e,t,r){if(arguments.length<=1)return u.errorObj.ERROR_NA;if(r=r||e,e=s.default.flatten(e),(r=s.default.parseNumberArray(s.default.flatten(r)))instanceof Error)return r;for(var n=0,a=0,i=void 0===t||"*"===t,o=i?null:d.default.parse(t+""),l=t.replace("=","").replace("*","").replace("<>",""),c=0;c<e.length;c++){var f=e[c];if(i)a+=r[c],n++;else{var m=[d.default.createToken(f,d.default.TOKEN_TYPE_LITERAL)].concat(o);t.indexOf("<>")>=0?f.indexOf(l)<0&&(a+=r[c],n++):(d.default.compute(m)||f.toString().indexOf(l)>=0)&&(a+=r[c],n++)}}return 0===n?u.errorObj.ERROR_DIV0:a/n},t.AVERAGEIFS=function(){for(var e=s.default.argsToArray(arguments),t=(e.length-1)/2,r=s.default.flatten(e[0]),n=0,a=0,i=0;i<r.length;i++){for(var o=!1,l=0;l<t;l++){var c=e[2*l+1][i],f=e[2*l+2],m=void 0===f||"*"===f,h=!1;if(m)h=!0;else{var v=d.default.parse(f+""),p=[d.default.createToken(c,d.default.TOKEN_TYPE_LITERAL)].concat(v);h=d.default.compute(p)}if(!h){o=!1;break}o=!0}o&&(a+=r[i],n++)}var g=a/n;return isNaN(g)?u.errorObj.ERROR_DIV0:g},t.BETA={},t.BETA.DIST=function(e,t,r,n,a,i){return arguments.length<4?u.errorObj.ERROR_VALUE:(a=void 0===a?0:a,i=void 0===i?1:i,e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),a=s.default.parseNumber(a),i=s.default.parseNumber(i),s.default.anyIsError(e,t,r,a,i)?u.errorObj.ERROR_VALUE:(e=(e-a)/(i-a),(n=s.default.parseBool(n))?l.beta.cdf(e,t,r):l.beta.pdf(e,t,r)/2))},t.BETA.INV=function(e,t,r,n,a){return n=void 0===n?0:n,a=void 0===a?1:a,e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),n=s.default.parseNumber(n),a=s.default.parseNumber(a),s.default.anyIsError(e,t,r,n,a)?u.errorObj.ERROR_VALUE:l.beta.inv(e,t,r)*(a-n)+n},t.BINOM={},t.BINOM.DIST=function(e,t,r,n){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),n=s.default.parseBool(n),n=s.default.parseNumber(n),s.default.anyIsError(e,t,r,n)?u.errorObj.ERROR_VALUE:n?l.binomial.cdf(e,t,r):l.binomial.pdf(e,t,r)},t.BINOM.INV=function(e,t,r){if(e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;for(var n=0;n<=e;){if(l.binomial.cdf(n,e,t)>=r)return n;n++}},t.CHISQ={},t.CHISQ.DIST=function(e,t,r){return r=s.default.parseBool(r),e<0?u.errorObj.ERROR_NUM:(e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.chisquare.cdf(e,t):l.chisquare.pdf(e,t))},t.CHISQ.DIST.RT=function(e,t){return!e|!t?u.errorObj.ERROR_NA:e<1||t>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:1-l.chisquare.cdf(e,t)},t.CHISQ.INV=function(e,t){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:l.chisquare.inv(e,t)},t.CHISQ.INV.RT=function(e,t){return!e|!t?u.errorObj.ERROR_NA:e<0||e>1||t<1||t>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:l.chisquare.inv(1-e,t)},t.CHISQ.TEST=function(e,t){if(2!==arguments.length)return u.errorObj.ERROR_NA;if(!(e instanceof Array&&t instanceof Array))return u.errorObj.ERROR_VALUE;if(e.length!==t.length)return u.errorObj.ERROR_VALUE;if(e[0]&&t[0]&&e[0].length!==t[0].length)return u.errorObj.ERROR_VALUE;var r,n,a,i=e.length;for(n=0;n<i;n++)e[n]instanceof Array||(r=e[n],e[n]=[],e[n].push(r)),t[n]instanceof Array||(r=t[n],t[n]=[],t[n].push(r));var o=e[0].length,l=1===o?i-1:(i-1)*(o-1),s=0,c=Math.PI;for(n=0;n<i;n++)for(a=0;a<o;a++)s+=Math.pow(e[n][a]-t[n][a],2)/t[n][a];function d(e,t){var r=Math.exp(-.5*e);t%2==1&&(r*=Math.sqrt(2*e/c));for(var n=t;n>=2;)r=r*e/n,n-=2;for(var a=r,i=t;a>1e-10*r;)r+=a=a*e/(i+=2);return 1-r}return Math.round(1e6*d(s,l))/1e6},t.COLUMN=function(){var e=this.args[0].cellFormulaProxy.name;return e=e.replace(/\d+/g,""),["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"].indexOf(e)+1},t.COLUMNS=function(e){return"string"==typeof e&&(e=s.default.strToMatrix(e)),e instanceof Array?0===e.length?0:l.cols(e):u.errorObj.ERROR_VALUE},t.CONFIDENCE={},t.CONFIDENCE.NORM=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.normalci(1,e,t,r)[1]-1},t.CONFIDENCE.T=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.tci(1,e,t,r)[1]-1},t.IFS=function(){for(var e=0;e+1<arguments.length;e+=2){var t=arguments[e],r=arguments[e+1];if(t)return r}return u.errorObj.ERROR_NA},t.CORREL=function(e,t){return e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:l.corrcoeff(e,t)},t.COUNT=function(){return s.default.numbers(s.default.flatten(arguments)).length},t.COUNTA=function(){var e=s.default.flatten(arguments);return e.length-t.COUNTBLANK(e)},t.COUNTIN=function(e,t){for(var r=0,n=0;n<e.length;n++)e[n]===t&&r++;return r},t.COUNTBLANK=function(){for(var e,t=s.default.flatten(arguments),r=0,n=0;n<t.length;n++)null!==(e=t[n])&&""!==e||r++;return r},t.COUNTIF=function(e,t){if(e=s.default.flatten(e),void 0===t)return u.errorObj.ERROR_VALUE;if(void 0===t||"*"===t)return e.length;for(var r=0,n=d.default.parse(t+""),a=0;a<e.length;a++){var i=e[a],o=[d.default.createToken(i,d.default.TOKEN_TYPE_LITERAL)].concat(n);d.default.compute(o)&&r++}return r},t.COUNTIFS=function(){for(var e=s.default.argsToArray(arguments),t=new Array(s.default.flatten(e[0]).length),r=0;r<t.length;r++)t[r]=!0;for(i=0;i<e.length;i+=2){var n=s.default.flatten(e[i]),a=e[i+1],o=void 0===a||"*"===a;if(!o)for(var l=d.default.parse(a+""),u=0;u<n.length;u++){var c=n[u],f=[d.default.createToken(c,d.default.TOKEN_TYPE_LITERAL)].concat(l);t[u]=t[u]&&d.default.compute(f)}}var m=0;for(i=0;i<t.length;i++)t[i]&&m++;return m},t.COUNTUNIQUE=function(){return c.default.UNIQUE.apply(null,s.default.flatten(arguments)).length},t.COVARIANCE={},t.COVARIANCE.P=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(e),n=l.mean(t),a=0,i=e.length,o=0;o<i;o++)a+=(e[o]-r)*(t[o]-n);return a/i},t.COVARIANCE.S=function(e,t){return"string"==typeof e&&(e=s.default.strToMatrix(e)),"string"==typeof t&&(t=s.default.strToMatrix(t)),e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:l.covariance(e,t)},t.DEVSQ=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=0,n=0;n<e.length;n++)r+=Math.pow(e[n]-t,2);return r},t.EXPON={},t.EXPON.DIST=function(e,t,r){return r=s.default.parseBool(r),e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.exponential.cdf(e,t):l.exponential.pdf(e,t)},t.F={},t.F.DIST=function(e,t,r,n){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:(void 0===n&&(n=!0),"string"==typeof n&&"FALSE"!==n&&"TRUE"!==n?u.errorObj.ERROR_VALUE:("FALSE"===n&&(n=!1),n?l.centralF.cdf(e,t,r):l.centralF.pdf(e,t,r)))},t.F.DIST.RT=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||t<1||r<1?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:1-l.centralF.cdf(e,t,r)},t.F.INV=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||e>1||t<1||t>Math.pow(10,10)||r<1||r>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:l.centralF.inv(1-e,t,r)},t.F.INV.RT=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||e>1||t<1||t>Math.pow(10,10)||r<1||r>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:l.centralF.inv(1-e,t,r)},t.F.TEST=function(e,t){if(!e||!t)return u.errorObj.ERROR_NA;if(!(e instanceof Array&&t instanceof Array))return u.errorObj.ERROR_NA;if(e.length<2||t.length<2)return u.errorObj.ERROR_DIV0;var r=function(e,t){for(var r=0,n=0;n<e.length;n++)r+=Math.pow(e[n]-t,2);return r},n=a.default.SUM(e)/e.length,i=a.default.SUM(t)/t.length;return r(e,n)/(e.length-1)/(r(t,i)/(t.length-1))},t.FISHER=function(e){return(e=s.default.parseNumber(e))instanceof Error?e:Math.log((1+e)/(1-e))/2},t.FISHERINV=function(e){if((e=s.default.parseNumber(e))instanceof Error)return e;var t=Math.exp(2*e);return(t-1)/(t+1)},t.FORECAST=function(e,t,r){if(e=s.default.parseNumber(e),t=s.default.parseNumberArray(s.default.flatten(t)),r=s.default.parseNumberArray(s.default.flatten(r)),s.default.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;for(var n=l.mean(r),a=l.mean(t),i=r.length,o=0,c=0,d=0;d<i;d++)o+=(r[d]-n)*(t[d]-a),c+=Math.pow(r[d]-n,2);var f=o/c;return a-f*n+f*e},t.FREQUENCY=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=e.length,n=t.length,a=[],i=0;i<=n;i++){a[i]=0;for(var o=0;o<r;o++)0===i?e[o]<=t[0]&&(a[0]+=1):i<n?e[o]>t[i-1]&&e[o]<=t[i]&&(a[i]+=1):i===n&&e[o]>t[n-1]&&(a[n]+=1)}return a},t.GAMMA=function(e){return(e=s.default.parseNumber(e))instanceof Error?e:0===e?u.errorObj.ERROR_NUM:parseInt(e,10)===e&&e<0?u.errorObj.ERROR_NUM:l.gammafn(e)},t.GAMMA.DIST=function(e,t,r,n){return n=s.default.parseBool(n),4!==arguments.length?u.errorObj.ERROR_NA:e<0||t<=0||r<=0?u.errorObj.ERROR_VALUE:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:n?l.gamma.cdf(e,t,r,!0):l.gamma.pdf(e,t,r,!1)},t.GAMMA.INV=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||e>1||t<=0||r<=0?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:l.gamma.inv(e,t,r)},t.GAMMALN=function(e){return(e=s.default.parseNumber(e))instanceof Error?e:l.gammaln(e)},t.GAMMALN.PRECISE=function(e){return 1!==arguments.length?u.errorObj.ERROR_NA:e<=0?u.errorObj.ERROR_NUM:"number"!=typeof e?u.errorObj.ERROR_VALUE:l.gammaln(e)},t.GAUSS=function(e){return(e=s.default.parseNumber(e))instanceof Error?e:l.normal.cdf(e,0,1)-.5},t.GEOMEAN=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));return e instanceof Error?e:l.geomean(e)},t.GROWTH=function(e,t,r,n){if((e=s.default.parseNumberArray(e))instanceof Error)return e;var a;if(void 0===t)for(t=[],a=1;a<=e.length;a++)t.push(a);if(void 0===r)for(r=[],a=1;a<=e.length;a++)r.push(a);if(t=s.default.parseNumberArray(t),r=s.default.parseNumberArray(r),s.default.anyIsError(t,r))return u.errorObj.ERROR_VALUE;void 0===n&&(n=!0);var i,o,l=e.length,c=0,d=0,f=0,m=0;for(a=0;a<l;a++){var h=t[a],v=Math.log(e[a]);c+=h,d+=v,f+=h*v,m+=h*h}c/=l,d/=l,f/=l,m/=l,n?o=d-(i=(f-c*d)/(m-c*c))*c:(i=f/m,o=0);var p=[];for(a=0;a<r.length;a++)p.push(Math.exp(o+i*r[a]));return p},t.HARMEAN=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));if(e instanceof Error)return e;for(var t=e.length,r=0,n=0;n<t;n++)r+=1/e[n];return t/r},t.HYPGEOM={},t.HYPGEOM.DIST=function(e,t,r,n,i){if(i=s.default.parseBool(i),e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),n=s.default.parseNumber(n),s.default.anyIsError(e,t,r,n))return u.errorObj.ERROR_VALUE;function o(e,t,r,n){return a.default.COMBIN(r,e)*a.default.COMBIN(n-r,t-e)/a.default.COMBIN(n,t)}return i?function(e,t,r,n){for(var a=0,i=0;i<=e;i++)a+=o(i,t,r,n);return a}(e,t,r,n):o(e,t,r,n)},t.INTERCEPT=function(e,r){return e=s.default.parseNumberArray(e),r=s.default.parseNumberArray(r),s.default.anyIsError(e,r)?u.errorObj.ERROR_VALUE:e.length!==r.length?u.errorObj.ERROR_NA:t.FORECAST(0,e,r)},t.KURT=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=e.length,n=0,a=0;a<r;a++)n+=Math.pow(e[a]-t,4);return r*(r+1)/((r-1)*(r-2)*(r-3))*(n/=Math.pow(l.stdev(e,!0),4))-3*(r-1)*(r-1)/((r-2)*(r-3))},t.LARGE=function(e,t){e=s.default.flatten(e);for(var r=[],n=0;n<e.length;n++)parseFloat(e[n])&&r.push(parseFloat(e[n]));return e=r,t=s.default.parseNumber(t),s.default.anyIsError(e,t)?e:e.sort((function(e,t){return t-e}))[t-1]},t.LINEST=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(e),n=l.mean(t),a=t.length,i=0,o=0,c=0;c<a;c++)i+=(t[c]-n)*(e[c]-r),o+=Math.pow(t[c]-n,2);var d=i/o;return[d,r-d*n]},t.LOGEST=function(e,r){if(e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumberArray(s.default.flatten(r)),s.default.anyIsError(e,r))return u.errorObj.ERROR_VALUE;for(var n=0;n<e.length;n++)e[n]=Math.log(e[n]);var a=t.LINEST(e,r);return a[0]=Math.round(1e6*Math.exp(a[0]))/1e6,a[1]=Math.round(1e6*Math.exp(a[1]))/1e6,a},t.LOGNORM={},t.LOGNORM.DIST=function(e,t,r,n){return n=s.default.parseBool(n),e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:n?l.lognormal.cdf(e,t,r):l.lognormal.pdf(e,t,r)},t.LOGNORM.INV=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.lognormal.inv(e,t,r)},t.MAX=function(){var e=s.default.arrayValuesToNumbers(s.default.flatten(arguments));return 0===e.length?0:Math.max.apply(Math,e)},t.MAXA=function(){var e=s.default.arrayValuesToNumbers(s.default.flatten(arguments));return 0===e.length?0:Math.max.apply(Math,e)},t.MEDIAN=function(){for(var e=s.default.arrayValuesToNumbers(s.default.flatten(arguments)),t=[],r=0;r<e.length;r++)"number"==typeof e[r]&&t.push(e[r]);var n=s.default.arrayValuesToNumbers(s.default.flatten(t));return l.median(n)},t.MIN=function(){var e=s.default.flatten(arguments);return 0===e.length?0:Math.min.apply(Math,e)},t.MINA=function(){var e=s.default.arrayValuesToNumbers(s.default.flatten(arguments));return 0===e.length?0:Math.min.apply(Math,e)},t.MODE={},t.MODE.MULT=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));if(e instanceof Error)return e;for(var t,r=e.length,n={},a=[],i=0,o=0;o<r;o++)n[t=e[o]]=n[t]?n[t]+1:1,n[t]>i&&(i=n[t],a=[]),n[t]===i&&(a[a.length]=t);return a},t.MODE.SNGL=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));return e instanceof Error?e:t.MODE.MULT(e).sort((function(e,t){return e-t}))[0]},t.NEGBINOM={},t.NEGBINOM.DIST=function(e,t,r,n){return n=s.default.parseBool(n),e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:n?l.negbin.cdf(e,t,r):l.negbin.pdf(e,t,r)},t.NORM={},t.NORM.DIST=function(e,t,r,n){return n=s.default.parseBool(n),e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:r<=0?u.errorObj.ERROR_NUM:n?l.normal.cdf(e,t,r):l.normal.pdf(e,t,r)},t.NORM.INV=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.normal.inv(e,t,r)},t.NORM.S={},t.NORM.S.DIST=function(e,t){return t=s.default.parseBool(t),(e=s.default.parseNumber(e))instanceof Error?u.errorObj.ERROR_VALUE:t?l.normal.cdf(e,0,1):l.normal.pdf(e,0,1)},t.NORM.S.INV=function(e){return(e=s.default.parseNumber(e))instanceof Error?u.errorObj.ERROR_VALUE:l.normal.inv(e,0,1)},t.PEARSON=function(e,t){if(t=s.default.parseNumberArray(s.default.flatten(t)),e=s.default.parseNumberArray(s.default.flatten(e)),s.default.anyIsError(t,e))return u.errorObj.ERROR_VALUE;for(var r=l.mean(e),n=l.mean(t),a=e.length,i=0,o=0,c=0,d=0;d<a;d++)i+=(e[d]-r)*(t[d]-n),o+=Math.pow(e[d]-r,2),c+=Math.pow(t[d]-n,2);return i/Math.sqrt(o*c)},t.PERCENTILE={},t.PERCENTILE.EXC=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumber(t),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var r=(e=e.sort((function(e,t){return e-t}))).length;if(t<1/(r+1)||t>1-1/(r+1))return u.errorObj.ERROR_NUM;var n=t*(r+1)-1,a=Math.floor(n);return s.default.cleanFloat(n===a?e[n]:e[a]+(n-a)*(e[a+1]-e[a]))},t.PERCENTILE.INC=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumber(t),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var r=t*((e=e.sort((function(e,t){return e-t}))).length-1),n=Math.floor(r);return s.default.cleanFloat(r===n?e[r]:e[n]+(r-n)*(e[n+1]-e[n]))},t.PERCENTRANK={},t.PERCENTRANK.EXC=function(e,t,r){if(r=void 0===r?3:r,e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;e=e.sort((function(e,t){return e-t}));for(var n=c.default.UNIQUE.apply(null,e),a=e.length,i=n.length,o=Math.pow(10,r),l=0,d=!1,f=0;!d&&f<i;)t===n[f]?(l=(e.indexOf(n[f])+1)/(a+1),d=!0):t>=n[f]&&(t<n[f+1]||f===i-1)&&(l=(e.indexOf(n[f])+1+(t-n[f])/(n[f+1]-n[f]))/(a+1),d=!0),f++;return Math.floor(l*o)/o},t.PERCENTRANK.INC=function(e,t,r){if(r=void 0===r?3:r,e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;e=e.sort((function(e,t){return e-t}));for(var n=c.default.UNIQUE.apply(null,e),a=e.length,i=n.length,o=Math.pow(10,r),l=0,d=!1,f=0;!d&&f<i;)t===n[f]?(l=e.indexOf(n[f])/(a-1),d=!0):t>=n[f]&&(t<n[f+1]||f===i-1)&&(l=(e.indexOf(n[f])+(t-n[f])/(n[f+1]-n[f]))/(a-1),d=!0),f++;return Math.floor(l*o)/o},t.PERMUT=function(e,t){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:a.default.FACT(e)/a.default.FACT(e-t)},t.PERMUTATIONA=function(e,t){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:Math.pow(e,t)},t.PHI=function(e){return(e=s.default.parseNumber(e))instanceof Error?u.errorObj.ERROR_VALUE:Math.exp(-.5*e*e)/2.5066282746310002},t.POISSON={},t.POISSON.DIST=function(e,t,r){return r=s.default.parseBool(r),e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.poisson.cdf(e,t):l.poisson.pdf(e,t)},t.PROB=function(e,t,r,n){if(void 0===r)return 0;if(n=void 0===n?r:n,e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),r=s.default.parseNumber(r),n=s.default.parseNumber(n),s.default.anyIsError(e,t,r,n))return u.errorObj.ERROR_VALUE;if(r===n)return e.indexOf(r)>=0?t[e.indexOf(r)]:0;for(var a=e.sort((function(e,t){return e-t})),i=a.length,o=0,l=0;l<i;l++)a[l]>=r&&a[l]<=n&&(o+=t[e.indexOf(a[l])]);return o},t.QUARTILE={},t.QUARTILE.EXC=function(e,r){if(e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumber(r),s.default.anyIsError(e,r))return u.errorObj.ERROR_VALUE;switch(r){case 1:return t.PERCENTILE.EXC(e,.25);case 2:return t.PERCENTILE.EXC(e,.5);case 3:return t.PERCENTILE.EXC(e,.75);default:return u.errorObj.ERROR_NUM}},t.QUARTILE.INC=function(e,r){if(e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumber(r),s.default.anyIsError(e,r))return u.errorObj.ERROR_VALUE;switch(r){case 1:return t.PERCENTILE.INC(e,.25);case 2:return t.PERCENTILE.INC(e,.5);case 3:return t.PERCENTILE.INC(e,.75);default:return u.errorObj.ERROR_NUM}},t.RANK={},t.RANK.AVG=function(e,t,r){if(e=s.default.parseNumber(e),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var n=(r=r||!1)?function(e,t){return e-t}:function(e,t){return t-e},a=(t=(t=s.default.flatten(t)).sort(n)).length,i=0,o=0;o<a;o++)t[o]===e&&i++;return i>1?(2*t.indexOf(e)+i+1)/2:t.indexOf(e)+1},t.RANK.EQ=function(e,t,r){if(e=s.default.parseNumber(e),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var n=(r=r||!1)?function(e,t){return e-t}:function(e,t){return t-e};return(t=t.sort(n)).indexOf(e)+1},t.ROW=function(e,t){return 2!==arguments.length?u.errorObj.ERROR_NA:t<0?u.errorObj.ERROR_NUM:e instanceof Array&&"number"==typeof t?0!==e.length?l.row(e,t):void 0:u.errorObj.ERROR_VALUE},t.ROWS=function(e){return 1!==arguments.length?u.errorObj.ERROR_NA:e instanceof Array?0===e.length?0:l.rows(e):u.errorObj.ERROR_VALUE},t.RSQ=function(e,r){return e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumberArray(s.default.flatten(r)),s.default.anyIsError(e,r)?u.errorObj.ERROR_VALUE:Math.pow(t.PEARSON(e,r),2)},t.SKEW=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=e.length,n=0,a=0;a<r;a++)n+=Math.pow(e[a]-t,3);return r*n/((r-1)*(r-2)*Math.pow(l.stdev(e,!0),3))},t.SKEW.P=function(){var e=s.default.parseNumberArray(s.default.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=e.length,n=0,a=0,i=0;i<r;i++)a+=Math.pow(e[i]-t,3),n+=Math.pow(e[i]-t,2);return n/=r,(a/=r)/Math.pow(n,1.5)},t.SLOPE=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(t),n=l.mean(e),a=t.length,i=0,o=0,c=0;c<a;c++)i+=(t[c]-r)*(e[c]-n),o+=Math.pow(t[c]-r,2);return i/o},t.SMALL=function(e,t){return e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?e:e.sort((function(e,t){return e-t}))[t-1]},t.STANDARDIZE=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:(e-t)/r},t.STDEV={},t.STDEV.P=function(){var e=t.VAR.P.apply(this,arguments);return Math.sqrt(e)},t.STDEV.S=function(){var e=t.VAR.S.apply(this,arguments);return Math.sqrt(e)},t.STDEVA=function(){var e=t.VARA.apply(this,arguments);return Math.sqrt(e)},t.STDEVPA=function(){var e=t.VARPA.apply(this,arguments);return Math.sqrt(e)},t.STEYX=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumberArray(s.default.flatten(t)),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(t),n=l.mean(e),a=t.length,i=0,o=0,c=0,d=0;d<a;d++)i+=Math.pow(e[d]-n,2),o+=(t[d]-r)*(e[d]-n),c+=Math.pow(t[d]-r,2);return Math.sqrt((i-o*o/c)/(a-2))},t.TRANSPOSE=function(e){return e?l.transpose(e):u.errorObj.ERROR_NA},t.T=o.default.T,t.T.DIST=function(e,t,r){return r=s.default.parseBool(r),e=s.default.parseNumber(e),t=s.default.parseNumber(t),s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.studentt.cdf(e,t):l.studentt.pdf(e,t)},t.T.DIST["2T"]=function(e,t){return 2!==arguments.length?u.errorObj.ERROR_NA:e<0||t<1?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:2*(1-l.studentt.cdf(e,t))},t.T.DIST.RT=function(e,t){return 2!==arguments.length?u.errorObj.ERROR_NA:e<0||t<1?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:1-l.studentt.cdf(e,t)},t.T.INV=function(e,t){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),e<=0||e>1||t<1?u.errorObj.ERROR_NUM:s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:Math.abs(l.studentt.inv(e/2,t))},t.T.INV["2T"]=function(e,t){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),e<=0||e>1||t<1?u.errorObj.ERROR_NUM:s.default.anyIsError(e,t)?u.errorObj.ERROR_VALUE:Math.abs(l.studentt.inv(e/2,t))},t.T.TEST=function(e,r){if(e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumberArray(s.default.flatten(r)),s.default.anyIsError(e,r))return u.errorObj.ERROR_VALUE;var n,a=l.mean(e),i=l.mean(r),o=0,c=0;for(n=0;n<e.length;n++)o+=Math.pow(e[n]-a,2);for(n=0;n<r.length;n++)c+=Math.pow(r[n]-i,2);o/=e.length-1,c/=r.length-1;var d=Math.abs(a-i)/Math.sqrt(o/e.length+c/r.length);return t.T.DIST["2T"](d,e.length+r.length-2)},t.TREND=function(e,r,n){e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumberArray(s.default.flatten(r));var a=t.LINEST(e,r);return a[0]*n+a[1]},t.TRIMMEAN=function(e,t){if(e=s.default.parseNumberArray(s.default.flatten(e)),t=s.default.parseNumber(t),s.default.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var r=a.default.FLOORMATH(e.length*t,2)/2;return l.mean(s.default.initial(s.default.rest(e.sort((function(e,t){return e-t})),r),r))},t.VAR={},t.VAR.P=function(){var e=s.default.numbers(s.default.flatten(arguments));if(0===e.length)return u.errorObj.ERROR_VALUE;for(var r=e.length,n=0,a=t.AVERAGE(e),i=0;i<r;i++)n+=Math.pow(e[i]-a,2);return isNaN(n/r)?u.errorObj.ERROR_VALUE:n/r},t.VAR.S=function(){for(var e=s.default.numbers(s.default.flatten(arguments)),r=e.length,n=0,a=t.AVERAGE(e),i=0;i<r;i++)n+=Math.pow(e[i]-a,2);return n/(r-1)},t.VARA=function(){for(var e=s.default.flatten(arguments),r=e.length,n=0,a=0,i=t.AVERAGEA(e),o=0;o<r;o++){var l=e[o];n+="number"==typeof l?Math.pow(l-i,2):!0===l?Math.pow(1-i,2):Math.pow(0-i,2),null!==l&&a++}return n/(a-1)},t.VARPA=function(){for(var e=s.default.flatten(arguments),r=e.length,n=0,a=0,i=t.AVERAGEA(e),o=0;o<r;o++){var l=e[o];n+="number"==typeof l?Math.pow(l-i,2):!0===l?Math.pow(1-i,2):Math.pow(0-i,2),null!==l&&a++}return n/a},t.WEIBULL={},t.WEIBULL.DIST=function(e,t,r,n){return n=s.default.parseBool(n),e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:n?1-Math.exp(-Math.pow(e/r,t)):Math.pow(e,t-1)*Math.exp(-Math.pow(e/r,t))*t/Math.pow(r,t)},t.Z={},t.Z.TEST=function(e,r,n){if(e=s.default.parseNumberArray(s.default.flatten(e)),r=s.default.parseNumber(r),s.default.anyIsError(e,r))return u.errorObj.ERROR_VALUE;n=n||t.STDEV.S(e);var a=e.length;return 1-t.NORM.S.DIST((t.AVERAGE(e)-r)/(n/Math.sqrt(a)),!0)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.col_str_2_int=function(e){for(var t=0,r=e.replace(/[0-9]+$/,""),n=r.length;n--;)t+=Math.pow(26,r.length-n-1)*(r.charCodeAt(n)-64);return t-1},t.int_2_col_str=function(e){var t,r=e+1,n="",a=10;for(;r>0&&a--;)t=(r-1)%26,n=String.fromCharCode(t+65)+n,r=(r-t-1)/26;return n},t.isEqual=function(e,t){if(t+="",e=(e+="").toUpperCase(),t=t.toUpperCase(),e===t)return!0;return!1},t.stamp2DayNum=function(e){return(e-n.d18991230)/n.MS_PER_DAY};var n=r(11)},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.RawValue=void 0;var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t}var t,r,a;return t=e,(r=[{key:"setValue",value:function(e){this.value=e}},{key:"solveExpression",value:function(){return this.value}}])&&n(t.prototype,r),a&&n(t,a),e}();t.RawValue=a},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(8),a=r(4);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r,n,a,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.ri=t,this.ci=r,this.cell=n,this.expr=a,this.empty=i}var t,r,l;return t=e,(r=[{key:"isInclude",value:function(){}},{key:"each",value:function(e){var t=this.cell;if(!1!==(0,n.isHave)(t.depend))for(var r=0;r<t.depend.length;r++){var o=t.depend[r],l=i((0,a.expr2xy)(o),2),s=l[0];e(l[1],s)}}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lockCells=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,a=this.data,l=this.editor,s=e.offsetX,d=e.offsetY,f=a.getCellRectByXY(s,d),m=f.ri,v=f.ci,p=l.pos,g=l.editorText.getText(),y="";l.handler(g);var b=l.mousedownIndex;if((0,i.isAbsoluteValue)((0,i.cuttingByPos)(g,p),2)||t)if(t){var E=t.selector.range,R=E.sri,O=E.sci,x=E.eri,A=E.eci,w=(0,o.xy2expr)(O,R),_=(0,o.xy2expr)(A,x),N=w===_?w:"".concat(w,":").concat(_);if(2===r){var C=(0,i.value2absolute)(w),T=(0,i.value2absolute)(_);N=C.s1===T.s1?C.s1:"".concat(C.s1,":").concat(T.s1)}else if(1===r){var M=(0,i.value2absolute)(w),S=(0,i.value2absolute)(_);N=M.s2===S.s2?M.s2:"".concat(M.s2,":").concat(S.s2)}else if(3===r){var I=(0,i.value2absolute)(w),j=(0,i.value2absolute)(_);N=I.s3===j.s3?I.s3:"".concat(I.s3,":").concat(j.s3)}t.erpx=N,l.isCors&&(p=1);var D=-1!==n?n:p-(0,i.cuttingByPos)(g,p).length;y=g.substring(0,D)+N+g.substring(p,g.length),l.setText(y),l.setCursorPos(g.substring(0,D).length+N.length)}else for(var k=0,P=0;P<this.selectors.length&&0===k;P++){var L=this.selectors[P].erpx;if(L===(0,i.cuttingByPos)(g,p)){var U=f.ri,V=f.ci;this.selectors[P].ri=U,this.selectors[P].ci=V,this.selectors[P].erpx=(0,o.xy2expr)(V,U),this.selectors[P].selector.set(U,V),y="".concat(g.substring(0,p-L.length)).concat((0,o.xy2expr)(V,U)).concat(g.substring(p,g.length)),l.setText(y),l.setCursorPos(g.substring(0,p-L.length).length+(0,o.xy2expr)(V,U).length),k=1}}else if(b.length>0){if((0,i.operation)(b[1][0])&&(0,i.isAbsoluteValue)((0,i.cuttingByPos)(b[1],b[1].length),2))return void l.setLock(!1);var F=c.call(this,m,v);this.selectors.push(F);var B=(y="".concat(b[0]).concat((0,o.xy2expr)(v,m)).concat(b[1])).substring(b[0].length+(0,o.xy2expr)(v,m).length,y.length),H=(0,i.cutFirst)(B.substring(1));if((0,i.operation)(B[0])&&!(0,i.isAbsoluteValue)(H,2))return l.setText(y),void l.setMouseDownIndex([]);H=(0,i.cutFirst)(b[1]),console.log((0,o.xy2expr)(v,m));var Y=(0,i.cutStr)("".concat(b[0]).concat((0,o.xy2expr)(v,m),"+4").concat(b[1])),z=u.call(this,Y),W=z.selectors_delete,G=z.selectors_new;Object.keys(W).forEach((function(e){W[e].removeEl()})),this.selectors=G,y=y.replace(H,""),l.setText(y),l.setCursorPos(b[0].length+(0,o.xy2expr)(v,m).length)}else{var X=l.pos,$=t||c.call(this,m,v);if(-1!==X){for(var q="",K=!1,Z=X,Q="",J=X;J<g.length;J++)Q+=g[J];for(var ee=(0,i.cutFirst)(Q).length,te=0;te<g.length;te++)X===te&&(K=!0,q+=(0,o.xy2expr)(v,m)),Z===te&&ee>0?(Z+=1,ee-=1):q+=g[te];if(t){var re=a.selector.range,ne=re.sri,ae=re.sci,ie=re.eri,oe=re.eci,le=(0,o.xy2expr)(ae,ne),se=(0,o.xy2expr)(oe,ie);y=le===se?le:"".concat(le,":").concat(se),q=K?q:q+y}else this.selectors.push($),q=K?q:q+(0,o.xy2expr)(v,m);l.setText(q),l.setCursorPos(q.length),l.parse()}else this.selectors.push($),y="".concat(g).concat((0,o.xy2expr)(v,m)),l.setText(y)}if(l.parse(l.pos),this.selectors.length>0||t){var ue=l.editorText.getText(),ce=!1,de=this.data.merges;Object.keys(de._).forEach((function(e){for(var t=de._[e],r=(0,i.cutStr)(ue,!0),n=0;n<r.length;n++)if(-1!==r[n].indexOf(":")){var a=r[n].split(":")[0],l=r[n].split(":")[1],s=(0,o.expr2xy)(a),u=(0,o.expr2xy)(l);t.sci>=s[0]&&t.sri>=s[1]&&t.eci<=u[0]&&t.eri<=u[1]&&(ue=ue.replace(new RegExp(r[n],"g"),a),ce=!0)}})),h.call(this,(0,i.cutting)(ue),(0,i.cutting2)(ue)),ce&&setTimeout((function(){l.setCursorPos(ue.length)}),10)}},t.clearSelectors=function(){this.selectorsEl.html(""),this.selectors=[];var e=this.editor,t=this.selector;e.setLock(!1),e.state=1,t.el.show()},t.editingSelectors=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if("number"==typeof t)return;var r=(0,i.cutStr)(t,!0),n=u.call(this,r).selectors_delete;Object.keys(n).forEach((function(e){n[e].removeEl()}));var a=[];Object.keys(r).forEach((function(t){var n=1;Object.keys(e.selectors).forEach((function(t){e.selectors[t].selector.el.removeEl()}));var l="",s=r[t].replace(/\$/g,"");if((0,i.isAbsoluteValue)(r[t])){var u=r[t].replace(/\$/g,"");l=(0,o.expr2xy)(u)}else-1!==s.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)?n=2:l=(0,o.expr2xy)(r[t]);if(1===n){var d=l[1],f=l[0],m=c.call(e,d,f,a);m.erpx=r[t],a.push(m)}else if(2===n){var h=r[t].replace(/\$/g,"").split(":")[0],v=r[t].replace(/\$/g,"").split(":")[1],p=(0,o.expr2xy)(h),g=(0,o.expr2xy)(v),y=c.call(e,p[1],p[0],a,!0,null,!1);(y=c.call(e,g[1],g[0],a,!0,y.selector,!0)).erpx=r[t],a.push(y)}})),this.selectors=a,(this.selectors.length>0||"="===t[0])&&h.call(this,(0,i.cutting)(t),(0,i.cutting2)(t))},t.findBracket=function(e,t,r){var n={left:0,right:0,exist:!1};if(")"!==r[e])return n;var a=e,i=d.call(this,t,a);-1!==i&&-1!==a&&(n={left:i,right:a,exist:!0});return n},t.suggestContent=m,t.makeSelector=c;var n,a=(n=r(151))&&n.__esModule?n:{default:n},i=r(6),o=r(4),l=r(73),s=r(0);function u(e){var t=this,r=[],n=[];return Object.keys(this.selectors).forEach((function(a){for(var i=t.selectors[a],o=i.erpx,l=0,s=0;s<e.length&&0===l;s++)e[s].replace(/\$/g,"")===o&&(l=1,r.push(i));0===l&&n.push(i.selector.el)})),{selectors_delete:n,selectors_new:r}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.selectors,n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4?arguments[4]:void 0,u=arguments.length>5?arguments[5]:void 0,c=this.data,d=null,f=this.editor.editorText.getText(),m=(0,l.selectorColor)(r.length),h=m.color,v=m.index;if(s)d=s;else{var p="selector".concat(999999*Math.random());(d=new a.default(c,this,p)).el.attr("class","".concat(p," clear_selector")),d.setCss(h)}n?u?d.setEnd(e,t):d.set(e,t,!0):d.set(e,t,!1),d.el.css("z-index","100");var g=f.split((0,o.xy2expr)(t,e)).length-2,y=(0,o.xy2expr)(t,e),b=c.merges;Object.keys(b._).forEach((function(e){for(var t=b._[e],r=(0,i.cutStr)(y,!0),n=0;n<r.length;n++)if(-1!==r[n].indexOf(":")){var a=r[n].split(":")[0],l=r[n].split(":")[1],s=(0,o.expr2xy)(a),u=(0,o.expr2xy)(l);t.sci>=s[0]&&t.sri>=s[1]&&t.eci<=u[0]&&t.eri<=u[1]&&(y=y.replace(new RegExp(r[n],"g"),a))}}));var E={ri:e,ci:t,index:g,color:h,index2:v,className:d.el.el.className,erpx:y,selector:d};return u||(d.el.show(),this.selectorsEl.child(d.el)),n?E:(this.selectorsEl.child(d.el),E)}function d(e,t){for(var r=-1,n=0,a=!1,i=t-1;i>0&&!1===a;i--)"("===e[i]&&(a=!0),")"===e[i]&&n++;for(var o=t;o>0&&-1===r;o--)"("===e[o]&&(0===n&&(r=o),n--);return r}function f(e,t){for(var r=-1,n=0,a=!1,i=t+1;i<e.length&&!1===a;i++)")"===e[i]&&(a=!0),"("===e[i]&&n++;for(var o=t;o<e.length&&-1===r;o++)")"===e[o]&&(0===n&&(r=o),n--);return r}function m(e,t,r){var n={suggestContent:!1,cut:"",pos:1},a=e-1,o=d.call(this,t,a),l=f.call(this,t,o);o<=a&&-1!==o&&(l>=a||-1===l)&&(n.suggestContent=!0,n.cut=(0,i.cuttingByPos)(r,o));for(var s=o;s<a+1;s++)","===r[s]&&(n.pos+=2);return n}function h(e,t){var r=this.editor,n=[],a=-1,i=-1;Object.keys(e).forEach((function(r){var a=(0,s.h)("span","formula_span".concat(r));Object.keys(t).forEach((function(){if(t[r]&&-1!==t[r].code&&t[r].data===e[r]){var n=(0,l.selectorColor)(t[r].code).color;a.css("color",n)}})),a.css("display","inline-block"),a.css("cursor","text")," "===e[r]?a.html("&emsp;"):a.html(e[r]),n.push(a)}));var o=r.pos,u=r.editorText.getText(),c={suggestContent:!1,cut:""};if(")"===u[o-1]?(a=o-1,i=d.call(this,e,a)):c=m.call(this,o+1,e,u),""!==u&&n.length<=0){var f=(0,s.h)("span","formula_span");n.push(f)}r.mount2span(n,a,i,c)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFontSizePxByPt=function(e){for(var t=0;t<n.length;t+=1){var r=n[t];if(r.pt===e)return r.px}return e},t.baseFonts=t.fontSizes=void 0;t.baseFonts=[{key:"Arial",title:"Arial"},{key:"Helvetica",title:"Helvetica"},{key:"Source Sans Pro",title:"Source Sans Pro"},{key:"Comic Sans MS",title:"Comic Sans MS"},{key:"Courier New",title:"Courier New"},{key:"Verdana",title:"Verdana"},{key:"Lato",title:"Lato"}];var n=[{pt:7.5,px:10},{pt:8,px:11},{pt:9,px:12},{pt:10,px:13},{pt:10.5,px:14},{pt:11,px:15},{pt:12,px:16},{pt:14,px:18.7},{pt:15,px:20},{pt:16,px:21.3},{pt:18,px:24},{pt:22,px:29.3},{pt:24,px:32},{pt:26,px:34.7},{pt:36,px:48},{pt:42,px:56}];t.fontSizes=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.testValid=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.valid;(0,n.isHave)(e)&&e.assert()};var n=r(8)},function(module,exports,__webpack_require__){"use strict";var _utils=_interopRequireDefault(__webpack_require__(13)),_error_config=__webpack_require__(2),_numeral=_interopRequireDefault(__webpack_require__(47));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function num2e(e){var t=Math.floor(Math.log(e)/Math.LN10),r=e*Math.pow(10,-t);return t.toString().length<10&&(t="0"+t),r+"E+"+t}function allzero(e){e=e.toString();for(var t=0;t<e.length;t++)if("0"!==e[t])return!1;return!0}function decimalsToFractional(e){formatDecimals=e.toFixed(2);var t=3,r=3*formatDecimals;return function e(){for(var n=t>r?t:r;n>1;n--)Number.isInteger(r/n)&&Number.isInteger(t/n)&&(r/=n,t/=n,e())}(),r=parseInt(r),"".concat(r,"/").concat(t)}exports.ASC=function(e){var t="";e=e.toString();for(var r=0;r<e.length;r++)e.charCodeAt(r)>65248&&e.charCodeAt(r)<65375?t+=String.fromCharCode(e.charCodeAt(r)-65248):t+=String.fromCharCode(e.charCodeAt(r));return t},exports.BAHTTEXT=function(){throw new Error("BAHTTEXT is not implemented")},exports.CHAR=function(e){return(e=_utils.default.parseNumber(e))instanceof Error?e:String.fromCharCode(e)},exports.CLEAN=function(e){return(e=e||"").replace(/[\0-\x1F]/g,"")},exports.CODE=function(e){return(e=e||"").charCodeAt(0)},exports.CONCATE=function(){for(var e=_utils.default.flatten(arguments),t=0;(t=e.indexOf(!0))>-1;)e[t]="TRUE";for(var r=0;(r=e.indexOf(!1))>-1;)e[r]="FALSE";return e.join("")},exports.CONCATENATE=function(){for(var e=_utils.default.flatten(arguments),t=0;(t=e.indexOf(!0))>-1;)e[t]="TRUE";for(var r=0;(r=e.indexOf(!1))>-1;)e[r]="FALSE";return e.join("")},exports.DBCS=function(){throw new Error("DBCS is not implemented")},exports.DOLLAR=function(e,t){if(t=void 0===t?2:t,e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r="";return t<=0?(e=Math.round(e*Math.pow(10,t))/Math.pow(10,t),r="($0,0)"):t>0&&(r="($0,0."+new Array(t+1).join("0")+")"),(0,_numeral.default)(e).format(r)},exports.EXACT=function(e,t){return e===t},exports.FIND=function(e,t,r){return r=void 0===r?0:r,t.indexOf(e),t?t.indexOf(e,r-1)+1:null},exports.FIXED=function(e,t,r){if(t=void 0===t?2:t,r=void 0!==r&&r,e=_utils.default.parseNumber(e),t=_utils.default.parseNumber(t),_utils.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var n=r?"0":"0,0";return t<=0?e=Math.round(e*Math.pow(10,t))/Math.pow(10,t):t>0&&(n+="."+new Array(t+1).join("0")),(0,_numeral.default)(e).format(n)},exports.HTML2TEXT=function(e){var t="";return e&&(e instanceof Array?e.forEach((function(e){""!==t&&(t+="\n"),t+=e.replace(/<(?:.|\n)*?>/gm,"")})):t=e.replace(/<(?:.|\n)*?>/gm,"")),t},exports.INDEX=function(e,t,r){return"string"==typeof e&&(e=_utils.default.strToMatrix(e)),e[t][r-1]},exports.LEFT=function(e,t){return t=void 0===t?1:t,(t=_utils.default.parseNumber(t))instanceof Error||"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e?e.substring(0,t):null},exports.LEN=function(e){return 0===arguments.length?_error_config.errorObj.ERROR:"string"==typeof e?e?e.length:0:e.length?e.length:_error_config.errorObj.ERROR_VALUE},exports.LOWER=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e?e.toLowerCase():e},exports.MID=function(e,t,r){if(t=_utils.default.parseNumber(t),r=_utils.default.parseNumber(r),_utils.default.anyIsError(t,r)||"string"!=typeof e)return r;var n=t-1,a=n+r;return e.substring(n,a)},exports.NUMBERVALUE=function(e,t,r){return t=void 0===t?".":t,r=void 0===r?",":r,e.indexOf("%")>0?(e=e.replace("%",""),parseFloat(e)/100):Number(e.replace(t,".").replace(r,""))},exports.PRONETIC=function(){throw new Error("PRONETIC is not implemented")},exports.PROPER=function(e){return void 0===e||0===e.length?_error_config.errorObj.ERROR_VALUE:(!0===e&&(e="TRUE"),!1===e&&(e="FALSE"),isNaN(e)&&"number"==typeof e?_error_config.errorObj.ERROR_VALUE:("number"==typeof e&&(e=""+e),e.replace(/\w\S*/g,(function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()}))))},exports.REGEXEXTRACT=function(e,t){var r=e.match(new RegExp(t));return r?r[r.length>1?r.length-1:0]:null},exports.REGEXMATCH=function(e,t,r){var n=e.match(new RegExp(t));return r?n:!!n},exports.REGEXREPLACE=function(e,t,r){return e.replace(new RegExp(t),r)},exports.REPLACE=function(e,t,r,n){return t=_utils.default.parseNumber(t),r=_utils.default.parseNumber(r),_utils.default.anyIsError(t,r)||"string"!=typeof e||"string"!=typeof n?_error_config.errorObj.ERROR_VALUE:e.substr(0,t-1)+n+e.substr(t-1+r)},exports.REPT=function(e,t){return(t=_utils.default.parseNumber(t))instanceof Error?t:new Array(t+1).join(e)},exports.RIGHT=function(e,t){return t=void 0===t?1:t,(t=_utils.default.parseNumber(t))instanceof Error?t:e?e.substring(e.length-t):null},exports.SEARCH=function(e,t,r){var n;return"string"!=typeof e||"string"!=typeof t?_error_config.errorObj.ERROR_VALUE:(r=void 0===r?0:r,0===(n=t.toLowerCase().indexOf(e.toLowerCase(),r-1)+1)?_error_config.errorObj.ERROR_VALUE:n)},exports.SPLIT=function(e,t){return e.split(t)},exports.SUBSTITUTE=function(e,t,r,n){if(!(e&&t&&r))return e;if(void 0===n)return e.replace(new RegExp(t,"g"),r);for(var a=0,i=0;e.indexOf(t,a)>0;)if(a=e.indexOf(t,a+1),++i===n)return e.substring(0,a)+r+e.substring(a+t.length)},exports.T=function(e){return"TRUE"==e||"FALSE"==e?"":"string"==typeof e?e:""},exports.TEXT=function(value,format){try{if(format.indexOf("%")>=0){var fixed=format.split(".")[1].length-1;return(100*parseFloat(value)).toFixed(fixed)+"%"}var Formulas=window.jsSpreadsheet.AllFormulas,_result=Formulas.TEXT(value,format);console.log(_result)}catch(e){var _result2=void 0}if(null==result){if(format.indexOf("#")>=0&&format.indexOf("?/?")>=0){var x=parseFloat(value)-parseInt(value);return 0!==parseInt(value)?parseInt(value)+" "+decimalsToFractional(x):decimalsToFractional(x)}if(format.indexOf("E+")>=0)return num2e(value);if(allzero(value)){for(var _result3="",i=0;i<format.length-value.length;i++)_result3+="0";return _result3+value}if(format.indexOf("#")>=0){var fmt=format;if(format.indexOf("[")>=0&&format.indexOf(";")>=0){var valid=format.split("#")[0];fmt=format.split("]")[1].split(";"),valid=valid.replace("[","").replace("]",""),fmt=eval(value+valid)?fmt[0]:fmt[1]}if(format.indexOf("#")>=0&&format.indexOf(!1)&&format.indexOf("0")>=0&&format.indexOf("°")<=0){value.toString().split(".")[1].length>format.split(".")[1].length&&(value=value.toFixed(format.split(".")[1].length)),value=value.toString();for(var _result5="",_n=0,_i=0;_i<fmt.length;_i++)"#"==fmt[_i]||"0"==fmt[_i]||"."==fmt[_i]?(_result5+=value[_n],_n+=1):_result5+=fmt[_i];return _result5}fmt=fmt.replace("##0","##"),value=value.toString();for(var _result4="",n=0,_i2=0;_i2<fmt.length;_i2++)"#"==fmt[_i2]||"0"==fmt[_i2]?(_result4+=value[n],n+=1):_result4+=fmt[_i2];return _result4}}return result},exports.TRIM=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e.replace(/ +/g," ").trim()},exports.UNICHAR=function(e){return 0==e?_error_config.errorObj.ERROR_VALUE:String.fromCharCode(e)},exports.UNICODE=function(e){return e.charCodeAt(0)},exports.UPPER=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e.toUpperCase()},exports.VALUE=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:(0,_numeral.default)().unformat(e)}},function(e,t,r){"use strict";var n=r(2);t.CELL=function(){throw new Error("CELL is not implemented")},t.ERROR={},t.ERROR.TYPE=function(e){var t=n.errorMsgArr.indexOf(e);return t>-1?t:n.errorObj.ERROR_NA},t.INFO=function(){throw new Error("INFO is not implemented")},t.ISBLANK=function(e){return null===e},t.ISBINARY=function(e){return/^[01]{1,10}$/.test(e)},t.ISERR=function(e){return n.errorMsgArr.indexOf(e)>=0||"number"==typeof e&&(isNaN(e)||!isFinite(e))},t.ISERROR=function(e){return t.ISERR(e)||e===n.errorObj.ERROR_NA},t.ISEVEN=function(e){return!(1&Math.floor(Math.abs(e)))},t.ISFORMULA=function(){throw new Error("ISFORMULA is not implemented")},t.ISLOGICAL=function(e){return"FALSE"!==e&&(!0===e||!1===e)},t.ISNA=function(e){return e===n.errorObj.ERROR_NA||e===n.errorObj.ERROR_NA.message},t.ISNONTEXT=function(e){return"string"!=typeof e},t.ISNUMBER=function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)},t.ISODD=function(e){return!!(1&Math.floor(Math.abs(e)))},t.ISREF=function(){return null!==arguments[0]},t.ISTEXT=function(e){return"string"==typeof e},t.N=function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)?e:e instanceof Date?e.getTime():!0===e||"TRUE"===e.toString().toUpperCase()||"FALSE"==e.toString().toUpperCase()?1:!1===e||"string"==typeof e?0:ISERROR(e)?e:0},t.NA=function(){return n.errorObj.ERROR_NA},t.SHEET=function(){throw new Error("SHEET is not implemented")},t.SHEETS=function(){throw new Error("SHEETS is not implemented")},t.TYPE=function(e){if("number"==typeof e&&!isNaN(e)&&isFinite(e))return 1;if("string"==typeof e){if("{"!=e.slice(0,1))return 2;var r=utils.strToMatrix(e);if(Array.isArray(r))return 64}return"FALSE"!=e&&(1==e||0==e?4:t.ISERR(e)||e===n.errorObj.ERROR_NA?16:Array.isArray(arr)?64:void 0)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a,o=r(2),l=r(20),s=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=d();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(11)),u=(a=r(13))&&a.__esModule?a:{default:a},c=r(25);function d(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}new l.CellVDateTime(1900,0,1);var f=[void 0,0,1,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,1,2,3,4,5,6,0],m=[[],[1,2,3,4,5,6,7],[7,1,2,3,4,5,6],[6,0,1,2,3,4,5],[],[],[],[],[],[],[],[7,1,2,3,4,5,6],[6,7,1,2,3,4,5],[5,6,7,1,2,3,4],[4,5,6,7,1,2,3],[3,4,5,6,7,1,2],[2,3,4,5,6,7,1],[1,2,3,4,5,6,7]],h=[[],[6,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],void 0,void 0,void 0,[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]];function v(e){return 1===new l.CellVDateTime(e,1,29).getMonth()}function p(e,t){return Math.ceil((t-e)/s.MS_PER_DAY)}t.DATE=function(e,t,r){return e=u.default.parseNumber(e),t=u.default.parseNumber(t),r=u.default.parseNumber(r),u.default.anyIsError(e,t,r)?o.errorObj.ERROR_VALUE:e<0||t<0||r<0?o.errorObj.ERROR_NUM:new l.CellVDateTime(e,t-1,r)},t.DATEVALUE=function(e){if("string"!=typeof e)return o.errorObj.ERROR_VALUE;var t=l.CellVDateTime.parse(e);return isNaN(t)?o.errorObj.ERROR_VALUE:(0,c.stamp2DayNum)(t)},t.DAY=function(e){var t=u.default.parseDate(e);return t instanceof Error?t:t.getDate()},t.DAYS=function(e,t){return e=u.default.parseDate(e),t=u.default.parseDate(t),e instanceof Error?e:t instanceof Error?t:(0,c.stamp2DayNum)(e)-(0,c.stamp2DayNum)(t)},t.DAYS360=function(e,t,r){if(r=u.default.parseBool(r),e=u.default.parseDate(e),t=u.default.parseDate(t),e instanceof Error)return e;if(t instanceof Error)return t;if(r instanceof Error)return r;var n,a,i=e.getMonth(),o=t.getMonth();if(r)n=31===e.getDate()?30:e.getDate(),a=31===t.getDate()?30:t.getDate();else{var s=new l.CellVDateTime(e.getFullYear(),i+1,0).getDate(),c=new l.CellVDateTime(t.getFullYear(),o+1,0).getDate();n=e.getDate()===s?30:e.getDate(),t.getDate()===c?n<30?(o++,a=1):a=30:a=t.getDate()}return 360*(t.getFullYear()-e.getFullYear())+30*(o-i)+(a-n)},t.EDATE=function(e,t){return(e=u.default.parseDate(e))instanceof Error?e:isNaN(t)?o.errorObj.ERROR_VALUE:(t=parseInt(t,10),e.setMonth(e.getMonth()+t),(0,c.stamp2DayNum)(e))},t.EOMONTH=function(e,t){return(e=u.default.parseDate(e))instanceof Error?e:isNaN(t)?o.errorObj.ERROR_VALUE:(t=parseInt(t,10),(0,c.stamp2DayNum)(new l.CellVDateTime(e.getFullYear(),e.getMonth()+t+1,0)))},t.HOUR=function(e){return"number"!=typeof e||isNaN(e)?(e=u.default.parseDate(e))instanceof Error?e:e.getHours():parseInt(24*(parseFloat(e)-parseInt(e)))},t.INTERVAL=function(e){if("number"!=typeof e&&"string"!=typeof e)return o.errorObj.ERROR_VALUE;e=parseInt(e,10);var t=Math.floor(e/94608e4);e%=94608e4;var r=Math.floor(e/2592e3);e%=2592e3;var n=Math.floor(e/86400);e%=86400;var a=Math.floor(e/3600);e%=3600;var i=Math.floor(e/60),l=e%=60;return"P"+(t=t>0?t+"Y":"")+(r=r>0?r+"M":"")+(n=n>0?n+"D":"")+"T"+(a=a>0?a+"H":"")+(i=i>0?i+"M":"")+(l=l>0?l+"S":"")},t.ISOWEEKNUM=function(e){if((e=u.default.parseDate(e))instanceof Error)return e;e.setHours(0,0,0),e.setDate(e.getDate()+4-(e.getDay()||7));var t=new l.CellVDateTime(e.getFullYear(),0,1);return Math.ceil(((e-t)/s.MS_PER_DAY+1)/7)},t.MINUTE=function(e){return window.jsSpreadsheet.AllFormulas.MINUTE(e)},t.MONTH=function(e){return(e=u.default.parseDate(e))instanceof Error?e:e.getMonth()+1},t.NETWORKDAYS=function(e,t,r){return r instanceof Array&&(r=u.default.flatten(r)),window.jsSpreadsheet.AllFormulas.NETWORKDAYS(e,t,r)},t.NETWORKDAYSINTL=function(e,t,r,n){"string"==typeof n&&n.indexOf("{")>=0&&(n=u.default.parseDateArray(u.default.strToMatrix(n)[0]));try{return window.jsSpreadsheet.AllFormulas.NETWORKDAYS$INTL(e,t,r,n)}catch(R){if(e=u.default.ExcelDateToJSDate(u.default.parseDate(e)),t=u.default.ExcelDateToJSDate(u.default.parseDate(t)),e instanceof Error)return e;if(t instanceof Error)return t;if(void 0===r)r=h[1];else if("string"==typeof r&&7===r.length){for(var a=[],c=0;c<r.length;c++)"1"==r[c]&&a.push(c+1>6?0:c+1);r=a}else r=h[r];if(!(r instanceof Array))return o.errorObj.ERROR_VALUE;void 0===n?n=[]:n instanceof Array||(n=[n]);for(var d=0;d<n.length;d++){var f=u.default.parseDate(n[d]);if(f instanceof Error)return f;n[d]=f}var m=(t-e)/s.MS_PER_DAY+1,v=m,p=e;for(i=0;i<m;i++){var g=(new l.CellVDateTime).getTimezoneOffset()>0?p.getUTCDay():p.getDay(),y=!1;g!==r[0]&&g!==r[1]||(y=!0);for(var b=0;b<n.length;b++){var E=n[b];if(E.getDate()===p.getDate()&&E.getMonth()===p.getMonth()&&E.getFullYear()===p.getFullYear()){y=!0;break}}y&&v--,p.setDate(p.getDate()+1)}return v}},t.NETWORKDAYS.INTL=function(e,t,r,n){if("string"==typeof n&&n.indexOf("{")>=0&&(n=u.default.parseDateArray(u.default.strToMatrix(n))),e=u.default.ExcelDateToJSDate(e),t=u.default.ExcelDateToJSDate(t),e instanceof Error)return e;if(t instanceof Error)return t;if(!((r=void 0===r?h[1]:h[r])instanceof Array))return o.errorObj.ERROR_VALUE;void 0===n?n=[]:n instanceof Array||(n=[n]);for(var a=0;a<n.length;a++){var c=u.default.parseDate(n[a]);if(c instanceof Error)return c;n[a]=c}var d=(t-e)/s.MS_PER_DAY+1,f=d,m=e;for(i=0;i<d;i++){var v=(new l.CellVDateTime).getTimezoneOffset()>0?m.getUTCDay():m.getDay(),p=!1;v!==r[0]&&v!==r[1]||(p=!0);for(var g=0;g<n.length;g++){var y=n[g];if(y.getDate()===m.getDate()&&y.getMonth()===m.getMonth()&&y.getFullYear()===m.getFullYear()){p=!0;break}}p&&f--,m.setDate(m.getDate()+1)}return f},t.NOW=function(){return new l.CellVDateTime},t.SECOND=function(e){return(e=u.default.parseDate(e))instanceof Error?e:e.getSeconds()},t.TIME=function(e,t,r){return e=u.default.parseNumber(e),t=u.default.parseNumber(t),r=u.default.parseNumber(r),u.default.anyIsError(e,t,r)?o.errorObj.ERROR_VALUE:e<0||t<0||r<0?o.errorObj.ERROR_NUM:(3600*e+60*t+r)/86400},t.TIMEVALUE=function(e){var t=window.jsSpreadsheet.AllFormulas;try{return t.TIMEVALUE(e)}catch(e){return o.errorObj.ERROR_VALUE}},t.TODAY=function(){return window.jsSpreadsheet.AllFormulas.TODAY()},t.WEEKDAY=function(e,t){if((e=u.default.parseDate(e))instanceof Error)return e;void 0===t&&(t=1);var r=e.getDay();return m[t][r]},t.WEEKNUM=function(e,t){if((e=u.default.parseDate(e))instanceof Error)return e;if(void 0===t&&(t=1),21===t)return this.ISOWEEKNUM(e);var r=f[t],n=new l.CellVDateTime(e.getFullYear(),0,1),a=n.getDay()<r?1:0;return n-=Math.abs(n.getDay()-r)*s.MS_PER_DAY,Math.floor((e-n)/s.MS_PER_DAY/7+1)+a},t.WORKDAY=function(e,t,r){return void 0!==r&&(r=u.default.flatten(r)),window.jsSpreadsheet.AllFormulas.WORKDAY(e,t,r)},t.WORKDAYINTL=function(e,t,r,n){if((e=u.default.parseDate(e))instanceof Error)return e;if(0==r)return o.errorObj.ERROR_NUM;if((t=u.default.parseNumber(t))instanceof Error)return t;if(t<0)return o.errorObj.ERROR_NUM;if(!((r=void 0===r?h[1]:h[r])instanceof Array))return o.errorObj.ERROR_VALUE;void 0===n?n=[]:n instanceof Array||(n=[n]);for(var a=0;a<n.length;a++){var i=u.default.parseDate(n[a]);if(i instanceof Error)return i;n[a]=i}for(var l=0;l<t;){e.setDate(e.getDate()+1);var s=e.getDay();if(s!==r[0]&&s!==r[1]){for(var c=0;c<n.length;c++){var d=n[c];if(d.getDate()===e.getDate()&&d.getMonth()===e.getMonth()&&d.getFullYear()===e.getFullYear()){l--;break}}l++}}return e.getFullYear()+"/"+e.getMonth()+"/"+e.getDay()},t.YEAR=function(e){return(e=u.default.parseDate(e))instanceof Error?e:e.getFullYear()},t.YEARFRAC=function(e,t,r){if((e=u.default.parseDate(e))instanceof Error)return e;if((t=u.default.parseDate(t))instanceof Error)return t;r=r||0;var n=e.getDate(),a=e.getMonth()+1,i=e.getFullYear(),o=t.getDate(),c=t.getMonth()+1,d=t.getFullYear();switch(r){case 0:return 31===n&&31===o?(n=30,o=30):31===n?n=30:30===n&&31===o&&(o=30),(o+30*c+360*d-(n+30*a+360*i))/360;case 1:var f=365;if(i===d||i+1===d&&(a>c||a===c&&n>=o))return(i===d&&v(i)||function(e,t){var r=e.getFullYear(),n=new l.CellVDateTime(r,2,1);if(v(r)&&e<n&&t>=n)return!0;var a=t.getFullYear(),i=new l.CellVDateTime(a,2,1);return v(a)&&t>=i&&e<i}(e,t)||1===c&&29===o)&&(f=366),p(e,t)/f;var m=d-i+1,h=(new l.CellVDateTime(d+1,0,1)-new l.CellVDateTime(i,0,1))/s.MS_PER_DAY/m;return p(e,t)/h;case 2:return p(e,t)/360;case 3:return p(e,t)/365;case 4:return(o+30*c+360*d-(n+30*a+360*i))/360}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Range=void 0;var n=r(25),a=r(51),i=r(2),o=r(25),l=r(11);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t,r,n){var i,o;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calcCell=r,this.start_pst=n-t.length,this.end_pst=n,-1!==t.indexOf("!")){var l=t.split("!");o=(0,a.getSanitizedSheetName)(l[0]),i=l[1],this.range_start_pst=n-l[1].length}else o=this.calcCell.calcSheet.name,i=t,this.range_start_pst=this.start_pst;this.calcSheet=this.calcCell.workbookProxy.getSheetByName(o),this.range_expression=i,this.sheet_name=o}var t,r,u;return t=e,(r=[{key:"solveExpression",value:function(){var e,t=this.sheet_name,r=this.range_expression.split(":"),a=parseInt(r[0].replace(/^[A-Z]+/,""),10)||0,s=r[1].replace(/^[A-Z]+/,"");e=parseInt(""===s?"500000":s,10);for(var u=(0,n.col_str_2_int)(r[0]),c=(0,n.col_str_2_int)(r[1]),d=[],f=a;f<=e;f++){var m=[];d.push(m);for(var h=u;h<=c;h++){var v=(0,o.int_2_col_str)(h)+f,p=this.calcCell.workbookProxy.getCellByName(t,v);if(p){if(p.cellStatus===l.FORMULA_STATUS.created)p.execFormula();else if(p.cellStatus===l.FORMULA_STATUS.working)throw new Error(i.ERROR_CIRCULAR);"e"===p.cellObj.t?m.push(p.cellObj):m.push(p.cellObj.v)}else m.push(null)}}return d}}])&&s(t.prototype,r),u&&s(t,u),e}();t.Range=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFormula=E,t.Rows=void 0;var n=r(10),a=r(8),i=r(4),o=r(6),l=v(r(53)),s=r(6),u=v(r(54)),c=v(r(137)),d=v(r(69)),f=v(r(5)),m=v(r(28)),h=v(r(138));function v(e){return e&&e.__esModule?e:{default:e}}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function E(e){return e&&"="===e[0]}function R(e,t,r,n,a,i,o,l){var s=this.getCellByTopCell(e,r,n,"other",l,0),u=s.text,c=s.formulas,d=""!==c?c:u;this.isFormula(d)?this.calcFormulaCellByTopCell(d,t,e,r,n,i):this.calcCellByTopCell(i,a,s,t,n,d,e,u)}function O(e,t,r,n,a,i,o,l){var s="";n?a=Math.abs(a):a*=-1,l?s=this.getCellByTopCell(e,r,n):(s={text:e.v,formulas:e.v},a=0),this.calcNumberCellByTopCell(s,a,t,e,i,o)}function x(e,t,r,n,a,i,o){var l=t,s="",u=r?1:-1;o?s=this.getCellByTopCell(e,l,r,"date"):(s={text:e.v,formulas:e.v},u=0),this.calcDateCellByTopCell(s,n,e,r,a,i,u)}var A=function(){function e(t){var r=t.len,n=t.height,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._={},this.len=r,this.height=n,this.data=a,this.pasteProxy=new c.default,this.workbook=null}var t,r,v;return t=e,(r=[{key:"getHeight",value:function(e){var t=this.get(e);return t&&t.height?t.height:this.height}},{key:"setHeight",value:function(e,t){this.getOrNew(e).height=t}},{key:"setStyle",value:function(e,t){this.getOrNew(e).style=t}},{key:"sumHeight",value:function(e,t,r){var a=this;return(0,n.rangeSum)(e,t,(function(e){return r&&r.has(e)?0:a.getHeight(e)}))}},{key:"totalHeight",value:function(){return this.sumHeight(0,this.len)}},{key:"get",value:function(e){return this._[e]}},{key:"getOrNew",value:function(e){return this._[e]=this._[e]||{cells:{}},this._[e]}},{key:"getCell",value:function(e,t){var r=this.get(e);return void 0!==r&&void 0!==r.cells&&void 0!==r.cells[t]&&((0,a.isHave)(r.cells[t].text)||(0,a.isHave)(r.cells[t].formulas)||(0,a.isHave)(r.cells[t].style||"object"===y(r.cells[t])))?r.cells[t]:null}},{key:"getCellMerge",value:function(e,t){var r=this.getCell(e,t);return r&&r.merge?r.merge:[0,0]}},{key:"getCellOrNew",value:function(e,t){var r=this.getOrNew(e);return r.cells[t]=r.cells[t]||{},r.cells[t]}},{key:"toString",value:function(e){return!1===(0,a.isHave)(e)&&(e=""),e+""}},{key:"isBackEndFunc",value:function(e){return-1!==e.indexOf("MD.RTD")}},{key:"isReferOtherSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.formulas&&"="===e.formulas[0]&&(t||(0,s.isSheetVale)(e.formulas))}},{key:"isEmpty",value:function(e){return e&&(e.text||e.formulas||e.depend)}},{key:"isFormula",value:function(e){return E(e)}},{key:"setValue",value:function(e,t,r){r[e]=t}},{key:"setCell",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all",o=this.data,l=this.getOrNew(e),s=new h.default;if(s.setCell(r),"all"===n)l.cells[t]=s;else if("formulas"===n)l.cells[t]=l.cells[t]||{},l.cells[t].formulas=s.formulas;else if("text"===n)l.cells[t]=l.cells[t]||{},l.cells[t].text=s.text;else if("format"===n)l.cells[t]=l.cells[t]||{},l.cells[t].style=s.style,r.merge&&(l.cells[t].merge=s.merge);else if("date"===n||"datetime"===n)(0,a.isHave)(l.cells[t])||(l.cells[t]={}),this.isFormula(r.formulas)?l.cells[t].formulas=s.formulas:l.cells[t].formulas=s.text,l.cells[t].text=s.text,l.cells[t].style=s.style,l.cells[t].to_calc_num=s.to_calc_num;else if("normal"===n||"number"===n)(0,a.isHave)(l.cells[t])||(l.cells[t]={}),this.isFormula(r.formulas)?l.cells[t].formulas=s.formulas:l.cells[t].formulas=s.text,l.cells[t].text=s.text,l.cells[t].style=s.style;else if("rmb"===n||"percent"===n)(0,a.isHave)(l.cells[t])||(l.cells[t]={}),l.cells[t].text=s.text,l.cells[t].formulas=s.formulas,l.cells[t].style=s.style;else{if("all_with_no_workbook"===n)return void(l.cells[t]=s);if("style"===n)return(0,a.isHave)(l.cells[t])||(l.cells[t]={}),void(l.cells[t].style=s.style)}this.getDependCell((0,i.xy2expr)(t,e),this.getCell(e,t)),s.setFormatText(o.tryParseToNum(s,e,t))}},{key:"getDependCell",value:function(e,t){var r=t.formulas;if(!1!==(0,a.isHave)(r)&&E(r)){for(var n=(0,o.cutStr)(r,!0,!0),l=0;l<n.length;l++){var u,c=this.mergeCellExpr(n[l]);c.state&&(u=n).push.apply(u,g(c.mergeArr))}n=(0,s.distinct)(n),!1===(0,a.isHave)(t.depend)&&(t.depend=[]);for(var d=0;d<n.length;d++){var f=n[d],m=p((0,i.expr2xy)(f),2),h=m[0],v=m[1],y=this.getCell(v,h);!1===(0,a.isHave)(y)&&(y={}),!1===(0,a.isHave)(y.depend)&&(y.depend=[]),y.depend.push(e),y.depend=(0,s.distinct)(y.depend),this.setCell(v,h,y,"all_with_no_workbook")}}}},{key:"mergeCellExpr",value:function(e){if(!(0,o.isAbsoluteValue)(e,6))return{state:!1};e=(e=e.replace(/\$/g,"")).split(":");var t=(0,i.expr2xy)(e[0]),r=(0,i.expr2xy)(e[1]);if(t[0]>r[0]){var n=r[0];r[0]=t[0],t[0]=n}if(t[1]>r[1]){var a=r[1];r[1]=t[1],t[1]=a}var l=new f.default(t[1],t[0],r[1],r[0]),s=[];return l.each((function(e,t){s.push((0,i.xy2expr)(t,e))})),{state:!0,mergeArr:s}}},{key:"useOne",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return!1===(0,a.isHave)(e)?t:r&&this.isFormula(e)?t:e}},{key:"setCellText",value:function(e,t,r){var n=r.text,a=r.style,o=r.formulas,l=r.merge,s=void 0===l?"":l,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all";if("all_with_no_workbook"!==u){var c=this.getCellOrNew(e,t),d=new h.default;d.setCell(c),"style"===u?(d.style=a,d.formulas=n):"format"===u?(d.formulas=c.formulas,d.style=a):"cell"===u?(d.style=a,d.formulas=o,d.merge=void 0,""!==s&&(d.merge=s)):d.formulas=n,d.text=n,this.setCell(e,t,d),this.getDependCell((0,i.xy2expr)(t,e),this.getCell(e,t))}else this.setCell(e,t,{},"all_with_no_workbook")}},{key:"setCellAll",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",a=this.getCellOrNew(e,t),o=new h.default;o.formulas=""===n?a.formulas:n,o.text=r,this.setCell(e,t,o,"formulas"),this.setCell(e,t,o,"text"),this.getDependCell((0,i.xy2expr)(t,e),this.getCell(e,t))}},{key:"moveChange",value:function(e,t,r){var n=this;if(e.length===t.length||r.length===t.length)for(var i=function(i){var l=e[i].expr;e[i].each((function(e,s){var u=n.getCell(e,s);!1===(0,a.isHave)(u)&&(u={}),(0,a.isHave)(u.formulas)||(u.formulas="");var c=(0,o.changeFormula)((0,o.cutStr)(u.formulas));if(-1!==c.indexOf(l)){var d=r[i].expr.replace(/\$/g,"\\$");n.setCellAll(e,s,u.text.replace(new RegExp(d,"g"),t[i].expr),u.formulas.replace(d,t[i].expr))}else{var f=(0,o.value2absolute)(l),m=(0,o.value2absolute)(t[i].expr);-1!==c.indexOf(f.s3)?((f=(0,o.value2absolute)(r[i].expr)).s3=f.s3.replace(/\$/g,"\\$"),n.setCellAll(e,s,u.text.replace(new RegExp(f.s3,"g"),m.s3),u.formulas.replace(new RegExp(f.s3,"g"),m.s3))):-1!==c.indexOf(f.s2)?((f=(0,o.value2absolute)(r[i].expr)).s2=f.s2.replace(/\$/g,"\\$"),n.setCellAll(e,s,u.text.replace(new RegExp(f.s2,"g"),m.s2),u.formulas.replace(new RegExp(f.s2,"g"),m.s2))):-1!==c.indexOf(f.s1)&&((f=(0,o.value2absolute)(r[i].expr)).s1=f.s1.replace(/\$/g,"\\$"),n.setCellAll(e,s,u.text.replace(new RegExp(f.s1,"g"),m.s1),u.formulas.replace(new RegExp(f.s1,"g"),m.s1)))}}))},l=0;l<e.length;l++)i(l)}},{key:"formatMoney",value:function(e,t){if(/[^0-9\.]/.test(e))return"0";if(null==e||""===e)return"0";e=(e=((e=e.toString().replace(/^(\d*)$/,"$1."))+"00").replace(/(\d*\.\d\d)\d*/,"$1")).replace(".",",");for(var r=/(\d)(\d{3},)/;r.test(e);)e=e.replace(r,"$1,$2");if(e=e.replace(/,(\d\d)$/,".$1"),0===t){var n=e.split(".");"00"===n[1]&&(e=n[0])}return e}},{key:"getCellStyleConvert",value:function(e,t){return e&&e.format&&"number"===e.format?"number":e&&e.format&&"rmb"===e.format?"rmb":e&&e.format&&"normal"===e.format?"normal":e&&e.format&&"percent"===e.format?"percent":e&&e.format&&"datetime"===e.format?"datetime":t&&!(0,a.isHave)(e)||t&&e&&"normal"!==e.format||e&&e.format&&"date"===e.format?"date":""}},{key:"getCellTextIsAdd",value:function(e,t,r,n,a,o){var l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,s=arguments.length>7?arguments[7]:void 0,u=!1,c="";return e&&(t<=r[1]&&n&&s?(c=(0,i.xy2expr)(r[0]+a,r[1]+o,l),u=!0):t<=r[1]&&!n&&s?(c=(0,i.xy2expr)(r[0]+a,r[1]+o,l),u=!0):t<=r[0]&&n&&!1===s&&(c=(0,i.xy2expr)(r[0]+a,r[1]+o,l),u=!0)),{enter:u,data:c}}},{key:"eachRange",value:function(e){var t=this,r=[];return e.each((function(e,n){var o,l,u,c=t.getCell(e,n);if((0,a.isHave)(c)){var d=(o=c,!((0,a.isHave)(o)&&""!==o||(0,a.isHave)(l)&&""!==l||(0,a.isHave)(u)));c=(0,s.deepCopy)(c);var f=new m.default(e,n,c,(0,i.xy2expr)(e,n),d);r.push(f)}else{c={};var h=new m.default(e,n,c,(0,i.xy2expr)(e,n),!0);r.push(h)}})),r}},{key:"getCellTextByShift",value:function(e,t,r){for(var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4],l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,s=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=!1,c=!1,d="",f=0;f<e.length;f++){if("string"==typeof e[f]&&(e[f]=e[f].toUpperCase()),-1!==e[f].search(/^[A-Z]+\d+$/)){var m=(0,i.expr2xy)(e[f]);(m[0]+t<0||m[1]+r<0)&&(u=!0);var h=this.getCellTextIsAdd(n,l,m,a,t,r,0,s);h.enter?e[f]=h.data:!1===n&&(e[f]=(0,i.xy2expr)(m[0]+t,m[1]+r)),c=!0}else if(-1!==e[f].search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var v=e[f].split(":")[0],p=e[f].split(":")[1],g=(0,i.expr2xy)(v),y=(0,i.expr2xy)(p);(g[0]+t<0||g[1]+r<0)&&(u=!0),(y[0]+t<0||y[1]+r<0)&&(u=!0);var b="",E=this.getCellTextIsAdd(n,l,g,a,t,r,0,s);b=E.enter?E.data+":":!1===n?(0,i.xy2expr)(g[0]+t,g[1]+r)+":":v+":",(E=this.getCellTextIsAdd(n,l,y,a,t,r,0,s)).enter?b+=E.data:b+=!1===n?(0,i.xy2expr)(y[0]+t,y[1]+r):p,c=!0,e[f]=b}else{var R=(0,o.isAbsoluteValue)(e[f],5);if(2===R){var O=(0,i.expr2xy)(e[f].replace(/\$/g,""));(O[0]+t<0||O[1]+r<0)&&(u=!0);var x=this.getCellTextIsAdd(n,l,O,a,t,r,2,s);x.enter?e[f]=x.data:!1===n&&(e[f]=(0,i.xy2expr)(O[0]+t,O[1],2)),c=!0}else if(1===R){var A=(0,i.expr2xy)(e[f].replace(/\$/g,""));(A[0]+t<0||A[1]+r<0)&&(u=!0);var w=this.getCellTextIsAdd(n,l,A,a,t,r,1,s);w.enter?e[f]=w.data:!1===n&&(e[f]=(0,i.xy2expr)(A[0],A[1]+r,1)),c=!0}else if(4===R){var _=e[f].split(":");console.log(e[f],_);for(var N=0;N<_.length;N++){var C=(0,i.expr2xy)(_[N].replace(/\$/g,""));(C[0]+t<0||C[1]+r<0)&&(u=!0);var T=this.getCellTextIsAdd(n,l,C,a,t,r,2,s);T.enter?_[N]=T.data:!1===n&&(_[N]=(0,i.xy2expr)(C[0]+t,C[1],2))}e[f]=_.join(":"),c=!0}else if(5===R){for(var M=e[f].split(":"),S=0;S<M.length;S++){var I=(0,i.expr2xy)(M[S].replace(/\$/g,""));if((I[0]+t<0||I[1]+r<0)&&(u=!0),1===S){var j=this.getCellTextIsAdd(n,l,I,a,t,r,1,s);j.enter?M[S]=j.data:!1===n&&(M[S]=(0,i.xy2expr)(I[0],I[1]+r,1))}else{var D=this.getCellTextIsAdd(n,l,I,a,t,r,2,s);D.enter?M[S]=D.data:!1===n&&(M[S]=(0,i.xy2expr)(I[0],I[1]+r,2))}}e[f]=M.join(":"),c=!0}else if(7===R){for(var k=e[f].split(":"),P=0;P<k.length;P++){var L=(0,i.expr2xy)(k[P].replace(/\$/g,""));(L[0]+t<0||L[1]+r<0)&&(u=!0);var U=this.getCellTextIsAdd(n,l,L,a,t,r,1,s);U.enter?k[P]=U.data:!1===n&&(k[P]=(0,i.xy2expr)(L[0],L[1]+r,1))}e[f]=k.join(":"),c=!0}else if(6===R){for(var V=e[f].split(":"),F=0;F<V.length;F++){var B=(0,i.expr2xy)(V[F].replace(/\$/g,""));if((B[0]+t<0||B[1]+r<0)&&(u=!0),0===F){var H=this.getCellTextIsAdd(n,l,B,a,t,r,1,s);H.enter?V[F]=H.data:!1===n&&(V[F]=(0,i.xy2expr)(B[0],B[1]+r,1))}else{var Y=this.getCellTextIsAdd(n,l,B,a,t,r,2,s);Y.enter?V[F]=Y.data:!1===n&&(V[F]=(0,i.xy2expr)(B[0]+t,B[1],2))}}e[f]=V.join(":"),c=!0}else if(8===R){for(var z=e[f].split(":"),W=0;W<z.length;W++){var G=(0,i.expr2xy)(z[W].replace(/\$/g,""));if((G[0]+t<0||G[1]+r<0)&&(u=!0),0===W){var X=this.getCellTextIsAdd(n,l,G,a,t,r,0,s);X.enter?z[W]=X.data:!1===n&&(z[W]=(0,i.xy2expr)(G[0]+t,G[1]+r,0))}else{var $=this.getCellTextIsAdd(n,l,G,a,t,r,1,s);$.enter?z[W]=$.data:!1===n&&(z[W]=(0,i.xy2expr)(G[0]+t,G[1],1))}}e[f]=z.join(":"),c=!0}else if(9===R){for(var q=e[f].split(":"),K=0;K<q.length;K++){var Z=(0,i.expr2xy)(q[K].replace(/\$/g,""));if((Z[0]+t<0||Z[1]+r<0)&&(u=!0),0===K){var Q=this.getCellTextIsAdd(n,l,Z,a,t,r,1,s);Q.enter?q[K]=Q.data:!1===n&&(q[K]=(0,i.xy2expr)(Z[0]+t,Z[1]+r,0))}else{var J=this.getCellTextIsAdd(n,l,Z,a,t,r,2,s);J.enter?q[K]=J.data:!1===n&&(q[K]=(0,i.xy2expr)(Z[0]+t,Z[1],2))}}e[f]=q.join(":"),c=!0}else if(10===R){for(var ee=e[f].split(":"),te=0;te<ee.length;te++){var re=(0,i.expr2xy)(ee[te].replace(/\$/g,""));if((re[0]+t<0||re[1]+r<0)&&(u=!0),1===te){var ne=this.getCellTextIsAdd(n,l,re,a,t,r,0,s);ne.enter?ee[te]=ne.data:!1===n&&(ee[te]=(0,i.xy2expr)(re[0]+t,re[1]+r,0))}else{var ae=this.getCellTextIsAdd(n,l,re,a,t,r,2,s);ae.enter?ee[te]=ae.data:!1===n&&(ee[te]=(0,i.xy2expr)(re[0]+t,re[1],2))}}e[f]=ee.join(":"),c=!0}else if(11===R){for(var ie=e[f].split(":"),oe=0;oe<ie.length;oe++){var le=(0,i.expr2xy)(ie[oe].replace(/\$/g,""));if((le[0]+t<0||le[1]+r<0)&&(u=!0),1===oe){var se=this.getCellTextIsAdd(n,l,le,a,t,r,0,s);se.enter?ie[oe]=se.data:!1===n&&(ie[oe]=(0,i.xy2expr)(le[0]+t,le[1]+r,0))}else{var ue=this.getCellTextIsAdd(n,l,le,a,t,r,1,s);ue.enter?ie[oe]=ue.data:!1===n&&(ie[oe]=(0,i.xy2expr)(le[0]+t,le[1],1))}}e[f]=ie.join(":"),c=!0}}d+=e[f]}return{bad:u,enter:c,result:d}}},{key:"autoFilterRef",value:function(e,t){for(var r=p((0,i.expr2xy)(e),2),n=r[0],a=r[1],o=this.getCell(a,n);null!==o;)a+=1,o=this.getCell(a,n);return t.eri=a,t}},{key:"getAllDataType",value:function(e){var t=this,r=!0,n=!0,a=[];return e.each((function(e,i){var o=!1,l=t.getCell(e,i);if(l){l=(0,s.deepCopy)(l);var u=new d.default(l).getCellDataType(a,{isDate:n,isNumber:r});n=u.isDate,r=u.isNumber}else o=!0,r=!1,n=!1;o&&a.push({text:0,formulas:0,tmp:"",type:"other"})})),{isDate:n,isNumber:r,sarr:a}}},{key:"calcNumberCellByTopCell",value:function(e,t,r,n,a,i){var o=e.text,l=e.formulas;o=this.toString(o),l=this.toString(l);var s={};if(this.isFormula(l)){var u=1*o.replace("=","")+t;s={text:"="+u,formulas:"="+u}}else if(""!==o){var c=1*o;if(-1!==o.indexOf(",")){c=c.replace(/,/g,"");var d=parseFloat(c)+t;c=this.formatMoney(d,0)}else c+=t;s={text:c+"",formulas:c+""}}this.copyRender(r,n.ri,n.ci,s,a,i)}},{key:"calcFormulaCellByTopCell",value:function(e,t,r,n,a,i){var o=(0,s.splitStr)(e),l=this.getRangeByTopCell({ri:r.ri,ci:r.ci},n,a),u=r.ri-l.ri,c=r.ci-l.ci,d=this.getCellTextByShift(o,c,u),f=d.bad,m=d.result;this.updateCellReferenceByShift(f,m,r.ri,r.ci,i)}},{key:"calcCellByTopCell",value:function(e,t,r,n,i,o,l,s){if((0,a.isHave)(o)||(o=""),isNaN(o)){var u=this.toString(o).split(/\d+/g);if(u){var c=0;r.text=i?o.replace(/\d+/g,(function(e){return c+=1,u.length-1===c?1*e+1:e})):o.replace(/\d+/g,(function(e){return c+=1,u.length-1===c?1*e-1:e})),r.formulas=r.text}}else r.text=o,r.formulas=r.text;this.copyRender(n,l.ri,l.ci,r,t,e)}},{key:"calcDateCellByTopCell",value:function(e,t,r,n,a,i,o){if(""!==e.text){var s=e.text,u="";u=(0,l.default)(s).add(o,"day").format("YYYY-MM-DD"),e.text=this.toString(u),e.formulas=this.toString(u),this.copyRender(t,r.ri,r.ci,e,a,i)}}},{key:"getRangeByTopCell",value:function(e,t,r){var n=e.ri,a=e.ci;return r?(n=t?n:n-1,a=t?a-1:a):(n=t?n:n+1,a=t?a+1:a),{ri:n,ci:a}}},{key:"getCellByTopCell",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(arguments.length>5&&void 0!==arguments[5]&&arguments[5],"date"!==n){var i=this.getRangeByTopCell({ri:r?e.ri-a:e.ri+a,ci:e.ci},t,r),o=i.ri,l=i.ci;return this.getCellByCell(o,l)}if(1===t){var s=this.getRangeByTopCell({ri:r?e.ri-a:e.ri+a,ci:e.ci},!1,r),u=s.ri,c=s.ci;return this.getCellByCell(u,c)}return 2===t?this.getCellByCell(e.ri,e.ci-1):3===t?this.getCellByCell(e.ri,e.ci+1):void 0}},{key:"getCellByCell",value:function(e,t){var r=this.getCell(e,t);return r||(r={text:"",formulas:""}),(0,n.cloneDeep)(r)}},{key:"updateCellReferenceByShift",value:function(e,t,r,n){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},i={};e?(i.text="#REF!",i.formulas="#REF!"):(i.text=""!==t?t:"",i.formulas=""!==t?t:""),this.setCell(r,n,i,"all"),a(r,n,i)}},{key:"copyPaste",value:function(e,t,r){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},a=this.pasteProxy;a.setSrcAndDstCellRange(e,t);for(var i=a.use(),o=i.rn,l=i.cn,s=a.autoFilterDirection(),u=s?o:l,c=0;c<u;c++){for(var d=a.upOrDown(),f=a.getOneDRangeObj(s,c),m=f.srcOneDRange,h=f.dstOneDRange,v=this.getAllDataType(m),p=v.isNumber,g=v.isDate,y=v.sarr,b=h.getLocationArray(y),E=a.leftOrRight(),A=!1,w=0;w<b.length;w++){var _=b[w];(p||"number"===_.type||g||"date"===_.type)&&(A=!0)}if(d)for(var N=0;N<b.length;N++){var C=b[N];if(p||"number"===C.type){var T=a.calcDiff(y,d);O.call(this,b[N],b,s,d,T,r,n,p)}else g||"date"===C.type?x.call(this,b[N],E,d,b,r,n,g):R.call(this,b[N],b,s,d,r,n,A,y.length-1)}else for(var M=b.length-1;M>=0;M--){var S=b[M];if(p||"number"===S.type){var I=a.calcDiff(y,d);O.call(this,b[M],b,s,d,I,r,n,p)}else g||"date"===S.type?x.call(this,b[M],E,d,b,r,n,g):R.call(this,b[M],b,s,d,r,n,A,y.length-1)}}}},{key:"copyRender",value:function(e,t,r,n,a,i){for(var o=!1,l=0;!1===o&&l<e.length;l++)e[l].ri===t&&e[l].ci===r&&(o=!0);o&&(this.setCell(t,r,n,a),i(t,r,n))}},{key:"cutPaste",value:function(e,t){var r=this,n=[];this.each((function(a){r.eachCells(a,(function(i){var o=parseInt(a,10),l=parseInt(i,10);e.includes(a,i)&&(o=t.sri+(o-e.sri),l=t.sci+(l-e.sci)),1*a===o&&1*i===l||""!==r._[a].cells[i].text&&""!==r._[a].cells[i].formulas&&n.push({nri:o,nci:l,ri:a,ci:i,cell:(0,s.deepCopy)(r._[a].cells[i])})}))}));for(var a=0;a<n.length;a++){var i=n[a],o=i.ri,l=i.ci;this.setCell(o,l,{},"all")}for(var u=0;u<n.length;u++){var c=n[u],d=c.nri,f=c.nci,m=c.cell;this.setCell(d,f,m,"all")}}},{key:"insert",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n={},i=[];this.each((function(o,l){var u=parseInt(o,10);u>=e&&(u+=r,t.eachCells(o,(function(n,o){if((0,a.isHave)(o)&&(0,a.isHave)(o.formulas)&&t.isFormula(o.formulas)){var l=t.getCellTextByShift((0,s.splitStr)(o.formulas),0,r,!0,!0,e,!0),c=l.bad,d=l.result;l.enter&&!c&&i.push({ri:u,ci:n,cell:{text:d,formulas:d}})}}))),n[u]=l})),this._=n;for(var o=0;o<i.length;o++){var l=i[o],u=l.ri,c=l.ci,d=l.cell;this.setCell(u,c,d,"all")}this.len+=r}},{key:"delete",value:function(e,t){var r=this,n=t-e+1,i={},o=[];this.each((function(l,u){var c=parseInt(l,10);c<e?i[c]=u:l>t&&(i[c-n]=u,r.eachCells(l,(function(t,i){if((0,a.isHave)(i)&&(0,a.isHave)(i.formulas)&&r.isFormula(i.formulas)){var l=r.getCellTextByShift((0,s.splitStr)(i.formulas),0,-1*n,!0,!1,e,!0),u=l.bad,d=l.result;l.enter&&!u&&o.push({ri:c-n,ci:t,cell:{text:d,formulas:d}})}})))})),this._=i;for(var l=0;l<o.length;l++){var u=o[l],c=u.ri,d=u.ci,f=u.cell;this.setCell(c,d,f,"all")}this.len-=n}},{key:"insertColumn",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=[];this.each((function(i,o){var l={};t.eachCells(i,(function(o,u){var c=parseInt(o,10);if(c>=e&&(c+=r,(0,a.isHave)(u)&&(0,a.isHave)(u.formulas)&&t.isFormula(u.formulas))){var d=t.getCellTextByShift((0,s.splitStr)(u.formulas),r,0,!0,!0,e,!1),f=d.bad,m=d.result;d.enter&&!f&&n.push({ri:i,ci:c,cell:{text:m,formulas:m}})}l[c]=u})),o.cells=l}));for(var i=0;i<n.length;i++){var o=n[i],l=o.ri,u=o.ci,c=o.cell;this.setCell(l,u,c,"all")}}},{key:"deleteColumn",value:function(e,t){var r=this,n=t-e+1;this.each((function(a,i){var o={};r.eachCells(a,(function(r,a){var i=parseInt(r,10);i<e?o[i]=a:i>t&&(o[i-n]=a)})),i.cells=o}))}},{key:"deleteCells",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"all";e.each((function(e,n){t.deleteCell(e,n,r)}))}},{key:"deleteCell",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"all",n=this.get(e);if(null!==n){var i=this.getCell(e,t);null!==i&&("all"===r?delete n.cells[t]:"text"===r?((0,a.isHave)(i.text)&&delete i.text,(0,a.isHave)(i.value)&&delete i.value,(0,a.isHave)(i.formulas)&&delete i.formulas):"format"===r?(void 0!==i.style&&delete i.style,i.merge&&delete i.merge):"merge"===r&&i.merge&&delete i.merge)}}},{key:"each",value:function(e){Object.entries(this._).forEach((function(t){var r=p(t,2),n=r[0],a=r[1];e(n,a)}))}},{key:"eachCells",value:function(e,t){this._[e]&&this._[e].cells&&Object.entries(this._[e].cells).forEach((function(e){var r=p(e,2),n=r[0],a=r[1];t(n,a)}))}},{key:"recast",value:function(e){try{if(this.isReferOtherSheet(e,!0)){var t=new u.default(e.formulas);t.parse(),e.recast=t}else e.recast=null}catch(t){e.recast=null}}},{key:"init",value:function(){var e=this;this.each((function(t){e.eachCells(t,(function(r){e.getDependCell((0,i.xy2expr)(r,t),e.getCell(t,r))}))}))}},{key:"setData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];try{e.len&&(this.len=e.len,delete e.len),this._=e,r||""!==t&&(console.time("setData"),n&&(this.init(),t.toolbar.change("close","")),console.timeEnd("setData"))}catch(e){console.error(e)}}},{key:"getData",value:function(){var e=this.len;return Object.assign({len:e},this._)}}])&&b(t.prototype,r),v&&b(t,v),e}();t.Rows=A},,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.process=v,t.mountImg=g,t.isHaveStyle=function(e,t){for(var r=0;r<e.length;r++)if(E(e[r],t))return r;return-1},t.mountPaste=function(e,t){for(var r=this,i=e.clipboardData,o=!1,l=0;l<i.items.length;l++){var s=i.items[l];if("string"===s.kind)s.getAsString((function(e){var t=(0,a.h)("head",""),i=(0,a.h)("span","");-1===e.indexOf("<span")&&-1===e.indexOf("span>")&&-1===e.indexOf("<table")&&-1===e.indexOf("table>")?(i.html(e),t.child(i.el),t=t.el):(t.html(e),t=t.el);var l=t.getElementsByTagName("img")[0],s=t.getElementsByTagName("style")[0],u=t.getElementsByTagName("table")[0],c=t.getElementsByTagName("span")[0];if(l&&!s)g.call(r,l),o=!0;else if(u){if(s)r.el.child(s);u&&!1===o&&(v.call(r,u,s),o=!0)}else setTimeout((function(){if(!o){if(c&&(u=h.call(r,c,u)),s)r.el.child(s);if(u&&!1===o)r.el.child(u),R.call(r,u),u.parentNode.removeChild(u),s&&s.parentNode.removeChild(s),n.sheetReset.call(r),o=!0}}),100)}));else if("file"===s.kind&&!o){var u=s.getAsFile(),c=new FileReader;if(c.onload=function(e){var t=(0,a.h)("img","paste-img");t.el.src=e.target.result,setTimeout((function(){o||(o=!0,g.call(r,t.el))}),0)},!u)return;c.readAsDataURL(u)}}setTimeout((function(){if(o){var e=r.data;e.change(e.getData())}else t()}))},t.hideDirectionArr=y,t.deleteImg=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.data.pasteDirectionsArr,r=[],n=[];if(this.direction=!1,t.length>0)for(var a=0;a<t.length;a++)!0===t[a].state||!0===e?n.push(t[a]):r.push(t[a]);Object.keys(n).forEach((function(e){n[e].img.removeEl()})),this.pasteDirectionsArr=r;var i=this.data;i.pasteDirectionsArr=r,i.change(i.getData())},t.GetInfoFromTable=R,t.dragOption=t.resizeOption=void 0;var n=r(40),a=r(0),i=d(r(79)),o=d(r(182)),l=r(1),s=r(77),u=d(r(5)),c=d(r(183));function d(e){return e&&e.__esModule?e:{default:e}}var f={onBegin:function(e){console.log("obegin",e)},onEnd:function(e){},onResize:function(e,t){var r=s.getChooseImg.call(t);r&&(r.img2.style.width=r.img.el.style.width,r.img2.style.height=r.img.el.style.height)}};t.resizeOption=f;var m={onBegin:function(e){console.log("obegin",e)},onEnd:function(e,t){var r=e.left,n=e.top,a=s.getChooseImg.call(t);if(a){n-31<0?n=0:r-60<0&&(r=0);var i=t.data.getCellRectByXY(r+60,n+31);i.sri=i.ri,i.sci=i.ci,i.eri=i.ri,i.eci=i.ci;var o=r-i.left+50,l=n-i.top+21;a.offsetLeft=o,a.offsetTop=l,a.range=i,void 0!==a.lastCi&&void 0!==a.lastRi&&(a.ri=a.lastRi,a.ci=a.lastCi),a.lastCi=i.ci,a.lastRi=i.ri}},onDrag:function(e){}};function h(e,t){for(var r=(0,a.h)("table",""),n=(0,a.h)("tbody",""),i=e.innerText.split("\n"),o=0;o<i.length;o++){var l=i[o],s=(0,a.h)("tr",""),u=(0,a.h)("td","");u.html(l),u.css("background",e.style.background),u.css("font-weight",e.style["font-weight"]),u.css("color",e.style.color),s.child(u),n.child(s)}return r.child(n),r.el}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=this.el,a=this.data;a.history.add(a.getData()),r.child(e),R.call(this,e),e.parentNode.removeChild(e),t&&t.parentNode.removeChild(t),n.sheetReset.call(this)}function p(e,t){for(var r=0,n=0,a=this.data.pasteDirectionsArr,i=0,o=0;o<a.length;o++){var l=a[o];l.ri===e&&l.ci===t&&(n<l.nextLeft&&(n=l.nextLeft),r<l.nextTop&&(r=l.nextTop),i++)}return{top:r,left:n,number:i}}function g(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0,c=arguments.length>3?arguments[3]:void 0,d=arguments.length>4?arguments[4]:void 0,h=new Image;h.src=e.src,h.onload=function(){var v=h.width,g=h.height,y=e,E=t.container,R=t.data,O=R.pasteDirectionsArr,x=R.selector,A=x.ri,w=x.ci;r&&(A=n,w=c);var _=t.pictureOffsetLeft,N=t.pictureOffsetTop,C=R.getMoveRect(new u.default(A,w,A,w)),T=C.left+_,M=C.top+N,S=0,I=s.getChooseImg.call(t);if(I){var j=p.call(t,I.ri,I.ci);T=j.left,M=j.top,A=I.ri,w=I.ci,S=j.number}var D=(0,a.h)("div","".concat(l.cssPrefix,"-object-container")).css("position","absolute").css("top","".concat(M,"px")).css("width","".concat(v,"px")).css("height","".concat(g,"px")).css("z-index","100000").css("left","".concat(T,"px")).child(y);E.child(D),new i.default(m,t).register(D.el),setTimeout((function(){var e=t.data,n=new o.default(f,t).register(D.el),a=O.length;O.push({src:y.src,state:!0,arr:n,img:D,index:a,img2:y,ri:A,ci:w,offsetLeft:0,offsetTop:0,number:S,range:r?d:e.selector.range,top:M,left:T,nextLeft:T+15,nextTop:M+15}),r||t.data.change(t.data.getData()),t.direction=!0,D.css("width","".concat(y.offsetWidth,"px")),D.css("height","".concat(y.offsetHeight,"px")),b.call(t,n,a,O,r),D.on("mousedown",(function(){return b.call(t,n,a,O)}))}),0)}}function y(){var e=this.data.pasteDirectionsArr;if(this.direction=!1,e.length>0)for(var t=0;t<e.length;t++){var r=e[t].arr;if(r.length>0)for(var n=0;n<r.length;n++)r[n].style.display="none";e[t].state=!1,e[t].img.css("z-index","10000"),e[t].img2.style.border="none"}}function b(e,t,r,n){y.call(this),this.direction=!0,Object.keys(e).forEach((function(t){e[t].style.display="block"}));var a=this.selector,i=this.editor;n?y.call(this):(a.hide(),i.clear(),r[t].img.css("z-index","99999999"),r[t].state=!0)}function E(e,t){if(!(e instanceof Object)||!(t instanceof Object))return e===t;if(Object.keys(e).length!==Object.keys(t).length)return!1;var r=Object.keys(e);for(var n in r){var a=e[n=r[n]]instanceof Object,i=t[n]instanceof Object;if(a&&i){var o=E(e[n],t[n]);if(!o)return o}else if(e[n]!==t[n])return!1}return!0}function R(e){var t=this.data,r=t.selector,n=r.ri,a=r.ci,i=t.styles;console.time("paste");var o=new c.default(t);o.extend(e,{ri:n,ci:a}),o.dealColSpan(e),o.dealStyle(e,{ri:n,ci:a});var l=o.dealReference(e,{ri:n,ci:a}).reference;this.setCellRange(l,o,!0,o.parseTableCellRange(e,{ri:n,ci:a}));var s=t.getSelectedRect(),u=s.left+s.width+60,d=s.top+s.height+31,f=this.advice;return this.editor.clear(),f.show(u,d,1,l,o),console.timeEnd("paste"),{rows:t.rows._,styles:i}}t.dragOption=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectorCellText=Oe,t.insertDeleteRowColumn=we,t.sheetReset=z,t.selectorSet=P,t.default=void 0;var n=r(0),a=r(7),i=I(r(143)),o=I(r(144)),l=I(r(71)),s=I(r(146)),u=I(r(157)),c=I(r(41)),d=I(r(158)),f=I(r(170)),m=I(r(174)),h=r(175),v=r(1),p=r(74),g=r(30),y=I(r(176)),b=r(29),E=r(39),R=r(77),O=I(r(177)),x=r(6),A=(r(70),I(r(5))),w=r(10),_=r(4),N=I(r(179)),C=I(r(180)),T=r(31),M=I(r(181)),S=I(r(78));function I(e){return e&&e.__esModule?e:{default:e}}function j(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function D(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function k(){var e=this.data,t=this.verticalScrollbar,r=this.horizontalScrollbar,n=e.getSelectedRect(),a=n.l,i=n.t,o=n.left,l=n.top,s=n.width,u=n.height,c=this.getTableOffset();if(Math.abs(o)+s>c.width)r.move({left:a+s-c.width});else{var d=e.freezeTotalWidth();o<d&&r.move({left:a-1-d})}if(Math.abs(1*l)+u>c.height)t.move({top:i+u-c.height-1});else{var f=e.freezeTotalHeight();l<f&&t.move({top:i-1-f})}}function P(e,t,r){var n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(-1!==t||-1!==r){var i=this.table,o=this.selector,l=this.toolbar;e?o.setEnd(t,r,a,!0):o.set(t,r,n),l.reset(),clearTimeout(this.render_timer),this.render_timer=setTimeout((function(){i.render()}),100)}}function L(e,t){var r=this.selector,n=this.data,a=this.editor,i=n.rows,o=n.cols;a.isCors&&(r.indexes=[a.ri,a.ci]);var l=D(r.indexes,2),s=l[0],u=l[1],c=r.range.eci;if(e){var d=D(r.moveIndexes,2);s=d[0],u=d[1]}"left"===t?u>0&&(u-=1):"right"===t?(c!==u&&(u=c),u<o.len-1&&(u+=1)):"up"===t?s>0&&(s-=1):"down"===t?s<i.len-1&&(s+=1):"row-first"===t?u=0:"row-last"===t?u=o.len-1:"col-first"===t?s=0:"col-last"===t&&(s=i.len-1),e&&(r.moveIndexes=[s,u]),r.selectCell.setData(s,u),r.selectCell.resetSelectOffset(),P.call(this,e,s,u),ce.call(this),k.call(this)}function U(e){if(0===e.buttons&&e.target.className!=="".concat(v.cssPrefix,"-resizer-hover")){var t=e.offsetX,r=e.offsetY,n=this.rowResizer,a=this.colResizer,i=this.tableEl,o=this.data,l=this.website,s=o.getCellRectByXY(e.offsetX,e.offsetY);l.show(s.ri,s.ci);var u=o.rows,c=o.cols;if(t>c.indexWidth&&r>u.height)return n.hide(),void a.hide();var d=i.box();s.ri>=0&&-1===s.ci?(s.width=c.indexWidth,n.show(s,{width:d.width})):n.hide(),-1===s.ri&&s.ci>=0?(s.height=u.height,a.show(s,{height:d.height})):a.hide()}}function V(e){var t=this.verticalScrollbar,r=this.data,n=r.settings.autoLoad,a=t.scroll().top,i=e.deltaY,o=r.rows;if(e.detail&&(i=40*e.detail),i>0&&!0===n){var l=r.scroll.ri+1;l<o.len&&t.move({top:a+o.getHeight(l)-1})}else if(!0===n){var s=r.scroll.ri-1;s>=0&&t.move({top:0===s?0:a-o.getHeight(s)})}}function F(e,t){var r=this.verticalScrollbar,n=this.horizontalScrollbar,a=r.scroll().top,i=n.scroll().left;"left"===e||"right"===e?n.move({left:i-t}):"up"!==e&&"down"!==e||r.move({top:a-t})}function B(){var e=this.data,t=this.verticalScrollbar,r=this.getTableOffset().height;t.set(r,e.rows.totalHeight())}function H(){var e=this.data,t=this.horizontalScrollbar,r=this.getTableOffset().width;e&&t.set(r,e.cols.totalWidth())}function Y(){var e=this.selector,t=this.data,r=this.editor,n=D(t.freeze,2),a=n[0],i=n[1];if(a>0||i>0){var o=t.freezeTotalWidth(),l=t.freezeTotalHeight();r.setFreezeLengths(o,l)}e.resetAreaOffset()}function z(){var e=this.tableEl,t=this.overlayerEl,r=this.overlayerCEl,n=this.table,a=this.toolbar,i=this.selector,o=this.el,l=this.getTableOffset(),s=this.getRect();e.attr(s),t.offset(s),r.offset(l),o.css("width","".concat(s.width,"px")),pe.call(this),ge.call(this),B.call(this),H.call(this),Y.call(this),i.selectCell.toolbarChangeSelectorCell(),n.render(),a.reset(),i.reset()}function W(){var e=this.data,t=this.selector;e.clearClipboard(),t.hideClipboard()}function G(){var e=this.data,t=this.selector;e.copy(),t.showClipboard()}function X(){var e=this.data,t=this.selector;e.cut(),t.showClipboard()}function $(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){e&&(W.call(t),z.call(t))},n=this.data.paste(e,(function(e){return(0,h.xtoast)("Tip",e)}));return r(n),n}function q(){this.data.autofilter(),z.call(this)}function K(){var e=this,t=this.toolbar,r=this.data;t.paintformatActive()&&(r.paintFormatChange((function(t,r){P.call(e,!0,t,r,!0,!0)})),W.call(this),t.paintformatToggle(),t.reset())}function Z(e,t,r,n,a,i,o){var l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,s=arguments.length>8?arguments[8]:void 0,u=arguments.length>9?arguments[9]:void 0,c=arguments.length>10?arguments[10]:void 0;this.selector.setBoxinner("none"),this.container.css("pointer-events","none");var d=n.getCellRectByXYWithNotTotalResult(e.layerX||e.clientX,e.layerY||e.clientY),f=d.ri,m=d.ci;if(t){var h=Q.call(this,n,r,a,u,s,e,i,c,f,m,l),v=h.rpos,p=h.ey,g=h.ex,y=r.showAutofill(f,m,v);(0,w.isOusideViewRange)(this.data.settings.view.height(),this.data.settings.view.width(),p,g,y)&&te.call(this,y,a,u,c,i,n)}else if(1===e.buttons&&!e.shiftKey){f=f<=0?0:f,m=m<=0?0:m;var b=n.viewRange().getMovePos(f,m);J.call(this,b,a,u,c,i,n),console.log("ri: ",f,"ci: ",m),P.call(this,!0,f,m,!0,!0)}}function Q(e,t,r,n,a,i,o,l,s,u,c){var d=e.getRect(t.range),f=new C.default(d),m=d.width+d.left,h=d.height+d.top+v.offsetTop,p=i.clientX-a.l-v.offsetLeft,g=i.clientY;return f.isLocInside(p,g)?(c=-1,t.arange=null):c=f.getUpDownLeftRight(p,g,m,h),{rpos:c,ex:p,ey:g}}function J(e,t,r,n,a,i){2===e?ee.call(this,1,t,r,a,i,n):6===e?ee.call(this,2,t,r,a,i,n):3===e?ee.call(this,4,t,r,a,i,n):5===e?ee.call(this,3,t,r,a,i,n):1===e?(ee.call(this,1,t,r,a,i,n),ee.call(this,4,t,r,a,i,n)):7===e?(ee.call(this,1,t,r,a,i,n),ee.call(this,3,t,r,a,i,n)):8===e?(ee.call(this,2,t,r,a,i,n),ee.call(this,4,t,r,a,i,n)):4===e&&(ee.call(this,2,t,r,a,i,n),ee.call(this,3,t,r,a,i,n))}function ee(e,t,r,n,a,i){if(1===Math.round(Math.random())){var o=0,l=0;if(1===e){var s=t.scroll().top;o=a.scroll.ri+1,t.move({top:s+n.getHeight(o)-1})}else if(2===e){var u=t.scroll().top;o=a.scroll.ri-1,t.move({top:0===o?0:u-n.getHeight(o)})}else if(4===e){var c=r.scroll().left;l=a.scroll.ci+1,r.move({left:c+i.getWidth(l)})}else if(3===e){var d=r.scroll().left;l=a.scroll.ci-1,r.move({left:d-i.getWidth(l)})}}}function te(e,t,r,n,a,i){var o=0,l=0;if(44===e){var s=t.scroll().top;o=i.scroll.ri+1,t.move({top:s+a.getHeight(o)-1})}else if(22===e){var u=t.scroll().top;(o=i.scroll.ri-1)>=0&&t.move({top:0===o?0:u-a.getHeight(o)})}else if(33===e&&1===Math.round(Math.random())&&1===Math.round(Math.random())){var c=r.scroll().left;l=i.scroll.ci+1,r.move({left:c+n.getWidth(l)})}else if(11===e&&1===Math.round(Math.random())&&1===Math.round(Math.random())){var d=r.scroll().left;l=i.scroll.ci-1,r.move({left:d-n.getWidth(l)})}}function re(e){var t=this,r=this.selector,n=this.data,i=this.sortFilter,o=this.editor,l=this.advice,s=e.offsetX,u=e.offsetY,c=e.target.className==="".concat(v.cssPrefix,"-selector-corner"),d=n.getCellRectByXY(s,u),f=d.left,m=d.top,p=d.width,g=d.height,y=d.ri,b=d.ci;o.setRiCi(y,b);var R=n.autoFilter;if(E.hideDirectionArr.call(this),l.el.hide(),R.includes2(y,b)&&R.getSet(n.exceptRowSet,y),R.includes(y,b)&&f+p-20<s&&m+g-20<u){var O=R.items(b,(function(e,t){return n.rows.getCell(e,t)}));return i.set(b,O,R.getFilter(b),R.getSort(b)),void i.setOffset({left:f,top:m+g+2})}if(!e.shiftKey){c?r.showAutofill(y,b):P.call(this,!1,y,b);var x=this.verticalScrollbar,A=this.horizontalScrollbar,w=n.rows,_=n.cols;y=n.scroll.ri+1;var N=function(e){for(var t=e.offsetTop,r=e.offsetLeft;e=e.offsetParent;)t+=e.offsetTop,r+=e.offsetLeft;return{t:t,l:r}}(this.el.el);(0,a.mouseMoveUp)(window,(function(a){console.log("dropdown"),ae.call(t),ne.call(t,a,c,r,n,x,w,e,N,A,_),Z.call(t,a,c,r,n,x,w,e,0,N,A,_)}),(function(){ae.call(t),c&&n.autofill(r.arange,"all",(function(e){return(0,h.xtoast)("Tip",e)}))&&(T.testValid.call(t),ie.call(t)),t.selector.setBoxinner("auto"),r.hideAutofill(),K.call(t),t.container.css("pointer-events","auto")}))}c||1!==e.buttons||e.shiftKey&&P.call(this,!0,y,b)}function ne(e,t,r,n,a,i,o,l,s,u){var c=this,d=setTimeout((function(){var d=setInterval((function(){Z.call(c,e,t,r,n,a,i,o,0,l,s,u)}),50);c.stopTimer2.push(d)}),200);this.stopTimer.push(d)}function ae(){this.stopTimer.clear(),this.stopTimer2.clear()}function ie(){this.data;var e=this.table;this.editor.display=!0;this.selector.arange=null,oe.call(this),e.render()}function oe(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]}function le(e){Ee.call(this,{ri:-1,ci:0,left:60,top:0,width:100},e)}function se(){var e=this.data.getSelectedRect(),t=e.left+e.width+60,r=e.top+e.height+31;this.advice.el.el.style.top="".concat(r,"px"),this.advice.el.el.style.left="".concat(t,"px")}function ue(){var e=this.data,t=this.pictureOffsetLeft,r=this.pictureOffsetTop;this.data.pasteDirectionsArr.forEach((function(n){var a=e.getMoveRect(n.range);n.img.el.style.top="".concat(a.top+r+15*n.number+n.offsetTop,"px"),n.img.el.style.left="".concat(a.left+t+15*n.number+n.offsetLeft,"px")}))}function ce(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,n=this.selector,a=this.data,i=this.editor,o=D(n.indexes,2),l=o[0],s=o[1];l=-1===t?l:t,s=-1===r?s:r;var u=a.getMoveRect(new A.default(l,s,n.range.eri,n.range.eci)),c=this.getTableOffset(),d="top";u.top>c.height/2&&(d="bottom"),i.setOffset(u,d,e),setTimeout((function(){i.setCursorPos(i.editorText.getText().length)}))}function de(){for(var e=0;e<this.selectors.length;e++){var t=this.selectors[e];t.selector.resetSelectorBRLAreaOffset(new A.default(t.ri,t.ci,t.ri,t.ci))}}function fe(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.overlayerCEl=!0===e?(0,n.h)("div","".concat(v.cssPrefix,"-overlayer-content")).children(this.editor.el,this.selectorMoveEl.el,this.selector.el):(0,n.h)("div","".concat(v.cssPrefix,"-overlayer-content")).children(this.selectorMoveEl.el)}function me(){var e=this.editor,t=this.data,r=this.selector;ce.call(this),e.setCellEnd(t.getSelectedCell()),this.data.settings.showEditor&&r.el.hide(),W.call(this),setTimeout((function(){e.setCursorPos(e.editorText.getText().length)}))}function he(e){var t=this,r=this.data,n=this.table,a=this.selector,i=this.editor;r.scrolly(e,(function(){i.display=!1,a.resetBRLAreaOffset(),ue.call(t),se.call(t),de.call(t),ce.call(t,!1),n.render()}))}function ve(e){var t=this,r=this.data,n=this.table,a=this.selector,i=this.editor;r.scrollx(e,(function(){i.display=!1,a.resetBRTAreaOffset(),ue.call(t),se.call(t),de.call(t),ce.call(t,!1),n.render()}))}function pe(){var e=this.data,t=this.table,r=e.viewRange2(),n=e.settings.style.autoAdapt,a=e.settings.ignoreRi,i=0;if(n){if(r.each((function(e,r){var n=t.getCellTextContent(e,r),i=t.getDrawBox(e,r);if(void 0!==n){var o=t.getCellTextStyle(e,r),l=Object.assign({},o.font);l.size=(0,g.getFontSizePxByPt)(l.size);var s=null;void 0!==o.format||(s=t.draw.selfAdaptionTxtWidth(n,l,i)),(void 0===t.autoAdaptList[r]||t.autoAdaptList[r]<s)&&e>a-1&&(t.autoAdaptList[r]=s)}})),t.autoAdaptList.length<0)return;for(var o=e.settings.ignore,l=0;l<t.autoAdaptList.length;l++){for(var s=!1,u=0;u<o.length;u++)l===o[u]&&(s=!0);!1===s&&(void 0===t.autoAdaptList[l]?(i+=50,e.cols.setWidth(l,50)):(t.autoAdaptList[l]<30&&(t.autoAdaptList[l]=30),e.cols.setWidth(l,t.autoAdaptList[l]))),i+=t.autoAdaptList[l]}i>0&&(e.settings.cellWidth=function(){return i})}}function ge(){var e=this.data,t=this.table,r=e.viewRange2(),n=0,a=0,i=e.settings.row.height,o=e.settings.style.autoAdapt,l=0;if(o){r.each((function(r,o){var s=t.getCellTextContent(n,o),u=t.getCellTextStyle(r,o),c=Object.assign({},u.font);c.size=(0,g.getFontSizePxByPt)(c.size);var d=t.getDrawBox(n,o);if(n!==r&&void 0!==s){var f=e.rows.getHeight(n);if(i*a!==f){var m=c.size*a+2*d.padding+2*a;e.rows.setHeight(n,m),l+=m}else l+=f;a=0}else if(void 0!==s&&n===r&&void 0!==s){var h=t.draw.selfAdaptionHeight(d,s,c);(h>a||0===a)&&(a=h)}n=r}));var s=e.rows.getHeight(n),u=t.getCellTextStyle(s,0),c=Object.assign({},u.font);c.size=(0,g.getFontSizePxByPt)(c.size);var d=t.getDrawBox(n,0);if(i*a!==s&&l>0){var f=c.size*a+2*d.padding;l+=f,e.rows.setHeight(n,f)}else l>0&&(l+=s)}console.log(503,l),l>0&&(e.settings.view.height=function(){return l+40})}function ye(e){if(e.target.className==="".concat(v.cssPrefix,"-overlayer")){var t=this.selector,r=this.data,n=e.offsetX,a=e.offsetY,i=r.getCellRectByXY(n,a);t.selectCell.setData(i.ri,i.ci),t.selectCell.resetSelectOffset()}}function be(e,t){var r=e.ri,n=this.table,a=this.selector,i=this.data,o=this.toolbar;i.setRowHeight(r,t),i.change(i.getData()),o.reset(),n.render(),a.resetAreaOffset(),B.call(this),ce.call(this)}function Ee(e,t){var r=e.ci,n=this.table,a=this.selector,i=this.data,o=this.toolbar;i.setColWidth(r,t),i.change(i.getData()),o.reset(),n.render(),a.resetAreaOffset(),H.call(this),ce.call(this)}function Re(e,t){var r=this.errorPopUp;return e&&!r.open?(r.show(t),{state:!0,msg:t}):r.open?(r.hide(),{state:!0,msg:t}):{state:!1,msg:t}}function Oe(e,t,r,n){var a=r.text,i=r.style,o=this.data,l=this.editor,s=o.selectorCellText(e,t,a+"",n);return!(!s.state||!(s=Re.call(this,!0,s.msg)).state)||(o.setCellText(e,t,{text:a,style:i}),l.setRiCi(-1,-1),!1)}function xe(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"finished",r=this.data,n=this.table,a=this.editor,i=r.selector,o=i.ri,l=i.ci;a.ri!==o&&-1!==a.ri||a.ci!==l&&-1!==a.ci||(r.setSelectedCellText(e,t),"finished"===t&&n.render())}function Ae(){this.data.throwFormula()}function we(e){var t=this.data;"insert-row"===e?t.insert("row"):"delete-row"===e?t.delete("row"):"insert-column"===e?t.insert("column"):"delete-column"===e?t.delete("column"):"delete-cell"===e?t.deleteCell():"delete-cell-format"===e?t.deleteCell("format"):"delete-cell-text"===e&&t.deleteCell("text"),W.call(this),z.call(this)}function _e(e,t){var r=this.data;if("undo"===e)this.undo();else if("undoList"===e)t.setContent(r.historyList(1));else if("redoList"===e)t.setContent(r.historyList(2));else if("redo"===e)this.redo();else if("print"===e);else if("paintformat"===e)!0===t?G.call(this):W.call(this);else if("clearformat"===e)we.call(this,"delete-cell-format");else if("link"===e);else if("chart"===e);else if("autofilter"===e)q.call(this);else if("throwFormula"===e)Ae.call(this);else if("close"===e){var n=r.getMax(),a=n.mri,i=n.mci;r.changeDataForCalc=new S.default({type:999,action:"重新计算",ri:-1,ci:-1,oldCell:{},newCell:r.rows.eachRange(new A.default(0,0,a,i))},this.data),z.call(this)}else if("freeze"===e){var o=r.settings.showFreeze;if(t&&!0===o){var l=r.selector,s=l.ri,u=l.ci;this.freeze(s,u)}else this.freeze(0,0)}else"add"===e?(r.showEquation=!r.showEquation,z.call(this,!0)):(r.setSelectedCellAttr(e,t),"border"===e&&Ne.call(this,"none"),"cellFormulaProxy"===e&&me.call(this),z.call(this))}function Ne(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"1px solid rgb(75, 137, 255";this.selector.br.border(e)}function Ce(e,t,r,n){this.data.setAutoFilter(e,t,r,n),z.call(this)}function Te(e){if(e.getLock()||2===e.state){var t=e.ri,r=e.ci,n=e.editorText.getText();return this.selector.indexes=[t,r],Oe.call(this,t,r,{text:n},"input")}return!1}function Me(e){var t=this;W.call(this),E.mountPaste.call(this,e,(function(){z.call(t);var e=t.data;e.change(e.getData())}))}function Se(){var e=this,t=this.overlayerEl,r=this.rowResizer,n=this.colResizer,i=this.verticalScrollbar,o=this.horizontalScrollbar,l=this.editor,s=this.contextMenu,u=this.data,c=this.toolbar,d=this.modalValidation,f=this.sortFilter;t.on("mousemove",(function(t){U.call(e,t)})).on("mousedown",(function(t){if(2===t.buttons)u.xyInSelectedRect(t.offsetX,t.offsetY)?(s.setPosition(t.offsetX,t.offsetY),t.stopPropagation()):(s.hide(),re.call(e,t),setTimeout((function(){s.setPosition(t.offsetX,t.offsetY),t.stopPropagation()}),100)),ye.call(e,t);else if(2===t.detail){if(clearTimeout(e.render_timer),l.setMouseDownIndex([]),l.getLock())return;me.call(e)}else{if(l.getLock()||l.isCors){var r=null,n=0;(0,a.mouseMoveUp)(window,(function(a){e.container.css("pointer-events","none"),r&&r.selector&&r.selector.setBoxinner("none");var i=!0,o=u.merges,s=l.editorText.getText();if(Object.keys(o._).forEach((function(e){for(var t=o._[e],r=(0,x.cutStr)(s,!0),n=0;n<r.length;n++)if(-1!==r[n].indexOf(":")){var a=r[n].split(":")[0],l=r[n].split(":")[1],u=(0,_.expr2xy)(a),c=(0,_.expr2xy)(l);t.sci>=u[0]&&t.sri>=u[1]&&t.eci<=c[0]&&t.eri<=c[1]&&(i=!1)}})),i&&1===a.buttons&&!a.shiftKey){var c=u.getCellRectByXY(a.offsetX,a.offsetY),d=c.ri,f=c.ci;if(r&&r.selector)r=b.makeSelector.call(e,d,f,e.selectors,!0,r.selector,!0),b.lockCells.call(e,t,r),e.mergeSelector=!0;else{for(var m=l.pos,h=l.editorText.getText(),v=0;v<e.selectors.length;v++){var p=e.selectors[v];if(p.erpx===(0,x.cuttingByPos)(h,m)){n=1,(r=p).selector.set(d,f,!0);break}}r=r||b.makeSelector.call(e,d,f,e.selectors,!0,null,!1)}}}),(function(){if(e.container.css("pointer-events","auto"),r&&r.selector&&r.selector.setBoxinner("auto"),!1===e.mergeSelector?(r&&!n&&e.selectors.push(r),b.lockCells.call(e,t,r)):r&&!n&&r.selector&&e.selectors.push(r),r)for(var a=0;a<e.selectors.length;a++){var i=e.selectors[a];if(i.className===r.className){i.erpx=r.erpx;break}}r=null,n=0,e.mergeSelector=!1}))}if(console.time("dbclick time1"),!l.getLock()&&!l.isCors){console.time("dbclick time2");var i=l.ri,o=l.ci,c=l.editorText.getText();if(-1!==i&&-1!==o&&"="===c[0])if(Oe.call(e,i,o,{text:c},"input"))return;console.timeEnd("dbclick time2"),l.clear()&&oe.call(e),e.selector.longTimeBefore(),re.call(e,t),ye.call(e,t),Ne.call(e),b.clearSelectors.call(e),ce.call(e)}T.testValid.call(e),console.timeEnd("dbclick time1")}})).on("mousewheel.stop",(function(t){V.call(e,t)})),(0,a.bindTouch)(t.el,{move:function(t,r){F.call(e,t,r)}}),c.change=function(t,r){return _e.call(e,t,r)},f.ok=function(t,r,n,a){return Ce.call(e,t,r,n,a)},r.finishedFn=function(t,r){be.call(e,t,r)},n.finishedFn=function(t,r){Ee.call(e,t,r)},i.moveFn=function(t,r){he.call(e,t,r)},o.moveFn=function(t,r){ve.call(e,t,r)},l.change=function(t,r){if("finish"===t)return u.editorChangeToHistory(l.editorText.getOldCell(),l.editorText.getRICI(),1),void l.editorText.setOldCell({},{ri:-1,ci:-1});if("@~esc"===r){var n=l.editorText.getOldCell(),a=n.text,i=n.formulas;l.editorText.setOldCell({text:"",formulas:""});var o=l.ri,s=l.ci;return u.setSelectedCell(a,"input",i,o,s),l.setText(""),b.clearSelectors.call(e),void l.clear(!0)}"format"===t&&u.setSelectedCellAttr(t,"rmb");var c=l.lock;l.setMouseDownIndex(u.rows,[]),b.editingSelectors.call(e,r),c&&"="!==r||"format"!==t&&xe.call(e,r,t)},d.change=function(e){if("save"===e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];u.addValidation.apply(u,r)}else u.removeValidation()},s.itemClick=function(t){"validation"===t?d.setValue(u.getSelectedValidation()):"copy"===t?G.call(e):"cut"===t?X.call(e):"paste"===t||("paste-value"===t?$.call(e,"text"):"paste-format"===t?$.call(e,"format"):we.call(e,t))},(0,a.bind)(window,"resize",(function(){e.reload()})),(0,a.bind)(window,"click",(function(e){t.contains(e.target)})),(0,a.bind)(window,"copy",(function(t){R.mountCopy.call(e,t)})),(0,a.bind)(window,"cut",(function(t){console.log("cut",t),X.call(e),R.mountCopy.call(e,t);var r=e.data;r.history.add(r.getData())})),(0,a.bind)(window,"paste",(function(t){Me.call(e,t)})),(0,a.bind)(window,"keydown",(function(t){var r=t.keyCode||t.which,n=t.key,a=t.ctrlKey,i=t.shiftKey,o=t.metaKey;if(R.getChooseImg.call(e)){switch(console.log(r),r){case 8:u.history.addPic(u.getData().pictures,"add"),E.deleteImg.call(e)}(a||o)&&90===r&&(e.undo(),t.preventDefault())}else if(a||o)switch(r){case 90:e.undo(),t.preventDefault();break;case 89:e.redo(),t.preventDefault();break;case 67:if(R.getChooseImg.call(e))return;G.call(e),t.preventDefault();break;case 88:X.call(e),t.preventDefault();break;case 85:c.trigger("underline"),t.preventDefault();break;case 86:break;case 37:L.call(e,i,"row-first"),t.preventDefault();break;case 38:L.call(e,i,"col-first"),t.preventDefault();break;case 39:L.call(e,i,"row-last"),t.preventDefault();break;case 40:L.call(e,i,"col-last"),t.preventDefault();break;case 32:P.call(e,!1,-1,u.selector.ci,!1),t.preventDefault();break;case 66:c.trigger("font-bold");break;case 73:c.trigger("font-italic")}else{switch(r){case 32:i&&P.call(e,!1,u.selector.ri,-1,!1);break;case 27:s.hide(),W.call(e);break;case 37:L.call(e,i,"left"),t.preventDefault();break;case 38:L.call(e,i,"up"),t.preventDefault();break;case 39:L.call(e,i,"right"),t.preventDefault();break;case 40:L.call(e,i,"down"),t.preventDefault();break;case 9:if(Te.call(e,l))return;l.clear(),L.call(e,!1,i?"left":"right"),t.preventDefault(),b.clearSelectors.call(e);break;case 13:if(Te.call(e,l))return;l.clear(),pe.call(e),ge.call(e),L.call(e,!1,i?"up":"down"),oe.call(e),t.preventDefault(),ce.call(e,!0),b.clearSelectors.call(e);break;case 8:we.call(e,"delete-cell-text")}"Delete"===n?(we.call(e,"delete-cell-text"),t.preventDefault()):r>=65&&r<=90||r>=48&&r<=57||r>=96&&r<=105||"="===t.key||113===r&&me.call(e)}}))}var Ie=function(){function e(t,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var h=r.settings,g=h.view,b=h.showToolbar,E=h.showContextmenu,R=h.showEditor,x=h.rowWidth;this.el=(0,n.h)("div","".concat(v.cssPrefix,"-sheet")),this.toolbar=new d.default(r,g.width,!b),t.children(this.toolbar.el,this.el),this.pictureOffsetLeft=10,this.pictureOffsetTop=10,this.data=r,this.tableEl=(0,n.h)("canvas","".concat(v.cssPrefix,"-table")),this.rowResizer=new i.default(!1,r.rows.height),this.colResizer=new i.default(!0,r.cols.minWidth),this.verticalScrollbar=new o.default(!0),this.horizontalScrollbar=new o.default(!1),this.editor=new s.default(p.fnNameArrayWithKey,(function(){return a.getTableOffset()}),r.rows.height,r.cols.width,r,this),this.stopTimer=new M.default,this.stopTimer2=new M.default,this.website=new O.default(r,this.editor),this.modalValidation=new f.default,this.errorPopUp=new N.default,this.contextMenu=new u.default((function(){return a.getTableOffset()}),!E),this.selector=new l.default(r,this,!0),this.selectorMoveEl=new l.default(r,this,!1),this.advice=new y.default(r,this),this.overlayerCEl=fe.call(this,R),this.selectors=[],this.container=(0,n.h)("div",""),this.selectorsEl=(0,n.h)("div","selector_clear").attr("id","selector_clear"),this.overlayerCEl.children(this.selectorsEl,this.container),this.mergeSelector=!1,this.overlayerEl=(0,n.h)("div","".concat(v.cssPrefix,"-overlayer")).children(this.overlayerCEl),this.sortFilter=new m.default,this.direction=!1,this.el.children(this.tableEl,this.rowResizer.el,this.overlayerEl.el,this.colResizer.el,this.verticalScrollbar.el,this.horizontalScrollbar.el,this.contextMenu.el,this.modalValidation.el,this.errorPopUp.el,this.sortFilter.el,this.advice.el,this.website.el,this.website.tableEl),this.table=new c.default(this.tableEl.el,r,this.editor),Se.call(this),z.call(this,!1),P.call(this,!1,0,0),x&&x.state&&le.call(this,x.width)}var t,r,g;return t=e,(r=[{key:"selectorMoveReset",value:function(){ce.call(this),this.editor.setRiCi(this.data.selector.ri,this.data.selector.ci),z.call(this)}},{key:"getTable",value:function(){return{recalc:!1,table:this.table}}},{key:"clickCopyPaste",value:function(){var e=this.data,t=e.clickCopyPaste();t.enter&&(this.selector.arange=t.dstCellRange,e.clickAutofill(t.srcCellRange,t.dstCellRange,"all",(function(e){return(0,h.xtoast)("Tip",e)})),ie.call(this))}},{key:"setCellRange",value:function(e,t,r,n){this.data.paste(n);for(var a=0;a<e.length;a++){var i=e[a],o=i.ri,l=i.ci,s=(0,x.deepCopy)(t.rows.getCellOrNew(o,l));!1===r&&delete s.style,Oe.call(this,o,l,s,"style"),P.call(this,!0,o,l,!0,!0)}}},{key:"selectorEditorReset",value:function(e,t){var r=this.selector;ce.call(this,!0,e,t),this.editor.setRiCi(e,t),r.hide(),z.call(this)}},{key:"loadData",value:function(e){return this.data.setData(e,this),z.call(this),this}},{key:"freeze",value:function(e,t){return this.data.setFreeze(e,t),z.call(this),this}},{key:"undo",value:function(){this.data.undo(this),z.call(this)}},{key:"redo",value:function(){this.data.redo(),z.call(this)}},{key:"reload",value:function(){return z.call(this),this}},{key:"removeEvent",value:function(){a.remove.call(this)}},{key:"getRect",value:function(){var e=this.data;return{width:e.viewWidth(),height:e.viewHeight()}}},{key:"getTableOffset",value:function(){var e=this.data,t=e.rows,r=e.cols,n=this.getRect(),a=n.width,i=n.height;return{width:a-r.indexWidth,height:i-t.height,left:r.indexWidth,top:t.height}}}])&&j(t.prototype,r),g&&j(t,g),e}();t.default=Ie},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toUpperCase=function(e){return e=e.toString().toUpperCase()},t.default=void 0;var n,a=r(4),i=r(30),o=(n=r(154))&&n.__esModule?n:{default:n},l=r(155),s=r(156),u=r(1),c=r(31),d=r(8);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var h=5,v={fillStyle:"#f4f5f8"},p={fillStyle:"#fff",lineWidth:s.thinLineWidth,strokeStyle:"#e6e6e6"};function g(e,t){var r=this.data.cellRect(e,t),n=r.left,a=r.top,i=r.width,o=r.height;return new s.DrawBox(n,a,i,o,h)}function y(){var e=this.data.changeDataForCalc;return(0,d.isHave)(e)?{state:!0,data:e}:{state:!1,data:null}}function b(){var e=this.data,t=y.call(this);if((0,d.isHave)(t.data)){try{e.calc.calculateRows(e.rows,t.data)}catch(e){console.error("公式模块报错："+e)}t.state&&(e.changeDataForCalc=null)}}function E(e,t){var r=this.draw,n=this.data,a=n.sortedRowMap,o=e;a.has(e)&&(o=a.get(e));var s=n.getCell(o,t);if((0,d.isHave)(s)){var c=n.getCellStyleOrDefault(o,t),f=g.call(this,e,t);f.bgcolor=c.bgcolor,void 0!==c.border&&(f.setBorders(c.border),r.strokeBorders(f));var m="";n.showEquation?(0,d.isHave)(s.formulas)&&(m=s.formulas):(0,d.isHave)(s.text)&&(m=s.text),r.rect2(f,(function(){var a=n.renderFormat(c,s,o,t,!1);m=a.state?a.cellText:m;var d=Object.assign({},c.font);d.size=(0,i.getFontSizePxByPt)(d.size);var h=n.settings,v=h.ignore,p=h.minus,g=c.color;!0===p&&(0,l.isMinus)(m)&&(g="red");var y=c.underline,b="www"===(m+="").substr(0,3).toLowerCase()?"http://"+m:m;(/^http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?$/.test(b)||function(e){return!!(e+="")&&1===u.look.indexOf(e.split("!")[0])}(s.text))&&(g="#4b89ff",y=!0),r.text(m,f,{align:c.align,valign:c.valign,font:d,color:g,strike:c.strike,underline:y,ignore:v,cindex:t},c.textwrap),n.validations.getError(e,t)&&r.error(f)}))}}function R(){for(var e=this.draw,t=this.data.autoFilter.flex,r=0;r<t.length;r++){for(var n=t[r],a=n.ri,i=n.ci,o=n.state,l=0,s=0;s<r;s++){var u=t[s],c=u.set_total;!0===u.state&&(l+=c)}var d=g.call(this,a,i);e.dropUp(d,o,25*l)}}function O(e){var t=this,r=this.data,n=this.draw;if(e){var a=r.autoFilter;if(!a.active())return;var i=a.hrange();e.intersects(i)&&i.each((function(e,r){var a=g.call(t,e,r);n.dropdown(a)}))}}function x(e,t,r,n,a){var i=this,o=this.draw,l=this.data;o.save(),o.translate(t,r).translate(n,a);var s=l.exceptRowSet;o.save(),e.each((function(e,t){E.call(i,e,t)}),(function(e){return function(e){var t=s.has(e);if(t){var r=l.rows.getHeight(e);o.translate(0,-r)}return!t}(e)})),o.restore();var u=new Set;o.save(),l.eachMergesInView(e,(function(e){var t=e.sri,r=e.sci,n=e.eri;if(s.has(t)){if(!u.has(t)){u.add(t);var a=l.rows.sumHeight(t,n+1);o.translate(0,-a)}}else E.call(i,t,r)})),o.restore(),O.call(this,e),R.call(this),o.restore()}function A(e,t,r,n){var a=this.draw;a.save(),a.attr({fillStyle:"rgba(75, 137, 255, 0.08)"}).fillRect(e,t,r,n),a.restore()}function w(e,t,r,n,i,o){var l=this,u=this.draw,c=this.data,d=t.h,f=t.w,m=o+n,h=i+r;u.save(),u.attr(v),"all"!==e&&"left"!==e||u.fillRect(0,m,r,d),"all"!==e&&"top"!==e||u.fillRect(h,0,f,n);var p=c.selector.range,g=p.sri,y=p.sci,b=p.eri,E=p.eci;u.attr({textAlign:"center",textBaseline:"middle",font:"500 ".concat((0,s.npx)(12),"px Source Sans Pro"),fillStyle:"#585757",lineWidth:(0,s.thinLineWidth)(),strokeStyle:"#e6e6e6"}),"all"!==e&&"left"!==e||(c.rowEach(t.sri,t.eri,(function(e,t,n){var a=m+t,i=e;u.line([0,a],[r,a]),g<=i&&i<b+1&&A.call(l,0,a,r,n),u.fillText(i+1,r/2,a+n/2)})),u.line([0,d+m],[r,d+m]),u.line([r,m],[r,d+m])),"all"!==e&&"top"!==e||(c.colEach(t.sci,t.eci,(function(e,t,r){var i=h+t,o=e;u.line([i,0],[i,n]),y<=o&&o<E+1&&A.call(l,i,0,r,n),u.fillText((0,a.stringAt)(o),i+r/2,n/2)})),u.line([f+h,0],[f+h,n]),u.line([0,n],[f+h,n])),u.restore()}function _(e,t){var r=this.draw;r.save(),r.attr({fillStyle:"#f4f5f8"}).fillRect(0,0,e,t),r.restore()}function N(e,t,r,n,a){var i=e.sri,o=e.sci,l=e.eri,s=e.eci,u=e.w,c=e.h,d=this.draw,f=this.data,m=f.settings;d.save(),d.attr(p).translate(t+n,r+a),d.clearRect(0,0,u,c),m.showGrid?(f.rowEach(i,l,(function(e,t,r){e!==i&&d.line([0,t],[u,t]),e===l&&d.line([0,t+r],[u,t+r])})),f.colEach(o,s,(function(e,t,r){e!==o&&d.line([t,0],[t,c]),e===s&&d.line([t+r,0],[t+r,c])})),d.restore()):d.restore()}function C(e,t,r,n){var a=this.draw,i=this.data,o=i.viewWidth()-e,l=i.viewHeight()-t;a.save().translate(e,t).attr({strokeStyle:"rgba(75, 137, 255, .6)"}),a.line([0,n],[o,n]),a.line([r,0],[r,l]),a.restore()}var T=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.draw=new s.Draw(t,r.viewWidth(),r.viewHeight()),this.editor=n,this.data=r,this.timer=null,this.autoAdaptList=[]}var t,r,n;return t=e,(r=[{key:"getCellTextContent",value:function(e,t){var r=this.data,n=r.sortedRowMap,a=e;n.has(e)&&(a=n.get(e));var i=r.getCell(a,t);if(null!==i)return o.default.render(i.text||"",r,(function(e,t){return r.getCellTextOrDefault(t,e)}))}},{key:"getDrawBox",value:function(e,t){var r=this.data.cellRect(e,t),n=r.left,a=r.top,i=r.width,o=r.height;return new s.DrawBox(n,a,i,o,h)}},{key:"getCellTextStyle",value:function(e,t){var r=this.data,n=r.sortedRowMap,a=e;return n.has(e)&&(a=n.get(e)),r.getCellStyleOrDefault(a,t)}},{key:"render",value:function(){var e=this.data,t=e.rows,r=e.cols,n=e.viewRange();b.call(this),this.clear(),this.draw.resize(e.viewWidth(),e.viewHeight());var a=e.freezeTotalWidth(),i=e.freezeTotalHeight(),o=e.scroll,l=o.x,s=o.y,u=r.indexWidth,d=t.height;N.call(this,n,u,d,a,i),x.call(this,n,u,d,-l,-s),w.call(this,"all",n,u,d,a,i),_.call(this,u,d);var m=f(e.freeze,2),h=m[0],v=m[1];if(h>0||v>0){if(h>0){var p=n.clone();p.sri=0,p.eri=h-1,p.h=i,N.call(this,p,u,d,a,0),x.call(this,p,u,d,-l,0),w.call(this,"top",p,u,d,a,0)}if(v>0){var g=n.clone();g.sci=0,g.eci=v-1,g.w=a,N.call(this,g,u,d,0,i),w.call(this,"left",g,u,d,0,i),x.call(this,g,u,d,0,-s)}var y=e.freezeViewRange();N.call(this,y,u,d,0,0),w.call(this,"all",y,u,d,0,0),x.call(this,y,u,d,0,0),C.call(this,u,d,a,i)}c.testValid.call(this)}},{key:"clear",value:function(){this.draw.clear()}}])&&m(t.prototype,r),n&&m(t,n),e}();t.default=T},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiply=c,t.formatNumberRender=t.baseFormats=t.formatm=void 0;var n=r(9),a=r(10),i=r(8);function o(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var l=function(e){return e},s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;if(!(0,i.isHave)(e)||!(0,a.isNumber)(e))return e;if(/^(-?\d*.?\d*)$/.test(e)){var r=-1===t?e.toString():Number(e).toFixed(t).toString(),n=r.split("\\."),l=o(n),s=l[0],u=(l.slice(1),s.replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"));return"NaN"===u?e:u}return e};t.formatNumberRender=s;var u=[{key:"normal",title:(0,n.tf)("format.normal"),type:"string",render:l},{key:"number",title:(0,n.tf)("format.number"),type:"number",label:"1,000.12",render:s},{key:"percent",title:(0,n.tf)("format.percent"),type:"number",label:"10.12%",render:function(e){var t=c(e,100),r="".concat(t);return"".concat(r,"%")}},{key:"rmb",title:(0,n.tf)("format.rmb"),type:"number",label:"￥10.00",render:function(e){return"￥".concat(s(e))}},{key:"date",title:(0,n.tf)("format.date"),type:"date",label:"2009-01-01",render:l},{key:"datetime",title:(0,n.tf)("format.datetime"),type:"datetime",label:"2009年01月01日",render:l}];function c(e,t,r){return f(e,t,r,"multiply")}function d(e){var t,r={times:1,num:0},n=e<0;if(t=e,Math.floor(t)===t)return r.num=e,r;var a="".concat(e),i=a.indexOf("."),o=a.substr(i+1).length,l=Math.pow(10,o),s=parseInt(Math.abs(e)*l+.5,10);return r.times=l,n&&(s=-s),r.num=s,r}function f(e,t,r,n){var a=d(e),i=d(t),o=a.num,l=i.num,s=a.times,u=i.times,c=s>u?s:u;switch(n){case"add":return(s===u?o+l:s>u?o+l*(s/u):o*(u/s)+l)/c;case"subtract":return(s===u?o-l:s>u?o-l*(s/u):o*(u/s)-l)/c;case"multiply":return o*l/(s*u);case"divide":return o/l*(u/s)}}t.baseFormats=u;var m={};t.formatm=m,u.forEach((function(e){m[e.key]=e}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(9);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var r,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=l(this,s(t).call(this,"div","".concat(a.cssPrefix,"-button ").concat(n)))).child((0,i.t)("button.".concat(e))),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),t}(n.Element);t.default=c},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.createDefaultFnCollection=b,t.CalcWorkbookProxy=t.CalcSheet=void 0;r(10),m(r(45));var a=r(84),i=r(85),o=r(88),l=m(r(98)),s=r(99),u=r(100),c=r(11),d=r(20);function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function m(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=f();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}return r.default=e,t&&t.set(e,r),r}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&v(e.prototype,t),r&&v(e,r),e}var g=function(){function e(t,r,n){h(this,e),this.name=t,this.workbookProxy=r,this.name2CellProxy=this.createName2CellProxy(n)}return p(e,[{key:"createName2CellProxy",value:function(e){var t,r,n={},i=!0,o=!1,l=void 0;try{for(var s,u=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(i=(s=u.next()).done);i=!0){var f=e[t=s.value];void 0===f.v?r=c.FORMULA_STATUS.created:(f.v=(0,d.convertToCellV)(f.v),r=c.FORMULA_STATUS.solved),n[t]=new a.CalcCell(this.workbookProxy,this,f,t,r)}}catch(e){o=!0,l=e}finally{try{i||null==u.return||u.return()}finally{if(o)throw l}}return n}},{key:"getCellNames",value:function(){return Object.getOwnPropertyNames(this.name2CellProxy)}},{key:"getCellByName",value:function(e){return this.name2CellProxy[e]}},{key:"addCalcCell",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.FORMULA_STATUS.created;this.name2CellProxy[e]=new a.CalcCell(this.workbookProxy,this,t,e,r)}}]),e}();t.CalcSheet=g;var y=function(){function e(t){h(this,e),this.name2SheetProxy=this.createName2SheetProxy(t),this.multiCollExpFn=b()}return p(e,[{key:"updateByWorkbookObj",value:function(e){this.name2SheetProxy=this.createName2SheetProxy(e)}},{key:"createName2SheetProxy",value:function(e){void 0===e.Sheets&&(e.Sheets={Sheet1:{A1:""}});var t={},r=!0,n=!1,a=void 0;try{for(var i,o=Object.getOwnPropertyNames(e.Sheets)[Symbol.iterator]();!(r=(i=o.next()).done);r=!0){var l=i.value,s=e.Sheets[l];t[l]=new g(l,this,s)}}catch(e){n=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(n)throw a}}return t}},{key:"getSheetNames",value:function(){return Object.getOwnPropertyNames(this.name2SheetProxy)}},{key:"getSheetByName",value:function(e){return this.name2SheetProxy[e]}},{key:"getCellByName",value:function(e,t){return this.getSheetByName(e).getCellByName(t)}},{key:"getCellPropertyByName",value:function(e,t,r){return this.getCellByName(e,t).getCellProperty(r)}},{key:"parseCalcCell",value:function(e){return e.isStructuralFormula()?new u.StructuralExpressionBuilder(e,this.multiCollExpFn).parseFormula():new s.SimpleExpressionBuilder(e).parseFormula()}},{key:"calculateFormulas",value:function(e){for(var t=e.length-1;t>=0;t--)try{var r=e[t];if(!0!==r.check_valid())throw Error("not a valid formula");r.execFormula()}catch(e){console.log(e)}}},{key:"applyToAllCells",value:function(e){this.name2SheetProxy;var t,r=[],n=!0,a=!1,i=void 0;try{for(var o,l=this.getSheetNames()[Symbol.iterator]();!(n=(o=l.next()).done);n=!0){var s=o.value,u=this.getSheetByName(s),c=!0,d=!1,f=void 0;try{for(var m,h=u.getCellNames()[Symbol.iterator]();!(c=(m=h.next()).done);c=!0){var v=m.value;t=e(u.getCellByName(v)),r.push(t)}}catch(e){d=!0,f=e}finally{try{c||null==h.return||h.return()}finally{if(d)throw f}}}}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}},{key:"applyToAllCellsFilterEmpty",value:function(e){this.name2SheetProxy;var t,r=[],n=!0,a=!1,i=void 0;try{for(var o,l=this.getSheetNames()[Symbol.iterator]();!(n=(o=l.next()).done);n=!0){var s=o.value,u=this.getSheetByName(s),c=!0,d=!1,f=void 0;try{for(var m,h=u.getCellNames()[Symbol.iterator]();!(c=(m=h.next()).done);c=!0){var v=m.value;void 0!==(t=e(u.getCellByName(v)))&&r.push(t)}}catch(e){d=!0,f=e}finally{try{c||null==h.return||h.return()}finally{if(d)throw f}}}}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}},{key:"find_all_cells_with_formulas",value:function(){return this.applyToAllCellsFilterEmpty((function(e){if(e.isFormulaValid()&&e.cellStatus!==c.FORMULA_STATUS.solved)return e}))}},{key:"find_all_need_calc_cell",value:function(e){console.log("find_all_need_calc_cell");for(var t=this.name2SheetProxy,r=e.findAllNeedCalcCell(),n={},i=[],o=Object.getOwnPropertyNames(t.Sheets)[0],l=t.Sheets[o],s=0;s<r.length;s++){var u=r[s];if(u in l!=!1){l[u];var c=n[o+"!"+u]=new a.CalcCell(this,l,o,l[u],n,u,"created");i.push(c)}}return i}}]),e}();function b(){var e=new i.FnCollection;e.addFnObjArray(o.fnObjArray);e.fnObj;var t=new i.FnCollection;t.addFnObj(l);t.fnObj;return new i.MultiCollExpFn(e,t)}t.CalcWorkbookProxy=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trans_params=function(e){var t=new RegExp("{(.*?)}","g"),r=e.f.match(t);if(null!==r)for(var n=0;n<r.length;n++){var a=r[n],i="'"+a+"'";e.f=e.f.replace(a,i)}return e},t.recover_sheet=function(e){return Object.keys(e).forEach((function(t){"default_0"===e[t].v&&(a.default.isHave(e[t].f)||(e[t].f=""),e[t].v=0)})),e},t.strim=function(e){return e.replace(/\s+$/,"").replace(/^\s+/,"")},t.trans_formula=function(e){var t={FLOOR:"FLOORMATH",let:"VARA","WORKDAY.INTL":"WORKDAYINTL"};for(var r in t){var n=t[r];e.indexOf(n)<0&&e.indexOf(r)>=0&&e.indexOf(r+".")<=0&&(e=e.replace(r,n))}e=e.replace("_XLFN.","");var a=new RegExp('"(.*?)"',"g"),i=e.match(a);if(0===e.indexOf("=")&&(e=e.toUpperCase(),null!==i))for(var o=0;o<i.length;o++){var l=i[o].toUpperCase();e.indexOf(l)>=0&&(e=e.replace(l,i[o]))}return e};var n,a=(n=r(10))&&n.__esModule?n:{default:n}},,,,function(e,t,r){"use strict";var n=i(r(13)),a=i(r(47));function i(e){return e&&e.__esModule?e:{default:e}}t.UNIQUE=function(){for(var e=[],t=0;t<arguments.length;++t){for(var r=!1,n=arguments[t],a=0;a<e.length&&!(r=e[a]===n);++a);r||e.push(n)}return e},t.FLATTEN=n.default.flatten,t.ARGS2ARRAY=function(){return Array.prototype.slice.call(arguments,0)},t.REFERENCE=function(e,t){try{for(var r=t.split("."),n=e,a=0;a<r.length;++a){var i=r[a];if("]"===i[i.length-1]){var o=i.indexOf("["),l=i.substring(o+1,i.length-1);n=n[i.substring(0,o)][l]}else n=n[i]}return n}catch(e){}},t.JOIN=function(e,t){return e.join(t)},t.NUMBERS=function(){var e=n.default.flatten(arguments);return e.filter((function(e){return"number"==typeof e}))},t.NUMERAL=function(e,t){return(0,a.default)(e).format(t)}},function(e,t,r){"use strict";var n=r(2),a=r(48),i=s(r(32)),o=s(r(13)),l=s(r(92));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return/^[01]{1,10}$/.test(e)}function c(e){return e=(e=e.toString()).replace("I","i").replace("J","j")}t.BESSELI=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.besseli(e,t)},t.BESSELJ=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.besselj(e,t)},t.BESSELK=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.besselk(e,t)},t.BESSELY=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.bessely(e,t)},t.BIN2DEC=function(e){if(!u(e))return n.errorObj.ERROR_NUM;var t=parseInt(e,2),r=e.toString();return 10===r.length&&"1"===r.substring(0,1)?parseInt(r.substring(1),2)-512:t},t.BIN2HEX=function(e,t){if(!u(e))return n.errorObj.ERROR_NUM;var r=e.toString();if(10===r.length&&"1"===r.substring(0,1))return(0xfffffffe00+parseInt(r.substring(1),2)).toString(16);var a=parseInt(e,2).toString(16);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM},t.BIN2OCT=function(e,t){if(!u(e))return n.errorObj.ERROR_NUM;var r=e.toString();if(10===r.length&&"1"===r.substring(0,1))return(1073741312+parseInt(r.substring(1),2)).toString(8);var a=parseInt(e,2).toString(8);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM},t.BITAND=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0||t<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e||Math.floor(t)!==t?n.errorObj.ERROR_NUM:e>0xffffffffffff||t>0xffffffffffff?n.errorObj.ERROR_NUM:e&t},t.BITLSHIFT=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e?n.errorObj.ERROR_NUM:e>0xffffffffffff?n.errorObj.ERROR_NUM:Math.abs(t)>53?n.errorObj.ERROR_NUM:t>=0?e<<t:e>>-t},t.BITOR=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0||t<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e||Math.floor(t)!==t?n.errorObj.ERROR_NUM:e>0xffffffffffff||t>0xffffffffffff?n.errorObj.ERROR_NUM:e|t},t.BITRSHIFT=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e?n.errorObj.ERROR_NUM:e>0xffffffffffff?n.errorObj.ERROR_NUM:Math.abs(t)>53?n.errorObj.ERROR_NUM:t>=0?e>>t:e<<-t},t.BITXOR=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0||t<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e||Math.floor(t)!==t?n.errorObj.ERROR_NUM:e>0xffffffffffff||t>0xffffffffffff?n.errorObj.ERROR_NUM:e^t},t.COMPLEX=function(e,t,r){if(e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;if("i"!==(r=(r=void 0===r?"i":r).toLowerCase())&&"j"!==r)return n.errorObj.ERROR_VALUE;if(0===e&&0===t)return 0;if(0===e)return 1===t?r:t.toString()+r;if(0===t)return e.toString();var a=t>0?"+":"";return e.toString()+a+(1===t?r:t.toString()+r)},t.CONVERT=function(e,t,r){if((e=o.default.parseNumber(e))instanceof Error)return e;for(var a,i=[["a.u. of action","?",null,"action",!1,!1,105457168181818e-48],["a.u. of charge","e",null,"electric_charge",!1,!1,160217653141414e-33],["a.u. of energy","Eh",null,"energy",!1,!1,435974417757576e-32],["a.u. of length","a?",null,"length",!1,!1,529177210818182e-25],["a.u. of mass","m?",null,"mass",!1,!1,910938261616162e-45],["a.u. of time","?/Eh",null,"time",!1,!1,241888432650516e-31],["admiralty knot","admkn",null,"speed",!1,!0,.514773333],["ampere","A",null,"electric_current",!0,!1,1],["ampere per meter","A/m",null,"magnetic_field_intensity",!0,!1,1],["ångström","Å",["ang"],"length",!1,!0,1e-10],["are","ar",null,"area",!1,!0,100],["astronomical unit","ua",null,"length",!1,!1,149597870691667e-25],["bar","bar",null,"pressure",!1,!1,1e5],["barn","b",null,"area",!1,!1,1e-28],["becquerel","Bq",null,"radioactivity",!0,!1,1],["bit","bit",["b"],"information",!1,!0,1],["btu","BTU",["btu"],"energy",!1,!0,1055.05585262],["byte","byte",null,"information",!1,!0,8],["candela","cd",null,"luminous_intensity",!0,!1,1],["candela per square metre","cd/m?",null,"luminance",!0,!1,1],["coulomb","C",null,"electric_charge",!0,!1,1],["cubic ångström","ang3",["ang^3"],"volume",!1,!0,1e-30],["cubic foot","ft3",["ft^3"],"volume",!1,!0,.028316846592],["cubic inch","in3",["in^3"],"volume",!1,!0,16387064e-12],["cubic light-year","ly3",["ly^3"],"volume",!1,!0,846786664623715e-61],["cubic metre","m?",null,"volume",!0,!0,1],["cubic mile","mi3",["mi^3"],"volume",!1,!0,4168181825.44058],["cubic nautical mile","Nmi3",["Nmi^3"],"volume",!1,!0,6352182208],["cubic Pica","Pica3",["Picapt3","Pica^3","Picapt^3"],"volume",!1,!0,7.58660370370369e-8],["cubic yard","yd3",["yd^3"],"volume",!1,!0,.764554857984],["cup","cup",null,"volume",!1,!0,.0002365882365],["dalton","Da",["u"],"mass",!1,!1,166053886282828e-41],["day","d",["day"],"time",!1,!0,86400],["degree","°",null,"angle",!1,!1,.0174532925199433],["degrees Rankine","Rank",null,"temperature",!1,!0,.555555555555556],["dyne","dyn",["dy"],"force",!1,!0,1e-5],["electronvolt","eV",["ev"],"energy",!1,!0,1.60217656514141],["ell","ell",null,"length",!1,!0,1.143],["erg","erg",["e"],"energy",!1,!0,1e-7],["farad","F",null,"electric_capacitance",!0,!1,1],["fluid ounce","oz",null,"volume",!1,!0,295735295625e-16],["foot","ft",null,"length",!1,!0,.3048],["foot-pound","flb",null,"energy",!1,!0,1.3558179483314],["gal","Gal",null,"acceleration",!1,!1,.01],["gallon","gal",null,"volume",!1,!0,.003785411784],["gauss","G",["ga"],"magnetic_flux_density",!1,!0,1],["grain","grain",null,"mass",!1,!0,647989e-10],["gram","g",null,"mass",!1,!0,.001],["gray","Gy",null,"absorbed_dose",!0,!1,1],["gross registered ton","GRT",["regton"],"volume",!1,!0,2.8316846592],["hectare","ha",null,"area",!1,!0,1e4],["henry","H",null,"inductance",!0,!1,1],["hertz","Hz",null,"frequency",!0,!1,1],["horsepower","HP",["h"],"power",!1,!0,745.69987158227],["horsepower-hour","HPh",["hh","hph"],"energy",!1,!0,2684519.538],["hour","h",["hr"],"time",!1,!0,3600],["imperial gallon (U.K.)","uk_gal",null,"volume",!1,!0,.00454609],["imperial hundredweight","lcwt",["uk_cwt","hweight"],"mass",!1,!0,50.802345],["imperial quart (U.K)","uk_qt",null,"volume",!1,!0,.0011365225],["imperial ton","brton",["uk_ton","LTON"],"mass",!1,!0,1016.046909],["inch","in",null,"length",!1,!0,.0254],["international acre","uk_acre",null,"area",!1,!0,4046.8564224],["IT calorie","cal",null,"energy",!1,!0,4.1868],["joule","J",null,"energy",!0,!0,1],["katal","kat",null,"catalytic_activity",!0,!1,1],["kelvin","K",["kel"],"temperature",!0,!0,1],["kilogram","kg",null,"mass",!0,!0,1],["knot","kn",null,"speed",!1,!0,.514444444444444],["light-year","ly",null,"length",!1,!0,9460730472580800],["litre","L",["l","lt"],"volume",!1,!0,.001],["lumen","lm",null,"luminous_flux",!0,!1,1],["lux","lx",null,"illuminance",!0,!1,1],["maxwell","Mx",null,"magnetic_flux",!1,!1,1e-18],["measurement ton","MTON",null,"volume",!1,!0,1.13267386368],["meter per hour","m/h",["m/hr"],"speed",!1,!0,.00027777777777778],["meter per second","m/s",["m/sec"],"speed",!0,!0,1],["meter per second squared","m?s??",null,"acceleration",!0,!1,1],["parsec","pc",["parsec"],"length",!1,!0,0x6da012f958ee1c],["meter squared per second","m?/s",null,"kinematic_viscosity",!0,!1,1],["metre","m",null,"length",!0,!0,1],["miles per hour","mph",null,"speed",!1,!0,.44704],["millimetre of mercury","mmHg",null,"pressure",!1,!1,133.322],["minute","?",null,"angle",!1,!1,.000290888208665722],["minute","min",["mn"],"time",!1,!0,60],["modern teaspoon","tspm",null,"volume",!1,!0,5e-6],["mole","mol",null,"amount_of_substance",!0,!1,1],["morgen","Morgen",null,"area",!1,!0,2500],["n.u. of action","?",null,"action",!1,!1,105457168181818e-48],["n.u. of mass","m?",null,"mass",!1,!1,910938261616162e-45],["n.u. of speed","c?",null,"speed",!1,!1,299792458],["n.u. of time","?/(me?c??)",null,"time",!1,!1,128808866778687e-35],["nautical mile","M",["Nmi"],"length",!1,!0,1],["newton","N",null,"force",!0,!0,1],["œrsted","Oe ",null,"magnetic_field_intensity",!1,!1,79.5774715459477],["ohm","Ω",null,"electric_resistance",!0,!1,1],["ounce mass","ozm",null,"mass",!1,!0,.028349523125],["pascal","Pa",null,"pressure",!0,!1,1],["pascal second","Pa?s",null,"dynamic_viscosity",!0,!1,1],["pferdestärke","PS",null,"power",!1,!0,735.49875],["phot","ph",null,"illuminance",!1,!1,1e-4],["pica (1/6 inch)","pica",null,"length",!1,!0,.00035277777777778],["pica (1/72 inch)","Pica",["Picapt"],"length",!1,!0,.00423333333333333],["poise","P",null,"dynamic_viscosity",!1,!1,.1],["pond","pond",null,"force",!1,!0,.00980665],["pound force","lbf",null,"force",!1,!0,4.4482216152605],["pound mass","lbm",null,"mass",!1,!0,.45359237],["quart","qt",null,"volume",!1,!0,.000946352946],["radian","rad",null,"angle",!0,!1,1],["second","?",null,"angle",!1,!1,484813681109536e-20],["second","s",["sec"],"time",!0,!0,1],["short hundredweight","cwt",["shweight"],"mass",!1,!0,45.359237],["siemens","S",null,"electrical_conductance",!0,!1,1],["sievert","Sv",null,"equivalent_dose",!0,!1,1],["slug","sg",null,"mass",!1,!0,14.59390294],["square ångström","ang2",["ang^2"],"area",!1,!0,1e-20],["square foot","ft2",["ft^2"],"area",!1,!0,.09290304],["square inch","in2",["in^2"],"area",!1,!0,64516e-8],["square light-year","ly2",["ly^2"],"area",!1,!0,895054210748189e17],["square meter","m?",null,"area",!0,!0,1],["square mile","mi2",["mi^2"],"area",!1,!0,2589988.110336],["square nautical mile","Nmi2",["Nmi^2"],"area",!1,!0,3429904],["square Pica","Pica2",["Picapt2","Pica^2","Picapt^2"],"area",!1,!0,1792111111111e-17],["square yard","yd2",["yd^2"],"area",!1,!0,.83612736],["statute mile","mi",null,"length",!1,!0,1609.344],["steradian","sr",null,"solid_angle",!0,!1,1],["stilb","sb",null,"luminance",!1,!1,1e-4],["stokes","St",null,"kinematic_viscosity",!1,!1,1e-4],["stone","stone",null,"mass",!1,!0,6.35029318],["tablespoon","tbs",null,"volume",!1,!0,147868e-10],["teaspoon","tsp",null,"volume",!1,!0,492892e-11],["tesla","T",null,"magnetic_flux_density",!0,!0,1],["thermodynamic calorie","c",null,"energy",!1,!0,4.184],["ton","ton",null,"mass",!1,!0,907.18474],["tonne","t",null,"mass",!1,!1,1e3],["U.K. pint","uk_pt",null,"volume",!1,!0,.00056826125],["U.S. bushel","bushel",null,"volume",!1,!0,.03523907],["U.S. oil barrel","barrel",null,"volume",!1,!0,.158987295],["U.S. pint","pt",["us_pt"],"volume",!1,!0,.000473176473],["U.S. survey mile","survey_mi",null,"length",!1,!0,1609.347219],["U.S. survey/statute acre","us_acre",null,"area",!1,!0,4046.87261],["volt","V",null,"voltage",!0,!1,1],["watt","W",null,"power",!0,!0,1],["watt-hour","Wh",["wh"],"energy",!1,!0,3600],["weber","Wb",null,"magnetic_flux",!0,!1,1],["yard","yd",null,"length",!1,!0,.9144],["year","yr",null,"time",!1,!0,31557600]],l={Yi:["yobi",80,12089258196146292e8,"Yi","yotta"],Zi:["zebi",70,11805916207174113e5,"Zi","zetta"],Ei:["exbi",60,0x1000000000000000,"Ei","exa"],Pi:["pebi",50,0x4000000000000,"Pi","peta"],Ti:["tebi",40,1099511627776,"Ti","tera"],Gi:["gibi",30,1073741824,"Gi","giga"],Mi:["mebi",20,1048576,"Mi","mega"],ki:["kibi",10,1024,"ki","kilo"]},s={Y:["yotta",1e24,"Y"],Z:["zetta",1e21,"Z"],E:["exa",1e18,"E"],P:["peta",1e15,"P"],T:["tera",1e12,"T"],G:["giga",1e9,"G"],M:["mega",1e6,"M"],k:["kilo",1e3,"k"],h:["hecto",100,"h"],e:["dekao",10,"e"],d:["deci",.1,"d"],c:["centi",.01,"c"],m:["milli",.001,"m"],u:["micro",1e-6,"u"],n:["nano",1e-9,"n"],p:["pico",1e-12,"p"],f:["femto",1e-15,"f"],a:["atto",1e-18,"a"],z:["zepto",1e-21,"z"],y:["yocto",1e-24,"y"]},u=null,c=null,d=t.toLowerCase(),f=r.toLowerCase(),m=1,h=1,v=0;v<i.length;v++)a=null===i[v][2]?[]:i[v][2],(i[v][1].toLowerCase()===d||a.indexOf(t)>=0)&&(u=i[v]),(i[v][1].toLowerCase()===f||a.indexOf(r)>=0)&&(c=i[v]);if(null===u){var p=l[t.substring(0,2)],g=s[t.substring(0,1)];"da"===t.substring(0,2)&&(g=["dekao",10,"da"]),p?(m=p[2],d=t.substring(2)):g&&(m=g[1],d=t.substring(g[2].length));for(var y=0;y<i.length;y++)a=null===i[y][2]?[]:i[y][2],(i[y][1]===d||a.indexOf(d)>=0)&&(u=i[y])}if(null===c){var b=l[r.substring(0,2)],E=s[r.substring(0,1)];"da"===r.substring(0,2)&&(E=["dekao",10,"da"]),b?(h=b[2],f=r.substring(2)):E&&(h=E[1],f=r.substring(E[2].length));for(var R=0;R<i.length;R++)a=null===i[R][2]?[]:i[R][2],(i[R][1]===f||a.indexOf(f)>=0)&&(c=i[R])}return null===u||null===c?n.errorObj.ERROR_NA:u[3]!==c[3]?"F"==t&&"C"==r?(e-32)/1.8:"C"==t&&"F"==r?1.8*e+32:n.errorObj.ERROR_NA:e*u[6]*m/(c[6]*h)},t.DEC2BIN=function(e,t){if((e=o.default.parseNumber(e))instanceof Error)return e;if(!/^-?[0-9]{1,3}$/.test(e)||e<-512||e>511)return n.errorObj.ERROR_NUM;if(e<0)return"1"+i.default.REPT("0",9-(512+e).toString(2).length)+(512+e).toString(2);var r=parseInt(e,10).toString(2);return void 0===t?r:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=r.length?i.default.REPT("0",t-r.length)+r:n.errorObj.ERROR_NUM},t.DEC2HEX=function(e,t){if((e=o.default.parseNumber(e))instanceof Error)return e;if(!/^-?[0-9]{1,12}$/.test(e)||e<-549755813888||e>549755813887)return n.errorObj.ERROR_NUM;if(e<0)return(1099511627776+e).toString(16);var r=parseInt(e,10).toString(16);return void 0===t?r:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=r.length?i.default.REPT("0",t-r.length)+r:n.errorObj.ERROR_NUM},t.DEC2OCT=function(e,t){if((e=o.default.parseNumber(e))instanceof Error)return e;if(!/^-?[0-9]{1,9}$/.test(e)||e<-536870912||e>536870911)return n.errorObj.ERROR_NUM;if(e<0)return(1073741824+e).toString(8);var r=parseInt(e,10).toString(8);return void 0===t?r:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=r.length?i.default.REPT("0",t-r.length)+r:n.errorObj.ERROR_NUM},t.DELTA=function(e,t){return t=void 0===t?0:t,e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e===t?1:0},t.ERF=function(e,t){return t=void 0===t?0:t,e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:a.jStat.erf(e)},t.ERF.PRECISE=function(e){return isNaN(e)?n.errorObj.ERROR_VALUE:window.jsSpreadsheet.AllFormulas.ERF(e)},t.ERFC=function(e){return isNaN(e)?n.errorObj.ERROR_VALUE:a.jStat.erfc(e)},t.ERFC.PRECISE=function(e){return isNaN(e)?n.errorObj.ERROR_VALUE:window.jsSpreadsheet.AllFormulas.ERFC(e)},t.GESTEP=function(e,t){return t=t||0,e=o.default.parseNumber(e),o.default.anyIsError(t,e)?e:e>=t?1:0},t.HEX2BIN=function(e,t){if(!/^[0-9A-Fa-f]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=10===e.length&&"f"===e.substring(0,1).toLowerCase(),a=r?parseInt(e,16)-1099511627776:parseInt(e,16);if(a<-512||a>511)return n.errorObj.ERROR_NUM;if(r)return"1"+i.default.REPT("0",9-(512+a).toString(2).length)+(512+a).toString(2);var o=a.toString(2);return void 0===t?o:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=o.length?i.default.REPT("0",t-o.length)+o:n.errorObj.ERROR_NUM},t.HEX2DEC=function(e){if(!/^[0-9A-Fa-f]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var t=parseInt(e,16);return t>=549755813888?t-1099511627776:t},t.HEX2OCT=function(e,t){if(!/^[0-9A-Fa-f]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=parseInt(e,16);if(r>536870911&&r<0xffe0000000)return n.errorObj.ERROR_NUM;if(r>=0xffe0000000)return(r-0xffc0000000).toString(8);var a=r.toString(8);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM},t.ROWS=function(e){return"string"==typeof e&&(e=o.default.strToMatrix(e)),e instanceof Array?0===e.length?0:a.jStat.rows(e):n.errorObj.ERROR_VALUE},t.IMABS=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:Math.sqrt(Math.pow(r,2)+Math.pow(a,2))},t.IMAGINARY=function(e){if(void 0===(e=c(e))||!0===e||!1===e)return n.errorObj.ERROR_VALUE;if(0===e||"0"===e)return 0;if(["i","j"].indexOf(e)>=0)return 1;var t=(e=e.replace("+i","+1i").replace("-i","-1i").replace("+j","+1j").replace("-j","-1j")).indexOf("+"),r=e.indexOf("-");0===t&&(t=e.indexOf("+",1)),0===r&&(r=e.indexOf("-",1));var a=e.substring(e.length-1,e.length),i="i"===a||"j"===a;return t>=0||r>=0?i?t>=0?isNaN(e.substring(0,t))||isNaN(e.substring(t+1,e.length-1))?n.errorObj.ERROR_NUM:Number(e.substring(t+1,e.length-1)):isNaN(e.substring(0,r))||isNaN(e.substring(r+1,e.length-1))?n.errorObj.ERROR_NUM:-Number(e.substring(r+1,e.length-1)):n.errorObj.ERROR_NUM:i?isNaN(e.substring(0,e.length-1))?n.errorObj.ERROR_NUM:e.substring(0,e.length-1):isNaN(e)?n.errorObj.ERROR_NUM:0},t.IMARGUMENT=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:0===r&&0===a?n.errorObj.ERROR_DIV0:0===r&&a>0?Math.PI/2:0===r&&a<0?-Math.PI/2:0===a&&r>0?0:0===a&&r<0?-Math.PI:r>0?Math.atan(a/r):r<0&&a>=0?Math.atan(a/r)+Math.PI:Math.atan(a/r)-Math.PI},t.IMCONJUGATE=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",0!==a?t.COMPLEX(r,-a,i):e},t.IMCOS=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.cos(r)*(Math.exp(a)+Math.exp(-a))/2,-Math.sin(r)*(Math.exp(a)-Math.exp(-a))/2,i)},t.IMCOSH=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.cos(a)*(Math.exp(r)+Math.exp(-r))/2,Math.sin(a)*(Math.exp(r)-Math.exp(-r))/2,i)},t.IMCOT=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV(t.IMCOS(e),t.IMSIN(e))},t.IMDIV=function(e,r){var a=t.IMREAL(e),i=t.IMAGINARY(e),l=t.IMREAL(r),s=t.IMAGINARY(r);if(o.default.anyIsError(a,i,l,s))return n.errorObj.ERROR_VALUE;var u=e.substring(e.length-1),c=r.substring(r.length-1),d="i";if("j"===u?d="j":"j"===c&&(d="j"),0===l&&0===s)return n.errorObj.ERROR_NUM;var f=l*l+s*s;return t.COMPLEX((a*l+i*s)/f,(i*l-a*s)/f,d)},t.IMEXP=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);i="i"===i||"j"===i?i:"i";var l=Math.exp(r);return t.COMPLEX(l*Math.cos(a),l*Math.sin(a),i)},t.IMLN=function(e){var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.log(Math.sqrt(r*r+a*a)),Math.atan(a/r),i)},t.IMLOG10=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.log(Math.sqrt(r*r+a*a))/Math.log(10),Math.atan(a/r)/Math.log(10),i)},t.IMLOG2=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.log(Math.sqrt(r*r+a*a))/Math.log(2),Math.atan(a/r)/Math.log(2),i)},t.IMPOWER=function(e,r){e=c(e),r=o.default.parseNumber(r);var a=t.IMREAL(e),i=t.IMAGINARY(e);if(o.default.anyIsError(r,a,i))return n.errorObj.ERROR_VALUE;var l=e.substring(e.length-1);l="i"===l||"j"===l?l:"i";var s=Math.pow(t.IMABS(e),r),u=t.IMARGUMENT(e);return t.COMPLEX(s*Math.cos(r*u),s*Math.sin(r*u),l)},t.IMPRODUCT=function(){for(var e=arguments[0],r=1;r<arguments.length;r++){var a=t.IMREAL(e),i=t.IMAGINARY(e),l=t.IMREAL(arguments[r]),s=t.IMAGINARY(arguments[r]);if(o.default.anyIsError(a,i,l,s))return n.errorObj.ERROR_VALUE;e=t.COMPLEX(a*l-i*s,a*s+i*l)}return e},t.IMREAL=function(e){if(void 0===(e=c(e))||!0===e||!1===e)return n.errorObj.ERROR_VALUE;if(0===e||"0"===e)return 0;if(["i","+i","1i","+1i","-i","-1i","j","+j","1j","+1j","-j","-1j"].indexOf(e)>=0)return 0;var t=e.indexOf("+"),r=e.indexOf("-");0===t&&(t=e.indexOf("+",1)),0===r&&(r=e.indexOf("-",1));var a=e.substring(e.length-1,e.length),i="i"===a||"j"===a;return t>=0||r>=0?i?t>=0?isNaN(e.substring(0,t))||isNaN(e.substring(t+1,e.length-1))?n.errorObj.ERROR_NUM:Number(e.substring(0,t)):isNaN(e.substring(0,r))||isNaN(e.substring(r+1,e.length-1))?n.errorObj.ERROR_NUM:Number(e.substring(0,r)):n.errorObj.ERROR_NUM:i?isNaN(e.substring(0,e.length-1))?n.errorObj.ERROR_NUM:0:isNaN(e)?n.errorObj.ERROR_NUM:e},t.IMSEC=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV("1",t.IMCOS(e))},t.IMSECH=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV("1",t.IMCOSH(e))},t.IMSIN=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.sin(r)*(Math.exp(a)+Math.exp(-a))/2,Math.cos(r)*(Math.exp(a)-Math.exp(-a))/2,i)},t.IMSINH=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.cos(a)*(Math.exp(r)-Math.exp(-r))/2,Math.sin(a)*(Math.exp(r)+Math.exp(-r))/2,i)},t.IMSQRT=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);i="i"===i||"j"===i?i:"i";var l=Math.sqrt(t.IMABS(e)),s=t.IMARGUMENT(e);return t.COMPLEX(l*Math.cos(s/2),l*Math.sin(s/2),i)},t.IMCSC=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_NUM:t.IMDIV("1",t.IMSIN(e))},t.IMCSCH=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_NUM:t.IMDIV("1",t.IMSINH(e))},t.IMSUB=function(e,r){e=c(e),r=c(r);var a=t.IMREAL(e),i=t.IMAGINARY(e),l=t.IMREAL(r),s=t.IMAGINARY(r);if(o.default.anyIsError(a,i,l,s))return n.errorObj.ERROR_VALUE;var u=e.substring(e.length-1),d=r.substring(r.length-1),f="i";return"j"===u?f="j":"j"===d&&(f="j"),t.COMPLEX(a-l,i-s,f)},t.IMSUM=function(e){e=c(e);for(var r=o.default.flatten(arguments),a=r[0],i=1;i<r.length;i++){var l=t.IMREAL(a),s=t.IMAGINARY(a),u=t.IMREAL(r[i]),d=t.IMAGINARY(r[i]);if(o.default.anyIsError(l,s,u,d))return n.errorObj.ERROR_VALUE;a=t.COMPLEX(l+u,s+d)}return a},t.IMTAN=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV(t.IMSIN(e),t.IMCOS(e))},t.OCT2BIN=function(e,t){if(!/^[0-7]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=10===e.length&&"7"===e.substring(0,1),a=r?parseInt(e,8)-1073741824:parseInt(e,8);if(r)return"1"+i.default.REPT("0",9-(512+a).toString(2).length)+(512+a).toString(2);var o=a.toString(2);return o.length>=10?o.slice(o.length-10,o.length):void 0===t?o:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=o.length?i.default.REPT("0",t-o.length)+o:n.errorObj.ERROR_NUM},t.OCT2DEC=function(e){if(!/^[0-7]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var t=parseInt(e,8);return t>=536870912?t-1073741824:t},t.OCT2HEX=function(e,t){if(!/^[0-7]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=parseInt(e,8);if(r>=536870912)return"ff"+(r+3221225472).toString(16);var a=r.toString(16);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSanitizedSheetName=function(e){var t=e.match(/^'(.*)'$/);return t?t[1]:e}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.RefValue=void 0;var a=r(51),i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(2)),o=r(11);function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name="RefValue",this.str_expression=t,this.calcCell=r}var t,r,n;return t=e,(r=[{key:"getRefCalcCell",value:function(){var e,t,r,n=this.calcCell,i=this.str_expression;if(-1!==i.indexOf("!")){var o=i.split("!");t=(0,a.getSanitizedSheetName)(o[0]),e=n.workbookProxy.getSheetByName(t),r=o[1]}else e=n.calcSheet,t=n.calcSheet.name,r=i;if(!e)throw Error("Sheet "+t+" not found.");return this.calcCell.workbookProxy.getCellByName(t,r)}},{key:"solveExpression",value:function(){this.calcCell;var e=this.getRefCalcCell();if(!e.cellObj)return null;if(e.cellStatus===o.FORMULA_STATUS.created){if(e.execFormula(),"e"===e.cellObj.t)throw console.log("ref is an error at",e),new Error(e.cellObj.w);return e.cellObj.v}if(e.cellStatus===o.FORMULA_STATUS.working)throw new Error(i.ERROR_CIRCULAR);if(e.cellStatus===o.FORMULA_STATUS.solved){if("e"===e.cellObj.t)throw console.log("ref is an error after cellFormulaProxy eval"),new Error(e.cellObj.w);return e.cellObj.v}}}])&&s(t.prototype,r),n&&s(t,n),e}();t.RefValue=u},,function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(108),i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.formula=t,this.ast=""}var t,r,i;return t=e,(r=[{key:"preProcess",value:function(){this.formula=this.formula.replace(/=/g,""),this.formula=this.formula.replace(/:/g,"$$$"),this.formula=this.formula.replace(/""""/g,""),this.formula=this.formula.replace(/!/g,""),this.formula=this.formula.replace(/{/g,""),this.formula=this.formula.replace(/}/g,""),this.formula=this.formula.replace(/#/g,""),this.formula=this.formula.replace(/\./g,"a"),this.formula=this.formula.replace(/[0-9][0-9]*/g,"a"),this.formula=this.formula.replace(/\“/g,'"'),this.formula=this.formula.replace(/\（/g,"("),this.formula=this.formula.replace(/\）/g,")"),this.formula=this.formula.replace(/\”/g,'"'),this.formula=this.formula.replace(/\%/g,""),this.formula=this.formula.replace(/\,/g,""),this.formula=this.formula.replace(/\，/g,""),this.formula=this.formula.replace(/"([\s\S]+)"""/g,""),this.formula=this.formula.replace(/""/,"")}},{key:"parse",value:function(){this.preProcess();var e=this.formula;this.ast=a.parse(e)}},{key:"ignoreSpace",value:function(){}}])&&n(t.prototype,r),i&&n(t,i),e}();t.default=i},,,,,,,,,,,,,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(8),a=r(36),i=r(19);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cell=t}var t,r,l;return t=e,(r=[{key:"renderFormat",value:function(e,t,r,a,i){if(!1===(0,n.isHave)(e)||!1===(0,n.isHave)(e.format))return{cellText:"",state:!1};var o=this.cell,l="";if(e.format){var s=a.tryParseToNum(o,t,r);return s.state?i?"date"===s.style||"datetime"===s.style?l=s.text:s.state=!1:l=s.text:(!1===(0,n.isHave)(o.text)&&(o.text=""),l=o.text),{cellText:l,state:s.state}}return{cellText:l,state:!1}}},{key:"getCellDataType",value:function(e,t){var r=t.isDate,o=t.isNumber,l=this.cell,s=!0;(0,n.isHave)(l.formulas)||(l.formulas=""),(0,n.isHave)(l.text)||(l.text="");var u=""!==l.formulas?l.formulas+"":l.text+"",c=1*(u=u.replace(/,/g,""));return!c&&0!==c||"number"!=typeof c||isNaN(c)||!0!==/^\d+$/.test(u)?u&&!0===s&&(0,a.isFormula)(u)?(s=!0,o=!1,r=!1,l.type="na"):u&&-1!==u.search((0,i.str2Re)(i.datePattern2),"")?(!0===r?(s=!1,o=!1,r=!0):(s=!1,o=!1,r=!1),l.type="date"):(s=!1,o=!1,r=!1,l.type="other"):(!0===o?(o=!0,s=!1,r=!1):(s=!1,o=!1,r=!1),l.type="number"),l.tmp=u,e.push(l),{nA:s,isDate:r,isNumber:o}}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=null,this.state="move"}var t,r,a;return t=e,(r=[{key:"move",value:function(e){return this.range=e,this.state="move",this}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.selectorHeightBorderWidth=void 0;var n=r(0),a=r(1),i=r(5),o=r(7),l=r(4),s=r(6),u=d(r(145)),c=d(r(28));function d(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&m(e.prototype,t),r&&m(e,r),e}t.selectorHeightBorderWidth=3;var v=10,p=function(){function e(t,r,i){var o=this;f(this,e),this.cornerEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-corner")),this.data=t,this.sheet=i,this._selector=r,this.l=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(1)})),this.r=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-r")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(2)})).on("click",(function(e){2===e.detail&&e.stopPropagation()})),this.t=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-t")).on("mousedown.stop",(function(e){e.detail,e.stopPropagation(),o.moveEvent(3)})),this.b=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-b")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(4)})),this.cornerEl.on("mousedown",(function(e){2===e.detail&&(i.clickCopyPaste(),e.stopPropagation())})),this.boxinner=(0,n.h)("div","".concat(a.cssPrefix,"-selector-boxinner")).children(this.b,this.t,this.r,this.l),this.areaEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-area")).children(this.cornerEl,this.boxinner).hide(),this.clipboardEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-clipboard")).hide(),this.autofillEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-autofill")).hide(),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-selector")).css("z-index","".concat(v)).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),v+=1}return h(e,[{key:"border",value:function(e){this.areaEl.css("border",e)}},{key:"longTimeBefore",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;this.boxinner.hide(),setTimeout((function(){e.boxinner.show()}),t)}},{key:"moveEvent",value:function(e){console.log(60);var t=this.data,r=this._selector,n=this.sheet,a=t.selector,u=r.range,d=u.sri,f=u.sci,m=u.eri,h=u.eci,v=u.w,p=u.h,g=new i.CellRange(d,f,m,h,v,p),y=new i.CellRange(d,f,m,h,v,p),b=n.selectorMoveEl;b.set(-1,-1,!0),b.hide(),(0,o.mouseMoveUp)(window,(function(e){n.container.css("pointer-events","none"),r.setBoxinner("none");var a=t.getCellRectByXY(e.layerX,e.layerY),o=a.ri,l=a.ci;if(-1!==o&&-1!==l){(y=new i.CellRange(d,f,m,h,v,p)).move(o,l);var s=t.getMoveRect(y);b.range=y,b.setMove(s),b.el.show()}}),(function(){var e=t.rows,i=[],o=[],u=[];g.each((function(t,r){console.log(e.getCell(t,r),t,r);var n=e.getCell(t,r),a=new c.default(t,r,(0,s.deepCopy)(n||{}),"".concat((0,l.xy2expr)(r,t),":").concat((0,l.xy2expr)(r,t))),o=new c.default(t,r,(0,s.deepCopy)(n||{}),"".concat((0,l.xy2expr)(r,t)));i.push(a),u.push(o)})),y.each((function(t,r){var n=new c.default(t,r,(0,s.deepCopy)(e.getCell(t,r)||{}),(0,l.xy2expr)(r,t));o.push(n)})),t.cutPaste(g,y,!1),n.container.css("pointer-events","auto"),r.setBoxinner("auto"),b.hide();var d=t.getMoveRect(y);a.range=y,a.ci=y.sci,a.ri=y.sri,r.indexes=[a.ri,a.ci],r.moveIndexes=[y.sri,y.sci],r.range=y,r.setMove(d),n.selector.selectCell.setData(y.sri,y.sci),console.time("move"),e.moveChange(i,o,u),console.timeEnd("move"),n.selectorMoveReset()}))}},{key:"setCss",value:function(e){this.areaEl.css("border","2px dashed ".concat(e)),this.el.css("z-index","-1")}},{key:"setOffset",value:function(e){return this.el.offset(e).show(),this}},{key:"setBoxinner",value:function(e){this.l.css("pointer-events",e),this.r.css("pointer-events",e),this.t.css("pointer-events",e),this.b.css("pointer-events",e),this.cornerEl.css("pointer-events",e)}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"setAreaOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.areaEl.offset({width:n-3+.8,height:a-3+.8,left:t-.8,top:r-.8}).show()}},{key:"setClipboardOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.clipboardEl.offset({left:t,top:r,width:n-5,height:a-5})}},{key:"showAutofill",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.autofillEl.offset({width:n-3,height:a-3,left:t,top:r}).show()}},{key:"hideAutofill",value:function(){this.autofillEl.hide()}},{key:"showClipboard",value:function(){this.clipboardEl.show()}},{key:"hideClipboard",value:function(){this.clipboardEl.hide()}}]),e}();function g(e){var t=this.data,r=e.left,n=e.top,a=e.width,i=e.height,o=e.scroll,l=e.l,s=e.t,u=t.freezeTotalWidth(),c=t.freezeTotalHeight(),d=r-u;u>l&&(d-=o.x);var f=n-c;return c>s&&(f-=o.y),{left:d,top:f,width:a,height:i}}function y(e){var t=this.data,r=e.left,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalWidth(),u=r-s;return s>i&&(u-=l.x),{left:u,top:o,width:n,height:a}}function b(e){var t=this.data,r=e.top,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalHeight(),u=r-s;return s>o&&(u-=l.y),{left:i,top:u,width:n,height:a}}function E(e){this.br.setAreaOffset(g.call(this,e))}function R(e){this.tl.setAreaOffset(e)}function O(e){this.t.setAreaOffset(y.call(this,e))}function x(e){this.l.setAreaOffset(b.call(this,e))}function A(e){this.l.setClipboardOffset(b.call(this,e))}function w(e){this.br.setClipboardOffset(g.call(this,e))}function _(e){this.tl.setClipboardOffset(e)}function N(e){this.t.setClipboardOffset(y.call(this,e))}function C(e){E.call(this,e),R.call(this,e),O.call(this,e),x.call(this,e)}function T(e){w.call(this,e),_.call(this,e),N.call(this,e),A.call(this,e)}var M=function(){function e(t,r){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];f(this,e),this.data=t,this.br=new p(t,this,r),this.t=new p(t,this,r),this.l=new p(t,this,r),this.tl=new p(t,this,r),this.sheet=r,this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=(0,n.h)("div","".concat(a.cssPrefix,"-selectors")).children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),i?(this.selectCell=new u.default(t,i),this.el.child(this.selectCell.el)):this.selectCell=new u.default(t,i),this.lastri=-1,this.lastci=-1,v+=1}return h(e,[{key:"longTimeBefore",value:function(){this.tl.longTimeBefore(),this.br.longTimeBefore(),this.t.longTimeBefore(),this.l.longTimeBefore()}},{key:"setCss",value:function(e){this.br.setCss(e),this.t.setCss(e),this.l.setCss(e),this.tl.setCss(e)}},{key:"hide",value:function(){this.el.hide()}},{key:"resetOffset",value:function(){var e=this.data,t=this.tl,r=this.t,n=this.l,a=this.br;this.selectCell.resetSelectOffset();var i=e.freezeTotalHeight(),o=e.freezeTotalWidth();i>0||o>0?(t.setOffset({width:o,height:i}),r.setOffset({left:o,height:i}),n.setOffset({top:i,width:o}),a.setOffset({left:o,top:i})):(t.hide(),r.hide(),n.hide(),a.setOffset({left:0,top:0}))}},{key:"resetAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();C.call(this,e),T.call(this,t),this.resetOffset()}},{key:"resetBRTAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();E.call(this,e),O.call(this,e),w.call(this,t),N.call(this,t),this.resetOffset()}},{key:"resetBRLAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();E.call(this,e),x.call(this,e),w.call(this,t),A.call(this,t),this.resetOffset()}},{key:"resetSelectorBRLAreaOffset",value:function(e){var t=this.data.getMoveRect(e),r=this.data.getClipboardRect();E.call(this,t),x.call(this,t),w.call(this,r),A.call(this,r),this.resetOffset()}},{key:"set",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.data,a=n.calSelectedRangeByStart(e,t),i=a.sri,o=a.sci;if(r){var l=e,s=t;e<0&&(l=0),t<0&&(s=0),n.selector.setIndexes(l,s),this.indexes=[l,s]}this.moveIndexes=[i,o],this.range=a,this.resetAreaOffset(),this.el.show()}},{key:"autoFilterRef",value:function(){console.log(this.range)}},{key:"setEnd",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],this.data);r&&(this.lastri=e,this.lastci=t),this.range=n.calSelectedRangeByEnd(e,t),C.call(this,this.data.getSelectedRect())}},{key:"setBoxinner",value:function(e){this.br.setBoxinner(e),this.t.setBoxinner(e),this.l.setBoxinner(e),this.tl.setBoxinner(e)}},{key:"reset",value:function(){var e=this.data.selector.range,t=e.eri,r=e.eci,n=e.sci,a=e.sri;this.set(a,n),this.setEnd(t,r,!0,!0)}},{key:"setMove",value:function(e){C.call(this,e)}},{key:"showAutofill",value:function(e,t,r){if(-1!==e||-1!==t){var n=this.range,a=n.sri,o=n.sci,l=n.eri,s=n.eci,u=0,c=e,d=t;if(2===r)u=11,this.arange=new i.CellRange(a,d,l,o-1);else if(4===r)u=22,this.arange=new i.CellRange(c,o,a-1,s);else if(3===r)u=33,this.arange=new i.CellRange(a,s+1,l,d);else{if(1!==r)return this.arange=null,u;u=44,this.arange=new i.CellRange(l+1,o,c,s)}if(null!==this.arange){var f=this.data.getRect(this.arange);f.width+=2,f.height+=2;var m=this.br,h=this.l,v=this.t,p=this.tl;m.showAutofill(g.call(this,f)),h.showAutofill(b.call(this,f)),v.showAutofill(y.call(this,f)),p.showAutofill(f)}return u}}},{key:"hideAutofill",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideAutofill()}))}},{key:"showClipboard",value:function(){var e=this,t=this.data.getClipboardRect();T.call(this,t),["br","l","t","tl"].forEach((function(t){e[t].showClipboard()}))}},{key:"hideClipboard",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideClipboard()}))}}]),e}();t.default=M},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=r(7),o=r(1),l=(n=r(5))&&n.__esModule?n:{default:n};function s(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){e.preventDefault(),e.stopPropagation();var t=this.filterItems;t.length<=0||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex-=1,this.itemIndex<0&&(this.itemIndex=t.length-1,this.el.el.scrollTop=this.el.el.scrollHeight),this.el.el.scrollTop=33*(this.itemIndex-9),t[this.itemIndex].toggle())}function d(e){e.stopPropagation();var t=this.filterItems;t.length<=0||t.length<this.itemIndex||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex+=1,this.itemIndex>t.length-1&&(this.itemIndex=0,this.el.el.scrollTop=0),this.el.el.scrollTop=33*(this.itemIndex-9),console.log(t.length),t[this.itemIndex].toggle())}function f(e){e.preventDefault();var t=this.filterItems;if(!(t.length<=0)){if(e.stopPropagation(),this.itemIndex<0)return this.itemIndex=0,this.hide(),void i.createEvent.call(this,13,!1);t[this.itemIndex].el.click(),this.hide()}}function m(e){var t=e.keyCode;switch(e.ctrlKey&&e.stopPropagation(),t){case 37:e.stopPropagation();break;case 38:c.call(this,e),e.stopPropagation();break;case 39:e.stopPropagation();break;case 40:d.call(this,e),e.stopPropagation();break;case 13:case 9:f.call(this,e);break;default:e.stopPropagation()}}var h=function(){function e(t,r,n,i){var l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"200px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filterItems=[],this.items=t,this.data=n,this.editor=i,this.el=(0,a.h)("div","".concat(o.cssPrefix,"-suggest")).css("width",l).css("overflow-y","auto").css("max-height","306px").hide(),this.el.attr("tabindex",0),this.itemClick=r,this.itemIndex=-1,this.show=!1}var t,r,n;return t=e,(r=[{key:"setOffset",value:function(e){this.el.cssRemoveKeys("top","bottom").offset(e)}},{key:"hide",value:function(){var e=this.el;this.filterItems=[],this.itemIndex=-1,e.hide(),this.show=!1,(0,i.unbindClickoutside)(this.el.parent())}},{key:"setItems",value:function(e){this.items=e}},{key:"search",value:function(e){var t,r=this,n=this.items,u=this.data,c=this.editor;if(/^\s*$/.test(e)||(n=n.filter((function(t){return(t.key.toUpperCase()||t.toUpperCase()).startsWith(e.toUpperCase())}))),n=n.map((function(e){var t=e.title;t?"function"==typeof t&&(t=t()):t=e;var n=(0,a.h)("div","".concat(o.cssPrefix,"-item")).child(t).on("click.stop",(function(){r.itemClick(e)}));return e.label&&n.child((0,a.h)("div","label").html(e.label)),n})),this.filterItems=n,n.length<=0)return this.hide(),void(this.show=!1);var d=this.el,f=u.getRect(new l.default(c.ri,c.ci,c.ri,c.ci)),m=f.left+55,h=f.top+50;n.length>=9&&f.top-306>=50&&(h-=306,h-=f.height),d.css("left","".concat(m,"px")),d.css("top","".concat(h,"px")),(t=d.html("")).children.apply(t,s(n)).show(),this.show=!0,(0,i.bindClickoutside)(d.parent(),(function(){r.hide(),r.show=!1}))}},{key:"bindInputEvents",value:function(e){var t=this;e.on("keydown",(function(e){return m.call(t,e)}))}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectorColor=function(e){return e%=s.length,{color:s[e],index:e}},t.default=void 0;var n=r(0),a=r(1);function i(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var o=["#ffffff","#000100","#e7e5e6","#445569","#5b9cd6","#ed7d31","#a5a5a5","#ffc001","#4371c6","#71ae47"],l=[["#f2f2f2","#7f7f7f","#d0cecf","#d5dce4","#deeaf6","#fce5d5","#ededed","#fff2cd","#d9e2f3","#e3efd9"],["#d8d8d8","#595959","#afabac","#adb8ca","#bdd7ee","#f7ccac","#dbdbdb","#ffe59a","#b3c6e7","#c5e0b3"],["#bfbfbf","#3f3f3f","#756f6f","#8596b0","#9cc2e6","#f4b184","#c9c9c9","#fed964","#8eaada","#a7d08c"],["#a5a5a5","#262626","#3a3839","#333f4f","#2e75b5","#c45a10","#7b7b7b","#bf8e01","#2f5596","#538136"],["#7f7f7f","#0c0c0c","#171516","#222a35","#1f4e7a","#843c0a","#525252","#7e6000","#203864","#365624"]],s=["#EE0000","#8A2BE2","#FF3E96","#8B4500","#3A5FCD","#FF7F24"];var u=["#c00000","#fe0000","#fdc101","#ffff01","#93d051","#00b04e","#01b0f1","#0170c1","#012060","#7030a0"];function c(e){var t=this,r=(0,n.h)("div","".concat(a.cssPrefix,"-color-palette-cell")).on("click.stop",(function(){return t.change(e)})).css("background-color",e);return this.items.push(r),(0,n.h)("td","").child(r)}t.default=function e(){var t,r,s,d=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-color-palette")),this.change=function(){},this.items=[];var f=(0,n.h)("table","").children((t=(0,n.h)("tbody","")).children.apply(t,[(r=(0,n.h)("tr","".concat(a.cssPrefix,"-theme-color-placeholders"))).children.apply(r,i(o.map((function(e){return c.call(d,e)}))))].concat(i(l.map((function(e){var t;return(t=(0,n.h)("tr","".concat(a.cssPrefix,"-theme-colors"))).children.apply(t,i(e.map((function(e){return c.call(d,e)}))))}))),[(s=(0,n.h)("tr","".concat(a.cssPrefix,"-standard-colors"))).children.apply(s,i(u.map((function(e){return c.call(d,e)}))))])));this.el.child(f)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fnNameArrayWithKey=t.emptyWorkbook=t.allFnObj=void 0;var n=(0,r(44).createDefaultFnCollection)().getAllFnObj();t.allFnObj=n;t.emptyWorkbook={sheets:{sheet1:{A1:{}}}};var a=Object.getOwnPropertyNames(n).map((function(e){return{key:e,title:e}}));t.fnNameArrayWithKey=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(15)),a=o(r(12)),i=o(r(73));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(e,r){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new a.default(e).css("height","16px").css("border-bottom","3px solid ".concat(r)),l=new i.default;return l.change=function(e){n.setTitle(e),n.change(e)},(n=u(this,c(t).call(this,o,"auto",!1,"bottom-left",{type:!1},l.el))).colorPalette=l,n}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"setTitle",value:function(e){this.title.css("border-color",e),this.hide()}}])&&s(r.prototype,n),o&&s(r,o),t}(n.default);t.default=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(12))&&n.__esModule?n:{default:n},o=r(1),l=r(7);function s(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t,r){var n,l=this,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"600px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.title=t,this.el=(0,a.h)("div","".concat(o.cssPrefix,"-modal")).css("width",u).children((0,a.h)("div","".concat(o.cssPrefix,"-modal-header")).children(new i.default("close").on("click.stop",(function(){return l.hide()})),this.title),(n=(0,a.h)("div","".concat(o.cssPrefix,"-modal-content"))).children.apply(n,s(r))).hide(),this.open=!1}var t,r,n;return t=e,(r=[{key:"show",value:function(){var e=this;this.dimmer=(0,a.h)("div","".concat(o.cssPrefix,"-dimmer active")),document.body.appendChild(this.dimmer.el);var t=this.el.show().box(),r=t.width,n=t.height,i=document.documentElement,s=i.clientHeight,u=i.clientWidth;this.el.offset({left:(u-r)/2,top:(s-n)/3}),window.xkeydownEsc=function(t){27===t.keyCode&&e.hide()},this.open=!0,(0,l.bind)(window,"keydown",window.xkeydownEsc)}},{key:"hide",value:function(){this.el.hide(),this.open=!1,document.body.removeChild(this.dimmer.el),(0,l.unbind)(window,"keydown",window.xkeydownEsc),delete window.xkeydownEsc}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mountCopy=function(e){e.preventDefault();var t=i.call(this);if(t)return void(e.clipboardData&&(e.clipboardData.setData("text/html",l(t.img2)),e.clipboardData.setData("text/plain","")));var r=o.call(this);e.clipboardData&&(e.clipboardData.setData("text/html",l(r.html.el)),e.clipboardData.setData("text/plain",r.plain))},t.getChooseImg=i,t.sheetCopy=o;var n=r(0),a=r(6);function i(){var e=this.data.pasteDirectionsArr;if(this.direction=!1,e.length>0)for(var t=0;t<e.length;t++)if(!0===e[t].state)return this.container.css("pointer-events","auto"),e[t];return null}function o(){for(var e={plain:"",html:(0,n.h)("table","")},t=this.data,r=t.selector,i=t.rows,o=t.styles,l=r.range,s=l.sri,u=l.eri,c=l.sci,d=l.eci,f=(0,n.h)("tbody",""),m=s;m<=u;m+=1){for(var h=(0,n.h)("tr",""),v=c;v<=d;v+=1){var p=(0,n.h)("td","");if(i._[m]&&i._[m].cells&&i._[m].cells[v]){if(i._[m].cells[v]&&o[i._[m].cells[v].style]){if(p.css("color",o[i._[m].cells[v].style].color),o[i._[m].cells[v].style]&&o[i._[m].cells[v].style].font&&o[i._[m].cells[v].style].font.bold){var g=o[i._[m].cells[v].style].font.bold?"900":"";p.css("font-weight",g)}p.css("background",o[i._[m].cells[v].style].bgcolor)}i._[m].cells[v].text||(i._[m].cells[v].text=""),i._[m].cells[v].formulas||(i._[m].cells[v].formulas="");var y=""!==i._[m].cells[v].formulas?i._[m].cells[v].formulas:i._[m].cells[v].text;if(i._[m].cells[v].formulas&&(0,a.cutStr)(i._[m].cells[v].formulas,!1,!0).length>0){var b=(0,n.h)("reference","");b.html(y),b.attr("ri",m),b.attr("ci",v),p.child(b.el)}else p.html(y);e.plain+=y,e.plain+="\t"}else e.plain+="\t";h.child(p)}f.child(h),e.plain+="\n"}return e.html.child(f),e}function l(e){var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(6),a=r(8),i=r(4);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e){for(var t=[],r=0;r<e.length;r++)(0,a.isHave)(e[r])&&(0,a.isHave)(e[r].expr)&&t.push(e[r].expr),(0,a.isHave)(e[r])&&(0,a.isHave)(e[r].cell)&&(0,a.isHave)(e[r].cell.depend)&&t.push.apply(t,l(e[r].cell.depend)),(0,a.isHave)(e[r])&&(0,a.isHave)(e[r].cell)&&(0,a.isHave)(e[r].cell.multivalueRefsCell)&&t.push(e[r].cell.multivalueRefsCell);return t}var u=function(){function e(t,r){var n=t.type,a=void 0===n?-1:n,i=t.action,o=void 0===i?"":i,l=t.ri,s=void 0===l?-1:l,u=t.ci,c=void 0===u?-1:u,d=t.oldData,f=void 0===d?"":d,m=t.newData,h=void 0===m?"":m,v=t.expr,p=void 0===v?"":v,g=t.oldStep,y=void 0===g?"":g,b=t.cellRange,E=void 0===b?"":b,R=t.cells,O=void 0===R?{}:R,x=t.height,A=void 0===x?-1:x,w=t.width,_=void 0===w?-1:w,N=t.oldCell,C=void 0===N?{}:N,T=t.newCell,M=void 0===T?{}:T,S=t.newMergesData,I=void 0===S?"":S,j=t.oldMergesData,D=void 0===j?"":j,k=t.property,P=void 0===k?"":k,L=t.value,U=void 0===L?"":L;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type=a,this.action=o,this.ri=s,this.ci=c,this.expr=p,this.cellRange=E,this.cells=O,this.height=A,this.width=_,this.oldCell=C,this.newCell=M,this.oldMergesData=D,this.newMergesData=I,this.property=P,this.value=U,this.oldStep=y,this.oldData=f,this.newData=h,this.data=r}var t,r,a;return t=e,(r=[{key:"isRefresh",value:function(){return 999===this.type}},{key:"findAllNeedCalcCell",value:function(){var e,t,r=[],a=this.oldCell,o=this.newCell,u=this.ri,c=this.ci;return(e=r).push.apply(e,l(s(a))),(t=r).push.apply(t,l(s(o))),-1!==u&&-1!==c&&r.push((0,i.xy2expr)(c,u)),r=(0,n.distinct)(r)}},{key:"restore",value:function(e,t,r){var a=this.type;if(1===a){var i=this.oldCell,o=this.newCell,l="";l=1===r?(0,n.deepCopy)(i):(0,n.deepCopy)(o);for(var s=0;s<l.length;s++){var u=l[s],c=u.cell,d=u.ri,f=u.ci;e.rows.setCellText(d,f,c,"cell")}}else if(13===a){var m=this.oldData,h=this.newData,v="";v=1===r?(0,n.deepCopy)(h):(0,n.deepCopy)(m),e.setData(v)}else if(2===a||5===a||6===a||11===a||12===a){var p=this.newCell,g=this.oldCell,y=this.oldMergesData,b=this.newMergesData,E=(this.cellRange,this.property),R=(this.value,"");R=1===r?(0,n.deepCopy)(g):(0,n.deepCopy)(p),"merge"===E&&(1===r?this.data.merges.setData(y):this.data.merges.setData(b));for(var O=0;O<R.length;O++){var x=R[O],A=x.cell,w=x.ri,_=x.ci;e.rows.setCellText(w,_,A,"cell")}}else if(3===a){var N=this.ri,C=this.height,T=this.oldStep;1===r?e.rows.setHeight(N,T.height):e.rows.setHeight(N,C)}else if(4===a){var M=this.ci,S=this.width,I=this.oldStep;1===r?e.cols.setWidth(M,I.width):e.cols.setWidth(M,S)}}}])&&o(t.prototype,r),a&&o(t,a),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e,t){this.register=function(r){r.addEventListener("mousedown",(function(n){if(0===n.button){var a=n.clientX,i=n.clientY,o=r.offsetLeft,l=r.offsetTop;e&&e.onBegin&&e.onBegin.call(r,{left:a-o,top:i-l});var s=!0;r.style.cursor="move";var u=a,c=i;window.onmousemove=function(t){if(s){var n=t.clientX,d=t.clientY;return u=n-(a-o),c=d-(i-l),r.style.left=u>0?u+"px":"0px",r.style.top=c>0?c+"px":"0px",e&&e.onDrag&&e.onDrag.call(r,{left:u,top:c,x:n-a,y:d-i,isDown:s}),!1}},window.onmouseup=function(){return s=!1,r.style.cursor="default",e&&e.onEnd&&e.onEnd.call(r,{left:parseInt(r.style.left),top:parseInt(r.style.top)},t),!1},n.stopPropagation?n.stopPropagation():n.preventDefault&&n.preventDefault()}}))}};t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.spreadsheet=void 0;var n=r(0),a=d(r(81)),i=d(r(40)),o=r(1),l=r(9);r(187);var s=d(r(188)),u=r(189),c=d(r(79));function d(e){return e&&e.__esModule?e:{default:e}}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var m=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"sheet1";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var c=t;"string"==typeof t&&(c=document.querySelector(t)),this.locale("zh-cn",s.default),this.data=new a.default(u,r,l);var d=(0,n.h)("div","".concat(o.cssPrefix)).on("contextmenu",(function(e){return e.preventDefault()}));c.appendChild(d.el),this.sheet=new i.default(d,this.data),this.data.belongSheet=this.sheet}var t,r,u;return t=e,u=[{key:"locale",value:function(e,t){(0,l.locale)(e,t)}}],(r=[{key:"setDataSettings",value:function(e){this.data.settings.showEditor=e}},{key:"loadData",value:function(e){return this.sheet.loadData(e),this}},{key:"getData",value:function(){return this.data.getData()}},{key:"validate",value:function(){return this.data.validations.errors.size<=0}},{key:"change",value:function(e){return this.data.change=e,this}},{key:"locale",value:function(e,t){(0,l.locale)(e,t)}},{key:"getText",value:function(e,t,r){for(var n=this.sheet,a=n.selectors,i=n.data,o=n.table,l="",s=0;s<a.length;s++)l+=a[s].erpx;return i.getCellByExpr(l,o,e,t,r)}},{key:"removeEvent",value:function(){this.sheet.removeEvent()}}])&&f(t.prototype,r),u&&f(t,u),e}(),h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new m(e,t)};t.spreadsheet=h,window&&(window.drag=c.default,window.x=window.x||{},window.bugout=u.bugout,window.x.spreadsheet=h,window.x.spreadsheet.locale=function(e,t){return(0,l.locale)(e,t)})},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(82),i=M(r(103)),o=M(r(104)),l=M(r(105)),s=M(r(106)),u=r(107),c=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=T();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(10)),d=r(8),f=r(36),m=r(139),h=r(140),v=r(5),p=r(4),g=r(9),y=M(r(70)),b=r(0),E=r(39),R=(r(41),r(6)),O=M(r(54)),x=r(184),A=r(42),w=M(r(185)),_=M(r(69)),N=M(r(28)),C=M(r(186));function T(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return T=function(){return e},e}function M(e){return e&&e.__esModule?e:{default:e}}function S(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function I(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var D={view:{height:function(){return document.documentElement.clientHeight},width:function(){return document.documentElement.clientWidth}},formula:{},showGrid:!0,showToolbar:!0,showContextmenu:!0,showEditor:!0,autoLoad:!0,ignore:[],cellWidth:0,ignoreRi:0,minus:!1,row:{len:100,height:25},col:{len:26,width:100,indexWidth:60,minWidth:10},rowsInit:!1,style:{bgcolor:"#ffffff",align:"left",valign:"middle",textwrap:!1,strike:!1,flexible:!1,underline:!1,autoAdapt:!1,color:"#0a0a0a",font:{name:"Arial",size:10,bold:!1,italic:!1}}};function k(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};if(!t)return!1;var n=this.merges,a=t.clone(),i=j(e.size(),2),o=i[0],l=i[1],s=j(t.size(),2),u=s[0],c=s[1];return o>u&&(a.eri=t.sri+o-1),l>c&&(a.eci=t.sci+l-1),!n.intersects(a)||(r((0,g.t)("error.pasteForMergedCell")),!1)}function P(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=this.rows,i=this.merges;"all"!==r&&"format"!==r||(a.deleteCells(t,r),i.deleteWithin(t)),a.copyPaste(e,t,r,n,(function(e,t,r){if(r&&r.merge){var n=j(r.merge,2),a=n[0],o=n[1];if(a<=0&&o<=0)return;i.add(new v.CellRange(e,t,e+a,t+o))}}))}function L(e,t,r){var n=this.clipboard,a=this.rows,i=this.merges;a.cutPaste(e,t),i.move(e,t.sri-e.sri,t.sci-e.sci),r&&n.clear()}function U(e,t,r){var n=this.styles,a=this.rows.getCellOrNew(e,t),i={};(0,d.isHave)(a.style)&&(i=c.cloneDeep(n[a.style])),Object.assign(i,{border:r}),a.style=this.addStyle(i)}function V(e,t,r,n){if(-1===e||-1===t)return{state:!0,msg:"单元格坐标有误"};if("style"!==n&&(!r||"="!==r[0]))return{state:!1,msg:"正确"};var a=F.call(this,r);return"style"!==n&&!0===a.state?{msg:a.msg,state:!0}:{msg:a.msg,state:!1}}function F(e){var t=!1,r="";try{new O.default(e).parse()}catch(e){r="您输入的公式存在问题，请更正, 错误原因: "+e.description,t=!0}return!0===t&&!1===(0,R.isLegal)(e)&&(r="缺少左括号或右括号",t=!0),t?{state:!0,msg:r}:{state:!1,msg:r}}function B(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"to",r=arguments.length>2?arguments[2]:void 0;if("to"===t){for(var n=[],a=0;a<e.length;a++){var i=e[a];console.log(i);var o={src:i.img2.src,ri:i.ri,ci:i.ci,top:i.top,left:i.left,range:i.range,offsetLeft:i.offsetLeft,offsetTop:i.offsetTop,nextLeft:i.nextLeft,nextTop:i.nextTop,img:i.img,arr:i.arr,img2:i.img2};n.push(o)}return n}if("from"===t){if("string"==typeof r)return;for(var l=0;l<e.length;l++){var s=e[l],u=(0,b.h)("img","");u.el.src=s.src,E.mountImg.call(r,u.el,!0,s.ri,s.ci,s.range)}}}function H(e,t){for(var r=this.rows,n=e+1,a=!0;a;){var i=r.getCellOrNew(n,t);i&&i.text?n+=1:a=!1}return n}function Y(e){var t=this,r=e.mode,n=e.style,a=e.color,i=this.styles,o=this.selector,l=this.rows,s=o.range,u=s.sri,d=s.sci,f=s.eri,m=s.eci,h=!this.isSignleSelected();if(h||"inside"!==r&&"horizontal"!==r&&"vertical"!==r){for(var v=u;v<=f;v+=1)for(var p=d;p<=m;p+=1)U.call(this,v,p,{});if("outside"!==r||h){if("none"===r)o.range.each((function(e,r){var n=l.getCell(e,r);if(n&&void 0!==n.style){var a=c.cloneDeep(i[n.style]);delete a.border,n.style=t.addStyle(a)}}));else if("all"===r||"inside"===r||"outside"===r||"horizontal"===r||"vertical"===r)!function(){for(var e=[],i=u;i<=f;i+=1)for(var o=d;o<=m;o+=1){for(var s=[],c=0;c<e.length;c+=1){var v=j(e[c],4),p=v[0],g=v[1],y=v[2],b=v[3];if(i===p+y+1&&s.push(c),p<=i&&i<=p+y&&o===g){o+=b+1;break}}if(s.forEach((function(t){return e.splice(t,1)})),o>m)break;var E=l.getCell(i,o),R=0,O=0;if(E&&E.merge){var x=j(E.merge,2);R=x[0],O=x[1],e.push([i,o,R,O])}var A=R>0&&i+R===f,w=O>0&&o+O===m,_={};"all"===r?_={bottom:[n,a],top:[n,a],left:[n,a],right:[n,a]}:"inside"===r?(!w&&o<m&&(_.right=[n,a]),!A&&i<f&&(_.bottom=[n,a])):"horizontal"===r?!A&&i<f&&(_.bottom=[n,a]):"vertical"===r?!w&&o<=m&&(_.right=[n,a]):"outside"===r&&h&&(u===i&&(_.top=[n,a]),(A||f===i)&&(_.bottom=[n,a]),d===o&&(_.left=[n,a]),(w||m===o)&&(_.right=[n,a])),Object.keys(_).length>0&&U.call(t,i,o,_),o+=O}}();else if("top"===r||"bottom"===r)for(var g=d;g<=m;g+=1)"top"===r&&(U.call(this,u,g,{top:[n,a]}),g+=l.getCellMerge(u,g)[1]),"bottom"===r&&(U.call(this,f,g,{bottom:[n,a]}),g+=l.getCellMerge(f,g)[1]);else if("left"===r||"right"===r)for(var y=u;y<=f;y+=1)"left"===r&&(U.call(this,y,d,{left:[n,a]}),y+=l.getCellMerge(y,d)[0]),"right"===r&&(U.call(this,y,m,{right:[n,a]}),y+=l.getCellMerge(y,m)[0])}else U.call(this,u,d,{top:[n,a],bottom:[n,a],left:[n,a],right:[n,a]})}}function z(e,t){var r=this.rows,n=this.freezeTotalHeight(),a=r.height;n+r.height<e&&(a-=t);for(var i=this.exceptRowSet,o=0,l=a,s=r.height;o<r.len&&!(l>e);o+=1)i.has(o)||(l+=s=r.getHeight(o));return(l-=s)<=0?{ri:-1,top:0,height:s}:{ri:o-1,top:l,height:s}}function W(e,t){var r=this.cols,n=this.freezeTotalWidth(),a=r.indexWidth;n+r.indexWidth<=e&&(a-=t);var i=j(c.rangeReduceIf(0,r.len,a,r.indexWidth,e,(function(e){return r.getWidth(e)})),3),o=i[0],l=i[1],s=i[2];return l<=0?{ci:-1,left:0,width:r.indexWidth}:{ci:o-1,left:l,width:s}}function G(e,t,r){var n=e.text,a=e.formula,i=t.symbol,o=t.position;if(!(0,d.isHave)(n)||!(0,c.isNumber)(n))return null;var l=r((0,A.formatNumberRender)(n,-1));return a=(0,f.isFormula)(a)?a:l,isNaN(l)?null:{text:"begin"===o?i+l:l+i,value:n,formulas:a}}function X(e,t,r){return $.call(this,t,r,e)}function $(e,t,r){var n=this.rows,a=this.getCellStyle(e,t),i=(0,x.dateDiff)(r.text),o=i.isValid,l=i.diff,s=n.getCellStyleConvert(a,o);if("number"===s){var u=r.text,m=r.formulas,h={};return h=o?{text:l.toFixed(2),formulas:m}:{text:u=(0,A.formatNumberRender)(u,2),value:r.text,formulas:m},(0,d.isHave)(h.text)&&(0,c.isNumber)(h.text)?{state:!0,style:s,text:h.text,cell:h}:{state:!1,style:s,text:h.text,cell:h}}if("date"===s||"datetime"===s){var v=r.text;if(!o){var p=(0,x.formatDate)(v),g=p.state,y=p.date;o=g,l=r.text,v=y}return o&&"datetime"===s&&(v=(0,x.changeFormat)((0,x.formatDate)((0,x.dateDiff)(v).diff).date)),{state:o,style:s,text:(0,d.isHave)(a)?v:l}}if("normal"===s){if(o){var b=l,E=r.formulas,R={formulas:n.toString(E),text:n.toString(b)};return{state:!0,text:R.text,style:s,cell:R}}var O=r.text,w={formulas:r.formulas,text:O};return{state:!0,style:s,text:w.text,cell:w}}if("rmb"===s){var _="",N="";o?(_=l,N=(0,f.isFormula)(r.formulas)?r.formulas:l):(_=(0,A.formatNumberRender)(r.text,0),N=r.formulas);var C=G({text:_,formula:N},{symbol:"￥",position:"begin"},(function(e){return e}));if(C)return{state:!0,style:s,text:C.text,cell:C}}else if("percent"===s){var T="",M="";o?(T=l,M=(0,f.isFormula)(r.formulas)?r.formulas:l):(T=n.useOne(r.value,r.text),M=r.formulas);var S=G({text:T,formula:M},{symbol:"%",position:"end"},(function(e){return Number(100*e).toFixed(2)}));if(S)return{state:!0,style:s,text:S.text,cell:S}}return{state:!1,style:s,text:r.text,cell:{}}}var q=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.settings=c.merge(D,r||{}),this.name=t||"belongSheet",this.methods=n,this.freeze=[0,0],this.styles=[],this.merges=new u.Merges,this.rows=new f.Rows(this.settings.row,this),this.cols=new m.Cols(this.settings.col),this.validations=new h.Validations,this.hyperlinks={},this.comments={},this.showEquation=!1,this.calc=new a.Calc,this.pasteDirectionsArr=[],this.changeDataForCalc=null,this.multiPreAction=new w.default(this),this.selector=new i.default,this.scroll=new o.default,this.clipboard=new l.default,this.moved=new y.default,this.autoFilter=new s.default,this.change=function(){},this.exceptRowSet=new Set,this.sortedRowMap=new Map,this.unsortedRowMap=new Map}var t,r,n;return t=e,(r=[{key:"addValidation",value:function(e,t,r){var n=this;this.changeData((function(){n.validations.add(e,t,r)}))}},{key:"removeValidation",value:function(){var e=this,t=this.selector.range;this.changeData((function(){e.validations.remove(t)}))}},{key:"tryParseToNum",value:function(e,t,r){return X.call(this,e,t,r)}},{key:"clickCopyPaste",value:function(){var e=this.selector.range.eri,t=this.selector.range.eci,r=this.rows,n=r.getCellOrNew(e,t),a=r.getCellOrNew(e+1,t);if(!n||!n.text||a&&a.text)return{enter:!1};for(var i=H.call(this,e,t-1),o=H.call(this,e,t+1),l=i<o?o:i,s=!1,u=1;u<l&&!1===s;u++){var c=r.getCellOrNew(e+u,t);c&&c.text&&(l=e+u,s=!0)}return{enter:!0,dstCellRange:new v.CellRange(e+1,t,l-1,t),srcCellRange:new v.CellRange(e,t,e,t)}}},{key:"getSelectedValidation",value:function(){var e=this.selector,t=e.ri,r=e.ci,n=e.range,a=this.validations.get(t,r),i={ref:n.toString()};return null!==a&&(i.mode=a.mode,i.validator=a.validator),i}},{key:"canUndo",value:function(){return this.multiPreAction.getItems(1).length>0}},{key:"canRedo",value:function(){return this.multiPreAction.getItems(2).length>0}},{key:"undo",value:function(){this.multiPreAction.undo(),this.changeDataForCalc=this.getChangeDataToCalc()}},{key:"historyList",value:function(e){return this.multiPreAction.getItems(e)}},{key:"redo",value:function(){this.multiPreAction.redo(),this.changeDataForCalc=this.getChangeDataToCalc()}},{key:"copy",value:function(){document.execCommand("copy",!0),this.clipboard.copy(this.selector.range)}},{key:"makeCellPropArr",value:function(e,t,r){for(var n=[],a=this.rows.eachRange(e),i=0;i<a.length;i++){var o=a[i],l=o.ri,s=o.ci,u=o.cell;if((0,d.isHave)(u)&&!1===(0,d.isHave)(u.style)){var c=this.defaultStyle();u.style=this.addStyle(c)}var f=new N.default(l+t,s+r,u,(0,p.xy2expr)(l+t,s+r));n.push(f)}return n}},{key:"setCellByCellProp",value:function(e,t){for(var r=this.rows,n=0;n<e.length;n++){var a=e[n],i=a.ri,o=a.ci,l=a.cell;(0,d.isHave)(l)&&(0,d.isHave)(l.style)&&r.setCell(i,o,l,"style"),t(i,o)}}},{key:"paintFormatChange",value:function(e){var t=this;this.changeData((function(){var r=t.clipboard,n=t.selector,a=r.range,i=n.ri,o=n.ci,l=i-a.sri,s=o-a.sci,u=t.makeCellPropArr(a,l,s);if(n.range.eri-n.range.sri==0&&n.range.eci-n.range.sci==0)t.setCellByCellProp(u,e);else{var c=new C.default(a,n.range),d=c.getPaintType(),f=c.makePaintArr(d,u);t.setCellByCellProp(f,e)}}),{type:12,cellRange:this.selector.range})}},{key:"move",value:function(){this.moved.move()}},{key:"cut",value:function(){this.clipboard.cut(this.selector.range)}},{key:"paste",value:function(e){this.changeData((function(){}),{type:6,cellRange:e})}},{key:"autofill",value:function(e,t){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},a=this.selector.range;return!!k.call(this,a,e,n)&&(this.changeData((function(){P.call(r,a,e,t,!0)}),{type:5,cellRange:e}),!0)}},{key:"clickAutofill",value:function(e,t,r){var n=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};return!!k.call(this,e,t,a)&&(this.changeData((function(){P.call(n,e,t,r,!0)})),!0)}},{key:"clearClipboard",value:function(){this.clipboard.clear()}},{key:"calSelectedRangeByEnd",value:function(e,t){var r=this.selector,n=this.rows,a=this.cols,i=this.merges,o=r.range,l=o.sri,s=o.sci,u=o.eri,c=o.eci,d=r.ri,f=r.ci,m=e,h=t;return e<0&&(m=n.len-1),t<0&&(h=a.len-1),m<=d?(l=m,u=d):u=m,h<=f?(s=h,c=f):c=h,r.range=i.union(new v.CellRange(l,s,u,c)),r.range}},{key:"calSelectedRangeByStart",value:function(e,t){var r=this.selector,n=this.rows,a=this.cols,i=this.merges.getFirstIncludes(e,t);return null===i&&(i=new v.CellRange(e,t,e,t),-1===e&&(i.sri=0,i.eri=n.len-1),-1===t&&(i.sci=0,i.eci=a.len-1)),r.range=i,i}},{key:"setSelectedCellAttr",value:function(e,t){var r=this;this.changeData((function(){var n=r.selector,a=r.styles,i=r.rows;if("merge"===e)t?r.merge():r.unmerge();else if("border"===e)Y.call(r,t);else if("cellFormulaProxy"===e){var o=i.getCellOrNew(n.ri,n.ci);o.text="=".concat(t,"()"),o.formulas="=".concat(t,"()")}else n.range.each((function(n,o){var l=i.getCellOrNew(n,o),s={};if((0,d.isHave)(l.style)&&(s=c.cloneDeep(a[l.style])),"format"===e)s.format=t,i.setCellText(n,o,{text:l.text,style:r.addStyle(s)},"format");else if("font-bold"===e||"font-italic"===e||"font-name"===e||"font-size"===e){var u={};u[e.split("-")[1]]=t,s.font=Object.assign(s.font||{},u),l.style=r.addStyle(s)}else"flexible"===e?(r.exceptRowSet.has(n+1)&&r.exceptRowSet.has(n+2)&&!r.exceptRowSet.has(n+3)?(r.exceptRowSet.delete(n),r.exceptRowSet.delete(n+1),r.exceptRowSet.delete(n+2)):(r.exceptRowSet.add(n),r.exceptRowSet.add(n+1),r.exceptRowSet.add(n+2)),s[e]=t,l.style=r.addStyle(s)):"strike"!==e&&"textwrap"!==e&&"underline"!==e&&"align"!==e&&"valign"!==e&&"color"!==e&&"bgcolor"!==e||(s[e]=t,l.style=r.addStyle(s))}))}),{type:11,cellRange:this.selector.range,property:e,value:t})}},{key:"setSelectedCellText",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input",r=this.selector,n=r.ri,a=r.ci,i=n;this.unsortedRowMap.has(n)&&(i=this.unsortedRowMap.get(n)),this.setCellText(i,a,{text:e},t),this.resetAutoFilter()}},{key:"setSelectedCell",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input",r=arguments.length>2?arguments[2]:void 0,n=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;this.setCellAll(n,a,e,r,t),this.resetAutoFilter()}},{key:"getSelectedCell",value:function(){var e=this.selector,t=e.ri,r=e.ci,n=t;return this.unsortedRowMap.has(t)&&(n=this.unsortedRowMap.get(t)),this.rows.getCell(n,r)}},{key:"editorChangeToHistory",value:function(e,t,r){var n=t.ri,a=t.ci;if(-1===n||-1===a)return{state:!1};var i=this.rows.getCell(n,a),o=this.multiPreAction,l=(0,p.xy2expr)(a,n),s=o.getStepType(r,{ri:n,ci:a,expr:l,text:i.text}),u=new N.default(n,a,e,l),c=new N.default(n,a,i,l);return o.addStep(s,{oldCell:[u],newCell:[c]}),this.changeDataForCalc=this.getChangeDataToCalc(),{state:!0}}},{key:"changeToHistory",value:function(e,t){var r=e.ri,n=e.type,a=e.ci,i=e.cellRange,o=e.property,l=e.value,s=e.oldCell,u=e.oldMergesData;if(-1===n)return{state:!1};var c=this.multiPreAction,d=this.selector,f=c.getStepType(n,{expr:"",property:o,value:l,oldCell:s,range:d.range,ri:r,ci:a,cellRange:i});return c.addStep(f,{oldCell:s,oldMergesData:u,newMergesData:this.merges.getData(),oldStep:t}),{state:!0}}},{key:"getSelectedCellRiCi",value:function(e,t){var r=e;return this.unsortedRowMap.has(e)&&(r=this.unsortedRowMap.get(e)),this.rows.getCell(r,t)}},{key:"xyInSelectedRect",value:function(e,t){var r=this.getSelectedRect(),n=r.left,a=r.top,i=r.width,o=r.height,l=e-this.cols.indexWidth,s=t-this.rows.height;return l>n&&l<n+i&&s>a&&s<a+o}},{key:"getSelectedRect",value:function(){return this.getRect(this.selector.range)}},{key:"getClipboardRect",value:function(){var e=this.clipboard;return e.isClear()?{left:-100,top:-100}:this.getRect(e.range)}},{key:"getMoveRect",value:function(e){return this.getRect(e)}},{key:"getRect",value:function(e){var t=this.scroll,r=this.rows,n=this.cols,a=this.exceptRowSet,i=e.sri,o=e.sci,l=e.eri,s=e.eci;if(i<0&&o<0)return{left:0,l:0,top:0,t:0,scroll:t};var u=n.sumWidth(0,o),c=r.sumHeight(0,i,a),d=r.sumHeight(i,l+1,a),f=n.sumWidth(o,s+1),m=u-t.x,h=c-t.y,v=this.freezeTotalHeight(),p=this.freezeTotalWidth();return p>0&&p>u&&(m=u),v>0&&v>c&&(h=c),{l:u,t:c,left:m,top:h,height:d,width:f,scroll:t}}},{key:"getCellRectByXY",value:function(e,t){var r=this.scroll,n=this.merges,a=this.rows,i=this.cols,o=z.call(this,t,r.y),l=o.ri,s=o.top,u=o.height,c=W.call(this,e,r.x),d=c.ci,f=c.left,m=c.width;if(-1===d&&(m=i.totalWidth()),-1===l&&(u=a.totalHeight()),l>=0||d>=0){var h=n.getFirstIncludes(l,d);if(h){l=h.sri,d=h.sci;var v=this.cellRect(l,d);f=v.left,s=v.top,m=v.width,u=v.height}}return{ri:l,ci:d,left:f,top:s,width:m,height:u}}},{key:"getCellRectByXYWithNotTotalResult",value:function(e,t){var r=this.scroll,n=this.merges,a=z.call(this,t,r.y),i=a.ri,o=a.top,l=a.height,s=W.call(this,e,r.x),u=s.ci,c=s.left,d=s.width;if(i>=0||u>=0){var f=n.getFirstIncludes(i,u);if(f){i=f.sri,u=f.sci;var m=this.cellRect(i,u);c=m.left,o=m.top,d=m.width,l=m.height}}return{ri:i,ci:u,left:c,top:o,width:d,height:l}}},{key:"isSignleSelected",value:function(){var e=this.selector.range,t=e.sri,r=e.sci,n=e.eri,a=e.eci,i=this.getCell(t,r);if(i&&i.merge){var o=j(i.merge,2),l=o[0],s=o[1];if(t+l===n&&r+s===a)return!0}return!this.selector.multiple()}},{key:"canUnmerge",value:function(){var e=this.selector.range,t=e.sri,r=e.sci,n=e.eri,a=e.eci,i=this.getCell(t,r);if(i&&i.merge){var o=j(i.merge,2),l=o[0],s=o[1];if(t+l===n&&r+s===a)return!0}return!1}},{key:"merge",value:function(){var e=this.selector,t=this.rows;if(!this.isSignleSelected()){var r=j(e.size(),2),n=r[0],a=r[1];if(n>1||a>1){var i=e.range,o=i.sri,l=i.sci,s=t.getCellOrNew(o,l);s.merge=[n-1,a-1],this.merges.add(e.range),this.rows.deleteCells(e.range),this.rows.setCell(o,l,s)}}}},{key:"unmerge",value:function(){var e=this,t=this.selector;if(this.isSignleSelected()){var r=t.range,n=r.sri,a=r.sci;this.changeData((function(){e.rows.deleteCell(n,a,"merge"),e.merges.deleteWithin(t.range)}))}}},{key:"canAutofilter",value:function(){return!this.autoFilter.active()}},{key:"autofilter",value:function(){var e=this,t=this.autoFilter,r=this.selector;this.changeData((function(){if(t.active())t.clear(),e.exceptRowSet=new Set,e.sortedRowMap=new Map,e.unsortedRowMap=new Map;else{for(var n=r.range.toString(),a=r.range.eri,i=e.rows,o=r.range.sci;o<=r.range.eci;o++){var l=new v.CellRange(r.range.sri,o,r.range.sri,o);a<(l=i.autoFilterRef(n,l)).eri&&(a=l.eri)}var s=new v.CellRange(r.range.sri,r.range.sci,a,r.range.eci);t.ref=s.toString()}}))}},{key:"throwFormula",value:function(){var e=this.selector,t=this.rows;this.changeData((function(){e.range.each((function(e,r){var n=t.getCellOrNew(e,r);n&&n.text&&n.formulas&&t.setCellAll(e,r,n.text,n.text)}))}))}},{key:"setAutoFilter",value:function(e,t,r,n){var a=this.autoFilter;a.addFilter(e,r,n),a.setSort(e,t),this.resetAutoFilter()}},{key:"resetAutoFilter",value:function(){var e=this,t=this.autoFilter,r=this.rows;if(t.active()){var n=t.sort,a=t.filteredRows((function(e,t){return r.getCell(e,t)})),i=a.rset,o=a.fset,l=Array.from(o),s=Array.from(o);n&&l.sort((function(e,t){return"asc"===n.order?e-t:"desc"===n.order?t-e:0})),this.exceptRowSet=i,this.sortedRowMap=new Map,this.unsortedRowMap=new Map,l.forEach((function(t,r){e.sortedRowMap.set(s[r],t),e.unsortedRowMap.set(t,s[r])}))}}},{key:"deleteCell",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all",r=this.selector;this.changeData((function(){e.rows.deleteCells(r.range,t),"all"!==t&&"format"!==t||e.merges.deleteWithin(r.range)}),{type:2})}},{key:"insert",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,n=this.selector.range,a=n.sri,i=n.sci,o=this.rows,l=this.merges,s=this.cols;r="row"===e?-1!==r?r:a:-1!==r?r:i,this.changeData((function(){var n=r;"row"===e?o.insert(r,t):"column"===e&&(o.insertColumn(r,t),n=r,s.len+=t),l.shift(e,n,t,(function(e,t,r,n){var a=o.getCell(e,t);a.merge[0]+=r,a.merge[1]+=n}))}),{type:13,data:this.getData(),property:"insert"})}},{key:"delete",value:function(e){var t=this;this.changeData((function(){var r=t.rows,n=t.merges,a=t.selector,i=t.cols,o=a.range,l=a.range,s=l.sri,u=l.sci,c=l.eri,d=l.eci,f=j(a.range.size(),2),m=f[0],h=f[1],v=s,p=m;"row"===e?r.delete(s,c):"column"===e&&(r.deleteColumn(u,d),v=o.sci,p=h,i.len-=1),n.shift(e,v,-p,(function(e,t,n,a){var i=r.getCell(e,t);i.merge[0]+=n,i.merge[1]+=a,0===i.merge[0]&&0===i.merge[1]&&delete i.merge}))}))}},{key:"scrollx",value:function(e,t){var r=this.scroll,n=this.freeze,a=this.cols,i=j(n,2)[1],o=j(c.rangeReduceIf(i,a.len,0,0,e,(function(e){return a.getWidth(e)})),3),l=o[0],s=o[1],u=o[2],d=s;e>0&&(d+=u),r.x!==d&&(r.ci=e>0?l:0,r.x=d,t())}},{key:"scrolly",value:function(e,t){var r=this.scroll,n=this.freeze,a=this.rows,i=j(n,1)[0],o=j(c.rangeReduceIf(i,a.len,0,0,e,(function(e){return a.getHeight(e)})),3),l=o[0],s=o[1],u=o[2],d=s;e>0&&(d+=u),r.y!==d&&(r.ri=e>0?l:0,r.y=d,t())}},{key:"cellRect",value:function(e,t){var r=this.rows,n=this.cols,a=n.sumWidth(0,t),i=r.sumHeight(0,e),o=r.getCell(e,t),l=n.getWidth(t),s=r.getHeight(e);if(null!==o&&o.merge){var u=j(o.merge,2),c=u[0],d=u[1];if(c>0)for(var f=1;f<=c;f+=1)s+=r.getHeight(e+f);if(d>0)for(var m=1;m<=d;m+=1)l+=n.getWidth(t+m)}return{left:a,top:i,width:l,height:s,cell:o}}},{key:"getCell",value:function(e,t){return this.rows.getCell(e,t)}},{key:"getMax",value:function(){var e=this.cols.len;return{mri:this.rows.len,mci:e}}},{key:"renderFormat",value:function(e,t,r,n,a){return new _.default(t).renderFormat(e,r,n,this,a)}},{key:"isFormula",value:function(e){return this.rows.isFormula(e)}},{key:"toString",value:function(e){return this.rows.toString(e)}},{key:"getCellTextOrDefault",value:function(e,t){var r=this.getCell(e,t);return r&&r.text?r.text:""}},{key:"getCellStyle",value:function(e,t){var r=this.getCell(e,t);return r&&void 0!==r.style?this.styles[r.style]:null}},{key:"getCellStyleOrDefault",value:function(e,t){var r=this.styles,n=this.rows.getCell(e,t),a=n&&void 0!==n.style?r[n.style]:{};return c.merge(this.defaultStyle(),a)}},{key:"getSelectedCellStyle",value:function(){var e=this.selector,t=e.ri,r=e.ci;return this.getCellStyleOrDefault(t,r)}},{key:"getCellByExpr",value:function(e,t,r,n,a){}},{key:"setCellText",value:function(e,t,r,n){var a=r.text,i=r.style,o=this.rows,l=this.history,s=this.validations;"finished"===n?(o.setCellText(e,t,{text:""}),l.add(this.getData()),o.setCellText(e,t,{text:a})):("end"===n?o.setCellAll(e,t,a):"formulas"===n?o.setCellAll(e,t,a,"-"):"style"===n?o.setCellText(e,t,{text:a,style:i},"style"):o.setCellText(e,t,{text:a}),this.change(this.getData())),s.validate(e,t,a)}},{key:"setCellAll",value:function(e,t,r,n,a){var i=this.rows,o=this.history,l=this.validations;"finished"===a?(i.setCellAll(e,t,"",""),o.add(this.getData()),i.setCellAll(e,t,r,n)):i.setCellAll(e,t,r,n),l.validate(e,t,r,n)}},{key:"equationIsActive",value:function(){return this.showEquation}},{key:"freezeIsActive",value:function(){var e=j(this.freeze,2),t=e[0],r=e[1];return t>0||r>0}},{key:"setFreeze",value:function(e,t){var r=this;this.changeData((function(){r.freeze=[e,t]}))}},{key:"freezeTotalWidth",value:function(){return this.cols.sumWidth(0,this.freeze[1])}},{key:"freezeTotalHeight",value:function(){return this.rows.sumHeight(0,this.freeze[0])}},{key:"setRowHeight",value:function(e,t){var r=this;this.changeData((function(){r.rows.setHeight(e,t)}),{type:3,ri:e})}},{key:"setColWidth",value:function(e,t){var r=this;this.changeData((function(){r.cols.setWidth(e,t)}),{type:4,ci:e})}},{key:"viewHeight",value:function(){var e=this.settings,t=e.view,r=e.showToolbar,n=t.height();return r&&(n-=41),n}},{key:"viewWidth",value:function(){return this.settings.view.width()}},{key:"freezeViewRange",value:function(){var e=j(this.freeze,2),t=e[0],r=e[1];return new v.CellRange(0,0,t-1,r-1,this.freezeTotalWidth(),this.freezeTotalHeight())}},{key:"viewRange",value:function(){var e=this.scroll,t=this.rows,r=this.cols,n=this.freeze,a=e.ri,i=e.ci;a<=0&&(a=j(n,1)[0]),i<=0&&(i=j(n,2)[1]);for(var o=0,l=0,s=[t.len,r.len],u=s[0],c=s[1],d=a;d<t.len&&(u=d,!((l+=t.getHeight(d))>this.viewHeight()));d+=1);for(var f=i;f<r.len&&(c=f,!((o+=r.getWidth(f))>this.viewWidth()));f+=1);return new v.CellRange(a,i,u,c,o,l)}},{key:"viewRange2",value:function(){var e=this.scroll,t=this.rows,r=this.cols,n=this.freeze,a=e.ri,i=e.ci;a<=0&&(a=j(n,1)[0]),i<=0&&(i=j(n,2)[1]);for(var o=0,l=0,s=[t.len,r.len],u=s[0],c=s[1],d=a;d<t.len&&(u=d,!((l+=t.getHeight(d))>this.viewHeight()));d+=1);for(var f=i;f<r.len;f+=1)o+=r.getWidth(f),c=f;return new v.CellRange(a,i,u,c,o,l)}},{key:"eachMergesInView",value:function(e,t){this.merges.filterIntersects(e).forEach((function(e){return t(e)}))}},{key:"rowEach",value:function(e,t,r){for(var n=0,a=this.rows,i=this.exceptRowSet,o=S(i),l=0,s=0;s<o.length;s+=1)o[s]<e&&(l+=1);for(var u=e+l;u<=t+l;u+=1)if(i.has(u))l+=1;else{var c=a.getHeight(u);if(r(u,n,c),(n+=c)>this.viewHeight())break}}},{key:"colEach",value:function(e,t,r){for(var n=0,a=this.cols,i=e;i<=t;i+=1){var o=a.getWidth(i);if(r(i,n,o),(n+=o)>this.viewWidth())break}}},{key:"defaultStyle",value:function(){return this.settings.style}},{key:"addStyle",value:function(e){for(var t=this.styles,r=0;r<t.length;r+=1){var n=t[r];if(c.equals(n,e))return r}return t.push(e),t.length-1}},{key:"getChangeDataToCalc",value:function(){var e=this.multiPreAction;if(e.undoItems.length<=0)return null;var t=e.undoItems[e.undoItems.length-1];return(0,d.isHave)(t)?t:null}},{key:"changeData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=t.type,n=void 0===r?-1:r,a=t.ri,i=void 0===a?-1:a,o=t.ci,l=void 0===o?-1:o,s=t.cellRange,u=void 0===s?"":s,c=t.property,d=void 0===c?"":c,f=t.value,m=void 0===f?"":f;if(!1!==this.settings.showEditor){var h={},v=this.merges.getData(),p=this.multiPreAction,g=this.selector,y=p.getStepType(n,{expr:"",property:d,value:m,oldCell:h,range:g.range,ri:i,ci:l,cellRange:u});if(""!==u){var b=this.multiPreAction;h=b.eachRange(u)}e(),this.changeToHistory({type:n,ri:i,ci:l,cellRange:u,property:d,value:m,oldCell:h,oldMergesData:v,newData:this.getData()},y),this.changeDataForCalc=this.getChangeDataToCalc(),this.change(this.getData())}}},{key:"cutPaste",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];L.call(this,e,t,r)}},{key:"setData",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=this.autoFilter;return Object.keys(e).forEach((function(i){if("merges"===i||"cols"===i||"validations"===i)t[i].setData(e[i]);else if("flex"===i)a.addFiexRows(e[i]);else if("rows"===i)t[i].setData(e[i],r,n,t.settings.rowsInit);else if("freeze"===i){var o=j((0,p.expr2xy)(e[i]),2),l=o[0],s=o[1];t.freeze=[s,l]}else"pictures"===i?e[i]&&B.call(t,e[i],"from",r):"autofilter"===i?e[i]&&e[i].ref&&(a.ref=e[i].ref,a.filters=e[i].filters,a.sort=e[i].sort):void 0!==e[i]&&(t[i]=e[i])})),this}},{key:"selectorCellText",value:function(e,t,r,n){return V.call(this,e,t,r,n)}},{key:"getData",value:function(){var e=this.name,t=this.freeze,r=this.styles,n=this.merges,a=this.rows,i=this.cols,o=this.validations,l=this.autoFilter,s=this.pasteDirectionsArr;return{editor:this.settings.showEditor,name:e,freeze:(0,p.xy2expr)(t[1],t[0]),styles:r,pictures:B(s,"to"),merges:n.getData(),rows:a.getData(),cols:i.getData(),validations:o.getData(),autofilter:l.getData()}}}])&&I(t.prototype,r),n&&I(t,n),e}();t.default=q},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Calc=void 0;r(10);var n=r(83),a=r(44);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calcWorkbookProxy=new a.CalcWorkbookProxy({})}var t,r,o;return t=e,(r=[{key:"calculateRows",value:function(e,t){var r=new n.CalcRowsProxy(e,t);!0===t.isRefresh()&&(e.workbook=r.rows2workbook());var a=e.workbook,i=this.calculateWorkbook(a);return r.calcDoneToSetCells(a,e),i}},{key:"calculateWorkbook",value:function(e){this.calcWorkbookProxy.updateByWorkbookObj(e);var t=this.calcWorkbookProxy.find_all_cells_with_formulas();return this.calcWorkbookProxy.calculateFormulas(t),t}}])&&i(t.prototype,r),o&&i(t,o),e}();t.Calc=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CalcRowsProxy=void 0;var n,a=(n=r(4))&&n.__esModule?n:{default:n},i=r(8);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rows=t,this.preAction=r}var t,r,n;return t=e,(r=[{key:"updateWorkbook",value:function(e){for(var t=this.rows.data.name,r=this.preAction.findAllNeedCalcCell(),n=0;n<r.length;n++){var o=r[n],l=a.default.expr2xy(o),s=this.rows.getCell(l[1],l[0]);(0,i.isHave)(s)&&(e.Sheets[t][o]={v:s.text,f:s.formulas})}return e}},{key:"rows2workbook",value:function(){var e=this.rows,t=e._,r=null,n=e.data.name;return(0,i.isHave)(e.name2SheetProxy)?r=e.name2SheetProxy:(r={Sheets:{}}).Sheets[n]={},Object.keys(t).forEach((function(o){Object.keys(t[o].cells).forEach((function(t){var l=e.getCell(o,t),s=a.default.xy2expr(t,o);(0,i.isHave)(l)&&(r.Sheets[n][s]={v:l.text,f:l.formulas})}))})),r}},{key:"calcDoneToSetCells",value:function(e,t){var r=t.data.name,n=e.Sheets[r];Object.keys(n).forEach((function(e){var r=a.default.expr2xy(e);if((0,i.isHave)(n[e])&&(0,i.isHave)(n[e].v)&&(0,i.isHave)(n[e].f)){var o=t.getCell(r[1],r[0]);(0,i.isHave)(o)||(o={}),o.text=n[e].v,o.formulas=n[e].f,""===o.formulas&&0===o.text&&(o.text=""),t.setCell(r[1],r[0],o)}})),t.workbook=e}}])&&o(t.prototype,r),n&&o(t,n),e}();t.CalcRowsProxy=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CalcCell=void 0;a(r(45)),r(2),a(r(4));var n=r(11);r(8);function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t,r,n,a,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.workbookProxy=t,this.calcSheet=r,this.cellObj=n,this.celName=a,this.cellStatus=i,this.formulaString=this.cellObj.f||""}var t,r,a;return t=e,(r=[{key:"getCellProperty",value:function(e){return this.cellObj[e]}},{key:"isStructuralFormula",value:function(){return this.formulaString.startsWith("=")}},{key:"isFormulaValid",value:function(){return void 0!==this.formulaString}},{key:"isEmpty",value:function(){return void 0===this.cellObj||null===this.cellObj}},{key:"check_valid",value:function(){return"string"==typeof this.formulaString}},{key:"execFormula",value:function(){if(this.cellStatus===n.FORMULA_STATUS.solved)return this.cellObj.v;this.cellStatus=n.FORMULA_STATUS.working,this.workbookProxy.parseCalcCell(this).update_cell_value(),this.cellStatus=n.FORMULA_STATUS.solved}}])&&i(t.prototype,r),a&&i(t,a),e}();t.CalcCell=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MultiCollExpFn=t.FnCollection=void 0;var n=r(86),a=r(87);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}var s=function(){function e(){i(this,e),this.fnObj={}}return l(e,[{key:"addFnObj",value:function(e){var t,r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=!0,i=!1,o=void 0;try{for(var l,s=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(a=(l=s.next()).done);a=!0){var u=n+(t=l.value);if(u in this.fnObj){if(!0===r)continue;throw new Error("define fn again:",t)}var c=e[t];"function"==typeof c?this.fnObj[u]=e[t]:this.addFnObj(e[t],r,t+".")}}catch(e){i=!0,o=e}finally{try{a||null==s.return||s.return()}finally{if(i)throw o}}}},{key:"updateFnObj",value:function(e){var t,r=!0,n=!1,a=void 0;try{for(var i,o=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(r=(i=o.next()).done);r=!0)t=i.value,this.fnObj[t]=e[t]}catch(e){n=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(n)throw a}}}},{key:"addFnObjArray",value:function(e){var t=!0,r=!1,n=void 0;try{for(var a,i=e[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=a.value;this.addFnObj(o)}}catch(e){r=!0,n=e}finally{try{t||null==i.return||i.return()}finally{if(r)throw n}}}},{key:"getExpFunction",value:function(e){if(e in this.fnObj==!1)return{isEmpty:!0};var t=this.fnObj[e];return console.assert("function"==typeof t),t}}]),e}();t.FnCollection=s;var u=function(){function e(t,r){i(this,e),this.normal_fn_coll=t,this.raw_fn_coll=r,this.rawFnExecutor=n.UserRawFnExecutor,this.normalFnExecutor=a.UserFnExecutor}return l(e,[{key:"getFnExecutorByName",value:function(e){var t=this.raw_fn_coll.getExpFunction(e);if("function"==typeof t)return new this.rawFnExecutor(t);if("function"==typeof(t=this.normal_fn_coll.getExpFunction(e)))return new this.normalFnExecutor(t);throw new Error(" expression function "+e+" not found")}},{key:"getAllFnObj",value:function(){var e={};return Object.assign(e,this.raw_fn_coll.fnObj),Object.assign(e,this.normal_fn_coll.fnObj),e}}]),e}();t.MultiCollExpFn=u},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.UserRawFnExecutor=void 0;var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);this.name="UserRawFn",this.args=[],this.user_function=t}var t,r,a;return t=e,(r=[{key:"solveExpression",value:function(){return this.user_function.apply(this,this.args)}},{key:"push",value:function(e){this.args.push(e)}}])&&n(t.prototype,r),a&&n(t,a),e}();t.UserRawFnExecutor=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UserFnExecutor=void 0;var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var l=n?Object.getOwnPropertyDescriptor(e,o):null;l&&(l.get||l.set)?Object.defineProperty(r,o,l):r[o]=e[o]}r.default=e,t&&t.set(e,r);return r}(r(2));function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l="date",s="string",u="number",c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name="UserFn",this.args=[],this.exp_fn=t,this.expFnParaConfig=this.exp_fn.paraConfig}var t,r,a;return t=e,(r=[{key:"getParaArray",value:function(){var e,t=[],r=self.args.map((function(e){return e.solveExpression()}));if(void 0===this.expFnParaConfig)t=r.map((function(e){return e.toNumber()}));else if(this.expFnParaConfig instanceof Array){for(var n,a=0;a++;a<this.expFnParaConfig.length)e=r[a],n=this.expFnParaConfig[a],t.push(this.convertCellValueType(n,e.cellVTypeName,e));for(;a++;a<self.args.length)t.push(self.args[a])}return t}},{key:"convertCellValueType",value:function(e,t,r){var n;if("object"===i(e))n=e[r.cellVTypeName];else{if("string"!=typeof e)throw Error("para_config has wrong type!");n=e}return n===l?r.toDate():n===u?r.toNumber():n===s?r.toString():r}},{key:"solveExpression",value:function(){var e,t=this.exp_fn;try{e=t.apply(this,this.getParaArray())}catch(r){if("is_blank"===t.name&&void 0!==n.errorObj[r.message])e=0;else{if("iserror"!==t.name||void 0===n.errorObj[r.message])throw r;e=!0}}return e}},{key:"push",value:function(e){this.args.push(e)}}])&&o(t.prototype,r),a&&o(t,a),e}();t.UserFnExecutor=c},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var r={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var l=i?Object.getOwnPropertyDescriptor(e,o):null;l&&(l.get||l.set)?Object.defineProperty(r,o,l):r[o]=e[o]}return r.default=e,t&&t.set(e,r),r}Object.defineProperty(t,"__esModule",{value:!0}),t.fnObjArray=void 0;var o=[i(r(89)),i(r(93)),i(r(50)),i(r(94)),i(r(23)),i(r(32)),i(r(34)),i(r(95)),i(r(33)),i(r(96)),i(r(24)),i(r(49)),i(r(97))];t.fnObjArray=o},function(e,t,r){"use strict";var n=l(r(23)),a=l(r(24)),i=l(r(50)),o=l(r(34));function l(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(t)for(var r in t)e[r]=t[r];return e}t.BETADIST=a.default.BETA.DIST,t.BETAINV=a.default.BETA.INV,t.BINOMDIST=a.default.BINOM.DIST,t.CEILING=t.ISOCEILING=s(n.default.CEILING.MATH,n.default.CEILING),t.CEILINGMATH=n.default.CEILING.MATH,t.CEILINGPRECISE=n.default.CEILING.PRECISE,t.CHIDIST=a.default.CHISQ.DIST,t.CHIDISTRT=a.default.CHISQ.DIST.RT,t.CHIINV=a.default.CHISQ.INV,t.CHIINVRT=a.default.CHISQ.INV.RT,t.CHITEST=a.default.CHISQ.TEST,t.CONFIDENCE=s(a.default.CONFIDENCE.NORM,a.default.CONFIDENCE),t.COVAR=a.default.COVARIANCE.P,t.COVARIANCEP=a.default.COVARIANCE.P,t.COVARIANCES=a.default.COVARIANCE.S,t.CRITBINOM=a.default.BINOM.INV,t.EXPONDIST=a.default.EXPON.DIST,t.ERFCPRECISE=i.default.ERFC.PRECISE,t.ERFPRECISE=i.default.ERF.PRECISE,t.FDIST=a.default.F.DIST,t.FDISTRT=a.default.F.DIST.RT,t.FINVRT=a.default.F.INV.RT,t.FINV=a.default.F.INV,t.FLOORMATH=n.default.FLOORMATH,t.FLOORPRECISE=n.default.FLOORPRACE,t.FTEST=a.default.F.TEST,t.GAMMADIST=a.default.GAMMA.DIST,t.GAMMAINV=a.default.GAMMA.INV,t.GAMMALNPRECISE=a.default.GAMMALN.PRECISE,t.HYPGEOMDIST=a.default.HYPGEOM.DIST,t.LOGINV=a.default.LOGNORM.INV,t.LOGNORMINV=a.default.LOGNORM.INV,t.LOGNORMDIST=a.default.LOGNORM.DIST,t.MODE=s(a.default.MODE.SNGL,a.default.MODE),t.MODEMULT=a.default.MODE.MULT,t.MODESNGL=a.default.MODE.SNGL,t.NEGBINOMDIST=a.default.NEGBINOM.DIST,t.NETWORKDAYSINTL=o.default.NETWORKDAYSINTL,t.NORMDIST=a.default.NORM.DIST,t.NORMINV=a.default.NORM.INV,t.NORMSDIST=a.default.NORM.S.DIST,t.NORMSINV=a.default.NORM.S.INV,t.PERCENTILE=s(a.default.PERCENTILE.EXC,a.default.PERCENTILE),t.PERCENTILEEXC=a.default.PERCENTILE.EXC,t.PERCENTILEINC=a.default.PERCENTILE.INC,t.PERCENTRANK=s(a.default.PERCENTRANK.INC,a.default.PERCENTRANK),t.PERCENTRANKEXC=a.default.PERCENTRANK.EXC,t.PERCENTRANKINC=a.default.PERCENTRANK.INC,t.POISSON=s(a.default.POISSON.DIST,a.default.POISSON),t.POISSONDIST=a.default.POISSON.DIST,t.QUARTILE=s(a.default.QUARTILE.INC,a.default.QUARTILE),t.QUARTILEEXC=a.default.QUARTILE.EXC,t.QUARTILEINC=a.default.QUARTILE.INC,t.RANK=s(a.default.RANK.EQ,a.default.RANK),t.RANKAVG=a.default.RANK.AVG,t.RANKEQ=a.default.RANK.EQ,t.SKEWP=a.default.SKEW.P,t.STDEV=s(a.default.STDEV.S,a.default.STDEV),t.STDEVP=a.default.STDEV.P,t.STDEVS=a.default.STDEV.S,t.TDIST=a.default.T.DIST,t.TDISTRT=a.default.T.DIST.RT,t.TINV=a.default.T.INV,t.TTEST=a.default.T.TEST,t.VARP=a.default.VAR.P,t.VARS=a.default.VAR.S,t.WEIBULL=s(a.default.WEIBULL.DIST,a.default.WEIBULL),t.WEIBULLDIST=a.default.WEIBULL.DIST,t.WORKDAYINTL=o.default.WORKDAYINTL,t.ZTEST=a.default.Z.TEST,t._XLFN=s(n.default.FLOOR.MATH,a.default.COVARIANCE.P,a.default.NORM.INV,a.default.VAR.P)},,function(e,t,r){"use strict";var n="=",a=[">",">=","<","<=","=","<>"],i="operator",o="literal",l=[i,o];function s(e,t){if(-1===l.indexOf(t))throw new Error("Unsupported token type: "+t);return{value:e,type:t}}function u(e){for(var t,r="",l=[],u=0;u<e.length;u++){var c=e[u];0===u&&a.indexOf(c)>=0?l.push(s(c,i)):r+=c}return r.length>0&&l.push(s("string"!=typeof(t=r)?t:(/^\d+(\.\d+)?$/.test(t)&&(t=-1===t.indexOf(".")?parseInt(t,10):parseFloat(t)),t),o)),l.length>0&&l[0].type!==i&&l.unshift(s(n,i)),l}t.TOKEN_TYPE_OPERATOR=i,t.TOKEN_TYPE_LITERAL=o,t.parse=function(e){return u(function(e){for(var t=e.length,r=[],n=0,a="",i="";n<t;){var o=e.charAt(n);switch(o){case">":case"<":case"=":i+=o,a.length>0&&(r.push(a),a="");break;default:i.length>0&&(r.push(i),i=""),a+=o}n++}return a.length>0&&r.push(a),i.length>0&&r.push(i),r}(e))},t.createToken=s,t.compute=function(e){for(var t,r=[],n=0;n<e.length;n++){var a=e[n];switch(a.type){case i:t=a.value;break;case o:r.push(a.value)}}return function(e,t){var r=!1;switch(t){case">":r=e[0]>e[1];break;case">=":r=e[0]>=e[1];break;case"<":r=e[0]<e[1];break;case"<=":r=e[0]<=e[1];break;case"=":r=e[0]===e[1];break;case"<>":r=e[0]!==e[1]}return r}(r,t)}},,function(module,exports,__webpack_require__){"use strict";var _error_config=_interopRequireDefault(__webpack_require__(2)),_statistical=_interopRequireDefault(__webpack_require__(24)),_mathTrig=_interopRequireDefault(__webpack_require__(23)),_utils=_interopRequireDefault(__webpack_require__(13));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function compact(e){if(!e)return e;for(var t=[],r=0;r<e.length;++r)e[r]&&t.push(e[r]);return t}function find_result_idx(database,criteria){for(var valid_arr=[],filter_arr=[],i=0;i<criteria[0].length;i++)filter_arr.push(criteria[0][i]);for(var _i=1;_i<criteria.length;_i++){for(var arr=criteria[_i],valid_str=[],j=0;j<filter_arr.length;j++)null!==arr[j]&&valid_str.push(database[0].indexOf(criteria[0][j])+"-"+arr[j]);valid_arr.push(valid_str)}for(var result_idx=[],_i2=1;_i2<database.length;_i2++)for(var data=database[_i2],_j=0;_j<valid_arr.length;_j++){for(var is_valid=!0,k=0;k<valid_arr[_j].length;k++){var a=data[parseInt(valid_arr[_j][k].split("-")[0])],b=valid_arr[_j][k].split("-")[1];b.indexOf("=")>=0?is_valid=a==b.replace("=",""):eval(a+b)||(is_valid=!1)}is_valid&&result_idx.push(_i2)}return result_idx}function get_values(e,t,r){if("number"==typeof r);else t[0].indexOf(r);for(var n=[],a=0;a<e.length;a++)n.push(t[e[a]][field_idx]);return n}exports.FINDFIELD=function(e,t){for(var r=null,n=0;n<e.length;n++)if(e[n][0]===t){r=n;break}return null==r?_error_config.default.ERROR_VALUE:r},exports.DAVERAGE=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;if("number"==typeof t)for(var n=[],a=1;a<e.length;a++)n.push(a);else find_result_idx(e,r);for(var i=get_values(resultIndexes,e,t),o=0,l=0;l<i.length;l++)o+=i[l];return 0===resultIndexes.length?_error_config.default.ERROR_DIV0:o/i.length},exports.DCOUNT=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.COUNT(n)},exports.DCOUNTA=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.COUNTA(n)},exports.DGET=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=find_result_idx(e,r);return n.length>1?_error_config.default.ERROR_NUM:get_values(n,e,t)[0]},exports.DMAX=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;for(var n=get_values(find_result_idx(e,r),e,t),a=n[0],i=0;i<n.length;i++)n[i]>a&&(a=n[i]);return a},exports.DMIN=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;for(var n=get_values(find_result_idx(e,r),e,t),a=n[0],i=0;i<n.length;i++)n[i]<a&&(a=n[i]);return a},exports.DPRODUCT=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;for(var n=get_values(find_result_idx(e,r),e,t),a=1,i=0;i<n.length;i++)a*=n[i];return a},exports.DSTDEV=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return n=compact(n),_statistical.default.STDEV.S(n)},exports.DSTDEVP=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return n=compact(n),_statistical.default.STDEV.P(n)},exports.DSUM=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _mathTrig.default.SUM(n)},exports.DVAR=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.VAR.S(n)},exports.DVARP=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.VAR.P(n)}},function(e,t,r){"use strict";var n=r(2),a=o(r(13)),i=o(r(33));function o(e){return e&&e.__esModule?e:{default:e}}t.AND=function(){for(var e=a.default.flatten(arguments),t=!0,r=0;r<e.length;r++)e[r]||(t=!1);return t},t.CHOOSE=function(){if(arguments.length<2)return n.errorObj.ERROR_NA;var e=arguments[0];return e<1||e>254?n.errorObj.ERROR_VALUE:arguments.length<e+1?n.errorObj.ERROR_VALUE:arguments[e]},t.FALSE=function(){return!1},t.IF=function(e,t,r){return e?t:r},t.IFERROR=function(e,t){return i.default.ISERROR(e)?t:e},t.IFNA=function(e,t){return e===n.errorObj.ERROR_NA?t:e},t.NOT=function(e){return!e},t.OR=function(){for(var e=a.default.flatten(arguments),t=!1,r=0;r<e.length;r++)e[r]&&(t=!0);return t},t.TRUE=function(){return!0},t.XOR=function(){for(var e=a.default.flatten(arguments),t=0,r=0;r<e.length;r++)e[r]&&t++;return!!(1&Math.floor(Math.abs(t)))},t.SWITCH=function(){var e;if(arguments.length>0){var t=arguments[0],r=arguments.length-1,a=Math.floor(r/2),i=!1,o=r%2==0?null:arguments[arguments.length-1];if(a)for(var l=0;l<a;l++)if(t===arguments[2*l+1]){e=arguments[2*l+2],i=!0;break}!i&&o&&(e=o)}return null==e?n.errorObj.ERROR_NA:e}},function(e,t,r){"use strict";var n=r(2),a=o(r(34)),i=o(r(13));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return e&&e.getTime&&!isNaN(e.getTime())}function s(e,t,r){var n=i.default.parseDate(e),a=i.default.parseDate(t),o=12*a.getFullYear()+a.getMonth()-12*n.getFullYear()-n.getMonth(),l=parseInt(o/(12/r)),s=i.default.Copy(a);s.setMonth(s.getMonth()-12*l/r);var u=i.default.Copy(s);return s.setMonth(s.getMonth()-12/r),{startday:u,endday:s}}function u(e,t,r,n,a){for(var i=0,o=1;o<=r;o++)i+=Math.min(a/n*(e-i),e-t-i);return i+(r-o+1)*Math.min(a/n*(e-i),e-t-i)}t.ACCRINT=function(e,t,r,o,s,u,c){"string"==typeof e&&(e=i.default.parseDate(e));try{e=i.default.ExcelDateToJSDate(e),t=i.default.ExcelDateToJSDate(t),r=i.default.ExcelDateToJSDate(r)}catch(e){return n.errorObj.ERROR_VALUE}return l(e)&&l(t)&&l(r)?o<=0||s<=0?n.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(u)?n.errorObj.ERROR_NUM:-1===[0,1,2,3,4].indexOf(c)?n.errorObj.ERROR_NUM:r<=e?n.errorObj.ERROR_NUM:(c=c||0,(s=s||0)*o*a.default.YEARFRAC(e,r,c)):n.errorObj.ERROR_VALUE},t.ACCRINTM=function(e,t,r,o,l){try{e=i.default.ExcelDateToJSDate(e),t=i.default.ExcelDateToJSDate(t)}catch(e){return n.errorObj.ERROR_VALUE}if(r<=0||o<=0)return n.errorObj.ERROR_NUM;if(l<0||l>4)return n.errorObj.ERROR_NUM;if(t<=e)return n.errorObj.ERROR_NUM;l=l||0;var s=(o=o||0)*r*a.default.YEARFRAC(e,t,l);return isNaN(s)?n.errorObj.ERROR_VALUE:s},t.AMORDEGRC=function(e,t,r,a,i,o,s){return l(issue)&&l(settlement)?o<=0||par<=0?n.errorObj.ERROR_NUM:s<0||s>4?n.errorObj.ERROR_NUM:settlement<=issue?n.errorObj.ERROR_NUM:void 0:n.errorObj.ERROR_VALUE},t.AMORLINC=function(){throw new Error("AMORLINC is not implemented")},t.COUPDAYBS=function(e,t,r,a){return-1===[0,1,2,3,4].indexOf(a)?n.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?n.errorObj.ERROR_NUM:e>=t?n.errorObj.ERROR_NUM:(i.default.parseDate(e)-s(e,t,r).startday)/864e5},t.COUPDAYS=function(e,t,r,a){return-1===[0,1,2,3,4].indexOf(a)?n.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?n.errorObj.ERROR_NUM:e>=t?n.errorObj.ERROR_NUM:[0,2,4].indexOf(a)>=0?360/r:3===a?365/r:1===a?(s(e,t,r).endday-s(e,t,r).startday)/864e5:void 0},t.COUPDAYSNC=function(e,t,r,a){if(-1===[0,1,2,3,4].indexOf(a))return n.errorObj.ERROR_NUM;if(-1===[1,2,4].indexOf(r))return n.errorObj.ERROR_NUM;if(e>=t)return n.errorObj.ERROR_NUM;var o=i.default.parseDate(e);return(s(e,t,r).endday-o)/864e5},t.COUPNCD=function(e,t,r,a){return-1===[0,1,2,3,4].indexOf(a)?n.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?n.errorObj.ERROR_NUM:e>=t?n.errorObj.ERROR_NUM:s(e,t,r).endday},t.COUPNUM=function(e,t,r,a){if(-1===[0,1,2,3,4].indexOf(a))return n.errorObj.ERROR_NUM;if(-1===[1,2,4].indexOf(r))return n.errorObj.ERROR_NUM;if(e>=t)return n.errorObj.ERROR_NUM;var o=i.default.parseDate(e),l=i.default.parseDate(t),s=12*l.getFullYear()+l.getMonth()-12*o.getFullYear()-o.getMonth();return parseInt(s/(12/r))+1},t.COUPPCD=function(e,t,r,a){return-1===[0,1,2,3,4].indexOf(a)?n.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?n.errorObj.ERROR_NUM:e>=t?n.errorObj.ERROR_NUM:s(e,t,r).startday},t.CUMIPMT=function(e,r,a,o,l,s){if(e=i.default.parseNumber(e),r=i.default.parseNumber(r),a=i.default.parseNumber(a),i.default.anyIsError(e,r,a))return n.errorObj.ERROR_VALUE;if(e<=0||r<=0||a<=0)return n.errorObj.ERROR_NUM;if(o<1||l<1||o>l)return n.errorObj.ERROR_NUM;if(0!==s&&1!==s)return n.errorObj.ERROR_NUM;var u=t.PMT(e,r,a,0,s),c=0;1===o&&0===s&&(c=-a,o++);for(var d=o;d<=l;d++)c+=1===s?t.FV(e,d-2,u,a,1)-u:t.FV(e,d-1,u,a,0);return c*=e},t.CUMPRINC=function(e,r,a,o,l,s){if(e=i.default.parseNumber(e),r=i.default.parseNumber(r),a=i.default.parseNumber(a),i.default.anyIsError(e,r,a))return n.errorObj.ERROR_VALUE;if(e<=0||r<=0||a<=0)return n.errorObj.ERROR_NUM;if(o<1||l<1||o>l)return n.errorObj.ERROR_NUM;if(0!==s&&1!==s)return n.errorObj.ERROR_NUM;var u=t.PMT(e,r,a,0,s),c=0;1===o&&(c=0===s?u+a*e:u,o++);for(var d=o;d<=l;d++)c+=s>0?u-(t.FV(e,d-2,u,a,1)-u)*e:u-t.FV(e,d-1,u,a,0)*e;return c},t.DB=function(e,t,r,a,o){if(o=void 0===o?12:o,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),i.default.anyIsError(e,t,r,a,o))return n.errorObj.ERROR_VALUE;if(e<0||t<0||r<0||a<0)return n.errorObj.ERROR_NUM;if(-1===[1,2,3,4,5,6,7,8,9,10,11,12].indexOf(o))return n.errorObj.ERROR_NUM;if(a>r)return n.errorObj.ERROR_NUM;if(t>=e)return 0;for(var l=(1-Math.pow(t/e,1/r)).toFixed(3),s=e*l*o/12,u=s,c=0,d=a===r?r-1:a,f=2;f<=d;f++)u+=c=(e-u)*l;return 1===a?s:a===r?(e-u)*l:c},t.DDB=function(e,t,r,a,o){if(o=void 0===o?2:o,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),i.default.anyIsError(e,t,r,a,o))return n.errorObj.ERROR_VALUE;if(e<0||t<0||r<0||a<0||o<=0)return n.errorObj.ERROR_NUM;if(a>r)return n.errorObj.ERROR_NUM;if(t>=e)return 0;for(var l=0,s=0,u=1;u<=a;u++)l+=s=Math.min(o/r*(e-l),e-t-l);return s},t.DISC=function(e,t,r,i,o){if(r<=0||i<=0)return n.errorObj.ERROR_NUM;if(o<0||o>4)return n.errorObj.ERROR_NUM;if(e>=t)return n.errorObj.ERROR_NUM;return(i-r)/r*360/Math.abs(a.default.DAYS(t,e,!1))},t.DOLLARDE=function(e,t){if(e=i.default.parseNumber(e),t=i.default.parseNumber(t),i.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;if(t<0)return n.errorObj.ERROR_NUM;if(t>=0&&t<1)return n.errorObj.ERROR_DIV0;t=parseInt(t,10);var r=parseInt(e,10);r+=e%1*Math.pow(10,Math.ceil(Math.log(t)/Math.LN10))/t;var a=Math.pow(10,Math.ceil(Math.log(t)/Math.LN2)+1);return r=Math.round(r*a)/a},t.DOLLARFR=function(e,t){if(e=i.default.parseNumber(e),t=i.default.parseNumber(t),i.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;if(t<0)return n.errorObj.ERROR_NUM;if(t>=0&&t<1)return n.errorObj.ERROR_DIV0;t=parseInt(t,10);var r=parseInt(e,10);return r+=e%1*Math.pow(10,-Math.ceil(Math.log(t)/Math.LN10))*t},t.DURATION=function(e,t,r,a,o,s){return e=i.default.parseDate(e),l(t=i.default.parseDate(t))&&l(e)?s<0||s>4?n.errorObj.ERROR_NUM:e>=t?n.errorObj.ERROR_NUM:void 0:n.errorObj.ERROR_VALUE},t.EFFECT=function(e,t){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),i.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<=0||t<1?n.errorObj.ERROR_NUM:(t=parseInt(t,10),Math.pow(1+e/t,t)-1)},t.FV=function(e,t,r,a,o){if(a=a||0,o=o||0,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),i.default.anyIsError(e,t,r,a,o))return n.errorObj.ERROR_VALUE;var l;if(0===e)l=a+r*t;else{var s=Math.pow(1+e,t);l=1===o?a*s+r*(1+e)*(s-1)/e:a*s+r*(s-1)/e}return-l},t.FVSCHEDULE=function(e,t){if(e=i.default.parseNumber(e),"string"==typeof t&&(t=i.default.strToMatrix(t)),t=i.default.parseNumberArray(i.default.flatten(t)),i.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;for(var r=t.length,a=e,o=0;o<r;o++)a*=1+t[o];return a},t.INTRATE=function(e,t,r,a,i){if(r<=0||a<=0)return n.errorObj.ERROR_VALUE;if(i<0||i>4)return n.errorObj.ERROR_NUM;if(e>=t)return n.errorObj.ERROR_NUM;return(a-r)/r*.5},t.IPMT=function(e,r,a,o,l,s){if(l=l||0,s=s||0,e=i.default.parseNumber(e),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),l=i.default.parseNumber(l),s=i.default.parseNumber(s),i.default.anyIsError(e,r,a,o,l,s))return n.errorObj.ERROR_VALUE;var u=t.PMT(e,a,o,l,s);return(1===r?1===s?0:-o:1===s?t.FV(e,r-2,u,o,1)-u:t.FV(e,r-1,u,o,0))*e},t.IRR=function(e,t){if(t=t||0,e=i.default.parseNumberArray(i.default.flatten(e)),t=i.default.parseNumber(t),i.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;for(var r=function(e,t,r){for(var n=r+1,a=e[0],i=1;i<e.length;i++)a+=e[i]/Math.pow(n,(t[i]-t[0])/365);return a},a=function(e,t,r){for(var n=r+1,a=0,i=1;i<e.length;i++){var o=(t[i]-t[0])/365;a-=o*e[i]/Math.pow(n,o+1)}return a},o=[],l=!1,s=!1,u=0;u<e.length;u++)o[u]=0===u?0:o[u-1]+365,e[u]>0&&(l=!0),e[u]<0&&(s=!0);if(!l||!s)return n.errorObj.ERROR_NUM;var c,d,f,m=t=void 0===t?.1:t,h=!0;do{c=m-(f=r(e,o,m))/a(e,o,m),d=Math.abs(c-m),m=c,h=d>1e-10&&Math.abs(f)>1e-10}while(h);return m},t.ISPMT=function(e,t,r,a){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),i.default.anyIsError(e,t,r,a)?n.errorObj.ERROR_VALUE:a*e*(t/r-1)},t.MDURATION=function(e,t,r,a,i,o){return r<0||a<0?n.errorObj.ERROR_NUM:o<0||o>4?n.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(i)?n.errorObj.ERROR_NUM:void 0},t.MIRR=function(e,r,a){if(e=i.default.parseNumberArray(i.default.flatten(e)),r=i.default.parseNumber(r),a=i.default.parseNumber(a),i.default.anyIsError(e,r,a))return n.errorObj.ERROR_VALUE;for(var o=e.length,l=[],s=[],u=0;u<o;u++)e[u]<0?l.push(e[u]):s.push(e[u]);var c=-t.NPV(a,s)*Math.pow(1+a,o-1),d=t.NPV(r,l)*(1+r);return Math.pow(c/d,1/(o-1))-1},t.NOMINAL=function(e,t){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),i.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<=0||t<1?n.errorObj.ERROR_NUM:(t=parseInt(t,10),(Math.pow(e+1,1/t)-1)*t)},t.NPER=function(e,t,r,a,o){if(o=void 0===o?0:o,a=void 0===a?0:a,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),i.default.anyIsError(e,t,r,a,o))return n.errorObj.ERROR_VALUE;var l=t*(1+e*o)-a*e,s=r*e+t*(1+e*o);return Math.log(l/s)/Math.log(1+e)},t.NPV=function(){var e=i.default.parseNumberArray(i.default.flatten(arguments));if(e instanceof Error)return e;for(var t=e[0],r=0,n=1;n<e.length;n++)r+=e[n]/Math.pow(1+t,n);return r},t.ODDFPRICE=function(){throw new Error("ODDFPRICE is not implemented")},t.ODDFYIELD=function(){throw new Error("ODDFYIELD is not implemented")},t.ODDLPRICE=function(){throw new Error("ODDLPRICE is not implemented")},t.ODDLYIELD=function(){throw new Error("ODDLYIELD is not implemented")},t.PDURATION=function(e,t,r){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r)?n.errorObj.ERROR_VALUE:e<=0?n.errorObj.ERROR_NUM:(Math.log(r)-Math.log(t))/Math.log(1+e)},t.PMT=function(e,t,r,a,o){if(a=a||0,o=o||0,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),i.default.anyIsError(e,t,r,a,o))return n.errorObj.ERROR_VALUE;var l;if(0===e)l=(r+a)/t;else{var s=Math.pow(1+e,t);l=1===o?(a*e/(s-1)+r*e/(1-1/s))/(1+e):a*e/(s-1)+r*e/(1-1/s)}return-l},t.PPMT=function(e,r,a,o,l,s){return l=l||0,s=s||0,e=i.default.parseNumber(e),a=i.default.parseNumber(a),o=i.default.parseNumber(o),l=i.default.parseNumber(l),s=i.default.parseNumber(s),i.default.anyIsError(e,a,o,l,s)?n.errorObj.ERROR_VALUE:t.PMT(e,a,o,l,s)-t.IPMT(e,r,a,o,l,s)},t.PRICE=function(e,t,r,a,o,l,s){var u=i.default.parseDate(e),c=i.default.parseDate(t);if(i.default.anyIsError(u,c))return n.errorObj.ERROR_VALUE;if(s<0||s>4)return n.errorObj.ERROR_NA;if(u>=c)return n.errorObj.ERROR_NA;var d=12*c.getFullYear()+c.getMonth()-12*u.getFullYear()-u.getMonth(),f=parseInt(d/(12/l)),m=i.default.Copy(c);m.setMonth(m.getMonth()-12*f/l);var h=i.default.Copy(m);h.setMonth(h.getMonth()-12/l);var v=(m-u)/864e5,p=(m-h)/864e5,g=(u-h)/864e5;if(f>1){for(var y=o/(1+a/l^f-1+v/p)-100*r*g/(l*p),b=100*r/(l*(1+a/l^v/p)),E=2;E<=f;E++)b+=100*r/(l*(1+a/l^E-1+v/p));return y+b}return 1==f?(100*r/l+o)/(a*(p-g)/l/p+1)-100*r*g/l/p:void 0},t.PRICEDISC=function(e,t,r,o,l){return e=i.default.parseDate(e),t=i.default.parseDate(t),i.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l<0||l>4?n.errorObj.ERROR_NA:e>=t?n.errorObj.ERROR_NA:o-r*o*Math.abs(a.default.DAYS(e,t,!1))/360},t.PRICEMAT=function(e,t,r,o,l,s){if(e=i.default.parseDate(e),t=i.default.parseDate(t),r=i.default.parseDate(r),i.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;if(s<0||s>4)return n.errorObj.ERROR_NA;if(e>=t)return n.errorObj.ERROR_NA;var u=Math.abs(a.default.DAYS(e,t,!1));return(100+Math.abs(a.default.DAYS(t,r,!1))/360*o*100)/(1+u/360*l)-Math.abs(a.default.DAYS(r,e,!1))/360*o*100},t.PV=function(e,t,r,a,o){return a=a||0,o=o||0,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),i.default.anyIsError(e,t,r,a,o)?n.errorObj.ERROR_VALUE:0===e?-r*t-a:((1-Math.pow(1+e,t))/e*r*(1+e*o)-a)/Math.pow(1+e,t)},t.RATE=function(e,t,r,a,o,l){if(l=void 0===l?.01:l,a=void 0===a?0:a,o=void 0===o?0:o,e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),o=i.default.parseNumber(o),l=i.default.parseNumber(l),i.default.anyIsError(e,t,r,a,o,l))return n.errorObj.ERROR_VALUE;for(var s=0,u=!1,c=l;s<100&&!u;){var d=Math.pow(c+1,e),f=Math.pow(c+1,e-1),m=c-(a+d*r+t*(d-1)*(c*o+1)/c)/(e*f*r-t*(d-1)*(c*o+1)/Math.pow(c,2)+(e*t*f*(c*o+1)/c+t*(d-1)*o/c));Math.abs(m-c)<1e-6&&(u=!0),s++,c=m}return u?c:Number.NaN+c},t.RECEIVED=function(e,t,r,o,l){return e=i.default.parseDate(e),t=i.default.parseDate(t),i.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:r<=0||o<=0?n.errorObj.ERROR_NA:l<0||l>4?n.errorObj.ERROR_NA:e>=t?n.errorObj.ERROR_NA:r/(1-o*Math.abs(a.default.DAYS(e,t,!1))/360)},t.RRI=function(e,t,r){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r)?n.errorObj.ERROR_VALUE:0===e||0===t?n.errorObj.ERROR_NUM:Math.pow(r/t,1/e)-1},t.SLN=function(e,t,r){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r)?n.errorObj.ERROR_VALUE:0===r?n.errorObj.ERROR_NUM:(e-t)/r},t.SYD=function(e,t,r,a){return e=i.default.parseNumber(e),t=i.default.parseNumber(t),r=i.default.parseNumber(r),a=i.default.parseNumber(a),i.default.anyIsError(e,t,r,a)?n.errorObj.ERROR_VALUE:0===r?n.errorObj.ERROR_NUM:a<1||a>r?n.errorObj.ERROR_NUM:(e-t)*(r-(a=parseInt(a,10))+1)*2/(r*(r+1))},t.TBILLEQ=function(e,t,r){return e=i.default.parseDate(e),t=i.default.parseDate(t),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r)?n.errorObj.ERROR_VALUE:r<=0?n.errorObj.ERROR_NUM:e>t?n.errorObj.ERROR_NUM:t-e>31536e6?n.errorObj.ERROR_NUM:365*r/(360-r*a.default.DAYS360(e,t,!1))},t.TBILLPRICE=function(e,t,r){return e=i.default.parseDate(e),t=i.default.parseDate(t),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r)?n.errorObj.ERROR_VALUE:r<=0?n.errorObj.ERROR_NUM:e>t?n.errorObj.ERROR_NUM:t-e>31536e6?n.errorObj.ERROR_NUM:100*(1-r*a.default.DAYS360(e,t,!1)/360)},t.TBILLYIELD=function(e,t,r){return e=i.default.parseDate(e),t=i.default.parseDate(t),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r)?n.errorObj.ERROR_VALUE:r<=0?n.errorObj.ERROR_NUM:e>t?n.errorObj.ERROR_NUM:t-e>31536e6?n.errorObj.ERROR_NUM:360*(100-r)/(r*a.default.DAYS360(e,t,!1))},t.get_total=u,t.VDB=function(e,t,r,a,o,l,s){var c,d=i.default.parseNumber(e),f=i.default.parseNumber(t),m=i.default.parseNumber(r),h=i.default.parseNumber(a),v=i.default.parseNumber(o);return c=i.default.parseNumber(l),i.default.anyIsError(d,f,m,h,v,c)?n.errorObj.ERROR_VALUE:d<0||f<0||m<0||h<0||c<=0?n.errorObj.ERROR_NUM:h>m?n.errorObj.ERROR_NUM:f>=d?0:u(d,f,v,m,c)-u(d,f,h,m,c)},t.XIRR=function(e,t,r){if(e=i.default.parseNumberArray(i.default.flatten(e)),t=i.default.parseDateArray(i.default.flatten(t)),r=i.default.parseNumber(r),i.default.anyIsError(e,t,r))return n.errorObj.ERROR_VALUE;for(var o=function(e,t,r){for(var n=r+1,i=e[0],o=1;o<e.length;o++)i+=e[o]/Math.pow(n,a.default.DAYS(t[o],t[0])/365);return i},l=function(e,t,r){for(var n=r+1,i=0,o=1;o<e.length;o++){var l=a.default.DAYS(t[o],t[0])/365;i-=l*e[o]/Math.pow(n,l+1)}return i},s=!1,u=!1,c=0;c<e.length;c++)e[c]>0&&(s=!0),e[c]<0&&(u=!0);if(!s||!u)return n.errorObj.ERROR_NUM;var d,f,m,h=r=r||.1,v=!0;do{d=h-(m=o(e,t,h))/l(e,t,h),f=Math.abs(d-h),h=d,v=f>1e-10&&Math.abs(m)>1e-10}while(v);return h},t.XNPV=function(e,t,r){if(e=i.default.parseNumber(e),t=i.default.parseNumberArray(i.default.flatten(t)),r=i.default.parseDateArray(i.default.flatten(r)),i.default.anyIsError(e,t,r))return n.errorObj.ERROR_VALUE;for(var o=0,l=0;l<t.length;l++)o+=t[l]/Math.pow(1+e,a.default.DAYS(r[l],r[0])/365);return o},t.YIELD=function(e,t,r,o,l,s,u){if(e=i.default.parseDate(e),t=i.default.parseDate(t),i.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;if(r<=0)return n.errorObj.ERROR_NUM;if(o<=0)return n.errorObj.ERROR_NUM;if(l<=0)return n.errorObj.ERROR_NUM;if(e>=t)return n.errorObj.ERROR_NUM;Math.abs(a.default.DAYS(e,t,!1))},t.YIELDDISC=function(e,t,r,a,o){var l=i.default.parseDate(e),s=i.default.parseDate(t);if(i.default.anyIsError(l,s))return n.errorObj.ERROR_VALUE;if(r<=0)return n.errorObj.ERROR_NUM;if(a<=0)return n.errorObj.ERROR_NUM;if(l>=s)return n.errorObj.ERROR_NUM;if(-1===[0,1,2,3,4].indexOf(o))return n.errorObj.ERROR_NUM;if(1===o){var u=l.getFullYear();return 0!=u%4||u%100==0&&u%400!=0?(a-r)/r/(s-l)*365*864e5:(a-r)/r/(s-l)*366*864e5}return 2===o?(a-r)/r/(s-l)*360*864e5:3===o?(a-r)/r/(s-l)*365*864e5:0===o||4===o?(a-r)/r/(30*(12*s.getFullYear()+s.getMonth()-12*l.getFullYear()-l.getMonth()-1)+30-l.getDay()+s.getDay())*360:void 0},t.YIELDMAT=function(){throw new Error("YIELDMAT is not implemented")},t.FACTORIAL=function(e){for(var t=1,r=e;r>=1;r--)t*=r;return t}},function(e,t,r){"use strict";var n,a=r(2),i=(n=r(13))&&n.__esModule?n:{default:n};function o(e,t){for(var r,n,i=0;i<e.length;i++){if(e[i]===t)return i+1;e[i]<t&&(n?e[i]>n&&(r=i+1,n=e[i]):(r=i+1,n=e[i]))}return r||a.errorObj.ERROR_NA}function l(e,t){for(var r=0;r<e.length;r++)if(t=t.replace(/\?/g,"."),Array.isArray(e[r])){if(1===e[r].length&&"string"==typeof e[r][0]&&e[r][0].toLowerCase()===t.toLowerCase())return r+1}else if("string"==typeof e[r]&&e[r].toLowerCase()===t.toLowerCase())return r+1;return a.errorObj.ERROR_NA}function s(e,t){for(var r=0;r<e.length;r++)if(Array.isArray(e[r])){if(1===e[r].length&&e[r][0]===t)return r+1}else if(e[r]===t)return r+1;return a.errorObj.ERROR_NA}function u(e,t){for(var r,n,i=0;i<e.length;i++){if(e[i]===t)return i+1;e[i]>t&&(n?e[i]<n&&(r=i+1,n=e[i]):(r=i+1,n=e[i]))}return r||a.errorObj.ERROR_NA}t.MATCH=function(e,t,r){if(Array.isArray(t)&&1===t.length&&Array.isArray(t[0])&&(t=t[0]),!e&&!t)return a.errorObj.ERROR_NA;if(2===arguments.length&&(r=1),!(t instanceof Array))return a.errorObj.ERROR_NA;if(0===r)return"string"==typeof e?l(t,e):s(t,e);if(1===r)return o(t,e);if(-1===r){for(var n=t[0][0],i=1;i<t.length;i++)if(t[i][0]>n)return a.errorObj.ERROR_NA;return u(t,e)}return a.errorObj.ERROR_NA},t.VLOOKUP=function(e,t,r,n){if("string"==typeof n&&"FALSE"!=n&&"TRUE"!=n)return a.errorObj.ERROR_VALUE;n="FALSE"!=n;for(var i=0;i<t.length;i++)if(t[i][0]==e)return t[i][r-1];return a.errorObj.ERROR_NA},t.HLOOKUP=function(e,t,r,n){if("TRUE"==n&&(n=!0),"FALSE"==n&&(n=!1),"string"==typeof t&&t.indexOf("{")>=0&&(t=i.default.strToMatrix(t)),void 0===e||t[0].indexOf(e)<0)return a.errorObj.ERROR_NA;r=r||0;for(var o=t[0],l=0;l<o.length;l++)if(n&&o[l]===e||-1!==o[l].toString().toLowerCase().indexOf(e.toString().toLowerCase()))return r<t.length+1?t[r-1][l]:t[0][l];return a.errorObj.ERROR_NA}},function(e,t,r){"use strict";var n=r(2);function a(e,t,r){this.name=e,this.type=t,this.url=r}t.PQUERY=function(){if(5!==arguments.length)return n.errorObj.ERROR_ERROR;if(arguments[0].length!==arguments[1].length)return n.errorObj.ERROR_ERROR;if(arguments[1].length!==arguments[3].length)return n.errorObj.ERROR_ERROR;for(var e=[],t=arguments[4],r=0;r<arguments[3].length;r++)arguments[3][r]=parseFloat(arguments[3][r]),isNaN(arguments[3][r])||e.push({number:r,value:Math.abs(arguments[3][r]-t)});e=e.sort((function(e,t){var r=e.value,n=t.value;return r<n?-1:r>n?1:0}));for(var a=[],i=1,o=0;o<e.length;o++){var l=e[o],s=l.number,u=l.value,c=arguments[0][s][0],d=arguments[1][s][0],f=arguments[3][s];d===arguments[2]&&(a.push({number:i,name:c,city:d,area:f,value:u}),i+=1)}return"*悬浮查看*!"+JSON.stringify(a)},t.HYPERLINK=function(){if(console.log(arguments),!arguments||!arguments[0]||!arguments[1])return n.errorObj.ERROR_NA;var e=arguments[0];e="http://"==e.substr(0,7).toLowerCase()||"https://"==e.substr(0,8).toLowerCase()?e:"http://"+e;var t={text:arguments[1],url:e};return"*HYPERLINK*!"+JSON.stringify(t)+" "};!function(e){e.push(new a("合肥",0,"https://hf.lianjia.com/ditu")),e.push(new a("安庆",0,"https://aq.lianjia.com/ditu")),e.push(new a("滁州",0,"https://cz.fang.lianjia.com/ditu/")),e.push(new a("马鞍山",0,"https://mas.lianjia.com/ditu")),e.push(new a("北京",0,"https://bj.lianjia.com/ditu")),e.push(new a("重庆",0,"https://cq.lianjia.com/ditu")),e.push(new a("福州",0,"https://fz.lianjia.com/ditu")),e.push(new a("泉州",0,"https://quanzhou.lianjia.com/ditu")),e.push(new a("厦门",0,"https://xm.lianjia.com/ditu")),e.push(new a("漳州",0,"https://zhangzhou.lianjia.com/ditu")),e.push(new a("东莞",0,"https://dg.lianjia.com/ditu")),e.push(new a("佛山",0,"https://fs.lianjia.com/ditu")),e.push(new a("广州",0,"https://gz.lianjia.com/ditu")),e.push(new a("惠州",0,"https://hui.lianjia.com/ditu")),e.push(new a("江门",0,"https://jiangmen.lianjia.com/ditu")),e.push(new a("清远",0,"https://qy.lianjia.com/ditu")),e.push(new a("深圳",0,"https://sz.lianjia.com/ditu")),e.push(new a("珠海",0,"https://zh.lianjia.com/ditu")),e.push(new a("湛江",0,"https://zhanjiang.lianjia.com/ditu")),e.push(new a("中山",0,"https://zs.lianjia.com/ditu")),e.push(new a("贵阳",0,"https://gy.lianjia.com/ditu")),e.push(new a("北海",0,"https://bh.lianjia.com/ditu")),e.push(new a("防城港",0,"https://fcg.lianjia.com/ditu")),e.push(new a("桂林",0,"https://gl.lianjia.com/ditu")),e.push(new a("柳州",0,"https://liuzhou.lianjia.com/ditu")),e.push(new a("南宁",0,"https://nn.lianjia.com/ditu")),e.push(new a("兰州",0,"https://lz.lianjia.com/ditu")),e.push(new a("鄂州",0,"https://ez.lianjia.com/ditu")),e.push(new a("黄石",0,"https://huangshi.lianjia.com/ditu")),e.push(new a("武汉",0,"https://wh.lianjia.com/ditu")),e.push(new a("襄阳",0,"https://xy.lianjia.com/ditu")),e.push(new a("宜昌",0,"https://yichang.lianjia.com/ditu")),e.push(new a("长沙",0,"https://cs.lianjia.com/ditu")),e.push(new a("常德",0,"https://changde.lianjia.com/ditu")),e.push(new a("岳阳",0,"https://yy.lianjia.com/ditu")),e.push(new a("株洲",0,"https://zhuzhou.lianjia.com/ditu")),e.push(new a("保定",0,"https://bd.lianjia.com/ditu")),e.push(new a("廊坊",0,"https://lf.lianjia.com/ditu")),e.push(new a("秦皇岛",0,"https://qhd.fang.lianjia.com/ditu")),e.push(new a("石家庄",0,"https://sjz.lianjia.com/ditu")),e.push(new a("唐山",0,"https://ts.lianjia.com/ditu")),e.push(new a("张家口",0,"https://zjk.lianjia.com/ditu")),e.push(new a("保亭",0,"https://bt.fang.lianjia.com/ditu")),e.push(new a("澄迈",0,"https://cm.fang.lianjia.com/ditu")),e.push(new a("儋州",0,"https://dz.fang.lianjia.com/ditu")),e.push(new a("海口",0,"https://hk.lianjia.com/ditu")),e.push(new a("临高",0,"https://lg.fang.lianjia.com/ditu")),e.push(new a("乐东",0,"https://ld.fang.lianjia.com/ditu")),e.push(new a("陵水",0,"https://ls.fang.lianjia.com/ditu")),e.push(new a("琼海",0,"https://qh.fang.lianjia.com/ditu")),e.push(new a("三亚",0,"https://san.lianjia.com/ditu")),e.push(new a("五指山",0,"https://wzs.fang.lianjia.com/ditu")),e.push(new a("文昌",0,"https://wc.fang.lianjia.com/ditu")),e.push(new a("万宁",0,"https://wn.fang.lianjia.com/ditu")),e.push(new a("开封",0,"https://kf.lianjia.com/ditu")),e.push(new a("洛阳",0,"https://luoyang.lianjia.com/ditu")),e.push(new a("新乡",0,"https://xinxiang.lianjia.com/ditu")),e.push(new a("许昌",0,"https://xc.lianjia.com/ditu")),e.push(new a("郑州",0,"https://zz.lianjia.com/ditu")),e.push(new a("哈尔滨",0,"https://kf.lianjia.com/ditu")),e.push(new a("常州",0,"https://changzhou.lianjia.com/ditu")),e.push(new a("淮安",0,"https://ha.lianjia.com/ditu")),e.push(new a("昆山",0,"https://ks.lianjia.com/ditu")),e.push(new a("南京",0,"https://nj.lianjia.com/ditu/")),e.push(new a("南通",0,"https://nt.lianjia.com/ditu")),e.push(new a("苏州",0,"https://su.lianjia.com/ditu")),e.push(new a("无锡",0,"https://wx.lianjia.com/ditu")),e.push(new a("徐州",0,"https://xz.lianjia.com/ditu")),e.push(new a("盐城",0,"https://yc.lianjia.com/ditu")),e.push(new a("镇江",0,"https://zj.lianjia.com/ditu")),e.push(new a("长春",0,"https://cc.lianjia.com/ditu/")),e.push(new a("吉林",0,"https://jl.lianjia.com/ditu")),e.push(new a("赣州",0,"https://ganzhou.lianjia.com/ditu")),e.push(new a("九江",0,"https://jiujiang.lianjia.com/ditu")),e.push(new a("吉安",0,"https://jian.lianjia.com/ditu")),e.push(new a("南昌",0,"https://nc.lianjia.com/ditu")),e.push(new a("上饶",0,"https://sr.lianjia.com/ditu")),e.push(new a("大连",0,"https://dl.lianjia.com/ditu")),e.push(new a("丹东",0,"https://dd.lianjia.com/ditu")),e.push(new a("沈阳",0,"https://sy.lianjia.com/ditu")),e.push(new a("呼和浩特",0,"https://hhht.lianjia.com/ditu")),e.push(new a("银川",0,"https://yinchuan.lianjia.com/ditu")),e.push(new a("银川",0,"https://yinchuan.lianjia.com/ditu")),e.push(new a("上海",0,"https://sh.lianjia.com/ditu")),e.push(new a("成都",0,"https://cd.lianjia.com/ditu")),e.push(new a("德阳",0,"https://dy.fang.lianjia.com/ditu")),e.push(new a("达州",0,"https://dazhou.lianjia.com/ditu")),e.push(new a("乐山",0,"https://leshan.fang.lianjia.com/ditu")),e.push(new a("凉山",0,"https://liangshan.lianjia.com/ditu")),e.push(new a("绵阳",0,"https://mianyang.lianjia.com/ditu")),e.push(new a("眉山",0,"https://ms.fang.lianjia.com/ditu")),e.push(new a("南充",0,"https://nanchong.lianjia.com/ditu")),e.push(new a("济南",0,"https://jn.lianjia.com/ditu")),e.push(new a("临沂",0,"https://linyi.lianjia.com/ditu")),e.push(new a("青岛",0,"https://qd.lianjia.com/ditu")),e.push(new a("潍坊",0,"https://wf.lianjia.com/ditu")),e.push(new a("威海",0,"https://weihai.lianjia.com/ditu")),e.push(new a("烟台",0,"https://yt.lianjia.com/ditu")),e.push(new a("淄博",0,"https://zb.lianjia.com/ditu")),e.push(new a("宝鸡",0,"https://baoji.lianjia.com/ditu")),e.push(new a("汉中",0,"https://hanzhong.lianjia.com/ditu")),e.push(new a("西安",0,"https://xa.lianjia.com/ditu")),e.push(new a("咸阳",0,"https://xianyang.lianjia.com/ditu")),e.push(new a("晋中",0,"https://jz.fang.lianjia.com/ditu")),e.push(new a("太原",0,"https://ty.lianjia.com/ditu")),e.push(new a("天津",0,"https://tj.lianjia.com/ditu")),e.push(new a("大理",0,"https://dali.lianjia.com/ditu")),e.push(new a("昆明",0,"https://km.lianjia.com/ditu")),e.push(new a("西双版纳",0,"https://xsbn.fang.lianjia.com/ditu")),e.push(new a("杭州",0,"https://hz.lianjia.com/ditu")),e.push(new a("湖州",0,"https://huzhou.lianjia.com/ditu")),e.push(new a("嘉兴",0,"https://jx.lianjia.com/ditu")),e.push(new a("金华",0,"https://jh.lianjia.com/ditu")),e.push(new a("宁波",0,"https://nb.lianjia.com/ditu")),e.push(new a("绍兴",0,"https://sx.lianjia.com/ditu")),e.push(new a("台州",0,"https://taizhou.lianjia.com/ditu")),e.push(new a("温州",0,"https://wz.lianjia.comditu"))}([]);!function(e){e.push(new a("北京",0,"https://bj.5i5j.com/map")),e.push(new a("杭州",0,"https://hz.5i5j.com/map")),e.push(new a("青岛",0,"https://qd.5i5j.com/map")),e.push(new a("天津",0,"https://tj.5i5j.com/map")),e.push(new a("太原",0,"https://zz.5i5j.com/map")),e.push(new a("郑州",0,"https://zz.5i5j.com/map")),e.push(new a("成都",0,"https://cd.5i5j.com/map")),e.push(new a("长沙",0,"https://cs.5i5j.com/map")),e.push(new a("南昌",0,"https://nc.5i5j.com/map")),e.push(new a("南京",0,"https://nj.5i5j.com/map")),e.push(new a("南宁",0,"https://nn.5i5j.com/map")),e.push(new a("上海",0,"https://sh.5i5j.com/map")),e.push(new a("苏州",0,"https://sz.5i5j.com/map")),e.push(new a("武汉",0,"https://wh.5i5j.com/map")),e.push(new a("无锡",0,"https://wx.5i5j.com/map"))}([]);!function(e){e.push(new a("全国",0,"https://www1.fang.com"))}([])},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.raw_offset=function(e,t,r,l,s){if(l=(l||new a.RawValue(1)).solveExpression(),s=(s||new a.RawValue(1)).solveExpression(),1===e.args.length&&"RefValue"===e.args[0].name){var u=e.args[0],c=u.getRefCalcCell(),d=(0,n.col_str_2_int)(c.cell_name)+r.solveExpression(),f=(0,n.int_2_col_str)(d),m=+c.cell_name.replace(/^[A-Z]+/g,"")+t.solveExpression(),h=f+m;if(1===l&&1===s)return new o.RefValue(h,u.cellFormulaProxy).solveExpression();var v=(0,n.int_2_col_str)(d+s-1)+(m+l-1),p=c.sheet_name+"!"+h+":"+v;return new i.Range(p,u.cellFormulaProxy).solveExpression()}},t.iferror=function(e,t){try{var r=e.solveExpression();return"number"!=typeof r||!isNaN(r)&&r!==1/0&&r!==-1/0?r:t.solveExpression()}catch(e){return t.solveExpression()}},t._if=function(e,t,r){return e.solveExpression()?t.solveExpression():r.solveExpression()},t.and=function(){for(var e=0;e<arguments.length;e++)if(!arguments[e].solveExpression())return!1;return!0};var n=r(25),a=r(26),i=r(35),o=r(52)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleExpressionBuilder=void 0;var n=r(11),a=r(2),i=r(20);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}var c=function(){function e(t){l(this,e),this.parseArray=[m],this.rootExp=new f,this.calcCell=t}return u(e,[{key:"parseFormula",value:function(){if(""===this.calcCell.formulaString)return new f;this.rootExp=new f(this.calcCell.formulaString,this.parseArray),this.rootExp.parseExpression()}}]),e}();t.SimpleExpressionBuilder=c;var d=function(){function e(){l(this,e)}return u(e,[{key:"solveNode",value:function(){return new i.CellVEmpty}}]),e}(),f=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",r=arguments.length>1?arguments[1]:void 0;l(this,e),this.expStatus=n.FORMULA_STATUS.created,this.strToParse=t,this.parserArray=r,this.errorMsg="",this.astNode=new d,this.fnParamArray=[],this.expSolution=a.ERROR_NON_SOLVED}return u(e,[{key:"parseExpression",value:function(){var e,t=!0,r=!1,n=void 0;try{for(var a,i=this.parserArray[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){if(!1===(e=new(0,a.value)(this.strToParse).parseString()).isEmpty())return e}}catch(e){r=!0,n=e}finally{try{t||null==i.return||i.return()}finally{if(r)throw n}}}},{key:"isEmpty",value:function(){return""===this.strToParse}},{key:"isNodeEmpty",value:function(){return this.astNode instanceof d}},{key:"update_cell_value",value:function(){return this.solveExpression()}},{key:"solveExpression",value:function(){if(this.isEmpty())this.expSolution=new i.CellVEmpty;else if(!1===this.isNodeEmpty())if(this.fnParamArray.length>0){var e,t=this.fnParamArray.reduce((function(e,t){e.push(t.solveExpression())}));this.expSolution=(e=this.astNode).solveNode.apply(e,o(t))}else this.expSolution=this.astNode.solveNode();else console.assert(1===this.fnParamArray.length),this.expSolution=solvedParamArray[0];return this.expStatus=n.FORMULA_STATUS.solved,this.expSolution}}]),e}(),m=function(){function e(t){l(this,e),this.strToParse=t,this.resExp=new f}return u(e,[{key:"dealSpace",value:function(){var e=this.strToParse.indexOf(n.MARK_OBJ.colon);if(e>0)this.strToParse.slice(0,e).lastIndexOf(n.MARK_OBJ.space);this.strToParse.includes(":")}},{key:"parseString",value:function(){this.dealSpace();return console.log(),this}}]),e}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StructuralExpressionBuilder=void 0;var n=r(101),a=r(26),i=r(11);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.multiCollFn=r,this.calcCell=t,this.exp_obj=this.root_exp=new n.StructuralExp(t),this.buffer="",this.was_string=!1,this.fn_stack=[{exp:this.exp_obj}],this.position_i=0,this.state=this.deal1Char}var t,r,l;return t=e,(r=[{key:"string",value:function(e){'"'===e?(this.exp_obj.push2ExpArgs(new a.RawValue(this.buffer)),this.was_string=!0,this.buffer="",this.state=this.deal1Char):this.buffer+=e}},{key:"single_quote",value:function(e){"'"===e&&(this.state=this.deal1Char),this.buffer+=e}},{key:"ini_parentheses",value:function(){var e,t=this.buffer.trim(),r=this.multiCollFn.getFnExecutorByName(t);e=new n.StructuralExp(this.calcCell),this.fn_stack.push({exp:e,special:r}),this.exp_obj=e,this.buffer=""}},{key:"end_parentheses",value:function(){var e,t=this.fn_stack,r=this.fn_stack.pop();this.exp_obj=r.exp,this.exp_obj.push2ExpArgs(this.buffer),e=this.exp_obj,this.buffer="",this.exp_obj=t[t.length-1].exp,r.special?(r.special.push(e),this.exp_obj.push2ExpArgs(r.special,this.position_i)):this.exp_obj.push2ExpArgs(e,this.position_i)}},{key:"add_operation",value:function(e){this.was_string||this.exp_obj.push2ExpArgs(this.buffer,this.position_i),this.was_string=!1,this.exp_obj.push2ExpArgs(e,this.position_i),this.buffer=""}},{key:"deal1Char",value:function(e){var t=this.fn_stack;'"'===e?(this.state=this.string,this.buffer=""):"'"===e?(this.state=this.single_quote,this.buffer="'"):"("===e?this.ini_parentheses():")"===e?this.end_parentheses():i.common_operations[e]?this.add_operation(e):","===e&&t[t.length-1].special?(this.was_string=!1,t[t.length-1].exp.push2ExpArgs(this.buffer,this.position_i),t[t.length-1].special.push(t[t.length-1].exp),t[t.length-1].exp=this.exp_obj=new n.StructuralExp(this.calcCell),this.buffer=""):this.buffer+=e}},{key:"parseFormula",value:function(){for(var e=this.calcCell.formulaString.slice(1);this.position_i<e.length;this.position_i++)this.state(e[this.position_i]);return this.root_exp.push2ExpArgs(this.buffer,this.position_i),this.root_exp}}])&&o(t.prototype,r),l&&o(t,l),e}();t.StructuralExpressionBuilder=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StructuralExp=void 0;var n=r(11),a=r(26),i=r(35),o=r(2),l=r(20),s=r(102);function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=0,d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=++c,this.args=[],this.name="Expression",this.calcCell=t,this.last_arg=""}var t,r,d;return t=e,(r=[{key:"update_cell_value",value:function(){var e=this.calcCell.cellObj;try{if(Array.isArray(this.args)&&1===this.args.length&&this.args[0]instanceof i.Range)throw o.errorObj.ERROR_VALUE;e.v=this.solveExpression(),"string"==typeof e.v?e.t="s":"number"==typeof e.v&&(e.t="n")}catch(t){if(-1===o.errorMsgArr.indexOf(t.message))throw t;e.t="e",e.w=t.message,e.v=t.message}}},{key:"isEmpty",value:function(e){return null==e||""===e}},{key:"hasCalcMethod",value:function(e){return"function"==typeof e.solveExpression}},{key:"convertDateToNumber",value:function(e){return e instanceof l.CellVDateTime?e.toNumber():e}},{key:"execCalcMethod",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(this.hasCalcMethod(e)){var r=e.solveExpression();return t&&(r=this.convertDateToNumber(r)),r}throw o.errorObj.ERROR_SYNTAX}},{key:"execOperatorWith2Args",value:function(e,t,r){for(var n=0;n<t.length;n++)if(t[n]===e)try{var i=r(this.execCalcMethod(t[n-1]),this.execCalcMethod(t[n+1]));t.splice(n-1,3,new a.RawValue(i)),n--}catch(e){throw console.log("[structural_exp.js] - "+this.name+": evaluating "+this.calcCell.cellObj.f+"\n"+e.message),e}}},{key:"exec_minus",value:function(e){for(var t=e.length;t--;)"-"===e[t]&&(this.execCalcMethod(e[t+1]),t>0&&"string"==typeof e[t-1]&&e.splice(t,2,new a.RawValue(-e[t+1])))}},{key:"exec_plus",value:function(e){if("+"===e[0]){var t=this.execCalcMethod(e[1]);e.splice(0,2,new a.RawValue(t))}}},{key:"dealAllRefValue",value:function(){var e,t=this.args.concat();try{for(var r=0;r<t.length;r++)if("RefValue"===t[r].name){e=t[r].calcCell.calcSheet;var a=t[r].str_expression;if(void 0===e.getCellByName(a)&&e.addCalcCell(a,{v:new l.CellVEmpty},n.FORMULA_STATUS.solved),"0"===t[r].str_expression.slice(1,t[r].str_expression.length))return o.errorObj.ERROR_NAME}}catch(e){}}},{key:"solveExpression",value:function(){var e=this.args.concat();if(this.dealAllRefValue(),this.exec_minus(e),this.exec_plus(e),this.exeAllTwoArgOperator(e,this),1===e.length)return this.calcLastArg(e[0])}},{key:"exeAllTwoArgOperator",value:function(e,t){this.execOperatorWith2Args("^",e,(function(e,t){return Math.pow(+e,+t)})),this.execOperatorWith2Args("/",e,(function(e,t){if(0===t)throw o.errorObj.ERROR_DIV0;return+e/+t})),this.execOperatorWith2Args("*",e,(function(e,t){return+e*+t})),this.execOperatorWith2Args("-",e,(function(e,t){return e-t})),this.execOperatorWith2Args("+",e,(function(e,t){return+e+ +t})),this.execOperatorWith2Args("&",e,(function(e,t){return""+e+t})),this.execOperatorWith2Args("<",e,(function(e,t){return e<t})),this.execOperatorWith2Args(">",e,(function(e,t){return e>t})),this.execOperatorWith2Args(">=",e,(function(e,t){return e>=t})),this.execOperatorWith2Args("<=",e,(function(e,t){return e<=t})),this.execOperatorWith2Args("<>",e,(function(e,r){return!(t.isEmpty(e)&&t.isEmpty(r)||e===r)})),this.execOperatorWith2Args("=",e,(function(e,r){return!(!t.isEmpty(e)||!t.isEmpty(r))||null===e&&0===r||0===e&&null===r||"string"==typeof e&&"string"==typeof r&&e.toLowerCase()===r.toLowerCase()||e===r}))}},{key:"calcLastArg",value:function(e){if("function"!=typeof e.solveExpression||e.cellStatus===n.FORMULA_STATUS.solved)return e.cellObj.v;var t=e.solveExpression();return(0,l.convertToCellV)(t)}},{key:"push2ExpArgs",value:function(e,t){if(e){var r=(0,s.str_2_val)(e,this.calcCell,t);"="===r&&(">"===this.last_arg||"<"===this.last_arg)||"<"===this.last_arg&&">"===r?this.args[this.args.length-1]+=r:this.args.push(r),this.last_arg=r}}}])&&u(t.prototype,r),d&&u(t,d),e}();t.StructuralExp=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.str_2_val=function(e,t,r){var o;isNaN(e)?"TRUE"===e?o=new n.RawValue(1):"string"==typeof e&&e.trim().replace(/\$/g,"").match(/^[A-Z]+[0-9]+:[A-Z]+[0-9]+$/)?o=new a.Range(e.trim().replace(/\$/g,""),t,r):"string"==typeof e&&e.trim().replace(/\$/g,"").match(/^[^!]+![A-Z]+[0-9]+:[A-Z]+[0-9]+$/)?o=new a.Range(e.trim().replace(/\$/g,""),t,r):"string"==typeof e&&e.trim().replace(/\$/g,"").match(/^[A-Z]+:[A-Z]+$/)?o=new a.Range(e.trim().replace(/\$/g,""),t,r):"string"==typeof e&&e.trim().replace(/\$/g,"").match(/^[^!]+![A-Z]+:[A-Z]+$/)?o=new a.Range(e.trim().replace(/\$/g,""),t,r):"string"==typeof e&&e.trim().replace(/\$/g,"").match(/^[A-Z]+[0-9]+$/)?((o=new i.RefValue(e.trim().replace(/\$/g,""),t)).end_pst=r,o.buffer=e,o.start_pst=r-e.length):"string"==typeof e&&e.trim().replace(/\$/g,"").match(/^[^!]+![A-Z]+[0-9]+$/)?((o=new i.RefValue(e.trim().replace(/\$/g,""),t)).end_pst=r,o.buffer=e,o.start_pst=r-e.length):o="string"!=typeof e||isNaN(e.trim().replace(/%$/,""))?e:new n.RawValue(+e.trim().replace(/%$/,"")/100):o=new n.RawValue(+e);return o};var n=r(26),a=r(35),i=r(52)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(5);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=new n.CellRange(0,0,0,0),this.ri=0,this.ci=0}var t,r,i;return t=e,(r=[{key:"multiple",value:function(){return this.range.multiple()}},{key:"setIndexes",value:function(e,t){this.ri=e,this.ci=t}},{key:"size",value:function(){return this.range.size()}}])&&a(t.prototype,r),i&&a(t,i),e}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.x=0,this.y=0,this.ri=0,this.ci=0}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=null,this.state="clear"}var t,r,a;return t=e,(r=[{key:"copy",value:function(e){return this.range=e,this.state="copy",this}},{key:"cut",value:function(e){return this.range=e,this.state="cut",this}},{key:"isClear",value:function(){return"clear"===this.state}},{key:"clear",value:function(){this.range=null,this.state="clear"}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(5);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),e}var l=function(){function e(t,r,n){a(this,e),this.ci=t,this.operator=r,this.value=n}return o(e,[{key:"set",value:function(e,t){this.operator=e,this.value=t}},{key:"includes",value:function(e){var t=this.operator,r=this.value;return"all"===t||"in"===t&&r.includes(e)}},{key:"getData",value:function(){return{ci:this.ci,operator:this.operator,value:this.value}}}]),e}(),s=function(){function e(t,r){a(this,e),this.ci=t,this.order=r}return o(e,[{key:"asc",value:function(){return"asc"===this.order}},{key:"desc",value:function(){return"desc"===this.order}}]),e}(),u=function(){function e(){a(this,e),this.ref=null,this.filters=[],this.sort=null,this.flex=[]}return o(e,[{key:"setData",value:function(e){var t=e.ref,r=e.filters,n=e.sort;null!==t&&(this.ref=t,this.fitlers=r.map((function(e){return new l(e.ci,e.operator,e.value)})),n&&(this.sort=new s(n.ci,n.order)))}},{key:"getData",value:function(){if(this.active()){var e=this.ref,t=this.filters,r=this.sort;return{ref:e,filters:t.map((function(e){return e.getData()})),sort:r}}return{}}},{key:"addFilter",value:function(e,t,r){var n=this.getFilter(e);null==n?this.filters.push(new l(e,t,r)):n.set(t,r)}},{key:"addFiexRows",value:function(e){this.flex=e}},{key:"setSort",value:function(e,t){this.sort=t?new s(e,t):null}},{key:"includes",value:function(e,t){return!!this.active()&&this.hrange().includes(e,t)}},{key:"getSet",value:function(e,t){for(var r=0;r<this.flex.length;r++)for(var n=this.flex[r],a=n.ri,i=n.set_total,o=n.state,l=a;l<i+a;l++)console.log(o,"114",t,a,o),!1===o&&t===a?(e.add(l+1),this.flex[r].state=!0):!0===o&&t===a&&(e.delete(l+1),this.flex[r].state=!1);return e}},{key:"includes2",value:function(e,t){for(var r=!1,n=0;n<this.flex.length;n++){var a=this.flex[n],i=a.ri,o=a.ci;e===i&&t===o&&(r=!0)}return r}},{key:"getSort",value:function(e){var t=this.sort;return t&&t.ci===e?t:null}},{key:"getFilter",value:function(e){for(var t=this.filters,r=0;r<t.length;r+=1)if(t[r].ci===e)return t[r];return null}},{key:"filteredRows",value:function(e){var t=new Set,r=new Set;if(this.active())for(var n=this.range(),a=n.sri,i=n.eri,o=this.filters,l=a+1;l<=i;l+=1)for(var s=0;s<o.length;s+=1){var u=o[s],c=e(l,u.ci),d=c?c.text:"";if(!u.includes(d)){t.add(l);break}r.add(l)}return{rset:t,fset:r}}},{key:"items",value:function(e,t){var r={};if(this.active())for(var n=this.range(),a=n.sri,i=n.eri,o=a+1;o<=i;o+=1){var l=t(o,e);if(null===l||/^\s*$/.test(l.text))r[""]=(r[""]||0)+1;else{var s=l.text;r[s]=(r[s]||0)+1}}return r}},{key:"range",value:function(){return n.CellRange.valueOf(this.ref)}},{key:"hrange",value:function(){var e=this.range();return e.eri=e.sri,e}},{key:"clear",value:function(){this.ref=null,this.filters=[],this.sort=null}},{key:"active",value:function(){return null!==this.ref}}]),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Merges=void 0;var n=r(5);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._=t}var t,r,i;return t=e,(r=[{key:"forEach",value:function(e){this._.forEach(e)}},{key:"each",value:function(e){this._.forEach((function(t){return e(t)}))}},{key:"deleteWithin",value:function(e){this._=this._.filter((function(t){return!t.within(e)}))}},{key:"getFirstIncludes",value:function(e,t){for(var r=0;r<this._.length;r+=1){var n=this._[r];if(n.includes(e,t))return n}return null}},{key:"filterIntersects",value:function(t){return new e(this._.filter((function(e){return e.intersects(t)})))}},{key:"intersects",value:function(e){for(var t=0;t<this._.length;t+=1)if(this._[t].intersects(e))return!0;return!1}},{key:"union",value:function(e){var t=e;return this._.forEach((function(e){e.intersects(t)&&(t=e.union(t))})),t}},{key:"add",value:function(e){this.deleteWithin(e),this._.push(e)}},{key:"shift",value:function(e,t,r,n){this._.forEach((function(a){var i=a.sri,o=a.sci,l=a.eri,s=a.eci,u=a;"row"===e?i>=t?(u.sri+=r,u.eri+=r):i<t&&t<=l&&(u.eri+=r,n(i,o,r,0)):"column"===e&&(o>=t?(u.sci+=r,u.eci+=r):o<t&&t<=s&&(u.eci+=r,n(i,o,0,r)))}))}},{key:"move",value:function(e,t,r){this._.forEach((function(n){var a=n;a.within(e)&&(a.eri+=t,a.sri+=t,a.sci+=r,a.eci+=r)}))}},{key:"setData",value:function(e){return this._=e.map((function(e){return n.CellRange.valueOf(e)})),this}},{key:"getData",value:function(){return this._.map((function(e){return e.toString()}))}}])&&a(t.prototype,r),i&&a(t,i),e}();t.Merges=i},,function(e,t){},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(5))&&n.__esModule?n:{default:n};function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.srcCellRange="",this.dstCellRange="",this.srcOneDRange="",this.dstOneDRange=""}var t,r,n;return t=e,(r=[{key:"setSrcAndDstCellRange",value:function(e,t){this.srcCellRange=e,this.dstCellRange=t}},{key:"use",value:function(){var e=this.srcCellRange,t=this.dstCellRange,r=e.sri,n=e.sci,a=e.eri,o=e.eci,l=t.sri,s=t.sci,u=t.eri,c=t.eci,d=i(e.size(),2),f=d[0],m=d[1],h=i(t.size(),2);return{sri:r,sci:n,eri:a,eci:o,dsri:l,dsci:s,deri:u,deci:c,rn:f,cn:m,drn:h[0],dcn:h[1]}}},{key:"autoFilterDirection",value:function(){var e=this.use(),t=e.sri,r=e.dsri,n=e.deri,a=e.eri,i=!1;return t===r&&n===a&&(i=!0),i}},{key:"upOrDown",value:function(){var e=this.use(),t=e.deri,r=e.sri,n=e.deci,a=e.sci,i=!0;return(t<r||n<a)&&(i=!1),i}},{key:"leftOrRight",value:function(){var e=this.getRangeByWay(),t=e.srcOneDRange,r=e.dstOneDRange,n=1;return t.sri===t.eri&&r.eci>t.eci?n=2:t.sri===t.eri&&r.eci<t.eci&&(n=3),n}},{key:"getOneDRangeObj",value:function(e,t){var r=this.use(),n=r.sri,i=r.sci,o=r.eri,l=r.eci,s=r.dsri,u=r.dsci,c=r.deri,d=r.deci;return e?(this.srcOneDRange=new a.default(n+t,i,n+t,l),this.dstOneDRange=new a.default(s+t,u,s+t,d)):(this.srcOneDRange=new a.default(n,i+t,o,i+t),this.dstOneDRange=new a.default(s,u+t,c,u+t)),this.getRangeByWay()}},{key:"getRangeByWay",value:function(){return{srcOneDRange:this.srcOneDRange,dstOneDRange:this.dstOneDRange}}},{key:"calcDiff",value:function(e,t){var r=1;if(t||(r=1),t&&e.length>1){var n=e[e.length-2];r=1*e[e.length-1].text-1*n.text}else if(e.length>1){var a=e[1];r=1*e[0].text-1*a.text}return isNaN(r)&&(r=1),r}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(8);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.text="",this.depend=[],this.formulas="",this.style=null,this.merge=null,this.formatText=null,this.multivalueRefsCell=null,this.source_v=null}var t,r,i;return t=e,(r=[{key:"setCell",value:function(e){(0,n.isHave)(e)&&((0,n.isHave)(e.text)&&(this.text=e.text),(0,n.isHave)(e.formulas)&&(this.formulas=e.formulas),(0,n.isHave)(e.formatText)&&(this.formatText=e.formatText),(0,n.isHave)(e.depend)&&(this.depend=e.depend),(0,n.isHave)(e.style)&&(this.style=e.style),(0,n.isHave)(e.multivalueRefsCell)&&(this.multivalueRefsCell=e.multivalueRefsCell),(0,n.isHave)(e.merge)&&(this.merge=e.merge),(0,n.isHave)(e.source_v)&&(this.source_v=e.source_v))}},{key:"setFormatText",value:function(e){e.state&&(this.formatText=e.text)}}])&&a(t.prototype,r),i&&a(t,i),e}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cols=void 0;var n=r(10);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){var r=t.len,n=t.width,a=t.indexWidth,i=t.minWidth;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._={},this.len=r,this.width=n,this.indexWidth=a,this.minWidth=i}var t,r,i;return t=e,(r=[{key:"setData",value:function(e){e.len&&(this.len=e.len,delete e.len),this._=e}},{key:"getData",value:function(){var e=this.len;return Object.assign({len:e},this._)}},{key:"getWidth",value:function(e){var t=this._[e];return t&&t.width?t.width:this.width}},{key:"getOrNew",value:function(e){return this._[e]=this._[e]||{},this._[e]}},{key:"setWidth",value:function(e,t){this.getOrNew(e).width=t}},{key:"sumWidth",value:function(e,t){var r=this;return(0,n.rangeSum)(e,t,(function(e){return r.getWidth(e)}))}},{key:"totalWidth",value:function(){return this.sumWidth(0,this.len)}}])&&a(t.prototype,r),i&&a(t,i),e}();t.Cols=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validations=void 0;var n,a=(n=r(141))&&n.__esModule?n:{default:n},i=r(5);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}var c=function(){function e(t,r,n){l(this,e),this.refs=r,this.mode=t,this.validator=n}return u(e,[{key:"includes",value:function(e,t){for(var r=this.refs,n=0;n<r.length;n+=1){if(i.CellRange.valueOf(r[n]).includes(e,t))return!0}return!1}},{key:"addRef",value:function(e){this.remove(i.CellRange.valueOf(e)),this.refs.push(e)}},{key:"remove",value:function(e){var t=[];this.refs.forEach((function(r){var n=i.CellRange.valueOf(r);n.intersects(e)?n.difference(e).forEach((function(e){return t.push(e.toString())})):t.push(r)})),this.refs=t}},{key:"getData",value:function(){var e=this.refs,t=this.mode,r=this.validator;return{refs:e,mode:t,type:r.type,required:r.required,operator:r.operator,value:r.value}}}],[{key:"valueOf",value:function(t){var r=t.refs,n=t.mode,i=t.type,o=t.required,l=t.operator,s=t.value;return new e(n,r,new a.default(i,o,s,l))}}]),e}(),d=function(){function e(){l(this,e),this._=[],this.errors=new Map}return u(e,[{key:"getError",value:function(e,t){return this.errors.get("".concat(e,"_").concat(t))}},{key:"validate",value:function(e,t,r){var n=this.get(e,t),a="".concat(e,"_").concat(t),i=this.errors;if(null!==n){var l=o(n.validator.validate(r),2),s=l[0],u=l[1];s?i.delete(a):i.set(a,u)}else i.delete(a);return!0}},{key:"add",value:function(e,t,r){var n=r.type,i=r.required,o=r.value,l=r.operator,s=new a.default(n,i,o,l),u=this.getByValidator(s);null!==u?u.addRef(t):this._.push(new c(e,[t],s))}},{key:"getByValidator",value:function(e){for(var t=0;t<this._.length;t+=1){var r=this._[t];if(r.validator.equals(e))return r}return null}},{key:"get",value:function(e,t){for(var r=0;r<this._.length;r+=1){var n=this._[r];if(n.includes(e,t))return n}return null}},{key:"remove",value:function(e){this.each((function(t){t.remove(e)}))}},{key:"each",value:function(e){this._.forEach((function(t){return e(t)}))}},{key:"getData",value:function(){return this._.filter((function(e){return e.refs.length>0})).map((function(e){return e.getData()}))}},{key:"setData",value:function(e){this._=e.map((function(e){return c.valueOf(e)}))}}]),e}();t.Validations=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(9),a=r(10);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l={phone:/^[1-9]\d{10}$/,email:/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/};function s(e,t){var r="";if(!e){for(var a=arguments.length,i=new Array(a>2?a-2:0),o=2;o<a;o++)i[o-2]=arguments[o];r=n.t.apply(void 0,["validation.".concat(t)].concat(i))}return[e,r]}var u=function(){function e(t,r,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.required=r,this.value=n,this.type=t,this.operator=a,this.message=""}var t,r,n;return t=e,(r=[{key:"parseValue",value:function(e){var t=this.type;return"date"===t?new Date(e):"number"===t?Number(e):e}},{key:"equals",value:function(e){var t=this.type===e.type&&this.required===e.required&&this.operator===e.operator;return t&&(t=Array.isArray(this.value)?(0,a.arrayEquals)(this.value,e.value):this.value===e.value),t}},{key:"values",value:function(){return this.value.split(",")}},{key:"validate",value:function(e){var t=this.required,r=this.operator,n=this.value,a=this.type;if(t&&/^\s*$/.test(e))return s(!1,"required");if(/^\s*$/.test(e))return[!0];if(l[a]&&!l[a].test(e))return s(!1,"notMatch");if("list"===a)return s(this.values().includes(e),"notIn");if(r){var o=this.parseValue(e);if("be"===r){var u=i(n,2),c=u[0],d=u[1];return s(o>=this.parseValue(c)&&o<=this.parseValue(d),"between",c,d)}if("nbe"===r){var f=i(n,2),m=f[0],h=f[1];return s(o<this.parseValue(m)||o>this.parseValue(h),"notBetween",m,h)}if("eq"===r)return s(o===this.parseValue(n),"equal",n);if("neq"===r)return s(o!==this.parseValue(n),"notEqual",n);if("lt"===r)return s(o<this.parseValue(n),"lessThan",n);if("lte"===r)return s(o<=this.parseValue(n),"lessThanEqual",n);if("gt"===r)return s(o>this.parseValue(n),"greaterThan",n);if("gte"===r)return s(o>=this.parseValue(n),"greaterThanEqual",n)}return[!0]}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={toolbar:{undo:"Undo",redo:"Redo",paintformat:"Paint format",clearformat:"Clear format",format:"Format",font:"Font",fontSize:"Font size",fontBold:"Font bold",fontItalic:"Font italic",underline:"Underline",strike:"Strike",textColor:"Text color",fillColor:"Fill color",border:"Borders",merge:"Merge cells",align:"Horizontal align",valign:"Vertical align",textwrap:"Text wrapping",freeze:"Freeze cell",add:"display equation",autofilter:"Filter",formula:"Functions",more:"More",flexible:"Flexible",throwFormula:"Throw formulas",comeBack:"come back"},contextmenu:{copy:"Copy",cut:"Cut",paste:"Paste",pasteValue:"Paste values only",pasteFormat:"Paste format only",insertRow:"Insert row",insertColumn:"Insert column",deleteRow:"Delete row",deleteColumn:"Delete column",deleteCell:"Delete cell",deleteCellText:"Delete cell text",validation:"Data validations",recover:"recover"},format:{normal:"Normal",text:"Plain Text",number:"Number",percent:"Percent",rmb:"RMB",usd:"USD",date:"Date",time:"Time",datetime:"Date time",duration:"Duration"},date_formula:{sum:"Sum",average:"Average",max:"Max",min:"Min",concat:"Concat",wland:"MD.WLAND",wfr:"MD.WFR",rtd:"MD.RTD"},validation:{required:"it must be required",notMatch:"it not match its validation rule",between:"it is between {} and {}",notBetween:"it is not between {} and {}",notIn:"it is not in list",equal:"it equal to {}",notEqual:"it not equal to {}",lessThan:"it less than {}",lessThanEqual:"it less than or equal to {}",greaterThan:"it greater than {}",greaterThanEqual:"it greater than or equal to {}"},error:{pasteForMergedCell:"Unable to do this for merged cells"},calendar:{weeks:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]},button:{cancel:"Cancel",remove:"Remove",save:"Save",ok:"OK"},sort:{desc:"Sort Z -> A",asc:"Sort A -> Z"},filter:{empty:"empty"},dataValidation:{mode:"Mode",range:"Cell Range",criteria:"Criteria",modeType:{cell:"Cell",column:"Colun",row:"Row"},type:{list:"List",number:"Number",date:"Date",phone:"Phone",email:"Email"},operator:{be:"between",nbe:"not betwwen",lt:"less than",lte:"less than or equal to",gt:"greater than",gte:"greater than or equal to",eq:"equal to",neq:"not equal to"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(7),i=r(1);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],a=arguments.length>1?arguments[1]:void 0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.moving=!1,this.vertical=r,this.el=(0,n.h)("div","".concat(i.cssPrefix,"-resizer ").concat(r?"vertical":"horizontal")).children(this.hoverEl=(0,n.h)("div","".concat(i.cssPrefix,"-resizer-hover")).on("mousedown.stop",(function(e){return t.mousedownHandler(e)})),this.lineEl=(0,n.h)("div","".concat(i.cssPrefix,"-resizer-line")).hide()).hide(),this.cRect=null,this.finishedFn=null,this.minDistance=a}var t,r,l;return t=e,(r=[{key:"show",value:function(e,t){var r=this.moving,n=this.vertical,a=this.hoverEl,i=this.lineEl,o=this.el;if(!r){this.cRect=e;var l=e.left,s=e.top,u=e.width,c=e.height;o.offset({left:n?l+u-5:l,top:n?s:s+c-5}).show(),a.offset({width:n?5:u,height:n?c:5}),i.offset({width:n?0:t.width,height:n?t.height:0})}}},{key:"hide",value:function(){this.el.offset({left:0,top:0}).hide()}},{key:"mousedownHandler",value:function(e){var t=this,r=e,n=this.el,i=this.lineEl,o=this.cRect,l=this.vertical,s=this.minDistance,u=l?o.width:o.height;i.show(),(0,a.mouseMoveUp)(window,(function(e){t.moving=!0,null!==r&&1===e.buttons&&(l?(u+=e.movementX)>s&&n.css("left","".concat(o.left+u,"px")):(u+=e.movementY)>s&&n.css("top","".concat(o.top+u,"px")),r=e)}),(function(){r=null,i.hide(),t.moving=!1,t.hide(),t.finishedFn&&(u<s&&(u=s),t.finishedFn(o,u))}))}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vertical=t,this.moveFn=null,this.el=(0,n.h)("div","".concat(a.cssPrefix,"-scrollbar ").concat(t?"vertical":"horizontal")).child(this.contentEl=(0,n.h)("div","")).on("mousemove.stop",(function(){})).on("scroll.stop",(function(e){var t=e.target,n=t.scrollTop,a=t.scrollLeft;r.moveFn&&r.moveFn(r.vertical?n:a,e)}))}var t,r,o;return t=e,(r=[{key:"move",value:function(e){return this.el.scroll(e),this}},{key:"scroll",value:function(){return this.el.scroll()}},{key:"set",value:function(e,t){var r=e-1;if(t>r){var n=this.vertical?"height":"width";this.el.css(n,"".concat(r-15,"px")).show(),this.contentEl.css(this.vertical?"width":"height","1px").css(n,"".concat(t,"px"))}else this.el.hide();return this}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(5),a=r(1),i=r(0),o=r(71);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,i.h)("div","".concat(a.cssPrefix,"-selector-cell")),this.data=t,this._=new n.CellRange(0,0,0,0)}var t,r,s;return t=e,(r=[{key:"resetSelectOffset",value:function(){var e=this.data.getRect(this._);this.setOffset(e)}},{key:"setData",value:function(e,t){var r=this;e=-1===e?0:e,t=-1===t?0:t;var a=this.data.merges,i=!1;a.each((function(n){n.includeByRiCi(e,t)&&(r._=n,i=!0)})),i||(this._=new n.CellRange(e,t,e,t))}},{key:"toolbarChangeSelectorCell",value:function(){var e=this._.sri,t=this._.sci;this.setData(e,t)}},{key:"setOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.el.offset({width:n-o.selectorHeightBorderWidth+.8,height:a-o.selectorHeightBorderWidth+.8,left:t-.8,top:r-.8}).show()}}])&&l(t.prototype,r),s&&l(t,s),e}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=h(r(72)),i=h(r(147)),o=r(1),l=r(6),s=h(r(149)),u=r(29),c=r(7),d=h(r(153)),f=r(31),m=r(8);function h(e){return e&&e.__esModule?e:{default:e}}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function g(){var e=this.textlineEl,t=this.textEl,r=this.areaOffset;if(r){var n=e.offset().width+9+15,a=this.viewFn().width-r.left-9;if(n>r.width&&0!==r.width){var i=n;if(n>a){i=a-15;var o=parseInt(n/(a-15),10);o+=n%a>0?1:0,(o*=this.rowHeight)>r.height&&t.css("height","".concat(o,"px"))}t.css("width","".concat(i,"px"))}}}var y=function(){var e=this;if(window.getSelection().rangeCount<=0)return 0;var t=window.getSelection().getRangeAt(0),r=t.cloneRange();r.selectNodeContents(this.textEl.el),r.setEnd(t.startContainer,t.startOffset);var n=r.toString().length,a=this.editorText.getText(),i=(0,u.findBracket)(n-1,(0,l.cutting)(a),a),o=i.exist,s=i.left,c=i.right;Object.keys(this.spanArr).forEach((function(t){e.spanArr[t].css("background-color","rgba(255,255,255,0.1)")}));var d=this.spanArr[s],f=this.spanArr[c];if(this.suggestContent.hide(),o&&d&&f)d.css("background-color","rgb(229, 229, 229)"),f.css("background-color","rgb(229, 229, 229)");else{var m=this.suggest.show,h=u.suggestContent.call(this,n,(0,l.cutting)(a),a);h.suggestContent&&!m&&this.suggestContent.content(h.cut,h.pos)}return n};function b(e){if(this){var t=this.pos,r=this.pos,n=0,a=document.createRange();a.setStart(e,0),a.collapse(!0);for(var i,o=[e],l=!1,s=!1;!s&&(i=o.pop());)if(3===i.nodeType){var u=n+i.length;!l&&t>=n&&t<=u&&(a.setStart(i,t-n),l=!0),l&&r>=n&&r<=u&&(a.setEnd(i,r-n),s=!0),n=u}else for(var c=i.childNodes.length;c--;)o.push(i.childNodes[c]);var d=window.getSelection();d.removeAllRanges(),d.addRange(a)}}function E(){var e=this.editorText.getText();this.pos=y.call(this),w.call(this,e,this.pos)}function R(){if(!1===S.call(this)){var e=this.data.getCell(this.ri,this.ci);this.editorText.setOldCell((0,l.deepCopy)(e),{ri:this.ri,ci:this.ci})}}function O(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"input";if(R.call(this),e){var i=e.inputType;if("insertFromPaste"===i&&"black"!==this.textEl.el.style["caret-color"])return void(this.copy=!0);if("historyUndo"===i)return}var o=this.editorText;setTimeout((function(){if(!1!==t.chinese){var i="";if(t.data.settings.showEditor){if(t.sheet.selector.hide(),""===r&&e&&e.target&&e.target.childNodes){for(var s="",u=0,c=e.target.childNodes.length;u<c;u++)1===e.target.childNodes[u].nodeType?i+=e.target.childNodes[u].innerText:3===e.target.childNodes[u].nodeType&&(s+=e.target.childNodes[u].nodeValue);i=""!==s?s:i}else i=""===r&&e&&(0,m.isHave)(e.data)?""!==e.data?e.data:i:r;t.copy&&(t.copy=!1,i=e&&e.data?e.data:"",t.textEl.html(i),t.pos=i.length,b.call(t,t.textEl.el,-1)),t.changed=!0;var d=t.suggest,f=t.textlineEl,h=t.validator,v=t.textEl;if(o.setText("".concat(i)),o.changeText(1),t.pos=y.call(t),h)"list"===h.type?d.search(i):d.hide();else{var p=(i+="").lastIndexOf("=");-1!==t.pos?w.call(t,i,t.pos):A.call(t,i);var E=!1,R=(0,l.cuttingByPos2)(i,t.pos,!0);if(i.length>=t.pos){var O="".concat(i[t.pos]);-1!==O.search(/^[0-9]+.?[0-9]*$/)?E=!0:O&&(R+=(0,l.cuttingByPosEnd)(i,t.pos+1))}0===p&&i.length>1&&""!==R&&!E&&R.trim().length>0?d.search(R):d.hide()}f.html(n||i),o.setText(n||i),t.suggest.itemIndex=-1,g.call(t),i&&"="!==i[0]&&b.call(t,v.el,-1),n&&"="===n[0]&&(i=n),t.change(a,i),setTimeout((function(){t.show()}))}}}))}function x(e){this.pos=y.call(this),"ArrowRight"===e.code?this.pos=this.pos+1:"ArrowLeft"===e.code&&(this.pos=this.pos-1);var t=e.keyCode||e.which;27===t&&"black"===this.textEl.el.style["caret-color"]&&"1"===this.textEl.el.style.opacity&&this.change("input","@~esc")}function A(e){var t=e.lastIndexOf("=");0===t&&e.length>=1&&(0,l.operation)(e[e.length-1])?this.setLock(!0):(this.setLock(!1),this.state=2),0!==t?this.setLock(!1):0===t&&1===e.length&&this.setLock(!0),(0,l.isAbsoluteValue)((0,l.cuttingByPos)(e,this.pos),2)&&this.setLock(!0),0!==t&&this.setLock(!1)}function w(e,t){var r=(e+="").lastIndexOf("=");0===r&&e.length>=1&&(0,l.operation)(e[t-1])?this.setLock(!0):(this.setLock(!1),this.state=2),0!==r?this.setLock(!1):0===r&&1===e.length&&this.setLock(!0),(0,l.isAbsoluteValue)((0,l.cuttingByPos)(e,t),2)&&this.setLock(!0),0!==r&&this.setLock(!1)}function _(){var e=this,t=this.textEl.el;setTimeout((function(){b.call(e,t)}),0)}function N(e){var t=this.textEl,r=this.textlineEl,n=this.tmp;t.el.blur(),n.html(e),r.html(e),_.call(this)}function C(e){var t=this.validator,r=this.editorText,n=r.getText();if(t&&"list"===t.type)n=r.setText(e);else{this.pos=y.call(this);for(var a=this.pos-(0,l.cuttingByPos)(n,this.pos).length,i=(0,l.cuttingByPosEnd)(n,this.pos+1),o=["",""],s=this.pos+i.length,u=0;u<n.length;u++)u<a&&(o[0]+=n[u]),u>s-1&&(o[1]+=n[u]);n=r.setText("".concat(o[0]+e.key,"(")),this.pos=r.getText().length,n=r.setText(n+")".concat(o[1]))}this.textEl.html(n),this.textlineEl.html(n),this.suggest.hide(),w.call(this,n,this.pos),this.change("input",n),b.call(this,this.textEl.el,-1),g.call(this)}function T(){this.suggestContent.hide()}function M(){this.suggest.setItems(this.formulas)}function S(){return"black"===this.textEl.el.style["caret-color"]&&"1"===this.textEl.el.style.opacity}var I=function(){function e(t,r,l,u,f,m){var h=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.viewFn=r,this.rowHeight=l,this.formulas=t,this.sheet=m,this.display=!0,this.suggest=new a.default(t,(function(e){C.call(h,e)}),f,this),this.suggestContent=new s.default,this.lock=!1,this.state=1,this.data=f,this.datepicker=new i.default,this.isCors=!1,this.datepicker.change((function(e){h.setText(function(e){var t=e.getMonth()+1,r=e.getDate();return t<10&&(t="0".concat(t)),r<10&&(r="0".concat(r)),"".concat(e.getFullYear(),"-").concat(t,"-").concat(r)}(e)),h.clear()})),this.ri=-1,this.ci=-1,this.spanArr=[],this.mousedownIndex=[],this.changed=!1,this.chinese=!0,this.editorText=new d.default(""),this.areaEl=(0,n.h)("div","".concat(o.cssPrefix,"-editor-area")).children(this.textEl=(0,n.h)("div","".concat(o.cssPrefix,"-editor-textEl")).on("input",(function(e){return O.call(h,e)})).on("click",(function(){return E.call(h)})).on("keyup",(function(e){return x.call(h,e)})).on("mousedown",(function(e){if(2===e.detail){if(S.call(h))return;h.show(),setTimeout((function(){var e=h.ri,t=h.ci;console.log(e,t),h.setCellEnd(f.getSelectedCellRiCi(e,t))}))}})).on("compositionstart",(function(){h.chinese=!1})).on("compositionend",(function(){h.chinese=!0})).on("paste",(function(e){"black"===h.textEl.el.style["caret-color"]&&e.stopPropagation()})).on("copy",(function(e){"black"===h.textEl.el.style["caret-color"]&&e.stopPropagation()})).on("keydown",(function(e){g.call(h),h.textlineEl.html(e.currentTarget.innerText);var t=e.keyCode;if(38!==t&&40!==t||e.preventDefault(),115===t){var r=h.editorText.f4ShortcutKey(y.call(h)),n=r.inputText,a=r.pos;return O.call(h,null,n,n),void setTimeout((function(){h.pos=a,b.call(h,h.textEl.el,-1)}))}if("black"!==h.textEl.el.style["caret-color"]){var i=e.ctrlKey,o=e.metaKey;8===t||46===t?c.createEvent.call(h,8,!1):40===t?(h.clear(),c.createEvent.call(h,40,!1)):39===t?(h.clear(),c.createEvent.call(h,39,!1)):37===t?(h.clear(),c.createEvent.call(h,37,!1)):38===t?(h.clear(),c.createEvent.call(h,38,!1)):(i||o)&&(67===t?c.createEvent.call(h,67,!0):86===t?c.createEvent.call(h,86,!0):88===t?c.createEvent.call(h,88,!0):90===t?c.createEvent.call(h,90,!0):66===t&&c.createEvent.call(h,66,!0))}})),this.textlineEl=(0,n.h)("div","textline"),this.suggestContent.el,this.datepicker.el).on("mousemove.stop",(function(){})).on("mousedown.stop",(function(){})),m.el.child(this.suggest.el),this.el=(0,n.h)("div","".concat(o.cssPrefix,"-editor")).children(this.areaEl),this.suggest.bindInputEvents(this.textEl),this.textEl.on("paste",(function(e){!1!==S.call(h)&&function(e){e.preventDefault();var t="",r=(e.originalEvent||e).clipboardData;if(null==r){if(""!==(t=window.clipboardData.getData("text")||""))if(window.getSelection){var n=document.createElement("span");n.innerHTML=t,window.getSelection().getRangeAt(0).insertNode(n)}else document.selection.createRange().pasteHTML(t)}else""!==(t=r.getData("text/plain")||"")&&document.execCommand("insertText",!1,t)}(e)})),this.tmp=(0,n.h)("span","span_tmp").hide(),this.textEl.attr("contenteditable","true"),this.textEl.css("width","".concat(u-3,"px")),this.textEl.css("height","".concat(l-2,"px")),this.textEl.child(this.tmp),this.pos=0,this.areaOffset=null,this.freeze={w:0,h:0},this.cell=null,setTimeout((function(){h.show(!1)})),this.change=function(){}}var t,r,l;return t=e,(r=[{key:"setFreezeLengths",value:function(e,t){this.freeze.w=e,this.freeze.h=t}},{key:"setMouseDownIndex",value:function(e){this.mousedownIndex=e}},{key:"setRiCi",value:function(e,t){this.ri=e,this.ci=t}},{key:"setLock",value:function(e){this.lock=e}},{key:"getLock",value:function(){return this.lock}},{key:"show",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];e&&this.data.settings.showEditor?(this.textEl.css("caret-color","black"),this.textEl.css("cursor","text"),this.textEl.css("opacity","1"),this.textEl.el.focus(),this.areaEl.css("pointer-events","auto"),this.areaEl.css("border","2px solid #4b89ff"),this.areaEl.css("background","white")):(this.textEl.css("caret-color","white"),this.textEl.css("cursor","default"),this.textEl.css("opacity","0"),this.textEl.el.blur(),this.areaEl.css("pointer-events","none"),this.areaEl.css("background","rgba(75, 137, 255, 0)"),this.areaEl.css("border","none"))}},{key:"parse",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=this.editorText,r=t.getText();-1!==e?(this.pos=y.call(this),w.call(this,r,this.pos)):A.call(this,r)}},{key:"clear",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=this.editorText,n=r.getText();return this.display=S.call(this),""!==n&&isNaN(n)&&0===n.replace(/\s/g,"").lastIndexOf("¥")?this.change("format",n):this.changed&&this.change("finish",n),this.changed=!1,this.cell=null,this.areaOffset=null,r.setText(""),this.show(!1),this.copy=!1,b.call(this,this.textEl.el,-1),this.pos=0,this.tmp.hide(),this.textEl.html(""),this.textlineEl.html(""),T.call(this),M.call(this),this.datepicker.hide(),!t&&(setTimeout((function(){var t=e.data.selector,r=t.ri,n=t.ci;e.setRiCi(r,n)})),this.display)}},{key:"mount2span",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{suggestContent:!1,cut:"",pos:-1};if(this.spanArr!==e){var i,o=this.suggest.show;a.suggestContent&&!o?this.suggestContent.content(a.cut,a.pos):this.suggestContent.hide(),Object.keys(e).forEach((function(t){e[t].css("background-color","rgba(255,255,255,0.1)")})),"-1"!==t&&-1!==r&&e[t]&&(e[t].css("background-color","#e5e5e5"),e[r].css("background-color","#e5e5e5")),e.length>0&&(this.textEl.html(""),this.tmp=(i=(0,n.h)("span","span_tmp")).children.apply(i,v(e)).css("top","0px").css("color","black").css("font-size","14px").css("font-family","m-inconsolata,monospace,arial,sans,sans-serif"),this.textEl.el.insertBefore(this.tmp.el,this.textEl.el.childNodes[0]),b.call(this,this.textEl.el,-1)),this.spanArr=e}}},{key:"handler",value:function(e){var t=this.editorText.getText(),r=this.pos;if(r>=t)this.setMouseDownIndex([]);else{var n=e.substring(0,r),a=e.substring(r,e.length);A.call(this,n),""!==a?this.setMouseDownIndex([n,a]):this.setMouseDownIndex([])}}},{key:"setOffset",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.textEl,a=this.areaEl,i=this.suggest,o=this.freeze,l=this.el;if(e){this.areaOffset=e;var s=e.left,u=e.top,c=e.width,d=e.height,f=e.l,m=e.t,h={left:0,top:0};o.w>f&&o.h>m||(o.w<f&&o.h<m?(h.left=o.w,h.top=o.h):o.w>f?h.top=o.h:o.h>m&&(h.left=o.w)),l.offset(h),a.offset({left:s-h.left-.8,top:u-h.top-.8}),n.offset({width:c-2+.8,height:d-3+.8});var v={left:0};v[t]=d,i.hide(),g.call(this),r&&this.show(!1)}}},{key:"setCellEnd",value:function(e){var t=this,r="",n=e&&e.formulas||"";(0,m.isHave)(e)&&(0,m.isHave)(e.text)&&(r=e.text),(0,m.isHave)(e)&&(0,m.isHave)(e.formulas)&&(r=e.formulas);var a=this.data,i=a.rows,o=a.getCellStyleOrDefault(this.ri,this.ci),l=a.renderFormat(o,e,this.ri,this.ci,!0);l.state&&(r=l.cellText,n=l.cellText),this.textEl.child(r+""),this.pos=r.length,b.call(this,this.textEl.el,-1),this.editorText.setOldCell({text:e&&e.text||"",formulas:e&&e.formulas||""},{ri:this.ri,ci:this.ci}),f.testValid.call(this),O.call(this,null,r,n,"end"),setTimeout((function(){t.pos=i.toString(r).length,b.call(t,t.textEl.el,-1)}),20)}},{key:"setCell",value:function(e,t){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;this.cell=e,this.show();var a=e&&e.formulas||"";a=""===a?e&&e.text||"":a,this.editorText.setOldCell({text:e&&e.text||"",formulas:e&&e.formulas||""},{ri:this.ri,ci:this.ci});var i=this.el,o=this.datepicker,l=this.suggest;if(i.show(),this.textEl.show(),b.call(this,this.textEl.el,-1),setTimeout((function(){r.pos=a.length,b.call(r,r.textEl.el)}),10),this.validator=t,t){var s=t.type;"date"===s&&(o.show(),/^\s*$/.test(a)||o.setValue(a)),"list"===s&&(l.setItems(t.values()),l.search(""))}2===n&&""!==a&&"="===a[0]?(O.call(this,null,a),this.pos=a.length,b.call(this,this.textEl.el,a.length)):2===n&&"="!==a[0]&&this.textEl.child(a),setTimeout((function(){r.textlineEl.html(a),g.call(r)}))}},{key:"isDisplay2",value:function(){return S.call(this)}},{key:"setCursorPos",value:function(e){this.pos=e,b.call(this,this.textEl.el)}},{key:"setText",value:function(e){this.editorText.setText(e),N.call(this,e),g.call(this),this.textEl.child(this.tmp)}}])&&p(t.prototype,r),l&&p(t,l),e}();t.default=I},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(148))&&n.__esModule?n:{default:n},i=r(0),o=r(1),l=r(19);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calendar=new a.default(new Date),this.el=(0,i.h)("div","".concat(o.cssPrefix,"-datepicker")).child(this.calendar.el).hide()}var t,r,n;return t=e,(r=[{key:"setValue",value:function(e){var t=this.calendar;return"string"==typeof e?(0,l.str2Re)(l.calendarPattern).test(e)&&t.setValue(new Date(e.replace(new RegExp("-","g"),"/"))):e instanceof Date&&t.setValue(e),this}},{key:"change",value:function(e){var t=this;this.calendar.selectChange=function(r){e(r),t.hide()}}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){this.el.hide()}}])&&s(t.prototype,r),n&&s(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(12))&&n.__esModule?n:{default:n},o=r(9);function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){e.setMonth(e.getMonth()+t)}function c(e,t){var r=new Date(e);return r.setDate(t-e.getDay()+1),r}var d=function(){function e(t){var r,n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t,this.cvalue=new Date(t),this.headerLeftEl=(0,a.h)("div","calendar-header-left"),this.bodyEl=(0,a.h)("tbody",""),this.buildAll(),this.el=(0,a.h)("div","fin-cell-calendar").children((0,a.h)("div","calendar-header").children(this.headerLeftEl,(0,a.h)("div","calendar-header-right").children((0,a.h)("a","calendar-prev").on("click.stop",(function(){return n.prev()})).child(new i.default("chevron-left")),(0,a.h)("a","calendar-next").on("click.stop",(function(){return n.next()})).child(new i.default("chevron-right")))),(0,a.h)("table","calendar-body").children((0,a.h)("thead","").child((r=(0,a.h)("tr","")).children.apply(r,l((0,o.t)("calendar.weeks").map((function(e){return(0,a.h)("th","cell").child(e)}))))),this.bodyEl)),this.selectChange=function(){}}var t,r,n;return t=e,(r=[{key:"setValue",value:function(e){this.value=e,this.cvalue=new Date(e),this.buildAll()}},{key:"prev",value:function(){u(this.value,-1),this.buildAll()}},{key:"next",value:function(){u(this.value,1),this.buildAll()}},{key:"buildAll",value:function(){this.buildHeaderLeft(),this.buildBody()}},{key:"buildHeaderLeft",value:function(){var e=this.value;this.headerLeftEl.html("".concat((0,o.t)("calendar.months")[e.getMonth()]," ").concat(e.getFullYear()))}},{key:"buildBody",value:function(){var e,t=this,r=this.value,n=this.cvalue,i=this.bodyEl,o=function(e,t,r){for(var n=new Date(e,t,1,23,59,59),a=[[],[],[],[],[],[]],i=0;i<6;i+=1)for(var o=0;o<7;o+=1){var l=c(n,7*i+o),s=l.getMonth()!==t,u=l.getMonth()===r.getMonth()&&l.getDate()===r.getDate();a[i][o]={d:l,disabled:s,active:u}}return a}(r.getFullYear(),r.getMonth(),n).map((function(e){var r,n=e.map((function(e){var r="cell";return e.disabled&&(r+=" disabled"),e.active&&(r+=" active"),(0,a.h)("td","").child((0,a.h)("div",r).on("click.stop",(function(){t.selectChange(e.d)})).child(e.d.getDate().toString()))}));return(r=(0,a.h)("tr","")).children.apply(r,l(n))}));(e=i.html("")).children.apply(e,l(o))}}])&&s(t.prototype,r),n&&s(t,n),e}();t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(1),a=r(0),i=r(150),o=r(7);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r,n){for(var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"",l=(0,a.h)("div",n),s=0;s<e[t].length;s++){var u=e[t][s],c=u.name,d=u.editor,f=u.index;r===s?l.child((0,a.h)("span",i).child(c)):!0===d&&r>=f?l.child((0,a.h)("span",i).child(c)):l.child((0,a.h)("span",o).child(c))}return l}var u=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"300px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-suggest-content")).css("width",t).css("z-index","10000").css("position","absolute").hide(),this.el.attr("tabindex",0),(0,o.bind)(this.el.el,"paste",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"copy",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"keydown",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"keyup",(function(e){e.stopPropagation()}))}var t,r,u;return t=e,(r=[{key:"hide",value:function(){this.el.hide()}},{key:"content",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,o=this.el;t=t.toUpperCase();var l={};if(Object.keys(i.helpFormula).forEach((function(e){e===t&&(l=i.helpFormula[e])})),l&&"{}"!==JSON.stringify(l)){var u=[],c=s.call(this,l,"title",r,"".concat(n.cssPrefix,"-help-title"),"".concat(n.cssPrefix,"-help-span-title"),"".concat(n.cssPrefix,"-help-span2-title")),d=(0,a.h)("div","".concat(n.cssPrefix,"-help-section-title")).child("示例"),f=s.call(this,l,"example",r,"".concat(n.cssPrefix,"-help-section-content"),"".concat(n.cssPrefix,"-help-span3-title"));u.push.apply(u,[c,d,f]),Object.keys(l.content).forEach((function(e){var t=l.content[e],r=(0,a.h)("div","".concat(n.cssPrefix,"-help-section-title")).child(e),i=(0,a.h)("div","".concat(n.cssPrefix,"-help-section-content")).child(t);u.push.apply(u,[r,i])})),(e=o.html("")).children.apply(e,u).show()}}}])&&l(t.prototype,r),u&&l(t,u),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.helpFormula=void 0;t.helpFormula={ADD:{title:[{name:"ADD(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ADD(",editor:!1},{name:"2",editor:!1},{name:"，",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数值之和。相当于 + 运算符。",value1:"第一个加数。",value2:"第二个加数。"}},IRR:{title:[{name:"IRR(",editor:!1},{name:"values",editor:!1},{name:",",editor:!1},{name:"guess",editor:!1},{name:")",editor:!1}],example:[{name:"IRR(",editor:!1},{name:"A1:A10",editor:!1},{name:",",editor:!1},{name:"0.1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由数值代表的一组现金流的内部收益率。这些现金流不必为均衡的，但作为年金，它们必须按固定的间隔产生，如按月或按年。内部收益率为投资的回收利率，其中包含定期支付（负值）和定期收入（正值）。",values:"为数组或单元格的引用，包含用来计算返回的内部收益率的数字。至少各含一个正值和一个负值",guess:"对函数 IRR 计算结果的估计值，默认为0.1"}},SUM:{title:[{name:"SUM(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"[value2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUM(",editor:!1},{name:"A2:A100",editor:!1},{name:",",editor:!1},{name:"101",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一组数值和/或单元格的总和。",value1:"要相加的第一个数值或范围。",value2:"要与“value1”相加的其他数值或范围。"}},ABS:{title:[{name:"ABS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ABS(",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的绝对值。绝对值没有符号。",value:"需要计算其绝对值的实数。"}},SQRT:{title:[{name:"SQRT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SQRT(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回正平方根。",value:"要计算平方根的数。"}},CEILING:{title:[{name:"CEILING(",editor:!1},{name:"number",editor:!1},{name:",",editor:!1},{name:"significance",editor:!1},{name:")",editor:!1}],example:[{name:"CEILING(",editor:!1},{name:"10.4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"将参数 Number 向上舍入（沿绝对值增大的方向）为最接近的 significance 的倍数。",number:"所要四舍五入的数值。",significance:"用以进行舍入计算的倍数。"}},CONCATENATE:{title:[{name:"CONCATENATE(",editor:!1},{name:"text1",editor:!1},{name:"，",editor:!1},{name:"[text2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"CONCATENATE(",editor:!1},{name:"文本1",editor:!1},{name:"，",editor:!1},{name:"文本2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将两个或多个文本字符串合并为一个文本字符串。",text1:"待合并文本字符串",text2:"要与“text1”合并的其他待合并文本字符串。"}},PMT:{title:[{name:"PMT(",editor:!1},{name:"rate",editor:!1},{name:",",editor:!1},{name:"nper",editor:!1},{name:",",editor:!1},{name:"pv",editor:!1},{name:",",editor:!1},{name:"fv",editor:!1},{name:",",editor:!1},{name:"type",editor:!1},{name:")",editor:!1}],example:[{name:"PMT(",editor:!1},{name:"0.1",editor:!1},{name:",",editor:!1},{name:"120",editor:!1},{name:",",editor:!1},{name:"1000",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回贷款的每期付款额。",rate:"贷款利率。",nper:"该项贷款的付款期数。",pv:"现值，或一系列未来付款的当前值的累积和，也称为本金。",fv:"为未来值，或在最后一次付款后希望得到的现金余额，如果省略 fv，则假设其值为零，也就是一笔贷款的未来值为零。",type:"指定各期的付款时间是在期初还是期末。0或者省略为期初，1为期末"}},COUNTA:{title:[{name:"COUNTA(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"[value2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNTA(",editor:!1},{name:"A1",editor:!1},{name:"，",editor:!1},{name:"A5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数列表中非空值的单元格个数。",value1:"要计数的单元格",value2:"要计数的单元格"}},STDEV:{title:[{name:"STDEV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEV(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"估算基于样本的标准偏差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数。也可以用单一数组或对某个数组的引用来代替用逗号分隔的参数"}},AVERAGE:{title:[{name:"AVERAGE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3}],example:[{name:"AVERAGE(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3}],content:{abstract:"返回参数的平均值 (算术平均值)",value1:"要计算平均值的第一个数字、单元格引用或单元格区域",value2:"要计算平均值的其他数字、单元格引用或单元格区域，最多可包含 255 个"}},EXP:{title:[{name:"Exp(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"Exp(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 e 的 n 次幂",value1:"底数 e 的指数"}},LN:{title:[{name:"LN(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"LN(",editor:!1},{name:"86",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个数的自然对数",value1:"想要计算其自然对数的正实数"}},TRIM:{title:[{name:"TRIM(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TRIM(",editor:!1},{name:"(' First Quarter Earnings  ')",editor:!1},{name:")",editor:!1}],content:{abstract:"除了单词之间的单个空格外，清除文本中所有的空格",text:"需要删除其中空格的文本"}},HYPERLINK:{title:[{name:"HYPERLINK(",editor:!1},{name:"网址",editor:!1},{name:",",editor:!1},{name:"[链接标签]",editor:!1},{name:")",editor:!1}],example:[{name:"HYPERLINK(",editor:!1},{name:'"http://www.google.com/"',editor:!1},{name:",",editor:!1},{name:'"Google"',editor:!1},{name:")",editor:!1}],content:{abstract:"在单元格内创建一个超链接。",url:"以引号括住的链接位置的完整网址，或对包含这种网址的单元格的引用。",linktag:"用引号括住的要在单元格中作为链接显示的文字，或对包含此类标签的单元格的引用。"}},LEN:{title:[{name:"LEN(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"LEN(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中的字符数",text:"要查找其长度的文本,也可为单元格引用。空格将作为字符进行计数"}},ISBLANK:{title:[{name:"ISBLANK(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ISBLANK(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"检验指定值并根据参数取值返回 TRUE 或 FALSE",value1:"要检验的值。参数 value 可以是空白（空单元格）、错误值、逻辑值、文本、数字、引用值，或者引用要检验的以上任意值的名称"}},ACCRINT:{title:[{name:"ACCRINT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"利率",editor:!1},{name:",",editor:!1},{name:"票面值",editor:!1},{name:",",editor:!1},{name:"年付息次数",editor:!1},{name:")",editor:!1}],example:[{name:"ACCRINT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期付息证券的应计利息",date1:"证券的发行日",date2:"证券的首次计息日",date3:"证券的结算日。证券结算日是在发行日期之后，证券卖给购买者的日期",rate:"证券的年息票利率",price:"证券的票面值。如果省略此参数，则 ACCRINT 使用 ￥1,000",frequency:"年付息次数。如果按年支付，frequency = 1；按半年期支付，frequency = 2；按季支付，frequency = 4"}},ACCRINTM:{title:[{name:"ACCRINTM(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"利率",editor:!1},{name:"'",editor:!1},{name:"票面值",editor:!1},{name:")",editor:!1}],example:[{name:"ACCRINTM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:"'",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期一次性付息有价证券的应计利息",date1:"证券的发行日",date2:"证券的到期日",rate:"证券的年息票利率",price:"证券的票面值。如果省略此参数，则 ACCRINTM 使用 ￥1,000"}},ACOS:{title:[{name:"ACOS(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOS(",editor:!1},{name:"-0.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反余弦值",value1:"所需的角度余弦值，必须介于 -1 到 1 之间"}},ACOSH:{title:[{name:"ACOSH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOSH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 value1 参数的反双曲余弦值",value1:"大于等于 1 的任意实数"}},ACOT:{title:[{name:"ACOT(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOT(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反余切值的主值",value1:"value1 为所需角度的余切值。 此值必须是实数"}},ACOTH:{title:[{name:"ACOTH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOTH(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反双曲余切值",value1:"value1 的绝对值必须大于 1"}},AMORDEGRC:{title:[{name:"AMORDEGRC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],example:[{name:"AMORDEGRC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每个结算期间的折旧值",value1:"资产原值",date1:"购入资产的日期",date2:"第一个期间结束时的日期",value2:"资产在使用寿命结束时的残值",value3:"期间",depreciationrate:"折旧率"}},AMORLINC:{title:[{name:"AMORLINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"期间",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],example:[{name:"AMORLINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"期间",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每个结算期间的折旧值，该函数为法国会计系统提供。如果某项资产是在结算期间的中期购入的，则按线性折旧法计算",value1:"资产原值",date1:"购入资产的日期",date2:"第一个期间结束时的日期",value2:"资产在使用寿命结束时的残值",period:"期间",depreciationrate:"折旧率"}},AND:{title:[{name:"AND(",editor:!1},{name:"逻辑值1",editor:!1},{name:",",editor:!1},{name:"[逻辑值2,...]",editor:!0,index:3}],example:[{name:"AND(",editor:!1},{name:"A2>1",editor:!1},{name:",",editor:!1},{name:"A2<100",editor:!0,index:3}],content:{abstract:"所有参数的计算结果为 TRUE 时，AND 函数返回 TRUE；只要有一个参数的计算结果为 FALSE，即返回 FALSE",logic1:"第一个想要测试且计算结果可为 TRUE 或 FALSE 的条件",logic2:"其他想要测试且计算结果可为 TRUE 或 FALSE 的条件（最多 255 个条件）"}},ARABIC:{title:[{name:"ARABIC(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"ARABIC(",editor:!1},{name:"'LVII'",editor:!1},{name:")",editor:!1}],content:{abstract:"将罗马数字转换为阿拉伯数字",text:"用引号引起的字符串、空字符串 ('') 或对包含文本的单元格的引用"}},ASC:{title:[{name:"ASC(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"ASC(",editor:!1},{name:"'EXCEL' ",editor:!1},{name:")",editor:!1}],content:{abstract:"对于双字节字符集 (DBCS) 语言，将全角（双字节）字符更改为半角（单字节）字符",text:"文本或对包含要更改的文本的单元格的引用。如果文本中不包含任何全角字母，则文本不会更改"}},ASIN:{title:[{name:"ASIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ASIN(",editor:!1},{name:"-0.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反正弦值",value:"所需的角度正弦值，必须介于 -1 到 1 之间"}},ASINH:{title:[{name:"ASINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ASINH(",editor:!1},{name:"-2.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反双曲正弦值",value:"任意实数"}},ATAN:{title:[{name:"ATAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ATAN(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回反正切值",value:"所需的角度正切值"}},ATAN2:{title:[{name:"ATAN2(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ATAN2(",editor:!1},{name:"-1",editor:!1},{name:",",editor:!1},{name:"-1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定的 X 及 Y 坐标值的反正切值",value1:"点的 x 坐标",value2:"点的 y 坐标"}},ATANH:{title:[{name:"ATANH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ATANH(",editor:!1},{name:"-0.1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反双曲正切值，参数必须介于 -1 到 1 之间（除去 -1 和 1）",value:"-1 到 1 之间的任意实数"}},AVEDEV:{title:[{name:"AVEDEV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"AVEDEV(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据与其均值的绝对偏差的平均值，AVEDEV 用于评测这组数据的离散度",value1:"任意实数",value2:"用于计算绝对偏差平均值的一组参数，参数的个数可以为 1 到 255 个"}},AVERAGEA:{title:[{name:"AVERAGEA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"AVERAGEA(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"计算参数列表中数值的平均值",value1:"任意实数",value2:"需要计算平均值的 1 到 255 个单元格、单元格区域或值"}},AVERAGEIF:{title:[{name:"AVERAGEIF(",editor:!1},{name:"引用范围",editor:!1},{name:",",editor:!1},{name:"标准条件",editor:!1},{name:")",editor:!1}],example:[{name:"AVERAGEIF(",editor:!1},{name:"B2:B5",editor:!1},{name:",",editor:!1},{name:"'<23000'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个区域内满足给定条件的所有单元格的平均值（算术平均值）",referencearea:"要计算平均值的一个或多个单元格，其中包括数字或包含数字的名称、数组或引用",standardcondition:"数字、表达式、单元格引用或文本形式的条件，用于定义要对哪些单元格计算平均值"}},AVERAGEIFS:{title:[{name:"AVERAGEIFS(",editor:!1},{name:"引用范围",editor:!1},{name:",",editor:!1},{name:"标准条件_适用范围1",editor:!1},{name:",",editor:!1},{name:"标准条件1",editor:!1},{name:",",editor:!1},{name:"[标准条件_适用范围2,标准条件2,...]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"AVERAGEIFS(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"C2:C7",editor:!1},{name:",",editor:!1},{name:"毕尔褔",editor:!1},{name:",",editor:!1},{name:"D2:D7",editor:!1},{name:",",editor:!1},{name:"'>2'",editor:!1},{name:",",editor:!1},{name:"E2:E7",editor:!1},{name:",",editor:!1},{name:"'是'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回满足多重条件的所有单元格的平均值（算术平均值）",referencearea:"要计算平均值的一个或多个单元格，其中包括数字或包含数字的名称、数组或引用",standardcondition_area1:"要计算平均值的实际单元格集",standardcondition1:"定义要对适用范围1中的哪些单元格计算平均值",standardcondition_area2:"适用范围及其对应的标准条件"}},BAHTTEXT:{title:[{name:"BAHTTEXT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"BAHTTEXT(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字转换为泰语文本并添加后缀“泰铢”",value:"要转换成文本的数字、对包含数字的单元格的引用或结果为数字的公式"}},BASE:{title:[{name:"BASE(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"基",editor:!1},{name:",",editor:!1},{name:"[最小长度]",editor:!0,index:6},{name:")",editor:!1}],example:[{name:"BASE(",editor:!1},{name:"15",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"10",editor:!0,index:6},{name:")",editor:!1}],content:{abstract:"将数字转换为具备给定基数的文本表示",value:"要转换的数字。 必须是大于或等于0且小于 2 ^ 53 的整数",basic:"要将数字转换为的基础基数。 必须是大于或等于2且小于或等于36的整数",minlength:"返回的字符串的最小长度。 必须是大于或等于0的整数"}},BESSELI:{title:[{name:"BESSELI(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELI(",editor:!1},{name:"1.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回修正 Bessel 函数值，它与用纯虚数参数运算时的 Bessel 函数值相等",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELJ:{title:[{name:"BESSELJ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELJ(",editor:!1},{name:"1.9",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Bessel 函数值",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELK:{title:[{name:"BESSELK(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELK(",editor:!1},{name:"1.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回修正 Bessel 函数值，它与用纯虚数参数运算时的 Bessel 函数值相等",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELY:{title:[{name:"BESSELY(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELY(",editor:!1},{name:"2.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Bessel 函数值，也称为 Weber 函数或 Neumann 函数",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},"BETA.DIST":{title:[{name:"BETA.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"逻辑值",editor:!1},{name:",",editor:!1},{name:"[下界]",editor:!0,index:10},{name:",",editor:!1},{name:"[上界]",editor:!0,index:12},{name:")",editor:!1}],example:[{name:"BETA.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"True",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:10},{name:",",editor:!1},{name:"A6",editor:!0,index:12},{name:")",editor:!1}],content:{abstract:"返回 Beta 分布",value1:"介于 A 和 B 之间用来进行函数计算的值",value2:"分布参数",value3:"分布参数",logic:"决定函数形式的逻辑值。如果 cumulative 为 TRUE，BETA.DIST 返回累积分布函数；如果为 FALSE，则返回概率密度函数",lowbound:"value1所属区间的下界",upbound:"value1所属区间的上界"}},"BETA.INV":{title:[{name:"BETA.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[下界]",editor:!0,index:8},{name:",",editor:!1},{name:"[上界]",editor:!0,index:10},{name:")",editor:!1}],example:[{name:"BETA.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:8},{name:",",editor:!1},{name:"A6",editor:!0,index:10},{name:")",editor:!1}],content:{abstract:"返回 Beta 累积概率密度函数 (BETA.DIST) 的反函数",value1:"与 beta 分布相关的概率",value2:"分布参数",value3:"分布参数",lowbound:"value1所属区域的下界",upbound:"value1所属区域的上界"}},BIN2DEC:{title:[{name:"BIN2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2DEC(",editor:!1},{name:"1100100",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为十进制数",value:"希望转换的二进制数"}},BIN2HEX:{title:[{name:"BIN2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2HEX(",editor:!1},{name:"11111011",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为十六进制数",value1:"希望转换的二进制数",value2:"要使用的字符数"}},BIN2OCT:{title:[{name:"BIN2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2OCT(",editor:!1},{name:"1001",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为八进制数",value1:"希望转换的二进制数",value2:"要使用的字符数"}},"BINOM.DIST":{title:[{name:"BINOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"BINOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回二项式分布的概率",value1:"试验成功的次数",value2:"独立试验的次数",value3:"每次试验中成功的概率",value4:"决定函数形式的逻辑值"}},"BINOM.INV":{title:[{name:"BINOM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"BINOM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回使累积二项式分布大于等于临界值的最小值",value1:"伯努利试验次数",value2:"每次试验中成功的概率",value3:"临界值"}},BITAND:{title:[{name:"BITAND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITAND(",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"25",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数的按位“与”",value1:"必须为十进制格式且大于等于 0",value2:"必须为十进制格式且大于等于 0"}},BITLSHIFT:{title:[{name:"BITLSHIFT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITLSHIFT(",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回向左移动指定位数后的数值",value1:"必须是大于或等于0的整数",value2:"必须是整数"}},BITOR:{title:[{name:"BITOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITOR(",editor:!1},{name:"23",editor:!1},{name:",",editor:!1},{name:"10",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数的按位“或”",value1:"必须为十进制格式且大于等于 0",value2:"必须为十进制格式且大于等于 0"}},BITRSHIFT:{title:[{name:"BITRSHIFT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITRSHIFT(",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回向右移动指定位数后的数值",value1:"必须是大于或等于0的整数",value2:"必须是整数"}},BITXOR:{title:[{name:"BITXOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITXOR(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数值的按位“异或”结果",value1:"必须大于或等于 0",value2:"必须大于或等于 0"}},"CEILING.MATH":{title:[{name:"CEILING.MATH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"CEILING.MATH(",editor:!1},{name:"-5.5",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:",",editor:!1},{name:"-1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字向上舍入为最接近的整数或最接近的指定基数的倍数",value1:"必须小于 9.99 E + 307 且大于-2.229 E-308",value2:"要将数字舍入到的倍数",value3:"对于负数, 控制数字是舍入还是远离零"}},"CEILING.PRECISE":{title:[{name:"CEILING.PRECISE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"CEILING.PRECISE(",editor:!1},{name:"4.3",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向上舍入为最接近的整数或最接近的有效位的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的倍数,如果省略，则其默认值为 1"}},CELL:{title:[{name:"CELL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"CELL(",editor:!1},{name:"“row”",editor:!1},{name:",",editor:!1},{name:"A20",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有关单元格的格式、位置或内容的信息",value1:"一个文本值，指定要返回的单元格信息的类型",value2:"需要其相关信息的单元格。如果省略，则将 value1 参数中指定的信息返回给最后更改的单元格。如果参数 value2 是某一单元格区域，则函数只将该信息返回给该区域左上角的单元格"}},CHAR:{title:[{name:"CHAR(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CHAR(",editor:!1},{name:"65",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于数字代码的字符",value:"介于 1 到 255 之间用于指定所需字符的数字"}},CHIDIST:{title:[{name:"CHIDIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHIDIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的右尾概率",value1:"用来计算分布的值",value2:"自由度的数值"}},CHIINV:{title:[{name:"CHIINV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHIINV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的右尾概率的反函数",value1:"与 χ2 分布相关的概率",value2:"自由度的数值"}},"CHISQ.DIST":{title:[{name:"CHISQ.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.DIST(",editor:!1},{name:"0.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布",value1:"用来计算分布的值",value2:"自由度数",value3:"决定函数形式的逻辑值。如果为 TRUE，则返回累积分布函数；如果为 FALSE，则返回概率密度函数"}},"CHISQ.INV":{title:[{name:"CHISQ.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.INV(",editor:!1},{name:"0.93",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的左尾概率的反函数",value1:"与 χ2 分布相关联的概率",value2:"自由度数"}},"CHISQ.TEST":{title:[{name:"CHISQ.TEST(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.TEST(",editor:!1},{name:"A2:B4",editor:!1},{name:",",editor:!1},{name:"A6:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回独立性检验值",area1:"包含观察值的数据区域，用于检验预期值",area2:"包含行列汇总的乘积与总计值之比率的数据区域"}},CHOOSE:{title:[{name:"CHOOSE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"CHOOSE(",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"使用 value1 返回数值参数列表中的数值",value1:"指定所选定的值参数。value1 必须为 1 到 254 之间的数字，或者为公式或对包含 1 到 254 之间某个数字的单元格的引用",value2:"value2 是必需的，后续值是可选的。可以为数字、单元格引用、已定义名称、公式、函数或文本",value3:"可以为数字、单元格引用、已定义名称、公式、函数或文本"}},CLEAN:{title:[{name:"CLEAN(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"CLEAN(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"删除文本中不能打印的字符",text:"要从中删除非打印字符的任何工作表信息"}},CODE:{title:[{name:"CODE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"CODE(",editor:!1},{name:"“A”",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中第一个字符的数字代码",text:"需要得到其第一个字符代码的文本"}},COLUMN:{title:[{name:"COLUMN(",editor:!1},{name:"[数值]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"COLUMN(",editor:!1},{name:"C10",editor:!0,index:1},{name:")",editor:!1}],content:{abstract:"返回指定单元格引用的列号",value:"要返回其列号的单元格或单元格区域"}},COLUMNS:{title:[{name:"COLUMNS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"COLUMNS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数组或引用的列数",array:"需要得到其列数的数组、数组公式或对单元格区域的引用"}},COMBIN:{title:[{name:"COMBIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"COMBIN(",editor:!1},{name:"8",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"计算从给定数目的对象集合中提取若干对象的组合数",value1:"项目的数量",value2:"每一组合中项目的数量"}},COMBINA:{title:[{name:"COMBINA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"COMBINA(",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定数目的项的组合数（包含重复）",value1:"必须大于或等于 0 并大于或等于 Number_chosen。 非整数值将被截尾取整",value2:"必须大于或等于 0。 非整数值将被截尾取整"}},COMPLEX:{title:[{name:"COMPLEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[后缀]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"COMPLEX(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"“j”",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将实系数及虚系数转换为 x+yi 或 x+yj 形式的复数",value1:"复数的实部",value2:"复数的虚部",suffix:"复数中虚部的后缀，如果省略，则认为它为 i"}},CONFIDENCE:{title:[{name:"CONFIDENCE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"CONFIDENCE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"使用正态分布返回总体平均值的置信区间",value1:"用于计算置信度的显著水平参数",value2:"数据区域的总体标准偏差,假设为已知",value3:"样本容量"}},CONVERT:{title:[{name:"CONVERT(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"单位1",editor:!1},{name:",",editor:!1},{name:"单位2",editor:!1},{name:")",editor:!1}],example:[{name:"CONVERT(",editor:!1},{name:"1.0",editor:!1},{name:",",editor:!1},{name:"'lbm'",editor:!1},{name:",",editor:!1},{name:"'kg'",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字从一个度量系统转换到另一个度量系统中",value:"以单位1为单位的需要进行转换的数值",unit1:"数值的单位",unit2:"结果的单位"}},CORREL:{title:[{name:"CORREL(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"CORREL(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回单元格区域 array1 和 array2 之间的相关系数",array1:"第一组数值单元格区域",array2:"第二组数值单元格区域"}},COS:{title:[{name:"COS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COS(",editor:!1},{name:"1.047",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定角度的余弦值",value:"想要求余弦的角度，以弧度表示"}},COTH:{title:[{name:"COTH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COTH(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个双曲角度的双曲余切值",value:"想要求双曲余弦值的角度值"}},COUNT:{title:[{name:"COUNT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNT(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"计算包含数字的单元格以及参数列表中数字的个数",value1:"要计算其中数字的个数的第一个项、单元格引用或区域",value2:"要计算其中数字的个数的其他项、单元格引用或区域，最多可包含 255 个"}},COUNTBLANK:{title:[{name:"COUNTBLANK(",editor:!1},{name:"区域",editor:!1},{name:")",editor:!1}],example:[{name:"COUNTBLANK(",editor:!1},{name:"A2:B5",editor:!1},{name:")",editor:!1}],content:{abstract:"计算指定单元格区域中空白单元格的个数",area:"需要计算其中空白单元格个数的区域"}},COUNTIF:{title:[{name:"COUNTIF(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"标准条件",editor:!1},{name:")",editor:!1}],example:[{name:"COUNTIF(",editor:!1},{name:"A2:A7",editor:!1},{name:",",editor:!1},{name:"'?果'",editor:!1},{name:")",editor:!1}],content:{abstract:"对区域中满足单个指定条件的单元格进行计数",area:"要对其进行计数的一个或多个单元格，其中包括数字或名称、数组或包含数字的引用。空值和文本值将被忽略",standardcondition:"用于定义将对哪些单元格进行计数的数字、表达式、单元格引用或文本字符串"}},COUNTIFS:{title:[{name:"COUNTIFS(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"标准条件1",editor:!1},{name:",",editor:!1},{name:"[区域2,标准条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNTIFS(",editor:!1},{name:"B2:D2",editor:!1},{name:",",editor:!1},{name:"'=是'",editor:!1},{name:")",editor:!1}],content:{abstract:"将条件应用于跨多个区域的单元格，并计算符合所有条件的次数",area1:"在其中计算关联条件的第一个区域",standardcondition1:"条件的形式为数字、表达式、单元格引用或文本，可用来定义将对哪些单元格进行计数",standardcondition2:"附加的区域及其关联条件。最多允许 127 个区域/条件对"}},COUPDAYBS:{title:[{name:"COUPDAYBS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYBS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从付息期开始到结算日的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPDAYS:{title:[{name:"COUPDAYS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回结算日所在的付息期的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPDAYSNC:{title:[{name:"COUPDAYSNC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYSNC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从结算日到下一付息日之间的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPNCD:{title:[{name:"COUPNCD",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPNCD",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个表示在结算日之后下一个付息日的数字",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPNUM:{title:[{name:"COUPNUM(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPNUM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在结算日和到期日之间的付息次数，向上舍入到最近的整数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPPCD:{title:[{name:"COUPPCD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPPCD(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示结算日之前的上一个付息日的数字",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COVAR:{title:[{name:"COVAR(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVAR(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回协方差，即两个数据集中每对数据点的偏差乘积的平均数",array1:"第一个所含数据为整数的单元格区域",array2:"第二个所含数据为整数的单元格区域"}},"COVARIANCE.P":{title:[{name:"COVARIANCE.P(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVARIANCE.P(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回总体协方差，即两个数据集中每对数据点的偏差乘积的平均数",array1:"第一个所含数据为整数的单元格区域",array2:"第二个所含数据为整数的单元格区域"}},"COVARIANCE.S":{title:[{name:"COVARIANCE.S(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVARIANCE.S(",editor:!1},{name:"A3:A5",editor:!1},{name:",",editor:!1},{name:"B3:B5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回样本协方差，即两个数据集中每对数据点的偏差乘积的平均值",array1:"整数的第一个单元格区域",array2:"整数的第二个单元格区域"}},CSC:{title:[{name:"CSC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CSC(",editor:!1},{name:"15",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的余割值，以弧度表示",value:"要求余割值的角度值"}},CSCH:{title:[{name:"CSCH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CSCH(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的双曲余割值，以弧度表示",value:"要求双曲余割值的角度值"}},CUMIPMT:{title:[{name:"CUMIPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:",",editor:!1},{name:"value6",editor:!1},{name:")",editor:!1}],example:[{name:"CUMIPMT(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3*12",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一笔贷款在给定的 value4 到 value5 期间累计偿还的利息数额",value1:"利率",value2:"总付款期数",value3:"现值",value4:"计算中的首期。 付款期数从 1 开始计数",value5:"计算中的末期",value6:"付款时间类型"}},CUMPRINC:{title:[{name:"CUMPRINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:",",editor:!1},{name:"value6",editor:!1},{name:")",editor:!1}],example:[{name:"CUMPRINC(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3*12",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一笔贷款在给定的 start_period 到 end_period 期间累计偿还的本金数额",value1:"利率",value2:"总付款期数",value3:"现值",value4:"计算中的首期。 付款期数从 1 开始计数",value5:"计算中的末期",value6:"付款时间类型"}},DATE:{title:[{name:"DATE(",editor:!1},{name:"年",editor:!1},{name:",",editor:!1},{name:"月",editor:!1},{name:",",editor:!1},{name:"日",editor:!1},{name:")",editor:!1}],example:[{name:"DATE(",editor:!1},{name:"2008",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示特定日期的连续序列号",year:"年",month:"月",day:"日"}},DATEVALUE:{title:[{name:"DATEVALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"DATEVALUE(",editor:!1},{name:"'8/22/2008'",editor:!1},{name:")",editor:!1}],content:{abstract:"可将存储为文本的日期转换为 Excel 识别为日期的序列号",text:"表示 Excel 日期格式的日期的文本，或者是对表示 Excel 日期格式的日期的文本所在单元格的单元格引用"}},DAVERAGE:{title:[{name:"DAVERAGE(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DAVERAGE(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"A4:E10",editor:!1},{name:")",editor:!1}],content:{abstract:"对列表或数据库中满足指定条件的记录字段（列）中的数值求平均值",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"是包含所指定条件的单元格区域"}},DAY:{title:[{name:"DAY(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"DAY(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以序列号表示的某日期的天数，用整数 1 到 31 表示",date:"要查找的那一天的日期"}},DAYS:{title:[{name:"DAYS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"DAYS(",editor:!1},{name:"'2011-3-15'",editor:!1},{name:",",editor:!1},{name:"'2011-2-1'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个日期之间的天数",date1:"用于计算期间天数的起始日期",date2:"用于计算期间天数的终止日期"}},DAYS360:{title:[{name:"DAYS360(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"DAYS360(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"按照一年 360 天的算法（每个月以 30 天计，一年共计 12 个月），返回两日期间相差的天数，这在一些会计计算中将会用到",date1:"要计算期间天数的起始日期",date2:"要计算期间天数的终止日期"}},DB:{title:[{name:"DB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:10},{name:")",editor:!1}],example:[{name:"DB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"7",editor:!0,index:10},{name:")",editor:!1}],content:{abstract:"使用固定余额递减法，计算一笔资产在给定期间内的折旧值",value1:"资产原值",value2:"资产在折旧期末的价值",value3:"资产的折旧期数",value4:"需要计算折旧值的期间",value5:"第一年的月份数，如省略，则假设为 12"}},DBCS:{title:[{name:"DBCS(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"DBCS(",editor:!1},{name:"EXCEL",editor:!1},{name:")",editor:!1}],content:{abstract:"将字符串中的半角（单字节）字母转换为全角（双字节）字符",text:"文本或包含要转换的文本的单元格的引用"}},DCOUNT:{title:[{name:"DCOUNT(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DCOUNT(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Age'",editor:!1},{name:",",editor:!1},{name:"A1:F2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中包含数字的单元格的个数",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DCOUNTA:{title:[{name:"DCOUNTA(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DCOUNTA(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Profit'",editor:!1},{name:",",editor:!1},{name:"A1:F2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的非空单元格的个数",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DDB:{title:[{name:"DDB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"DDB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"1.5",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"使用双倍余额递减法或其他指定方法，计算一笔资产在给定期间内的折旧值",value1:"资产原值",value2:"资产在折旧期末的价值（有时也称为资产残值）。此值可以是 0",value3:"资产的折旧期数",value4:"需要计算折旧值的期间",value5:"余额递减速率"}},DEC2BIN:{title:[{name:"DEC2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2BIN(",editor:!1},{name:"9",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为二进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DEC2HEX:{title:[{name:"DEC2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2HEX(",editor:!1},{name:"100",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为十六进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DEC2OCT:{title:[{name:"DEC2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2OCT(",editor:!1},{name:"58",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为八进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DECIMAL:{title:[{name:"DECIMAL(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"数制",editor:!1},{name:")",editor:!1}],example:[{name:"DECIMAL(",editor:!1},{name:"'FF'",editor:!1},{name:",",editor:!1},{name:"16",editor:!1},{name:")",editor:!1}],content:{abstract:"按给定基数将数字的文本表示形式转换成十进制数",text:"所要转换的文本",numtype:"转换所用的数制,必须是整数"}},DEGREES:{title:[{name:"DEGREES(",editor:!1},{name:"弧度角",editor:!1},{name:")",editor:!1}],example:[{name:"DEGREES(",editor:!1},{name:"PI()",editor:!1},{name:")",editor:!1}],content:{abstract:"将弧度转换为度",arctangle:"待转换的弧度角"}},DELTA:{title:[{name:"DELTA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DELTA(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"测试两个数值是否相等",value1:"第一个数字",value2:"第二个数字。如果省略，假设 Number2 的值为零"}},DEVSQ:{title:[{name:"DEVSQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEVSQ(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据点与各自样本平均值偏差的平方和",value1:"必需",value2:"参数的个数可以为 1 到 255 个"}},DGET:{title:[{name:"DGET(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DGET(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Yield'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"从列表或数据库的列中提取符合指定条件的单个值",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DISC:{title:[{name:"DISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"DISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有价证券的贴现率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的价格（按面值为 ￥100 计算）",value2:"有价证券的兑换值（按面值为 ￥100 计算）"}},DMAX:{title:[{name:"DMAX(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DMAX(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'利润'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的最大数字",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DMIN:{title:[{name:"DMIN(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DMIN(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Profit'",editor:!1},{name:",",editor:!1},{name:"A1:B2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的最小数字",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DOLLAR:{title:[{name:"DOLLAR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DOLLAR(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字转换为货币格式使用小数位数舍入到您指定的位数的文本",value1:"数字、对包含数字的单元格的引用或是计算结果为数字的公式",value2:"数值小数点右边的位数"}},DOLLARDE:{title:[{name:"DOLLARDE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"DOLLARDE(",editor:!1},{name:"1.02",editor:!1},{name:",",editor:!1},{name:"16",editor:!1},{name:")",editor:!1}],content:{abstract:"将以整数部分和分数部分表示的价格（例如 1.02）转换为以小数部分表示的价格",value1:"以整数部份和分数部分表示的数字，用小数点隔开",value2:"用作分数中的分母的整数"}},DPRODUCT:{title:[{name:"DPRODUCT(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DPRODUCT(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的数值的乘积",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSTDEV:{title:[{name:"DSTDEV(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSTDEV(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体标准偏差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSTDEVP:{title:[{name:"DSTDEVP(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSTDEVP(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为样本总体计算出的总体标准偏差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSUM:{title:[{name:"DSUM(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSUM(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'利润'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的数字之和",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DURATION:{title:[{name:"DURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"DURATION(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回假设面值为 ￥ 100 的 Macauley 工期",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",returnrate:"有价证券的年收益率",frequency:"年付息次数"}},DVAR:{title:[{name:"DVAR(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DVAR(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'产量",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体方差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DVARP:{title:[{name:"DVARP(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DVARP(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'产量",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"通过使用列表或数据库中满足指定条件的记录字段（列）中的数字计算样本总体的样本总体方差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},EDATE:{title:[{name:"EDATE(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EDATE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示某个日期的序列号，该日期与指定日期 (start_date) 相隔（之前或之后）指示的月份数",date:"一个代表开始日期的日期",value:"日期之前或之后的月份数"}},EFFECT:{title:[{name:"EFFECT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"EFFECT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"利用给定的名义年利率和每年的复利期数，计算有效的年利率",value1:"名义利率",value2:"每年的复利期数"}},EOMONTH:{title:[{name:"EOMONTH(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EOMONTH(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个月份最后一天的序列号，该月份与 日期 相隔（之后或之后）指示的月份数",date:"表示开始日期的日期",value:"日期 之前或之后的月份数"}},ERF:{title:[{name:"ERF(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ERF(",editor:!1},{name:"0.745",editor:!1},{name:")",editor:!1}],content:{abstract:"返回误差函数在上下限之间的积分",value1:"函数的积分下限",value2:"函数的积分上限。 如果省略，ERF 积分将在零到 lower_limit 之间"}},ERFCPRECISE:{title:[{name:"ERFCPRECISE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ERFCPRECISE(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从 数值 到无穷大积分的互补 ERF 函数",value:"函数的积分下限"}},"ERROR.TYPE":{title:[{name:"ERROR.TYPE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ERROR.TYPE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于 Microsoft Excel 中的错误值之一的数字或返回“#N/A”错误（如果不存在错误）",value:"要查找其标识号的错误值"}},EVEN:{title:[{name:"EVEN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EVEN(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字向上舍入到的最接近的偶数",value:"要舍入的值"}},EXACT:{title:[{name:"EXACT(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:")",editor:!1}],example:[{name:"EXACT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"B2",editor:!1},{name:")",editor:!1}],content:{abstract:"比较两个文本字符串，如果它们完全相同，则返回 TRUE，否则返回 FALSE",text1:"第一个文本字符串",text2:"第二个文本字符串"}},"EXPON.DIST":{title:[{name:"EXPON.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"EXPON.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指数分布",value1:"函数值",value2:"参数值",value3:"逻辑值，用于指定指数函数的形式"}},"F.DIST":{title:[{name:"F.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"F.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 F 概率分布函数的函数值",value1:"用来计算函数的值",value2:"分子自由度",value3:"分母自由度",value4:"决定函数形式的逻辑值"}},"F.INV":{title:[{name:"F.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 F 概率分布函数的反函数值",value1:"F 累积分布的概率值",value2:"分子自由度",value3:"分母自由度"}},"F.TEST":{title:[{name:"F.TEST(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"F.TEST(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断两个样本的方差是否不同",array1:"第一个数组或数据区域",array2:"第二个数组或数据区域"}},FACT:{title:[{name:"FACT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FACT(",editor:!1},{name:"5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某数的阶乘",value:"要计算其阶乘的非负数"}},FACTDOUBLE:{title:[{name:"FACTDOUBLE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FACTDOUBLE(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双倍阶乘",value:"要计算其双倍阶乘的数值"}},FALSE:{title:[{name:"FALSE(",editor:!1},{name:")",editor:!1}],example:[{name:"FALSE(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回逻辑值 FALSE"}},"F.DIST.RT":{title:[{name:"F.DIST.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.DIST.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数据集的（右尾）F 概率分布（变化程度）",value1:"用来计算函数的值",value2:"分子自由度",value3:"分母自由度"}},FIND:{title:[{name:"FIND(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FIND(",editor:!1},{name:"'M'",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"用于在文本2中定位文本1，并返回文本1的起始位置的值，该值从文本2的第一个字符算起",text1:"要查找的文本",text2:"包含要查找文本的文本"}},"F.INV.RT":{title:[{name:"F.INV.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.INV.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回（右尾）F 概率分布函数的反函数值",value1:"F 累积分布的概率值",value2:"分子自由度",value3:"分母自由度"}},FISHER:{title:[{name:"FISHER(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FISHER(",editor:!1},{name:"0.75",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的 Fisher 变换值",value:"要对其进行变换的数值"}},FISHERINV:{title:[{name:"FISHERINV(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FISHERINV(",editor:!1},{name:"0.972955",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Fisher 逆变换值",value:"要对其进行逆变换的数值"}},FIXED:{title:[{name:"FIXED(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FIXED(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"-1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字舍入到指定的小数位数，使用句点和逗号，以十进制数格式对该数进行格式设置，并以文本形式返回结果",value1:"要进行舍入并转换为文本的数字",value2:"小数点右边的位数",value3:"一个逻辑值，如果为 TRUE，则会禁止 FIXED 在返回的文本中包含逗号"}},FLOOR:{title:[{name:"FLOOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"FLOOR(",editor:!1},{name:"3.7",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将参数 value1 向下舍入（沿绝对值减小的方向）为最接近的 value2 的倍数",value1:"要舍入的数值",value2:"要舍入到的倍数"}},"FLOOR.MATH":{title:[{name:"FLOOR.MATH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FLOOR.MATH(",editor:!1},{name:"-5.5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"-1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字向下舍入为最接近的整数或最接近的指定基数的倍数",value1:"要向下舍入的数字",value2:"要舍入到的倍数",value3:"舍入负数的方向（接近或远离 0）"}},"FLOOR.PRECISE":{title:[{name:"FLOOR.PRECISE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"FLOOR.PRECISE(",editor:!1},{name:"-3.2",editor:!1},{name:",",editor:!1},{name:"-1",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向下舍入为最接近的整数或最接近的 value2 的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的倍数。如果省略,则其默认值为 1"}},FORECAST:{title:[{name:"FORECAST(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"FORECAST(",editor:!1},{name:"30",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"根据现有值计算或预测未来值",value:"需要进行值预测的数据点",area1:"相关数组或数据区域",area2:"独立数组或数据区域"}},FREQUENCY:{title:[{name:"FREQUENCY(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"FREQUENCY(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"B2:B4",editor:!1},{name:")",editor:!1}],content:{abstract:"函数计算值在某个范围内出现的频率, 然后返回一个垂直的数字数组",array1:" 要对其频率进行计数的一组数值或对这组数值的引用",array2:" 要将 array1 中的值插入到的间隔数组或对间隔的引用"}},FV:{title:[{name:"FV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"FV(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:7},{name:",",editor:!1},{name:"A6",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"用于根据固定利率计算投资的未来值",value1:"各期利率",value2:"年金的付款总期数",value3:"各期所应支付的金额，在整个年金期间保持不变",value4:" 现值，或一系列未来付款的当前值的累积和。 如果省略 value4，则假定其值为 0",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末。如果省略 value5，则假定其值为 0"}},FVSCHEDULE:{title:[{name:"FVSCHEDULE(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"FVSCHEDULE(",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"{0.09,0.11,0.1}",editor:!1},{name:")",editor:!1}],content:{abstract:"返回应用一系列复利率计算的初始本金的未来值",value:"现值",array:"要应用的利率数组"}},GAMMA:{title:[{name:"GAMMA(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA(",editor:!1},{name:"2.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 gamma 函数值",value:"返回一个数字"}},"GAMMA.DIST":{title:[{name:"GAMMA.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛分布函数的函数值",value1:"用来计算分布的数值",value2:"分布参数",value3:"分布参数",value4:"决定函数形式的逻辑值"}},"GAMMA.INV":{title:[{name:"GAMMA.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛累积分布函数的反函数值",value1:"伽玛分布相关的概率",value2:"分布参数",value3:"分布参数"}},GAMMALN:{title:[{name:"GAMMALN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMALN(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛函数的自然对数",value:"要计算其 GAMMALN 的数值"}},"GAMMALN.PRECISE":{title:[{name:"GAMMALN.PRECISE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMALN.PRECISE(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛函数的自然对数",value:"要计算其 GAMMALN.PRECISE 的数值"}},GAUSS:{title:[{name:"GAUSS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAUSS(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"计算标准正态总体的成员处于平均值与平均值的 z 倍标准偏差之间的概率",value:"返回一个数字"}},GCD:{title:[{name:"GCD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GCD(",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"36",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回两个或多个整数的最大公约数",value1:"任意实数",value2:"任意实数,个数介于 1 和 255 之间"}},GEOMEAN:{title:[{name:"GEOMEAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GEOMEAN(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组正数数据或正数数据区域的几何平均值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},GESTEP:{title:[{name:"GESTEP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GESTEP(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"可以使用此函数来筛选一组值",value1:"要针对步骤进行测试的值",value2:"如果省略，则 GESTEP 使用零"}},GROWTH:{title:[{name:"GROWTH(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"GROWTH(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"A2:A7",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"使用现有数据计算预测的指数等比",set1:"关系表达式 y = b*m^x 中已知的 y 值集合",set2:"关系表达式 y=b*m^x 中已知的 x 值集合",value1:" 需要 GROWTH 返回对应 y 值的新 x 值",value2:" 一个逻辑值，用于指定是否将常量 b 强制设为 1"}},HARMEAN:{title:[{name:"HARMEAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HARMEAN(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的调和平均值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},HEX2BIN:{title:[{name:"HEX2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HEX2BIN(",editor:!1},{name:"'F'",editor:!1},{name:",",editor:!1},{name:"8",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为二进制数",value1:"要转换的十六进制数",value2:"要使用的字符数"}},HEX2DEC:{title:[{name:"HEX2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"HEX2DEC(",editor:!1},{name:"'FFFFFFFF5B'",editor:!1},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为十进制数",value:"要转换的十六进制数"}},HEX2OCT:{title:[{name:"HEX2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HEX2OCT(",editor:!1},{name:"'F'",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为八进制数",value1:"要转换的十六进制数",value2:"要使用的字符数"}},HLOOKUP:{title:[{name:"HLOOKUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"HLOOKUP(",editor:!1},{name:"'B'",editor:!1},{name:",",editor:!1},{name:"A1:C1",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在表格的首行或数值数组中搜索值，然后返回表格或数组中指定行的所在列中的值",value1:"要在表格的第一行中查找的值",array1:"在其中查找数据的信息表",value2:"array1 中将返回匹配值的行号",value3:"一个逻辑值，指定希望 HLOOKUP 查找精确匹配值还是近似匹配值"}},HOUR:{title:[{name:"HOUR(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"HOUR(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值的小时数",time:"时间值，其中包含要查找的小时数"}},"HYPGEOM.DIST":{title:[{name:"HYPGEOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:".",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:")",editor:!1}],example:[{name:"HYPGEOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:".",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回超几何分布",value1:"样本中成功的次数",value2:"样本量",value3:"总体中成功的次数",value4:"总体大小",value5:"决定函数形式的逻辑值"}},IF:{title:[{name:"IF(",editor:!1},{name:"条件",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"IF(",editor:!1},{name:"A2>B2",editor:!1},{name:",",editor:!1},{name:"'超出预算'",editor:!1},{name:",",editor:!1},{name:"'正常'",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"如果条件为真，该函数将返回一个值；如果条件为假，函数将返回另一个值",conditon:"要测试的条件",value1:"条件的结果为 TRUE 时，您希望返回的值",value2:"条件的结果为 FALSE 时，您希望返回的值"}},IFERROR:{title:[{name:"IFERROR(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"值2",editor:!1},{name:")",editor:!1}],example:[{name:"IFERROR(",editor:!1},{name:"A2/B2",editor:!1},{name:",",editor:!1},{name:"'计算中有错误'",editor:!1},{name:")",editor:!1}],content:{abstract:"可以使用 IFERROR 函数捕获和处理公式中的错误",value1:"检查是否存在错误的参数",value2:"公式计算错误时返回的值"}},IFNA:{title:[{name:"IFNA(",editor:!1},{name:"参数",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IFNA(",editor:!1},{name:'VLOOKUP("Seattle",$A$5:$B$10,0)',editor:!1},{name:",",editor:!1},{name:"'Not found'",editor:!1},{name:")",editor:!1}],content:{abstract:"如果公式返回错误值 #N/A，则结果返回您指定的值；否则返回公式的结果",param:"用于检查错误值 #N/A 的参数",value:"公式计算结果为错误值 #N/A 时要返回的值"}},IFS:{title:[{name:"IFS(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[条件2,值2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"IFS(",editor:!1},{name:"A2>89",editor:!1},{name:",",editor:!1},{name:"'A'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数检查是否满足一个或多个条件，且返回符合第一个 TRUE 条件的值",condition1:"计算结果为 TRUE 或 FALSE 的条件",value:"当 条件1 的计算结果为 TRUE 时要返回结果。 可以为空。",condition2:"其他参数对"}},IMABS:{title:[{name:"IMABS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMABS(",editor:!1},{name:"'5+12i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的绝对值",value:"需要计算其绝对值的复数"}},IMAGINARY:{title:[{name:"IMAGINARY(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMAGINARY(",editor:!1},{name:"'3+4i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的虚系数",value:"需要计算其虚系数的复数"}},IMARGUMENT:{title:[{name:"IMARGUMENT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMARGUMENT(",editor:!1},{name:"'3+4i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数  θ (theta)，即以弧度表示的角",value:"需要计算其参数  θ 的复数"}},IMCONJUGATE:{title:[{name:"IMCONJUGATE(",editor:!1},{name:"value",editor:!1},{name:"",editor:!1}],example:[{name:"IMCONJUGATE(",editor:!1},{name:"'3+4i'",editor:!1},{name:"",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的共轭复数",value:"需要计算其共轭数的复数"}},IMCOS:{title:[{name:"IMCOS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOS(",editor:!1},{name:"'1+i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余弦",value:"需要计算其余弦的复数"}},IMCOSH:{title:[{name:"IMCOSH",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOSH",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲余弦值",value:"需要计算其双曲余弦值的复数"}},IMCOT:{title:[{name:"IMCOT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOT(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余切值",value:"要对其余切值的复数"}},IMCSC:{title:[{name:"IMCSC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCSC(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余割值",value:"要对其余割值的复数"}},IMCSCH:{title:[{name:"IMCSCH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCSCH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲余割值",value:"需要计算其双曲余割值的复数"}},IMDIV:{title:[{name:"IMDIV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMDIV(",editor:!1},{name:"'-238+240i'",editor:!1},{name:",",editor:!1},{name:"'10+24i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个复数的商",value1:"复数分子或被除数",value2:"复数分母或除数"}},IMEXP:{title:[{name:"IMEXP(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMEXP(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的指数",value:"需要计算其指数的复数"}},IMLN:{title:[{name:"IMLN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的自然对数",value:"需要计算其自然对数的复数"}},IMLOG2:{title:[{name:"IMLOG2(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLOG2(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返返回以 x+yi 或 x+yj 文本格式表示的复数的以 2 为底数的对数",value:"需要计算以 2 为底数的对数的复数"}},IMLOG10:{title:[{name:"IMLOG10(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLOG10(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x + yi 或 x + yj 文本格式表示的复数的常用对数（以 10 为底数）",value:"需要计算其常用对数的复数"}},IMPOWER:{title:[{name:"IMPOWER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMPOWER(",editor:!1},{name:"'4+3i'",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的 n 次幂",value1:"需要计算其幂值的复数",value2:"需要对复数应用的幂次"}},IMPRODUCT:{title:[{name:"IMPRODUCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"IMPRODUCT(",editor:!1},{name:"'1+2i'",editor:!1},{name:",",editor:!1},{name:"30",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的乘积",value1:"任意复数",value2:"任意复数,个数介于1到255之间"}},IMREAL:{title:[{name:"IMREAL(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMREAL(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的实系数",value:"需要计算其实系数的复数"}},IMSEC:{title:[{name:"IMSEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSEC(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正割值",value:"需要计算其正割值的复数"}},IMSECH:{title:[{name:"IMSECH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSECH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲正割值",value:"需要计算其双曲正割值的复数"}},IMSIN:{title:[{name:"IMSIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSIN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正弦值",value:"需要计算其正弦的复数"}},IMSINH:{title:[{name:"IMSINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSINH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x + yi 或 x + yj 文本格式的复数的双曲正弦值",value:"要对其双曲正弦值的复数"}},IMSQRT:{title:[{name:"IMSQRT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSQRT(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的平方根",value:"需要计算其平方根的复数"}},IMSUB:{title:[{name:"IMSUB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMSUB(",editor:!1},{name:"'13+4i'",editor:!1},{name:",",editor:!1},{name:"'5+3i",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个复数的差",value1:"从（复）数中减去 value2",value2:"从 value1 中减（复）数"}},IMSUM:{title:[{name:"IMSUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"IMSUM(",editor:!1},{name:"'3+4i'",editor:!1},{name:",",editor:!1},{name:"'5-3i'",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个或多个复数的和",value1:"任意复数",value2:"任意复数,个数介于1到255之间"}},IMTAN:{title:[{name:"IMTAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMTAN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正切值",value:"要对其进行切线的复数"}},INDEX:{title:[{name:"INDEX(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"函数适用行",editor:!1},{name:",",editor:!1},{name:"[函数适用列]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"INDEX(",editor:!1},{name:"A2:B3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"函数返回表格或区域中的值或值的引用",array:"单元格区域或数组常量",funcrow:"选择数组中的某行，函数从该行返回数值",funccolum:"选择数组中的某列，函数从该列返回数值"}},INFO:{title:[{name:"INFO(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"INFO(",editor:!1},{name:"'numfile'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有关当前操作环境的信息",text:"用于指定要返回的信息类型的文本"}},INT:{title:[{name:"INT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"INT(",editor:!1},{name:"8.9",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字向下舍入到最接近的整数",value:"需要进行向下舍入取整的实数"}},INTERCEPT:{title:[{name:"INTERCEPT(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"集合2",editor:!1},{name:")",editor:!1}],example:[{name:"INTERCEPT(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"利用已知的 x 值与 y 值计算直线与 y 轴交叉点",set1:"因变的观察值或数据的集合",set2:"自变的观察值或数据的集合"}},INTRATE:{title:[{name:"INTRATE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"INTRATE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回完全投资型证券的利率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的投资额",value2:"有价证券到期时的兑换值"}},IPMT:{title:[{name:"IPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:",",editor:!1},{name:"[value6]",editor:!0,index:11},{name:")",editor:!1}],example:[{name:"IPMT(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4*12",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回给定期数内对投资的利息偿还额",value1:"各期利率",value2:"用于计算其利息数额的期数，必须在 1 到 value3 之间",value3:"年金的付款总期数",value4:"现值，或一系列未来付款的当前值的累积和",value5:"未来值，或在最后一次付款后希望得到的现金余额",value6:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末。 如果省略 value6，则假定其值为 0"}},ISERR:{title:[{name:"ISERR(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISERR(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"检验是否存在错误情形",value:"值为任意错误值（除去 #N/A）,则返回TRUE"}},ISERROR:{title:[{name:"ISERROR(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISERROR(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"检验是否存在错误情形",value:"值为任意错误值,则返回TRUE"}},ISEVEN:{title:[{name:"ISEVEN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ISEVEN(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"如果参数 数值 为偶数，返回 TRUE，否则返回 FALSE",value:"要测试的值"}},ISFORMULA:{title:[{name:"ISFORMULA(",editor:!1},{name:"引用",editor:!1},{name:")",editor:!1}],example:[{name:"ISFORMULA(",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"检查是否存在包含公式的单元格引用，然后返回 TRUE 或 FALSE",reference:"引用是对要测试单元格的引用"}},ISLOGICAL:{title:[{name:"ISLOGICAL(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISLOGICAL(",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为逻辑值",value:"如果为逻辑值返回TRUE,否则返回FALSE"}},ISNA:{title:[{name:"ISNA(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNA(",editor:!1},{name:"#N/A",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为#N/A",value:"如果为#N/A返回TRUE,否则返回FALSE"}},ISNONTEXT:{title:[{name:"ISNONTEXT(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNONTEXT(",editor:!1},{name:"#N/A",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为非文本的任意项",value:"如果为非文本的任意项返回TRUE,否则返回FALSE"}},ISNUMBER:{title:[{name:"ISNUMBER(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNUMBER(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为数字",value:"如果为数字返回TRUE,否则返回FALSE"}},"ISO.CEILING":{title:[{name:"ISO.CEILING(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ISO.CEILING(",editor:!1},{name:"4.3",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向上舍入为最接近的整数或最接近的有效位的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的可选倍数。如果省略，则其默认值为 1"}},ISODD:{title:[{name:"ISODD(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISODD(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为奇数",value:"如果为奇数返回TRUE,否则返回FALSE"}},ISOWEEKNUM:{title:[{name:"ISOWEEKNUM(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"ISOWEEKNUM(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定日期在全年中的 ISO 周数",date:"日期是 Excel 用于日期和时间计算的日期-时间代码"}},ISPMT:{title:[{name:"ISPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ISPMT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"计算付薪 (或投资) 指定期间内 (甚至本金付款) 支付的利息 (或接收)",value1:"投资的利率",value2:"要查找其利息的期间, 并且必须介于1和 value3 之间",value3:"投资的总支付期数",value4:"投资的现值"}},ISREF:{title:[{name:"ISREF(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISREF(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为引用",value:"如果为引用返回TRUE,否则返回FALSE"}},KURT:{title:[{name:"KURT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"KURT(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的峰值",value1:"任意值",value2:"任意值,个数介于1到255之间"}},LARGE:{title:[{name:"LARGE(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"LARGE(",editor:!1},{name:"A2:B6",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集中第 k 个最大值",area:"需要确定第 数值 个最大值的数组或数据区域",value:"返回值在数组或数据单元格区域中的位置（从大到小排）"}},LCM:{title:[{name:"KURT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"LCM(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回整数的最小公倍数",value1:"任意整数",value2:"任意整数,个数介于1到255之间"}},LEFT:{title:[{name:"LEFT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:3},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"LEFT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"从文本字符串的第一个字符开始返回指定个数的字符",text:"包含要提取的字符的文本字符串",value1:"指定要由 LEFT 提取的字符的数量",value2:"按字节指定要由 LEFTB 提取的字符的数量"}},LINEST:{title:[{name:"LINEST(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"LINEST(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:3},{name:",",editor:!1},{name:"FALSE",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"使用最小二乘法计算与现有数据最佳拟合的直线，来计算某直线的统计值，然后返回描述此直线的数组",set1:"关系表达式 y = mx + b 中已知的 y 值集合",set2:"关系表达式 y = mx + b 中已知的 x 值集合",value1:"一个逻辑值，用于指定是否将常量 b 强制设为 0",value2:"一个逻辑值，用于指定是否返回附加回归统计值"}},LOG:{title:[{name:"LOG(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"LOG(",editor:!1},{name:"8",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"根据指定底数返回数字的对数",value1:"想要计算其对数的正实数",value2:"对数的底数。 如果省略，则假定其值为 10"}},LOG10:{title:[{name:"LOG10(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"LOG10(",editor:!1},{name:"86",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字以 10 为底的对数",value:"想要计算其以 10 为底的对数的正实数"}},LOGEST:{title:[{name:"LOGEST(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"LOGEST(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"A2:A7",editor:!0,index:3},{name:",",editor:!1},{name:"TRUE",editor:!0,index:5},{name:",",editor:!1},{name:"FALSE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"计算适合您的数据的指数曲线, 并返回描述该曲线的值数组",set1:"关系表达式 y = b*m^x 中已知的 y 值集合",set2:"关系表达式 y=b*m^x 中已知的 x 值集合",value1:"一个逻辑值，用于指定是否将常量 b 强制设为 1",value2:"一个逻辑值，用于指定是否返回附加回归统计值"}},LOGINV:{title:[{name:"LOGINV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"LOGINV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数累积分布函数的反函数值，此处的 ln(x) 是服从 value2 和 value3 的正态分布",value1:"与对数分布相关的概率",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差"}},"LOGNORM.DIST":{title:[{name:"LOGNORM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"LOGNORM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数分布函数，此处的 ln(x) 是含有 value2 与 value3 参数的正态分布",value1:"用来计算函数的值",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差",value4:"决定函数形式的逻辑值"}},"LOGNORM.INV":{title:[{name:"LOGNORM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"LOGNORM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数累积分布函数的反函数值，此处的 ln(x) 是服从参数 value2 和 value3 的正态分布",value1:"与对数分布相关的概率",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差"}},LOWER:{title:[{name:"LOWER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"LOWER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将一个文本字符串中的所有大写字母转换为小写字母",text:"要转换为小写字母的文本"}},MATCH:{title:[{name:"MATCH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"MATCH(",editor:!1},{name:"39",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"在 范围 单元格中搜索特定的项，然后返回该项在此区域中的相对位置",value1:"要在 区域 中匹配的值",area:"要搜索的单元格区域",value2:"数字 -1、0 或 1"}},MAX:{title:[{name:"MAX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MAX(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组值中的最大值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MDETERM:{title:[{name:"MDETERM(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"MDETERM(",editor:!1},{name:"A2:D5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个数组的矩阵行列式的值",array:"行数和列数相等的数值数组"}},MDURATION:{title:[{name:"MDURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"MDURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回假设面值 ￥100 的有价证券的 Macauley 修正期限",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的年收益率",value3:"年付息次数"}},MEDIAN:{title:[{name:"MEDIAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MEDIAN(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组已知数字的中值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MID:{title:[{name:"MID(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"MID(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中从指定位置开始的特定数目的字符，该数目由用户指定",text:"包含要提取字符的文本字符串",value1:"文本中要提取的第一个字符的位置",value2:"指定希望 MID 从文本中返回字符的个数"}},MIN:{title:[{name:"MIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MIN(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组值中的最小值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MINA:{title:[{name:"MINA(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MINA(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数列表中的最小值",value1:"任意值",value2:"任意值,个数介于1到255之间"}},MINUTE:{title:[{name:"MINUTE(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"MINUTE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值中的分钟。 分钟是一个介于 0 到 59 之间的整数",time:"一个时间值，其中包含要查找的分钟"}},MINVERSE:{title:[{name:"MINVERSE(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"MINVERSE(",editor:!1},{name:"A2:B3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数组中存储的矩阵的逆矩阵",array:"行数和列数相等的数值数组"}},MIRR:{title:[{name:"MIRR(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MIRR(",editor:!1},{name:"A2:A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一系列定期现金流的已修改内部收益率",array:"数组或对包含数字的单元格的引用",value1:"现金流中使用的资金支付的利率",value2:"将现金流再投资的收益率"}},MMULT:{title:[{name:"MMULT(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"MMULT(",editor:!1},{name:"A2:B3",editor:!1},{name:",",editor:!1},{name:"A5:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数组的矩阵乘积",array1:"要进行矩阵乘法运算的第一个数组",array2:"要进行矩阵乘法运算的第二个数组"}},MOD:{title:[{name:"MOD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MOD(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数相除的余数",value1:"要计算余数的被除数",value2:"除数"}},MODE:{title:[{name:"MODE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE(",editor:!1},{name:"A2:A7",editor:!1},{name:")",editor:!1}],content:{abstract:"回的数组或数据区域中出现频率最高或重复出现",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"MODE.MULT":{title:[{name:"MODE.MULT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE.MULT(",editor:!1},{name:"A2:A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据或数据区域中出现频率最高或重复出现的数值的垂直数组",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"MODE.SNGL":{title:[{name:"MODE.SNGL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE.SNGL(",editor:!1},{name:"A2:A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据或数据区域中出现频率最高或重复出现的数值的垂直数组",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MONTH:{title:[{name:"MONTH(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"MONTH(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回日期（以序列数表示）中的月份。 月份是介于 1（一月）到 12（十二月）之间的整数",date:"您尝试查找的月份的日期"}},MROUND:{title:[{name:"MROUND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MROUND(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回舍入到所需倍数的数字",value1:"要舍入的值",value2:"要舍入到的倍数"}},MULTINOMIAL:{title:[{name:"MULTINOMIAL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MULTINOMIAL(",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数和的阶乘与各参数阶乘乘积的比值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MUNIT:{title:[{name:"MUNIT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"MUNIT(",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定维度的单位矩阵",value:"指定要返回的单位矩阵的维度"}},N:{title:[{name:"N(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"N(",editor:!1},{name:"7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回转化为数值后的值",value:"要转换的值"}},NA:{title:[{name:"NA(",editor:!1},{name:")",editor:!1}],example:[{name:"NA(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 #N/A. 的错误值"}},"NEGBINOM.DIST":{title:[{name:"NEGBINOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"NEGBINOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回负二项式分布",value1:"失败的次数",value2:"成功次数的阈值",value3:"成功的概率",value4:"决定函数形式的逻辑值"}},NETWORKDAYS:{title:[{name:"NETWORKDAYS(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NETWORKDAYS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回参数 value1 和 value2 之间完整的工作日数值",value1:" 一个代表开始日期的日期",value2:" 一个代表终止日期的日期",value3:"不在工作日历中的一个或多个日期所构成的可选区域"}},"NETWORKDAYS.INTL":{title:[{name:"NETWORKDAYS.INTL(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NETWORKDAYS.INTL(",editor:!1},{name:"DATE(2006,1,1)",editor:!1},{name:",",editor:!1},{name:"DATE(2006,1,31)",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回两个日期之间的所有工作日数，使用参数指示哪些天是周末，以及有多少天是周末",date1:"一个代表开始日期的日期",date2:"一个代表终止日期的日期",value:"表示介于 日期1 和 日期2 之间但又不包括在所有工作日数中的周末日"}},NOMINAL:{title:[{name:"NOMINAL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"NOMINAL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"基于给定的实际利率和年复利期数，返回名义年利率",value1:"实际利率",value2:"每年的复利期数"}},"NORM.DIST":{title:[{name:"NORM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定平均值和标准偏差的正态分布函数",value1:"需要计算其分布的数值",value2:"分布的算术平均值",value3:"分布的标准偏差",value4:"确定函数形式的逻辑值"}},"NORM.INV":{title:[{name:"NORM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定平均值和标准偏差的正态累积分布函数的反函数值",value1:"对应于正态分布的概率",value2:"分布的算术平均值",value3:"分布的标准偏差"}},"NORM.S.DIST":{title:[{name:"NORM.S.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.S.DIST(",editor:!1},{name:"1.333333",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回标准正态分布函数",value1:"需要计算其分布的数值",value2:"决定函数形式的逻辑值"}},NOT:{title:[{name:"NOT(",editor:!1},{name:"逻辑函数",editor:!1},{name:")",editor:!1}],example:[{name:"NOT(",editor:!1},{name:"A2>100",editor:!1},{name:")",editor:!1}],content:{abstract:"函数会对其参数的值进行求反",logicfunc:"计算结果为 TRUE 或 FALSE 的任何值或表达式"}},NOW:{title:[{name:"NOW(",editor:!1},{name:")",editor:!1}],example:[{name:"NOW(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回当前日期和时间的序列号"}},NPER:{title:[{name:"NPER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"NPER(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:7},{name:",",editor:!1},{name:"TRUE",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回某项投资的总期数",value1:"各期利率",value2:"各期所应支付的金额，在整个年金期间保持不变",value3:"现值，或一系列未来付款的当前值的累积和",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},NPV:{title:[{name:"NPV(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NPV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"使用贴现率和一系列未来支出（负值）和收益（正值）来计算一项投资的净现值",value:"某一期间的贴现率",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},NUMBERVALUE:{title:[{name:"NUMBERVALUE(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[字符1]",editor:!0,index:3},{name:",",editor:!1},{name:"[字符2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NUMBERVALUE(",editor:!1},{name:"'2.500,27'",editor:!1},{name:",",editor:!1},{name:"','",editor:!0,index:3},{name:",",editor:!1},{name:"'.'",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"以与区域设置无关的方式将文本转换为数字",text:"要转换为数字的文本",character1:"用于分隔结果的整数和小数部分的字符",character2:" 用于分隔数字分组的字符"}},OCT2DEC:{title:[{name:"OCT2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"OCT2DEC(",editor:!1},{name:"54",editor:!1},{name:")",editor:!1}],content:{abstract:"将八进制数转换为十进制数",value:"要转换的八进制数"}},OCT2BIN:{title:[{name:"OCT2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OCT2BIN(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将八进制数转换为二进制数",value1:"要转换的八进制数",value2:"要使用的字符数"}},OCT2HEX:{title:[{name:"OCT2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OCT2HEX(",editor:!1},{name:"100",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将八进制数转换为十六进制数",value1:"要转换的八进制数",value2:"要使用的字符数"}},ODD:{title:[{name:"ODD(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ODD(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字向上舍入到的最接近的奇数",value:"要舍入的值"}},ODDFPRICE:{title:[{name:"ODDFPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"日期4",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDFPRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回首期付息日不固定（长期或短期）的面值 ￥100 的有价证券价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日",date4:"有价证券的首期付息日",value1:"有价证券的利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDFYIELD:{title:[{name:"ODDFYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"日期4",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDFYIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回首期付息日不固定（长期或短期）的面值 ￥100 的有价证券价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日",date4:"有价证券的首期付息日",value1:"有价证券的利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDLPRICE:{title:[{name:"ODDLPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDLPRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回末期付息日不固定的面值 ￥100 的有价证券（长期或短期）的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的末期付息日",value1:"有价证券的利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDLYIELD:{title:[{name:"ODDLYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDLYIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回末期付息日不固定的面值 ￥100 的有价证券（长期或短期）的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的末期付息日",value1:"有价证券的利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},OR:{title:[{name:"OR(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OR(",editor:!1},{name:"A2>1",editor:!1},{name:",",editor:!1},{name:"A2<100",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"函数的任意参数计算为 TRUE，则其返回 TRUE；如果其所有参数均计算机为 FALSE，则返回 FALSE",condition1:"第一个想要测试且计算结果可为 TRUE 或 FALSE 的条件",condition2:"其他想要测试且计算结果可为 TRUE 或 FALSE 的条件（最多 255 个条件）"}},PDURATION:{title:[{name:"PDURATION(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"PDURATION(",editor:!1},{name:"2.5%",editor:!1},{name:",",editor:!1},{name:"2000",editor:!1},{name:",",editor:!1},{name:"2200",editor:!1},{name:")",editor:!1}],content:{abstract:"返回投资到达指定值所需的期数",value1:"费率是指每期的利率",value2:"投资的现值",value3:"所需投资的未来值"}},PEARSON:{title:[{name:"PEARSON(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"PEARSON(",editor:!1},{name:"A3:A7",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回皮尔生(Pearson)乘积矩相关系数 r，这是一个范围在 -1.0 到 1.0 之间（包括 -1.0 和 1.0 在内）的无量纲指数，反映了两个数据集合之间的线性相关程度",array:"自变量集合",array2:"因变量集合"}},PERCENTILE:{title:[{name:"PERCENTILE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 k 个百分点的值",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},"PERCENTILE.EXC":{title:[{name:"PERCENTILE.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE.EXC(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 K 个百分点的值，其中 k 为 0 到 1 之间的值，不包含 0 和 1",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},"PERCENTILE.INC":{title:[{name:"PERCENTILE.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE.INC(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 K 个百分点的值，K 为 0 到 1 之间的百分点值，包含 0 和 1",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},PERCENTRANK:{title:[{name:"PERCENTRANK(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将某个数值在数据集中的排位作为数据集的百分比值返回，此处的百分比值的范围为 0 到 1",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},"PERCENTRANK.EXC":{title:[{name:"PERCENTRANK.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK.EXC(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个数值在一个数据集中的百分比（0 到 1，不包括 0 和 1）排位",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},"PERCENTRANK.INC":{title:[{name:"PERCENTRANK.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK.INC(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将某个数值在数据集中的排位作为数据集的百分比值返回，此处的百分比值的范围为 0 到 1（含 0 和 1）",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},PERMUT:{title:[{name:"PERMUT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PERMUT(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回可从数字对象中选择的给定数目对象的排列数",value1:"表示对象个数的整数",value2:"表示每个排列中对象个数的整数"}},PERMUTATIONA:{title:[{name:"PERMUTATIONA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PERMUTATIONA(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回可从对象总数中选择的给定数目对象（含重复）的排列数",value1:"表示对象总数的整数",value2:"表示每个排列中对象数目的整数"}},PHI:{title:[{name:"PHI(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PHI(",editor:!1},{name:"0.75",editor:!1},{name:")",editor:!1}],content:{abstract:"返回标准正态分布的密度函数值",value:"所需的标准正态分布密度值"}},PI:{title:[{name:"PI(",editor:!1},{name:")",editor:!1}],example:[{name:"PI(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字 3.14159265358979（数学常量 pi），精确到 15 个数字"}},POISSON:{title:[{name:"POISSON(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"POISSON(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回泊松分布",value1:"事件数",value2:"期望值",value3:"一逻辑值，确定所返回的概率分布的形式"}},"POISSON.DIST":{title:[{name:"POISSON.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"POISSON.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回泊松分布",value1:"事件数",value2:"期望值",value3:"一逻辑值，确定所返回的概率分布的形式"}},POWER:{title:[{name:"POWER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"POWER(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字乘幂的结果",value1:"基数。 可为任意实数",value2:"基数乘幂运算的指数"}},PPMT:{title:[{name:"PPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"PPMT(",editor:!1},{name:"A11",editor:!1},{name:",",editor:!1},{name:"A12",editor:!1},{name:",",editor:!1},{name:"10",editor:!1},{name:",",editor:!1},{name:"A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回根据定期固定付款和固定利率而定的投资在已知期间内的本金偿付额",value1:"各期利率",value2:"指定期数，该值必须在 1 到 value3 范围内",value3:"年金的付款总期数",value4:"现值即一系列未来付款当前值的总和",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},PRICE:{title:[{name:"PRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"PRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期付息的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},PRICEDISC:{title:[{name:"PRICEDISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PRICEDISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回折价发行的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的贴现率",value2:"面值 ￥100 的有价证券的清偿价值"}},PRICEMAT:{title:[{name:"PRICEMAT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"PRICEMAT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期付息的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日，以时间序列号表示",value1:"有价证券在发行日的利率",value2:"有价证券的年收益率"}},PROB:{title:[{name:"PROB(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"PROB(",editor:!1},{name:"A3:A6",editor:!1},{name:",",editor:!1},{name:"B3:B6",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:5},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"返回区域中的数值落在指定区间内的概率",area:"具有各自相应概率值的 x 数值区域",array:"与 区域 中的值相关联的一组概率值",value1:"要计算其概率的数值下界",value2:"要计算其概率的可选数值上界"}},PRODUCT:{title:[{name:"PRODUCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"PRODUCT(",editor:!1},{name:"A2:A4",editor:!1},{name:")",editor:!1}],content:{abstract:"函数将以参数形式给出的所有数字相乘, 并返回该产品",value1:"要相乘的第一个数字或范围",value2:"要相乘的其他数字或单元格区域，最多可以使用 255 个参数"}},PROPER:{title:[{name:"PROPER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"PROPER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本字符串的首字母以及文字中任何非字母字符之后的任何其他字母转换成大写",text:"用引号括起来的文本、返回文本值的公式，或者对包含要进行部分大写转换文本的单元格的引用"}},PV:{title:[{name:"PV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"PV(",editor:!1},{name:"A3/12",editor:!1},{name:",",editor:!1},{name:"12*A4",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:",",editor:!1},{name:"0",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"用于根据固定利率计算贷款或投资的现值",value1:"各期利率",value2:"年金的付款总期数",value3:"每期的付款金额，在年金周期内不能更改",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},QUARTILE:{title:[{name:"QUARTILE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的四分位点",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},"QUARTILE.EXC":{title:[{name:"QUARTILE.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE.EXC(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"基于 0 到 1 之间（不包括 0 和 1）的百分点值返回数据集的四分位数",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},"QUARTILE.INC":{title:[{name:"QUARTILE.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE.INC(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"根据 0 到 1 之间的百分点值（包含 0 和 1）返回数据集的四分位数",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},QUOTIENT:{title:[{name:"QUOTIENT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"QUOTIENT(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回除法的整数部分",value1:"被除数",value2:"除数"}},RADIANS:{title:[{name:"RADIANS(",editor:!1},{name:"角度",editor:!1},{name:")",editor:!1}],example:[{name:"RADIANS(",editor:!1},{name:"270",editor:!1},{name:")",editor:!1}],content:{abstract:"将度数转换为弧度",tangle:"要转换的以度数表示的角度"}},RAND:{title:[{name:"RAND(",editor:!1},{name:")",editor:!1}],example:[{name:"RAND(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回了一个大于等于 0 且小于 1 的平均分布的随机实数"}},RANDBETWEEN:{title:[{name:"RANDBETWEEN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"RANDBETWEEN(",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"100",editor:!1},{name:")",editor:!1}],content:{abstract:"返回位于两个指定数之间的一个随机整数。 每次计算工作表时都将返回一个新的随机整数",value1:"将返回的最小整数",value2:"将返回的最大整数"}},RANK:{title:[{name:"RANK(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位。 数字的排位是其相对于列表中其他值的大小",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},"RANK.AVG":{title:[{name:"RANK.AVG(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK.AVG(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位：数字的排位是其大小与列表中其他值的比值；如果多个值具有相同的排位，则将返回平均排位",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},"RANK.EQ":{title:[{name:"RANK.EQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK.EQ(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位。 其大小与列表中其他值相关；如果多个值具有相同的排位，则返回该组值的最高排位",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},RATE:{title:[{name:"RATE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"RATE(",editor:!1},{name:"A2*12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每期年金的利率",value1:"年金的付款总期数",value2:"每期的付款金额，在年金周期内不能更改",value3:"现值即一系列未来付款当前值的总和",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},RECEIVED:{title:[{name:"RECEIVED(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"RECEIVED(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一次性付息的有价证券到期收回的金额",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的投资额",value2:"有价证券的贴现率"}},REPLACE:{title:[{name:"REPLACE(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:")",editor:!1}],example:[{name:"REPLACE(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"'*'",editor:!1},{name:")",editor:!1}],content:{abstract:"根据指定的字符数，REPLACE 将部分文本字符串替换为不同的文本字符串",text1:"要替换其部分字符的文本",value1:"文本1中要替换为 文本2 的字符位置",value2:"文本1 中希望 REPLACE 使用 文本2 来进行替换的字符数",text2:"将替换 文本1 中字符的文本"}},REPT:{title:[{name:"REPT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"REPT(",editor:!1},{name:"'*_'",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本重复一定次数",text:"需要重复显示的文本",value:"用于指定文本重复次数的正数"}},RIGHT:{title:[{name:"RIGHT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"RIGHT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"根据所指定的字符数返回文本字符串中最后一个或多个字符",text:"包含要提取字符的文本字符串",value:"指定希望 RIGHT 提取的字符数"}},ROMAN:{title:[{name:"ROMAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ROMAN(",editor:!1},{name:"499",editor:!1},{name:",",editor:!1},{name:"0",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将阿拉伯数字转换为文字形式的罗马数字",value1:"需要转换的阿拉伯数字",value2:"一个数字, 指定所需的罗马数字类型"}},ROUND:{title:[{name:"ROUND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUND(",editor:!1},{name:"2.15",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"函数将数字四舍五入到指定的位数",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROUNDDOWN:{title:[{name:"ROUNDDOWN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUND(",editor:!1},{name:"3.2",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"朝着零的方向将数字进行向下舍入",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROUNDUP:{title:[{name:"ROUNDUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUNDUP(",editor:!1},{name:"2.15",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"朝着远离 0（零）的方向将数字进行向上舍入",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROW:{title:[{name:"ROW(",editor:!1},{name:"区域",editor:!1},{name:")",editor:!1}],example:[{name:"ROW(",editor:!1},{name:"C10",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用的行号",area:"需要得到其行号的单元格或单元格区域"}},ROWS:{title:[{name:"ROWS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"ROW(",editor:!1},{name:"C1:E4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用或数组的行数",area:"需要得到其行数的数组、数组公式或对单元格区域的引用"}},RRI:{title:[{name:"RRI(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"RRI(",editor:!1},{name:"96",editor:!1},{name:",",editor:!1},{name:"10000",editor:!1},{name:",",editor:!1},{name:"11000",editor:!1},{name:")",editor:!1}],content:{abstract:"返回投资增长的等效利率",value1:"投资的总期数",value2:"投资的现值",value3:"投资的未来值"}},RSQ:{title:[{name:"RSQ(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"RSQ(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"通过 known_y's 和 known_x's 中的数据点返回皮尔生乘积矩相关系数的平方",area1:"数组或数据点区域",area2:"数组或数据点区域"}},SEARCH:{title:[{name:"SEARCH(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SEARCH(",editor:!1},{name:"'e'",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"可在第二个文本字符串中查找第一个文本字符串，并返回第一个文本字符串的起始位置的编号，该编号从第二个文本字符串的第一个字符算起",text1:"要查找的文本",text2:"要在其中搜索 文本1 参数的值的文本",value:"文本2 参数中从之开始搜索的字符编号"}},SEC:{title:[{name:"SEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SEC(",editor:!1},{name:"45",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的正割值",value:"需要对其进行正割的角度 "}},SECH:{title:[{name:"SECH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SECH(",editor:!1},{name:"45",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的双曲正割值",value:"对应所需双曲正割值的角度，以弧度表示"}},SECOND:{title:[{name:"SECOND(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"SECOND(",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值的秒数。 秒数是 0（零）到 59 范围内的整数",time:"一个时间值，其中包含要查找的秒数"}},SERIESSUM:{title:[{name:"SERIESSUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"SERIESSUM(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"A4:A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回基于SERIES公式的幂级数之和",value1:"幂级数的输入值",value2:"value1 的首项乘幂",value3:"级数中每一项的乘幂 n 的步长增加值",array:"与 value1 的每个连续乘幂相乘的一组系数"}},SHEET:{title:[{name:"SHEET(",editor:!1},{name:"[值]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"SHEET(",editor:!1},{name:"Table1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用工作表的工作表编号",value:"需要工作表编号的工作表或引用的名称"}},SHEETS:{title:[{name:"SHEETS(",editor:!1},{name:"[引用]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"SHEETS(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用中的工作表数",reference:"引用是要了解其包含的工作表数的引用"}},SIGN:{title:[{name:"SIGN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SIGN(",editor:!1},{name:"10",editor:!1},{name:")",editor:!1}],content:{abstract:"确定数字的符号",value:"任意实数"}},SIN:{title:[{name:"SIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SIN(",editor:!1},{name:"PI()",editor:!1},{name:")",editor:!1}],content:{abstract:"返回已知角度的正弦",value:"需要求正弦的角度，以弧度表示"}},SINH:{title:[{name:"SINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SINH(",editor:!1},{name:"0.0342*1.03",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双曲正弦",value:"任意实数"}},SKEW:{title:[{name:"SKEW(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SKEW(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回分布的偏斜度",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"SKEW.P":{title:[{name:"SKEW.P(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SKEW(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回基于样本总体的分布不对称度：表明分布相对于平均值的不对称程度",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},SLN:{title:[{name:"SLN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"SLN(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个期间内的资产的直线折旧",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数"}},SLOPE:{title:[{name:"SLOPE(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"集合2",editor:!1},{name:")",editor:!1}],example:[{name:"SLOPE(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回通过 集合1 和 集合2 中数据点的线性回归线的斜率",set1:"数字型因变量数据点数组或单元格区域",set2:"自变量数据点集合"}},SMALL:{title:[{name:"SMALL(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SMALL(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集中的第 k 个最小值",area:"需要找到第 k 个最小值的数组或数值数据区域",value:"要返回的数据在数组或数据区域里的位置"}},SQRTPI:{title:[{name:"SQRTPI(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SQRTPI(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某数与 pi 的乘积的平方根",value:"与 pi 相乘的数"}},STANDARDIZE:{title:[{name:"STANDARDIZE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"STANDARDIZE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由 value2 和 value3 表示的分布的规范化值",value1:"需要进行正态化的数值",value2:"分布的算术平均值",value3:"分布的标准偏差"}},STDEVA:{title:[{name:"STDEVA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVA(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据样本估计标准偏差",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},STDEVP:{title:[{name:"STDEVP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVP(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据作为参数给定的整个总体计算标准偏差",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},STDEVPA:{title:[{name:"STDEVPA(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVPA(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据作为参数（包括文字和逻辑值）给定的整个总体计算标准偏差",value1:"任意值",value2:"任意值,个数介于1到255之间"}},STEYX:{title:[{name:"STEYX(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"STEYX(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回通过线性回归法预测每个 x 的 y 值时所产生的标准误差",area1:"因变量数据点数组或区域",area2:"自变量数据点数组或区域"}},SUBSTITUTE:{title:[{name:"SUBSTITUTE(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"文本3",editor:!1},{name:",",editor:!1},{name:"[事件]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"SUBSTITUTE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"'销售额'",editor:!1},{name:",",editor:!1},{name:"'成本'",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在文本字符串中用 文本3 替换 文本2",text1:"需要替换其中字符的文本，或对含有文本（需要替换其中字符）的单元格的引用",text2:"需要替换的文本",text3:"用于替换 文本2 的文本",event:"指定要用 文本3 替换 文本2 的事件"}},SUBTOTAL:{title:[{name:"SUBTOTAL(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"[区域2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUBTOTAL(",editor:!1},{name:"9",editor:!1},{name:",",editor:!1},{name:"A2:A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中的分类汇总",value:"数字 1-11 或 101-111，用于指定要为分类汇总使用的函数",area1:"要对其进行分类汇总计算的第一个命名区域或引用",area2:"要对其进行分类汇总计算的第 2 个至第 254 个命名区域或引用"}},SUMIF:{title:[{name:"SUMIF(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"条件",editor:!1},{name:",",editor:!1},{name:"[区域2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUMIF(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"'>160000'",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"对 范围 中符合指定条件的值求和",area1:"要按条件计算的单元格区域",condition:"定义哪些单元格将被添加的数字、表达式、单元格引用、文本或函数形式的条件",area2:"要添加的实际单元格 (如果要添加的单元格不在range参数中指定的单元格)"}},SUMIFS:{title:[{name:"SUMIFS(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[区域2,条件2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUMIFS(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"'>160000'",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"对 范围 中符合指定条件的值求和",area1:"要按条件计算的单元格区域",condition1:"定义哪些单元格将被添加的数字、表达式、单元格引用、文本或函数形式的条件",condition2:"其他的区域,条件对"}},SUMPRODUCT:{title:[{name:"SUMPRODUCT(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"[array2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUMPRODUCT(",editor:!1},{name:"A1:D1",editor:!1},{name:",",editor:!1},{name:"A2:D2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"对给定数组中的相应组件执行简单的算术运算, 并返回这些计算的和",array1:"其相应元素需要进行相乘并求和的第一个数组参数",array2:" 2 到 255 个数组参数，其相应元素需要进行相乘并求和"}},SUMSQ:{title:[{name:"SUMSQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUMSQ(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数的平方和",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},SUMX2MY2:{title:[{name:"SUMX2MY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMX2MY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应数值的平方差之和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SUMX2PY2:{title:[{name:"SUMX2PY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMX2PY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应值的平方和之和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SUMXMY2:{title:[{name:"SUMXMY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMXMY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应数值之差的平方和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SWITCH:{title:[{name:"SWITCH(",editor:!1},{name:"表达式",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"结果1",editor:!1},{name:",",editor:!1},{name:"[值2,结果2,...]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"SWITCH(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"'星期天'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数根据值列表计算一个值（称为表达式），并返回与第一个匹配值对应的结果",formula:"用来比较的值",value1:"任意值",result1:"值1 与 表达式 匹配后返回的值",result2:"其他值与结果对,最多125个"}},SYD:{title:[{name:"SYD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"SYD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在指定期间内资产按年限总和折旧法计算的折旧",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数",value4:"期间，必须与 value3 使用相同的单位"}},T:{title:[{name:"T(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"T(",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回值引用的文字",value:"要测试的值"}},TAN:{title:[{name:"TAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TAN(",editor:!1},{name:"0.785",editor:!1},{name:")",editor:!1}],content:{abstract:"返回已知角度的正切",value:"要求正切的角度，以弧度表示"}},TANH:{title:[{name:"TANH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TAN(",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双曲正切",value:"任意实数"}},TBILLEQ:{title:[{name:"TBILLEQ(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLEQ(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回国库券的等效收益率",date1:"国库券的结算日",date2:"国库券的到期日",value:"国库券的贴现率"}},TBILLPRICE:{title:[{name:"TBILLPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLPRICE(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回面值 ￥100 的国库券的价格",date1:"国库券的结算日",date2:"国库券的到期日",value:"国库券的贴现率"}},TBILLYIELD:{title:[{name:"TBILLYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLYIELD(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回国库券的收益率",date1:"国库券的结算日",date2:"国库券的到期日",value:"面值 ￥100 的国库券的价格"}},"T.DIST":{title:[{name:"T.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"T.DIST(",editor:!1},{name:"60",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回学生的左尾 t 分布。 t 分布用于小型样本数据集的假设检验",value1:"需要计算分布的数值",value2:"一个表示自由度数的整数",value3:"决定函数形式的逻辑值"}},"T.DIST.RT":{title:[{name:"T.DIST.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.DIST.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"t 分布用于小型样本数据集的假设检验",value1:"需要计算分布的数值",value2:"一个表示自由度数的整数"}},TEXT:{title:[{name:"TEXT(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TEXT(",editor:!1},{name:"1234.567",editor:!1},{name:",",editor:!1},{name:"'$#,##0.00'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数可通过格式代码向数字应用格式，进而更改数字的显示方式",value:"要转换为文本的数值",text:"一个文本字符串，定义要应用于所提供值的格式"}},TIME:{title:[{name:"TIME(",editor:!1},{name:"时",editor:!1},{name:",",editor:!1},{name:"分",editor:!1},{name:",",editor:!1},{name:"秒",editor:!1},{name:")",editor:!1}],example:[{name:"TIME(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"B2",editor:!1},{name:",",editor:!1},{name:"C2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回特定时间的十进制数字",hour:"0（零）到 32767 之间的数字，代表小时",minute:" 0 到 32767 之间的数字，代表分钟",second:"0 到 32767 之间的数字，代表秒"}},TIMEVALUE:{title:[{name:"TIMEVALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TIMEVALUE(",editor:!1},{name:"'2:24 AM'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由文本字符串表示的时间的十进制数字",text:"一个文本字符串，代表以任一 Microsoft Excel 时间格式表示的时间"}},"T.INV":{title:[{name:"T.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.INV(",editor:!1},{name:"0.75",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回学生的 t 分布的左尾反函数",value1:"与学生的 t 分布相关的概率",value2:"与学生的 t 分布相关的概率"}},TODAY:{title:[{name:"TODAY(",editor:!1},{name:")",editor:!1}],example:[{name:"TODAY(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回当前日期的序列号"}},TRANSPOSE:{title:[{name:"TRANSPOSE(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"TRANSPOSE(",editor:!1},{name:"A1:F6",editor:!1},{name:")",editor:!1}],content:{abstract:"可返回转置单元格区域，即将行单元格区域转置成列单元格区域，反之亦然",array:"要转置的工作表上的数组或单元格区域"}},TREND:{title:[{name:"TREND(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"TREND(",editor:!1},{name:"E2:E13",editor:!1},{name:",",editor:!1},{name:"D2:D13",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"函数返回沿线性趋势的值",set1:"关系 y = mx + b 中已知道的 y 值集",set2:"在关系 y = mx + b 中可能已经知道的一组可选 x 值",value1:"要返回其趋势的新 x 值返回对应的 y 值",value2:"一个逻辑值, 指定是否强制常量 b 等于0"}},TRIMMEAN:{title:[{name:"TRIMMEAN(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TRIMMEAN(",editor:!1},{name:"A2:A12",editor:!1},{name:",",editor:!1},{name:"0.2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集的内部平均值",array:"需要进行整理并求平均值的数组或数值区域",value:"从计算中排除数据点的分数"}},TRUE:{title:[{name:"TRUE(",editor:!1},{name:")",editor:!1}],example:[{name:"TRUE(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回逻辑值 TRUE"}},TRUNC:{title:[{name:"TRUNC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"TRUNC(",editor:!1},{name:"8.9",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字的小数部分截去，返回整数",value1:"需要截尾取整的数字",value2:"用于指定取整精度的数字,默认为零"}},"T.TEST":{title:[{name:"T.TEST(",editor:!1},{name:"数据集1",editor:!1},{name:",",editor:!1},{name:"数据集2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.TEST(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"B2:B10",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回与学生 t-检验相关的概率",dataset1:"第一个数据集",dataset2:"第二个数据集",value1:"指定分布尾数",value2:"要执行的 t 检验的类型"}},TYPE:{title:[{name:"TYPE(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"TYPE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数值的类型",value:"需要返回值类型的值"}},UNICHAR:{title:[{name:"UNICHAR(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"UNICHAR(",editor:!1},{name:"32",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定数值引用的 Unicode 字符",value:"代表字符的 Unicode 数字"}},UNICODE:{title:[{name:"UNICODE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"UNICODE(",editor:!1},{name:"'B'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于文本的第一个字符的数字（代码点）",text:"要获得其 Unicode 值的字符"}},UNIQUE:{title:[{name:"UNIQUE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:3},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"UNIQUE(",editor:!1},{name:"D2:D11",editor:!1},{name:")",editor:!1}],content:{abstract:"函数返回列表或范围中的一系列唯一值",array:"要从其中返回唯一值的范围或数组",value1:"为逻辑值，用于指示比较方式；By row = FALSE 或省略；By column = TRUE",value2:"为逻辑值：仅返回出现一次的唯一值 = TRUE；包含所有唯一值 = FALSE 或省略"}},UPPER:{title:[{name:"UPPER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"UPPER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本转换为大写字母",text:"要转换为大写字母的文本。 文本可以是引用或文本字符串"}},VALUE:{title:[{name:"VALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"VALUE(",editor:!1},{name:"'$1,000'",editor:!1},{name:")",editor:!1}],content:{abstract:"将表示数字的文本字符串转换为数字",text:"用引号括起来的文本或包含要转换文本的单元格的引用"}},VAR:{title:[{name:"VAR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于给定样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},"VAR.P":{title:[{name:"VAR.P(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR.P(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于整个样本总体的方差（忽略样本总体中的逻辑值和文本）",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},VARA:{title:[{name:"VARA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VARA(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于给定样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},"VAR.S":{title:[{name:"VAR.S(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR.S(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"估算基于样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},VDB:{title:[{name:"VDB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:11},{name:",",editor:!1},{name:"[value5]",editor:!0,index:13},{name:")",editor:!1}],example:[{name:"VDB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"0.875",editor:!1},{name:",",editor:!1},{name:"1.5",editor:!0,index:11},{name:")",editor:!1}],content:{abstract:"使用双倍余额递减法或其他指定方法，返回一笔资产在给定期间（包括部分期间）内的折旧值",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数",date1:"您要计算折旧的起始时期",date2:"您要计算折旧的终止时期",value4:"余额递减速率",value5:"逻辑值，指定当折旧值大于余额递减计算值时，是否转用直线折旧法"}},VLOOKUP:{title:[{name:"VLOOKUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"VLOOKUP(",editor:!1},{name:"B3",editor:!1},{name:",",editor:!1},{name:"B2:E7",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在表格或区域中按行查找项目",value1:"要查找的值",area1:"搜索 value1 和返回值的单元格区域",value2:"包含返回值的列号",value3:"一个逻辑值，该值指定希望 VLOOKUP 查找近似匹配还是精确匹配"}},WEEKDAY:{title:[{name:"WEEKDAY(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"WEEKDAY(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回对应于某个日期的一周中的第几天",value1:"一个序列号，代表尝试查找的那一天的日期",value2:"用于确定返回值类型的数字"}},WEEKNUM:{title:[{name:"WEEKNUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"WEEKNUM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回特定日期的周数",value1:"代表一周中的日期",value2:"一数字，确定星期从哪一天开始"}},WEIBULL:{title:[{name:"WEIBULL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"WEIBULL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Weibull 分布",value1:"用来计算函数的值",value2:"分布参数",value3:"分布参数",value4:"确定函数的形式"}},WORKDAY:{title:[{name:"WORKDAY(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"[数组]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"WORKDAY(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在某日期（起始日期）之前或之后、与该日期相隔指定工作日的某一日期的日期值",date:"一个代表开始日期的日期",value:"日期 之前或之后不含周末及节假日的天数",array:"一个可选列表，其中包含需要从工作日历中排除的一个或多个日期，例如各种省/市/自治区和国家/地区的法定假日及非法定假日"}},"WORKDAY.INTL":{title:[{name:"WORKDAY.INTL(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"[数组]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"WORKDAY.INTL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定的若干个工作日之前或之后的日期的序列号（使用自定义周末参数）",date:"开始日期",value:"日期 之前或之后不含周末及节假日的天数",array:"指示一周中属于周末的日子和不作为工作日的日子"}},XIRR:{title:[{name:"XIRR(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"XIRR(",editor:!1},{name:"A3:A7",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:",",editor:!1},{name:"0.1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一组不一定定期发生的现金流的内部收益率",array1:"与 array2 中的支付时间相对应的一系列现金流",array2:"与现金流支付相对应的支付日期表",value:"对函数 XIRR 计算结果的估计值"}},XNPV:{title:[{name:"XNPV(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"XNPV(",editor:!1},{name:".09",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一组现金流的净现值，这些现金流不一定定期发生",value:"对函数 XIRR 计算结果的估计值",array1:"与 array2 中的支付时间相对应的一系列现金流",array2:"与现金流支付相对应的支付日期表"}},XOR:{title:[{name:"XOR(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"XOR(",editor:!1},{name:"(3>0",editor:!1},{name:",",editor:!1},{name:"2<9",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回所有参数的逻辑异或",condition1:"计算值为TRUE或FALSE",condition2:"要检验的 1 至 254 个条件，可为 TRUE 或 FALSE，且可为逻辑值、数组或引用"}},YEAR:{title:[{name:"YEAR(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"YEAR(",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于某个日期的年份",date:"要查找的年份的日期"}},YEARFRAC:{title:[{name:"YEARFRAC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"YEARFRAC(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"可计算两个日期（日期1 和 日期2）之间的天数",date1:"一个代表开始日期的日期",date2:"一个代表终止日期的日期"}},YIELD:{title:[{name:"YIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"YIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期支付利息的债券的收益",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},YIELDDISC:{title:[{name:"YIELDDISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"YIELDDISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回折价发行的有价证券的年收益率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的价格（按面值为 ￥100 计算）",value2:"面值 ￥100 的有价证券的清偿价值"}},YIELDMAT:{title:[{name:"YIELDMAT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"YIELDMAT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期付息的有价证券的年收益率",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日，以时间序列号表示",value1:"有价证券在发行日的利率",value2:"有价证券的价格"}},"Z.TEST":{title:[{name:"Z.TEST(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"Z.TEST(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回 z 检验的单尾 P 值",area:"用来检验 x 的数组或数据区域",value1:"要测试的值",value2:"总体（已知）标准偏差。 如果省略，则使用样本标准偏差"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=r(1),o=r(5),l=r(7),s=r(29),u=r(6),c=r(4),d=(n=r(152))&&n.__esModule?n:{default:n};function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&m(e.prototype,t),r&&m(e,r),e}var v=10;function p(e,t){return e.lastIndexOf(t)}var g=function(){function e(t,r,n){var o=this;f(this,e),this.data=t,this._selector=r,this.sheet=n,this.l=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-l")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.r=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-r")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.t=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-t")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.b=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-b")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.boxinner=(0,a.h)("div","".concat(i.cssPrefix,"-selector-boxinner")).children(this.b,this.t,this.r,this.l),this.selectorMove=new d.default(this.boxinner,t,n,r),this.areaEl=(0,a.h)("div","".concat(i.cssPrefix,"-selector-area")).child(this.boxinner).hide(),this.clipboardEl=(0,a.h)("div","".concat(i.cssPrefix,"-selector-clipboard")).hide(),this.autofillEl=(0,a.h)("div","".concat(i.cssPrefix,"-selector-autofill")).hide(),this.el=(0,a.h)("div","".concat(i.cssPrefix,"-selector")).css("z-index","".concat(v)).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),v+=1}return h(e,[{key:"moveEvent",value:function(e){var t=this,r=this.data,n=this._selector,a=this.sheet,i=null,d=r.selector.range,f=d.sri,m=d.sci,h=d.eri,v=d.eci,g=d.w,y=d.h,b=new o.CellRange(f,m,h,v,g,y),E=-1;(0,l.mouseMoveUp)(window,(function(l){var d=t.sheet.selectors;a.container.css("pointer-events","none");for(var f=0;f<d.length;f++){d[f].selector.setBoxinner("none")}var m=r.getCellRectByXY(l.layerX,l.layerY),h=m.ri,v=m.ci;if(-1!==h&&-1!==v){var R=t.sheet.editor.pos,O=t.sheet.editor.editorText.getText(),x=(0,u.cuttingByPos)(O,R-1,!0);O.length>R-1&&(x+=(0,u.cuttingByPosEnd)(O,R-1));for(var A=0;A<d.length;A++){var w=d[A],_=w.className,N=w.erpx;if(N===x&&_===n.className+" clear_selector"){if(i=i||w,-1!==N.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var C=N.split(":"),T=(0,c.expr2xy)(C[0]),M=(0,c.expr2xy)(C[1]);(b=new o.CellRange(T[1],T[0],M[1],M[0],g,y)).move(h,v);var S=r.getMoveRect(b);i.selector.range=b,i.selector.setMove(S)}else i.selector.set(h,v,!0);break}if(N!==x&&_===n.className+" clear_selector"){if(E=-1!==E?E:p(O,w.erpx),t.sheet.editor.setCursorPos(E+w.erpx.length),i=i||w,-1!==w.erpx.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var I=N.split(":"),j=(0,c.expr2xy)(I[0]),D=(0,c.expr2xy)(I[1]);(b=new o.CellRange(j[1],j[0],D[1],D[0],g,y)).move(h,v);var k=r.getMoveRect(b);i.selector.range=b,i.selector.setMove(k)}else i.selector.set(h,v,!0);break}}i&&(i.selector.setCss(i.color,!1),s.lockCells.call(t.sheet,e,i,(0,u.isAbsoluteValue)(i.erpx),E))}}),(function(){var e=t.sheet.selectors;a.container.css("pointer-events","auto");for(var r=0;r<e.length;r++){e[r].selector.setBoxinner("all")}E=-1,i&&i.selector&&i.selector.setCss(i.color,!0),i=null}))}},{key:"setBoxinner",value:function(e){this.l.css("pointer-events",e),this.r.css("pointer-events",e),this.t.css("pointer-events",e),this.b.css("pointer-events",e),this.selectorMove.l.css("pointer-events",e),this.selectorMove.r.css("pointer-events",e),this.selectorMove.t.css("pointer-events",e),this.selectorMove.b.css("pointer-events",e)}},{key:"setCss",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t?this.areaEl.css("border","2px dashed ".concat(e)):this.areaEl.css("border","2px solid ".concat(e)),this.el.css("z-index","-1")}},{key:"setOffset",value:function(e){return this.el.offset(e).show(),this}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"setAreaOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.areaEl.offset({width:n-3+.8,height:a-3+.8,left:t-.8,top:r-.8}).show()}},{key:"setClipboardOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.clipboardEl.offset({left:t,top:r,width:n-5,height:a-5})}},{key:"showAutofill",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.autofillEl.offset({width:n-3,height:a-3,left:t,top:r}).show()}},{key:"hideAutofill",value:function(){this.autofillEl.hide()}},{key:"showClipboard",value:function(){this.clipboardEl.show()}},{key:"hideClipboard",value:function(){this.clipboardEl.hide()}}]),e}();function y(e){var t=this.data,r=e.left,n=e.top,a=e.width,i=e.height,o=e.scroll,l=e.l,s=e.t,u=t.freezeTotalWidth(),c=t.freezeTotalHeight(),d=r-u;u>l&&(d-=o.x);var f=n-c;return c>s&&(f-=o.y),{left:d,top:f,width:a,height:i}}function b(e){var t=this.data,r=e.left,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalWidth(),u=r-s;return s>i&&(u-=l.x),{left:u,top:o,width:n,height:a}}function E(e){var t=this.data,r=e.top,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalHeight(),u=r-s;return s>o&&(u-=l.y),{left:i,top:u,width:n,height:a}}function R(e){this.br.setAreaOffset(y.call(this,e))}function O(e){this.tl.setAreaOffset(e)}function x(e){this.t.setAreaOffset(b.call(this,e))}function A(e){this.l.setAreaOffset(E.call(this,e))}function w(e){this.l.setClipboardOffset(E.call(this,e))}function _(e){this.br.setClipboardOffset(y.call(this,e))}function N(e){this.tl.setClipboardOffset(e)}function C(e){this.t.setClipboardOffset(b.call(this,e))}function T(e){R.call(this,e),O.call(this,e),x.call(this,e),A.call(this,e)}function M(e){_.call(this,e),N.call(this,e),C.call(this,e),w.call(this,e)}var S=function(){function e(t,r,n){f(this,e),this.data=t,this.className=n,this.br=new g(t,this,r),this.t=new g(t,this,r),this.l=new g(t,this,r),this.tl=new g(t,this,r),this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=(0,a.h)("div","".concat(i.cssPrefix,"-selectors")).children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),this.lastri=-1,this.lastci=-1,v+=1}return h(e,[{key:"setCss",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.br.setCss(e,t),this.t.setCss(e,t),this.l.setCss(e,t),this.tl.setCss(e,t)}},{key:"hide",value:function(){this.el.hide()}},{key:"resetOffset",value:function(){var e=this.data,t=this.tl,r=this.t,n=this.l,a=this.br,i=e.freezeTotalHeight(),o=e.freezeTotalWidth();i>0||o>0?(t.setOffset({width:o,height:i}),r.setOffset({left:o,height:i}),n.setOffset({top:i,width:o}),a.setOffset({left:o,top:i})):(t.hide(),r.hide(),n.hide(),a.setOffset({left:0,top:0}))}},{key:"resetAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();T.call(this,e),M.call(this,t),this.resetOffset()}},{key:"resetBRTAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();R.call(this,e),x.call(this,e),_.call(this,t),C.call(this,t),this.resetOffset()}},{key:"resetSelectorBRLAreaOffset",value:function(e){var t=this.data.getMoveRect(e),r=this.data.getClipboardRect();R.call(this,t),A.call(this,t),_.call(this,r),w.call(this,r),this.resetOffset()}},{key:"resetBRLAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();R.call(this,e),A.call(this,e),_.call(this,t),w.call(this,t),this.resetOffset()}},{key:"set",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.data,a=n.calSelectedRangeByStart(e,t),i=a.sri,o=a.sci;if(r){var l=e,s=t;e<0&&(l=0),t<0&&(s=0),n.selector.setIndexes(l,s),this.indexes=[l,s]}this.moveIndexes=[i,o],this.range=a,this.resetAreaOffset(),this.el.show()}},{key:"setMove",value:function(e){T.call(this,e)}},{key:"setEnd",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.data,a=this.lastri,i=this.lastci;if(r){if(e===a&&t===i)return;this.lastri=e,this.lastci=t}this.range=n.calSelectedRangeByEnd(e,t),T.call(this,this.data.getSelectedRect())}},{key:"setBoxinner",value:function(e){this.br.setBoxinner(e),this.t.setBoxinner(e),this.l.setBoxinner(e),this.tl.setBoxinner(e)}},{key:"showAutofill",value:function(e,t){if(-1!==e||-1!==t){var r=this.range,n=r.sri,a=r.sci,i=r.eri,l=r.eci,s=e,u=t,c=n-e,d=i-e,f=l-t;if(a-t>0)this.arange=new o.CellRange(n,u,i,a-1);else if(c>0)this.arange=new o.CellRange(s,a,n-1,l);else if(f<0)this.arange=new o.CellRange(n,l+1,i,u);else{if(!(d<0))return void(this.arange=null);this.arange=new o.CellRange(i+1,a,s,l)}if(null!==this.arange){var m=this.data.getRect(this.arange);m.width+=2,m.height+=2;var h=this.br,v=this.l,p=this.t,g=this.tl;h.showAutofill(y.call(this,m)),v.showAutofill(E.call(this,m)),p.showAutofill(b.call(this,m)),g.showAutofill(m)}}}},{key:"hideAutofill",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideAutofill()}))}},{key:"showClipboard",value:function(){var e=this,t=this.data.getClipboardRect();M.call(this,t),["br","l","t","tl"].forEach((function(t){e[t].showClipboard()}))}},{key:"hideClipboard",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideClipboard()}))}}]),e}();t.default=S},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(6),o=r(4),l=r(29),s=r(5),u=r(7);function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return e.lastIndexOf(t)}var f=function(){function e(t,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.l=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-l")),this.r=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-r")),this.t=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-t")),this.b=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-b")),this.data=r,this.sheet=i,this._selector=o,this.event(this.l,1),this.event(this.r,2),this.event(this.t,3),this.event(this.b,4),this.boxinner=t,this.boxinner.children(this.l,this.r,this.t,this.b)}var t,r,f;return t=e,(r=[{key:"event",value:function(e,t){var r=this,n=null;e.on("mousedown.stop",(function(e){var a=r.data,c=r.sheet,f=r._selector,m=-1,h=a.selector,v=null,p=h.range,g=p.sri,y=p.sci,b=p.eri,E=p.eci,R=p.w,O=p.h,x=new s.CellRange(g,y,b,E,R,O),A=null,w=c.selectors,_=-1,N=-1,C=-1,T=-1;(0,u.mouseMoveUp)(window,(function(u){clearTimeout(n),n=setTimeout((function(){c.container.css("pointer-events","none");for(var n=0;n<w.length;n++)w[n].selector.setBoxinner("none");var h=a.getCellRectByXY(u.layerX,u.layerY),p=h.ri,g=h.ci;if(-1!==p&&-1!==g){var y=r.sheet.editor.pos,b=r.sheet.editor.editorText.getText(),E=(0,i.cuttingByPos)(b,y-1,!0);b.length>y-1&&(E+=(0,i.cuttingByPosEnd)(b,y-1));for(var M=0;M<w.length;M++){var S=w[M],I=S.className,j=S.erpx;if(j===E&&I===f.className+" clear_selector"){if(v=v||S,-1!==j.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var D=j.split(":"),k=(0,o.expr2xy)(D[0]),P=(0,o.expr2xy)(D[1]);(x=new s.CellRange(k[1],k[0],P[1],P[0],R,O)).move(p,g);var L=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(L)}else v.selector.set(p,g,!0);break}if(j!==E&&I===f.className+" clear_selector"){if(m=-1!==m?m:d(b,S.erpx),r.sheet.editor.setCursorPos(m+S.erpx.length),v=v||S,-1!==S.erpx.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var U=j.split(":"),V=(0,o.expr2xy)(U[0]),F=(0,o.expr2xy)(U[1]);if(x=new s.CellRange(V[1],V[0],F[1],F[0],R,O),null===A&&(A=x),4===t){var B=a.getCellRectByXY(u.layerX,u.layerY);x.move2(V[1],V[0],B.ri,B.ci);var H=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(H)}else if(1===t){var Y=a.getCellRectByXY(u.layerX,u.layerY);x.move2(V[1],Y.ci,Y.ri,F[0]);var z=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(z)}else if(3===t){var W=a.getCellRectByXY(u.layerX,u.layerY);x.move2(W.ri,W.ci,F[1],F[0]);var G=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(G)}else if(2===t){var X=a.getCellRectByXY(u.layerX,u.layerY);x.move2(X.ri,V[0],F[1],X.ci);var $=a.getMoveRect(x);v.selector.range=x,v.selector.setMove($)}}else{var q=(0,o.expr2xy)(S.erpx),K=(0,o.expr2xy)(S.erpx),Z=a.getCellRectByXY(u.layerX,u.layerY);if(4===t){x.move2(q[1],q[0],Z.ri,Z.ci);var Q=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(Q)}else if(1===t){x.move2(q[1],Z.ci,Z.ri,K[0]);var J=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(J)}else if(3===t){x.move2(Z.ri,Z.ci,K[1],K[0]);var ee=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(ee)}else if(2===t){x.move2(Z.ri,q[0],K[1],Z.ci);var te=a.getMoveRect(x);v.selector.range=x,v.selector.setMove(te)}}break}}!v||_===x.sri&&N===x.sci&&C===x.eri&&T===x.eci||(v.selector.setCss(v.color,!1),l.lockCells.call(r.sheet,e,v,(0,i.isAbsoluteValue)(v.erpx),m)),_=x.sri,N=x.sci,C=x.eri,T=x.eci}}),6)}),(function(){clearTimeout(n);var e=r.sheet.selectors;c.container.css("pointer-events","auto");for(var t=0;t<e.length;t++)e[t].selector.setBoxinner("all");m=-1,v&&v.selector&&v.selector.setCss(v.color,!0),v=null}))}))}}])&&c(t.prototype,r),f&&c(t,f),e}();t.default=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(6),a=r(41);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.inputText="",this.oldCell="",this.ri=-1,this.ci=-1}var t,r,o;return t=e,(r=[{key:"setText",value:function(e){return this.inputText=e,this.getText()}},{key:"getText",value:function(){return this.inputText}},{key:"setOldCell",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=t.ri,n=void 0===r?-1:r,a=t.ci,i=void 0===a?-1:a;return this.oldCell=e,this.ri=n,this.ci=i,this.getOldCell()}},{key:"getOldCell",value:function(){return this.oldCell}},{key:"getRICI",value:function(){return{ri:this.ri,ci:this.ci}}},{key:"changeText",value:function(e){1===e&&this.setText(this.getText().replace(/，/g,","))}},{key:"isFormula",value:function(){return 0===this.getText().lastIndexOf("=")}},{key:"f4ShortcutKey",value:function(e){var t=this.setText((0,a.toUpperCase)(this.inputText)),r=(0,n.cuttingByPos)(t,e,!0),i=(0,n.cuttingByPosEnd2)(t,e+1);console.log(i);var o=(0,n.isAbsoluteValue)(r,5),l="",s=r.split(":")[1];if(s&&(o=2===(o=1===(o=12===(o=3===(o=(0,n.isAbsoluteValue)(s,5))?6:o)?9:o)?7:o)?8:o,console.log(o)),!1!==o)switch(o){case 13:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s1;var u=t.substring(0,t.lastIndexOf(s));t=this.setText(u+l);break;case 12:s=r,l=(0,n.value2absolute)(s.replace(/\$/g,"")).s3,console.log((0,n.value2absolute)(r)),t=this.setText(t.substring(0,t.lastIndexOf(s))+l),console.log(this.getText());break;case 11:case 10:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s3,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 9:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 8:l=(s=r.split(":")[1]).replace(/\$/g,""),t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 7:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 6:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 5:l=(0,n.value2absolute)(r.split(":")[1].replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 4:l=(0,n.value2absolute)(r.split(":")[1].replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 3:l=(0,n.value2absolute)(r.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 2:l=r.replace(/\$/g,""),t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 1:l=(0,n.value2absolute)(r.replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(r))+l)}return{pos:t.length,inputText:t=this.setText(t+i)}}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cellRender=l,t.infixExprToSuffixExpr=t.render=void 0;var n=r(4),a=r(1);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}t.infixExprToSuffixExpr=function(e){for(var t=[],r=[],a=[],o=0,l=1,s=0;s<e.length;s+=1){var u=e.charAt(s);if(" "!==u)if(u>="a"&&u<="z")a.push(u.toUpperCase());else if(u>="0"&&u<="9"||u>="A"&&u<="Z"||"."===u)a.push(u);else if('"'===u){for(s+=1;'"'!==e.charAt(s);)a.push(e.charAt(s)),s+=1;r.push('"'.concat(a.join(""))),a=[]}else{if("("!==u&&a.length>0&&r.push(a.join("")),")"===u){var c=t.pop();if(2===o)try{for(var d=i((0,n.expr2xy)(r.pop()),2),f=d[0],m=d[1],h=i((0,n.expr2xy)(r.pop()),2),v=h[0],p=h[1],g=0,y=v;y<=f;y+=1)for(var b=p;b<=m;b+=1)r.push((0,n.xy2expr)(y,b)),g+=1;r.push([c,g])}catch(e){}else if(1===o)r.push([c,l]),l=1;else for(;"("!==c&&(r.push(c),!(t.length<=0));)c=t.pop();o=0}else if(":"===u)o=2;else if(","===u)o=1,l+=1;else if("("===u&&a.length>0)t.push(a.join(""));else{if(t.length>0&&("+"===u||"-"===u)){var E=t[t.length-1];if("("!==E&&r.push(t.pop()),"*"===E||"/"===E)for(;t.length>0&&"("!==(E=t[t.length-1]);)r.push(t.pop())}t.push(u)}a=[]}}for(a.length>0&&r.push(a.join(""));t.length>0;)r.push(t.pop());return r};function o(e,t){return"string"==typeof e&&-1!==e.toUpperCase().indexOf(t.toUpperCase())}function l(e,t,r,i,l,s,u){arguments.length>7&&void 0!==arguments[7]&&arguments[7];if(void 0===l)return"";if("string"==typeof l&&-1!==a.look.indexOf(l.split("!")[0])){var c=l.length;l.split(" ")[0]&&(c=l.split(" ")[0].length);var d=JSON.parse(l.substring(l.indexOf("!")+1,c)),f=a.look.indexOf(l.split("!")[0]);if(1===f)return d.text;if(0===f&&d&&d[0]){var m=d[0],h=m.name,v=m.value;if(0===v&&d[1]&&0!==d[1].value)return h;if(0===v&&!d[1])return h}return a.look2}return"="===l[0]&&"="!==l[1]?o(l.substring(1),"wland")||o(l.substring(1),"wfr")||o(l.substring(1),"rtd")||o(l.substring(1),"city")?l.toUpperCase():l.substring(1)&&t&&t.Sheets&&t.Sheets[e.name]&&t.Sheets[e.name][(0,n.xy2expr)(i,r)]?t.Sheets[e.name][(0,n.xy2expr)(i,r)].f&&-1!==t.Sheets[e.name][(0,n.xy2expr)(i,r)].f.search(/\((\+|\-|\*|\/)/)||void 0===t.Sheets[e.name][(0,n.xy2expr)(i,r)].v||""===t.Sheets[e.name][(0,n.xy2expr)(i,r)].v?"#ERROR!":(t.Sheets[e.name][(0,n.xy2expr)(i,r)].v=t.Sheets[e.name][(0,n.xy2expr)(i,r)].v+"",t.Sheets[e.name][(0,n.xy2expr)(i,r)].w?t.Sheets[e.name][(0,n.xy2expr)(i,r)].w:t.Sheets[e.name][(0,n.xy2expr)(i,r)].v.replace(/'/g,'"')):l:l}var s=l;t.render=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMinus=void 0;t.isMinus=function(e){return!isNaN(e)&&(""!==e&&parseInt(e)<0)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.thinLineWidth=c,t.npx=d,t.DrawBox=t.Draw=void 0;var n=r(8);function a(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),e}function u(){return window.devicePixelRatio||1}function c(){return u()-.5}function d(e){var t=e*u()+"";return parseInt(t,10)}function f(e){var t=d(e);return t>0?t-.5:.5}function m(e,t,r){e.save(),e.beginPath(),e.fillStyle="#707070",e.moveTo(t,r+6),e.lineTo(t+12,r+6),e.stroke(),e.strokeRect(t,r,12,12),e.clip(),e.fill(),e.restore()}function h(e,t,r){e.save(),e.beginPath(),e.fillStyle="#707070",e.moveTo(t+6,r),e.lineTo(t+6,r+12),e.moveTo(t,r+6),e.lineTo(t+12,r+6),e.stroke(),e.strokeRect(t,r,12,12),e.clip(),e.fill(),e.restore()}var v=function(){function e(t,r,n,a){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;o(this,e),this.x=t,this.y=r,this.width=n,this.height=a,this.padding=i,this.bgcolor="#ffffff",this.borderTop=null,this.borderRight=null,this.borderBottom=null,this.borderLeft=null}return s(e,[{key:"setBorders",value:function(e){var t=e.top,r=e.bottom,n=e.left,a=e.right;t&&(this.borderTop=t),a&&(this.borderRight=a),r&&(this.borderBottom=r),n&&(this.borderLeft=n)}},{key:"innerWidth",value:function(){return this.width-2*this.padding}},{key:"innerHeight",value:function(){return this.height-2*this.padding}},{key:"textx",value:function(e){var t=this.width,r=this.padding,n=this.x;return"left"===e?n+=r:"center"===e?n+=t/2:"right"===e&&(n+=t-r),n}},{key:"texty",value:function(e,t,r){var n=this.height,a=this.padding,i=this.y;return"top"===e?i+=a:"middle"===e?i=i+n/2-r:"bottom"===e&&(i+=n-2*r-a),i}},{key:"topxys",value:function(){var e=this.x,t=this.y;return[[e,t],[e+this.width,t]]}},{key:"rightxys",value:function(){var e=this.x,t=this.y,r=this.width;return[[e+r,t],[e+r,t+this.height]]}},{key:"bottomxys",value:function(){var e=this.x,t=this.y,r=this.width,n=this.height;return[[e,t+n],[e+r,t+n]]}},{key:"leftxys",value:function(){var e=this.x,t=this.y;return[[e,t],[e,t+this.height]]}}]),e}();function p(e,t,r,n,a,i,o){var l={x:0,y:0};"underline"===e?l.y="bottom"===a?0:"top"===a?-(i+2):-i/2:"strike"===e&&("bottom"===a?l.y=i/2:"top"===a&&(l.y=-(i/2+2))),"center"===n?l.x=o/2:"right"===n&&(l.x=o),this.line([t-l.x,r-l.y],[t-l.x+o,r-l.y])}t.DrawBox=v;var g=function(){function e(t,r,n){o(this,e),this.el=t,this.ctx=t.getContext("2d"),this.resize(r,n),this.ctx.scale(1*u(),1*u()),this.cxc={indent:250,vIndent:200,canvasContext:this.ctx}}return s(e,[{key:"resize",value:function(e,t){this.el.style.width="".concat(e,"px"),this.el.style.height="".concat(t,"px"),this.el.width=d(e),this.el.height=d(t)}},{key:"clear",value:function(){var e=this.el,t=e.width,r=e.height;return this.ctx.clearRect(0,0,t,r),this}},{key:"attr",value:function(e){return Object.assign(this.ctx,e),this}},{key:"save",value:function(){return this.ctx.save(),this.ctx.beginPath(),this}},{key:"restore",value:function(){return this.ctx.restore(),this}},{key:"beginPath",value:function(){return this.ctx.beginPath(),this}},{key:"translate",value:function(e,t){return this.ctx.translate(d(e),d(t)),this}},{key:"clearRect",value:function(e,t,r,n){return this.ctx.clearRect(e,t,r,n),this}},{key:"fillRect",value:function(e,t,r,n){return this.ctx.fillRect(d(e)-.5,d(t)-.5,d(r),d(n)),this}},{key:"fillText",value:function(e,t,r){return this.ctx.fillText(e,d(t),d(r)),this}},{key:"selfAdaptionHeight",value:function(e,t,r){if(void 0!==r&&void 0!==t){for(var n=1,a={len:0,start:0},i=e.width-2*e.padding,o=0;o<t.length;o+=1)a.len+e.padding>=i&&(n+=1,a.len=0,a.start=o),a.len+=this.selfAdaptionOneTxtWidth(t[o],r);return n}}},{key:"selfAdaptionTxtWidth",value:function(e,t,r){if(!1===(0,n.isHave)(e)||!1===(0,n.isHave)(t)||e.length<=0)return 0;var a=this.ctx;return a.font="".concat(t.italic?"italic":""," ").concat(t.bold?"bold":""," ").concat(d(t.size),"px ").concat(t.name),a.measureText(e).width*t.size/d(t.size)}},{key:"selfAdaptionOneTxtWidth",value:function(e,t){if(!1===(0,n.isHave)(e)||!1===(0,n.isHave)(t)||e.length<=0)return 0;var r=this.ctx;return r.font="".concat(t.italic?"italic":""," ").concat(t.bold?"bold":""," ").concat(d(t.size),"px ").concat(t.name),r.measureText(e).width}},{key:"text",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=this.ctx,i=r.align,o=r.valign,l=r.font,s=r.color,u=r.strike,c=r.underline,f=(r.ignore,t.textx(i));a.save(),a.beginPath(),this.attr({textAlign:i,textBaseline:o,font:"".concat(l.italic?"italic":""," ").concat(l.bold?"bold":""," ").concat(d(l.size),"px ").concat(l.name),fillStyle:s,strokeStyle:s});var m=this.selfAdaptionTxtWidth(e,l,t),h=0,v=t.innerWidth();if(n){v=t.width-2*t.padding;var g=this.selfAdaptionHeight(t,e,l);h=(g-1)*l.size/2}var y=t.texty(o,l.size,h);if(n&&m>v){for(var b={len:0,start:0},E=0;E<e.length;E+=1)b.len+t.padding>=v&&(this.fillText(e.substring(b.start,E),f,y),u&&p.call(this,"strike",f,y,i,o,l.size,b.len),c&&p.call(this,"underline",f,y,i,o,l.size,b.len),y+=l.size+2,b.len=0,b.start=E),b.len+=this.selfAdaptionOneTxtWidth(e[E],l);b.len>0&&(this.fillText(e.substring(b.start),f,y),u&&p.call(this,"strike",f,y,i,o,l.size,b.len),c&&p.call(this,"underline",f,y,i,o,l.size,b.len))}else this.fillText(e,f,y),u&&p.call(this,"strike",f,y,i,o,l.size,m),c&&p.call(this,"underline",f,y,i,o,l.size,m);return a.restore(),this}},{key:"border",value:function(e,t){var r=this.ctx;return r.lineWidth=c,r.strokeStyle=t,"medium"===e?r.lineWidth=d(2)-.5:"thick"===e?r.lineWidth=d(3):"dashed"===e?r.setLineDash([d(3),d(2)]):"dotted"===e?r.setLineDash([d(1),d(1)]):"double"===e&&r.setLineDash([d(2),0]),this}},{key:"line",value:function(){var e=this.ctx;if(arguments.length>1){var t=arguments.length<=0?void 0:arguments[0],r=i(t,2),n=r[0],a=r[1];e.moveTo(f(n),f(a));for(var o=1;o<arguments.length;o+=1){var l=o<0||arguments.length<=o?void 0:arguments[o],s=i(l,2),u=s[0],c=s[1];e.lineTo(f(u),f(c))}e.stroke()}return this}},{key:"strokeBorders",value:function(e){var t=this.ctx;t.save(),t.beginPath();var r=e.borderTop,n=e.borderRight,i=e.borderBottom,o=e.borderLeft;r&&(this.border.apply(this,a(r)),this.line.apply(this,a(e.topxys()))),n&&(this.border.apply(this,a(n)),this.line.apply(this,a(e.rightxys()))),i&&(this.border.apply(this,a(i)),this.line.apply(this,a(e.bottomxys()))),o&&(this.border.apply(this,a(o)),this.line.apply(this,a(e.leftxys()))),t.restore()}},{key:"dropUp",value:function(e,t,r){var n=this.ctx,a=e.x+10,i=e.y+e.height-18-r;t?h.call(this,n,d(a),d(i)):m.call(this,n,d(a),d(i))}},{key:"lineTo",value:function(e,t){this.cxc.canvasContext.lineTo(e+this.cxc.indent,t+this.cxc.vIndent)}},{key:"moveTo",value:function(e,t){this.cxc.canvasContext.moveTo(e+this.cxc.indent,t+this.cxc.vIndent)}},{key:"dropdown",value:function(e){var t=this.ctx,r=e.x,n=e.y,a=r+e.width-15,i=n+e.height-15;t.save(),t.beginPath(),t.moveTo(d(a),d(i)),t.lineTo(d(a+8),d(i)),t.lineTo(d(a+4),d(i+6)),t.closePath(),t.fillStyle="rgba(0, 0, 0, .45)",t.fill(),t.restore()}},{key:"error",value:function(e){var t=this.ctx,r=e.x,n=e.y,a=r+e.width-1;t.save(),t.beginPath(),t.moveTo(d(a-8),d(n-1)),t.lineTo(d(a),d(n-1)),t.lineTo(d(a),d(n+8)),t.closePath(),t.fillStyle="rgba(255, 0, 0, .65)",t.fill(),t.restore()}},{key:"rect",value:function(e,t){var r=this.ctx,n=e.x,a=e.y,i=e.width,o=e.height,l=e.bgcolor;r.save(),r.beginPath(),r.fillStyle=l||"#fff",r.rect(f(n+1),f(a+1),d(i-2),d(o-2)),r.clip(),r.fill(),t(),r.restore()}},{key:"rect2",value:function(e,t){var r=this.ctx,n=e.x,a=e.y,i=e.width,o=e.bgcolor,l=e.height;r.save(),r.beginPath(),r.fillStyle="rgba(0, 0, 0, 0)"===o?"#fff":o||"#fff",r.rect(f(n+1),f(a+1),d(i-2),d(l-2)),r.clip(),r.fill(),t(),r.restore()}}]),e}();t.Draw=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(7),i=r(1),o=r(9);function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=[{key:"copy",title:(0,o.tf)("contextmenu.copy"),label:"Ctrl+C"},{key:"cut",title:(0,o.tf)("contextmenu.cut"),label:"Ctrl+X"},{key:"divider"},{key:"insert-row",title:(0,o.tf)("contextmenu.insertRow")},{key:"insert-column",title:(0,o.tf)("contextmenu.insertColumn")},{key:"divider"},{key:"delete-row",title:(0,o.tf)("contextmenu.deleteRow")},{key:"delete-column",title:(0,o.tf)("contextmenu.deleteColumn")},{key:"delete-cell-text",title:(0,o.tf)("contextmenu.deleteCellText")},{key:"divider"},{key:"validation",title:(0,o.tf)("contextmenu.validation")}];function c(e){var t=this;return"divider"===e.key?(0,n.h)("div","".concat(i.cssPrefix,"-item divider")):(0,n.h)("div","".concat(i.cssPrefix,"-item")).on("click",(function(r){t.itemClick(e.key,r),t.hide()})).children(e.title(),(0,n.h)("div","label").child(e.label||""))}function d(){var e=this;return u.map((function(t){return c.call(e,t)}))}var f=function(){function e(t){var r,a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.menus=d.call(this),this.el=(r=(0,n.h)("div","".concat(i.cssPrefix,"-contextmenu"))).children.apply(r,l(this.menus)).hide(),this.viewFn=t,this.itemClick=function(){},this.isHide=a}var t,r,o;return t=e,(r=[{key:"hide",value:function(){var e=this.el;e.hide(),(0,a.unbindClickoutside)(e)}},{key:"setPosition",value:function(e,t){if(!this.isHide){var r=this.el,n=r.show().offset(),i=n.height,o=n.width,l=this.viewFn(),s=t,u=e;l.height-t<=i&&(s-=i),l.width-e<=o&&(u-=o),r.offset({left:u,top:s}),(0,a.bindClickoutside)(r)}}}])&&s(t.prototype,r),o&&s(t,o),e}();t.default=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildButton=_,t.buildButtonWithIcon=C,t.default=void 0;var n=r(0),a=r(7),i=g(r(159)),o=g(r(160)),l=g(r(161)),s=g(r(162)),u=(g(r(163)),g(r(75))),c=g(r(164)),d=g(r(165)),f=g(r(15)),m=g(r(12)),h=r(1),v=r(9),p=g(r(168));function g(e){return e&&e.__esModule?e:{default:e}}function y(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function x(e,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _(e){return(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-btn")).on("mouseenter",(function(t){(0,i.default)(e,t.target)})).attr("data-tooltip",e)}function N(){return(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-divider"))}function C(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};return _(e).child((r=t,new m.default(r))).on("click",(function(){return n()}))}function T(){var e=this;this.ddFormat.change=function(t){return e.change("format",t.key)},this.ddFont.change=function(t){return e.change("font-name",t.key)},this.ddFontSize.change=function(t){return e.change("font-size",t.pt)},this.ddTextColor.change=function(t){return e.change("color",t)},this.ddFillColor.change=function(t){return e.change("bgcolor",t)},this.ddAlign.change=function(t){return e.change("align",t)},this.ddVAlign.change=function(t){return e.change("valign",t)},this.ddBorder.change=function(t){return e.change("border",t)},this.undoEl.change=function(t){return e.change("undo",t)}}function M(e){var t=e,r=e.split("-");r.length>1&&r.forEach((function(e,r){0===r?t=e:t+=e[0].toUpperCase()+e.substring(1)}));var n=this["".concat(t,"El")];n.toggle(),this.change(e,n.hasClass("active"))}var S=function(e){function t(){var e;O(this,t);var r=new m.default("ellipsis"),a=(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-more"));return(e=x(this,A(t).call(this,r,"auto",!1,"bottom-right",!1,a))).moreBtns=a,e.contentEl.css("max-width","420px"),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,e),t}(f.default);function I(){this.btns2=this.btnChildren.map((function(e){var t=e.box(),r=e.computedStyle(),n=r.marginLeft,a=r.marginRight;return[e,t.width+parseInt(n,10)+parseInt(a,10)]}))}function j(){var e,t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.widthFn,n=this.el,a=this.btns,i=this.moreEl,o=this.ddMore,l=this.btns2,s=o.moreBtns,u=o.contentEl;n.css("width","".concat(r()-60,"px"));var c=n.box();console.log("92: ",c);var d=160,f=12,m=[],h=[];l.forEach((function(e,t){var r=E(e,2),n=r[0],a=r[1];d+=a,t===l.length-1||d<c.width?m.push(n):(f+=a,h.push(n))})),(e=a.html("")).children.apply(e,m),(t=s.html("")).children.apply(t,h),u.css("width","".concat(f,"px")),h.length>0?i.show():i.hide()}var D=function(){function e(t,r){var i,f=this,m=arguments.length>2&&void 0!==arguments[2]&&arguments[2];O(this,e),this.data=t,this.change=function(){},this.widthFn=r;var g=t.defaultStyle();this.ddFormat=new s.default,this.ddFont=new o.default,this.ddFontSize=new l.default,this.ddTextColor=new u.default("text-color",g.color),this.ddFillColor=new u.default("fill-color",g.bgcolor),this.ddAlign=new c.default(["left","center","right"],g.align),this.ddVAlign=new c.default(["top","middle","bottom"],g.valign),this.ddBorder=new d.default,this.ddMore=new S,this.undoEl=new p.default("undo",(function(){return f.change("undo")}),(function(e){return f.change("undoList",e)})),this.redoEl=new p.default("redo",(function(){return f.change("redo")}),(function(e){return f.change("redoList",e)})),this.btnChildren=[_("".concat((0,v.t)("toolbar.undo"))).child(this.undoEl.el),_("".concat((0,v.t)("toolbar.redo"))).child(this.redoEl.el),this.paintformatEl=C("".concat((0,v.t)("toolbar.paintformat")),"paintformat",(function(){return M.call(f,"paintformat")})),N(),_("".concat((0,v.t)("toolbar.format"))).child(this.ddFormat.el),N(),_("".concat((0,v.t)("toolbar.font"))).child(this.ddFont.el),_("".concat((0,v.t)("toolbar.fontSize"))).child(this.ddFontSize.el),N(),this.fontBoldEl=C("".concat((0,v.t)("toolbar.fontBold")," (Ctrl+B)"),"bold",(function(){return M.call(f,"font-bold")})),this.fontItalicEl=C("".concat((0,v.t)("toolbar.fontItalic")," (Ctrl+I)"),"italic",(function(){return M.call(f,"font-italic")})),this.underlineEl=C("".concat((0,v.t)("toolbar.underline")," (Ctrl+U)"),"underline",(function(){return M.call(f,"underline")})),this.strikeEl=C("".concat((0,v.t)("toolbar.strike")),"strike",(function(){return M.call(f,"strike")})),_("".concat((0,v.t)("toolbar.textColor"))).child(this.ddTextColor.el),N(),_("".concat((0,v.t)("toolbar.fillColor"))).child(this.ddFillColor.el),_("".concat((0,v.t)("toolbar.border"))).child(this.ddBorder.el),this.mergeEl=C("".concat((0,v.t)("toolbar.merge")),"merge",(function(){return M.call(f,"merge")})),N(),_("".concat((0,v.t)("toolbar.align"))).child(this.ddAlign.el),_("".concat((0,v.t)("toolbar.valign"))).child(this.ddVAlign.el),this.textwrapEl=C("".concat((0,v.t)("toolbar.textwrap")),"textwrap",(function(){return M.call(f,"textwrap")})),N(),this.freezeEl=C("".concat((0,v.t)("toolbar.freeze")),"freeze",(function(){return M.call(f,"freeze")})),this.addEl=C("".concat((0,v.t)("toolbar.add")),"add",(function(){return M.call(f,"add")})),this.closeEl=C("".concat((0,v.t)("toolbar.solveExpression")),"close",(function(){return M.call(f,"close")})),this.autofilterEl=C("".concat((0,v.t)("toolbar.autofilter")),"autofilter",(function(){return M.call(f,"autofilter")})),this.throwFormulaEl=C("".concat((0,v.t)("toolbar.throwFormula")),"chevron-right",(function(){return M.call(f,"throwFormula")})),this.moreEl=_("".concat((0,v.t)("toolbar.more"))).child(this.ddMore.el).hide()],this.el=(0,n.h)("div","".concat(h.cssPrefix,"-toolbar")),this.btns=(i=(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-btns"))).children.apply(i,y(this.btnChildren)),this.el.child(this.btns),m&&this.el.hide(),T.call(this),this.reset(),setTimeout((function(){I.call(f),j.call(f)}),0),(0,a.bind)(window,"resize",(function(){j.call(f,t.settings.view.width)}))}var t,r,i;return t=e,(r=[{key:"moreResize",value:function(){var e=this.data;j.call(this,e.settings.view.width)}},{key:"paintformatActive",value:function(){return this.paintformatEl.hasClass("active")}},{key:"paintformatToggle",value:function(){this.paintformatEl.toggle()}},{key:"trigger",value:function(e){M.call(this,e)}},{key:"reset",value:function(){var e=this.data,t=e.getSelectedCellStyle(),r=e.getSelectedCell();this.undoEl.disabled(!e.canUndo()),this.redoEl.disabled(!e.canRedo()),this.mergeEl.active(e.canUnmerge()).disabled(!e.selector.multiple()),this.autofilterEl.active(!e.canAutofilter());var n=t.font;this.ddFont.setTitle(n.name),this.ddFontSize.setTitle(n.size),this.fontBoldEl.active(n.bold),this.fontItalicEl.active(n.italic),this.underlineEl.active(t.underline),this.strikeEl.active(t.strike),this.ddTextColor.setTitle(t.color),this.ddFillColor.setTitle(t.bgcolor),this.ddAlign.setTitle(t.align),this.ddVAlign.setTitle(t.valign),this.textwrapEl.active(t.textwrap),this.addEl.active(e.equationIsActive()),this.closeEl.active(!1),this.throwFormulaEl.active(!1),this.freezeEl.active(e.freezeIsActive()),r&&r.format&&this.ddFormat.setTitle(r.format)}}])&&b(t.prototype,r),i&&b(t,i),e}();t.default=D},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t.classList.contains("active"))return;var r=t.getBoundingClientRect(),o=r.left,l=r.top,s=r.width,u=r.height,c=(0,n.h)("div","".concat(i.cssPrefix,"-tooltip")).html(e).show();document.body.appendChild(c.el);var d=c.box();c.css("left","".concat(o+s/2-d.width/2,"px")).css("top","".concat(l+u+2,"px")),(0,a.bind)(t,"mouseleave",(function(){document.body.contains(c.el)&&document.body.removeChild(c.el)})),(0,a.bind)(t,"click",(function(){document.body.contains(c.el)&&document.body.removeChild(c.el)}))};var n=r(0),a=r(7),i=r(1)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(15))&&n.__esModule?n:{default:n},i=r(0),o=r(30),l=r(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.baseFonts.map((function(e){return(0,i.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){r.setTitle(e.title),r.change(e)})).child(e.title)}));return r=c(this,(e=d(t)).call.apply(e,[this,o.baseFonts[0].title,"160px",!0,"bottom-left",{type:!1}].concat(u(n))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),t}(a.default);t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(15))&&n.__esModule?n:{default:n},i=r(0),o=r(30),l=r(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.fontSizes.map((function(e){return(0,i.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){r.setTitle("".concat(e.pt)),r.change(e)})).child("".concat(e.pt))}));return r=c(this,(e=d(t)).call.apply(e,[this,"10","60px",!0,"bottom-left",{type:!1}].concat(u(n))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),t}(a.default);t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(15))&&n.__esModule?n:{default:n},i=r(0),o=r(42),l=r(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.baseFormats.slice(0);return n.splice(1,0,{key:"divider"}),n.splice(5,0,{key:"divider"}),n=n.map((function(e){var t=(0,i.h)("div","".concat(l.cssPrefix,"-item"));return"divider"===e.key?t.addClass("divider"):(t.child(e.title()).on("click",(function(){r.setTitle(e.title()),r.change(e)})),e.label&&t.child((0,i.h)("div","label").html(e.label))),t})),r=d(this,(e=f(t)).call.apply(e,[this,"Normal","220px",!0,"bottom-left",{type:!1}].concat(u(n))))}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),r=t,(n=[{key:"setTitle",value:function(e){for(var t=0;t<o.baseFormats.length;t+=1)o.baseFormats[t].key===e&&this.title.html(o.baseFormats[t].title);this.hide()}}])&&c(r.prototype,n),a&&c(r,a),t}(a.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(15)),a=s(r(12)),i=r(0),o=r(74),l=r(1);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function d(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.allFnObj.map((function(e){return(0,i.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){r.hide(),r.change(e)})).child(e.key)}));return r=d(this,(e=f(t)).call.apply(e,[this,new a.default("cellFormulaProxy"),"180px",!0,"bottom-left",{type:!1}].concat(c(n))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),t}(n.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=l(r(15)),a=r(0),i=l(r(12)),o=r(1);function l(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(e,r){var n,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var s=new i.default("align-".concat(r)),c=e.map((function(e){return(t="align-".concat(e),(0,a.h)("div","".concat(o.cssPrefix,"-item")).child(new i.default(t))).on("click",(function(){l.setTitle(e),l.change(e)}));var t}));return l=d(this,(n=f(t)).call.apply(n,[this,s,"auto",!0,"bottom-left",{type:!1}].concat(u(c))))}var r,n,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),r=t,(n=[{key:"setTitle",value:function(e){this.title.setName("align-".concat(e)),this.hide()}}])&&c(r.prototype,n),l&&c(r,l),t}(n.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(15)),a=o(r(12)),i=o(r(166));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=new a.default("border-all"),n=new i.default;return n.change=function(t){e.change(t),e.hide()},(e=s(this,u(t).call(this,r,"auto",!1,"bottom-left",{type:!1},n.el))).borderPalette=n,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(n.default);t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=s(r(12)),i=s(r(75)),o=s(r(167)),l=r(1);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(){var e;return(0,n.h)("table","").child((e=(0,n.h)("tbody","")).children.apply(e,arguments))}function f(e){var t=this,r=(0,n.h)("div","".concat(l.cssPrefix,"-border-palette-cell"));return this.items.push(r),(0,n.h)("td","").child(r.child(new a.default("border-".concat(e))).on("click",(function(){t.mode=e;var r=t.mode,n=t.style,a=t.color;t.change({mode:r,style:n,color:a})})))}t.default=function e(){var t,r,a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.color="#000",this.style="thin",this.mode="all",this.change=function(){},this.ddColor=new i.default("line-color",this.color),this.ddColor.change=function(e){a.color=e},this.ddType=new o.default(this.style),this.ddType.change=function(e){var t=c(e,1)[0];a.style=t},this.el=(0,n.h)("div","".concat(l.cssPrefix,"-border-palette")),this.items=[];var s=d((0,n.h)("tr","").children((0,n.h)("td","".concat(l.cssPrefix,"-border-palette-left")).child(d((t=(0,n.h)("tr","")).children.apply(t,u(["all","inside","horizontal","vertical","outside"].map((function(e){return f.call(a,e)})))),(r=(0,n.h)("tr","")).children.apply(r,u(["left","top","right","bottom","none"].map((function(e){return f.call(a,e)})))))),(0,n.h)("td","".concat(l.cssPrefix,"-border-palette-right")).children((0,n.h)("div","".concat(l.cssPrefix,"-toolbar-btn")).child(this.ddColor.el),(0,n.h)("div","".concat(l.cssPrefix,"-toolbar-btn")).child(this.ddType.el))));this.el.child(s)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=l(r(15)),a=r(0),i=l(r(12)),o=r(1);function l(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=[["thin",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" style="user-select: none;"></line></svg>'],["medium",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="2" style="user-select: none;"><line x1="0" y1="1.0" x2="50" y2="1.0" stroke-width="2" stroke="black" style="user-select: none;"></line></svg>'],["thick",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="3" style="user-select: none;"><line x1="0" y1="1.5" x2="50" y2="1.5" stroke-width="3" stroke="black" style="user-select: none;"></line></svg>'],["dashed",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="2" style="user-select: none;"></line></svg>'],["dotted",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="1" style="user-select: none;"></line></svg>']],h=function(e){function t(e){var r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var l=new i.default("line-type"),s=0,f=m.map((function(t,r){return(0,a.h)("div","".concat(o.cssPrefix,"-item state ").concat(e===t[0]?"checked":"")).on("click",(function(){f[s].toggle("checked"),f[r].toggle("checked"),s=r,n.hide(),n.change(t)})).child((0,a.h)("div","".concat(o.cssPrefix,"-line-type")).html(t[1]))}));return n=c(this,(r=d(t)).call.apply(r,[this,l,"auto",!1,"bottom-left",{type:!1}].concat(u(f))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),t}(n.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(15)),a=o(r(12)),i=o(r(169));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new a.default(e).css("height","18px"),l=new i.default;return s(this,u(t).call(this,o,"auto",!0,"bottom-left",{type:!0,change:r,arrowChange:n,historyBorder:l},l.el))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(n.default);t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-history-border")),this.history=(0,n.h)("div","".concat(a.cssPrefix,"-history-content")).html("暂无内容"),this.el.child(this.history)}var t,r,o;return t=e,(r=[{key:"setContent",value:function(e){var t;e=e.slice(e.length-100<0?0:e.length,e.length),this.el.html("");for(var r=[],a=e.length-1;a>=0;a--){var i=(0,n.h)("div",""),o=e[a].action;i.html(o),r.push(i)}console.log(this,this.el),(t=this.el).children.apply(t,r)}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=d(r(76)),a=d(r(171)),i=d(r(172)),o=d(r(173)),l=d(r(43)),s=r(9),u=r(0),c=r(1);function d(e){return e&&e.__esModule?e:{default:e}}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=100,y=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=new o.default(new i.default("cell",["cell"],"100%",(function(e){return(0,s.t)("dataValidation.modeType.".concat(e))})),{required:!0},"".concat((0,s.t)("dataValidation.range"),":"),g),n=new o.default(new a.default("120px","E3 or E3:F12"),{required:!0,pattern:/^([A-Z]{1,2}[1-9]\d*)(:[A-Z]{1,2}[1-9]\d*)?$/}),d=new o.default(new i.default("list",["list","number","date","phone","email"],"100%",(function(e){return(0,s.t)("dataValidation.type.".concat(e))}),(function(t){return e.criteriaSelected(t)})),{required:!0},"".concat((0,s.t)("dataValidation.criteria"),":"),g),f=new o.default(new i.default("be",["be","nbe","eq","neq","lt","lte","gt","gte"],"160px",(function(e){return(0,s.t)("dataValidation.operator.".concat(e))}),(function(t){return e.criteriaOperatorSelected(t)})),{required:!0}).hide(),m=new o.default(new a.default("70px","10"),{required:!0}).hide(),p=new o.default(new a.default("70px","100"),{required:!0,type:"number"}).hide(),y=new o.default(new a.default("120px","a,b,c"),{required:!0}),b=new o.default(new a.default("70px","10"),{required:!0,type:"number"}).hide();return(e=h(this,v(t).call(this,(0,s.t)("contextmenu.validation"),[(0,u.h)("div","".concat(c.cssPrefix,"-form-fields")).children(r.el,n.el),(0,u.h)("div","".concat(c.cssPrefix,"-form-fields")).children(d.el,f.el,m.el,p.el,b.el,y.el),(0,u.h)("div","".concat(c.cssPrefix,"-buttons")).children(new l.default("cancel").on("click",(function(){return e.btnClick("cancel")})),new l.default("remove").on("click",(function(){return e.btnClick("remove")})),new l.default("save","primary").on("click",(function(){return e.btnClick("save")})))]))).mf=r,e.rf=n,e.cf=d,e.of=f,e.minvf=m,e.maxvf=p,e.vf=b,e.svf=y,e.change=function(){},e}var r,n,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),r=t,(n=[{key:"criteriaSelected",value:function(e){var t=this.of,r=this.minvf,n=this.maxvf,a=this.vf,i=this.svf;"date"===e||"number"===e?(t.show(),r.rule.type=e,n.rule.type=e,"date"===e?(r.hint("2018-11-12"),n.hint("2019-11-12")):(r.hint("10"),n.hint("100")),r.show(),n.show(),a.hide(),i.hide()):("list"===e?i.show():i.hide(),a.hide(),t.hide(),r.hide(),n.hide())}},{key:"criteriaOperatorSelected",value:function(e){if(e){var t=this.minvf,r=this.maxvf,n=this.vf;if("be"===e||"nbe"===e)t.show(),r.show(),n.hide();else{var a=this.cf.val();n.rule.type=a,"date"===a?n.hint("2018-11-12"):n.hint("10"),n.show(),t.hide(),r.hide()}}}},{key:"btnClick",value:function(e){if("cancel"===e)this.hide();else if("remove"===e)this.change("remove"),this.hide();else if("save"===e){for(var t=["mf","rf","cf","of","svf","vf","minvf","maxvf"],r=0;r<t.length;r+=1){var n=this[t[r]];if(n.isShow()&&!n.validate())return}var a=this.mf.val(),i=this.rf.val(),o=this.cf.val(),l=this.of.val(),s=this.svf.val();"number"!==o&&"date"!==o||(s="be"===l||"nbe"===l?[this.minvf.val(),this.maxvf.val()]:this.vf.val()),this.change("save",a,i,{type:o,operator:l,required:!1,value:s}),this.hide()}}},{key:"setValue",value:function(e){if(e){var t=this.mf,r=this.rf,n=this.cf,a=this.of,i=this.svf,o=this.vf,l=this.minvf,s=this.maxvf,u=e.mode,c=e.ref,d=e.validator||{type:"list"},f=d.type,m=d.operator,h=d.value;t.val(u||"cell"),r.val(c),n.val(f),a.val(m),Array.isArray(h)?(l.val(h[0]),s.val(h[1])):(i.val(h||""),o.val(h||"")),this.criteriaSelected(f),this.criteriaOperatorSelected(m)}this.show()}}])&&m(r.prototype,n),d&&m(r,d),t}(n.default);t.default=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t,r){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vchange=function(){},this.el=(0,n.h)("div","".concat(a.cssPrefix,"-form-input")),this.input=(0,n.h)("input","").css("width",t).on("input",(function(e){return i.vchange(e)})).attr("placeholder",r),this.el.child(this.input)}var t,r,o;return t=e,(r=[{key:"hint",value:function(e){this.input.attr("placeholder",e)}},{key:"val",value:function(e){return this.input.val(e)}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(72))&&n.__esModule?n:{default:n},o=r(1);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r,n){var l=this,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(e){return e},u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.key=t,this.getTitle=s,this.vchange=function(){},this.el=(0,a.h)("div","".concat(o.cssPrefix,"-form-select")),this.suggest=new i.default(r.map((function(e){return{key:e,title:l.getTitle(e)}})),(function(e){l.itemClick(e.key),u(e.key),l.vchange(e.key)}),n,this.el),this.el.children(this.itemEl=(0,a.h)("div","input-text").html(this.getTitle(t)),this.suggest.el).on("click",(function(){return l.show()}))}var t,r,n;return t=e,(r=[{key:"show",value:function(){this.suggest.search("")}},{key:"itemClick",value:function(e){this.key=e,this.itemEl.html(this.getTitle(e))}},{key:"val",value:function(e){return void 0!==e?(this.key=e,this.itemEl.html(this.getTitle(e)),this):this.key}}])&&l(t.prototype,r),n&&l(t,n),e}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(9);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l={number:/(^\d+$)|(^\d+(\.\d{0,4})?$)/,date:/^\d{4}-\d{1,2}-\d{1,2}$/},s=function(){function e(t,r,i,o){var l=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.label="",this.rule=r,i&&(this.label=(0,n.h)("label","label").css("width","".concat(o,"px")).html(i)),this.tip=(0,n.h)("div","tip").child("tip").hide(),this.input=t,this.input.vchange=function(){return l.validate()},this.el=(0,n.h)("div","".concat(a.cssPrefix,"-form-field")).children(this.label,t.el,this.tip)}var t,r,s;return t=e,(r=[{key:"isShow",value:function(){return"none"!==this.el.css("display")}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"val",value:function(e){return this.input.val(e)}},{key:"hint",value:function(e){this.input.hint(e)}},{key:"validate",value:function(){var e=this.input,t=this.rule,r=this.tip,n=this.el,a=e.val();return t.required&&/^\s*$/.test(a)?(r.html((0,i.t)("validation.required")),n.addClass("error"),!1):!t.type&&!t.pattern||(t.pattern||l[t.type]).test(a)?(n.removeClass("error"),!0):(r.html((0,i.t)("validation.notMatch")),n.addClass("error"),!1)}}])&&o(t.prototype,r),s&&o(t,s),e}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(43))&&n.__esModule?n:{default:n},o=r(7),l=r(1),s=r(9);function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){return(0,a.h)("div","".concat(l.cssPrefix,"-item ").concat(e))}function d(e){var t=this;return c("state").child((0,s.t)("sort.".concat(e))).on("click.stop",(function(){return t.itemClick(e)}))}function f(e){var t=this,r=this.filterbEl,n=this.filterValues;r.html(""),Object.keys(e).forEach((function(i,o){var u=e[i],c=n.includes(i)?"checked":"";r.child((0,a.h)("div","".concat(l.cssPrefix,"-item state ").concat(c)).on("click.stop",(function(){return t.filterClick(o,i)})).children(""===i?(0,s.t)("filter.empty"):i,(0,a.h)("div","label").html("(".concat(u,")"))))}))}function m(){var e=this.filterhEl,t=this.filterValues,r=this.values;e.html("".concat(t.length," / ").concat(r.length)),e.checked(t.length===r.length)}var h=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filterbEl=(0,a.h)("div","".concat(l.cssPrefix,"-body")),this.filterhEl=(0,a.h)("div","".concat(l.cssPrefix,"-header state")).on("click.stop",(function(){return t.filterClick(0,"all")})),this.tindex=1,this.el=(0,a.h)("div","".concat(l.cssPrefix,"-sort-filter")).children(this.sortAscEl=d.call(this,"asc"),this.sortDescEl=d.call(this,"desc"),c("divider"),(0,a.h)("div","".concat(l.cssPrefix,"-filter")).children(this.filterhEl,this.filterbEl),(0,a.h)("div","".concat(l.cssPrefix,"-buttons")).children(new i.default("cancel").on("click",(function(){return t.btnClick("cancel")})),new i.default("ok","primary").on("click",(function(){return t.btnClick("ok")})))).hide(),this.el.on("mousedown.stop",(function(e){t.tindex=1})),this.ci=null,this.sortDesc=null,this.values=null,this.filterValues=[]}var t,r,n;return t=e,(r=[{key:"btnClick",value:function(e){if("ok"===e){var t=this.ci,r=this.sort,n=this.filterValues;this.ok&&this.ok(t,r,"in",n)}this.hide()}},{key:"itemClick",value:function(e){this.sort=e;var t=this.sortAscEl,r=this.sortDescEl;t.checked("asc"===e),r.checked("desc"===e)}},{key:"filterClick",value:function(e,t){var r=this.filterbEl,n=this.filterValues,i=this.values,o=r.children();"all"===t?o.length===n.length?(this.filterValues=[],o.forEach((function(e){return(0,a.h)(e).checked(!1)}))):(this.filterValues=Array.from(i),o.forEach((function(e){return(0,a.h)(e).checked(!0)}))):(0,a.h)(o[e]).toggle("checked")?n.push(t):n.splice(n.findIndex((function(e){return e===t})),1),m.call(this)}},{key:"set",value:function(e,t,r,n){this.ci=e;var a=this.sortAscEl,i=this.sortDescEl;null!==n?(this.sort=n.order,a.checked(n.asc()),i.checked(n.desc())):(this.sortDesc=null,a.checked(!1),i.checked(!1)),this.values=Object.keys(t),this.filterValues=r?Array.from(r.value):Object.keys(t),f.call(this,t,r),m.call(this)}},{key:"setOffset",value:function(e){var t=this;if(this.el.isShow())this.hide();else{this.el.offset(e).show();var r=1;console.log(this.el),(0,o.bindClickoutside)(this.el,(function(){0===r&&t.hide(),r=0}))}}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){this.el.hide(),(0,o.unbindClickoutside)(this.el)}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.xtoast=function(e,t){var r=(0,a.h)("div","".concat(o.cssPrefix,"-toast")),n=(0,a.h)("div","".concat(o.cssPrefix,"-dimmer active"));r.children((0,a.h)("div","".concat(o.cssPrefix,"-toast-header")).children(new i.default("close").on("click.stop",(function(){return document.body.removeChild(r.el),void document.body.removeChild(n.el)})),e),(0,a.h)("div","".concat(o.cssPrefix,"-toast-content")).html(t)),document.body.appendChild(r.el),document.body.appendChild(n.el);var l=r.box(),s=l.width,u=l.height,c=document.documentElement,d=c.clientHeight,f=c.clientWidth;r.offset({left:(f-s)/2,top:(d-u)/3})};var n,a=r(0),i=(n=r(12))&&n.__esModule?n:{default:n},o=r(1)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(40);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-advice")).children(this.save=(0,n.h)("div","".concat(a.cssPrefix,"-advice-style")).css("border-bottom","1px solid"),this.text=(0,n.h)("div","".concat(a.cssPrefix,"-advice-style"))).hide(),this.save.children(this.saveCheck=(0,n.h)("span","check").hide("visibility","hidden"),(0,n.h)("span","").html("保留样式")),this.text.children(this.textCheck=(0,n.h)("span","check").hide("visibility","hidden"),(0,n.h)("span","").html("仅文本")),this.data=t,this.sheet=r,this.left=0,this.top=0,this.save.on("mousedown.stop",(function(){o.saveCheck.show("visibility","initial"),o.textCheck.hide("visibility","hidden"),o.sheet.setCellRange(o.reference,o.tableProxy,!0),i.sheetReset.call(o.sheet)})),this.text.on("mousedown.stop",(function(){o.sheet.setCellRange(o.reference,o.tableProxy,!1),o.saveCheck.show("visibility","hidden"),o.textCheck.hide("visibility","initial"),i.sheetReset.call(o.sheet)}))}var t,r,l;return t=e,(r=[{key:"show",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,n=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;this.el.css("left","".concat(e,"px")),this.el.css("top","".concat(t,"px")),1===r&&(this.saveCheck.show("visibility","initial"),this.textCheck.hide("visibility","hidden")),this.left=parseInt(e),this.top=parseInt(t),this.tableProxy=a,this.reference=n,this.el.show()}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=r(1),o=(n=r(5))&&n.__esModule?n:{default:n},l=r(178);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.el=(0,a.h)("div","".concat(i.cssPrefix,"-hyperlink-tooltip")).hide(),this.tableEl=(0,a.h)("div","".concat(i.cssPrefix,"-hyperlink-tooltip")).hide(),this.editor=r,this.tableEl.attr("tabindex",0),this.tableEl.css("overflow-y","auto"),this.tableEl.css("max-height","400px"),this.timer=null,this.timer2=null}var t,r,n;return t=e,(r=[{key:"show",value:function(e,t){var r=this;if(this.editor.isDisplay2())return this.el.hide(),void this.tableEl.hide();var n=this.data,s=n.getCellTextOrDefault(e,t)+"";if(clearTimeout(this.timer),clearTimeout(this.timer2),0===i.look.indexOf(s.split("!")[0])){var u=n.getRect(new o.default(e,t,e,t)),c=u.left+55,d=u.top+50,f=JSON.parse(s.substring(s.indexOf("!")+1,s.length));this.tableEl.css("left","".concat(c,"px")),this.tableEl.css("top","".concat(d,"px")),this.tableEl.css("user-select","text"),this.tableEl.html("");var m=(0,a.h)("table","");m.css("border-spacing","0px");var h=(0,a.h)("tr","");h.children((0,a.h)("td","").css("border","1px solid black").html("序号"),(0,a.h)("td","").css("border","1px solid black").html("项目名称"),(0,a.h)("td","").css("border","1px solid black").html("城市"),(0,a.h)("td","").css("border","1px solid black").html("占地面积"),(0,a.h)("td","").css("border","1px solid black").html("差额")),m.children(h);for(var v=0;v<f.length;v++){var p=f[v],g=p.number,y=p.name,b=p.city,E=p.area,R=p.value,O=(0,a.h)("tr",""),x=(0,a.h)("td","");x.html(g),x.css("border","1px solid black");var A=(0,a.h)("td","");A.html(y),A.css("border","1px solid black");var w=(0,a.h)("td","");w.html(b),w.css("border","1px solid black");var _=(0,a.h)("td","");_.html(E),_.css("border","1px solid black");var N=(0,a.h)("td","");N.html(R),N.css("border","1px solid black"),O.children(x,A,w,_,N),m.children(O)}this.tableEl.children(m),this.timer=setTimeout((function(){r.tableEl.show(),r.el.hide()}),150)}else{var C=(0,l.isSpecialWebsite)(s);if(C.state&&(s=C.text),"http://"!==(s="www"===s.substr(0,3).toLowerCase()?"http://"+s:s).substr(0,7).toLowerCase()&&"https://"!==s.substr(0,8).toLowerCase())return this.el.hide(),void this.tableEl.hide();var T=n.getRect(new o.default(e,t,e,t)),M=T.left+55,S=T.top+5;this.el.html(""),this.el.css("color","blue"),this.el.children((0,a.h)("div","aaa").css("border-bottom","1px solid blue").on("click",(function(e){console.log(e);var t=e.screenX,r=e.screenY;window.open(s,"","width=".concat(650,",height=").concat(500,",left=").concat(t+T.width,",top=").concat(r))})).html(s)),this.el.css("left","".concat(M,"px")),this.el.css("top","".concat(S,"px")),this.timer2=setTimeout((function(){r.el.show(),r.tableEl.hide()}),150)}}}])&&s(t.prototype,r),n&&s(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSpecialWebsite=function(e){if(1===n.look.indexOf(e.split("!")[0]))return{state:!0,text:JSON.parse(e.split("!")[1]).url};return{state:!1,text:""}},t.specialWebsiteValue=function(e,t){var r=function(e,t){if(1===n.look.indexOf(e.split("!")[0])&&-1===t.toUpperCase().indexOf(a))return 2;return 0}(e,t);if(2===r){var i=e.split(" "),o="";if(i.length>=1){e=i[0];for(var l=1;l<i.length;l++)o+=i[l]}return{state:!0,type:r,text:JSON.parse(e.split("!")[1]).text+o}}return{state:!1,type:r,text:""}},t.multipleCellsRender=function(e,t){var r=[];return Object.keys(t).forEach((function(n){e[n]=t[n],r.push(n)})),r};var n=r(1),a="HYPERLINK"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(76)),a=r(0),i=s(r(43)),o=r(9),l=r(1);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e,t,r){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}(e,t);if(n){var a=Object.getOwnPropertyDescriptor(n,t);return a.get?a.get.call(r):a.value}})(e,t,r||e)}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=(0,a.h)("span","").html("您输入的公式好像至少缺少一个左括号");return(e=d(this,m(t).call(this,(0,o.t)("contextmenu.errorPop"),[(0,a.h)("div","".concat(l.cssPrefix,"-form-fields")).children(r),(0,a.h)("div","".concat(l.cssPrefix,"-form-fields")),(0,a.h)("div","".concat(l.cssPrefix,"-buttons")).children(new i.default("ok","primary").on("click",(function(){return e.btnClick("ok")})))]))).tip=r,e}var r,n,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,(n=[{key:"show",value:function(e){this.tip.html(e),f(m(t.prototype),"show",this).call(this)}},{key:"btnClick",value:function(e){"ok"===e&&this.hide()}}])&&c(r.prototype,n),s&&c(r,s),t}(n.default);t.default=v},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(1),a=r(6);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rect=t}var t,r,o;return t=e,(r=[{key:"isLocInside",value:function(e,t){var r=this.rect;return e<r.width+r.left&&e>r.left&&t-n.offsetTop>r.top&&t-n.offsetTop<r.top+r.height}},{key:"getUpDownLeftRight",value:function(e,t,r,i){var o=this.rect,l=0;return e<o.width+o.left&&e>o.left?t>o.top+o.height+n.offsetTop?l=1:t-n.offsetTop<o.top&&(l=4):t-(o.top-o.height+n.offsetTop)>0&&o.height+o.top+n.offsetTop>t&&(e>o.width+o.left?l=3:e<o.left&&(l=2)),0===l&&(l=(0,a.positionAngle)(r,e,i,t)),1===l&&t<0?l=4:document.body.clientHeight<t&&4===l&&(l=1),3===l&&e<0?l=2:document.body.clientWidth<e&&2===l&&(l=3),l}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.timer=[]}var t,r,a;return t=e,(r=[{key:"push",value:function(e){this.timer.push(e)}},{key:"clear",value:function(){for(var e=0;e<this.timer.length;e++){var t=this.timer[e];clearTimeout(t),clearInterval(t)}}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e,t){this.register=function(r){var n=[],a=["nw","w","ws","s","se","e","ne","n"];a.forEach((function(e){var t=document.createElement("div");t.style.display="block",t.className="direction "+e,n.push(t),r.appendChild(t)}));for(var i=0;i<4;i++){var o=document.createElement("div");o.style.display="block",o.className="line".concat(i+1),r.appendChild(o),n.push(o)}var l=document.createElement("div");function s(n){n<20&&(n=20),e.onResize({width:n},t),r.style.width=n+"px"}function u(n){n<20&&(n=20),e.onResize({height:n},t),r.style.height=n+"px"}l.className="border",r.appendChild(l),a.forEach((function(t){var n=r.querySelector("."+t);n.onmousedown=function(a){if(0===a.button){var i={ox:a.clientX,oy:a.clientY,ow:r.offsetWidth,oh:r.offsetHeight,ol:r.offsetLeft,ot:r.offsetTop};e&&e.onBegin&&e.onBegin.call(r,i);var o=!0;window.onmousemove=function(e){if(o){var r=e.clientX,a=e.clientY,l=r-i.ox,s=a-i.oy;i.width=l,i.height=s;var u=c[t];u&&u.call(n,i,e),e.stopPropagation()}},window.onmouseup=function(t){o=!1,t.stopPropagation(),e&&e.onEnd&&e.onEnd.call(r)},a.stopPropagation()}}})),e?e.onResize||(e.onResize=function(){}):e={onResize:function(){}};var c={s:function(e){u(e.oh+e.height)},e:function(e){s(e.ow+e.width)},w:function(n){var a=n.width,i=n.ol+a,o=n.ow+Math.abs(a);a>0&&(o=n.ow-a),o>20&&(!function(n){e.onResize({left:n},t),r.style.left=n+"px"}(i),s(o))},n:function(n){var a=n.height,i=n.ot+a,o=n.oh+Math.abs(a);a>0&&(o=n.oh-a),o>20&&(u(o),function(n){e.onResize({top:n},t),r.style.top=n+"px"}(i))},se:function(e){c.s(e),c.e(e)},nw:function(e){c.n(e),c.w(e)},ws:function(e){c.w(e),c.s(e)},ne:function(e){c.n(e),c.e(e)}};return n}};t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(39),i=r(36),o=r(6),l=(n=r(5))&&n.__esModule?n:{default:n},s=r(10);function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.rows=new i.Rows({len:0,height:0},t)}var t,r,n;return t=e,(r=[{key:"getComputedStyle",value:function(e){var t=!1;return e.fontWeight>400&&(t=!0),{color:e.color,bgcolor:e.background.substring(0,e.background.indexOf(")")+1),font:{bold:t}}}},{key:"extend",value:function(e,t){var r=t.ri,n=t.ci,a=this.data;if(e.rows.length>=a.rows.len-r){var i=e.rows.length-(a.rows.len-r);i>0&&a.insert("row",i)}if(!1!==(0,s.isHave)(e.rows[0])&&!1!==(0,s.isHave)(e.rows[0].cells)){var o=e.rows[0].cells.length;if(o>=a.cols.len){var l=o-(a.cols.len-n);l>0&&a.insert("column",l,a.cols.len)}}}},{key:"each",value:function(e,t){for(var r=0;r<e.rows.length;r++)for(var n=0;n<e.rows[r].cells.length;n++)t(r,n,e.rows[r].cells[n])}},{key:"dealColSpan",value:function(e){this.each(e,(function(t,r,n){var a=n.getAttribute("colspan");if(a&&a>1)for(var i=0;i<a-1;i++)e.rows[t].insertBefore(document.createElement("td"),e.rows[t].cells[r+1])}))}},{key:"dealStyle",value:function(e,t){var r=this,n=t.ri,i=t.ci,o=this.data,l=this.rows,s=o.styles;this.each(e,(function(e,t,o){var u=document.defaultView.getComputedStyle(o,null),c=r.getComputedStyle(u),d=(0,a.isHaveStyle)(s,c);-1===d&&s.push(c),l.setCell(n+e,i+t,{style:-1===d?s.length-1:d},"all")}))}},{key:"parseTableCellRange",value:function(e,t){var r=t.ri,n=t.ci,a=r,i=n;return this.each(e,(function(e,t){var o=r+e,l=n+t;a<o&&(a=o),i<l&&(i=l)})),new l.default(r,n,a,i)}},{key:"dealReference",value:function(e,t){var r=t.ri,n=t.ci,a=this.rows,i=[];return this.each(e,(function(e,t,l){var s=l.querySelector("reference"),u=l.innerText||"";if(s){var c=s.getAttribute("ri"),d=s.getAttribute("ci"),f=(0,o.splitStr)(u),m=e+r-c,h=t+n-d,v=a.getCellTextByShift(f,h,m),p=v.bad,g=v.result;a.updateCellReferenceByShift(p,g,r+e,n+t)}else{var y=a.getCell(r+e,n+t)||{};y.text=u,y.formulas=u,a.setCell(r+e,n+t,y,"all")}i.push({ri:r+e,ci:n+t})})),{reference:i}}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatDate=function(e){if(!(0,l.isHave)(e)||!(0,l.isNumber)(e))return{state:!1,date_formula:"",minute:!1};var t=s(e,(function(e){return 24*e*60}));t=(0,o.formatNumberRender)(t,5);var r=(0,a.default)("1900-01-01"),n=(0,a.default)("1900-01-01"),i=!1;if((0,l.isHave)(t)&&1*t>0){var u=s(t,(function(e){return 60*e}));i=!0,u=(0,o.formatNumberRender)(u,5),n=(0,a.default)("1900-01-01  00:00:00").set("minute",t).set("second",u)}var c="";if(i){c=r.add(e,"day").subtract(2,"day").format("YYYY-MM-DD");var d=n.add(e,"day").subtract(2,"day").format("YYYY-MM-DD  h:mm:ss");return{state:"Invalid Date"!==c,date:c,date_formula:d,minute:!0}}return{state:"Invalid Date"!==(c=r.add(e,"day").subtract(2,"day").format("YYYY-MM-DD")),date:c,date_formula:"",minute:!1}},t.changeFormat=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"YYYY年MM月DD日";return(0,a.default)(e).format(t)},t.calcDecimals=s,t.dateDiff=function(e){for(var t=!1,r=0;!1===t&&r<i.datePattern.length;r++)t=(0,i.str2Re)(i.datePattern[r]).test(e);return!1===t?{isValid:!1}:(e=(e=e.replace(/[年|月]/g,"-")).replace(/[日]/g,""),{diff:(0,a.default)(e).diff((0,a.default)("1900-01-01"),"day")+2,isValid:!0})};var n,a=(n=r(53))&&n.__esModule?n:{default:n},i=r(19),o=r(42),l=r(10);function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=e.toString().split(".");if(r.length>2)return e;for(var n=r[1]+"",a=n,i=0;i<n.length;i++)a*=.1;return t(a)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(4),i=(n=r(78))&&n.__esModule?n:{default:n},o=r(31);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e){this.undoItems.push(e),this.redoItems=[]}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.undoItems=[],this.redoItems=[],this.data=t}var t,r,n;return t=e,(r=[{key:"addStep",value:function(e,t){var r=e.type,n=e.action,a=e.ri,l=e.ci,u=e.expr,c=e.cellRange,d=e.cells,f=e.height,m=e.width,h=e.property,v=e.value,p=e.oldData,g=t.oldCell,y=t.newCell,b=t.oldMergesData,E=t.newMergesData,R=t.oldStep,O="";1===r?(O=new i.default({type:r,action:n,ri:a,ci:l,expr:u,oldCell:g,newCell:y},this.data),s.call(this,O)):2===r||5===r||11===r||12===r||6===r?(O=new i.default({type:r,oldMergesData:b,property:h,value:v,newMergesData:E,action:n,cellRange:c,oldCell:g,newCell:d},this.data),s.call(this,O)):13===r?(O=new i.default({type:r,oldData:p,newData:R.oldData,action:n},this.data),s.call(this,O)):3===r?(O=new i.default({type:r,action:n,height:f,ri:a,oldStep:R},this.data),s.call(this,O)):4===r&&(O=new i.default({type:r,action:n,width:m,ci:l,oldStep:R},this.data),s.call(this,O)),o.testValid.call(this)}},{key:"getStepType",value:function(e,t){var r=t.ri,n=t.ci,i=t.expr,o=t.text,l=t.range,s=t.cellRange,u=t.property,c=t.value,d="",f=this.data,m=f.rows,h=f.cols;if(1===e)return{action:d="在".concat(i,'中键入"').concat(o,'"'),type:e,ri:r,ci:n,expr:i};if(2===e){var v=(0,a.xy2expr)(l.sci,l.sri),p=(0,a.xy2expr)(l.eci,l.eri);return i=v===p?v:"".concat(v,":").concat(p),{action:d="删除".concat(i,"的单元格内容"),type:e,cellRange:l,cells:this.eachRange(l)}}return 3===e?{action:d="行宽",type:e,height:m.getHeight(r),ri:r}:4===e?{action:d="列宽",type:e,width:h.getWidth(n),ci:n}:5===e?{action:d="自动填充",type:e,cellRange:l,cells:this.eachRange(s)}:12===e?{action:d="选择性粘贴",type:e,cellRange:l,property:u,value:c,cells:this.eachRange(s)}:13===e?{action:d="插入单元格",type:e,oldData:this.data.getData()}:11===e?("font-bold"===u||"font-italic"===u||"font-name"===u||"font-size"===u||"color"===u?d="字体":"underline"===u?d="下划线":"bgcolor"===u||"format"===u?d="单元格格式":"align"===u?"left"===c?d="左对齐":"center"===c?d="居中":"right"===c&&(d="右对齐"):"valign"===u?"top"===c?d="顶端对齐":"center"===c?d="居中":"bottom"===c&&(d="底端对齐"):"border"===u?d="边框":"strike"===u?d="删除线":"merge"===u&&(d="合并单元格"),{action:d,type:e,cellRange:l,property:u,value:c,cells:this.eachRange(s)}):6===e?{action:d="粘贴",type:e,cellRange:l,cells:this.eachRange(s)}:void 0}},{key:"undo",value:function(){var e=this.does(this.getItems(1),1);this.redoItems.push(e)}},{key:"redo",value:function(){var e=this.does(this.getItems(2),2);this.undoItems.push(e)}},{key:"eachRange",value:function(e){return this.data.rows.eachRange(e)}},{key:"does",value:function(e,t){if(this.data.settings.showEditor&&!(e.length<=0)){var r=this.data,n=r.sheet,a=e.pop();return a.restore(r,n,t),a}}},{key:"getItems",value:function(e){return 1===e?this.undoItems:this.redoItems}}])&&l(t.prototype,r),n&&l(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(28))&&n.__esModule?n:{default:n},i=r(4);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.selectorRange=t,this.dstRange=r}var t,r,n;return t=e,(r=[{key:"getPaintType",value:function(){var e=this.dstRange,t=this.selectorRange;return function(e,t){return 1===e&&1===t?1:1===e&&2===t?2:1===e&&3===t?3:2===e&&1===t?4:3===e&&1===t?5:2===e&&2===t?6:2===e&&3===t?7:3===e&&2===t?8:3===e&&3===t?9:void 0}(e.getType(),t.getType())}},{key:"makePaintArr",value:function(e,t){var r=this.dstRange,n=this.selectorRange,o=[],l=n.eci-n.sci,s=0,u=r.sri,c=0,d=function(e,t){var r=t.sri,n=[],a=[],i=0;return t.each((function(t,o){r!==t&&(r=t,n.push(a),a=[]),a.push(e[i]),i+=1})),n.push(a),n}(t,n);return r.each((function(e,t){u!==e&&(s=0,(c+=1)===d.length&&(c=0));var r=d[c][s].cell,n=new a.default(e,t,r,(0,i.xy2expr)(e,t));o.push(n),s===l?s=0:s+=1,u=e})),o}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=l},function(e,t,r){},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={toolbar:{undo:"撤销",redo:"恢复",paintformat:"格式刷",clearformat:"清除格式",format:"数据格式",font:"字体",fontSize:"字号",fontBold:"加粗",fontItalic:"倾斜",underline:"下划线",strike:"删除线",textColor:"字体颜色",fillColor:"填充颜色",border:"边框",merge:"合并单元格",align:"水平对齐",valign:"垂直对齐",textwrap:"自动换行",freeze:"冻结",autofilter:"自动筛选",add:"清除公式",calc:"开始计算",formula:"函数",more:"更多",throwFormula:"显示公式",comeBack:"返回"},revision:{comeBack:"退出"},contextmenu:{copy:"复制",cut:"剪切",paste:"粘贴",pasteValue:"粘贴数据",pasteFormat:"粘贴格式",insertRow:"插入行",insertColumn:"插入列",deleteRow:"删除行",deleteColumn:"删除列",deleteCell:"删除",deleteCellText:"删除数据",validation:"数据验证",errorPop:"出现问题",recover:"恢复此版本"},format:{normal:"常规",text:"文本",number:"数值",percent:"百分比",rmb:"人民币",usd:"美元",date:"短日期",time:"时间",datetime:"长日期",duration:"持续时间"},date_formula:{sum:"求和",average:"求平均值",max:"求最大值",min:"求最小值",concat:"字符拼接",wland:"MD.WLAND",wfr:"MD.WFR",rtd:"MD.RTD"},validation:{required:"此值必填",notMatch:"此值不匹配验证规则",between:"此值应在 {} 和 {} 之间",notBetween:"此值不应在 {} 和 {} 之间",notIn:"此值不在列表中",equal:"此值应该等于 {}",notEqual:"此值不应该等于 {}",lessThan:"此值应该小于 {}",lessThanEqual:"此值应该小于等于 {}",greaterThan:"此值应该大于 {}",greaterThanEqual:"此值应该大于等于 {}"},error:{pasteForMergedCell:"无法对合并的单元格执行此操作"},calendar:{weeks:["日","一","二","三","四","五","六"],months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]},button:{cancel:"取消",remove:"删除",save:"保存",ok:"确认"},sort:{desc:"降序",asc:"升序"},filter:{empty:"空白"},dataValidation:{mode:"模式",range:"单元区间",criteria:"条件",modeType:{cell:"单元格",column:"列模式",row:"行模式"},type:{list:"列表",number:"数字",date:"日期",phone:"手机号",email:"电子邮件"},operator:{be:"在区间",nbe:"不在区间",lt:"小于",lte:"小于等于",gt:"大于",gte:"大于等于",eq:"等于",neq:"不等于"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bugout=void 0;var n=r(190),a="";t.bugout=a;try{t.bugout=a=new n.debugout}catch(e){console.error(e)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.debugout=function(){var e=this;if(e.realTimeLoggingOn=!0,e.useTimestamps=!1,e.useLocalStorage=!0,e.recordLogs=!0,e.autoTrim=!0,e.maxLines=2500,e.tailNumLines=100,e.logFilename="debugout.txt",e.depth=0,e.parentSizes=[0],e.currentResult="",e.startTime=new Date,e.output="",this.version=function(){return"0.5.0"},this.getLog=function(){var t=new Date;if(e.recordLogs||e.log("[debugout.js] log recording is off."),e.useLocalStorage){var r=window.localStorage.getItem("debugout.js");r&&(r=JSON.parse(r),e.startTime=new Date(r.startTime),e.output=r.log,t=new Date(r.lastLog))}return e.output+"\n---- Log retrieved: "+t+" ----\n"+e.formatSessionDuration(e.startTime,t)},this.tail=function(t){t=t||e.tailLines;return e.trimLog(e.getLog(),t)},this.search=function(t){for(var r=e.output.split("\n"),n=new RegExp(t),a=[],i=0;i<r.length;i++){var o="["+i+"] ";r[i].match(n)&&a.push(o+r[i])}var l=a.join("\n");return 0===l.length&&(l='Nothing found for "'+t+'".'),l},this.getSlice=function(t,r){return e.output.split("\n").slice(t,t+r).join("\n")},this.downloadLog=function(){var t="data:text/plain;charset=utf-8,",r=e.getLog();t+=encodeURIComponent(r);var n=document.createElement("a");n.href=t,n.target="_blank",n.download=e.logFilename,document.body.appendChild(n),n.click(),n.remove()},this.clear=function(){var t=new Date;if(e.output="---- Log cleared: "+t+" ----\n",e.useLocalStorage){var r={startTime:e.startTime,log:e.output,lastLog:t};r=JSON.stringify(r),window.localStorage.setItem("debugout.js",r)}e.realTimeLoggingOn&&console.log("[debugout.js] clear()")},this.log=function(t){if(e.realTimeLoggingOn&&console.log(t),null!==e.determineType(t)&&e.recordLogs){var r=t;if(e.useTimestamps){var n=new Date;e.output+=e.formatTimestamp(n)}if(e.output+=r+"\n",e.autoTrim&&(e.output=e.trimLog(e.output,e.maxLines)),e.useLocalStorage){var a=new Date,i={startTime:e.startTime,log:e.output,lastLog:a};i=JSON.stringify(i),window.localStorage.setItem("debugout.js",i)}}e.depth=0,e.parentSizes=[0],e.currentResult=""},this.determineType=function(e){if(null!==e){var t,r=n(e);if("object"===r)t=null===e.length?"function"==typeof e.getTime?"Date":"function"==typeof e.test?"RegExp":"Object":"Array";else t=r;return t}return null},this.formatType=function(t,r){switch(t){case"Object":e.currentResult+="{\n",e.depth++,e.parentSizes.push(e.objectSize(r));var n=0;for(var a in r){e.currentResult+=e.indentsForDepth(e.depth),e.currentResult+=a+": ";var i=e.determineType(r[a]);(o=e.formatType(i,r[a]))?(e.currentResult+=o,n!==e.parentSizes[e.depth]-1&&(e.currentResult+=","),e.currentResult+="\n"):(n!==e.parentSizes[e.depth]-1&&(e.currentResult+=","),e.currentResult+="\n"),n++}if(e.depth--,e.parentSizes.pop(),e.currentResult+=e.indentsForDepth(e.depth),e.currentResult+="}",0===e.depth)return e.currentResult;break;case"Array":e.currentResult+="[",e.depth++,e.parentSizes.push(r.length);for(n=0;n<r.length;n++){var o;"Object"!==(i=e.determineType(r[n]))&&"Array"!==i||(e.currentResult+="\n"+e.indentsForDepth(e.depth)),(o=e.formatType(i,r[n]))?(e.currentResult+=o,n!==e.parentSizes[e.depth]-1&&(e.currentResult+=", "),"Array"===i&&(e.currentResult+="\n")):(n!==e.parentSizes[e.depth]-1&&(e.currentResult+=", "),"Object"!==i?e.currentResult+="\n":n===e.parentSizes[e.depth]-1&&(e.currentResult+="\n"))}if(e.depth--,e.parentSizes.pop(),e.currentResult+="]",0===e.depth)return e.currentResult;break;case"function":var l=(r+="").split("\n");for(n=0;n<l.length;n++)l[n].match(/\}/)&&e.depth--,e.currentResult+=e.indentsForDepth(e.depth),l[n].match(/\{/)&&e.depth++,e.currentResult+=l[n]+"\n";return e.currentResult;case"RegExp":return"/"+r.source+"/";case"Date":case"string":return e.depth>0||0===r.length?'"'+r+'"':r;case"boolean":return r?"true":"false";case"number":return r+""}},this.indentsForDepth=function(e){for(var t="",r=0;r<e;r++)t+="\t";return t},this.trimLog=function(e,t){var r=e.split("\n");return r.length>t&&(r=r.slice(r.length-t)),r.join("\n")},this.lines=function(){return e.output.split("\n").length},this.formatSessionDuration=function(e,t){var r=t-e,n=Math.floor(r/1e3/60/60),a=("0"+n).slice(-2);r-=1e3*n*60*60;var i=Math.floor(r/1e3/60),o=("0"+i).slice(-2);r-=1e3*i*60;var l=Math.floor(r/1e3);return r-=1e3*l,"---- Session duration: "+a+":"+o+":"+("0"+l).slice(-2)+" ----"},this.formatTimestamp=function(e){var t=e.getFullYear(),r=e.getDate();return"["+t+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+r+" "+Number(e.getHours())+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"]: "},this.objectSize=function(e){var t,r=0;for(t in e)e.hasOwnProperty(t)&&r++;return r},e.useLocalStorage){var t=window.localStorage.getItem("debugout.js");if(t){t=JSON.parse(t),e.output=t.log;var r=new Date(t.startTime),a=new Date(t.lastLog);e.output+="\n---- Session end: "+t.lastLog+" ----\n",e.output+=e.formatSessionDuration(r,a),e.output+="\n\n"}}e.output+="---- Session started: "+e.startTime+" ----\n\n"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9lbGVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY191dGlscy9lcnJvcl9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FscGhhYmV0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NlbGxfcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvb3BlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVyL2NoZWNrX3ZhbHVlLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2NhbGUvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXIvZGF0YXByb3h5X2hlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX3V0aWxzL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9kcm9wZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvcmVnX3BhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2VsbF92YWx1ZV90eXBlL2NlbGxfdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9saWIvbWF0aC10cmlnLmpzIiwid2VicGFjazovLy8uL3NyYy9jYWxjL2V4cHJlc3Npb25fZm4vbGliL3N0YXRpc3RpY2FsLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXIvY2FsY19oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kYXRhX3Byb3h5L3Jhd192YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvY2VsbF9wcm9wLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvZm9ybXVsYV9lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZm9udC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdGVzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9leHByZXNzaW9uX2ZuL2xpYi90ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9jYWxjL2V4cHJlc3Npb25fZm4vbGliL2luZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jYWxjL2V4cHJlc3Npb25fZm4vbGliL2RhdGVfdGltZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX2RhdGFfcHJveHkvcmFuZ2VfcmVmLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQvcGFzdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9zaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3RhYmxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX2RhdGFfcHJveHkvY2FsY193b3JrYm9vay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX3V0aWxzL2Zvcm11bGFfY2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9saWIvbWlzY2VsbGFuZW91cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9leHByZXNzaW9uX2ZuL2xpYi9lbmdpbmVlcmluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX3V0aWxzL2dldF9zaGVldG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kYXRhX3Byb3h5L3JlZl92YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9yZWNhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2VsbF9wcm94eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQvbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvc3VnZ2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2NvbG9yX3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19jbWQvZm9ybXVsYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Ryb3Bkb3duX2NvbG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50L2NvcHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL3ByZV9hY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V4dGVybmFsL2RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2RhdGFfcHJveHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19jbWQvY2FsYy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX2RhdGFfcHJveHkvY2FsY19yb3dzLmpzIiwid2VicGFjazovLy8uL3NyYy9jYWxjL2NhbGNfZGF0YV9wcm94eS9jZWxsX2Zvcm11bGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kYXRhX3Byb3h5L2ZuX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kYXRhX3Byb3h5L2V4cF9yYXdfZm5fZXhlY3V0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kYXRhX3Byb3h5L2V4cF9mbl9leGVjdXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9leHByZXNzaW9uX2ZuL25vcm1hbF9mbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9leHByZXNzaW9uX2ZuL2xpYi9jb21wYXRpYmlsaXR5LmpzIiwid2VicGFjazovLy8uL3NyYy9jYWxjL2V4cHJlc3Npb25fZm4vbGliL2V4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9saWIvZGF0YWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9saWIvbG9naWNhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9leHByZXNzaW9uX2ZuL2xpYi9maW5hbmNpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9saWIvbG9va3VwX3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9leHByZXNzaW9uX2ZuL2xpYi9jdXN0b20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvZXhwcmVzc2lvbl9mbi9yYXdfZm4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kZWFsL3NpbXBsZV9leHByZXNzaW9uL2RlYWxfc2ltcGxlX2V4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kZWFsL3N0cnVjdHVyYWxfZXhwcmVzc2lvbi9kZWFsX3N0cnVjdHVyYWxfZXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX2RhdGFfcHJveHkvc3RydWN0dXJhbF9leHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGMvY2FsY19kYXRhX3Byb3h5L2V4cF9zZWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3Njcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jbGlwYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvYXV0b19maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvcGFzdGVfcHJveHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2NlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29sLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvdmFsaWRhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2NhbGUvZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9yZXNpemVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvc2Nyb2xsYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvc2VsZWN0b3JfY2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2VkaXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2RhdGVwaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9jYWxlbmRhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3N1Z2dlc3RfY29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsYy9jYWxjX2NtZC9mbl9zdWdnZXN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvc2VsZWN0b3JfY29weS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3NlbGVjdG9yX21vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZWRpdG9yX3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbnVtYmVyX3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbnZhcy9kcmF3LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvY29udGV4dG1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC90b29sYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Ryb3Bkb3duX2ZvbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9kcm9wZG93bl9mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Ryb3Bkb3duX2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Ryb3Bkb3duX2Zvcm11bGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9kcm9wZG93bl9hbGlnbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Ryb3Bkb3duX2JvcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2JvcmRlcl9wYWxldHRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvZHJvcGRvd25fbGluZXR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9kcm9wZG93bl9hY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9oaXN0b3J5X2JvcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L21vZGFsX3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9mb3JtX2lucHV0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvZm9ybV9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9mb3JtX2ZpZWxkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvc29ydF9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9tZXNzYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvYWR2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvd2Vic2l0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9zcGVjaWFsX2Zvcm11bGFfcHJvY2Vzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Vycm9yX3BvcF91cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9yZWN0X3Byb3h5LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9UaW1lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXh0ZXJuYWwvcmVzaXplLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3RhYmxlX3Byb3h5LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9kYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL211bHRpX3ByZV9hY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL3BhaW50X2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9jYWxlL3poLWNuLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2cvbG9nX3Byb3h5LmpzIiwid2VicGFjazovLy8uL3NyYy9sb2cvZGVidWdvdXQuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIyIiwiMCIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiRWxlbWVudCIsInRhZyIsImNsYXNzTmFtZSIsInRoaXMiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInVuZGVmaW5lZCIsImV2ZW50TmFtZXMiLCJoYW5kbGVyIiwic3BsaXQiLCJmZW4iLCJvZW4iLCJldmVudE5hbWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsImsiLCJidXR0b24iLCJzdG9wUHJvcGFnYXRpb24iLCJrZXlzIiwiZm9yRWFjaCIsImNzcyIsInRvcCIsIm9mZnNldFRvcCIsImxlZnQiLCJvZmZzZXRMZWZ0IiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsInYiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFyZW50Tm9kZSIsImVsZXMiLCJhcmd1bWVudHMiLCJjaGlsZE5vZGVzIiwiZWxlIiwiY2hpbGQiLCJhcmciLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiY29udGFpbnMiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjbHMiLCJ0b2dnbGVDbGFzcyIsInRvZ2dsZSIsImZsYWciLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiYWN0aXZlIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiY29udGVudCIsImlubmVySFRNTCIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVDaGlsZCIsImdldENvbXB1dGVkU3R5bGUiLCJ0ZXh0IiwiZXJyb3JNc2dBcnIiLCJlcnJvck9iaiIsIkVSUk9SX05VTEwiLCJFcnJvciIsIkVSUk9SX0RJVjAiLCJFUlJPUl9WQUxVRSIsIkVSUk9SX1JFRiIsIkVSUk9SX05BTUUiLCJFUlJPUl9OVU0iLCJFUlJPUl9OQSIsIkVSUk9SX0dFVFRJTkdfREFUQSIsIkVSUk9SX0RBVEVfU1RSIiwiRVJST1JfQ0lSQ1VMQVIiLCJFUlJPUl9FUlJPUiIsIkVSUk9SX1NZTlRBWCIsIkVSUk9SX05PTl9TT0xWRUQiLCJhbHBoYWJldHMiLCJzdHJpbmdBdCIsImluZGV4Iiwic3RyIiwiY2luZGV4IiwicGFyc2VJbnQiLCJsYXN0IiwiaW5kZXhBdCIsInJldCIsImNoYXJDb2RlQXQiLCJleHBvbmV0IiwiZXhwcjJ4eSIsInNyYyIsIngiLCJ5IiwiY2hhckF0IiwieHkyZXhwciIsImFiIiwiQ2VsbFJhbmdlIiwic3JpIiwic2NpIiwiZXJpIiwiZWNpIiwidyIsImgiLCJyZWYiLCJyZWZzIiwicmkiLCJjaSIsImFyZ3MiLCJjYiIsInJvd0ZpbHRlciIsImNvbnNvbGUiLCJlcnJvciIsImQyIiwib3RoZXIiLCJwb3MiLCJhZGRSZXQiLCJkc3IiLCJkc2MiLCJkZXIiLCJkZWMiLCJtdWx0aXBsZSIsInNhcnIiLCJkYXJyIiwiZWFjaCIsInRtcCIsInR5cGUiLCJ2ZXJpZnlGbGFnIiwiY2hhciIsImxlZnRTdGFjayIsImNoYXIxIiwicG9wIiwiY2hhcjIiLCJhcnIiLCJTZXQiLCJjdXQiLCJzZWFyY2giLCJkZWVwQ29weSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsIm9wZXJhdG9yIiwib3BlcmF0b3IzIiwib3BlcmF0b3IyIiwib3BlcmF0aW9uIiwib3BlcmF0aW9uMyIsIm9wZXJhdGlvbjIiLCJzMSIsImVudGVyIiwiczIiLCJzMyIsImZpbHRlciIsImYiLCJ0b1VwcGVyQ2FzZSIsInN0cjJSZSIsImxvZ2ljT3BlcmF0b3IiLCJyZXBsYWNlIiwiYmxhbmtPcGVyYXRvciIsImV4cHJlc3MiLCJpbmRleE9mIiwibGV0dGVyT3BlcmF0b3IiLCJsZXR0ZXJBbmRMZXR0ZXJPcGVyYXRvciIsImxldHRlck9wZXJhdG9yV2l0aERvbGxvciIsImxldHRlck9wZXJhdG9yV2l0aERvbGxvckVuZCIsImxldHRlck9wZXJhdG9yV2l0aERvbGxvclByZXgiLCJzcGFjZSIsImVuZCIsInJldmVyc2UiLCJqb2luIiwieDEiLCJ4MiIsInkxIiwieTIiLCJzdGFydCIsImRpZmZfeCIsImRpZmZfeSIsImFuZ2xlIiwiYWYiLCJNYXRoIiwiYWJzIiwiYXRhbiIsIlBJIiwicnVsZSIsImFycjIiLCJjb2xvciIsImNvbG9ycyIsImkyIiwicmVtb3ZlRXZlbnQiLCJyZSIsInVuYmluZCIsInRhcmdldCIsImZuIiwia2V5Q29kZSIsIm1ldGFLZXkiLCJidXR0b25zIiwiZXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImV2ZW50VHlwZSIsImRpc3BhdGNoRXZlbnQiLCJ4Y2xpY2tvdXRzaWRlIiwiZGV0YWlsIiwiaGlkZSIsInVuYmluZENsaWNrb3V0c2lkZSIsImJvZHkiLCJtb3ZlZnVuYyIsInVwZnVuYyIsInhFdnRVcCIsIm1vdmUiLCJzdGFydHgiLCJzdGFydHkiLCJ0b3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImNoYW5nZWRUb3VjaGVzIiwic3BhbngiLCJzcGFueSIsImNhbFRvdWNoRGlyZWN0aW9uIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicGFyYW0iLCJsYW5nIiwibWVzc2FnZSIsIiRsYW5nIiwiJG1lc3NhZ2VzIiwiZW4iLCJ0cmFuc2xhdGUiLCJtZXNzYWdlcyIsInNwcmVhZHNoZWV0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZHkiLCJkeCIsIm9yaWVuIiwiZXF1YWxzIiwib2JqMSIsIm9iajIiLCJ2MSIsInYyIiwiYWkiLCJtaW4iLCJtYXgiLCJpbml0cyIsImluaXR2IiwiaWZ2IiwiZ2V0diIsImlucHV0RGF0YSIsInBhcnNlRmxvYXQiLCJ0b1N0cmluZyIsImExIiwiYTIiLCJzb3VyY2VzIiwibWVyZ2VEZWVwIiwic291cmNlIiwib2JqT3JBcnkiLCJ0b3RhbCIsInNpemUiLCJjcmVhdGVkIiwiZWRpdGVkIiwid29ya2luZyIsInNvbHZlZCIsInBlcmNlbnQiLCJzdGFyIiwicGx1cyIsImRhc2giLCJzbGFzaCIsImNhcmV0IiwiZXhjbGFtYXRpb24iLCJhbXBlcnNhbmQiLCJsZXNzVGhlbiIsImdyZWF0ZXJUaGVuIiwibGVmdFBhcmVudGhlc2VzIiwicmlnaHRQYXJlbnRoZXNlcyIsImNvbW1hIiwibGVmdEJyYWNrZXQiLCJyaWdodEJyYWNrZXQiLCJsZWZ0QnJhY2UiLCJyaWdodEJyYWNlIiwiZXF1YWwiLCJjb2xvbiIsImhhc2giLCJhdCIsIm5vdEVxdWFsIiwiZ3JlYXRlckVxdWFsIiwibGVzc0VxdWFsIiwidHJ1ZSIsImZhbHNlIiwiZG9sbGFyIiwicm1iIiwiZDE4OTkxMjMwIiwiRGF0ZSIsIkljb24iLCJjc3NQcmVmaXgiLCJpY29uTmFtZUVsIiwiZmxhdHRlblNoYWxsb3ciLCJhcnJheSIsInJlZHVjZSIsImEiLCJiIiwiYUlzQXJyYXkiLCJiSXNBcnJheSIsImNvbmNhdCIsImlzRmxhdCIsInBhcnNlX2FyZyIsImlzTmFOIiwiZmxhdHRlbiIsImFyZ3NUb0FycmF5IiwibnVtYmVycyIsInBvc3NpYmxlTnVtYmVycyIsImZsYXR0ZW5OdW0iLCJjbGVhbkZsb2F0IiwibnVtYmVyIiwicm91bmQiLCJwYXJzZUJvb2wiLCJib29sIiwidXAiLCJwYXJzZU51bWJlciIsInN0cmluZyIsInBhcnNlTnVtYmVyQXJyYXkiLCJsZW4iLCJwYXJzZWQiLCJwYXJzZU1hdHJpeCIsIm1hdHJpeCIsInBuYXJyIiwicGFyc2VEYXRlIiwiZGF0ZSIsInRoZURhdGUiLCJnZXRUaW1lIiwiTVNfUEVSX0RBWSIsIkNvcHkiLCJjb3B5Iiwic2V0VGltZSIsImNsb25lIiwiYXR0ciIsInN0clRvTWF0cml4IiwibnVtIiwiRXhjZWxEYXRlVG9KU0RhdGUiLCJ1dGlscyIsImlzc3VlIiwiaXNOdW1iZXIiLCJ2YWwiLCJwYXJzZURhdGVBcnJheSIsImFueUlzRXJyb3IiLCJhcnJheVZhbHVlc1RvTnVtYmVycyIsInJlc3QiLCJpZHgiLCJpbml0aWFsIiwiRHJvcGRvd24iLCJ0aXRsZSIsInNob3dBcnJvdyIsInBsYWNlbWVudCIsImNoYW5nZSIsImFycm93Q2hhbmdlIiwiaGlzdG9yeUJvcmRlciIsImNoaWxkcmVuIiwiY29udGVudEVsIiwiaGVhZGVyRWwiLCJvbiIsInNob3ciLCJodG1sIiwicGFyZW50IiwiYmluZENsaWNrb3V0c2lkZSIsIlJlZ0V4cCIsIm9yaWdpblZhbHVlIiwiQ2VsbFZEYXRlVGltZSIsIlN0cmluZyIsIkNlbGxWU3RyaW5nIiwiQ2VsbFZOdW1iZXIiLCJpc0NlbGxWIiwiYURhdGUiLCJkYXRlSW5zdGFuY2UiLCJjZWxsVlR5cGVOYW1lIiwiYXNzZXJ0IiwidG9OdW1iZXIiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJnZXRUaW1lem9uZU9mZnNldCIsImNmIiwiQ2VsbFZFbXB0eSIsIkNlbGxWRXJyb3IiLCJlcnJOYW1lIiwiZXJyIiwiYU51bSIsImFTdHJpbmciLCJ0aGVTdHJpbmciLCJBQlMiLCJBQ09TIiwiYWNvcyIsIkFDT1NIIiwibG9nIiwic3FydCIsIkFDT1QiLCJBQ09USCIsIkFHR1JFR0FURSIsImZ1bmN0aW9uX251bSIsIm9wdGlvbnMiLCJyZWYxIiwicmVmMiIsInN0YXRpc3RpY2FsIiwiQVZFUkFHRSIsIkNPVU5UIiwiQ09VTlRBIiwiTUFYIiwiTUlOIiwiUFJPRFVDVCIsIlNUREVWIiwiUyIsIlAiLCJTVU0iLCJWQVIiLCJNRURJQU4iLCJNT0RFIiwiU05HTCIsIkxBUkdFIiwiU01BTEwiLCJQRVJDRU5USUxFIiwiSU5DIiwiUVVBUlRJTEUiLCJFWEMiLCJBUkFCSUMiLCJNIiwiQ00iLCJEIiwiQ0QiLCJDIiwiWEMiLCJMIiwiWEwiLCJYIiwiSVgiLCJWIiwiSVYiLCJJIiwiQVNJTiIsImFzaW4iLCJBU0lOSCIsIkFUQU4iLCJBVEFOMiIsIm51bWJlcl94IiwibnVtYmVyX3kiLCJhdGFuMiIsIkFUQU5IIiwiQkFTRSIsInJhZGl4IiwibWluX2xlbmd0aCIsIkNFSUxJTkciLCJzaWduaWZpY2FuY2UiLCJwcmVjaXNpb24iLCJmbG9vciIsIlJPVU5EIiwiY2VpbCIsIk1BVEgiLCJQUkVDSVNFIiwiQ09NQklOIiwibnVtYmVyX2Nob3NlbiIsIkZBQ1QiLCJDT01CSU5BIiwiQ09TIiwiY29zIiwiQ09TSCIsImV4cCIsIkNPVCIsInRhbiIsIkNPVEgiLCJlMiIsIkNTQyIsInNpbiIsIkNTQ0giLCJERUNJTUFMIiwiREVHUkVFUyIsIkVWRU4iLCJFWFAiLCJNRU1PSVpFRF9GQUNUIiwiRkFDVERPVUJMRSIsIkZMT09SIiwicGxhY2VzIiwicG93IiwiRkxPT1JNQVRIIiwiRkxPT1JQUkFDRSIsIkdDRCIsInJhbmdlIiwicjAiLCJJTlQiLCJJU08iLCJMQ00iLCJMTiIsIkxPRyIsImJhc2UiLCJMT0cxMCIsIk1ERVRFUk0iLCJudW1lcmljIiwiZGV0IiwiZSIsIk1JTlZFUlNFIiwiaW52IiwiTU1VTFQiLCJtYXRyaXgxIiwibWF0cml4MiIsImRvdCIsIk1PRCIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm1vZHVsdXMiLCJNUk9VTkQiLCJNVUxUSU5PTUlBTCIsInN1bSIsIk1VTklUIiwiZGltZW5zaW9uIiwiaWRlbnRpdHkiLCJPREQiLCJ0ZW1wIiwiUE9XRVIiLCJwb3dlciIsIlFVT1RJRU5UIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJSQURJQU5TIiwiUkFORCIsInJhbmRvbSIsIlJBTkRCRVRXRUVOIiwiYm90dG9tIiwiUk9NQU4iLCJkaWdpdHMiLCJyb21hbiIsIlJPVU5ERE9XTiIsIlJPVU5EVVAiLCJTRUMiLCJTRUNIIiwiU0VSSUVTU1VNIiwiY29lZmZpY2llbnRzIiwiU0lHTiIsIlNJTiIsIlNJTkgiLCJTUVJUIiwiU1FSVFBJIiwiU1VCVE9UQUwiLCJmdW5jdGlvbl9jb2RlIiwiQUREIiwibnVtMSIsIm51bTIiLCJFUlJPUl9OQW1lIiwiTUlOVVMiLCJESVZJREUiLCJNVUxUSVBMWSIsImZhY3RvcjEiLCJmYWN0b3IyIiwiR1RFIiwiTFQiLCJMVEUiLCJFUSIsInZhbHVlMSIsInZhbHVlMiIsIk5FIiwiUE9XIiwiZXhwb25lbnQiLCJhcmdzS2V5cyIsImVsdCIsIlNVTUlGIiwiY3JpdGVyaWEiLCJldmFsIiwiU1VNSUZTIiwic19hcnIiLCJjb21wYXJlVmFsdWUiLCJsYXN0SW5kZXhPZiIsInJlc3VsdEFyciIsIlNVTVBST0RVQ1QiLCJwcm9kdWN0IiwiX2kiLCJfaWoiLCJhcnJheXMiLCJTVU1TUSIsImluZm9ybWF0aW9uIiwiSVNOVU1CRVIiLCJTVU1YMk1ZMiIsImFycmF5X3giLCJhcnJheV95IiwiU1VNWDJQWTIiLCJTVU1YTVkyIiwiVEFOIiwiVEFOSCIsIlRSVU5DIiwiQVZFREVWIiwialN0YXQiLCJzdWJ0cmFjdCIsIm1lYW4iLCJjb3VudCIsIkFWRVJBR0VBIiwiQVZFUkFHRUlGIiwiYXZlcmFnZV9yYW5nZSIsImF2ZXJhZ2VfY291bnQiLCJpc1dpbGRjYXJkIiwidG9rZW5pemVkQ3JpdGVyaWEiLCJldmFsRXhwcmVzc2lvbiIsImZpbHRlcl9jcml0ZXJpYSIsInRva2VucyIsImNyZWF0ZVRva2VuIiwiVE9LRU5fVFlQRV9MSVRFUkFMIiwiY29tcHV0ZSIsIkFWRVJBR0VJRlMiLCJjcml0ZXJpYUxlbmd0aCIsImlzTWVldENvbmRpdGlvbiIsImNvbXB1dGVkUmVzdWx0IiwiYXZlcmFnZSIsIkJFVEEiLCJESVNUIiwiYWxwaGEiLCJiZXRhIiwiY3VtdWxhdGl2ZSIsIkEiLCJCIiwiY2RmIiwicGRmIiwiSU5WIiwicHJvYmFiaWxpdHkiLCJCSU5PTSIsInN1Y2Nlc3NlcyIsInRyaWFscyIsImJpbm9taWFsIiwiQ0hJU1EiLCJjaGlzcXVhcmUiLCJSVCIsIlRFU1QiLCJvYnNlcnZlZCIsImV4cGVjdGVkIiwicm93IiwiY29sIiwiZG9mIiwieHNxciIsIlBpIiwiQ2hpU3EiLCJDT0xVTU4iLCJjZWxsX25hbWUiLCJjZWxsRm9ybXVsYVByb3h5IiwiQ09MVU1OUyIsImNvbHMiLCJDT05GSURFTkNFIiwiTk9STSIsInNkIiwibm9ybWFsY2kiLCJUIiwidGNpIiwiSUZTIiwiY29uZCIsIkNPUlJFTCIsImFycmF5MSIsImFycmF5MiIsImNvcnJjb2VmZiIsIkNPVU5UQkxBTksiLCJDT1VOVElOIiwiZWxlbWVudCIsImJsYW5rcyIsIkNPVU5USUYiLCJtYXRjaGVzIiwiQ09VTlRJRlMiLCJyZXN1bHRzIiwiQ09VTlRVTklRVUUiLCJtaXNjIiwiVU5JUVVFIiwiQ09WQVJJQU5DRSIsIm1lYW4xIiwibWVhbjIiLCJjb3ZhcmlhbmNlIiwiREVWU1EiLCJFWFBPTiIsImxhbWJkYSIsImV4cG9uZW50aWFsIiwiRiIsImQxIiwiY2VudHJhbEYiLCJzdW1PZlNxdWFyZXMiLCJ2YWx1ZXMiLCJtYXRoVHJpZyIsIkZJU0hFUiIsIkZJU0hFUklOViIsImUyeSIsIkZPUkVDQVNUIiwiZGF0YV95IiwiZGF0YV94IiwieG1lYW4iLCJ5bWVhbiIsImRlbiIsIkZSRVFVRU5DWSIsImJpbnMiLCJHQU1NQSIsImdhbW1hZm4iLCJnYW1tYSIsIkdBTU1BTE4iLCJnYW1tYWxuIiwiR0FVU1MiLCJ6Iiwibm9ybWFsIiwiR0VPTUVBTiIsImdlb21lYW4iLCJHUk9XVEgiLCJrbm93bl95Iiwia25vd25feCIsIm5ld194IiwidXNlX2NvbnN0IiwiYXZnX3giLCJhdmdfeSIsImF2Z194eSIsImF2Z194eCIsIm5ld195IiwiSEFSTUVBTiIsIkhZUEdFT00iLCJOIiwiSU5URVJDRVBUIiwiS1VSVCIsInNpZ21hIiwic3RkZXYiLCJzb3J0IiwiTElORVNUIiwiTE9HRVNUIiwiTE9HTk9STSIsImxvZ25vcm1hbCIsIk1BWEEiLCJtZWRpYW4iLCJNSU5BIiwiTVVMVCIsImN1cnJlbnRJdGVtIiwibWF4SXRlbXMiLCJORUdCSU5PTSIsIm5lZ2JpbiIsIlBFQVJTT04iLCJkZW4xIiwiZGVuMiIsImZsIiwiUEVSQ0VOVFJBTksiLCJ1bmlxdWVzIiwibWF0Y2giLCJQRVJNVVQiLCJQRVJNVVRBVElPTkEiLCJQSEkiLCJQT0lTU09OIiwicG9pc3NvbiIsIlBST0IiLCJsb3dlciIsInVwcGVyIiwic29ydGVkIiwicXVhcnQiLCJSQU5LIiwiQVZHIiwib3JkZXIiLCJST1ciLCJST1dTIiwicm93cyIsIlJTUSIsIlNLRVciLCJtMiIsIm0zIiwiU0xPUEUiLCJTVEFOREFSRElaRSIsIlNUREVWQSIsIlZBUkEiLCJTVERFVlBBIiwiVkFSUEEiLCJTVEVZWCIsImxmdCIsIlRSQU5TUE9TRSIsInRyYW5zcG9zZSIsImRmIiwic3R1ZGVudHQiLCJtZWFuX3giLCJtZWFuX3kiLCJzX3giLCJzX3kiLCJUUkVORCIsIm5ld19kYXRhX3giLCJsaW5lc3QiLCJUUklNTUVBTiIsInRyaW0iLCJXRUlCVUxMIiwiWiIsImNvbF9zdHIiLCJjb2xzdHIiLCJtb2R1bG8iLCJjb2x1bW5OYW1lIiwiZ3VhcmQiLCJmcm9tQ2hhckNvZGUiLCJ0aW1lU3RhbXAiLCJSYXdWYWx1ZSIsIkNlbGxQcm9wIiwiY2VsbCIsImV4cHIiLCJlbXB0eSIsImlzSGF2ZSIsImRlcGVuZCIsIl9zZWxlY3RvciIsImlzQWIiLCJlZGl0b3IiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNlbGxSZWN0IiwiZ2V0Q2VsbFJlY3RCeVhZIiwiaW5wdXRUZXh0IiwiZWRpdG9yVGV4dCIsImdldFRleHQiLCJpbnB1dCIsIm1vdXNlZG93bkluZGV4IiwiaXNBYnNvbHV0ZVZhbHVlIiwiY3V0dGluZ0J5UG9zIiwic2VsZWN0b3IiLCJlczEiLCJ2YWx1ZTJhYnNvbHV0ZSIsImVzMiIsImVycHgiLCJpc0NvcnMiLCJzcCIsInN1YnN0cmluZyIsInNldFRleHQiLCJzZXRDdXJzb3JQb3MiLCJzZWxlY3RvcnMiLCJzZXQiLCJzZXRMb2NrIiwibWFrZVNlbGVjdG9yIiwianVkZ2VUZXh0IiwiY3V0Rmlyc3QiLCJzZXRNb3VzZURvd25JbmRleCIsImN1dFN0ciIsImZpbHRlclNlbGVjdG9ycyIsInNlbGVjdG9yc19kZWxldGUiLCJzZWxlY3RvcnNfbmV3IiwicmVtb3ZlRWwiLCJzdGVwIiwiZmlyc3QiLCJpdCIsIm1lcmdlcyIsIl8iLCJlMSIsImRpdjJzcGFuIiwiY3V0dGluZyIsImN1dHRpbmcyIiwic2V0VGltZW91dCIsInNlbGVjdG9yc0VsIiwic3RhdGUiLCJzZWxlY3RvcnNfdmFsaWQiLCJlbnRlckNvZGUiLCJzYyIsIm5vdFRydWVWYWx1ZSIsInByeCIsImxheCIsInByeF9pbmRleCIsImxheF9pbmRleCIsInJpZ2h0IiwiZXhpc3QiLCJmaW5kQnJhY2tldExlZnQiLCJtZXJnZVNlbGVjdG9yIiwic2VsZWN0b3JDb2xvciIsIlNlbGVjdG9yQ29weSIsInNldENzcyIsInNldEVuZCIsImluZGV4MiIsImJlZ2luIiwiaGFzIiwic3RvcCIsImZpbmRCcmFja2V0UmlnaHQiLCJzdWdnZXN0Q29udGVudCIsImN1dGNvbG9yIiwic3BhbkFyciIsInNwYW5FbCIsImNvZGUiLCJtb3VudDJzcGFuIiwicHQiLCJmb250U2l6ZXMiLCJmb250U2l6ZSIsInB4IiwidmFsaWQiLCJudW0yZSIsIkxOMTAiLCJhbGx6ZXJvIiwiZGVjaW1hbHNUb0ZyYWN0aW9uYWwiLCJkZWNpbWFscyIsImZvcm1hdERlY2ltYWxzIiwidG9GaXhlZCIsInJlY3Vyc2lvbiIsIk51bWJlciIsImlzSW50ZWdlciIsIkFTQyIsIkJBSFRURVhUIiwiQ0hBUiIsIkNMRUFOIiwiQ09ERSIsIkNPTkNBVEUiLCJ0cnVlRm91bmQiLCJmYWxzZUZvdW5kIiwiQ09OQ0FURU5BVEUiLCJEQkNTIiwiRE9MTEFSIiwiZm9ybWF0IiwiRVhBQ1QiLCJ0ZXh0MSIsInRleHQyIiwiRklORCIsImZpbmRfdGV4dCIsIndpdGhpbl90ZXh0IiwicG9zaXRpb24iLCJGSVhFRCIsIm5vX2NvbW1hcyIsIkhUTUwyVEVYVCIsImxpbmUiLCJJTkRFWCIsInJvd19udW0iLCJjb2x1bW5fbnVtIiwiTEVGVCIsIkxFTiIsIkVSUk9SIiwiTE9XRVIiLCJ0b0xvd2VyQ2FzZSIsIk1JRCIsIk5VTUJFUlZBTFVFIiwiZGVjaW1hbF9zZXBhcmF0b3IiLCJncm91cF9zZXBhcmF0b3IiLCJQUk9ORVRJQyIsIlBST1BFUiIsInR4dCIsInN1YnN0ciIsIlJFR0VYRVhUUkFDVCIsInJlZ3VsYXJfZXhwcmVzc2lvbiIsIlJFR0VYTUFUQ0giLCJmdWxsIiwiUkVHRVhSRVBMQUNFIiwicmVwbGFjZW1lbnQiLCJSRVBMQUNFIiwibmV3X3RleHQiLCJSRVBUIiwiUklHSFQiLCJTRUFSQ0giLCJmb3VuZEF0IiwiU1BMSVQiLCJzZXBhcmF0b3IiLCJTVUJTVElUVVRFIiwib2xkX3RleHQiLCJvY2N1cnJlbmNlIiwiVEVYVCIsImZpeGVkIiwiRm9ybXVsYXMiLCJqc1NwcmVhZHNoZWV0IiwiQWxsRm9ybXVsYXMiLCJmbXQiLCJUUklNIiwiVU5JQ0hBUiIsIlVOSUNPREUiLCJVUFBFUiIsIlZBTFVFIiwidW5mb3JtYXQiLCJDRUxMIiwiVFlQRSIsImVycm9yX3ZhbCIsIm1zZ0luZGljZSIsIklORk8iLCJJU0JMQU5LIiwiSVNCSU5BUlkiLCJJU0VSUiIsImlzRmluaXRlIiwiSVNFUlJPUiIsIklTRVZFTiIsIklTRk9STVVMQSIsIklTTE9HSUNBTCIsIklTTkEiLCJJU05PTlRFWFQiLCJJU09ERCIsIklTUkVGIiwiSVNURVhUIiwiTkEiLCJTSEVFVCIsIlNIRUVUUyIsIldFRUtfU1RBUlRTIiwiV0VFS19UWVBFUyIsIldFRUtFTkRfVFlQRVMiLCJpc0xlYXBZZWFyIiwieWVhciIsImdldE1vbnRoIiwiZGF5c0JldHdlZW4iLCJzdGFydF9kYXRlIiwiZW5kX2RhdGUiLCJEQVRFIiwibW9udGgiLCJkYXkiLCJEQVRFVkFMVUUiLCJkYXRlX3RleHQiLCJzdGFtcDJEYXlOdW0iLCJEQVkiLCJzZXJpYWxfbnVtYmVyIiwiZ2V0RGF0ZSIsIkRBWVMiLCJEQVlTMzYwIiwibWV0aG9kIiwiZWQiLCJzbSIsImVtIiwic21kIiwiZ2V0RnVsbFllYXIiLCJlbWQiLCJFREFURSIsIm1vbnRocyIsInNldE1vbnRoIiwiRU9NT05USCIsIkhPVVIiLCJnZXRIb3VycyIsIklOVEVSVkFMIiwic2Vjb25kIiwiaG91ciIsInNlYyIsIklTT1dFRUtOVU0iLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXkiLCJ5ZWFyU3RhcnQiLCJNSU5VVEUiLCJNT05USCIsIk5FVFdPUktEQVlTIiwiaG9saWRheXMiLCJORVRXT1JLREFZU0lOVEwiLCJ3ZWVrZW5kIiwiTkVUV09SS0RBWVMkSU5UTCIsImRheXMiLCJnZXRVVENEYXkiLCJob2xpZGF5IiwiSU5UTCIsIk5PVyIsIlNFQ09ORCIsImdldFNlY29uZHMiLCJUSU1FIiwibWludXRlIiwiVElNRVZBTFVFIiwidGltZV90ZXh0IiwiVE9EQVkiLCJXRUVLREFZIiwicmV0dXJuX3R5cGUiLCJXRUVLTlVNIiwid2Vla19zdGFydCIsImphbiIsImluYyIsIldPUktEQVkiLCJXT1JLREFZSU5UTCIsIllFQVIiLCJZRUFSRlJBQyIsImJhc2lzIiwic3kiLCJleSIsInlsZW5ndGgiLCJkYXRlMSIsImRhdGUyIiwieWVhcjEiLCJtYXIxeWVhcjEiLCJ5ZWFyMiIsIm1hcjF5ZWFyMiIsImZlYjI5QmV0d2VlbiIsInllYXJzIiwiUmFuZ2UiLCJzdHJfZXhwcmVzc2lvbiIsImNhbGNDZWxsIiwicG9zaXRpb25faSIsInJhbmdlX2V4cHJlc3Npb24iLCJzaGVldF9uYW1lIiwic3RhcnRfcHN0IiwiZW5kX3BzdCIsImF1eCIsImdldFNhbml0aXplZFNoZWV0TmFtZSIsInJhbmdlX3N0YXJ0X3BzdCIsImNhbGNTaGVldCIsIndvcmtib29rUHJveHkiLCJnZXRTaGVldEJ5TmFtZSIsIm1heF9yb3ciLCJtaW5fcm93Iiwic3RyX21heF9yb3ciLCJtaW5fY29sIiwiY29sX3N0cl8yX2ludCIsIm1heF9jb2wiLCJpbnRfMl9jb2xfc3RyIiwicmVmQ2FsY0NlbGwiLCJnZXRDZWxsQnlOYW1lIiwiY2VsbFN0YXR1cyIsIkZPUk1VTEFfU1RBVFVTIiwiZXhlY0Zvcm11bGEiLCJjZWxsT2JqIiwiaXNGb3JtdWxhIiwib3RoZXJBdXRvRmlsdGVyIiwiZGlyZWN0aW9uIiwiaXNBZGQiLCJ3aGF0IiwiZHJpIiwibmNlbGwiLCJnZXRDZWxsQnlUb3BDZWxsIiwiZm9ybXVsYXMiLCJpVGV4dCIsImNhbGNGb3JtdWxhQ2VsbEJ5VG9wQ2VsbCIsImNhbGNDZWxsQnlUb3BDZWxsIiwibnVtYmVyQXV0b0ZpbHRlciIsImRpZmZWYWx1ZSIsImNhbGNOdW1iZXJDZWxsQnlUb3BDZWxsIiwiZGF0ZUF1dG9GaWx0ZXIiLCJpc0Rvd24iLCJpc0RhdGUiLCJkaWZmIiwiY2FsY0RhdGVDZWxsQnlUb3BDZWxsIiwiUm93cyIsInBhc3RlUHJveHkiLCJQYXN0ZVByb3h5Iiwid29ya2Jvb2siLCJnZXRPck5ldyIsImV4Y2VwdFNldCIsInJhbmdlU3VtIiwiZ2V0SGVpZ2h0Iiwic3VtSGVpZ2h0IiwiY2VsbHMiLCJnZXRDZWxsIiwibWVyZ2UiLCJpc1NoZWV0VmFsZSIsIl9jZWxsIiwiQ2VsbCIsInNldENlbGwiLCJ0b19jYWxjX251bSIsImdldERlcGVuZENlbGwiLCJzZXRGb3JtYXRUZXh0IiwidHJ5UGFyc2VUb051bSIsIm1lcmdlQ2VsbEV4cHIiLCJtZXJnZUFyciIsImRpc3RpbmN0IiwicmVmQ2VsbCIsImNlbGxSYW5nZSIsImdldENlbGxPck5ldyIsImFycjMiLCJjaGFuZ2VGb3JtdWxhIiwiY2EiLCJzZXRDZWxsQWxsIiwiZXMiLCJjZWxsU3R5bGUiLCJpc1ZhbGlkIiwiaXNJbnNlcnQiLCJkcyIsImRlaSIsImRjaSIsImlzUm93cyIsImZvcm1hdFRleHQiLCJjZWxsUHJvcCIsImJhZCIsIm5ld1N0ciIsImdldENlbGxUZXh0SXNBZGQiLCJkczEiLCJkczIiLCJpdGVtIiwidW5kIiwiQ2VsbFByb3h5IiwiZ2V0Q2VsbERhdGFUeXBlIiwibGFzdDEiLCJmb3JtYXRNb25leSIsImNvcHlSZW5kZXIiLCJzdHJMaXN0Iiwic3BsaXRTdHIiLCJnZXRSYW5nZUJ5VG9wQ2VsbCIsImdldENlbGxUZXh0QnlTaGlmdCIsInVwZGF0ZUNlbGxSZWZlcmVuY2VCeVNoaWZ0Iiwid29yZCIsImdldENlbGxCeUNlbGwiLCJjbG9uZURlZXAiLCJzcmNDZWxsUmFuZ2UiLCJkc3RDZWxsUmFuZ2UiLCJzZXRTcmNBbmREc3RDZWxsUmFuZ2UiLCJ1c2UiLCJybiIsImNuIiwiaXNMZWZ0UmlnaHQiLCJhdXRvRmlsdGVyRGlyZWN0aW9uIiwidXBPckRvd24iLCJnZXRPbmVEUmFuZ2VPYmoiLCJzcmNPbmVEUmFuZ2UiLCJkc3RPbmVEUmFuZ2UiLCJnZXRBbGxEYXRhVHlwZSIsImdldExvY2F0aW9uQXJyYXkiLCJsZWZ0T3JSaWdodCIsImNhbGNEaWZmIiwibnJpIiwibmNpIiwiYXMiLCJzcmNDZWxsIiwiZWFjaENlbGxzIiwiaW5jbHVkZXMiLCJuZGF0YSIsInJuZGF0YSIsImRlbGV0ZUNlbGwiLCJlbnRyaWVzIiwiaXNSZWZlck90aGVyU2hlZXQiLCJyZWNhc3QiLCJSZWNhc3QiLCJzaGVldCIsIm91dCIsInJvd3NJbml0IiwidGltZSIsImluaXQiLCJ0b29sYmFyIiwidGltZUVuZCIsImFzc2lnbiIsInN0eWxlcyIsImNiZCIsImNsaXBib2FyZERhdGEiLCJpdGVtcyIsImtpbmQiLCJnZXRBc1N0cmluZyIsInRleHREb20iLCJpbWdEb20iLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlRG9tIiwidGFibGVEb20iLCJzcGFuRG9tIiwibW91bnRJbWciLCJwcm9jZXNzIiwic3BhbkRvbVBhY2thZ2UiLCJHZXRJbmZvRnJvbVRhYmxlIiwic2hlZXRSZXNldCIsImdldEFzRmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJpbWciLCJyZWFkQXNEYXRhVVJMIiwiZ2V0RGF0YSIsInBhc3RlRGlyZWN0aW9uc0FyciIsImRpcmVjdGlvbl9uZXciLCJkaXJlY3Rpb25fZGVsZXRlIiwicmVzaXplT3B0aW9uIiwib25CZWdpbiIsIm9uRW5kIiwib25SZXNpemUiLCJzZWxmIiwiZ2V0Q2hvb3NlSW1nIiwiaW1nMiIsImRyYWdPcHRpb24iLCJsYXN0Q2kiLCJsYXN0UmkiLCJvbkRyYWciLCJ0YWJsZSIsInRib2R5IiwidGV4dEFyciIsImlubmVyVGV4dCIsInRyIiwidGQiLCJoaXN0b3J5IiwiZ2V0TWF4Q29vcmQiLCJuZXh0TGVmdCIsIm5leHRUb3AiLCJpbWFnZSIsIkltYWdlIiwiY29udGFpbmVyIiwicGljdHVyZU9mZnNldExlZnQiLCJwaWN0dXJlT2Zmc2V0VG9wIiwicmVjdCIsImdldE1vdmVSZWN0IiwiY2hvb3NlIiwiZGl2IiwiRHJhZyIsInJlZ2lzdGVyIiwiZGlyZWN0aW9uc0FyciIsIlJlc2l6ZSIsImNvbnRhaW5lckhhbmRsZXJFdmVudCIsImhpZGVEaXJlY3Rpb25BcnIiLCJkaXNwbGF5IiwiY2xlYXIiLCJuZXdYIiwidGFibGVPYmoiLCJ0YWJsZVByb3h5IiwiVGFibGVQcm94eSIsImV4dGVuZCIsImRlYWxDb2xTcGFuIiwiZGVhbFN0eWxlIiwicmVmZXJlbmNlIiwiZGVhbFJlZmVyZW5jZSIsInNldENlbGxSYW5nZSIsInBhcnNlVGFibGVDZWxsUmFuZ2UiLCJnZXRTZWxlY3RlZFJlY3QiLCJhZHZpY2UiLCJzY3JvbGxiYXJNb3ZlIiwidmVydGljYWxTY3JvbGxiYXIiLCJob3Jpem9udGFsU2Nyb2xsYmFyIiwidGFibGVPZmZzZXQiLCJnZXRUYWJsZU9mZnNldCIsImZzdyIsImZyZWV6ZVRvdGFsV2lkdGgiLCJmc2giLCJmcmVlemVUb3RhbEhlaWdodCIsInNlbGVjdG9yU2V0IiwiaW5kZXhlc1VwZGF0ZWQiLCJtb3ZpbmciLCJyZXNldCIsImNsZWFyVGltZW91dCIsInJlbmRlcl90aW1lciIsInJlbmRlciIsInNlbGVjdG9yTW92ZSIsImluZGV4ZXMiLCJtb3ZlSW5kZXhlcyIsInNlbGVjdENlbGwiLCJzZXREYXRhIiwicmVzZXRTZWxlY3RPZmZzZXQiLCJlZGl0b3JTZXRPZmZzZXQiLCJvdmVybGF5ZXJNb3VzZW1vdmUiLCJyb3dSZXNpemVyIiwiY29sUmVzaXplciIsInRhYmxlRWwiLCJ3ZWJzaXRlIiwiY1JlY3QiLCJpbmRleFdpZHRoIiwidFJlY3QiLCJib3giLCJvdmVybGF5ZXJNb3VzZXNjcm9sbCIsImF1dG9Mb2FkIiwic2V0dGluZ3MiLCJzY3JvbGwiLCJkZWx0YSIsImRlbHRhWSIsIm92ZXJsYXllclRvdWNoIiwiZGlzdGFuY2UiLCJ2ZXJ0aWNhbFNjcm9sbGJhclNldCIsInRvdGFsSGVpZ2h0IiwiaG9yaXpvbnRhbFNjcm9sbGJhclNldCIsInRvdGFsV2lkdGgiLCJzaGVldEZyZWV6ZSIsImZyZWV6ZSIsImZ3aWR0aCIsImZoZWlnaHQiLCJzZXRGcmVlemVMZW5ndGhzIiwicmVzZXRBcmVhT2Zmc2V0Iiwib3ZlcmxheWVyRWwiLCJvdmVybGF5ZXJDRWwiLCJ0T2Zmc2V0IiwidlJlY3QiLCJnZXRSZWN0Iiwib2Zmc2V0IiwicmVuZGVyQXV0b0FkYXB0IiwiYXV0b1Jvd1Jlc2l6ZXIiLCJ0b29sYmFyQ2hhbmdlU2VsZWN0b3JDZWxsIiwiY2xlYXJDbGlwYm9hcmQiLCJoaWRlQ2xpcGJvYXJkIiwic2hvd0NsaXBib2FyZCIsInBhc3RlIiwibXNnIiwieHRvYXN0IiwiYXV0b2ZpbHRlciIsInRvb2xiYXJDaGFuZ2VQYWludGZvcm1hdFBhc3RlIiwicGFpbnRmb3JtYXRBY3RpdmUiLCJwYWludEZvcm1hdENoYW5nZSIsInBhaW50Zm9ybWF0VG9nZ2xlIiwiZHJvcERvd24iLCJpc0F1dG9maWxsRWwiLCJzZXRCb3hpbm5lciIsImRzdFJlY3QiLCJnZXRDZWxsUmVjdEJ5WFlXaXRoTm90VG90YWxSZXN1bHQiLCJsYXllclgiLCJjbGllbnRYIiwibGF5ZXJZIiwiY2xpZW50WSIsImRyb3BHZXRQb3MiLCJycG9zIiwiZXgiLCJzaG93QXV0b2ZpbGwiLCJpc091c2lkZVZpZXdSYW5nZSIsInZpZXciLCJjb250aW51ZU1vdmUiLCJzaGlmdEtleSIsInZpZXdSYW5nZSIsImdldE1vdmVQb3MiLCJzZWxlY3RvckJleW9uZE1vdmUiLCJyZWN0UHJveHkiLCJSZWN0UHJveHkiLCJpc0xvY0luc2lkZSIsImFyYW5nZSIsImdldFVwRG93bkxlZnRSaWdodCIsInNjcm9sbFRvIiwiZ2V0V2lkdGgiLCJvdmVybGF5ZXJNb3VzZWRvd24iLCJzb3J0RmlsdGVyIiwic2V0UmlDaSIsImF1dG9GaWx0ZXIiLCJpbmNsdWRlczIiLCJnZXRTZXQiLCJleGNlcHRSb3dTZXQiLCJnZXRGaWx0ZXIiLCJnZXRTb3J0Iiwic2V0T2Zmc2V0IiwicG9pbnQiLCJvZmZzZXRQYXJlbnQiLCJnZXRQb2ludCIsIm1vdXNlTW92ZVVwIiwiY2xlYXJTdG9wVGltZXIiLCJjb250aW51ZURyb3BEb3duIiwiYXV0b2ZpbGwiLCJ0ZXN0VmFsaWQiLCJhdXRvZmlsbE5leHQiLCJoaWRlQXV0b2ZpbGwiLCJzdG9wVGltZXIiLCJzdG9wVGltZXIyIiwic2V0SW50ZXJ2YWwiLCJsb2FkRm9ybXVsYSIsImZpcnN0Um93VG9XaWR0aCIsImNvbFJlc2l6ZXJGaW5pc2hlZCIsImFkdmljZVNldE9mZnNldCIsInBpY3R1cmVTZXRPZmZzZXQiLCJzT2Zmc2V0IiwiY3JpIiwiY2NpIiwic1Bvc2l0aW9uIiwic2VsZWN0b3JzU2V0T2Zmc2V0IiwicmVzZXRTZWxlY3RvckJSTEFyZWFPZmZzZXQiLCJoYXNFZGl0b3IiLCJzaG93RWRpdG9yIiwic2VsZWN0b3JNb3ZlRWwiLCJlZGl0b3JTZXQiLCJzZXRDZWxsRW5kIiwiZ2V0U2VsZWN0ZWRDZWxsIiwidmVydGljYWxTY3JvbGxiYXJNb3ZlIiwic2Nyb2xseSIsInJlc2V0QlJMQXJlYU9mZnNldCIsImhvcml6b250YWxTY3JvbGxiYXJNb3ZlIiwic2Nyb2xseCIsInJlc2V0QlJUQXJlYU9mZnNldCIsInZpZXdSYW5nZTIiLCJhdXRvQWRhcHQiLCJpZ25vcmVSaSIsInZpZXdXaWR0aCIsImdldENlbGxUZXh0Q29udGVudCIsImRib3giLCJnZXREcmF3Qm94IiwiZ2V0Q2VsbFRleHRTdHlsZSIsImZvbnQiLCJnZXRGb250U2l6ZVB4QnlQdCIsInR4dFdpZHRoIiwiZHJhdyIsInNlbGZBZGFwdGlvblR4dFdpZHRoIiwiYXV0b0FkYXB0TGlzdCIsImlnbm9yZSIsIl9pZ25vcmUiLCJzZXRXaWR0aCIsImNlbGxXaWR0aCIsInJlY29yZF9yYyIsInJfaCIsInZpZXdIZWlnaHQiLCJyZWNvcmRfaCIsImNfaCIsInBhZGRpbmciLCJzZXRIZWlnaHQiLCJzZWxmQWRhcHRpb25IZWlnaHQiLCJjbGlja1NlbGVjdG9yQ2hhbmdlUmlDaSIsInJvd1Jlc2l6ZXJGaW5pc2hlZCIsInNldFJvd0hlaWdodCIsInNldENvbFdpZHRoIiwiZXJyb3JQb3AiLCJlcnJvclBvcFVwIiwib3BlbiIsInNlbGVjdG9yQ2VsbFRleHQiLCJzZXRDZWxsVGV4dCIsImRhdGFTZXRDZWxsVGV4dCIsInNldFNlbGVjdGVkQ2VsbFRleHQiLCJ0aHJvd0Zvcm11bGEiLCJpbnNlcnREZWxldGVSb3dDb2x1bW4iLCJpbnNlcnQiLCJ0b29sYmFyQ2hhbmdlIiwidW5kbyIsInNldENvbnRlbnQiLCJoaXN0b3J5TGlzdCIsInJlZG8iLCJnZXRNYXgiLCJtcmkiLCJtY2kiLCJjaGFuZ2VEYXRhRm9yQ2FsYyIsIlByZUFjdGlvbiIsImFjdGlvbiIsIm9sZENlbGwiLCJuZXdDZWxsIiwiZWFjaFJhbmdlIiwic2hvd0ZyZWV6ZSIsInNob3dFcXVhdGlvbiIsInNldFNlbGVjdGVkQ2VsbEF0dHIiLCJib3JkZXJSZXNTZXQiLCJiciIsImJvcmRlciIsInNvcnRGaWx0ZXJDaGFuZ2UiLCJzZXRBdXRvRmlsdGVyIiwiYWZ0ZXJTZWxlY3RvciIsImdldExvY2siLCJwYXN0ZUV2ZW50IiwibW91bnRQYXN0ZSIsInNoZWV0SW5pdEV2ZW50cyIsImNvbnRleHRNZW51IiwibW9kYWxWYWxpZGF0aW9uIiwieHlJblNlbGVjdGVkUmVjdCIsInNldFBvc2l0aW9uIiwibG9ja0NlbGxzIiwibG9uZ1RpbWVCZWZvcmUiLCJjbGVhclNlbGVjdG9ycyIsImJpbmRUb3VjaCIsIm9rIiwiZmluaXNoZWRGbiIsIm1vdmVGbiIsIml0ZXh0IiwiZWRpdG9yQ2hhbmdlVG9IaXN0b3J5IiwiZ2V0T2xkQ2VsbCIsImdldFJJQ0kiLCJzZXRPbGRDZWxsIiwic2V0U2VsZWN0ZWRDZWxsIiwibG9jayIsImVkaXRpbmdTZWxlY3RvcnMiLCJhZGRWYWxpZGF0aW9uIiwicmVtb3ZlVmFsaWRhdGlvbiIsIml0ZW1DbGljayIsInNldFZhbHVlIiwiZ2V0U2VsZWN0ZWRWYWxpZGF0aW9uIiwicmVsb2FkIiwibW91bnRDb3B5Iiwid2hpY2giLCJjdHJsS2V5IiwiYWRkUGljIiwicGljdHVyZXMiLCJkZWxldGVJbWciLCJ0cmlnZ2VyIiwiU2hlZXQiLCJ0YXJnZXRFbCIsInNob3dUb29sYmFyIiwic2hvd0NvbnRleHRtZW51Iiwicm93V2lkdGgiLCJUb29sYmFyIiwiUmVzaXplciIsIm1pbldpZHRoIiwiU2Nyb2xsYmFyIiwiRWRpdG9yIiwiZm5OYW1lQXJyYXlXaXRoS2V5IiwiVGltZXIiLCJXZWJzaXRlIiwiTW9kYWxWYWxpZGF0aW9uIiwiRXJyb3JQb3BVcCIsIkNvbnRleHRNZW51IiwiU2VsZWN0b3IiLCJBZHZpY2UiLCJTb3J0RmlsdGVyIiwiVGFibGUiLCJyZWNhbGMiLCJjbGlja0NvcHlQYXN0ZSIsImNsaWNrQXV0b2ZpbGwiLCJzdHlsZUJvb2wiLCJzZXRGcmVlemUiLCJjZWxsUGFkZGluZ1dpZHRoIiwidGFibGVGaXhlZEhlYWRlckNsZWFuU3R5bGUiLCJmaWxsU3R5bGUiLCJ0YWJsZUdyaWRTdHlsZSIsImxpbmVXaWR0aCIsInRoaW5MaW5lV2lkdGgiLCJzdHJva2VTdHlsZSIsInJpbmRleCIsIkRyYXdCb3giLCJnZXRDaGFuZ2VEYXRhVG9DYWxjIiwiY2hhbmdlRGF0YSIsInBhcnNlQ2VsbCIsImNoYW5nZURhdGFBcmdzIiwiY2FsYyIsImNhbGN1bGF0ZVJvd3MiLCJyZW5kZXJDZWxsIiwic29ydGVkUm93TWFwIiwibnJpbmRleCIsImdldENlbGxTdHlsZU9yRGVmYXVsdCIsImJnY29sb3IiLCJzZXRCb3JkZXJzIiwic3Ryb2tlQm9yZGVycyIsImNlbGxUZXh0IiwicmVjdDIiLCJyZW5kZXJGb3JtYXQiLCJtaW51cyIsImlzTWludXMiLCJ1bmRlcmxpbmUiLCJsb29rIiwic3BlY2lhbFN0eWxlIiwiYWxpZ24iLCJ2YWxpZ24iLCJzdHJpa2UiLCJ0ZXh0d3JhcCIsInZhbGlkYXRpb25zIiwiZ2V0RXJyb3IiLCJyZW5kZXJGbGV4aWJsZSIsImZsZXgiLCJzX3QiLCJzZXRfdG90YWwiLCJkcm9wVXAiLCJyZW5kZXJBdXRvZmlsdGVyIiwiYWZSYW5nZSIsImhyYW5nZSIsImludGVyc2VjdHMiLCJkcm9wZG93biIsInJlbmRlckNvbnRlbnQiLCJmdyIsImZoIiwidHgiLCJ0eSIsInNhdmUiLCJmaWx0ZXJlZFRyYW5zbGF0ZUZ1bmMiLCJyZXN0b3JlIiwicnNldCIsImVhY2hNZXJnZXNJblZpZXciLCJyZW5kZXJTZWxlY3RlZEhlYWRlckNlbGwiLCJmaWxsUmVjdCIsInJlbmRlckZpeGVkSGVhZGVycyIsInN1bVdpZHRoIiwibnR5IiwibnR4IiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwibnB4Iiwicm93RWFjaCIsInJvd0hlaWdodCIsImlpIiwiZmlsbFRleHQiLCJjb2xFYWNoIiwiY29sV2lkdGgiLCJyZW5kZXJGaXhlZExlZnRUb3BDZWxsIiwicmVuZGVyQ29udGVudEdyaWQiLCJjbGVhclJlY3QiLCJzaG93R3JpZCIsImNoIiwiY3ciLCJyZW5kZXJGcmVlemVIaWdobGlnaHRMaW5lIiwiZnR3IiwiZnRoIiwidHdpZHRoIiwidGhlaWdodCIsIkRyYXciLCJ0aW1lciIsImdldENlbGxUZXh0T3JEZWZhdWx0IiwicmVzaXplIiwiZnJpIiwiZmNpIiwidnIiLCJmcmVlemVWaWV3UmFuZ2UiLCJmb3JtYXRTdHJpbmdSZW5kZXIiLCJmb3JtYXROdW1iZXJSZW5kZXIiLCJiYXNlRm9ybWF0cyIsInRmIiwibGFiZWwiLCJtdWx0aXBseSIsImFfcyIsInRvSW50ZWdlciIsImZsb2F0TnVtIiwidGltZXMiLCJpc05lZ2F0aXZlIiwic3RyZmkiLCJkb3RQb3MiLCJpbnROdW0iLCJvcCIsIm8xIiwibzIiLCJuMSIsIm4yIiwidDEiLCJ0MiIsImZvcm1hdG0iLCJCdXR0b24iLCJDYWxjU2hlZXQiLCJuYW1lMkNlbGxPYmoiLCJuYW1lMkNlbGxQcm94eSIsImNyZWF0ZU5hbWUyQ2VsbFByb3h5IiwiY2VsbE5hbWUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29udmVydFRvQ2VsbFYiLCJDYWxjQ2VsbCIsInN0YXR1cyIsIkNhbGNXb3JrYm9va1Byb3h5Iiwid29ya2Jvb2tPYmoiLCJuYW1lMlNoZWV0UHJveHkiLCJjcmVhdGVOYW1lMlNoZWV0UHJveHkiLCJtdWx0aUNvbGxFeHBGbiIsImNyZWF0ZURlZmF1bHRGbkNvbGxlY3Rpb24iLCJTaGVldHMiLCJTaGVldDEiLCJBMSIsInNoZWV0TmFtZSIsInByb3BlcnR5TmFtZSIsImdldENlbGxQcm9wZXJ0eSIsImlzU3RydWN0dXJhbEZvcm11bGEiLCJTdHJ1Y3R1cmFsRXhwcmVzc2lvbkJ1aWxkZXIiLCJwYXJzZUZvcm11bGEiLCJTaW1wbGVFeHByZXNzaW9uQnVpbGRlciIsImNhbGNDZWxsQXJyYXkiLCJjaGVja192YWxpZCIsImNhbGxiYWNrIiwiY2FsbEJhY2tSZXMiLCJmb3JtdWxhQXJyYXkiLCJnZXRTaGVldE5hbWVzIiwic2hlZXRQcm94eSIsImdldENlbGxOYW1lcyIsImFwcGx5VG9BbGxDZWxsc0ZpbHRlckVtcHR5IiwiY2VsbFByb3h5IiwiaXNGb3JtdWxhVmFsaWQiLCJwcmVBY3Rpb24iLCJ3YiIsInRvX2NhbGNfY2VsbF9uYW1lcyIsImZpbmRBbGxOZWVkQ2FsY0NlbGwiLCJmb3JtdWxhX3JlZiIsImZvcm11bGEiLCJub3JtYWxfZm5fY29sbCIsIkZuQ29sbGVjdGlvbiIsImFkZEZuT2JqQXJyYXkiLCJmbk9iakFycmF5IiwiZm5PYmoiLCJyYXdfZm5fY29sbCIsImFkZEZuT2JqIiwicmF3Rm5PYmoiLCJNdWx0aUNvbGxFeHBGbiIsInJlZyIsInJlcCIsImhlbHBlciIsInRyYW5zX2RpY3QiLCJoYXNFbGVtZW50IiwiRkxBVFRFTiIsIkFSR1MyQVJSQVkiLCJSRUZFUkVOQ0UiLCJjb250ZXh0IiwicGF0aCIsIm9wZW5pbmciLCJKT0lOIiwiTlVNQkVSUyIsIk5VTUVSQUwiLCJpc1ZhbGlkQmluYXJ5TnVtYmVyIiwidHJhbnNfbnVtIiwiaW51bWJlciIsIkJFU1NFTEkiLCJiZXNzZWwiLCJiZXNzZWxpIiwiQkVTU0VMSiIsImJlc3NlbGoiLCJCRVNTRUxLIiwiYmVzc2VsayIsIkJFU1NFTFkiLCJiZXNzZWx5IiwiQklOMkRFQyIsInN0cmluZ2lmaWVkIiwiQklOMkhFWCIsIkJJTjJPQ1QiLCJCSVRBTkQiLCJudW1iZXIxIiwibnVtYmVyMiIsIkJJVExTSElGVCIsIkJJVE9SIiwiQklUUlNISUZUIiwiQklUWE9SIiwiQ09NUExFWCIsInJlYWwiLCJpbWFnaW5hcnkiLCJzdWZmaXgiLCJzaWduIiwiQ09OVkVSVCIsImZyb21fdW5pdCIsInRvX3VuaXQiLCJhbHQiLCJ1bml0cyIsImJpbmFyeV9wcmVmaXhlcyIsIllpIiwiWmkiLCJFaSIsIlRpIiwiR2kiLCJNaSIsImtpIiwidW5pdF9wcmVmaXhlcyIsIlkiLCJFIiwiRyIsInUiLCJmcm9tIiwidG8iLCJiYXNlX2Zyb21fdW5pdCIsImJhc2VfdG9fdW5pdCIsImZyb21fbXVsdGlwbGllciIsInRvX211bHRpcGxpZXIiLCJmcm9tX2JpbmFyeV9wcmVmaXgiLCJmcm9tX3VuaXRfcHJlZml4IiwidG9fYmluYXJ5X3ByZWZpeCIsInRvX3VuaXRfcHJlZml4IiwiREVDMkJJTiIsIkRFQzJIRVgiLCJERUMyT0NUIiwiREVMVEEiLCJFUkYiLCJsb3dlcl9ib3VuZCIsInVwcGVyX2JvdW5kIiwiZXJmIiwiRVJGQyIsImVyZmMiLCJHRVNURVAiLCJIRVgyQklOIiwibmVnYXRpdmUiLCJkZWNpbWFsIiwiSEVYMkRFQyIsIkhFWDJPQ1QiLCJJTUFCUyIsIklNUkVBTCIsIklNQUdJTkFSWSIsInVuaXQiLCJJTUFSR1VNRU5UIiwiSU1DT05KVUdBVEUiLCJJTUNPUyIsIklNQ09TSCIsIklNQ09UIiwiSU1ESVYiLCJJTVNJTiIsImludW1iZXIxIiwiaW51bWJlcjIiLCJ1bml0MSIsInVuaXQyIiwiSU1FWFAiLCJJTUxOIiwiSU1MT0cxMCIsIklNTE9HMiIsIklNUE9XRVIiLCJJTVBST0RVQ1QiLCJJTVNFQyIsIklNU0VDSCIsIklNU0lOSCIsIklNU1FSVCIsIklNQ1NDIiwiSU1DU0NIIiwiSU1TVUIiLCJJTVNVTSIsIklNVEFOIiwiT0NUMkJJTiIsIk9DVDJERUMiLCJPQ1QySEVYIiwicXVvdGVkTWF0Y2giLCJSZWZWYWx1ZSIsImdldFJlZkNhbGNDZWxsIiwiZXJyb3JfY2YiLCJyZXF1aXJlIiwiYXN0IiwicHJlUHJvY2VzcyIsImZvcm1hdEluZm8iLCJuQSIsImRhdGVQYXR0ZXJuMiIsIk1vdmVkIiwic3RhcnRaSW5kZXgiLCJTZWxlY3RvckVsZW1lbnQiLCJjb3JuZXJFbCIsIm1vdmVFdmVudCIsImJveGlubmVyIiwiYXJlYUVsIiwiY2xpcGJvYXJkRWwiLCJhdXRvZmlsbEVsIiwiX2NlbGxSYW5nZSIsInNldE1vdmUiLCJtb3ZlZENlbGwiLCJtb3ZlZENlbGwyIiwiY3V0UGFzdGUiLCJtb3ZlQ2hhbmdlIiwic2VsZWN0b3JNb3ZlUmVzZXQiLCJwb2ludGVyIiwiY2FsQlJBcmVhT2Zmc2V0IiwiZnR3aWR0aCIsImZ0aGVpZ2h0IiwibGVmdDAiLCJ0b3AwIiwiY2FsVEFyZWFPZmZzZXQiLCJjYWxMQXJlYU9mZnNldCIsInNldEJSQXJlYU9mZnNldCIsInNldEFyZWFPZmZzZXQiLCJzZXRUTEFyZWFPZmZzZXQiLCJ0bCIsInNldFRBcmVhT2Zmc2V0Iiwic2V0TEFyZWFPZmZzZXQiLCJzZXRMQ2xpcGJvYXJkT2Zmc2V0Iiwic2V0Q2xpcGJvYXJkT2Zmc2V0Iiwic2V0QlJDbGlwYm9hcmRPZmZzZXQiLCJzZXRUTENsaXBib2FyZE9mZnNldCIsInNldFRDbGlwYm9hcmRPZmZzZXQiLCJzZXRBbGxBcmVhT2Zmc2V0Iiwic2V0QWxsQ2xpcGJvYXJkT2Zmc2V0IiwiYXJlYU9mZnNldCIsIlNlbGVjdG9yQ2VsbCIsImxhc3RyaSIsImxhc3RjaSIsImZyZWV6ZUhlaWdodCIsImZyZWV6ZVdpZHRoIiwiY29mZnNldCIsImdldENsaXBib2FyZFJlY3QiLCJyZXNldE9mZnNldCIsImNhbFNlbGVjdGVkUmFuZ2VCeVN0YXJ0Iiwic2V0SW5kZXhlcyIsImNhbFNlbGVjdGVkUmFuZ2VCeUVuZCIsImRyaXNjIiwiaW5wdXRNb3ZlUHJldiIsImZpbHRlckl0ZW1zIiwiaXRlbUluZGV4Iiwic2Nyb2xsSGVpZ2h0IiwiaW5wdXRNb3ZlTmV4dCIsImlucHV0RW50ZXIiLCJjbGljayIsImlucHV0S2V5ZG93bkhhbmRsZXIiLCJTdWdnZXN0IiwiY3NzUmVtb3ZlS2V5cyIsInN0YXJ0c1dpdGgiLCJtYXAiLCJzZWxlY3RDb2xvcnMiLCJ0aGVtZUNvbG9yUGxhY2VIb2xkZXJzIiwidGhlbWVDb2xvcnMiLCJzdGFuZGFyZENvbG9ycyIsImJ1aWxkVGQiLCJhbGxGbk9iaiIsImdldEFsbEZuT2JqIiwic2hlZXRzIiwic2hlZXQxIiwiRHJvcGRvd25Db2xvciIsImljb25OYW1lIiwiaWNvbiIsImNvbG9yUGFsZXR0ZSIsIkNvbG9yUGFsZXR0ZSIsInNldFRpdGxlIiwiTW9kYWwiLCJkaW1tZXIiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsInhrZXlkb3duRXNjIiwicGFyc2VEb20iLCJzaGVldENvcHkiLCJwbGFpbiIsImJvbGQiLCJoaWRkZW4iLCJub2RlIiwidG1wTm9kZSIsImNsb25lTm9kZSIsImdldENlbGxEZXBlbmQiLCJtdWx0aXZhbHVlUmVmc0NlbGwiLCJvbGREYXRhIiwibmV3RGF0YSIsIm9sZFN0ZXAiLCJuZXdNZXJnZXNEYXRhIiwib2xkTWVyZ2VzRGF0YSIsImNoYW5nZUFyciIsImlzUmVkbyIsIl9kYXRhIiwiX2NlbGxzIiwiY3Vyc29yIiwibmwiLCJudCIsIm9ubW91c2Vtb3ZlIiwibngiLCJueSIsIm9ubW91c2V1cCIsIlNwcmVhZHNoZWV0IiwibWV0aG9kcyIsImFsaWFzIiwicXVlcnlTZWxlY3RvciIsImxvY2FsZSIsInpoQ04iLCJEYXRhUHJveHkiLCJyb290RWwiLCJiZWxvbmdTaGVldCIsImxvYWREYXRhIiwiZXJyb3JzIiwiZ2V0Q2VsbEJ5RXhwciIsImRyYWciLCJidWdvdXQiLCJkZWZhdWx0U2V0dGluZ3MiLCJmbGV4aWJsZSIsIml0YWxpYyIsImNhblBhc3RlIiwiZHN0Iiwic3JuIiwic2NuIiwiZHJuIiwiZGNuIiwiY29weVBhc3RlIiwiZGVsZXRlQ2VsbHMiLCJkZWxldGVXaXRoaW4iLCJjbGVhcmQiLCJjbGlwYm9hcmQiLCJzZXRTdHlsZUJvcmRlciIsImJzcyIsImNzdHlsZSIsImFkZFN0eWxlIiwiZXZlbnRfdHlwZSIsImRlc2NyaXB0aW9uIiwiaXNMZWdhbCIsInByb2Nlc3NQYXN0ZURpcmVjdGlvbnNBcnIiLCJuZXdJdGVtIiwiY2xpY2tDb3B5UGFzdGVIZWxwIiwibGNpIiwibHJpIiwibGNlbGwiLCJzZXRTdHlsZUJvcmRlcnMiLCJpc1NpZ25sZVNlbGVjdGVkIiwibWVyZ2VJbmRleGVzIiwibXJsIiwibWNsIiwiZ2V0Q2VsbE1lcmdlIiwiZ2V0Q2VsbFJvd0J5WSIsInNjcm9sbE9mZnNldHkiLCJmcnNldCIsImdldENlbGxDb2xCeVgiLCJzY3JvbGxPZmZzZXR4IiwicmFuZ2VSZWR1Y2VJZiIsIm1ha2VGb3JtYXRDZWxsIiwic3ltYm9sIiwiY1RleHQiLCJnZXRUeXBlIiwiZ2V0Q2VsbFN0eWxlIiwiZGF0ZURpZmYiLCJnZXRDZWxsU3R5bGVDb252ZXJ0IiwiZm9ybWF0RGF0ZSIsImNoYW5nZUZvcm1hdCIsInVzZU9uZSIsIk1lcmdlcyIsIkNvbHMiLCJWYWxpZGF0aW9ucyIsImh5cGVybGlua3MiLCJjb21tZW50cyIsIkNhbGMiLCJtdWx0aVByZUFjdGlvbiIsIk11bHRpUHJlQWN0aW9uIiwiU2Nyb2xsIiwiQ2xpcGJvYXJkIiwibW92ZWQiLCJBdXRvRmlsdGVyIiwiTWFwIiwidW5zb3J0ZWRSb3dNYXAiLCJ2YWxpZGF0b3IiLCJjZWxsMiIsImNlbGwzIiwiZ2V0SXRlbXMiLCJleGVjQ29tbWFuZCIsImRzcmkiLCJkc2NpIiwiZGVmYXVsdFN0eWxlIiwicEFyciIsIm1ha2VDZWxsUHJvcEFyciIsInNldENlbGxCeUNlbGxQcm9wIiwicGFpbnRGb3JtYXQiLCJQYWludEZvcm1hdCIsInBhaW50VHlwZSIsImdldFBhaW50VHlwZSIsIm1ha2VQYWludEFyciIsInNyY1JhbmdlIiwidW5pb24iLCJnZXRGaXJzdEluY2x1ZGVzIiwidW5tZXJnZSIsIm5mb250IiwicmVzZXRBdXRvRmlsdGVyIiwiZ2V0U3RlcFR5cGUiLCJvYyIsIm5jIiwiYWRkU3RlcCIsImlzQ2xlYXIiLCJhdXRvRmlsdGVyUmVmIiwiYWRkRmlsdGVyIiwic2V0U29ydCIsImZpbHRlcmVkUm93cyIsImZzZXQiLCJmYXJ5Iiwib2xkQXJ5Iiwic2kiLCJpbnNlcnRDb2x1bW4iLCJyc2l6ZSIsImNzaXplIiwiZGVsZXRlQ29sdW1uIiwidmFsaWRhdGUiLCJmaWx0ZXJJbnRlcnNlY3RzIiwiZnJhcnkiLCJuc3R5bGUiLCJ1bmRvSXRlbXMiLCJsYXN0U3RlcCIsImNoYW5nZVRvSGlzdG9yeSIsImFkZEZpZXhSb3dzIiwiZmlsdGVycyIsImNhbGNXb3JrYm9va1Byb3h5IiwiY2FsY1Jvd3NQcm94eSIsIkNhbGNSb3dzUHJveHkiLCJpc1JlZnJlc2giLCJyb3dzMndvcmtib29rIiwidXBkYXRlZENlbGxBcnJheSIsImNhbGN1bGF0ZVdvcmtib29rIiwiY2FsY0RvbmVUb1NldENlbGxzIiwidXBkYXRlQnlXb3JrYm9va09iaiIsImZpbmRfYWxsX2NlbGxzX3dpdGhfZm9ybXVsYXMiLCJjYWxjdWxhdGVGb3JtdWxhcyIsIm5lZWRfY2FsY19jZWxscyIsInpiIiwiY2VsTmFtZSIsImZvcm11bGFTdHJpbmciLCJwYXJzZUNhbGNDZWxsIiwidXBkYXRlX2NlbGxfdmFsdWUiLCJ0b0FkZEZuT2JqIiwiZm5OYW1lIiwiaWdub3JlRHVwbGljYXRlIiwicHJlZml4IiwidG9BZGRGbk5hbWUiLCJjdXJGdW5jIiwiZXhwRnVuY3Rpb24iLCJyYXdGbkV4ZWN1dG9yIiwiVXNlclJhd0ZuRXhlY3V0b3IiLCJub3JtYWxGbkV4ZWN1dG9yIiwiVXNlckZuRXhlY3V0b3IiLCJmb3VuZEV4cEZuIiwiZ2V0RXhwRnVuY3Rpb24iLCJ1c2VyX2Z1bmN0aW9uIiwiYnVmZmVyIiwiVE9fUEFSQV9UWVBFIiwiZXhwX2ZuIiwiZXhwRm5QYXJhQ29uZmlnIiwicGFyYUNvbmZpZyIsImN1ckFyZyIsIm5ld1BhcmFzIiwic29sdmVkQXJncyIsInNvbHZlRXhwcmVzc2lvbiIsImN1clBhcmFDb25maWciLCJjb252ZXJ0Q2VsbFZhbHVlVHlwZSIsInRvVHlwZU5hbWUiLCJ0b0RhdGUiLCJnZXRQYXJhQXJyYXkiLCJlcnJDZiIsInJvb3QiLCJCRVRBRElTVCIsIkJFVEFJTlYiLCJCSU5PTURJU1QiLCJJU09DRUlMSU5HIiwiQ0VJTElOR01BVEgiLCJDRUlMSU5HUFJFQ0lTRSIsIkNISURJU1QiLCJDSElESVNUUlQiLCJDSElJTlYiLCJDSElJTlZSVCIsIkNISVRFU1QiLCJDT1ZBUiIsIkNPVkFSSUFOQ0VQIiwiQ09WQVJJQU5DRVMiLCJDUklUQklOT00iLCJFWFBPTkRJU1QiLCJFUkZDUFJFQ0lTRSIsImVuZ2luZWVyaW5nIiwiRVJGUFJFQ0lTRSIsIkZESVNUIiwiRkRJU1RSVCIsIkZJTlZSVCIsIkZJTlYiLCJGTE9PUlBSRUNJU0UiLCJGVEVTVCIsIkdBTU1BRElTVCIsIkdBTU1BSU5WIiwiR0FNTUFMTlBSRUNJU0UiLCJIWVBHRU9NRElTVCIsIkxPR0lOViIsIkxPR05PUk1JTlYiLCJMT0dOT1JNRElTVCIsIk1PREVNVUxUIiwiTU9ERVNOR0wiLCJORUdCSU5PTURJU1QiLCJkYXRlVGltZSIsIk5PUk1ESVNUIiwiTk9STUlOViIsIk5PUk1TRElTVCIsIk5PUk1TSU5WIiwiUEVSQ0VOVElMRUVYQyIsIlBFUkNFTlRJTEVJTkMiLCJQRVJDRU5UUkFOS0VYQyIsIlBFUkNFTlRSQU5LSU5DIiwiUE9JU1NPTkRJU1QiLCJRVUFSVElMRUVYQyIsIlFVQVJUSUxFSU5DIiwiUkFOS0FWRyIsIlJBTktFUSIsIlNLRVdQIiwiU1RERVZQIiwiU1RERVZTIiwiVERJU1QiLCJURElTVFJUIiwiVElOViIsIlRURVNUIiwiVkFSUCIsIlZBUlMiLCJXRUlCVUxMRElTVCIsIlpURVNUIiwiX1hMRk4iLCJkZWZhdWx0T3BlcmF0b3IiLCJ2YWxpZFN5bWJvbHMiLCJUT0tFTl9UWVBFX09QRVJBVE9SIiwiU1VQUE9SVEVEX1RPS0VOUyIsImFuYWx5emVUb2tlbnMiLCJsaXRlcmFsVmFsdWUiLCJhbmFseXplZFRva2VucyIsInRva2VuIiwidW5zaGlmdCIsImV4cHJlc3Npb24iLCJleHByZXNzaW9uTGVuZ3RoIiwiY3Vyc29ySW5kZXgiLCJwcm9jZXNzZWRWYWx1ZSIsInByb2Nlc3NlZFN5bWJvbCIsInRva2VuaXplRXhwcmVzc2lvbiIsImV2YWx1YXRlIiwiY29tcGFjdCIsImZpbmRfcmVzdWx0X2lkeCIsImRhdGFiYXNlIiwidmFsaWRfYXJyIiwiZmlsdGVyX2FyciIsInZhbGlkX3N0ciIsInJlc3VsdF9pZHgiLCJpc192YWxpZCIsImdldF92YWx1ZXMiLCJyZXN1bHRJbmRleGVzIiwiZmllbGQiLCJmaWVsZF9pZHgiLCJGSU5ERklFTEQiLCJEQVZFUkFHRSIsInRhcmdldFZhbHVlcyIsIkRDT1VOVCIsInN0YXRzIiwiRENPVU5UQSIsIkRHRVQiLCJETUFYIiwiRE1JTiIsIkRQUk9EVUNUIiwiRFNUREVWIiwiRFNUREVWUCIsIkRTVU0iLCJtYXRocyIsIkRWQVIiLCJEVkFSUCIsIkFORCIsIkNIT09TRSIsIkZBTFNFIiwiSUYiLCJ0aGVuX3ZhbHVlIiwib3RoZXJ3aXNlX3ZhbHVlIiwiSUZFUlJPUiIsInZhbHVlSWZFcnJvciIsIklGTkEiLCJ2YWx1ZV9pZl9uYSIsIk5PVCIsImxvZ2ljYWwiLCJPUiIsIlRSVUUiLCJYT1IiLCJTV0lUQ0giLCJ0YXJnZXRWYWx1ZSIsImFyZ2MiLCJzd2l0Y2hDb3VudCIsInN3aXRjaFNhdGlzZmllZCIsImRlZmF1bHRDbGF1c2UiLCJ2YWxpZERhdGUiLCJnZXRfZGF5cyIsInNldHRsZW1lbnQiLCJtYXR1cml0eSIsImZyZXF1ZW5jeSIsInNldHRsZW1lbnREYXRlIiwibWF0dXJpdHlEYXRlIiwibW9udGhfU00iLCJlbmRkYXkiLCJzdGFydGRheSIsImdldF90b3RhbCIsImNvc3QiLCJzYWx2YWdlIiwicGVyaW9kIiwibGlmZSIsImZhY3RvciIsIkFDQ1JJTlQiLCJyYXRlIiwicGFyIiwiQUNDUklOVE0iLCJBTU9SREVHUkMiLCJkYXRlX3B1cmNoYXNlZCIsImZpcnN0X3BlcmlvZCIsIkFNT1JMSU5DIiwiQ09VUERBWUJTIiwiQ09VUERBWVMiLCJDT1VQREFZU05DIiwiQ09VUE5DRCIsIkNPVVBOVU0iLCJDT1VQUENEIiwiQ1VNSVBNVCIsInBlcmlvZHMiLCJwYXltZW50IiwiUE1UIiwiaW50ZXJlc3QiLCJGViIsIkNVTVBSSU5DIiwicHJpbmNpcGFsIiwiREIiLCJjdXJyZW50IiwiY2VpbGluZyIsIkREQiIsIkRJU0MiLCJwciIsInJlZGVtcHRpb24iLCJET0xMQVJERSIsImZyYWN0aW9uIiwiTE4yIiwiRE9MTEFSRlIiLCJEVVJBVElPTiIsImNvdXBvbiIsInlsZCIsIkVGRkVDVCIsInRlcm0iLCJGVlNDSEVEVUxFIiwic2NoZWR1bGUiLCJmdXR1cmUiLCJJTlRSQVRFIiwiaW52ZXN0bWVudCIsIklQTVQiLCJwcmVzZW50IiwiSVJSIiwiZ3Vlc3MiLCJpcnJSZXN1bHQiLCJkYXRlcyIsImlyclJlc3VsdERlcml2IiwiZnJhYyIsInBvc2l0aXZlIiwibmV3UmF0ZSIsImVwc1JhdGUiLCJyZXN1bHRWYWx1ZSIsInJlc3VsdFJhdGUiLCJjb250TG9vcCIsIklTUE1UIiwiTURVUkFUSU9OIiwiTUlSUiIsImZpbmFuY2VfcmF0ZSIsInJlaW52ZXN0X3JhdGUiLCJwYXltZW50cyIsImluY29tZXMiLCJOUFYiLCJOT01JTkFMIiwiTlBFUiIsIk9EREZQUklDRSIsIk9EREZZSUVMRCIsIk9ERExQUklDRSIsIk9ERExZSUVMRCIsIlBEVVJBVElPTiIsIlBQTVQiLCJQUklDRSIsIkRTQyIsIlBQQVJUMSIsIlBQQVJUMiIsIlBSSUNFRElTQyIsImRpc2NvdW50IiwiUFJJQ0VNQVQiLCJkc20iLCJQViIsIlJBVEUiLCJpdGVyIiwiY2xvc2UiLCJOYU4iLCJSRUNFSVZFRCIsIlJSSSIsIlNMTiIsIlNZRCIsIlRCSUxMRVEiLCJUQklMTFBSSUNFIiwiVEJJTExZSUVMRCIsInByaWNlIiwiVkRCIiwiU3RhcnRfcGVyaW9kIiwiRW5kX3BlcmlvZCIsIk5vX3N3aXRjaCIsImZhY3Rvck51bSIsImNvc3ROdW0iLCJzYWx2YWdlTnVtIiwibGlmZU51bSIsIlN0YXJ0X3BlcmlvZE51bSIsIkVuZF9wZXJpb2ROdW0iLCJYSVJSIiwiWE5QViIsIllJRUxEIiwiWUlFTERESVNDIiwiWUlFTERNQVQiLCJGQUNUT1JJQUwiLCJtYXRjaF9sZXNzX3RoYW5fb3JfZXF1YWwiLCJsb29rdXBWYWx1ZSIsImluZGV4VmFsdWUiLCJtYXRjaF9leGFjdGx5X3N0cmluZyIsIm1hdGNoX2V4YWN0bHlfbm9uX3N0cmluZyIsIm1hdGNoX2dyZWF0ZXJfdGhhbl9vcl9lcXVhbCIsIk1BVENIIiwibWF0Y2hUeXBlIiwiVkxPT0tVUCIsInJldHVybl9pbmRleCIsIkhMT09LVVAiLCJuZWVkbGUiLCJleGFjdG1hdGNoIiwiQ2l0eSIsInVybCIsIlBRVUVSWSIsImFic0FyciIsInZhbDEiLCJ2YWwyIiwiYTQiLCJjaXR5IiwiYXJlYSIsIkhZUEVSTElOSyIsImxpYW5qaWEiLCJsaWFuSmlhVXJsIiwid29haXdvamlhIiwid29haXdvamlhVXJsIiwiZmFuZ3RpYW54aWEiLCJmYW5ndGlhbnhpYVVybCIsImNlbGxfcmVmIiwiY29sdW1ucyIsInJlZl92YWx1ZSIsInBhcnNlZF9yZWYiLCJlbmRfcmFuZ2UiLCJvbmVycm9ydmFsdWUiLCJJbmZpbml0eSIsImNvbmRpdGlvbiIsIl90aGVuIiwiX2Vsc2UiLCJwYXJzZUFycmF5IiwiRGF0ZVRpbWVQYXJzZXIiLCJyb290RXhwIiwiU2ltcGxlRXhwcmVzc2lvbiIsInBhcnNlRXhwcmVzc2lvbiIsIkVtcHR5Tm9kZSIsInN0clRvUGFyc2UiLCJleHBTdGF0dXMiLCJwYXJzZXJBcnJheSIsImVycm9yTXNnIiwiYXN0Tm9kZSIsImZuUGFyYW1BcnJheSIsImV4cFNvbHV0aW9uIiwicmVzIiwicGFyc2VyQ2xzIiwicGFyc2VTdHJpbmciLCJpc0VtcHR5IiwiaXNOb2RlRW1wdHkiLCJzb2x2ZWRQYXJhbUFycmF5Iiwic29sdmVkQXJyYXkiLCJmblBhcmFtIiwic29sdmVOb2RlIiwicmVzRXhwIiwiZmlyc3RDb2xvblBzdCIsIk1BUktfT0JKIiwiZGVhbFNwYWNlIiwibXVsdGlDb2xsRm4iLCJleHBfb2JqIiwicm9vdF9leHAiLCJTdHJ1Y3R1cmFsRXhwIiwid2FzX3N0cmluZyIsImZuX3N0YWNrIiwiZGVhbDFDaGFyIiwicHVzaDJFeHBBcmdzIiwic3RydWN0dXJhbEV4cCIsInRyaW1fYnVmZmVyIiwic3BlY2lhbCIsImdldEZuRXhlY3V0b3JCeU5hbWUiLCJzdGFjayIsInNpbmdsZV9xdW90ZSIsImluaV9wYXJlbnRoZXNlcyIsImVuZF9wYXJlbnRoZXNlcyIsImNvbW1vbl9vcGVyYXRpb25zIiwiYWRkX29wZXJhdGlvbiIsInRvUGFyc2VTdHIiLCJleHBfaWQiLCJpZCIsImxhc3RfYXJnIiwiY3VyQ2VsbE9iaiIsImlzQ29udmVydERhdGVUb051bWJlciIsImhhc0NhbGNNZXRob2QiLCJjb252ZXJ0RGF0ZVRvTnVtYmVyIiwiZXhlY0NhbGNNZXRob2QiLCJhZGRDYWxjQ2VsbCIsImRlYWxBbGxSZWZWYWx1ZSIsImV4ZWNfbWludXMiLCJleGVjX3BsdXMiLCJleGVBbGxUd29BcmdPcGVyYXRvciIsImNhbGNMYXN0QXJnIiwiZXhlY09wZXJhdG9yV2l0aDJBcmdzIiwiYXN0Tm9kZVN0ciIsInN0cl8yX3ZhbCIsIkZpbHRlciIsIlNvcnQiLCJmaXRsZXJzIiwicmlyIiwiaXgiLCJjaWMiLCJjdGV4dCIsInZhbHVlT2YiLCJjciIsIndpdGhpbiIsImNiV2l0aGluIiwiaXQxIiwiZGVyaSIsImRlY2kiLCJnZXRSYW5nZUJ5V2F5Iiwid2F5IiwibGFzdDIiLCJzb3VyY2VfdiIsIlZhbGlkYXRpb24iLCJucmVmcyIsImRpZmZlcmVuY2UiLCJyZXF1aXJlZCIsIlZhbGlkYXRvciIsImdldEJ5VmFsaWRhdG9yIiwiYWRkUmVmIiwicnVsZXMiLCJwaG9uZSIsImVtYWlsIiwicmV0dXJuTWVzc2FnZSIsImFycmF5RXF1YWxzIiwicGFyc2VWYWx1ZSIsInBhaW50Zm9ybWF0IiwiY2xlYXJmb3JtYXQiLCJmb250Qm9sZCIsImZvbnRJdGFsaWMiLCJ0ZXh0Q29sb3IiLCJmaWxsQ29sb3IiLCJtb3JlIiwiY29tZUJhY2siLCJjb250ZXh0bWVudSIsInBhc3RlVmFsdWUiLCJwYXN0ZUZvcm1hdCIsImluc2VydFJvdyIsImRlbGV0ZVJvdyIsImRlbGV0ZUNlbGxUZXh0IiwidmFsaWRhdGlvbiIsInJlY292ZXIiLCJ1c2QiLCJkYXRldGltZSIsImR1cmF0aW9uIiwiZGF0ZV9mb3JtdWxhIiwid2xhbmQiLCJ3ZnIiLCJydGQiLCJub3RNYXRjaCIsImJldHdlZW4iLCJub3RCZXR3ZWVuIiwibm90SW4iLCJsZXNzVGhhbiIsImxlc3NUaGFuRXF1YWwiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuRXF1YWwiLCJwYXN0ZUZvck1lcmdlZENlbGwiLCJjYWxlbmRhciIsIndlZWtzIiwiY2FuY2VsIiwiZGVzYyIsImFzYyIsImRhdGFWYWxpZGF0aW9uIiwibW9kZVR5cGUiLCJjb2x1bW4iLCJsaXN0IiwiYmUiLCJuYmUiLCJsdCIsImx0ZSIsImd0IiwiZ3RlIiwiZXEiLCJuZXEiLCJ2ZXJ0aWNhbCIsIm1pbkRpc3RhbmNlIiwiaG92ZXJFbCIsIm1vdXNlZG93bkhhbmRsZXIiLCJsaW5lRWwiLCJzdGFydEV2dCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImNvbnRlbnREaXN0YW5jZSIsImNzc0tleSIsImluY2x1ZGVCeVJpQ2kiLCJzZWxlY3RvckhlaWdodEJvcmRlcldpZHRoIiwicmVzZXRUZXh0YXJlYVNpemUiLCJ0ZXh0bGluZUVsIiwidGV4dEVsIiwidGxpbmVXaWR0aCIsIm1heFdpZHRoIiwidmlld0ZuIiwiaDEiLCJnZXRDdXJzb3J0UG9zaXRpb24iLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsInByZVNlbGVjdGlvblJhbmdlIiwiY2xvbmVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJmaW5kQnJhY2tldCIsInNwYW5MZWZ0Iiwic3BhblJpZ2h0Iiwic3VnZ2VzdCIsInNldF9mb2N1cyIsInNhdmVkU2VsIiwiY2hhckluZGV4IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsImNvbGxhcHNlIiwibm9kZVN0YWNrIiwiZm91bmRTdGFydCIsIm5vZGVUeXBlIiwibmV4dENoYXJJbmRleCIsInNlbCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwibW91c2VEb3duRXZlbnRIYW5kbGVyIiwicGFyc2UyIiwiaXNEaXNwbGF5IiwiaW5wdXRFdmVudEhhbmRsZXIiLCJpbnB1dFR5cGUiLCJjaGluZXNlIiwibm9kZVZhbHVlIiwiY2hhbmdlZCIsImNoYW5nZVRleHQiLCJjdXRWYWx1ZSIsImN1dHRpbmdCeVBvczIiLCJjdXR0aW5nQnlQb3NFbmQiLCJrZXlEb3duRXZlbnRIYW5kbGVyIiwib3BhY2l0eSIsInNldFRleHRhcmVhUmFuZ2UiLCJibHVyIiwic3VnZ2VzdEl0ZW1DbGljayIsInJlc2V0U3VnZ2VzdENvbnRlbnRJdGVtcyIsInJlc2V0U3VnZ2VzdEl0ZW1zIiwic2V0SXRlbXMiLCJTdWdnZXN0Q29udGVudCIsImRhdGVwaWNrZXIiLCJEYXRlcGlja2VyIiwiZGF0ZUZvcm1hdCIsIkVkaXRvclRleHQiLCJnZXRTZWxlY3RlZENlbGxSaUNpIiwiY3VycmVudFRhcmdldCIsImtleV9udW0iLCJmNFNob3J0Y3V0S2V5IiwiYmluZElucHV0RXZlbnRzIiwiY2xwIiwib3JpZ2luYWxFdmVudCIsIm5ld05vZGUiLCJpbnNlcnROb2RlIiwic2VsZWN0aW9uIiwicGFzdGVIVE1MIiwidGV4dEZvcm1hdCIsIm9mZiIsImZvY3VzIiwiaW5zZXJ0QmVmb3JlIiwiY3Vyc29yUG9zIiwidGV4dEJlZ2luIiwidGV4dEVuZCIsInN1Z2dlc3RQb3NpdGlvbiIsImVsT2Zmc2V0IiwiQ2FsZW5kYXIiLCJjYWxlbmRhclBhdHRlcm4iLCJzZWxlY3RDaGFuZ2UiLCJhZGRNb250aCIsIndlZWtkYXkiLCJjdmFsdWUiLCJoZWFkZXJMZWZ0RWwiLCJib2R5RWwiLCJidWlsZEFsbCIsInByZXYiLCJuZXh0Iiwid2VlayIsImJ1aWxkSGVhZGVyTGVmdCIsImJ1aWxkQm9keSIsInRycyIsImNkYXRlIiwic3RhcnREYXRlIiwiZGF0ZXNzIiwiZGlzYWJsZWQiLCJtb250aERheXMiLCJ0ZHMiLCJ2YXJpYWJsZUVsZW1lbnQiLCJjdCIsImhlbHBGb3JtdWxhIiwiZXhhbXBsZU5hbWUiLCJleGFtcGxlIiwiaXRlbTIiLCJmaW5kIiwiY2hhIiwiU2VsZWN0b3JNb3ZlIiwiX21vdmVfc2VsZWN0b3JzIiwiX2VycHgiLCJlcm4iLCJlY24iLCJkaWN0IiwibXNyaSIsIm1zY2kiLCJtZXJpIiwibWVjaSIsIm1vdmUyIiwiY3V0dGluZ0J5UG9zRW5kMiIsInRleHRfYiIsIm9wZXJhdG9yU3RhY2siLCJzdWJTdHJzIiwiZm5BcmdUeXBlIiwiZm5BcmdzTGVuIiwiYzEiLCJzeCIsInJhbmdlbGVuIiwiZXZhbEZvcm11bGEiLCJjZWxsUmVuZGVyIiwic2hlZXRib29rIiwiZm9ybXVsYU1hcCIsImdldENlbGxUZXh0IiwibG9vazIiLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwibnB4TGluZSIsImRyYXdGbGV4RmFsc2UiLCJjdHgiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJzdHJva2VSZWN0IiwiY2xpcCIsImZpbGwiLCJkcmF3RmxleFRydWUiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJob2Zmc2V0IiwiZHJhd0ZvbnRMaW5lIiwiYmxoZWlnaHQiLCJibHdpZHRoIiwiZmxvZmZzZXQiLCJnZXRDb250ZXh0Iiwic2NhbGUiLCJjeGMiLCJpbmRlbnQiLCJ2SW5kZW50IiwiY2FudmFzQ29udGV4dCIsInRleHRMaW5lIiwiaW5uZXJXaWR0aCIsInNlbGZBZGFwdGlvbk9uZVR4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJ0ZXh0V3JhcCIsInRleHR4IiwidGV4dHkiLCJzZXRMaW5lRGFzaCIsInRvcHh5cyIsInJpZ2h0eHlzIiwiYm90dG9teHlzIiwibGVmdHh5cyIsImNsb3NlUGF0aCIsImR0ZXh0Y2IiLCJtZW51SXRlbXMiLCJidWlsZE1lbnVJdGVtIiwiYnVpbGRNZW51IiwiaXNIaWRlIiwibWVudXMiLCJidWlsZEJ1dHRvbiIsInRvb2x0aXBkYXRhIiwiYnVpbGREaXZpZGVyIiwiYnVpbGRCdXR0b25XaXRoSWNvbiIsImJpbmREcm9wZG93bkNoYW5nZSIsImRkRm9ybWF0IiwiZGRGb250IiwiZGRGb250U2l6ZSIsImRkVGV4dENvbG9yIiwiZGRGaWxsQ29sb3IiLCJkZEFsaWduIiwiZGRWQWxpZ24iLCJkZEJvcmRlciIsInVuZG9FbCIsInRvZ2dsZUNoYW5nZSIsImVsTmFtZSIsInR5cGVzIiwiaGFzQ2xhc3MiLCJEcm9wZG93bk1vcmUiLCJtb3JlQnRucyIsImluaXRCdG5zMiIsImJ0bnMyIiwiYnRuQ2hpbGRyZW4iLCJjb21wdXRlZFN0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibW9yZVJlc2l6ZSIsIndpZHRoRm4iLCJidG5zIiwibW9yZUVsIiwiZGRNb3JlIiwiZWxCb3giLCJzdW1XaWR0aDIiLCJsaXN0MSIsImxpc3QyIiwiRHJvcGRvd25Gb3JtYXQiLCJEcm9wZG93bkZvbnQiLCJEcm9wZG93bkZvbnRTaXplIiwiRHJvcGRvd25BbGlnbiIsIkRyb3Bkb3duQm9yZGVyIiwiRHJvcGRvd25BY3Rpb24iLCJyZWRvRWwiLCJwYWludGZvcm1hdEVsIiwiZm9udEJvbGRFbCIsImZvbnRJdGFsaWNFbCIsInVuZGVybGluZUVsIiwic3RyaWtlRWwiLCJtZXJnZUVsIiwidGV4dHdyYXBFbCIsImZyZWV6ZUVsIiwiYWRkRWwiLCJjbG9zZUVsIiwiYXV0b2ZpbHRlckVsIiwidGhyb3dGb3JtdWxhRWwiLCJnZXRTZWxlY3RlZENlbGxTdHlsZSIsImNhblVuZG8iLCJjYW5SZWRvIiwiY2FuVW5tZXJnZSIsImNhbkF1dG9maWx0ZXIiLCJlcXVhdGlvbklzQWN0aXZlIiwiZnJlZXplSXNBY3RpdmUiLCJuZm9udHMiLCJiYXNlRm9udHMiLCJuZm9udFNpemVzIiwibmZvcm1hdHMiLCJEcm9wZG93bkZvcm11bGEiLCJuZm9ybXVsYXMiLCJhbGlnbnMiLCJuYWxpZ25zIiwic2V0TmFtZSIsImJvcmRlclBhbGV0dGUiLCJCb3JkZXJQYWxldHRlIiwiYnVpbGRUYWJsZSIsImRkQ29sb3IiLCJkZFR5cGUiLCJEcm9wZG93bkxpbmVUeXBlIiwibGluZVR5cGVzIiwiYmVmb3JlaSIsImxpbmVUeXBlRWxzIiwiaXRpIiwiSGlzdG9yeUJvcmRlciIsImVscyIsImZpZWxkTGFiZWxXaWR0aCIsIm1mIiwiRm9ybUZpZWxkIiwiRm9ybVNlbGVjdCIsInJmIiwiRm9ybUlucHV0IiwicGF0dGVybiIsImNyaXRlcmlhU2VsZWN0ZWQiLCJvZiIsImNyaXRlcmlhT3BlcmF0b3JTZWxlY3RlZCIsIm1pbnZmIiwibWF4dmYiLCJzdmYiLCJ2ZiIsImJ0bkNsaWNrIiwiaGludCIsImF0dHJzIiwiaXNTaG93IiwidmNoYW5nZSIsImdldFRpdGxlIiwiaXRlbUVsIiwicGF0dGVybnMiLCJsYWJlbFdpZHRoIiwidGlwIiwiY2xzTmFtZSIsImJ1aWxkU29ydEl0ZW0iLCJidWlsZEZpbHRlckJvZHkiLCJmaWx0ZXJiRWwiLCJmaWx0ZXJWYWx1ZXMiLCJjbnQiLCJmaWx0ZXJDbGljayIsInJlc2V0RmlsdGVySGVhZGVyIiwiZmlsdGVyaEVsIiwiY2hlY2tlZCIsInRpbmRleCIsInNvcnRBc2NFbCIsInNvcnREZXNjRWwiLCJzb3J0RGVzYyIsImZpbmRJbmRleCIsInNhdmVDaGVjayIsInRleHRDaGVjayIsInRpbWVyMiIsImlzRGlzcGxheTIiLCJ0ZDIiLCJ0ZDMiLCJ0ZDQiLCJ0ZDUiLCJpc1NwZWNpYWxXZWJzaXRlIiwic2NyZWVuWCIsInNjcmVlblkiLCJtYyIsInRhaWxBcnIiLCJwb3NpdGlvbkFuZ2xlIiwiY2xlYXJJbnRlcnZhbCIsImRpcmVjdGlvbnMiLCJvbm1vdXNlZG93biIsIm94Iiwib3kiLCJvdyIsIm9oIiwib2wiLCJvdCIsImlzUmVzaXplIiwiZnVuIiwibWFwcGVycyIsImVlIiwic2V0TGVmdCIsInNldFRvcCIsInNlIiwibnciLCJ3cyIsIm5lIiwiZm9udFdlaWdodCIsImJhY2tncm91bmQiLCJjb2xMZW4iLCJkZWZhdWx0VmlldyIsImlzSGF2ZVN0eWxlIiwibWF4UmkiLCJtYXhDaSIsInJpaSIsImNpaiIsImNhbGNEZWNpbWFscyIsImJlZ2luRGF0ZSIsImJlZ2luRGF0ZTIiLCJkYXRlUGF0dGVybiIsImZpeCIsIm9wZXJhdGlvbkl0ZW0iLCJyZWRvSXRlbXMiLCJleHByMSIsImV4cHIyIiwiZG9lcyIsImFjdGlvbkl0ZW1zIiwiYWN0aW9uVHlwZSIsInNlbGVjdG9yUmFuZ2UiLCJkc3RSYW5nZSIsImRUeXBlIiwic1R5cGUiLCJyZWNvcmRSaSIsInJvd0luZGV4IiwiX2RhcnIiLCJjaGFuZ2VEYXJyVG9Eb3VibGVBcnIiLCJyZXZpc2lvbiIsImRlYnVnb3V0IiwicmVhbFRpbWVMb2dnaW5nT24iLCJ1c2VUaW1lc3RhbXBzIiwidXNlTG9jYWxTdG9yYWdlIiwicmVjb3JkTG9ncyIsImF1dG9UcmltIiwibWF4TGluZXMiLCJ0YWlsTnVtTGluZXMiLCJsb2dGaWxlbmFtZSIsImRlcHRoIiwicGFyZW50U2l6ZXMiLCJjdXJyZW50UmVzdWx0Iiwic3RhcnRUaW1lIiwib3V0cHV0IiwidmVyc2lvbiIsImdldExvZyIsInJldHJpZXZhbFRpbWUiLCJzYXZlZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJsYXN0TG9nIiwiZm9ybWF0U2Vzc2lvbkR1cmF0aW9uIiwidGFpbCIsIm51bUxpbmVzIiwidGFpbExpbmVzIiwidHJpbUxvZyIsImxpbmVzIiwicmd4IiwibWF0Y2hlZCIsImFkZHIiLCJnZXRTbGljZSIsImxpbmVOdW1iZXIiLCJkb3dubG9hZExvZyIsImZpbGUiLCJsb2dGaWxlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaHJlZiIsImRvd25sb2FkIiwiY2xlYXJUaW1lIiwic2F2ZU9iamVjdCIsInNldEl0ZW0iLCJkZXRlcm1pbmVUeXBlIiwiYWRkaXRpb24iLCJsb2dUaW1lIiwiZm9ybWF0VGltZXN0YW1wIiwidHlwZVJlc3VsdCIsImZvcm1hdFR5cGUiLCJvYmplY3RTaXplIiwicHJvcCIsImluZGVudHNGb3JEZXB0aCIsInN1YnR5cGUiLCJzdWJyZXN1bHQiLCJlbmRUaW1lIiwibXNlYyIsImhoIiwiaHJzIiwibW0iLCJtaW5zIiwic3MiLCJ0aW1lc3RhbXAiLCJnZXRNaW51dGVzIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxFQUFJLEVBQUdDLEVBQVcsR0FDcENELEVBQUlILEVBQVNLLE9BQVFGLElBQ3pCSixFQUFVQyxFQUFTRyxHQUNoQkcsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBaUJYLElBQVlXLEVBQWdCWCxJQUNwRkssRUFBU08sS0FBS0QsRUFBZ0JYLEdBQVMsSUFFeENXLEVBQWdCWCxHQUFXLEVBRTVCLElBQUlELEtBQVlHLEVBQ1pLLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtSLEVBQWFILEtBQ3BEYyxFQUFRZCxHQUFZRyxFQUFZSCxJQUtsQyxJQUZHZSxHQUFxQkEsRUFBb0JoQixHQUV0Q08sRUFBU0MsUUFDZEQsRUFBU1UsT0FBVFYsR0FPRCxPQUhBVyxFQUFnQkosS0FBS0ssTUFBTUQsRUFBaUJiLEdBQWtCLElBR3ZEZSxJQUVSLFNBQVNB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QUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsc0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGdDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyx1Q0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGdDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBRS9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssTUFBTyxFQUFHLGlDQUNoQ1UsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxxQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGdDQUUvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBRS9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLHNDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLHFDQUUvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxxQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FB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QUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxvQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGdDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBRS9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxtQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLHNDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxzQ0FFL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLHFDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBRS9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FFL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGtDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLE9BQVEsRUFBRyx1Q0FFakNVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGdDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsb0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLGdDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0UsRUFBSyxLQUFNLEVBQUcsZ0NBQy9CVSxFQUFReDRFLEtBQUssSUFBSTgzRSxFQUFLLEtBQU0sRUFBRyxnQ0FDL0JVLEVBQVF4NEUsS0FBSyxJQUFJODNFLEVBQUssS0FBTSxFQUFHLHFDQUMvQlUsRUFBUXg0RSxLQUFLLElBQUk4M0Us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Q1gsTUFBUyxDQUNMLENBQ0ksS0FBUSxlQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FFSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxlQUNSLFFBQVUsRUFFVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLGVBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLHlCQUNaLE1BQVMsV0FDVCxNQUFTLDRCQUdqQixJQUFPLENBQ0gsTUFBUyxDQUNMLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsT0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxL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SUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksZ0JBQ1osTUFBUyxTQUNULE1BQVMsV0FDVCxNQUFTLGtDQUNULEtBQVEsV0FDUixNQUFTLHFDQUNULFVBQWEsdUVBR3JCLFNBQVksQ0FDUixNQUFTLENBQ0wsQ0FDSSxLQUFRLFlBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVkscUJBQ1osTUFBUyxTQUNULE1BQVMsU0FDVCxLQUFRLFdBQ1IsTUFBUyx3Q0FHakIsS0FBUSxDQUNKLE1BQVMsQ0FDTCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxZQUNaLE9BQVUsNEJBR2xCLE1BQVMsQ0FDTCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksc0JBQ1osT0FBVSxpQkFHbEIsS0FBUSxDQUNKLE1BQVMsQ0FDTCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxlQUNaLE9BQVUsOEJBR2xCLE1BQVMsQ0FDTCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksY0FDWixPQUFVLHNCQUdsQixVQUFhLENBQ1QsTUFBUyxDQUNMLENBQ0ksS0FBUSxhQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxhQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksZUFDWixPQUFVLE9BQ1YsTUFBUyxVQUNULE1BQVMsY0FDVCxPQUFVLGdCQUNWLE9BQVUsS0FDVixpQkFBb0IsUUFHNUIsU0FBWSxDQUNSLE1BQVMsQ0FDTCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQs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S0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEVBQ1YsTUFBUyxJQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxZQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEVBQ1YsTUFBUyxJQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksb0NBQ1osT0FBVSxpQkFDVixPQUFVLE9BQ1YsT0FBVSxPQUNWLFNBQVksZ0JBQ1osUUFBVyxrQkFHbkIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsVUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxlQUNaLE1BQVMsY0FHakIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksZ0JBQ1osT0FBVSxZQUNWLE9BQVUsWUFHbEIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksZUFDWixPQUFVLFlBQ1YsT0FBVSxZQUdsQixhQUFjLENBQ1YsTUFBUyxDQUNMLENBQ0ksS0FBUSxjQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLGNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElB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QUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksZ0JBQ1osT0FBVSxXQUNWLE9BQVUsV0FHbEIsT0FBVSxDQUNOLE1BQVMsQ0FDTCxDQUNJLEtBQVEsVUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFVBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksb0JBQ1osT0FBVSxlQUNWLE9BQVUsV0FHbEIsYUFBYyxDQUNWLE1BQVMsQ0FDTCxDQUNJLEtBQVEsY0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsY0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdB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SSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxrQkFDWixNQUFTLFNBQ1QsTUFBUyxTQUNULE1BQVMsa0RBR2pCLFNBQVksQ0FDUixNQUFTLENBQ0wsQ0FDSSxLQUFRLFlBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFlBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxpQkFDWixNQUFTLFNBQ1QsTUFBUyxTQUNULE1BQVMsa0RBR2pCLFdBQWMsQ0FDVixNQUFTLENBQ0wsQ0FDSSxLQUFRLGNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLGNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxvQkFDWixNQUFTLFNBQ1QsTUFBUyxTQUNULE1BQVMsa0RBR2pCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFVBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFVBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSx3QkFDWixNQUFTLFNBQ1QsTUFBUyxTQUNULE1BQVMsa0RBR2pCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FD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QVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksbUJBQ1osTUFBUyxnQkFHakIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLHlDQUNaLE9BQVUsS0FDVixPQUFVLFFBQ1YsT0FBVSxLQUNWLE9BQVUsdUJBQ1YsT0FBVSxTQUNWLE9BQVUsV0FHbEIsU0FBWSxDQUNSLE1BQVMsQ0FDTCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLG1EQUNaLE9BQVUsS0FDVixPQUFVLFFBQ1YsT0FBVSxLQUNWLE9BQVUsdUJBQ1YsT0FBVSxTQUNWLE9BQVUsV0FHbEIsS0FBUSxDQUNKLE1BQVMsQ0FDTCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElB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Q0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLE9BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLG9DQUNaLE9BQVUsT0FDVixPQUFVLGdDQUNWLE9BQVUsVUFDVixPQUFVLGFBQ1YsT0FBVSxXQUdsQixRQUFXLENBQ1AsTUFBUyxDQUNMLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxL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RWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxZQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLDhCQUNaLE1BQVMsV0FDVCxNQUFTLFdBQ1QsT0FBVSxhQUNWLFdBQWMsWUFDZCxVQUFhLFVBR3JCLEtBQVEsQ0FDSixNQUFTLENBQ0wsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtB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USxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxrQ0FDWixPQUFVLDJCQUNWLE9BQVUsa0NBR2xCLEdBQU0sQ0FDRixNQUFTLENBQ0wsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxtQkFDWixPQUFVLE9BQ1YsT0FBVSxXQUNWLE9BQVUsd0JBQ1YsT0FBVSw2Q0FDVixPQUFVLHNEQUdsQixXQUFjLENBQ1YsTUFBUyxDQUNMLENBQ0ksS0FBUSxjQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsY0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsa0JBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksd0JBQ1osTUFBUyxLQUNULE1BQVMsYUFHakIsTUFBUyxDQUNMLE1BQVMsQ0FDTCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxlQUNaLE1BQVMsV0FHakIsYUFBYyxDQUNWLE1BQVMsQ0FDTCxDQUNJLEtBQVEsY0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxjQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdB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LEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLGdCQUNaLE9BQVUsWUFDVixPQUFVLFlBR2xCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxPQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSx1Q0FDWixPQUFVLGdCQUNWLE9BQVUsY0FDVixPQUFVLG9CQUNWLE9BQVUsc0NBR2xCLEtBQVEsQ0FDSixNQUFTLENBQ0wsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtB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ZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksNkJBQ1osT0FBVSxPQUNWLE9BQVUsd0JBQ1YsT0FBVSxzQkFDVixPQUFVLHlCQUNWLE9BQVUsaUNBR2xCLElBQU8sQ0FDSCxNQUFTLENBQ0wsQ0FDSSxLQUFRLE9BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJ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VUFBYSxDQUNULE1BQVMsQ0FDTCxDQUNJLEtBQVEsYUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsYUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLG9DQUNaLE1BQVMsV0FDVCxNQUFTLFdBQ1QsTUFBUyxXQUNULE1BQVMsYUFDVCxPQUFVLFVBQ1YsT0FBVSxZQUNWLE9BQVUscUJBQ1YsT0FBVSxVQUdsQixVQUFhLENBQ1QsTUFBUyxDQUNMLENBQ0ksS0FBUSxhQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxhQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksb0NBQ1osTUFBUyxXQUNULE1BQVMsV0FDVCxNQUFTLFdBQ1QsTUFBUyxhQUNULE9BQVUsVUFDVixPQUFVLFVBQ1YsT0FBVSxxQkFDVixPQUFVLFVBR2xCLFVBQWEsQ0FDVCxNQUFTLENBQ0wsQ0FDSSxLQUFRLGFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsYUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVkscUNBQ1osTUFBUyxXQUNULE1BQVMsV0FDVCxNQUFTLGFBQ1QsT0FBVSxVQUNWLE9BQVUsWUFDVixPQUFVLHFCQUNWLE9BQVUsVUFHbEIsVUFBYSxDQUNULE1BQVMsQ0FDTCxDQUNJLEtBQVEsYUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxhQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxxQ0FDWixNQUFTLFdBQ1QsTUFBUyxXQUNULE1BQVMsYUFDVCxPQUFVLFVBQ1YsT0FBVSxVQUNWLE9B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QUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSwwQkFDWixNQUFTLFdBQ1QsTUFBUyxXQUNULE9BQVUsYUFDVixPQUFVLFlBQ1YsT0FBVSxxQkFDVixPQUFVLFVBR2xCLFVBQWEsQ0FDVCxNQUFTLENBQ0wsQ0FDSSxLQUFRLGFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsYUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksMEJBQ1osTUFBUyxXQUNULE1BQVMsV0FDVCxPQUFVLFdBQ1YsT0FBVSx1QkFHbEIsU0FBWSxDQUNSLE1BQVMsQ0FDTCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLDBCQUNaLE1BQVMsV0FDVCxNQUFTLFdBQ1QsTUFBUyxvQkFDVCxPQUFVLGNBQ1YsT0FBVSxjQUdsQixLQUFRLENBQ0osTUFBUyxDQUNMLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxxQkFDWixLQUFRLG9CQUNSLE1BQVMsb0JBQ1QsT0FBVSxjQUNWLE9BQVUsa0JBR2xCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLGVBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQVdkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksNEJBQ1osT0FBVSxlQUNWLE9BQVUsa0NBR2xCLE9BQVUsQ0FDTixNQUFTLENBQ0wsQ0FDSSxLQUFRLFVBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsVUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksdUNBQ1osS0FBUSwrQ0FHaEIsR0FBTSxDQUNGLE1BQVMsQ0FDTCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBT2QsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxxQkFDWixPQUFVLE9BQ1YsT0FBVSxXQUNWLE9BQVUscUJBQ1YsT0FBVSx5QkFDVixPQUFVLGlDQUdsQixTQUFZLENBQ1IsTUFBUyxDQUNMLENBQ0ksS0FBUSxZQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxjQUNaLE1BQVMsdUJBQ1QsTUFBUyxhQUdqQixlQUFnQixDQUNaLE1BQVMsQ0FDTCxDQUNJLEtBQVEsZ0JBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxnQkFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSx3Q0FDWixNQUFTLHVCQUNULE1BQVMsYUFHakIsZUFBZ0IsQ0FDWixNQUFTLENBQ0wsQ0FDSSxLQUFRLGdCQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsZ0JBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksdUNBQ1osTUFBUyx1QkFDVCxNQUFTLGFBR2pCLFNBQVksQ0FDUixNQUFTLENBQ0wsQ0FDSSxLQUFRLFlBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxZQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLFlBQ1osT0FBVSxNQUNWLE9BQVUsT0FHbEIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxXQUNaLE9BQVUsaUJBR2xCLEtBQVEsQ0FDSixNQUFTLENBQ0wsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLGlDQUdwQixZQUFlLENBQ1gsTUFBUyxDQUNMLENBQ0ksS0FBUSxlQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsZUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsTUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSwyQ0FDWixPQUFVLFdBQ1YsT0FBVSxhQUdsQixLQUFRLENBQ0osTUFBUyxDQUNMLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxtQ0FDWixPQUFVLFlBQ1YsTUFBUyxtQkFDVCxPQUFVLGtCQUdsQixXQUFZLENBQ1IsTUFBUyxDQUNMLENBQ0ksS0FBUSxZQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSx3REFDWixPQUFVLFlBQ1YsTUFBUyxtQkFDVCxPQUFVLGtCQUdsQixVQUFXLENBQ1AsTUFBUyxDQUNMLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxxREFDWixPQUFVLFlBQ1YsTUFBUyxtQkFDVCxPQUFVLGtCQUdsQixLQUFRLENBQ0osTUFBUyxDQUNMLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQW9CZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLFlBQ1osT0FBVSxXQUNWLE9BQVUscUJBQ1YsT0FBVSxtQkFDVixPQUFVLHlCQUNWLE9BQVUsaUNBR2xCLFNBQVksQ0FDUixNQUFTLENBQ0wsQ0FDSSxLQUFRLFlBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsWUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksc0JBQ1osTUFB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UixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLGFBQ1osT0FBVSxPQUNWLE9BQVUscUJBR2xCLE9BQVUsQ0FDTixNQUFTLENBQ0wsQ0FDSSxLQUFRLFVBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLGVBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsVUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQVdkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksc0JBQ1osT0FBVSxPQUNWLE9BQVUscUJBR2xCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQVdkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksZ0NBQ1osT0FBVSxNQUNWLE9BQVUsb0JBR2xCLE1BQVMsQ0FDTCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsUUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFV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Q0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxJQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxJQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxPQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxFQUNWLE1BQVMsSUFXYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxTQUFZLDRDQUNaLE9BQVUsT0FDVixPQUFVLFVBQ1YsT0FBVSxVQUNWLE1BQVMsY0FDVCxNQUFTLGNBQ1QsT0FBVSxTQUNWLE9BQVUsbUNBR2xCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxXQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxRQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxnQkFDWixPQUFVLFFBQ1YsTUFBUyx1QkFDVCxPQUFVLFdBQ1YsT0FBVSxzQ0FHbEIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsV0FDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsRUFDVixNQUFTLEdBRWIsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxvQkFDWixPQUFVLHNCQUNWLE9BQVUsaUJBR2xCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxFQUNWLE1BQVMsR0FFYixDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEVBQ1YsTUFBUyxHQUViLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLFNBQVksWUFDWixPQUFVLFdBQ1YsT0FBVSxtQkFHbEIsUUFBVyxDQUNQLE1BQVMsQ0FDTCxDQUNJLEtBQVEsV0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsSUFHbEIsUUFBVyxDQUNQLENBQ0ksS0FBUSxXQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxnQkFDWixPQUFVLFdBQ1YsT0FBVSxPQUNWLE9BQVUsT0FDVixPQUFVLFlBR2xCLFFBQVcsQ0FDUCxNQUFTLENBQ0wsQ0FDSSxLQUFRLFdBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsT0FDUixRQUFVLEVB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UUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsQ0FDSSxLQUFRLFNBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxLQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsS0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxJQUdsQixRQUFXLENBQ1AsU0FBWSxpQkFDWixNQUFTLFdBQ1QsTUFBUyxXQUNULE9BQVUsYUFDVixPQUFVLFVBQ1YsT0FBVSxxQkFDVixPQUFVLFVBR2xCLFVBQWEsQ0FDVCxNQUFTLENBQ0wsQ0FDSSxLQUFRLGFBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxNQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLE1BQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsU0FDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLElBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxTQUNSLFFBQVUsR0FFZCxDQUNJLEtBQVEsSUFDUixRQUFVLElBR2xCLFFBQVcsQ0FDUCxDQUNJLEtBQVEsYUFDUixRQUFVLEdBRWQsQ0FDSSxLQUFRLEtBQ1IsUUFBVSxHQUVkLENBQ0ksS0FBUSxJQUNS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QyxRQUFRLGVBQ3hDLEdBQUlGLEVBQU8sQ0FDUEEsRUFBUXJwRixLQUFLQyxNQUFNb3BGLEdBQ25CbHJELEVBQUs4cUQsT0FBU0ksRUFBTXIvRSxJQUNwQixJQUFJeE4sRUFBUSxJQUFJc0gsS0FBS3VsRixFQUFNTCxXQUN2Qi9zRixFQUFNLElBQUk2SCxLQUFLdWxGLEVBQU1HLFNBQ3pCcnJELEVBQUs4cUQsUUFBVSx1QkFBeUJJLEVBQU1HLFFBQVUsVUFDeERyckQsRUFBSzhxRCxRQUFVOXFELEVBQUtzckQsc0JBQXNCanRGLEVBQU9QLEdBQ2pEa2lDLEVBQUs4cUQsUUFBVSxRQUd2QjlxRCxFQUFLOHFELFFBQVUseUJBQTJCOXFELEVBQUs2cUQsVUFBWSIsImZpbGUiOiJ4c3ByZWFkc2hlZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDI6IDAsXG4gXHRcdDA6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzgwLDFdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiLyogZ2xvYmFsIGRvY3VtZW50ICovXG5cbi8qIGdsb2JhbCB3aW5kb3cgKi9cbmNsYXNzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHRhZywgY2xhc3NOYW1lID0gJycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsID0gdGFnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgIH1cblxuICAgIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFba2V5XTtcbiAgICB9XG5cbiAgICBvbihldmVudE5hbWVzLCBoYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IFtmZW4sIC4uLm9lbl0gPSBldmVudE5hbWVzLnNwbGl0KCcuJyk7XG4gICAgICAgIGxldCBldmVudE5hbWUgPSBmZW47XG4gICAgICAgIGlmIChldmVudE5hbWUgPT09ICdtb3VzZXdoZWVsJyAmJiAvRmlyZWZveC9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBldmVudE5hbWUgPSAnRE9NTW91c2VTY3JvbGwnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIChldnQpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIoZXZ0KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2VuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgayA9IG9lbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gJ2xlZnQnICYmIGV2dC5idXR0b24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gJ3JpZ2h0JyAmJiBldnQuYnV0dG9uICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGsgPT09ICdzdG9wJykge1xuICAgICAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb2Zmc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY3NzKGssIGAke3ZhbHVlW2tdfXB4YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCwgb2Zmc2V0SGVpZ2h0LCBvZmZzZXRXaWR0aCxcbiAgICAgICAgfSA9IHRoaXMuZWw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IG9mZnNldFRvcCxcbiAgICAgICAgICAgIGxlZnQ6IG9mZnNldExlZnQsXG4gICAgICAgICAgICBoZWlnaHQ6IG9mZnNldEhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiBvZmZzZXRXaWR0aCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzY3JvbGwodikge1xuICAgICAgICBjb25zdCB7ZWx9ID0gdGhpcztcbiAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHYubGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IHYubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2LnRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZWwuc2Nyb2xsVG9wID0gdi50b3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge2xlZnQ6IGVsLnNjcm9sbExlZnQsIHRvcDogZWwuc2Nyb2xsVG9wfTtcbiAgICB9XG5cbiAgICBib3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHBhcmVudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbGVtZW50KHRoaXMuZWwucGFyZW50Tm9kZSk7XG4gICAgfVxuXG4gICAgY2hpbGRyZW4oLi4uZWxlcykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2hpbGROb2RlcztcbiAgICAgICAgfVxuICAgICAgICBlbGVzLmZvckVhY2goZWxlID0+IHRoaXMuY2hpbGQoZWxlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qXG4gICAgZmlyc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC5maXJzdENoaWxkO1xuICAgIH1cblxuICAgIGxhc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC5sYXN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGVsZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWwucmVtb3ZlQ2hpbGQoZWxlKTtcbiAgICB9XG5cbiAgICBwcmVwZW5kKGVsZSkge1xuICAgICAgY29uc3QgeyBlbCB9ID0gdGhpcztcbiAgICAgIGlmIChlbC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVsLmluc2VydEJlZm9yZShlbGUsIGVsLmZpcnN0Q2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByZXYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC5wcmV2aW91c1NpYmxpbmc7XG4gICAgfVxuXG4gICAgbmV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICAqL1xuXG4gICAgY2hpbGQoYXJnKSB7XG4gICAgICAgIGxldCBlbGUgPSBhcmc7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZWxlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYXJnKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICBlbGUgPSBhcmcuZWw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZChlbGUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbnRhaW5zKGVsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5jb250YWlucyhlbGUpO1xuICAgIH1cblxuICAgIGNsYXNzTmFtZSh2KSB7XG4gICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NOYW1lID0gdjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmNsYXNzTmFtZTtcbiAgICB9XG5cbiAgICBhZGRDbGFzcyhuYW1lKSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaGFzQ2xhc3MobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2xhc3MobmFtZSkge1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvZ2dsZShjbHMgPSAnYWN0aXZlJykge1xuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVDbGFzcyhjbHMpO1xuICAgIH1cblxuICAgIHRvZ2dsZUNsYXNzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2xhc3NMaXN0LnRvZ2dsZShuYW1lKTtcbiAgICB9XG5cbiAgICBhY3RpdmUoZmxhZyA9IHRydWUsIGNscyA9ICdhY3RpdmUnKSB7XG4gICAgICAgIGlmIChmbGFnKSB0aGlzLmFkZENsYXNzKGNscyk7XG4gICAgICAgIGVsc2UgdGhpcy5yZW1vdmVDbGFzcyhjbHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjaGVja2VkKGZsYWcgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlKGZsYWcsICdjaGVja2VkJyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpc2FibGVkKGZsYWcgPSB0cnVlKSB7XG4gICAgICAgIGlmIChmbGFnKSB0aGlzLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICBlbHNlIHRoaXMucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGtleSwgdmFsdWVcbiAgICAvLyBrZXlcbiAgICAvLyB7aywgdn0uLi5cbiAgICBhdHRyKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhrZXkpLmZvckVhY2goKGspID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShrLCBrZXlba10pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVtb3ZlQXR0cihrZXkpIHtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaHRtbChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmlubmVySFRNTDtcbiAgICB9XG5cbiAgICB2YWwodikge1xuICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnZhbHVlID0gdjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnZhbHVlO1xuICAgIH1cblxuICAgIGNzc1JlbW92ZUtleXMoLi4ua2V5cykge1xuICAgICAgICBrZXlzLmZvckVhY2goayA9PiB0aGlzLmVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KGspKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gY3NzKCBwcm9wZXJ0eU5hbWUgKVxuICAgIC8vIGNzcyggcHJvcGVydHlOYW1lLCB2YWx1ZSApXG4gICAgLy8gY3NzKCBwcm9wZXJ0aWVzIClcbiAgICBjc3MobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhuYW1lKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbC5zdHlsZVtrXSA9IG5hbWVba107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdHlsZVtuYW1lXTtcbiAgICB9XG5cbiAgICByZW1vdmVFbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsIHx8ICF0aGlzLmVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbCk7XG4gICAgfVxuXG4gICAgY29tcHV0ZWRTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwsIG51bGwpO1xuICAgIH1cblxuICAgIGlzU2hvdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3R5bGVbJ2Rpc3BsYXknXSA9PT0gJ2Jsb2NrJztcbiAgICB9XG5cbiAgICBzaG93KGtleSA9ICdkaXNwbGF5JywgdGV4dCA9ICdibG9jaycpIHtcbiAgICAgICAgdGhpcy5jc3Moa2V5LCB0ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaGlkZShrZXkgPSAnZGlzcGxheScsIHZhbHVlID0gJ25vbmUnKSB7XG4gICAgICAgIHRoaXMuY3NzKGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmNvbnN0IGggPSAodGFnLCBjbGFzc05hbWUgPSAnJykgPT4gbmV3IEVsZW1lbnQodGFnLCBjbGFzc05hbWUpO1xuXG5leHBvcnQge1xuICAgIEVsZW1lbnQsXG4gICAgaCxcbn07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5leHBvcnQgY29uc3QgY3NzUHJlZml4ID0gJ2Zpbi1jZWxsJztcbmV4cG9ydCBjb25zdCBsb29rID0gWycq5oKs5rWu5p+l55yLKicsICcqSFlQRVJMSU5LKicsICcqTVVMVElQTEVDRUxMUyonXTtcbmV4cG9ydCBjb25zdCBsb29rMiA9ICcjQ0hFQ0vvvIEnO1xuZXhwb3J0IGNvbnN0IGZpbHRlckZvcm11bGEgPSBbJ0NJVFknXTtcbmV4cG9ydCBjb25zdCBvZmZzZXRMZWZ0ID0gNjA7XG5leHBvcnQgY29uc3Qgb2Zmc2V0VG9wID0gNzA7XG5cbi8vIGV4cG9ydCBjb25zdCBlZGdlUmlnaHQgPSAzMDtcbi8vIGV4cG9ydCBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAgfHwgMTtcbi8vIGV4cG9ydCBjb25zdCBkcHIgPSAxO1xuIiwiZXhwb3J0IGNvbnN0IEVSUk9SX05VTEwgPSAnI05VTEwhJztcbmV4cG9ydCBjb25zdCBFUlJPUl9ESVYwID0gJyNESVYvMCEnO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1ZBTFVFID0gJyNWQUxVRSEnO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1JFRiA9ICcjUkVGISc7XG5leHBvcnQgY29uc3QgRVJST1JfTkFNRSA9ICcjTkFNRT8nO1xuZXhwb3J0IGNvbnN0IEVSUk9SX05VTSA9ICcjTlVNISc7XG5leHBvcnQgY29uc3QgRVJST1JfTkEgPSAnI04vQSc7XG5leHBvcnQgY29uc3QgRVJST1JfR0VUVElOR19EQVRBID0gJyNHRVRUSU5HX0RBVEEhJztcbmV4cG9ydCBjb25zdCBFUlJPUl9EQVRFX1NUUiA9ICcjREFURSEnO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0NJUkNVTEFSID0gJyNDSVJDVUxBISc7XG5leHBvcnQgY29uc3QgRVJST1JfRVJST1IgPSAnI0VSUk9SISc7XG5leHBvcnQgY29uc3QgRVJST1JfU1lOVEFYID0gXCIjU1lOVEFYXCIgLy8g6K+t5rOV6ZSZ6K+vXG5leHBvcnQgY29uc3QgRVJST1JfTk9OX1NPTFZFRCA9IFwiTk9OX1NPTFZFRFwiXG5cbmV4cG9ydCBjb25zdCBlcnJvck1zZ0FyciA9IFtFUlJPUl9OVUxMLCBFUlJPUl9ESVYwLCBFUlJPUl9WQUxVRSwgRVJST1JfUkVGLCBFUlJPUl9OQU1FLFxuICBFUlJPUl9OVU0sIEVSUk9SX05BLCBFUlJPUl9HRVRUSU5HX0RBVEEsIEVSUk9SX0RBVEVfU1RSLCBFUlJPUl9DSVJDVUxBUixcbiAgRVJST1JfRVJST1IsIEVSUk9SX1NZTlRBWF07XG5cbmV4cG9ydCBjb25zdCBlcnJvck9iaiA9IHtcbiAgRVJST1JfTlVMTDogbmV3IEVycm9yKEVSUk9SX05VTEwpLFxuICBFUlJPUl9ESVYwOiBuZXcgRXJyb3IoRVJST1JfRElWMCksXG4gIEVSUk9SX1ZBTFVFOiBuZXcgRXJyb3IoRVJST1JfVkFMVUUpLFxuICBFUlJPUl9SRUY6IG5ldyBFcnJvcihFUlJPUl9SRUYpLFxuICBFUlJPUl9OQU1FOiBuZXcgRXJyb3IoRVJST1JfTkFNRSksXG4gIEVSUk9SX05VTTogbmV3IEVycm9yKEVSUk9SX05VTSksXG4gIEVSUk9SX05BOiBuZXcgRXJyb3IoRVJST1JfTkEpLFxuICBFUlJPUl9HRVRUSU5HX0RBVEE6IG5ldyBFcnJvcihFUlJPUl9HRVRUSU5HX0RBVEEpLFxuICBFUlJPUl9EQVRFX1NUUjogbmV3IEVycm9yKEVSUk9SX0RBVEVfU1RSKSxcbiAgRVJST1JfQ0lSQ1VMQVI6IG5ldyBFcnJvcihFUlJPUl9DSVJDVUxBUiksXG4gIEVSUk9SX0VSUk9SOiBuZXcgRXJyb3IoRVJST1JfRVJST1IpLFxuICBFUlJPUl9TWU5UQVg6IG5ldyBFcnJvcihFUlJPUl9TWU5UQVgpLFxuICBFUlJPUl9OT05fU09MVkVEOiBuZXcgRXJyb3IoRVJST1JfTk9OX1NPTFZFRClcbn07XG5cblxuXG4iLCJjb25zdCBhbHBoYWJldHMgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nQXQoaW5kZXgpIHtcbiAgbGV0IHN0ciA9ICcnO1xuICBsZXQgY2luZGV4ID0gaW5kZXg7XG4gIHdoaWxlIChjaW5kZXggPj0gYWxwaGFiZXRzLmxlbmd0aCkge1xuICAgIGNpbmRleCAvPSBhbHBoYWJldHMubGVuZ3RoO1xuICAgIGNpbmRleCAtPSAxO1xuICAgIHN0ciArPSBhbHBoYWJldHNbcGFyc2VJbnQoY2luZGV4LCAxMCkgJSBhbHBoYWJldHMubGVuZ3RoXTtcbiAgfVxuICBjb25zdCBsYXN0ID0gaW5kZXggJSBhbHBoYWJldHMubGVuZ3RoO1xuICBzdHIgKz0gYWxwaGFiZXRzW2xhc3RdO1xuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gIGluZGV4QXQoc3RyKSB7XG4gIGxldCByZXQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGggLSAxOyBpICs9IDEpIHtcbiAgICBjb25zdCBjaW5kZXggPSBzdHIuY2hhckNvZGVBdChpKSAtIDY1O1xuICAgIGNvbnN0IGV4cG9uZXQgPSBzdHIubGVuZ3RoIC0gMSAtIGk7XG4gICAgcmV0ICs9IChhbHBoYWJldHMubGVuZ3RoICoqIGV4cG9uZXQpICsgKGFscGhhYmV0cy5sZW5ndGggKiBjaW5kZXgpO1xuICB9XG4gIHJldCArPSBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoIC0gMSkgLSA2NTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQjEwID0+IHgseVxuZXhwb3J0IGZ1bmN0aW9uIGV4cHIyeHkoc3JjKSB7XG4gIGxldCB4ID0gJyc7XG4gIGxldCB5ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHNyYy5jaGFyQXQoaSkgPj0gJzAnICYmIHNyYy5jaGFyQXQoaSkgPD0gJzknKSB7XG4gICAgICB5ICs9IHNyYy5jaGFyQXQoaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggKz0gc3JjLmNoYXJBdChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtpbmRleEF0KHgpLCBwYXJzZUludCh5LCAxMCkgLSAxXTtcbn1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGV4cHIyZXhwcihzcmMsIHhuLCB5bikge1xuLy8gICBjb25zdCBbeCwgeV0gPSBleHByMnh5KHNyYyk7XG4vLyAgIHJldHVybiBzdHJpbmdBdCh4ICsgeG4pICsgKHkgKyB5bik7XG4vLyB9XG5cbi8vIHgseSA9PiBCMTAgIHggY2kgeSByaVxuZXhwb3J0IGZ1bmN0aW9uIHh5MmV4cHIoeCwgeSwgYWIgPSAwKSB7XG4gIHggPSB4ICogMTtcbiAgeSA9IHkgKiAxO1xuICBpZihhYiA9PT0gMikge1xuICAgIHJldHVybiBgJHtzdHJpbmdBdCh4KX0kJHt5ICsgMX1gO1xuICB9IGVsc2UgaWYoYWIgPT09IDEpIHtcbiAgICAgIHJldHVybiBgJCR7c3RyaW5nQXQoeCl9JHt5ICsgMX1gO1xuICB9XG4gIHJldHVybiBgJHtzdHJpbmdBdCh4KX0ke3kgKyAxfWA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZXhwcjJ4eSxcbiAgeHkyZXhwcixcbn07XG4iLCJpbXBvcnQge2V4cHIyeHksIHh5MmV4cHJ9IGZyb20gJy4uL3V0aWxzL2FscGhhYmV0JztcblxuY2xhc3MgQ2VsbFJhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihzcmksIHNjaSwgZXJpLCBlY2ksIHcgPSAwLCBoID0gMCkge1xuICAgICAgICB0aGlzLnNyaSA9IHNyaTtcbiAgICAgICAgdGhpcy5zY2kgPSBzY2k7XG4gICAgICAgIHRoaXMuZXJpID0gZXJpO1xuICAgICAgICB0aGlzLmVjaSA9IGVjaTtcbiAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgdGhpcy5oID0gaDtcbiAgICB9XG5cbiAgICBzZXQoc3JpLCBzY2ksIGVyaSwgZWNpKSB7XG4gICAgICAgIHRoaXMuc3JpID0gc3JpO1xuICAgICAgICB0aGlzLnNjaSA9IHNjaTtcbiAgICAgICAgdGhpcy5lcmkgPSBlcmk7XG4gICAgICAgIHRoaXMuZWNpID0gZWNpO1xuICAgIH1cblxuICAgIG11bHRpcGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcmkgLSB0aGlzLnNyaSA+IDAgfHwgdGhpcy5lY2kgLSB0aGlzLnNjaSA+IDA7XG4gICAgfVxuXG4gICAgLy8gY2VsbC1pbmRleDogcmksIGNpXG4gICAgLy8gY2VsbC1yZWY6IEExMFxuICAgIGluY2x1ZGVzKC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IFtyaSwgY2ldID0gWzAsIDBdO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIFtjaSwgcmldID0gZXhwcjJ4eShhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgW3JpLCBjaV0gPSBhcmdzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBzcmkgPD0gcmkgJiYgcmkgPD0gZXJpICYmIHNjaSA8PSBjaSAmJiBjaSA8PSBlY2k7XG4gICAgfVxuXG4gICAgZWFjaChjYiwgcm93RmlsdGVyID0gKCkgPT4gdHJ1ZSkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCBpID0gc3JpOyBpIDw9IGVyaTsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAocm93RmlsdGVyKGkpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IHNjaTsgaiA8PSBlY2k7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjYihpLCBqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAxICogbiAgLyAgbiAqIDEgLyBuICogblxuICAgIGdldFR5cGUoKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgICAgIH0gPSB0aGlzO1xuXG4gICAgICAgIGlmKHNyaSA9PT0gZXJpICYmIHNjaSAhPT0gZWNpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIGlmKHNyaSAhPT0gZXJpICYmIHNjaSA9PT0gZWNpKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSBlbHNlIGlmKHNyaSAhPT0gZXJpICYmIHNjaSAhPT0gZWNpKSB7XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgfSBlbHNlIGlmKHNyaSA9PT0gZXJpICYmIHNjaSA9PT0gZWNpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLmnKrnn6Xmg4XlhrVcIik7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH1cblxuICAgIC8vIGVhY2gyKGNiLCByb3dGaWx0ZXIgPSAoKSA9PiB0cnVlKSB7XG4gICAgLy8gICAgIGxldCB7XG4gICAgLy8gICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgLy8gICAgIH0gPSB0aGlzO1xuICAgIC8vICAgICBsZXQgZXh0cmFSaVZhbHVlID0gZXJpO1xuICAgIC8vICAgICBsZXQgZXh0cmFDaVZhbHVlID0gZWNpO1xuICAgIC8vXG4gICAgLy8gICAgIGlmIChzcmkgLSBleHRyYVJpVmFsdWUgPD0gMCkge1xuICAgIC8vICAgICAgICAgc3JpID0gMDtcbiAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIHNyaSA9IHNyaSAtIGV4dHJhUmlWYWx1ZTtcbiAgICAvLyAgICAgfVxuICAgIC8vXG4gICAgLy8gICAgIGlmIChzY2kgLSBleHRyYUNpVmFsdWUgPD0gMCkge1xuICAgIC8vICAgICAgICAgc2NpID0gMDtcbiAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIHNjaSA9IHNjaSAtIGV4dHJhQ2lWYWx1ZTtcbiAgICAvLyAgICAgfVxuICAgIC8vXG4gICAgLy8gICAgIGZvciAobGV0IGkgPSBzcmk7IGkgPD0gZXJpICsgZXh0cmFSaVZhbHVlOyBpICs9IDEpIHtcbiAgICAvLyAgICAgICAgIGlmIChyb3dGaWx0ZXIoaSkpIHtcbiAgICAvLyAgICAgICAgICAgICBmb3IgKGxldCBqID0gc2NpOyBqIDw9IGVjaSArIGV4dHJhQ2lWYWx1ZTsgaiArPSAxKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgIGNiKGksIGosIGVyaSwgZWNpKTtcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICAvLyBlYWNoR2l2ZW5SYW5nZShjYiwgbXJpLCBtY2kpIHtcbiAgICAvLyAgICAgbGV0IHNyaSA9IDA7XG4gICAgLy8gICAgIGxldCBzY2kgPSAwO1xuICAgIC8vICAgICBsZXQgZXJpID0gbXJpO1xuICAgIC8vICAgICBsZXQgZWNpID0gbWNpO1xuICAgIC8vXG4gICAgLy8gICAgIGZvciAobGV0IGkgPSBzcmk7IGkgPD0gZXJpOyBpICs9IDEpIHtcbiAgICAvLyAgICAgICAgIGZvciAobGV0IGogPSBzY2k7IGogPD0gZWNpOyBqICs9IDEpIHtcbiAgICAvLyAgICAgICAgICAgICBjYihpLCBqLCBlcmksIGVjaSk7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBtb3ZlKHJpLCBjaSkge1xuICAgICAgICBsZXQgZCA9IHRoaXMuZXJpIC0gdGhpcy5zcmk7ICAgICAgICAvLyDmoLzlrZDnmoTplb8g5Y2V5L2NIOagvFxuICAgICAgICBsZXQgZDIgPSB0aGlzLmVjaSAtIHRoaXMuc2NpOyAgICAgICAgICAgIC8vIOagvOWtkOeahCDlrr0g5Y2V5L2N5qC8XG4gICAgICAgIHRoaXMuc3JpID0gcmk7XG4gICAgICAgIHRoaXMuc2NpID0gY2k7XG4gICAgICAgIHRoaXMuZXJpID0gdGhpcy5zcmkgKyBkO1xuICAgICAgICB0aGlzLmVjaSA9IHRoaXMuc2NpICsgZDI7XG4gICAgfVxuXG4gICAgbW92ZTIocmksIGNpLCBlcmksIGVjaSkge1xuICAgICAgICB0aGlzLnNyaSA9IHJpO1xuICAgICAgICB0aGlzLnNjaSA9IGNpO1xuICAgICAgICB0aGlzLmVyaSA9IGVyaTtcbiAgICAgICAgdGhpcy5lY2kgPSBlY2k7XG4gICAgfVxuXG4gICAgY29udGFpbnMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JpIDw9IG90aGVyLnNyaVxuICAgICAgICAgICAgJiYgdGhpcy5zY2kgPD0gb3RoZXIuc2NpXG4gICAgICAgICAgICAmJiB0aGlzLmVyaSA+PSBvdGhlci5lcmlcbiAgICAgICAgICAgICYmIHRoaXMuZWNpID49IG90aGVyLmVjaTtcbiAgICB9XG5cbiAgICAvLyB3aXRoaW5cbiAgICB3aXRoaW4ob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JpID49IG90aGVyLnNyaVxuICAgICAgICAgICAgJiYgdGhpcy5zY2kgPj0gb3RoZXIuc2NpXG4gICAgICAgICAgICAmJiB0aGlzLmVyaSA8PSBvdGhlci5lcmlcbiAgICAgICAgICAgICYmIHRoaXMuZWNpIDw9IG90aGVyLmVjaTtcbiAgICB9XG5cbiAgICAvLyBkaXNqb2ludFxuICAgIGRpc2pvaW50KG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNyaSA+IG90aGVyLmVyaVxuICAgICAgICAgICAgfHwgdGhpcy5zY2kgPiBvdGhlci5lY2lcbiAgICAgICAgICAgIHx8IG90aGVyLnNyaSA+IHRoaXMuZXJpXG4gICAgICAgICAgICB8fCBvdGhlci5zY2kgPiB0aGlzLmVjaTtcbiAgICB9XG5cbiAgICAvLyBpbnRlcnNlY3RzXG4gICAgaW50ZXJzZWN0cyhvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5zcmkgPD0gb3RoZXIuZXJpXG4gICAgICAgICAgICAmJiB0aGlzLnNjaSA8PSBvdGhlci5lY2lcbiAgICAgICAgICAgICYmIG90aGVyLnNyaSA8PSB0aGlzLmVyaVxuICAgICAgICAgICAgJiYgb3RoZXIuc2NpIDw9IHRoaXMuZWNpO1xuICAgIH1cblxuICAgIGdldE1vdmVQb3MocmksIGNpKSB7XG4gICAgICAgIGxldCB7c3JpLCBzY2ksIGVyaSwgZWNpfSA9IHRoaXM7XG5cbiAgICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICAgIGlmIChyaSA+IGVyaSAmJiBjaSA+IGVjaSkge1xuICAgICAgICAgICAgcG9zID0gMTsgICAgICAgIC8vIOW+gOS4i+W+gOWPs1xuICAgICAgICB9IGVsc2UgaWYocmkgPiBlcmkgJiYgY2kgPCBzY2kpIHtcbiAgICAgICAgICAgIHBvcyA9IDc7ICAgICAgICAvLyDlvoDkuIvlvoDlt6ZcbiAgICAgICAgfSBlbHNlIGlmKHJpIDwgc3JpICYmIGNpID4gZWNpKSB7XG4gICAgICAgICAgICBwb3MgPSA4OyAgICAgICAgLy8g5b6A5LiK5b6A5Y+zXG4gICAgICAgIH0gZWxzZSBpZihjaSA8IHNjaSAmJiByaSA8IHNyaSkge1xuICAgICAgICAgICAgcG9zID0gNDsgICAgICAgIC8vIOW+gOS4iuW+gOW3plxuICAgICAgICB9IGVsc2UgaWYocmkgPiBlcmkpIHtcbiAgICAgICAgICAgIHBvcyA9IDI7ICAgICAgICAvLyDlvoDkuItcbiAgICAgICAgfSBlbHNlIGlmKGNpID4gZWNpKSB7XG4gICAgICAgICAgICBwb3MgPSAzOyAgICAgICAgLy8g5b6A5Y+zXG4gICAgICAgIH0gIGVsc2UgaWYoY2kgPCBzY2kpIHtcbiAgICAgICAgICAgIHBvcyA9IDU7ICAgICAgICAvLyDlvoDlt6ZcbiAgICAgICAgfSBlbHNlIGlmKHJpIDwgc3JpKSB7XG4gICAgICAgICAgICBwb3MgPSA2OyAgICAgICAgLy8g5b6A5LiKXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zO1xuICAgIH1cblxuICAgIC8vIHVuaW9uXG4gICAgdW5pb24ob3RoZXIpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBDZWxsUmFuZ2UoXG4gICAgICAgICAgICBvdGhlci5zcmkgPCBzcmkgPyBvdGhlci5zcmkgOiBzcmksXG4gICAgICAgICAgICBvdGhlci5zY2kgPCBzY2kgPyBvdGhlci5zY2kgOiBzY2ksXG4gICAgICAgICAgICBvdGhlci5lcmkgPiBlcmkgPyBvdGhlci5lcmkgOiBlcmksXG4gICAgICAgICAgICBvdGhlci5lY2kgPiBlY2kgPyBvdGhlci5lY2kgOiBlY2ksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gaW50ZXJzZWN0aW9uXG4gICAgLy8gaW50ZXJzZWN0aW9uKG90aGVyKSB7fVxuXG4gICAgLy8gUmV0dXJucyBBcnJheTxDZWxsUmFuZ2U+IHRoYXQgcmVwcmVzZW50cyB0aGF0IHBhcnQgb2YgdGhpcyB0aGF0IGRvZXMgbm90IGludGVyc2VjdCB3aXRoIG90aGVyXG4gICAgLy8gZGlmZmVyZW5jZVxuICAgIGRpZmZlcmVuY2Uob3RoZXIpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gW107XG4gICAgICAgIGNvbnN0IGFkZFJldCA9IChzcmksIHNjaSwgZXJpLCBlY2kpID0+IHtcbiAgICAgICAgICAgIHJldC5wdXNoKG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2ksIGVyaSwgZWNpKSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRzciA9IG90aGVyLnNyaSAtIHNyaTtcbiAgICAgICAgY29uc3QgZHNjID0gb3RoZXIuc2NpIC0gc2NpO1xuICAgICAgICBjb25zdCBkZXIgPSBlcmkgLSBvdGhlci5lcmk7XG4gICAgICAgIGNvbnN0IGRlYyA9IGVjaSAtIG90aGVyLmVjaTtcbiAgICAgICAgaWYgKGRzciA+IDApIHtcbiAgICAgICAgICAgIGFkZFJldChzcmksIHNjaSwgb3RoZXIuc3JpIC0gMSwgZWNpKTtcbiAgICAgICAgICAgIGlmIChkZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgYWRkUmV0KG90aGVyLmVyaSArIDEsIHNjaSwgZXJpLCBlY2kpO1xuICAgICAgICAgICAgICAgIGlmIChkc2MgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJldChvdGhlci5zcmksIHNjaSwgb3RoZXIuZXJpLCBvdGhlci5zY2kgLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRlYyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUmV0KG90aGVyLnNyaSwgb3RoZXIuZWNpICsgMSwgb3RoZXIuZXJpLCBlY2kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRzYyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUmV0KG90aGVyLnNyaSwgc2NpLCBlcmksIG90aGVyLnNjaSAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGVjID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRSZXQob3RoZXIuc3JpLCBvdGhlci5lY2kgKyAxLCBlcmksIGVjaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlciA+IDApIHtcbiAgICAgICAgICAgIGFkZFJldChvdGhlci5lcmkgKyAxLCBzY2ksIGVyaSwgZWNpKTtcbiAgICAgICAgICAgIGlmIChkc2MgPiAwKSB7XG4gICAgICAgICAgICAgICAgYWRkUmV0KHNyaSwgc2NpLCBvdGhlci5lcmksIG90aGVyLnNjaSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlYyA+IDApIHtcbiAgICAgICAgICAgICAgICBhZGRSZXQoc3JpLCBvdGhlci5lY2kgKyAxLCBvdGhlci5lcmksIGVjaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRzYyA+IDApIHtcbiAgICAgICAgICAgIGFkZFJldChzcmksIHNjaSwgZXJpLCBvdGhlci5zY2kgLSAxKTtcbiAgICAgICAgICAgIGlmIChkZWMgPiAwKSB7XG4gICAgICAgICAgICAgICAgYWRkUmV0KHNyaSwgb3RoZXIuZXJpICsgMSwgZXJpLCBlY2kpO1xuICAgICAgICAgICAgICAgIGlmIChkc3IgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJldChzcmksIG90aGVyLnNjaSwgb3RoZXIuc3JpIC0gMSwgb3RoZXIuZWNpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUmV0KG90aGVyLnNyaSArIDEsIG90aGVyLnNjaSwgZXJpLCBvdGhlci5lY2kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRzciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUmV0KHNyaSwgb3RoZXIuc2NpLCBvdGhlci5zcmkgLSAxLCBlY2kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRSZXQob3RoZXIuc3JpICsgMSwgb3RoZXIuc2NpLCBlcmksIGVjaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlYyA+IDApIHtcbiAgICAgICAgICAgIGFkZFJldChlcmksIG90aGVyLmVjaSArIDEsIGVyaSwgZWNpKTtcbiAgICAgICAgICAgIGlmIChkc3IgPiAwKSB7XG4gICAgICAgICAgICAgICAgYWRkUmV0KHNyaSwgc2NpLCBvdGhlci5zcmkgLSAxLCBvdGhlci5lY2kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlciA+IDApIHtcbiAgICAgICAgICAgICAgICBhZGRSZXQob3RoZXIuZXJpICsgMSwgc2NpLCBlcmksIG90aGVyLmVjaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBzaXplKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5lcmkgLSB0aGlzLnNyaSArIDEsXG4gICAgICAgICAgICB0aGlzLmVjaSAtIHRoaXMuc2NpICsgMSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgbGV0IHJlZiA9IHh5MmV4cHIoc2NpLCBzcmkpO1xuICAgICAgICBpZiAodGhpcy5tdWx0aXBsZSgpKSB7XG4gICAgICAgICAgICByZWYgPSBgJHtyZWZ9OiR7eHkyZXhwcihlY2ksIGVyaSl9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmO1xuICAgIH1cblxuICAgIGluY2x1ZGVCeVJpQ2kocmksIGNpKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHNyaSA8PSByaSAmJiBlcmkgPj0gcmkgJiYgc2NpIDw9IGNpICYmIGVjaSA+PSBjaTtcbiAgICB9XG5cbiAgICAvLyBjbG9uZSgpIHtcbiAgICAvLyAgICAgY29uc3Qge1xuICAgIC8vICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBoLFxuICAgIC8vICAgICB9ID0gdGhpcztcbiAgICAvLyAgICAgcmV0dXJuIGNyZWF0ZWQgQ2VsbFJhbmdlKHNyaSwgc2NpLCBlcmksIGVjaSwgdywgaCk7XG4gICAgLy8gfVxuXG4gICAgZ2V0TG9jYXRpb25BcnJheShzYXJyKSB7XG4gICAgICAgIGxldCBkYXJyID0gW107XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZWFjaCgoaSwgaikgPT4ge1xuICAgICAgICAgICAgZGFyci5wdXNoKHtyaTogaSwgY2k6IGosIHY6IHNhcnJbaW5kZXggJSBzYXJyLmxlbmd0aF0udG1wLCB0eXBlOiBzYXJyW2luZGV4ICUgc2Fyci5sZW5ndGhdLnR5cGV9KTtcbiAgICAgICAgICAgIGluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGFycjtcbiAgICB9XG5cbiAgICAvKlxuICAgIHRvSlNPTigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgICovXG5cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJpID09PSBvdGhlci5lcmlcbiAgICAgICAgICAgICYmIHRoaXMuZWNpID09PSBvdGhlci5lY2lcbiAgICAgICAgICAgICYmIHRoaXMuc3JpID09PSBvdGhlci5zcmlcbiAgICAgICAgICAgICYmIHRoaXMuc2NpID09PSBvdGhlci5zY2k7XG4gICAgfVxuXG4gICAgc3RhdGljIHZhbHVlT2YocmVmKSB7XG4gICAgICAgIC8vIEIxOkI4LCBCMSA9PiAxIHggMSBjZWxsIHJhbmdlXG4gICAgICAgIGNvbnN0IHJlZnMgPSByZWYuc3BsaXQoJzonKTtcbiAgICAgICAgY29uc3QgW3NjaSwgc3JpXSA9IGV4cHIyeHkocmVmc1swXSk7XG4gICAgICAgIGxldCBbZXJpLCBlY2ldID0gW3NyaSwgc2NpXTtcbiAgICAgICAgaWYgKHJlZnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgW2VjaSwgZXJpXSA9IGV4cHIyeHkocmVmc1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2ksIGVyaSwgZWNpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENlbGxSYW5nZTtcblxuZXhwb3J0IHtcbiAgICBDZWxsUmFuZ2UsXG59O1xuIiwiaW1wb3J0IHtcbiAgICBibGFua09wZXJhdG9yLFxuICAgIGxldHRlckFuZExldHRlck9wZXJhdG9yLFxuICAgIGxldHRlck9wZXJhdG9yLFxuICAgIGxldHRlck9wZXJhdG9yV2l0aERvbGxvcixcbiAgICBsZXR0ZXJPcGVyYXRvcldpdGhEb2xsb3JFbmQsXG4gICAgbGV0dGVyT3BlcmF0b3JXaXRoRG9sbG9yUHJleCxcbiAgICBsb2dpY09wZXJhdG9yLFxuICAgIHN0cjJSZVxufSBmcm9tIFwiLi4vdXRpbHMvcmVnX3BhdHRlcm4uanNcIjtcblxuY29uc3Qgb3BlcmF0b3IgPSBbXG4gICAgXCIrXCIsIFwiLVwiLCBcIipcIiwgXCIvXCIsIFwiJlwiLCBcIl5cIiwgXCIoXCIsIFwiLFwiLCBcIj1cIiwgXCIgXCIsIFwiwqBcIiwgXCLvvIxcIlxuXTtcblxuY29uc3Qgb3BlcmF0b3IzID0gW1xuICAgIFwiK1wiLCBcIi1cIiwgXCIqXCIsIFwiL1wiLCBcIiZcIiwgXCJeXCIsIFwiKFwiLCBcIixcIiwgXCI9XCIsIFwiIFwiLCBcIu+8jFwiXG5dO1xuXG5jb25zdCBvcGVyYXRvcjIgPSBbXG4gICAgXCIrXCIsIFwiLVwiLCBcIipcIiwgXCIvXCIsIFwiJlwiLCBcIl5cIiwgXCIoXCIsIFwiLFwiLCBcIj1cIiwgXCIpXCIsIFwi77yMXCJcbl07XG5cblxuY29uc3Qgb3BlcmF0aW9uID0gKHMpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wZXJhdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChvcGVyYXRvcltpXSA9PT0gcykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG59O1xuXG4vLyDlrZjlnKjnmoTljp/lm6DmmK8g5LiN6L+H5rukIOepuuagvFxuY29uc3Qgb3BlcmF0aW9uMyA9IChzKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcGVyYXRvci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAob3BlcmF0b3IzW2ldID09PSBzKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbn07XG5cbmNvbnN0IG9wZXJhdGlvbjIgPSAocykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlcmF0b3IyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChvcGVyYXRvcjJbaV0gPT09IHMpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufTtcblxuXG5jb25zdCB2YWx1ZTJhYnNvbHV0ZSA9IChzdHIpID0+IHtcbiAgICBsZXQgczEgPSBcIlwiLCBlbnRlciA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlbnRlciA9PT0gZmFsc2UgJiYgc3RyW2ldICogMSA+PSAwICYmIHN0cltpXSAqIDEgPD0gOSkge1xuICAgICAgICAgICAgczEgKz0gXCIkXCI7XG4gICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgczEgKz0gc3RyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHMxOiBzMSxcbiAgICAgICAgczI6IFwiJFwiICsgc3RyLFxuICAgICAgICBzMzogXCIkXCIgKyBzMVxuICAgIH1cbn07XG5cbmNvbnN0IGN1dFN0ciA9IChzdHIsIGZpbHRlciA9IGZhbHNlLCBmID0gZmFsc2UpID0+IHtcbiAgICBzdHIgPSBzdHIgKyBcIlwiO1xuICAgIHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChzdHJbMF0gIT09IFwiPVwiKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyDmiornqbrmoLzljrvpmaTnmoTljp/lm6DmmK/lm6DkuLogPT4gQSAgIDEg6L+Z56eN5oOF5Ya15LiN5bqU6K+l6KKr5YyF5ZCr5Zyo5YaFXG4gICAgLy8gc3RyID0gc3RyLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbiAgICBsZXQgYXJyID0gc3RyLnNwbGl0KHN0cjJSZShsb2dpY09wZXJhdG9yKSk7XG5cbiAgICAvLyDljrvpmaTlrZfnrKbkuLLkuKTnq6/nmoTnqbrmoLxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJbaV0gPSBhcnJbaV0ucmVwbGFjZShzdHIyUmUoYmxhbmtPcGVyYXRvciksIFwiXCIpO1xuICAgIH1cbiAgICBsZXQgZXhwcmVzcyA9IFtdO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgYXJyLmZpbHRlcihpID0+IHtcbiAgICAgICAgbGV0IGVudGVyID0gdHJ1ZTtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPiBpbmRleCArIDEpIHtcbiAgICAgICAgICAgIGxldCBzMiA9IGFycltpbmRleCArIDFdO1xuICAgICAgICAgICAgaWYgKHMyLmluZGV4T2YoXCIoXCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGVudGVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyaS5zZWFyY2goc3RyMlJlKGxldHRlck9wZXJhdG9ySWdub3JlQnJhY2tldCkpLCByaSlcbiAgICAgICAgLy8gaWYocmkuc2VhcmNoKHN0cjJSZShsZXR0ZXJPcGVyYXRvcklnbm9yZUJyYWNrZXQpKSA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGYgJiYgZW50ZXIpIHtcbiAgICAgICAgICAgIGkgPSBpLnJlcGxhY2UoL1xcJC9nLCAnJyk7XG4gICAgICAgICAgICBpZiAoaS5zZWFyY2goc3RyMlJlKGxldHRlck9wZXJhdG9yKSkgIT09IC0xXG4gICAgICAgICAgICAgICAgfHwgaS5zZWFyY2goc3RyMlJlKGxldHRlckFuZExldHRlck9wZXJhdG9yKSkgIT09IC0xKVxuICAgICAgICAgICAgICAgIGlmIChleHByZXNzLmluZGV4T2YoaSkgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBleHByZXNzLnB1c2goaSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZW50ZXIpIHtcbiAgICAgICAgICAgIGlmIChpLnNlYXJjaChzdHIyUmUobGV0dGVyT3BlcmF0b3IpKSAhPT0gLTEgfHwgaS5zZWFyY2goc3RyMlJlKGxldHRlck9wZXJhdG9yV2l0aERvbGxvcikpICE9PSAtMVxuICAgICAgICAgICAgICAgIHx8IGkuc2VhcmNoKHN0cjJSZShsZXR0ZXJPcGVyYXRvcldpdGhEb2xsb3JFbmQpKSAhPT0gLTEgfHwgaS5zZWFyY2goc3RyMlJlKGxldHRlck9wZXJhdG9yV2l0aERvbGxvclByZXgpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhwcmVzcy5pbmRleE9mKGkpID09PSAtMSB8fCBmaWx0ZXIgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3MucHVzaChpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzID0gaS5yZXBsYWNlKC9cXCQvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKGlzLnNlYXJjaChzdHIyUmUobGV0dGVyQW5kTGV0dGVyT3BlcmF0b3IpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIGluZGV4ID0gaW5kZXggKyAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV4cHJlc3M7XG59O1xuXG4vLyBBMSA9PiBBMTpBMVxuZnVuY3Rpb24gY2hhbmdlRm9ybXVsYShjdXQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYyA9IGN1dFtpXTtcbiAgICAgICAgaWYgKGMuc2VhcmNoKC9eW0EtWmEtel0rXFxkKzpbQS1aYS16XStcXGQrJC8pID09PSAtMSkge1xuICAgICAgICAgICAgY3V0W2ldID0gYCR7Y306JHtjfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWwoc3RyKSB7XG4gICAgY29uc3QgbGVmdCA9IDA7XG4gICAgY29uc3QgcmlnaHQgPSAxO1xuICAgIGNvbnN0IG90aGVyID0gMjtcbiAgICAvL+WIpOaWreaLrOWPt+aYr+W3pui+uei/mOaYr+WPs+i+ue+8jOaIluiAheWFtuS7llxuICAgIGxldCB2ZXJpZnlGbGFnID0gZnVuY3Rpb24gKGNoYXIpIHtcbiAgICAgICAgaWYgKGNoYXIgPT09IFwiKFwiIHx8IGNoYXIgPT09IFwiW1wiIHx8IGNoYXIgPT09IFwie1wiIHx8IGNoYXIgPT09IFwiLypcIikge1xuICAgICAgICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gXCIpXCIgfHwgY2hhciA9PT0gXCJdXCIgfHwgY2hhciA9PT0gXCJ9XCIgfHwgY2hhciA9PT0gXCIqL1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8v5Yik5pat5bem5Y+z5ous5Y+35piv5ZCm5Yy56YWNXG4gICAgbGV0IG1hdGNoZXMgPSBmdW5jdGlvbiAoY2hhcjEsIGNoYXIyKSB7XG4gICAgICAgIHJldHVybiAoY2hhcjEgPT09IFwiKFwiICYmIGNoYXIyID09PSBcIilcIilcbiAgICAgICAgICAgIHx8IChjaGFyMSA9PT0gXCJ7XCIgJiYgY2hhcjIgPT09IFwifVwiKVxuICAgICAgICAgICAgfHwgKGNoYXIxID09PSBcIltcIiAmJiBjaGFyMiA9PT0gXCJdXCIpXG4gICAgICAgICAgICB8fCAoY2hhcjEgPT09IFwiLypcIiAmJiBjaGFyMiA9PT0gXCIqL1wiKTtcbiAgICB9O1xuICAgIC8v5YWl5Y+jXG4gICAgbGV0IGxlZnRTdGFjayA9IFtdO1xuICAgIGlmIChzdHIgIT09IG51bGwgfHwgc3RyICE9PSBcIlwiIHx8IHN0ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvL+WkhOeQhuWtl+esplxuICAgICAgICAgICAgbGV0IGNoYXIgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgaWYgKHZlcmlmeUZsYWcoY2hhcikgPT09IGxlZnQpIHtcbiAgICAgICAgICAgICAgICBsZWZ0U3RhY2sucHVzaChjaGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmVyaWZ5RmxhZyhjaGFyKSA9PT0gcmlnaHQpIHtcbiAgICAgICAgICAgICAgICAvL+WmguaenOS4jeWMuemFje+8jOaIluiAheW3puaLrOWPt+agiOW3sue7j+S4uuepuu+8jOWImeWMuemFjeWksei0pVxuICAgICAgICAgICAgICAgIGlmIChsZWZ0U3RhY2subGVuZ3RoID09PSAwIHx8ICFtYXRjaGVzKGxlZnRTdGFjay5wb3AoKSwgY2hhcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy/lvqrnjq/nu5PmnZ/vvIzlpoLmnpzlt6bmi6zlj7fmoIjov5jmnInmi6zlj7fvvIzkuZ/mmK/ljLnphY3lpLHotKVcblxuICAgICAgICByZXR1cm4gbGVmdFN0YWNrLmxlbmd0aCA9PT0gMDtcbiAgICB9XG59XG5cbmNvbnN0IGN1dEZpcnN0ID0gKHN0cikgPT4ge1xuICAgIGxldCBzID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAob3BlcmF0aW9uMihzdHJbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuICAgICAgICBzICs9IHN0cltpXTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59O1xuXG5cbmNvbnN0IGN1dHRpbmdCeVBvcyA9IChzdHIsIHBvcywgc3BhY2UgPSB0cnVlKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gXCJcIjtcbiAgICBsZXQgZW5kID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IHBvcyAtIDE7IGkgPiAwICYmIGVuZCA9PT0gZmFsc2U7IGktLSkge1xuICAgICAgICBpZiAoc3BhY2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBlbmQgPSBvcGVyYXRpb24zKHN0cltpXSkgPT09IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBvcGVyYXRpb24oc3RyW2ldKSA9PT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFsdWUgKz0gc3RyW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzcGFjZSlcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xuICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xufTtcblxuY29uc3QgY3V0dGluZ0J5UG9zMiA9IChzdHIsIHBvcywgc3BhY2UgPSB0cnVlKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gXCJcIjtcbiAgICBsZXQgZW5kID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IHBvcyAtIDE7IGkgPiAwICYmIGVuZCA9PT0gZmFsc2U7IGktLSkge1xuICAgICAgICBpZiAoc3BhY2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBlbmQgPSBvcGVyYXRpb24zKHN0cltpXSkgPT09IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBvcGVyYXRpb24oc3RyW2ldKSA9PT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFsdWUgKz0gc3RyW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzcGFjZSlcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cblxuY29uc3QgY3V0dGluZ0J5UG9zRW5kID0gKHN0ciwgcG9zKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gXCJcIjtcbiAgICBsZXQgZW5kID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IHBvcyAtIDE7IGkgPCBzdHIubGVuZ3RoICYmIGVuZCA9PT0gZmFsc2U7IGkrKykge1xuICAgICAgICBlbmQgPSBvcGVyYXRpb24oc3RyW2ldKSA9PT0gMTtcbiAgICAgICAgaWYgKGVuZCA9PT0gZmFsc2UgJiYgc3RyW2ldICE9PSAnKScpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IHN0cltpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTtcbn07XG5cbmNvbnN0IGN1dHRpbmdCeVBvc0VuZDIgPSAoc3RyLCBwb3MpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSBwb3MgLSAxOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlICs9IHN0cltpXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0KGFycikge1xuICAgIHJldHVybiBbLi4ubmV3IFNldChhcnIpXTtcbn1cblxuY29uc3QgY3V0dGluZyA9IChzdHIpID0+IHtcbiAgICBsZXQgZXhwcmVzcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzdHJbaV0pIHtcbiAgICAgICAgICAgIGV4cHJlc3MucHVzaChzdHJbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHByZXNzO1xufTtcblxuY29uc3QgaXNTaGVldFZhbGUgPSAoc3RyKSA9PiB7XG4gICAgc3RyID0gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKHN0ci5zZWFyY2goL1tcXHU0RTAwLVxcdTlGQTUwLTlhLXpBLVpdKyFbQS1aYS16XStcXCRcXGQrLykgIT09IC0xKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoc3RyLnNlYXJjaCgvW1xcdTRFMDAtXFx1OUZBNTAtOWEtekEtWl0rIVxcJFtBLVphLXpdK1xcZCsvKSAhPT0gLTEpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChzdHIuc2VhcmNoKC9bXFx1NEUwMC1cXHU5RkE1MC05YS16QS1aXSshXFwkW0EtWmEtel0rXFwkXFxkKy8pICE9PSAtMSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gaWYgKHN0ci5zZWFyY2goL1tcXHU0RTAwLVxcdTlGQTUwLTlhLXpBLVpdKyFbQS1aYS16XStcXGQrLykgIT09IC0xKVxuICAgIC8vICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gc3RyLnNlYXJjaCgvW1xcdTRFMDAtXFx1OUZBNTAtOWEtekEtWl0rIVtBLVphLXpdK1xcZCsvKSAhPT0gLTE7XG59O1xuXG5cbmZ1bmN0aW9uIGFuZ2xlRnVuYyhzdGFydCwgZW5kKSB7XG4gICAgbGV0IGRpZmZfeCA9IGVuZC54IC0gc3RhcnQueCxcbiAgICAgICAgZGlmZl95ID0gZW5kLnkgLSBzdGFydC55O1xuICAgIHJldHVybiAzNjAgKiBNYXRoLmF0YW4oZGlmZl95IC8gZGlmZl94KSAvICgyICogTWF0aC5QSSk7XG59XG5cbmNvbnN0IHBvc2l0aW9uQW5nbGUgPSAoeDEsIHgyLCB5MSwgeTIpID0+IHtcbiAgICBsZXQgYW5nbGUgPSAwO1xuICAgIGxldCBhZiA9IE1hdGguYWJzKGFuZ2xlRnVuYyh7eDogeDEsIHk6IHkxfSwge3g6IHgyLCB5OiB5Mn0pKTtcblxuICAgIGlmICh4MSA8IHgyICYmIHkxIDwgeTIpIHtcbiAgICAgICAgYW5nbGUgPSAxO1xuICAgIH0gZWxzZSBpZiAoeDEgPiB4MiAmJiB5MSA8IHkyKSB7XG4gICAgICAgIGFuZ2xlID0gMjtcbiAgICB9IGVsc2UgaWYgKHgxIDwgeDIgJiYgeTEgPiB5Mikge1xuICAgICAgICBhbmdsZSA9IDM7XG4gICAgfSBlbHNlIGlmICh4MSA+IHgyICYmIHkxID4geTIpIHtcbiAgICAgICAgYW5nbGUgPSA0O1xuICAgIH1cblxuICAgIGlmIChhbmdsZSA9PT0gMSAmJiBhZiA8IDQ1KSB7XG4gICAgICAgIGFuZ2xlID0gMztcbiAgICAgICAgcmV0dXJuIGFuZ2xlO1xuICAgIH0gZWxzZSBpZiAoYW5nbGUgPT09IDIgJiYgYWYgPiAzMCkge1xuICAgICAgICBhbmdsZSA9IDE7XG4gICAgICAgIHJldHVybiBhbmdsZTtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlID09PSAzICYmIGFmID4gMzApIHtcbiAgICAgICAgYW5nbGUgPSA0O1xuICAgICAgICByZXR1cm4gYW5nbGU7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA9PT0gNCAmJiBhZiA8IDQ1KSB7XG4gICAgICAgIGFuZ2xlID0gMjtcbiAgICAgICAgcmV0dXJuIGFuZ2xlO1xuICAgIH1cblxuICAgIC8vIGlmIChhbmdsZSA9PT0gMikge1xuICAgIC8vICAgICBsZXQgczEgPSBoKCdkaXYnLCAnJykuY3NzKCdib3JkZXInLCAnMXB4IHNvbGlkJykuY3NzKCdoZWlnaHQnLCAnMXB4JykuY3NzKCd3aWR0aCcsICcxcHgnKTtcbiAgICAvLyAgICAgbGV0IHMyID0gaCgnZGl2JywgJycpLmNzcygnYm9yZGVyJywgJzFweCBzb2xpZCcpLmNzcygnaGVpZ2h0JywgJzFweCcpLmNzcygnd2lkdGgnLCAnMXB4Jyk7XG4gICAgLy8gICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoczEuZWwpO1xuICAgIC8vICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHMyLmVsKTtcbiAgICAvLyAgICAgZGVidWdnZXJcbiAgICAvLyB9XG4gICAgcmV0dXJuIGFuZ2xlO1xufTtcblxuY29uc3QgaXNBYnNvbHV0ZVZhbHVlID0gKHN0ciwgcnVsZSA9IDEpID0+IHtcbiAgICBzdHIgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICBpZiAocnVsZSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXlxcJFtBLVpdK1xcJFxcZCskLykgIT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eXFwkW0EtWl0rXFxkKyQvKSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15bQS1aXStcXCRcXGQrJC8pICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChydWxlID09PSAzKSB7XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eXFwkW0EtWl0rXFwkXFxkKyQvKSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15bQS1aXStcXGQrJC8pICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXlxcJFtBLVpdK1xcZCskLykgIT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHN0ci5zZWFyY2goL15bQS1aXStcXCRcXGQrJC8pICE9PSAtMTtcbiAgICB9IGVsc2UgaWYgKHJ1bGUgPT09IDQpIHtcbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15bQS1aYS16XStcXGQrOltBLVphLXpdK1xcZCskLykgIT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChydWxlID09PSA1KSB7XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eW0EtWl0rXFxkKzpcXCRbQS1aXStcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIDg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15bQS1aXStcXGQrOltBLVpdK1xcJFxcZCskLykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXltBLVpdK1xcJFxcZCs6W0EtWl0rXFxkKyQvKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiAxMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXlxcJFtBLVpdK1xcZCs6W0EtWl0rXFxkKyQvKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiAxMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXlxcJFtBLVpdK1xcJFxcZCskLykgIT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eW0EtWl0rXFxkKyQvKSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gMTI7XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eW0EtWl0rXFxkKzpbQS1aXStcXGQrJC8pICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiAxMztcbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15cXCRbQS1aXStcXGQrJC8pICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXltBLVpdK1xcJFxcZCskLykgIT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eW0EtWl0rXFwkXFxkKzpbQS1aXStcXCRcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15bQS1aXStcXCRcXGQrOlxcJFtBLVpdK1xcZCskLykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyLnNlYXJjaCgvXlxcJFtBLVpdK1xcZCs6W0EtWl0rXFwkXFxkKyQvKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiA2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHIuc2VhcmNoKC9eXFwkW0EtWl0rXFxkKzpcXCRbQS1aXStcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmIChydWxlID09PSA2KSB7XG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXCQvZywgJycpO1xuICAgICAgICByZXR1cm4gc3RyLnNlYXJjaCgvXltBLVphLXpdK1xcZCs6W0EtWmEtel0rXFxkKyQvKSAhPT0gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0ci5zZWFyY2goL15bQS1aYS16XStcXGQrJC8pICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIHJldHVybiBzdHIuc2VhcmNoKC9eW0EtWmEtel0rXFxkKzpbQS1aYS16XStcXGQrJC8pICE9PSAtMTtcbiAgICB9XG59O1xuXG5jb25zdCBzcGxpdFN0ciA9IChzdHIpID0+IHtcbiAgICBsZXQgYXJyID0gc3RyLnNwbGl0KC8oWygtXFwvLCvvvIwqXFxzPV4mXSkvKTtcbiAgICBsZXQgYXJyMiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBlbnRlciA9IDE7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGxldCBzMiA9IGFycltpICsgMV07XG4gICAgICAgICAgICBpZiAoYXJyW2ldID09PSBcIihcIikge1xuICAgICAgICAgICAgICAgIGVudGVyID0gMztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoczIuaW5kZXhPZihcIihcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZW50ZXIgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudGVyICE9PSAzKSB7XG4gICAgICAgICAgICBpZiAoZW50ZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBhcnIyLnB1c2goYXJyW2ldICsgXCIoXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnIyLnB1c2goYXJyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIGFycjI7XG59O1xuXG5jb25zdCBjdXR0aW5nMiA9IChzdHIpID0+IHtcbiAgICBsZXQgYXJyID0gc3RyLnNwbGl0KC8oWygtXFwvLCvvvIwqXFxzPV4mXSkvKTtcblxuICAgIGxldCBjb2xvciA9IDA7XG4gICAgbGV0IGV4cHJlc3MgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJyW2ldKSB7XG4gICAgICAgICAgICBleHByZXNzLnB1c2goYXJyW2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBjb2xvcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4cHJlc3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHMgPSBleHByZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGxldCBlbnRlciA9IHRydWU7XG4gICAgICAgIGlmIChleHByZXNzLmxlbmd0aCA+IGkgKyAxKSB7XG4gICAgICAgICAgICBsZXQgczIgPSBleHByZXNzW2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChzMi5pbmRleE9mKFwiKFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBlbnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzLnNlYXJjaCgvXltBLVpdK1xcZCskLykgIT09IC0xXG4gICAgICAgICAgICAgICAgfHwgcy5zZWFyY2goL15cXCRbQS1aXStcXCRcXGQrJC8pICE9PSAtMVxuICAgICAgICAgICAgICAgIHx8IHMuc2VhcmNoKC9eW0EtWl0rXFwkXFxkKyQvKSAhPT0gLTEgfHwgcy5zZWFyY2goL15cXCRbQS1aXStcXGQrJC8pICE9PSAtMVxuICAgICAgICAgICAgICAgIHx8IHMuc2VhcmNoKC9eW0EtWmEtel0rXFxkKzpbQS1aYS16XStcXGQrJC8pICE9PSAtMSkgJiYgZW50ZXIpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBleHByZXNzW2ldLmxlbmd0aDsgaTIrKylcbiAgICAgICAgICAgICAgICBjb2xvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIFwiY29kZVwiOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IGV4cHJlc3NbaV1baTJdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29sb3IgPSBjb2xvciArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc2MgPSBzLnJlcGxhY2UoL1xcJC9nLCBcIlwiKTtcbiAgICAgICAgICAgIGlmIChzYy5zZWFyY2goL15bQS1aYS16XStcXGQrOltBLVphLXpdK1xcZCskLykgIT09IC0xICYmIGVudGVyKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaTIgPSAwOyBpMiA8IGV4cHJlc3NbaV0ubGVuZ3RoOyBpMisrKVxuICAgICAgICAgICAgICAgICAgICBjb2xvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvZGVcIjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogZXhwcmVzc1tpXVtpMl0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3IgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgZXhwcmVzc1tpXS5sZW5ndGg7IGkyKyspXG4gICAgICAgICAgICAgICAgICAgIGNvbG9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29kZVwiOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBleHByZXNzW2ldW2kyXSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjb2xvcnM7XG59O1xuXG5cbmZ1bmN0aW9uIGRlZXBDb3B5KG9iaikge1xuICAgIGxldCByZXN1bHQgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAnb2JqZWN0JyAmJiBvYmpba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZGVlcENvcHkob2JqW2tleV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7XG4gICAgb3BlcmF0b3IsXG4gICAgb3BlcmF0aW9uLFxuICAgIGN1dFN0cixcbiAgICBjdXR0aW5nLFxuICAgIGN1dHRpbmcyLFxuICAgIGlzQWJzb2x1dGVWYWx1ZSxcbiAgICBjdXR0aW5nQnlQb3MsXG4gICAgY3V0Rmlyc3QsXG4gICAgb3BlcmF0aW9uMyxcbiAgICBjdXR0aW5nQnlQb3NFbmQsXG4gICAgY2hhbmdlRm9ybXVsYSxcbiAgICB2YWx1ZTJhYnNvbHV0ZSxcbiAgICBzcGxpdFN0cixcbiAgICBpc1NoZWV0VmFsZSxcbiAgICBjdXR0aW5nQnlQb3NFbmQyLFxuICAgIGN1dHRpbmdCeVBvczIsXG4gICAgcG9zaXRpb25BbmdsZSxcbiAgICBkZWVwQ29weSxcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cblxuLy8gaW1wb3J0IHtzZXRDb2xvcn0gZnJvbSBcIi4uL3BsdWctaW4vcmV2aXNpb25cIjtcblxubGV0IHJlbW92ZUV2ZW50ID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kKHRhcmdldCwgbmFtZSwgZm4pIHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmbik7XG4gICAgcmVtb3ZlRXZlbnQucHVzaCh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGZuOiBmbixcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlRXZlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHJlID0gcmVtb3ZlRXZlbnRbaV07XG4gICAgICAgIHVuYmluZChyZS50YXJnZXQsIHJlLm5hbWUsIHJlLmZuKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmJpbmQodGFyZ2V0LCBuYW1lLCBmbikge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGZuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuYmluZENsaWNrb3V0c2lkZShlbCkge1xuICAgIGlmIChlbC54Y2xpY2tvdXRzaWRlKSB7XG4gICAgICAgIHVuYmluZCh3aW5kb3cuZG9jdW1lbnQuYm9keSwgJ2NsaWNrJywgZWwueGNsaWNrb3V0c2lkZSk7XG4gICAgICAgIGRlbGV0ZSBlbC54Y2xpY2tvdXRzaWRlO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGtleUNvZGUsIG1ldGFLZXksIG5hbWUgPSBcImtleWRvd25cIiwgYnV0dG9ucyA9IC0xKSB7XG4gICAgbGV0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgZXZlbnQuZXZlbnRUeXBlID0gJ21lc3NhZ2UnO1xuICAgIGV2ZW50LmJ1dHRvbnMgPSBidXR0b25zO1xuICAgIGV2ZW50LmtleUNvZGUgPSBrZXlDb2RlO1xuICAgIGV2ZW50Lm1ldGFLZXkgPSBtZXRhS2V5O1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG4vLyB0aGUgbGVmdCBtb3VzZSBidXR0b246IG1vdXNlZG93biDihpIgbW91c2V1cCDihpIgY2xpY2tcbi8vIHRoZSByaWdodCBtb3VzZSBidXR0b246IG1vdXNlZG93biDihpIgY29udGVueHRtZW51IOKGkiBtb3VzZXVwXG4vLyB0aGUgcmlnaHQgbW91c2UgYnV0dG9uIGluIGZpcmVmb3goPjY1LjApOiBtb3VzZWRvd24g4oaSIGNvbnRlbnh0bWVudSDihpIgbW91c2V1cCDihpIgY2xpY2sgb24gd2luZG93XG5leHBvcnQgZnVuY3Rpb24gYmluZENsaWNrb3V0c2lkZShlbCwgY2IpIHtcbiAgICBlbC54Y2xpY2tvdXRzaWRlID0gKGV2dCkgPT4ge1xuICAgICAgICAvLyBpZ25vcmUgZG91YmxlIGNsaWNrXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdldnQ6JywgZXZ0KTtcbiAgICAgICAgaWYgKGV2dC5kZXRhaWwgPT09IDIgfHwgZWwuY29udGFpbnMoZXZ0LnRhcmdldCkpIHJldHVybjtcbiAgICAgICAgaWYgKGNiKSBjYihlbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuaGlkZSgpO1xuICAgICAgICAgICAgdW5iaW5kQ2xpY2tvdXRzaWRlKGVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgYmluZCh3aW5kb3cuZG9jdW1lbnQuYm9keSwgJ2NsaWNrJywgZWwueGNsaWNrb3V0c2lkZSk7XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBiaW5kQ2xpY2tvdXRzaWRlMihlbCwgcmV2aXNpb24pIHtcbi8vICAgICBlbC54Y2xpY2tvdXRzaWRlID0gKGV2dCkgPT4ge1xuLy8gICAgICAgICAvLyBpZ25vcmUgZG91YmxlIGNsaWNrXG4vLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdldnQ6JywgZXZ0KTtcbi8vICAgICAgICAgaWYgKGV2dC5idXR0b25zID09PSAyIHx8IGVsLmNvbnRhaW5zKGV2dC50YXJnZXQpKSByZXR1cm4gZmFsc2U7XG4vLyAgICAgICAgIGVsc2Uge1xuLy8gICAgICAgICAgICAgLy8gc2V0Q29sb3IuY2FsbChyZXZpc2lvbik7XG4vLyAgICAgICAgICAgICBlbC5oaWRlKCk7XG4vLyAgICAgICAgICAgICB1bmJpbmRDbGlja291dHNpZGUoZWwpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfTtcbi8vICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudC5ib2R5LCAnbW91c2Vkb3duJywgZWwueGNsaWNrb3V0c2lkZSk7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3VzZU1vdmVVcCh0YXJnZXQsIG1vdmVmdW5jLCB1cGZ1bmMpIHtcbiAgICBiaW5kKHRhcmdldCwgJ21vdXNlbW92ZScsIG1vdmVmdW5jKTtcbiAgICB0YXJnZXQueEV2dFVwID0gKGV2dCkgPT4ge1xuICAgICAgICB1bmJpbmQodGFyZ2V0LCAnbW91c2Vtb3ZlJywgbW92ZWZ1bmMpO1xuICAgICAgICB1bmJpbmQodGFyZ2V0LCAnbW91c2V1cCcsIHRhcmdldC54RXZ0VXApO1xuICAgICAgICB1cGZ1bmMoZXZ0KTtcbiAgICB9O1xuICAgIGJpbmQodGFyZ2V0LCAnbW91c2V1cCcsIHRhcmdldC54RXZ0VXApO1xufVxuXG5cbmZ1bmN0aW9uIGNhbFRvdWNoRGlyZWN0aW9uKHNwYW54LCBzcGFueSwgZXZ0LCBjYikge1xuICAgIGxldCBkaXJlY3Rpb24gPSAnJztcbiAgICAvLyBjb25zb2xlLmxvZygnc3Bhbng6Jywgc3BhbngsICcsIHNwYW55OicsIHNwYW55KTtcbiAgICBpZiAoTWF0aC5hYnMoc3BhbngpID4gTWF0aC5hYnMoc3BhbnkpKSB7XG4gICAgICAgIC8vIGhvcml6b250YWxcbiAgICAgICAgZGlyZWN0aW9uID0gc3BhbnggPiAwID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgY2IoZGlyZWN0aW9uLCBzcGFueCwgZXZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB2ZXJ0aWNhbFxuICAgICAgICBkaXJlY3Rpb24gPSBzcGFueSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgICBjYihkaXJlY3Rpb24sIHNwYW55LCBldnQpO1xuICAgIH1cbn1cblxuLy8gY2IgPSAoZGlyZWN0aW9uLCBkaXN0YW5jZSkgPT4ge31cbmV4cG9ydCBmdW5jdGlvbiBiaW5kVG91Y2godGFyZ2V0LCB7bW92ZSwgZW5kfSkge1xuICAgIGxldCBzdGFydHggPSAwO1xuICAgIGxldCBzdGFydHkgPSAwO1xuICAgIGJpbmQodGFyZ2V0LCAndG91Y2hzdGFydCcsIChldnQpID0+IHtcbiAgICAgICAgY29uc3Qge3BhZ2VYLCBwYWdlWX0gPSBldnQudG91Y2hlc1swXTtcbiAgICAgICAgc3RhcnR4ID0gcGFnZVg7XG4gICAgICAgIHN0YXJ0eSA9IHBhZ2VZO1xuICAgIH0pO1xuICAgIGJpbmQodGFyZ2V0LCAndG91Y2htb3ZlJywgKGV2dCkgPT4ge1xuICAgICAgICBpZiAoIW1vdmUpIHJldHVybjtcbiAgICAgICAgY29uc3Qge3BhZ2VYLCBwYWdlWX0gPSBldnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgIGNvbnN0IHNwYW54ID0gcGFnZVggLSBzdGFydHg7XG4gICAgICAgIGNvbnN0IHNwYW55ID0gcGFnZVkgLSBzdGFydHk7XG4gICAgICAgIGlmIChNYXRoLmFicyhzcGFueCkgPiAxMCB8fCBNYXRoLmFicyhzcGFueSkgPiAxMCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3NwYW54OicsIHNwYW54LCAnLCBzcGFueTonLCBzcGFueSk7XG4gICAgICAgICAgICBjYWxUb3VjaERpcmVjdGlvbihzcGFueCwgc3BhbnksIGV2dCwgbW92ZSk7XG4gICAgICAgICAgICBzdGFydHggPSBwYWdlWDtcbiAgICAgICAgICAgIHN0YXJ0eSA9IHBhZ2VZO1xuICAgICAgICB9XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIGJpbmQodGFyZ2V0LCAndG91Y2hlbmQnLCAoZXZ0KSA9PiB7XG4gICAgICAgIGlmICghZW5kKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHtwYWdlWCwgcGFnZVl9ID0gZXZ0LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICBjb25zdCBzcGFueCA9IHBhZ2VYIC0gc3RhcnR4O1xuICAgICAgICBjb25zdCBzcGFueSA9IHBhZ2VZIC0gc3RhcnR5O1xuICAgICAgICBjYWxUb3VjaERpcmVjdGlvbihzcGFueCwgc3BhbnksIGV2dCwgZW5kKTtcbiAgICB9KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc0hhdmUocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHBhcmFtID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IGVuIGZyb20gJy4vZW4nO1xuXG5sZXQgJGxhbmcgPSAnZW4nO1xuY29uc3QgJG1lc3NhZ2VzID0ge1xuICAgIGVuLFxufTtcblxuZnVuY3Rpb24gdHJhbnNsYXRlKGtleSwgbWVzc2FnZXMpIHtcbiAgICBpZiAobWVzc2FnZXMgJiYgbWVzc2FnZXNbJGxhbmddKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gbWVzc2FnZXNbJGxhbmddO1xuICAgICAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtZXNzYWdlW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIGlmIChpID09PSBrZXlzLmxlbmd0aCAtIDEpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBtZXNzYWdlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gdChrZXkpIHtcbiAgICBsZXQgdiA9IHRyYW5zbGF0ZShrZXksICRtZXNzYWdlcyk7XG4gICAgaWYgKCF2ICYmIHdpbmRvdyAmJiB3aW5kb3cueCAmJiB3aW5kb3cueC5zcHJlYWRzaGVldCAmJiB3aW5kb3cueC5zcHJlYWRzaGVldC4kbWVzc2FnZXMpIHtcbiAgICAgICAgdiA9IHRyYW5zbGF0ZShrZXksIHdpbmRvdy54LnNwcmVhZHNoZWV0LiRtZXNzYWdlcyk7XG4gICAgfVxuICAgIHJldHVybiB2IHx8ICcnO1xufVxuXG5mdW5jdGlvbiB0ZihrZXkpIHtcbiAgICByZXR1cm4gKCkgPT4gdChrZXkpO1xufVxuXG5mdW5jdGlvbiBsb2NhbGUobGFuZywgbWVzc2FnZSkge1xuICAgICRsYW5nID0gbGFuZztcbiAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAkbWVzc2FnZXNbbGFuZ10gPSBtZXNzYWdlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHQsXG59O1xuXG5leHBvcnQge1xuICAgIGxvY2FsZSxcbiAgICB0LFxuICAgIHRmLFxufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVEZWVwKG9iaikge1xuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBpc0VxdWFsKHYxLCB2Mikge1xuLy8gICAgIHYxID0gdjEgKyBcIlwiO1xuLy8gICAgIHYyID0gdjIgKyBcIlwiO1xuLy8gICAgIHYxID0gdjEudG9VcHBlckNhc2UoKTtcbi8vICAgICB2MiA9IHYyLnRvVXBwZXJDYXNlKCk7XG4vL1xuLy8gICAgIHJldHVybiB2MSA9PT0gdjI7XG4vLyB9XG5cbmV4cG9ydCBjb25zdCBtZXJnZURlZXAgPSAob2JqZWN0ID0ge30sIC4uLnNvdXJjZXMpID0+IHtcbiAgICBzb3VyY2VzLmZvckVhY2goKHNvdXJjZSkgPT4ge1xuICAgICAgICBpZiAoc291cmNlICE9PSBudWxsICYmIHNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnazonLCBrZXksICcsIHY6Jywgc291cmNlW2tleV0sIHR5cGVvZiB2LCB2IGluc3RhbmNlb2YgT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gdjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ICE9PSAnZnVuY3Rpb24nICYmICFBcnJheS5pc0FycmF5KHYpICYmIHYgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBvYmplY3Rba2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VEZWVwKG9iamVjdFtrZXldLCB2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBjb25zb2xlLmxvZygnOjonLCBvYmplY3QpO1xuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZChhcnIsIHN0cikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzdHIuaW5kZXhPZihhcnJbaV0pICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc091c2lkZVZpZXdSYW5nZSh5LCB4LCBkeSwgZHgsIG9yaWVuKSB7XG4gICAgaWYgKG9yaWVuID09PSA0NCAmJiBkeSAtIHkgKyAxMDAgPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDExICYmIGR4IC0gMTAwIDwgMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG9yaWVuID09PSAzMyAmJiBkeCAtIHggKyAxMDAgPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDIyICYmIGR5IC0gMTAwIDwgMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKG9iajEsIG9iajIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqMSk7XG4gICAgaWYgKGtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgICAgIGNvbnN0IHYxID0gb2JqMVtrXTtcbiAgICAgICAgY29uc3QgdjIgPSBvYmoyW2tdO1xuICAgICAgICBpZiAodjIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIHYxID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdjEgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2MSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAodjEgIT09IHYyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2MSkpIHtcbiAgICAgICAgICAgIGlmICh2MS5sZW5ndGggIT09IHYyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZm9yIChsZXQgYWkgPSAwOyBhaSA8IHYxLmxlbmd0aDsgYWkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmICghZXF1YWxzKHYxW2FpXSwgdjJbYWldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2MSAhPT0gJ2Z1bmN0aW9uJyAmJiAhQXJyYXkuaXNBcnJheSh2MSkgJiYgdjEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgIGlmICghZXF1YWxzKHYxLCB2MikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsdWVWYWxpZChwYXJhbSkge1xuICAgIGlmICh0eXBlb2YgcGFyYW0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwYXJhbSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtICE9PSBudWxsO1xufVxuXG4vKlxuICBvYmpPckFyeTogb2JlamN0IG9yIEFycmF5XG4gIGNiOiAodmFsdWUsIGluZGV4IHwga2V5KSA9PiB7IHJldHVybiB2YWx1ZSB9XG4qL1xuZXhwb3J0IGNvbnN0IHN1bSA9IChvYmpPckFyeSwgY2IgPSB2YWx1ZSA9PiB2YWx1ZSkgPT4ge1xuICAgIGxldCB0b3RhbCA9IDA7XG4gICAgbGV0IHNpemUgPSAwO1xuICAgIE9iamVjdC5rZXlzKG9iak9yQXJ5KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgdG90YWwgKz0gY2Iob2JqT3JBcnlba2V5XSwga2V5KTtcbiAgICAgICAgc2l6ZSArPSAxO1xuICAgIH0pO1xuICAgIHJldHVybiBbdG90YWwsIHNpemVdO1xufTtcblxuLy8gZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkob2JqLCBwcm9wZXJ0eSkge1xuLy8gICAgIGNvbnN0IG9sZHYgPSBvYmpbYCR7cHJvcGVydHl9YF07XG4vLyAgICAgZGVsZXRlIG9ialtgJHtwcm9wZXJ0eX1gXTtcbi8vICAgICByZXR1cm4gb2xkdjtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlUmVkdWNlSWYobWluLCBtYXgsIGluaXRzLCBpbml0diwgaWZ2LCBnZXR2KSB7XG4gICAgbGV0IHMgPSBpbml0cztcbiAgICBsZXQgdiA9IGluaXR2O1xuICAgIGxldCBpID0gbWluO1xuICAgIGZvciAoOyBpIDwgbWF4OyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHMgPiBpZnYpIGJyZWFrO1xuICAgICAgICB2ID0gZ2V0dihpKTtcbiAgICAgICAgcyArPSB2O1xuICAgIH1cbiAgICByZXR1cm4gW2ksIHMgLSB2LCB2XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlU3VtKG1pbiwgbWF4LCBnZXR2KSB7XG4gICAgbGV0IHMgPSAwO1xuICAgIGZvciAobGV0IGkgPSBtaW47IGkgPCBtYXg7IGkgKz0gMSkge1xuICAgICAgICBzICs9IGdldHYoaSk7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXREYXRhKSB7XG4gICAgLy8gaWYgKHBhcnNlRmxvYXQoaW5wdXREYXRhKS50b1N0cmluZygpID09PSBcIk5hTlwiKSB7XG4gICAgLy8gICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgICByZXR1cm4gcGFyc2VGbG9hdChpbnB1dERhdGEpLnRvU3RyaW5nKCkgPT09IFwiTmFOXCI7XG4gICAgLy8gfVxuICAgIHJldHVybiBwYXJzZUZsb2F0KGlucHV0RGF0YSkudG9TdHJpbmcoKSAhPT0gXCJOYU5cIjtcbn1cblxuLy8gZnVuY3Rpb24gcmFuZ2VFYWNoKG1pbiwgbWF4LCBjYikge1xuLy8gICAgIGZvciAobGV0IGkgPSBtaW47IGkgPCBtYXg7IGkgKz0gMSkge1xuLy8gICAgICAgICBjYihpKTtcbi8vICAgICB9XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheUVxdWFscyhhMSwgYTIpIHtcbiAgICBpZiAoYTEubGVuZ3RoID09PSBhMi5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGExW2ldICE9PSBhMltpXSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZSguLi5zb3VyY2VzKXtcbiAgICByZXR1cm4gbWVyZ2VEZWVwKHt9LCAuLi5zb3VyY2VzKVxufVxuIiwiXG5leHBvcnQgY29uc3QgTVNfUEVSX0RBWSA9IDg2NDAwMDAwOyAvLyAyNCAqIDYwICogNjAgKiAxMDAwXG5leHBvcnQgY29uc3QgY29tbW9uX29wZXJhdGlvbnMgPSB7IC8vIHRvZG86IOmcgOimgeaKiui/meS4quW4uOaVsOaUvuWIsGNvbmZpZ+mHjOmdolxuICAnKic6ICdtdWx0aXBseScsXG4gICcrJzogJ3BsdXMnLFxuICAnLSc6ICdzdWJ0cmFjdERheXMnLFxuICAnLyc6ICdkaXZpZGUnLFxuICAnXic6ICdwb3dlcicsXG4gICcmJzogJ2NvbmNhdCcsXG4gICc8JzogJ2x0JyxcbiAgJz4nOiAnZ3QnLFxuICAnPSc6ICdlcSdcbn07XG5cbmV4cG9ydCBjb25zdCBGT1JNVUxBX1NUQVRVUyA9IHtcbiAgY3JlYXRlZDogXCJjcmVhdGVkXCIsXG4gIGVkaXRlZDogXCJlZGl0ZWRcIiwgLy8g6KKr5L+u5pS55LqGXG4gIHdvcmtpbmc6IFwid29ya2luZ1wiLFxuICBzb2x2ZWQ6IFwic29sdmVkXCIsXG59XG5cbmV4cG9ydCBjb25zdCBNQVJLX09CSj0geyAvLyB0b2RvOiDpnIDopoHmiorov5nkuKrluLjmlbDmlL7liLBjb25maWfph4zpnaJcbiAgcGVyY2VudDogXCIlXCIsIC8vIOWNleWFg+i/kOeul+esplxuICBzdGFyIDogJyonLCAvL+WPjOWFg+i/kOeul+esplxuICBwbHVzOiAnKycsIC8v5Y+M5YWD6L+Q566X56ymXG4gIGRhc2g6ICctJywgLy/lj4zlhYPov5DnrpfnrKYg5oiW5Y2V5YWD6L+Q566X56ymXG4gIHNsYXNoOiAnLycsIC8v5Y+M5YWD6L+Q566X56ymXG4gIGNhcmV0OiAnXicsIC8v5Y+M5YWD6L+Q566X56ymXG4gIGV4Y2xhbWF0aW9uOiAnIScsIC8vIG9rXG4gIGFtcGVyc2FuZDogJyYnLCAvL+WPjOWFg+i/kOeul+esplxuICBsZXNzVGhlbjogJzwnLCAvL+WPjOWFg+i/kOeul+esplxuICBncmVhdGVyVGhlbjogJz4nLCAvL+WPjOWFg+i/kOeul+esplxuICBsZWZ0UGFyZW50aGVzZXM6ICcoJyxcbiAgcmlnaHRQYXJlbnRoZXNlczogJyknLFxuICBjb21tYTogJywnLFxuICBsZWZ0QnJhY2tldDogJ1snLFxuICByaWdodEJyYWNrZXQ6ICddJyxcbiAgbGVmdEJyYWNlIDogJ30nLFxuICByaWdodEJyYWNlIDogJ3snLFxuICBlcXVhbDogXCI9XCIsIC8vIOWPjOWFg+i/kOeul+espuaYr+WQpuetieS6jlxuICBjb2xvbjogXCI6XCIsXG4gIGhhc2g6IFwiI1wiLCAvLyDlj6/ku6XnlKjkvZzmuqLlh7rov5DnrpfnrKbvvIzmlrDnmoTmuqLlh7rlip/og71cbiAgYXQ6J0AnLCAvLyDlvJXnlKjov5DnrpfnrKbvvIzmiJHkuZ/kuI3mmK/lvojnkIbop6NcbiAgc3BhY2U6IFwiIFwiLCAvLyDku6Pooajlj6/ku6Xlv73nlaXnmoTnqbrnmb3vvIzmiJbogIXkuLrkuqTpm4bov5DnrpfnrKZcbn07XG5cbmV4cG9ydCBjb25zdCBtdWx0aUNoYXJ0T3BlcmF0b3IgPXtcbiAgbm90RXF1YWw6IFwiPD5cIixcbiAgZ3JlYXRlckVxdWFsOiBcIj49XCIsXG4gIGxlc3NFcXVhbDogXCI8PVwiLFxufVxuXG5leHBvcnQgY29uc3Qgc2luZ2xlQ2hhcnRPcGVyYXRvciA9e1xuICBwZXJjZW50OiBcIiVcIiwgLy8g5Y2V5YWD6L+Q566X56ymXG4gIHN0YXIgOiAnKicsIC8v5Y+M5YWD6L+Q566X56ymXG4gIHBsdXM6ICcrJywgLy/lj4zlhYPov5DnrpfnrKZcbiAgc2xhc2g6ICcvJywgLy/lj4zlhYPov5DnrpfnrKZcbiAgY2FyZXQ6ICdeJywgLy/lj4zlhYPov5DnrpfnrKZcbiAgYW1wZXJzYW5kOiAnJicsIC8v5Y+M5YWD6L+Q566X56ymXG4gIGxlc3NUaGVuOiAnPCcsIC8v5Y+M5YWD6L+Q566X56ymXG4gIGdyZWF0ZXJUaGVuOiAnPicsIC8v5Y+M5YWD6L+Q566X56ymXG4gIGVxdWFsOiBcIj1cIiwgLy8g5Y+M5YWD6L+Q566X56ym5piv5ZCm562J5LqOXG59XG5cbmV4cG9ydCBjb25zdCBwcmVEZWZpbmVkQ29uc3Q9e1xuICB0cnVlOiBcIlRSVUVcIixcbiAgZmFsc2U6XCJGQUxTRVwiXG59XG5cbmV4cG9ydCBjb25zdCBtb25leVVuaXRPYmogPSB7XG4gIGRvbGxhcjpcIiRcIixcbiAgcm1iOiBcIu+/pVwiLFxufVxuXG4vLyDov5nkuKrml6XmnJ/kvZzkuLrml6XmnJ/nmoTotbfngrlcbmV4cG9ydCBjb25zdCBkMTg5OTEyMzAgPSBuZXcgRGF0ZSgxODk5LCAxMSwgMzApOyAvLyBqc+S4rTDku6Pooagx5pyI77yMMTHku6PooagxMuaciFxuIiwiaW1wb3J0IHsgRWxlbWVudCwgaCB9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29uIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICBzdXBlcignZGl2JywgYCR7Y3NzUHJlZml4fS1pY29uYCk7XG4gICAgdGhpcy5pY29uTmFtZUVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1pY29uLWltZyAke25hbWV9YCk7XG4gICAgdGhpcy5jaGlsZCh0aGlzLmljb25OYW1lRWwpO1xuICB9XG5cbiAgc2V0TmFtZShuYW1lKSB7XG4gICAgdGhpcy5pY29uTmFtZUVsLmNsYXNzTmFtZShgJHtjc3NQcmVmaXh9LWljb24taW1nICR7bmFtZX1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtlcnJvck9ian0gZnJvbSAnLi4vLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcnXG5pbXBvcnQgeyBkMTg5OTEyMzAsIE1TX1BFUl9EQVkgfSBmcm9tICcuLi8uLi9jYWxjX3V0aWxzL2NvbmZpZyc7XG5pbXBvcnQge0NlbGxWRGF0ZVRpbWV9IGZyb20gXCIuLi8uLi9jZWxsX3ZhbHVlX3R5cGUvY2VsbF92YWx1ZVwiXG5cbmZ1bmN0aW9uIGZsYXR0ZW5TaGFsbG93KGFycmF5KSB7XG4gIGlmICghYXJyYXkgfHwgIWFycmF5LnJlZHVjZSkgeyByZXR1cm4gYXJyYXk7IH1cbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XG4gICAgbGV0IGFJc0FycmF5ID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICBsZXQgYklzQXJyYXkgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgIGlmIChhSXNBcnJheSAmJiBiSXNBcnJheSApIHtcbiAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICB9XG4gICAgaWYgKGFJc0FycmF5KSB7XG4gICAgICBhLnB1c2goYik7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgaWYgKGJJc0FycmF5KSB7XG4gICAgICByZXR1cm4gW2FdLmNvbmNhdChiKTtcbiAgICB9XG4gICAgcmV0dXJuIFthLCBiXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzRmxhdChhcnJheSkge1xuICBpZiAoIWFycmF5KSB7IHJldHVybiBmYWxzZTsgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnRzLmZsYXR0ZW4gPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJlc3VsdCA9IGV4cG9ydHMuYXJnc1RvQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgd2hpbGUgKCFpc0ZsYXQocmVzdWx0KSkge1xuICAgIHJlc3VsdCA9IGZsYXR0ZW5TaGFsbG93KHJlc3VsdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuYXJnc1RvQXJyYXkgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAwKTtcbn07XG5cbmV4cG9ydHMubnVtYmVycyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcG9zc2libGVOdW1iZXJzID0gdGhpcy5mbGF0dGVuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBwb3NzaWJsZU51bWJlcnMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbCA9PT0gJ251bWJlcic7XG4gIH0pO1xufTtcbi8vWFc6IOWwhuWPguaVsOino+aekOaIkOaVsOWtl+aVsOe7hO+8jOiLpeacieS4jeespuWQiOimgeaxgueahOaKpemUme+8jGRlZmF1bHQw5b+955WlXG5mdW5jdGlvbiBwYXJzZShhKXtcbiAgaWYgKGEgaW5zdGFuY2VvZiBFcnJvcil7XG4gICAgcmV0dXJuIGFcbiAgfVxuICBpZiAoYSBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICBsZXQgYXJyID0gW11cbiAgICBmb3IgKGxldCBpPTA7aTxhLmxlbmd0aDtpKyspe1xuICAgICAgaWYgKHR5cGVvZiBhW2ldWzBdID09PSAnc3RyaW5nJyAmJiBhW2ldWzBdICE9PSAnZGVmYXVsdF8wJyl7XG4gICAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQU1FXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGFbaV1bMF0gPT09ICdudW1iZXInKXtcbiAgICAgICAgYXJyLnB1c2goYVtpXVswXSlcbiAgICAgIH1cbiAgICAgIGlmIChhW2ldWzBdIGluc3RhbmNlb2YgT2JqZWN0KXtcbiAgICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BTUVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyclxuICB9XG4gIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpe1xuICAgIGlmIChhID09PSAnZGVmYXVsdF8wJyl7XG4gICAgICByZXR1cm4gJ3Bhc3MnXG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFNRVxuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGEgPT09ICdudW1iZXInKXtcbiAgICByZXR1cm4gYVxuICB9XG59XG5leHBvcnRzLmZsYXR0ZW5OdW0gPSBmdW5jdGlvbihhcmdzKSB7XG4gIHRyeXtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXVswXSA9PT0gJ2RlZmF1bHRfMCcpe1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX0RJVjBcbiAgICB9XG4gICAgbGV0IGFyciA9IFtdXG4gICAgZm9yKCBsZXQgaT0wO2k8YXJncy5sZW5ndGg7aSsrKXtcbiAgICAgIGxldCBwID0gcGFyc2UoYXJnc1tpXSlcbiAgICAgIGlmIChwID09PSB1bmRlZmluZWQpe1xuICAgICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFNRVxuICAgICAgfVxuICAgICAgaWYgKHAgaW5zdGFuY2VvZiBFcnJvcil7XG4gICAgICAgIHJldHVybiBwXG4gICAgICB9ZWxzZSBpZihwICE9PSAncGFzcycpe1xuICAgICAgICBpZiAocCBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICBmb3IgKGxldCBuPTA7IG4gPCBwLmxlbmd0aDtuKyspe1xuICAgICAgICAgICAgYXJyLnB1c2gocFtuXSlcbiAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGFyci5wdXNoKHApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyclxuICB9Y2F0Y2h7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BTUVcbiAgfVxufTtcbi8vWFc6ZW5kXG5cbmV4cG9ydHMuY2xlYW5GbG9hdCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBsZXQgcG93ZXIgPSAxZTE0O1xuICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIgKiBwb3dlcikgLyBwb3dlcjtcbn07XG5cbmV4cG9ydHMucGFyc2VCb29sID0gZnVuY3Rpb24oYm9vbCkge1xuICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKXtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmICh0eXBlb2YgYm9vbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGJvb2w7XG4gIH1cblxuICBpZiAoYm9vbCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGJvb2w7XG4gIH1cblxuICBpZiAodHlwZW9mIGJvb2wgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGJvb2wgIT09IDA7XG4gIH1cblxuICBpZiAodHlwZW9mIGJvb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IHVwID0gYm9vbC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmICh1cCA9PT0gJ1RSVUUnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodXAgPT09ICdGQUxTRScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYm9vbCBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKGJvb2wpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG59O1xuXG5leHBvcnRzLnBhcnNlTnVtYmVyID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGlmIChzdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBzdHJpbmcgPT09ICcnKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmICghaXNOYU4oc3RyaW5nKSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xufTtcblxuZXhwb3J0cy5wYXJzZU51bWJlckFycmF5ID0gZnVuY3Rpb24oYXJyKSB7XG4gIGxldCBsZW47XG4gIGlmICghYXJyIHx8IChsZW4gPSBhcnIubGVuZ3RoKSA9PT0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcGFyc2VkO1xuICB3aGlsZSAobGVuLS0pIHtcbiAgICBwYXJzZWQgPSBleHBvcnRzLnBhcnNlTnVtYmVyKGFycltsZW5dKTtcbiAgICBpZiAocGFyc2VkID09PSBlcnJvck9iai5FUlJPUl9WQUxVRSkge1xuICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gICAgYXJyW2xlbl0gPSBwYXJzZWQ7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG5cbmV4cG9ydHMucGFyc2VNYXRyaXggPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgbGV0IG47XG4gIGlmICghbWF0cml4IHx8IChuID0gbWF0cml4Lmxlbmd0aCkgPT09IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHBuYXJyO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKykge1xuICAgIHBuYXJyID0gZXhwb3J0cy5wYXJzZU51bWJlckFycmF5KG1hdHJpeFtpXSk7XG4gICAgbWF0cml4W2ldID0gcG5hcnI7XG4gICAgaWYgKHBuYXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBwbmFycjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdHJpeDtcbn07XG5cbmV4cG9ydHMucGFyc2VEYXRlID0gZnVuY3Rpb24oZGF0ZSkgeyAvLyDop6PmnpDkuLpEYXRl55qE5b2i5byPXG4gIGxldCB0aGVEYXRlXG4gIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHRoZURhdGUgPSBkYXRlO1xuICAgIH1cbiAgICBsZXQgZCA9IHBhcnNlSW50KGRhdGUsIDEwKTtcbiAgICBpZiAoZCA8IDApIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gICAgfVxuICAgIHRoZURhdGUgPSBuZXcgRGF0ZShkMTg5OTEyMzAuZ2V0VGltZSgpICsgZCAgKiBNU19QRVJfREFZKTtcbiAgfVxuICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhlRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICAgIHRoZURhdGUgPSBkYXRlO1xuICAgIH1cbiAgfVxuICBpZih0aGVEYXRlIGluc3RhbmNlb2YgRGF0ZSl7XG4gICAgcmV0dXJuIHRoZURhdGVcbiAgfVxuICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG59O1xuXG5cbmV4cG9ydHMuQ29weSA9ICBmdW5jdGlvbiAob2JqKSB7XG4gIC8vIEhhbmRsZSB0aGUgMyBzaW1wbGUgdHlwZXMsIGFuZCBudWxsIG9yIHVuZGVmaW5lZFxuICBpZiAobnVsbCA9PSBvYmogfHwgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iaikgcmV0dXJuIG9iajtcbiAgLy8gSGFuZGxlIERhdGVcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICBsZXQgY29weSA9IG5ldyBEYXRlKCk7XG4gICAgY29weS5zZXRUaW1lKG9iai5nZXRUaW1lKCkpO1xuICAgIHJldHVybiBjb3B5O1xuICB9XG4gIC8vIEhhbmRsZSBBcnJheVxuICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBsZXQgY29weSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb3B5W2ldID0gY2xvbmUob2JqW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG4gIH1cbiAgLy8gSGFuZGxlIE9iamVjdFxuICBpZiAob2JqIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgbGV0IGNvcHkgPSB7fTtcbiAgICBmb3IgKGxldCBhdHRyIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgY29weVthdHRyXSA9IGNsb25lKG9ialthdHRyXSk7XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjb3B5IG9iaiEgSXRzIHR5cGUgaXNuJ3Qgc3VwcG9ydGVkLlwiKTtcbn07XG4vL1hXOnt95Lit5Y+C5pWw6Kej5p6QLOWwhnsxLDIsM++8mzQsNSw2fei/meagt+eahOWPguaVsOino+aekOS4uuaVsOe7hOe7k+aehFxuZnVuY3Rpb24gcGFyc2VfYXJnKGFyZykge1xuICBpZighaXNOYU4ocGFyc2VJbnQoYXJnKSkpe1xuICAgIHJldHVybiBwYXJzZUludChhcmcpXG4gIH1cbiAgcmV0dXJuIGFyZy5yZXBsYWNlKCdcIicsICcnKS5yZXBsYWNlKCdcIicsICcnKVxufVxuZXhwb3J0cy5zdHJUb01hdHJpeCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgbGV0IGFyZyA9IHN0ci5zbGljZSgyLHN0ci5sZW5ndGgtMikuc3BsaXQoJywnKVxuICBsZXQgbWF0cml4ID0gW107XG4gIGxldCBhcnIgPSBbXVxuICBmb3IgKGxldCBpPTA7IGkgPCBhcmcubGVuZ3RoOyBpKyspe1xuICAgIGxldCBudW0gPSBhcmdbaV0udG9TdHJpbmcoKVxuICAgIGlmIChudW0uaW5kZXhPZignOycpID4gMCkge1xuICAgICAgYXJyLnB1c2gocGFyc2VfYXJnKG51bS5zcGxpdCgnOycpWzBdKSlcbiAgICAgIG1hdHJpeC5wdXNoKGFycilcbiAgICAgIGFyciA9IFtwYXJzZV9hcmcobnVtLnNwbGl0KCc7JylbMV0pXVxuICAgIH1lbHNle1xuICAgICAgYXJyLnB1c2gocGFyc2VfYXJnKG51bSkpXG4gICAgfVxuICB9XG4gIG1hdHJpeC5wdXNoKGFycilcbiAgcmV0dXJuIG1hdHJpeFxufVxuLy9YVzogZW5kXG4vL1hX77yaZXhjZWzml6XmnJ/ovaxqc+aXpeacn1xuZXhwb3J0cy5FeGNlbERhdGVUb0pTRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gIGlmICh0eXBlb2YgZGF0ZSA9PSAnc3RyaW5nJyl7XG4gICAgZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShpc3N1ZSlcbiAgfVxuICByZXR1cm4gKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSA/IGRhdGUgOiBuZXcgRGF0ZShNYXRoLnJvdW5kKChkYXRlIC0gMjU1NjkpKk1TX1BFUl9EQVkpKTtcbn1cbi8vWFfvvJplbmRcbi8vWFfvvJrliKTlrprmmK/lkKbmmK/mlbDlrZdcbmV4cG9ydHMuaXNOdW1iZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gIGxldCByZWdQb3MgPSAvXlxcZCsoXFwuXFxkKyk/JC87IC8v6Z2e6LSf5rWu54K55pWwXG4gIGxldCByZWdOZWcgPSAvXigtKChbMC05XStcXC5bMC05XSpbMS05XVswLTldKil8KFswLTldKlsxLTldWzAtOV0qXFwuWzAtOV0rKXwoWzAtOV0qWzEtOV1bMC05XSopKSkkLzsgLy/otJ/mta7ngrnmlbBcbiAgaWYocmVnUG9zLnRlc3QodmFsKSB8fCByZWdOZWcudGVzdCh2YWwpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4vL1hX77yaZW5kXG5leHBvcnRzLnBhcnNlRGF0ZUFycmF5ID0gZnVuY3Rpb24oYXJyKSB7XG4gIGxldCBsZW4gPSBhcnIubGVuZ3RoO1xuICBsZXQgcGFyc2VkO1xuICB3aGlsZSAobGVuLS0pIHtcbiAgICBwYXJzZWQgPSB0aGlzLnBhcnNlRGF0ZShhcnJbbGVuXSk7XG4gICAgaWYgKHBhcnNlZCA9PT0gZXJyb3JPYmouRVJST1JfVkFMVUUpIHtcbiAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuICAgIGFycltsZW5dID0gcGFyc2VkO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG5leHBvcnRzLmFueUlzRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgbGV0IG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAobi0tKSB7XG4gICAgaWYgKGFyZ3VtZW50c1tuXSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0cy5hcnJheVZhbHVlc1RvTnVtYmVycyA9IGZ1bmN0aW9uKGFycikge1xuICBsZXQgbiA9IGFyci5sZW5ndGg7XG4gIGxldCBlbDtcbiAgd2hpbGUgKG4tLSkge1xuICAgIGVsID0gYXJyW25dO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdudW1iZXInKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGVsID09PSB0cnVlKSB7XG4gICAgICBhcnJbbl0gPSAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChlbCA9PT0gZmFsc2UpIHtcbiAgICAgIGFycltuXSA9IDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBudW1iZXIgPSB0aGlzLnBhcnNlTnVtYmVyKGVsKTtcbiAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBhcnJbbl0gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyW25dID0gbnVtYmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcblxuZXhwb3J0cy5yZXN0ID0gZnVuY3Rpb24oYXJyYXksIGlkeCkge1xuICBpZHggPSBpZHggfHwgMTtcbiAgaWYgKCFhcnJheSB8fCB0eXBlb2YgYXJyYXkuc2xpY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgcmV0dXJuIGFycmF5LnNsaWNlKGlkeCk7XG59O1xuXG5leHBvcnRzLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgaWR4KSB7XG4gIGlkeCA9IGlkeCB8fCAxO1xuICBpZiAoIWFycmF5IHx8IHR5cGVvZiBhcnJheS5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuICByZXR1cm4gYXJyYXkuc2xpY2UoMCwgYXJyYXkubGVuZ3RoIC0gaWR4KTtcbn07XG4iLCJpbXBvcnQge0VsZW1lbnQsIGh9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQge2JpbmRDbGlja291dHNpZGUsIHVuYmluZENsaWNrb3V0c2lkZX0gZnJvbSAnLi9ldmVudCc7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSAnLi4vY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJvcGRvd24gZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgd2lkdGgsIHNob3dBcnJvdywgcGxhY2VtZW50LCB7dHlwZSwgY2hhbmdlLCBhcnJvd0NoYW5nZSwgaGlzdG9yeUJvcmRlcn0sIC4uLmNoaWxkcmVuKSB7XG4gICAgICAgIHN1cGVyKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWRyb3Bkb3duICR7cGxhY2VtZW50fWApO1xuXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1kcm9wZG93bi10aXRsZWApLmNoaWxkKHRpdGxlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaG93QXJyb3cpIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGUuYWRkQ2xhc3MoJ2Fycm93LWxlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZHJvcGRvd24tY29udGVudGApXG4gICAgICAgICAgICAuY2hpbGRyZW4oLi4uY2hpbGRyZW4pXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAgICAgLmhpZGUoKTtcblxuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZHJvcGRvd24taGVhZGVyYCkub24oJ2NsaWNrJywgY2hhbmdlKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyRWwuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZSxcbiAgICAgICAgICAgICAgICBzaG93QXJyb3cgPyBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWljb24gYXJyb3ctcmlnaHRfZGApLmNoaWxkKFxuICAgICAgICAgICAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWljb24taW1nIGFycm93LWRvd25gKS5vbignY2xpY2suc3RvcCcsIChldnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93Q2hhbmdlKGhpc3RvcnlCb3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudEVsLmNzcygnZGlzcGxheScpICE9PSAnYmxvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICApIDogJycsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbih0aGlzLmhlYWRlckVsLCB0aGlzLmNvbnRlbnRFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlckVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1kcm9wZG93bi1oZWFkZXJgKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyRWwub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRFbC5jc3MoJ2Rpc3BsYXknKSAhPT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jaGlsZHJlbihcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgICAgIHNob3dBcnJvdyA/IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taWNvbiBhcnJvdy1yaWdodGApLmNoaWxkKFxuICAgICAgICAgICAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWljb24taW1nIGFycm93LWRvd25gKSxcbiAgICAgICAgICAgICAgICApIDogJycsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbih0aGlzLmhlYWRlckVsLCB0aGlzLmNvbnRlbnRFbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRUaXRsZSh0aXRsZSkge1xuICAgICAgICB0aGlzLnRpdGxlLmh0bWwodGl0bGUpO1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICBjb25zdCB7Y29udGVudEVsfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5zaG93KCk7XG4gICAgICAgIHRoaXMucGFyZW50KCkuYWN0aXZlKCk7XG4gICAgICAgIGJpbmRDbGlja291dHNpZGUodGhpcy5wYXJlbnQoKSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMucGFyZW50KCkuYWN0aXZlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuaGlkZSgpO1xuICAgICAgICB1bmJpbmRDbGlja291dHNpZGUodGhpcy5wYXJlbnQoKSk7XG4gICAgfVxufVxuIiwiLy8gam9iczogdG9kbzog5q2j5YiZ6KGo6L6+5byP5Y+v5Lul57uf5LiA5pS+5YiwdXRpbHMvcmVnX3BhdHRlcm4uanPmlofku7bkuK3ljrtcbmV4cG9ydCBjb25zdCBsb2dpY09wZXJhdG9yID0gXCIoWygtXFxcXC8sKyrvvIw9XiZdKVwiO1xuZXhwb3J0IGNvbnN0IGJsYW5rT3BlcmF0b3IgPSBcIiheXFxcXHMqKXwoXFxcXHMqJClcIjtcbmV4cG9ydCBjb25zdCBsZXR0ZXJPcGVyYXRvciA9IFwiXltBLVpdK1xcXFxkKyRcIjtcbmV4cG9ydCBjb25zdCBsZXR0ZXJPcGVyYXRvcklnbm9yZUJyYWNrZXQgPSBcIl5bQS1aXStcXFxcZCskXCI7XG5leHBvcnQgY29uc3QgbGV0dGVyT3BlcmF0b3JXaXRoRG9sbG9yID0gXCJeXFxcXCRbQS1aXStcXFxcJFxcXFxkKyRcIjtcbmV4cG9ydCBjb25zdCBsZXR0ZXJBbmRMZXR0ZXJPcGVyYXRvciA9IFwiXltBLVphLXpdK1xcXFxkKzpbQS1aYS16XStcXFxcZCskXCI7XG5leHBvcnQgY29uc3QgbGV0dGVyT3BlcmF0b3JXaXRoRG9sbG9yRW5kID0gXCJeW0EtWl0rXFxcXCRcXFxcZCskXCI7XG5leHBvcnQgY29uc3QgbGV0dGVyT3BlcmF0b3JXaXRoRG9sbG9yUHJleCA9IFwiXlxcXFwkW0EtWl0rXFxcXGQrJFwiO1xuXG5leHBvcnQgY29uc3QgZGF0ZVBhdHRlcm4gPSBbXCJeKFxcXFxkezR9KVstXFwvXShcXFxcZHsxLDJ9KVstXFwvXShcXFxcZHsxLDJ9KSRcIiwgXCJeKFxcXFxkezR9KeW5tChcXFxcZHsxLDJ9KeaciChcXFxcZHsxLDJ9KeaXpSRcIl07XG5leHBvcnQgY29uc3QgZGF0ZVBhdHRlcm4yID0gXCIoKF4oKDFbOC05XVxcXFxkezJ9KXwoWzItOV1cXFxcZHszfSkpKFstXFxcXC9cXFxcLl9dKSgxMHwxMnwwP1sxMzU3OF0pKFstXFxcXC9cXFxcLl9dKSgzWzAxXXxbMTJdWzAtOV18MD9bMS05XSkkKXwoXigoMVs4LTldXFxcXGR7Mn0pfChbMi05XVxcXFxkezN9KSkoWy1cXFxcL1xcXFwuX10pKDExfDA/WzQ2OV0pKFstXFxcXC9cXFxcLl9dKSgzMHxbMTJdWzAtOV18MD9bMS05XSkkKXwoXigoMVs4LTldXFxcXGR7Mn0pfChbMi05XVxcXFxkezN9KSkoWy1cXFxcL1xcXFwuX10pKDA/MikoWy1cXFxcL1xcXFwuX10pKDJbMC04XXwxWzAtOV18MD9bMS05XSkkKXwoXihbMjQ2OF1bMDQ4XTAwKShbLVxcXFwvXFxcXC5fXSkoMD8yKShbLVxcXFwvXFxcXC5fXSkoMjkpJCl8KF4oWzM1NzldWzI2XTAwKShbLVxcXFwvXFxcXC5fXSkoMD8yKShbLVxcXFwvXFxcXC5fXSkoMjkpJCl8KF4oWzFdWzg5XVswXVs0OF0pKFstXFxcXC9cXFxcLl9dKSgwPzIpKFstXFxcXC9cXFxcLl9dKSgyOSkkKXwoXihbMi05XVswLTldWzBdWzQ4XSkoWy1cXFxcL1xcXFwuX10pKDA/MikoWy1cXFxcL1xcXFwuX10pKDI5KSQpfCheKFsxXVs4OV1bMjQ2OF1bMDQ4XSkoWy1cXFxcL1xcXFwuX10pKDA/MikoWy1cXFxcL1xcXFwuX10pKDI5KSQpfCheKFsyLTldWzAtOV1bMjQ2OF1bMDQ4XSkoWy1cXFxcL1xcXFwuX10pKDA/MikoWy1cXFxcL1xcXFwuX10pKDI5KSQpfCheKFsxXVs4OV1bMTM1NzldWzI2XSkoWy1cXFxcL1xcXFwuX10pKDA/MikoWy1cXFxcL1xcXFwuX10pKDI5KSQpfCheKFsyLTldWzAtOV1bMTM1NzldWzI2XSkoWy1cXFxcL1xcXFwuX10pKDA/MikoWy1cXFxcL1xcXFwuX10pKDI5KSQpKVwiO1xuXG5leHBvcnQgY29uc3QgY2FsZW5kYXJQYXR0ZXJuID0gXCJeXFxcXGR7NH0tXFxcXGR7MSwyfS1cXFxcZHsxLDJ9JFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyMlJlKHN0cikge1xuXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoc3RyLCAnZycpO1xufVxuIiwiaW1wb3J0ICogYXMgY2YgZnJvbSAnLi4vY2FsY191dGlscy9jb25maWcnO1xuaW1wb3J0IHtFUlJPUl9WQUxVRX0gZnJvbSAnLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcnO1xuaW1wb3J0IHsgZDE4OTkxMjMwIH0gZnJvbSAnLi4vY2FsY191dGlscy9jb25maWcnO1xuXG5cblxuLyoqXG4gKiDku6PooajkuIDkuKrml6XmnJ/mpoLlv7VcbiAqIEBwcm9wZXJ0eSB7RGF0ZX0gZGF0ZUluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBDZWxsVkRhdGVUaW1leyAvLyDljZXlhYPmoLzlgLznmoTlgLzlsZ7mgKdcbiAgY29uc3RydWN0b3IoYURhdGUpeyAvLyDliqDms5UsIOWKoOWFpeWkqeaVsFxuICAgIHRoaXMuZGF0ZUluc3RhbmNlID0gYURhdGVcbiAgICB0aGlzLmlzQ2VsbFYgPSB0cnVlXG4gICAgdGhpcy5jZWxsVlR5cGVOYW1lID0gXCJDZWxsVkRhdGVUaW1lXCJcbiAgfTtcblxuXG4gIHN1YnRyYWN0T3RoZXIob3RoZXIpe1xuICAgIC8vIOS4pOS4quaXpeacn+S5i+mXtOeahOW3rlxuICAgIGNvbnNvbGUuYXNzZXJ0KCBvdGhlciBpbnN0YW5jZW9mIENlbGxWRGF0ZVRpbWUpXG4gICAgcmV0dXJuIHRoaXMudG9OdW1iZXIoKSAtIG90aGVyLnRvTnVtYmVyKClcbiAgfVxuICB0b1N0cmluZyhmb3JtYXQgPSBcIllZWVktTU0tRERcIil7IC8vIHRvZG86IOmAgumFjeWQhOenjeaXtumXtOagt+W8j1xuICAgIHJldHVybiB0aGlzLmRhdGVJbnN0YW5jZS50b0xvY2FsZURhdGVTdHJpbmcoXCJDaGluZXNlXCIpXG4gIH1cbiAgdG9OdW1iZXIoKXsgLy8g6L2s5YyW5Li65pWw5a2X77yM6YC76L6R5LiORXhjZWzkv53mjIHkuIDoh7RcbiAgICBsZXQgZGlmZiA9ICh0aGlzLmRhdGVJbnN0YW5jZSAtIGQxODk5MTIzMCkgKyAoKGQxODk5MTIzMC5nZXRUaW1lem9uZU9mZnNldCgpIC0gdGhpcy5kYXRlSW5zdGFuY2UuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2MCAqIDEwMDApO1xuICAgIHJldHVybiBkaWZmIC8gY2YuTVNfUEVSX0RBWTtcbiAgfVxuICB0b0RhdGUoKXtcbiAgICByZXR1cm4gdGhpcy5kYXRlSW5zdGFuY2VcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtDZWxsVkVtcHR5fVxuICAgKi9cbiAgZ2V0QUNvcHkoKXtcbiAgICByZXR1cm4gbmV3IENlbGxWRW1wdHkodGhpcy5kYXRlSW5zdGFuY2UpXG4gIH1cbn1cblxuLyoqXG4gKiDku6PooajkuIDkuKpFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQ2VsbFZFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGVyck5hbWUpIHtcbiAgICB0aGlzLmVyck5hbWUgPSBlcnJOYW1lO1xuICAgIHRoaXMuZXJyID0gRXJyb3IoZXJyTmFtZSk7XG4gICAgdGhpcy5pc0NlbGxWID0gdHJ1ZVxuICAgIHRoaXMuY2VsbFZUeXBlTmFtZSA9IFwiQ2VsbFZFcnJvclwiXG5cbiAgfVxuXG4gIHRvTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLmVycjtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmVycjtcbiAgfVxuXG4gIHRvRGF0ZSgpe1xuICAgIHJldHVybiB0aGlzLmVycjtcbiAgfVxuXG59XG5cbi8qKlxuICog5Luj6KGo5LiA5Liq56m65YC877yM56m65YC85Zyo6L+Q566X55qE5pe25YCZ5Y+v5Lul6L2s5YyW5Li6MO+8jOaIluS4gOS4quepuuWtl+espuS4su+8jOaIluiAheWcqGF2ZXJhZ2XkuK3kuI3ov5vlhaXorqHnrpdcbiAqL1xuZXhwb3J0IGNsYXNzIENlbGxWRW1wdHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlzQ2VsbFYgPSB0cnVlXG4gICAgdGhpcy5jZWxsVlR5cGVOYW1lID0gXCJDZWxsVkVtcHR5XCJcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHRvTnVtYmVyKCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdG9EYXRlKCl7XG4gICAgcmV0dXJuIG5ldyBEYXRlKDApXG4gIH1cbn1cblxuLyoqXG4gKiBAcHJvcGVydHkge051bWJlcn0gbnVtYmVyXG4gKi9cbmV4cG9ydCBjbGFzcyBDZWxsVk51bWJlcntcbiAgY29uc3RydWN0b3IoYU51bSl7XG4gICAgdGhpcy5udW1iZXIgPSBhTnVtXG4gICAgdGhpcy5pc0NlbGxWID0gdHJ1ZVxuICAgIHRoaXMuY2VsbFZUeXBlTmFtZSA9IFwiQ2VsbFZOdW1iZXJcIlxuICB9XG4gIHRvTnVtYmVyKCl7XG4gICAgcmV0dXJuIHRoaXMubnVtYmVyXG4gIH1cbiAgdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMubnVtYmVyKSAvLyDovazljJbkuLrlrZfnrKbkuLJcbiAgfVxuICB0b0RhdGUoKXsgLy8g6L2s5YyW5pel5pyfXG4gICAgcmV0dXJuIG5ldyBEYXRlKGQxODk5MTIzMC5nZXRUaW1lKCkgKyB0aGlzLm51bWJlciAgKiBjZi5NU19QRVJfREFZKSAvLyDovazljJbkuLrmr6vnp5LmlbBcbiAgfVxufVxuXG4vKipcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0aGVTdHJpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIENlbGxWU3RyaW5ne1xuICBjb25zdHJ1Y3RvcihhU3RyaW5nKXtcbiAgICB0aGlzLnRoZVN0cmluZyA9IGFTdHJpbmdcbiAgICB0aGlzLmlzQ2VsbFYgPSB0cnVlXG4gICAgdGhpcy5jZWxsVlR5cGVOYW1lID0gXCJDZWxsVlN0cmluZ1wiXG4gIH1cbiAgdG9OdW1iZXIoKXtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLnRoZVN0cmluZykgLy8g6L2s5YyW5Li65rWu54K55pWwXG4gIH1cbiAgdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy50aGVTdHJpbmcgLy8g6L2s5YyW5Li65a2X56ym5LiyXG4gIH0vLyDlj6rmlK/mjIEyMDE5LzAxLzAx6L+Z5qC355qE5b2i5byP77ybIEV4Y2Vs5Lit5LiN5pSv5oyB55u05o6l55So5a2X56ym5Liy55qE5pa55byP6L6T5YWl5pel5pyfXG5cbiAgdG9EYXRlKCl7XG4gICAgbGV0IHRoZURhdGUgPURhdGUodGhpcy50aGVTdHJpbmcpXG4gICAgaWYoaXNOYU4odGhlRGF0ZS5nZXRUaW1lKCkpKXsgLy8g5peg5rOV5q2j56Gu6L2s5o2iXG4gICAgICByZXR1cm4gRVJST1JfVkFMVUVcbiAgICB9XG4gICAgZWxzZXtyZXR1cm4gIHRoZURhdGV9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0NlbGxWKG9yaWdpblZhbHVlKXsgLy8g6L2s5o2i5Y6f5aeL55qE5YC8XG4gIGlmKG9yaWdpblZhbHVlIGluc3RhbmNlb2YgRGF0ZSl7XG4gICAgcmV0dXJuIG5ldyBDZWxsVkRhdGVUaW1lKG9yaWdpblZhbHVlKVxuICB9XG4gIGVsc2UgaWYgKG9yaWdpblZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKXtcbiAgICByZXR1cm4gbmV3IENlbGxWU3RyaW5nKG9yaWdpblZhbHVlKVxuICB9ZWxzZSBpZiAodHlwZW9mIG9yaWdpblZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ob3JpZ2luVmFsdWUpKXtcbiAgICByZXR1cm4gbmV3IENlbGxWTnVtYmVyKG9yaWdpblZhbHVlKVxuICB9XG4gIGlmKG9yaWdpblZhbHVlLmlzQ2VsbFYgPT09IHRydWUpe1xuICAgIHJldHVybiBvcmlnaW5WYWx1ZSAvLyDkuI3ov5vooYzovazmjaJcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBFUlJPUl9WQUxVRSAvLyDml6Dms5Xov5Tlm55jZWxsVueahOexu+Wei1xuICB9XG59XG5cblxuIiwiaW1wb3J0IG51bWVyaWMgZnJvbSAnbnVtZXJpYydcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHtlcnJvck9ian0gZnJvbSAnLi4vLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcnXG5pbXBvcnQgc3RhdGlzdGljYWwgZnJvbSAnLi9zdGF0aXN0aWNhbCdcbmltcG9ydCBpbmZvcm1hdGlvbiBmcm9tICcuL2luZm9ybWF0aW9uJ1xuXG5leHBvcnRzLkFCUyA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBNYXRoLmFicyh1dGlscy5wYXJzZU51bWJlcihudW1iZXIpKTtcbn07XG5cbmV4cG9ydHMuQUNPUyA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBNYXRoLmFjb3MobnVtYmVyKTtcbn07XG5cbmV4cG9ydHMuQUNPU0ggPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gTWF0aC5sb2cobnVtYmVyICsgTWF0aC5zcXJ0KG51bWJlciAqIG51bWJlciAtIDEpKTtcbn07XG5cbmV4cG9ydHMuQUNPVCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBNYXRoLmF0YW4oMSAvIG51bWJlcik7XG59O1xuXG5leHBvcnRzLkFDT1RIID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIDAuNSAqIE1hdGgubG9nKChudW1iZXIgKyAxKSAvIChudW1iZXIgLSAxKSk7XG59O1xuXG4vL1RPRE86IHVzZSBvcHRpb25zXG5leHBvcnRzLkFHR1JFR0FURSA9IGZ1bmN0aW9uKGZ1bmN0aW9uX251bSwgb3B0aW9ucywgcmVmMSwgcmVmMikge1xuICBmdW5jdGlvbl9udW0gPSB1dGlscy5wYXJzZU51bWJlcihmdW5jdGlvbl9udW0pO1xuICBvcHRpb25zID0gdXRpbHMucGFyc2VOdW1iZXIob3B0aW9ucyk7XG4gIC8vWFc6IOWHveaVsOaKpemUmVxuICBpZiAodHlwZW9mIHJlZjEgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUVcbiAgfS8vWFc6ZW5kXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGZ1bmN0aW9uX251bSwgb3B0aW9ucykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgc3dpdGNoIChmdW5jdGlvbl9udW0pIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuQVZFUkFHRShyZWYxKTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuQ09VTlQocmVmMSk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLkNPVU5UQShyZWYxKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuTUFYKHJlZjEpO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5NSU4ocmVmMSk7XG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUFJPRFVDVChyZWYxKTtcbiAgICBjYXNlIDc6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuU1RERVYuUyhyZWYxKTtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuU1RERVYuUChyZWYxKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gZXhwb3J0cy5TVU0ocmVmMSk7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5WQVIuUyhyZWYxKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLlZBUi5QKHJlZjEpO1xuICAgIGNhc2UgMTI6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuTUVESUFOKHJlZjEsIHJlZjIpO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuTU9ERS5TTkdMKHJlZjEpO1xuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuTEFSR0UocmVmMSwgcmVmMik7XG4gICAgY2FzZSAxNTpcbiAgICAgIGlmIChyZWYyID09IHVuZGVmaW5lZCl7XG4gICAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLlNNQUxMKHJlZjEsIHJlZjIpO1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuUEVSQ0VOVElMRS5JTkMocmVmMSwgcmVmMik7XG4gICAgY2FzZSAxNzpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5RVUFSVElMRS5JTkMocmVmMSwgcmVmMik7XG4gICAgY2FzZSAxODpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5QRVJDRU5USUxFLkVYQyhyZWYxLCByZWYyKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLlFVQVJUSUxFLkVYQyhyZWYxLCByZWYyKTtcbiAgfVxufTtcblxuZXhwb3J0cy5BUkFCSUMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIC8vIENyZWRpdHM6IFJhZmE/IEt1a2F3c2tpXG4gIHRleHQgPSB0ZXh0LnRvVXBwZXJDYXNlKClcbiAgaWYgKCEvXk0qKD86RD9DezAsM318Q1tNRF0pKD86TD9YezAsM318WFtDTF0pKD86Vj9JezAsM318SVtYVl0pJC8udGVzdCh0ZXh0KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgciA9IDA7XG4gIHRleHQucmVwbGFjZSgvW01ETFZdfENbTURdP3xYW0NMXT98SVtYVl0/L2csIGZ1bmN0aW9uIChpKSB7XG4gICAgciArPSB7XG4gICAgICBNOiAxMDAwLFxuICAgICAgQ006IDkwMCxcbiAgICAgIEQ6IDUwMCxcbiAgICAgIENEOiA0MDAsXG4gICAgICBDOiAxMDAsXG4gICAgICBYQzogOTAsXG4gICAgICBMOiA1MCxcbiAgICAgIFhMOiA0MCxcbiAgICAgIFg6IDEwLFxuICAgICAgSVg6IDksXG4gICAgICBWOiA1LFxuICAgICAgSVY6IDQsXG4gICAgICBJOiAxXG4gICAgfVtpXTtcbiAgfSk7XG4gIHJldHVybiByO1xufTtcblxuZXhwb3J0cy5BU0lOID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIE1hdGguYXNpbihudW1iZXIpO1xufTtcblxuZXhwb3J0cy5BU0lOSCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBNYXRoLmxvZyhudW1iZXIgKyBNYXRoLnNxcnQobnVtYmVyICogbnVtYmVyICsgMSkpO1xufTtcblxuZXhwb3J0cy5BVEFOID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIE1hdGguYXRhbihudW1iZXIpO1xufTtcblxuZXhwb3J0cy5BVEFOMiA9IGZ1bmN0aW9uKG51bWJlcl94LCBudW1iZXJfeSkge1xuICBudW1iZXJfeCA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcl94KTtcbiAgbnVtYmVyX3kgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXJfeSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlcl94LCBudW1iZXJfeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIE1hdGguYXRhbjIobnVtYmVyX3gsIG51bWJlcl95KTtcbn07XG5cbmV4cG9ydHMuQVRBTkggPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gTWF0aC5sb2coKDEgKyBudW1iZXIpIC8gKDEgLSBudW1iZXIpKSAvIDI7XG59O1xuXG5leHBvcnRzLkJBU0UgPSBmdW5jdGlvbihudW1iZXIsIHJhZGl4LCBtaW5fbGVuZ3RoKSB7XG4gIG1pbl9sZW5ndGggPSBtaW5fbGVuZ3RoIHx8IDA7XG5cbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgcmFkaXggPSB1dGlscy5wYXJzZU51bWJlcihyYWRpeCk7XG4gIG1pbl9sZW5ndGggPSB1dGlscy5wYXJzZU51bWJlcihtaW5fbGVuZ3RoKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCByYWRpeCwgbWluX2xlbmd0aCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbWluX2xlbmd0aCA9IChtaW5fbGVuZ3RoID09PSB1bmRlZmluZWQpID8gMCA6IG1pbl9sZW5ndGg7XG4gIGxldCByZXN1bHQgPSBudW1iZXIudG9TdHJpbmcocmFkaXgpO1xuICByZXR1cm4gbmV3IEFycmF5KE1hdGgubWF4KG1pbl9sZW5ndGggKyAxIC0gcmVzdWx0Lmxlbmd0aCwgMCkpLmpvaW4oJzAnKSArIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuQ0VJTElORyA9IGZ1bmN0aW9uKG51bWJlciwgc2lnbmlmaWNhbmNlLCBtb2RlKSB7XG4gIHNpZ25pZmljYW5jZSA9IChzaWduaWZpY2FuY2UgPT09IHVuZGVmaW5lZCkgPyAxIDogTWF0aC5hYnMoc2lnbmlmaWNhbmNlKTtcbiAgbW9kZSA9IG1vZGUgfHwgMDtcblxuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBzaWduaWZpY2FuY2UgPSB1dGlscy5wYXJzZU51bWJlcihzaWduaWZpY2FuY2UpO1xuICBtb2RlID0gdXRpbHMucGFyc2VOdW1iZXIobW9kZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgc2lnbmlmaWNhbmNlLCBtb2RlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoc2lnbmlmaWNhbmNlID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbGV0IHByZWNpc2lvbiA9IC1NYXRoLmZsb29yKE1hdGgubG9nKHNpZ25pZmljYW5jZSkgLyBNYXRoLmxvZygxMCkpO1xuICBpZiAobnVtYmVyID49IDApIHtcbiAgICByZXR1cm4gZXhwb3J0cy5ST1VORChNYXRoLmNlaWwobnVtYmVyIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZSwgcHJlY2lzaW9uKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAobW9kZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIC1leHBvcnRzLlJPVU5EKE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2UsIHByZWNpc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtZXhwb3J0cy5ST1VORChNYXRoLmNlaWwoTWF0aC5hYnMobnVtYmVyKSAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2UsIHByZWNpc2lvbik7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzLkNFSUxJTkcuTUFUSCA9IGV4cG9ydHMuQ0VJTElORztcblxuZXhwb3J0cy5DRUlMSU5HLlBSRUNJU0UgPSBleHBvcnRzLkNFSUxJTkc7XG5cbmV4cG9ydHMuQ09NQklOID0gZnVuY3Rpb24obnVtYmVyLCBudW1iZXJfY2hvc2VuKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIG51bWJlcl9jaG9zZW4gPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXJfY2hvc2VuKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBudW1iZXJfY2hvc2VuKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gZXhwb3J0cy5GQUNUKG51bWJlcikgLyAoZXhwb3J0cy5GQUNUKG51bWJlcl9jaG9zZW4pICogZXhwb3J0cy5GQUNUKG51bWJlciAtIG51bWJlcl9jaG9zZW4pKTtcbn07XG5cbmV4cG9ydHMuQ09NQklOQSA9IGZ1bmN0aW9uKG51bWJlciwgbnVtYmVyX2Nob3Nlbikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBudW1iZXJfY2hvc2VuID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyX2Nob3Nlbik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgbnVtYmVyX2Nob3NlbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIChudW1iZXIgPT09IDAgJiYgbnVtYmVyX2Nob3NlbiA9PT0gMCkgPyAxIDogZXhwb3J0cy5DT01CSU4obnVtYmVyICsgbnVtYmVyX2Nob3NlbiAtIDEsIG51bWJlciAtIDEpO1xufTtcblxuZXhwb3J0cy5DT1MgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gTWF0aC5jb3MobnVtYmVyKTtcbn07XG5cbmV4cG9ydHMuQ09TSCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiAoTWF0aC5leHAobnVtYmVyKSArIE1hdGguZXhwKC1udW1iZXIpKSAvIDI7XG59O1xuXG5leHBvcnRzLkNPVCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiAxIC8gTWF0aC50YW4obnVtYmVyKTtcbn07XG5cbmV4cG9ydHMuQ09USCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIGxldCBlMiA9IE1hdGguZXhwKDIgKiBudW1iZXIpO1xuICByZXR1cm4gKGUyICsgMSkgLyAoZTIgLSAxKTtcbn07XG5cbmV4cG9ydHMuQ1NDID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIDEgLyBNYXRoLnNpbihudW1iZXIpO1xufTtcblxuZXhwb3J0cy5DU0NIID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIDIgLyAoTWF0aC5leHAobnVtYmVyKSAtIE1hdGguZXhwKC1udW1iZXIpKTtcbn07XG5cbmV4cG9ydHMuREVDSU1BTCA9IGZ1bmN0aW9uKG51bWJlciwgcmFkaXgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cblxuICByZXR1cm4gcGFyc2VJbnQobnVtYmVyLCByYWRpeCk7XG59O1xuXG5leHBvcnRzLkRFR1JFRVMgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyICogMTgwIC8gTWF0aC5QSTtcbn07XG5cbmV4cG9ydHMuRVZFTiA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBleHBvcnRzLkNFSUxJTkcobnVtYmVyLCAtMiwgLTEpO1xufTtcblxuZXhwb3J0cy5FWFAgPSBNYXRoLmV4cDtcblxubGV0IE1FTU9JWkVEX0ZBQ1QgPSBbXTtcbmV4cG9ydHMuRkFDVCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciA8IDApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU1cbiAgfVxuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIGxldCBuID0gTWF0aC5mbG9vcihudW1iZXIpO1xuICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoTUVNT0laRURfRkFDVFtuXSA+IDApIHtcbiAgICByZXR1cm4gTUVNT0laRURfRkFDVFtuXTtcbiAgfSBlbHNlIHtcbiAgICBNRU1PSVpFRF9GQUNUW25dID0gZXhwb3J0cy5GQUNUKG4gLSAxKSAqIG47XG4gICAgcmV0dXJuIE1FTU9JWkVEX0ZBQ1Rbbl07XG4gIH1cbn07XG5cbmV4cG9ydHMuRkFDVERPVUJMRSA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIGxldCBuID0gTWF0aC5mbG9vcihudW1iZXIpO1xuICBpZiAobiA8PSAwKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG4gKiBleHBvcnRzLkZBQ1RET1VCTEUobiAtIDIpO1xuICB9XG59O1xuXG4vL1RPRE86IFZlcmlmeVxuLy8gWFc6IOiHquW3seWGmeeahOWHveaVsFxuZXhwb3J0cy5GTE9PUiA9IHt9O1xubGV0IFJPVU5EID0gZnVuY3Rpb24gKHZhbHVlLCBwbGFjZXMpIHtcbiAgbGV0IG4gPSB2YWx1ZTtcbiAgbGV0IGQgPSBwbGFjZXM7XG4gIHJldHVybiBNYXRoLnJvdW5kKG4gKiBNYXRoLnBvdygxMCwgZCkpIC8gTWF0aC5wb3coMTAsIGQpO1xufTtcbmV4cG9ydHMuRkxPT1JNQVRIID0gZnVuY3Rpb24obnVtYmVyLCBzaWduaWZpY2FuY2UsIG1vZGUpIHtcbiAgaWYgKHR5cGVvZiBudW1iZXIgIT09J251bWJlcicpeyAvL1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTsgLy8gRVJST1JfVkFMVUUgPSAnI1ZBTFVFISdcbiAgfVxuICBpZiAobnVtYmVyPjAmJnNpZ25pZmljYW5jZTwwKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbiAgaWYgKG51bWJlcjwwJiZzaWduaWZpY2FuY2U8MCl7XG4gICAgbnVtYmVyID0gLW51bWJlclxuICAgIHNpZ25pZmljYW5jZSA9IC1zaWduaWZpY2FuY2VcbiAgICBsZXQgcHJlY2lzaW9uID0gLU1hdGguZmxvb3IoTWF0aC5sb2coc2lnbmlmaWNhbmNlKSAvIE1hdGgubG9nKDEwKSk7XG4gICAgcmV0dXJuIC1ST1VORChNYXRoLmZsb29yKG51bWJlciAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2UsIHByZWNpc2lvbik7XG4gIH1cbiAgc2lnbmlmaWNhbmNlID0gKHNpZ25pZmljYW5jZSA9PT0gdW5kZWZpbmVkKSA/IDEgOiBzaWduaWZpY2FuY2U7XG4gIG1vZGUgPSAobW9kZSA9PT0gdW5kZWZpbmVkKSA/IDAgOiBtb2RlO1xuICBpZiAoc2lnbmlmaWNhbmNlID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBzaWduaWZpY2FuY2UgPSBzaWduaWZpY2FuY2UgPyBNYXRoLmFicyhzaWduaWZpY2FuY2UpIDogMTtcbiAgbGV0IHByZWNpc2lvbiA9IC1NYXRoLmZsb29yKE1hdGgubG9nKHNpZ25pZmljYW5jZSkgLyBNYXRoLmxvZygxMCkpO1xuICBpZiAobnVtYmVyID49IDApIHtcbiAgICByZXR1cm4gUk9VTkQoTWF0aC5mbG9vcihudW1iZXIgLyBzaWduaWZpY2FuY2UpICogc2lnbmlmaWNhbmNlLCBwcmVjaXNpb24pO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09IDAgfHwgbW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC1ST1VORChNYXRoLmNlaWwoTWF0aC5hYnMobnVtYmVyKSAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2UsIHByZWNpc2lvbik7XG4gIH1cbiAgcmV0dXJuIC1ST1VORChNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikgLyBzaWduaWZpY2FuY2UpICogc2lnbmlmaWNhbmNlLCBwcmVjaXNpb24pO1xufVxuZXhwb3J0cy5GTE9PUlBSQUNFID0gZnVuY3Rpb24obnVtYmVyLCBzaWduaWZpY2FuY2UsIG1vZGUpIHtcbiAgaWYgKHR5cGVvZiBudW1iZXIgIT09J251bWJlcicpeyAvL1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTsgLy8gRVJST1JfVkFMVUUgPSAnI1ZBTFVFISdcbiAgfVxuICBpZiAobnVtYmVyPDAmJnNpZ25pZmljYW5jZTwwKXtcbiAgICBudW1iZXIgPSAtbnVtYmVyXG4gICAgc2lnbmlmaWNhbmNlID0gLXNpZ25pZmljYW5jZVxuICAgIGxldCBwcmVjaXNpb24gPSAtTWF0aC5mbG9vcihNYXRoLmxvZyhzaWduaWZpY2FuY2UpIC8gTWF0aC5sb2coMTApKTtcbiAgICByZXR1cm4gLVJPVU5EKE1hdGguZmxvb3IobnVtYmVyIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZSwgcHJlY2lzaW9uKTtcbiAgfVxuICBzaWduaWZpY2FuY2UgPSAoc2lnbmlmaWNhbmNlID09PSB1bmRlZmluZWQpID8gMSA6IHNpZ25pZmljYW5jZTtcbiAgbW9kZSA9IChtb2RlID09PSB1bmRlZmluZWQpID8gMCA6IG1vZGU7XG4gIGlmIChzaWduaWZpY2FuY2UgPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHNpZ25pZmljYW5jZSA9IHNpZ25pZmljYW5jZSA/IE1hdGguYWJzKHNpZ25pZmljYW5jZSkgOiAxO1xuICBsZXQgcHJlY2lzaW9uID0gLU1hdGguZmxvb3IoTWF0aC5sb2coc2lnbmlmaWNhbmNlKSAvIE1hdGgubG9nKDEwKSk7XG4gIGlmIChudW1iZXIgPj0gMCkge1xuICAgIHJldHVybiBST1VORChNYXRoLmZsb29yKG51bWJlciAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2UsIHByZWNpc2lvbik7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gMCB8fCBtb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLVJPVU5EKE1hdGguY2VpbChNYXRoLmFicyhudW1iZXIpIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZSwgcHJlY2lzaW9uKTtcbiAgfVxuICByZXR1cm4gLVJPVU5EKE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2UsIHByZWNpc2lvbik7XG59XG5cbi8vIERlcHJlY2F0ZWRcbmV4cG9ydHMuRkxPT1IuTUFUSCA9IGV4cG9ydHMuRkxPT1JNQVRIO1xuZXhwb3J0cy5GTE9PUi5QUkVDSVNFID0gZXhwb3J0cy5GTE9PUlBSQUNFO1xuLy9YVzogZW5kXG4vLyBhZGFwdGVkIGh0dHA6Ly9yb3NldHRhY29kZS5vcmcvd2lraS9HcmVhdGVzdF9jb21tb25fZGl2aXNvciNKYXZhU2NyaXB0XG5leHBvcnRzLkdDRCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XG4gIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGxldCBuID0gcmFuZ2UubGVuZ3RoO1xuICBsZXQgcjAgPSByYW5nZVswXTtcbiAgbGV0IHggPSByMCA8IDAgPyAtcjAgOiByMDtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICBsZXQgcmkgPSByYW5nZVtpXTtcbiAgICBsZXQgeSA9IHJpIDwgMCA/IC1yaSA6IHJpO1xuICAgIHdoaWxlICh4ICYmIHkpIHtcbiAgICAgIGlmICh4ID4geSkge1xuICAgICAgICB4ICU9IHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ICU9IHg7XG4gICAgICB9XG4gICAgfVxuICAgIHggKz0geTtcbiAgfVxuICByZXR1cm4geDtcbn07XG5cblxuZXhwb3J0cy5JTlQgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xufTtcblxuLy9UT0RPOiB2ZXJpZnlcbmV4cG9ydHMuSVNPID0ge1xuICBDRUlMSU5HOiBleHBvcnRzLkNFSUxJTkdcbn07XG5cbmV4cG9ydHMuTENNID0gZnVuY3Rpb24oKSB7XG4gIC8vIENyZWRpdHM6IEpvbmFzIFJhb25pIFNvYXJlcyBTaWx2YVxuICBsZXQgbyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBvO1xuICB9XG4gIGZvciAobGV0IGksIGosIG4sIGQsIHIgPSAxO1xuICAgIChuID0gby5wb3AoKSkgIT09IHVuZGVmaW5lZDspIHtcbiAgICB3aGlsZSAobiA+IDEpIHtcbiAgICAgIGlmIChuICUgMikge1xuICAgICAgICBmb3IgKGkgPSAzLCBqID0gTWF0aC5mbG9vcihNYXRoLnNxcnQobikpOyBpIDw9IGogJiYgbiAlIGk7IGkgKz0gMikge1xuICAgICAgICAgIC8vZW1wdHlcbiAgICAgICAgfVxuICAgICAgICBkID0gKGkgPD0gaikgPyBpIDogbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGQgPSAyO1xuICAgICAgfVxuICAgICAgZm9yIChuIC89IGQsIHIgKj0gZCwgaSA9IG8ubGVuZ3RoOyBpO1xuICAgICAgICAob1stLWldICUgZCkgPT09IDAgJiYgKG9baV0gLz0gZCkgPT09IDEgJiYgby5zcGxpY2UoaSwgMSkpIHtcbiAgICAgICAgLy9lbXB0eVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcjtcbn07XG5cbmV4cG9ydHMuTE4gPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKTtcbn07XG5cbmV4cG9ydHMuTE9HID0gZnVuY3Rpb24gKG51bWJlciwgYmFzZSkge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBiYXNlID0gdXRpbHMucGFyc2VOdW1iZXIoYmFzZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGJhc2UpKSB7XG4gICAgYmFzZSA9IDEwXG4gIH1cbiAgYmFzZSA9IChiYXNlID09PSB1bmRlZmluZWQpID8gMTAgOiBiYXNlO1xuICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKSAvIE1hdGgubG9nKGJhc2UpO1xufTtcblxuZXhwb3J0cy5MT0cxMCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBNYXRoLmxvZyhudW1iZXIpIC8gTWF0aC5sb2coMTApO1xufTtcblxuZXhwb3J0cy5NREVURVJNID0gZnVuY3Rpb24obWF0cml4KSB7XG4gIGlmICh0eXBlb2YgbWF0cml4ID09ICdzdHJpbmcnKXtcbiAgICBtYXRyaXggPSB1dGlscy5zdHJUb01hdHJpeChtYXRyaXgpO1xuICB9XG4gIHRyeXtcbiAgICByZXR1cm4gbnVtZXJpYy5kZXQobWF0cml4KTtcbiAgfWNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFXG4gIH1cbn07XG5cbmV4cG9ydHMuTUlOVkVSU0UgPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgbWF0cml4ID0gdXRpbHMucGFyc2VNYXRyaXgobWF0cml4KTtcbiAgaWYgKG1hdHJpeCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG1hdHJpeDtcbiAgfVxuICByZXR1cm4gbnVtZXJpYy5pbnYobWF0cml4KTtcbn07XG5cbmV4cG9ydHMuTU1VTFQgPSBmdW5jdGlvbihtYXRyaXgxLCBtYXRyaXgyKSB7XG4gIG1hdHJpeDEgPSB1dGlscy5wYXJzZU1hdHJpeChtYXRyaXgxKTtcbiAgbWF0cml4MiA9IHV0aWxzLnBhcnNlTWF0cml4KG1hdHJpeDIpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihtYXRyaXgxLCBtYXRyaXgyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBjb25zb2xlLmxvZyhudW1lcmljLmRvdChtYXRyaXgxLCBtYXRyaXgyKSlcbiAgcmV0dXJuIG51bWVyaWMuZG90KG1hdHJpeDEsIG1hdHJpeDIpO1xufTtcblxuZXhwb3J0cy5NT0QgPSBmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICBkaXZpZGVuZCA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpdmlkZW5kKTtcbiAgZGl2aXNvciA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpdmlzb3IpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihkaXZpZGVuZCwgZGl2aXNvcikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgaWYgKGRpdmlzb3IgPT09IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfRElWMDtcbiAgfVxuICBsZXQgbW9kdWx1cyA9IE1hdGguYWJzKGRpdmlkZW5kICUgZGl2aXNvcik7XG4gIHJldHVybiAoZGl2aXNvciA+IDApID8gbW9kdWx1cyA6IC1tb2R1bHVzO1xufTtcblxuICBleHBvcnRzLk1ST1VORCA9IGZ1bmN0aW9uKG51bWJlciwgbXVsdGlwbGUpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgbXVsdGlwbGUgPSB1dGlscy5wYXJzZU51bWJlcihtdWx0aXBsZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgbXVsdGlwbGUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChudW1iZXIgKiBtdWx0aXBsZSA8IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyIC8gbXVsdGlwbGUpICogbXVsdGlwbGU7XG59O1xuXG5leHBvcnRzLk1VTFRJTk9NSUFMID0gZnVuY3Rpb24oKSB7XG4gIGxldCBhcmdzID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xuICBpZiAoYXJncyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cbiAgbGV0IHN1bSA9IDA7XG4gIGxldCBkaXZpc29yID0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3VtICs9IGFyZ3NbaV07XG4gICAgZGl2aXNvciAqPSBleHBvcnRzLkZBQ1QoYXJnc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGV4cG9ydHMuRkFDVChzdW0pIC8gZGl2aXNvcjtcbn07XG5cbmV4cG9ydHMuTVVOSVQgPSBmdW5jdGlvbihkaW1lbnNpb24pIHtcbiAgZGltZW5zaW9uID0gdXRpbHMucGFyc2VOdW1iZXIoZGltZW5zaW9uKTtcbiAgaWYgKGRpbWVuc2lvbiBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGRpbWVuc2lvbjtcbiAgfVxuICByZXR1cm4gbnVtZXJpYy5pZGVudGl0eShkaW1lbnNpb24pO1xufTtcblxuZXhwb3J0cy5PREQgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICBsZXQgdGVtcCA9IE1hdGguY2VpbChNYXRoLmFicyhudW1iZXIpKTtcbiAgdGVtcCA9ICh0ZW1wICYgMSkgPyB0ZW1wIDogdGVtcCArIDE7XG4gIHJldHVybiAobnVtYmVyID4gMCkgPyB0ZW1wIDogLXRlbXA7XG59O1xuXG5leHBvcnRzLlBJID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLlBJO1xufTtcblxuZXhwb3J0cy5QT1dFUiA9IGZ1bmN0aW9uKG51bWJlciwgcG93ZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgcG93ZXIgPSB1dGlscy5wYXJzZU51bWJlcihwb3dlcik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgcG93ZXIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCByZXN1bHQgPSBNYXRoLnBvdyhudW1iZXIsIHBvd2VyKTtcbiAgaWYgKGlzTmFOKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuUFJPRFVDVCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgYXJncyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgaWYgKGFyZ3MgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBhcmdzO1xuICB9XG4gIGxldCByZXN1bHQgPSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKj0gYXJnc1tpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5RVU9USUVOVCA9IGZ1bmN0aW9uKG51bWVyYXRvciwgZGVub21pbmF0b3IpIHtcbiAgbnVtZXJhdG9yID0gdXRpbHMucGFyc2VOdW1iZXIobnVtZXJhdG9yKTtcbiAgZGVub21pbmF0b3IgPSB1dGlscy5wYXJzZU51bWJlcihkZW5vbWluYXRvcik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWVyYXRvciwgZGVub21pbmF0b3IpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiBwYXJzZUludChudW1lcmF0b3IgLyBkZW5vbWluYXRvciwgMTApO1xufTtcblxuZXhwb3J0cy5SQURJQU5TID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIG51bWJlciAqIE1hdGguUEkgLyAxODA7XG59O1xuXG5leHBvcnRzLlJBTkQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUVcbiAgfVxuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn07XG5cbmV4cG9ydHMuUkFOREJFVFdFRU4gPSBmdW5jdGlvbihib3R0b20sIHRvcCkge1xuICBib3R0b20gPSB1dGlscy5wYXJzZU51bWJlcihib3R0b20pO1xuICB0b3AgPSB1dGlscy5wYXJzZU51bWJlcih0b3ApO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihib3R0b20sIHRvcCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgLy8gQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbiAzLjAgTGljZW5zZVxuICAvLyBDb3B5cmlnaHQgKGMpIDIwMTIgZXFjb2RlXG4gIHJldHVybiBib3R0b20gKyBNYXRoLmNlaWwoKHRvcCAtIGJvdHRvbSArIDEpICogTWF0aC5yYW5kb20oKSkgLSAxO1xufTtcblxuLy8gVE9ET1xuZXhwb3J0cy5ST01BTiA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIC8vIFRoZSBNSVQgTGljZW5zZVxuICAvLyBDb3B5cmlnaHQgKGMpIDIwMDggU3RldmVuIExldml0aGFuXG4gIGxldCBkaWdpdHMgPSBTdHJpbmcobnVtYmVyKS5zcGxpdCgnJyk7XG4gIGxldCBrZXkgPSBbJycsICdDJywgJ0NDJywgJ0NDQycsICdDRCcsICdEJywgJ0RDJywgJ0RDQycsICdEQ0NDJywgJ0NNJywgJycsICdYJywgJ1hYJywgJ1hYWCcsICdYTCcsICdMJywgJ0xYJywgJ0xYWCcsICdMWFhYJywgJ1hDJywgJycsICdJJywgJ0lJJywgJ0lJSScsICdJVicsICdWJywgJ1ZJJywgJ1ZJSScsICdWSUlJJywgJ0lYJ107XG4gIGxldCByb21hbiA9ICcnO1xuICBsZXQgaSA9IDM7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByb21hbiA9IChrZXlbK2RpZ2l0cy5wb3AoKSArIChpICogMTApXSB8fCAnJykgKyByb21hbjtcbiAgfVxuICByZXR1cm4gbmV3IEFycmF5KCtkaWdpdHMuam9pbignJykgKyAxKS5qb2luKCdNJykgKyByb21hbjtcbn07XG5cbmV4cG9ydHMuUk9VTkQgPSBmdW5jdGlvbiAobnVtYmVyLCBkaWdpdHMpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgZGlnaXRzID0gdXRpbHMucGFyc2VOdW1iZXIoZGlnaXRzKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBkaWdpdHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChudW1iZXIgPCAwKXtcbiAgICBudW1iZXIgPSAwLW51bWJlclxuICAgIHJldHVybiAwLU1hdGgucm91bmQobnVtYmVyICogTWF0aC5wb3coMTAsIGRpZ2l0cykpIC8gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gIH1cbiAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogTWF0aC5wb3coMTAsIGRpZ2l0cykpIC8gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG59O1xuXG5leHBvcnRzLlJPVU5ERE9XTiA9IGZ1bmN0aW9uKG51bWJlciwgZGlnaXRzKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGRpZ2l0cyA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpZ2l0cyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgZGlnaXRzKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgc2lnbiA9IChudW1iZXIgPiAwKSA/IDEgOiAtMTtcbiAgcmV0dXJuIHNpZ24gKiAoTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpICogTWF0aC5wb3coMTAsIGRpZ2l0cykpKSAvIE1hdGgucG93KDEwLCBkaWdpdHMpO1xufTtcblxuZXhwb3J0cy5ST1VORFVQID0gZnVuY3Rpb24obnVtYmVyLCBkaWdpdHMpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgZGlnaXRzID0gdXRpbHMucGFyc2VOdW1iZXIoZGlnaXRzKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBkaWdpdHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCBzaWduID0gKG51bWJlciA+IDApID8gMSA6IC0xO1xuICByZXR1cm4gc2lnbiAqIChNYXRoLmNlaWwoTWF0aC5hYnMobnVtYmVyKSAqIE1hdGgucG93KDEwLCBkaWdpdHMpKSkgLyBNYXRoLnBvdygxMCwgZGlnaXRzKTtcbn07XG5cbmV4cG9ydHMuU0VDID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIDEgLyBNYXRoLmNvcyhudW1iZXIpO1xufTtcblxuZXhwb3J0cy5TRUNIID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIDIgLyAoTWF0aC5leHAobnVtYmVyKSArIE1hdGguZXhwKC1udW1iZXIpKTtcbn07XG5cbmV4cG9ydHMuU0VSSUVTU1VNID0gZnVuY3Rpb24oeCwgbiwgbSwgY29lZmZpY2llbnRzKSB7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG4pO1xuICBtID0gdXRpbHMucGFyc2VOdW1iZXIobSk7XG4gIGNvZWZmaWNpZW50cyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkoY29lZmZpY2llbnRzKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgbiwgbSwgY29lZmZpY2llbnRzKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0ID0gY29lZmZpY2llbnRzWzBdICogTWF0aC5wb3coeCwgbik7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgY29lZmZpY2llbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IGNvZWZmaWNpZW50c1tpXSAqIE1hdGgucG93KHgsIG4gKyBpICogbSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuU0lHTiA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIGlmIChudW1iZXIgPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59O1xuXG5leHBvcnRzLlNJTiA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBNYXRoLnNpbihudW1iZXIpO1xufTtcblxuICBleHBvcnRzLlNJTkggPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG4gICAgcmV0dXJuIChNYXRoLmV4cChudW1iZXIpIC0gTWF0aC5leHAoLW51bWJlcikpIC8gMjtcbiAgfTtcblxuICBleHBvcnRzLlNRUlQgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnNxcnQobnVtYmVyKTtcbiAgfTtcblxuICBleHBvcnRzLlNRUlRQSSA9IGZ1bmN0aW9uKG51bWJlcikge1xuICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5zcXJ0KG51bWJlciAqIE1hdGguUEkpO1xuICB9O1xuXG5leHBvcnRzLlNVQlRPVEFMID0gZnVuY3Rpb24oZnVuY3Rpb25fY29kZSwgcmVmMSkge1xuICBmdW5jdGlvbl9jb2RlID0gdXRpbHMucGFyc2VOdW1iZXIoZnVuY3Rpb25fY29kZSk7XG4gIGlmIChmdW5jdGlvbl9jb2RlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25fY29kZTtcbiAgfVxuICBzd2l0Y2ggKGZ1bmN0aW9uX2NvZGUpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuQVZFUkFHRShyZWYxKTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuQ09VTlQocmVmMSk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLkNPVU5UQShyZWYxKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuTUFYKHJlZjEpO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5NSU4ocmVmMSk7XG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUFJPRFVDVChyZWYxKTtcbiAgICBjYXNlIDc6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuU1RERVYuUyhyZWYxKTtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuU1RERVYuUChyZWYxKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gZXhwb3J0cy5TVU0ocmVmMSk7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5WQVIuUyhyZWYxKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLlZBUi5QKHJlZjEpO1xuICAgICAgLy8gbm8gaGlkZGVuIHZhbHVlcyBmb3IgdXNcbiAgICBjYXNlIDEwMTpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5BVkVSQUdFKHJlZjEpO1xuICAgIGNhc2UgMTAyOlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLkNPVU5UKHJlZjEpO1xuICAgIGNhc2UgMTAzOlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLkNPVU5UQShyZWYxKTtcbiAgICBjYXNlIDEwNDpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5NQVgocmVmMSk7XG4gICAgY2FzZSAxMDU6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuTUlOKHJlZjEpO1xuICAgIGNhc2UgMTA2OlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUFJPRFVDVChyZWYxKTtcbiAgICBjYXNlIDEwNzpcbiAgICAgIHJldHVybiBzdGF0aXN0aWNhbC5TVERFVi5TKHJlZjEpO1xuICAgIGNhc2UgMTA4OlxuICAgICAgcmV0dXJuIHN0YXRpc3RpY2FsLlNUREVWLlAocmVmMSk7XG4gICAgY2FzZSAxMDk6XG4gICAgICByZXR1cm4gZXhwb3J0cy5TVU0ocmVmMSk7XG4gICAgY2FzZSAxMTA6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuVkFSLlMocmVmMSk7XG4gICAgY2FzZSAxMTE6XG4gICAgICByZXR1cm4gc3RhdGlzdGljYWwuVkFSLlAocmVmMSk7XG5cbiAgfVxufTtcblxuZXhwb3J0cy5BREQgPSBmdW5jdGlvbiAobnVtMSwgbnVtMikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIG51bTEgPSB1dGlscy5wYXJzZU51bWJlcihudW0xKTtcbiAgbnVtMiA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTIpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihudW0xLCBudW0yKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQW1lO1xuICB9XG5cbiAgcmV0dXJuIG51bTEgKyBudW0yO1xufTtcblxuZXhwb3J0cy5NSU5VUyA9IGZ1bmN0aW9uIChudW0xLCBudW0yKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgbnVtMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTEpO1xuICBudW0yID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bTEsIG51bTIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuIG51bTEgLSBudW0yO1xufTtcblxuZXhwb3J0cy5ESVZJREUgPSBmdW5jdGlvbiAoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBkaXZpZGVuZCA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpdmlkZW5kKTtcbiAgZGl2aXNvciA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpdmlzb3IpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihkaXZpZGVuZCwgZGl2aXNvcikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICBpZiAoZGl2aXNvciA9PT0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9ESVYwO1xuICB9XG5cbiAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbn07XG5cbmV4cG9ydHMuTVVMVElQTFkgPSBmdW5jdGlvbiAoZmFjdG9yMSwgZmFjdG9yMikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGZhY3RvcjEgPSB1dGlscy5wYXJzZU51bWJlcihmYWN0b3IxKTtcbiAgZmFjdG9yMiA9IHV0aWxzLnBhcnNlTnVtYmVyKGZhY3RvcjIpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihmYWN0b3IxLCBmYWN0b3IyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIHJldHVybiBmYWN0b3IxICogZmFjdG9yMjtcbn07XG5cbmV4cG9ydHMuR1RFID0gZnVuY3Rpb24gKG51bTEsIG51bTIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBudW0xID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMSk7XG4gIG51bTIgPSB1dGlscy5wYXJzZU51bWJlcihudW0yKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtMSwgbnVtMikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfRVJST1I7XG4gIH1cblxuICByZXR1cm4gbnVtMSA+PSBudW0yO1xufTtcblxuZXhwb3J0cy5MVCA9IGZ1bmN0aW9uIChudW0xLCBudW0yKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgbnVtMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTEpO1xuICBudW0yID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bTEsIG51bTIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX0VSUk9SO1xuICB9XG5cbiAgcmV0dXJuIG51bTEgPCBudW0yO1xufTtcblxuXG5leHBvcnRzLkxURSA9IGZ1bmN0aW9uIChudW0xLCBudW0yKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgbnVtMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTEpO1xuICBudW0yID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bTEsIG51bTIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX0VSUk9SO1xuICB9XG5cbiAgcmV0dXJuIG51bTEgPD0gbnVtMjtcbn07XG5cbmV4cG9ydHMuRVEgPSBmdW5jdGlvbiAodmFsdWUxLCB2YWx1ZTIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICByZXR1cm4gdmFsdWUxID09PSB2YWx1ZTI7XG59O1xuXG5leHBvcnRzLk5FID0gZnVuY3Rpb24gKHZhbHVlMSwgdmFsdWUyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlMSAhPT0gdmFsdWUyO1xufTtcblxuZXhwb3J0cy5QT1cgPSBmdW5jdGlvbiAoYmFzZSwgZXhwb25lbnQpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBiYXNlID0gdXRpbHMucGFyc2VOdW1iZXIoYmFzZSk7XG4gIGV4cG9uZW50ID0gdXRpbHMucGFyc2VOdW1iZXIoZXhwb25lbnQpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihiYXNlLCBleHBvbmVudCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfRVJST1I7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5QT1dFUihiYXNlLCBleHBvbmVudCk7XG59O1xuXG5leHBvcnRzLlNVTSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmVzdWx0ID0gMDtcbiAgbGV0IGFyZ3NLZXlzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzS2V5cy5sZW5ndGg7ICsraSkge1xuICAgIGxldCBlbHQgPSBhcmd1bWVudHNbYXJnc0tleXNbaV1dO1xuICAgIGlmICh0eXBlb2YgZWx0ID09PSAnbnVtYmVyJykge1xuICAgICAgcmVzdWx0ICs9IGVsdDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgcGFyc2VkID0gcGFyc2VGbG9hdChlbHQpO1xuICAgICAgIWlzTmFOKHBhcnNlZCkgJiYgKHJlc3VsdCArPSBwYXJzZWQpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbHQpKSB7XG4gICAgICByZXN1bHQgKz0gZXhwb3J0cy5TVU0uYXBwbHkobnVsbCwgZWx0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuU1VNSUYgPSBmdW5jdGlvbihyYW5nZSwgY3JpdGVyaWEpIHtcbiAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgbGV0IHJlc3VsdCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2UubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gKGV2YWwocmFuZ2VbaV0gKyBjcml0ZXJpYSkpID8gcmFuZ2VbaV0gOiAwOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbi8vWFfvvJogU1VNSUZT5Ye95pWwXG5leHBvcnRzLlNVTUlGUyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgYXJncyA9IHV0aWxzLmFyZ3NUb0FycmF5KGFyZ3VtZW50cyk7XG4gIGxldCByYW5nZSA9IHV0aWxzLmZsYXR0ZW4oYXJncy5zaGlmdCgpKTtcbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBpZiAoYXJnc1tpXS5sZW5ndGggIT09IHJhbmdlLmxlbmd0aCB8fCAhYXJnc1tpICsgMV0pIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgICB9XG4gIH1cbiAgbGV0IGFyciA9IFtdO1xuICBsZXQgcmVzdWx0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgbGV0IHNfYXJyID0gW107XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBhcmdzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgY29tcGFyZVZhbHVlID0gYXJnc1tpICsgMV0gKyBcIlwiO1xuICAgICAgaWYgKGNvbXBhcmVWYWx1ZS5sYXN0SW5kZXhPZihcIj49XCIpID09IDApIHtcbiAgICAgICAgY29tcGFyZVZhbHVlID0gY29tcGFyZVZhbHVlLnJlcGxhY2UoLz49LywgXCJcIik7XG4gICAgICAgIGlmIChpc05hTihjb21wYXJlVmFsdWUpKSB7XG4gICAgICAgICAgc3RyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZVZhbHVlICogMSA8PSBhcmdzW2ldW2pdWzBdKSB7XG4gICAgICAgICAgc19hcnIucHVzaChqKTtcbiAgICAgICAgfVxuICAgICAgfWVsc2UgaWYgKGNvbXBhcmVWYWx1ZS5sYXN0SW5kZXhPZihcIjw9XCIpID09IDApIHtcbiAgICAgICAgY29tcGFyZVZhbHVlID0gY29tcGFyZVZhbHVlLnJlcGxhY2UoLzw9LywgXCJcIik7XG4gICAgICAgIGlmKGlzTmFOKGNvbXBhcmVWYWx1ZSkpIHtcbiAgICAgICAgICBzdHIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlVmFsdWUgKiAxID49IGFyZ3NbaV1bal1bMF0pIHtcbiAgICAgICAgICBzX2Fyci5wdXNoKGopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb21wYXJlVmFsdWUgPSBjb21wYXJlVmFsdWUucmVwbGFjZShcIj1cIiwgXCJcIik7XG4gICAgICBpZiAoY29tcGFyZVZhbHVlLmxhc3RJbmRleE9mKFwiPD5cIikgPT0gMCkge1xuICAgICAgICBjb21wYXJlVmFsdWUgPSBjb21wYXJlVmFsdWUucmVwbGFjZSgvPD4vLCBcIlwiKTtcbiAgICAgICAgaWYgKGNvbXBhcmVWYWx1ZSAhPT0gYXJnc1tpXVtqXVswXSkge1xuICAgICAgICAgIHNfYXJyLnB1c2goaik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzdHIgPSBmYWxzZTtcbiAgICAgICAgaWYgKGNvbXBhcmVWYWx1ZS5sYXN0SW5kZXhPZihcIjxcIikgPT0gMCkge1xuICAgICAgICAgIGNvbXBhcmVWYWx1ZSA9IGNvbXBhcmVWYWx1ZS5yZXBsYWNlKC88LywgXCJcIik7XG4gICAgICAgICAgaWYoaXNOYU4oY29tcGFyZVZhbHVlKSkge1xuICAgICAgICAgICAgc3RyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbXBhcmVWYWx1ZSAqIDEgPiBhcmdzW2ldW2pdWzBdKSB7XG4gICAgICAgICAgICBzX2Fyci5wdXNoKGopO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjb21wYXJlVmFsdWUubGFzdEluZGV4T2YoXCI+XCIpID09IDApIHtcbiAgICAgICAgICBjb21wYXJlVmFsdWUgPSBjb21wYXJlVmFsdWUucmVwbGFjZSgvPi8sIFwiXCIpO1xuICAgICAgICAgIGlmKGlzTmFOKGNvbXBhcmVWYWx1ZSkpIHtcbiAgICAgICAgICAgIHN0ciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb21wYXJlVmFsdWUgKiAxIDwgYXJnc1tpXVtqXVswXSkge1xuICAgICAgICAgICAgc19hcnIucHVzaChqKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVWYWx1ZS5pbmRleE9mKCcqJykgPiAwKXtcbiAgICAgICAgICAgIGxldCB2ID0gY29tcGFyZVZhbHVlXG4gICAgICAgICAgICB2ID0gdi5yZXBsYWNlKCcqJywgJycpXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbaV1bal1bMF0gPT0gJ3N0cmluZycgJiYgYXJnc1tpXVtqXVswXS5pbmRleE9mKHYpID49IDApe1xuICAgICAgICAgICAgICBzX2Fyci5wdXNoKGopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihpc05hTihjb21wYXJlVmFsdWUpKSB7XG4gICAgICAgICAgICBpZihjb21wYXJlVmFsdWUgPT09IGFyZ3NbaV1bal1bMF0pIHtcbiAgICAgICAgICAgICAgc19hcnIucHVzaChqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoY29tcGFyZVZhbHVlICogMSA9PT0gYXJnc1tpXVtqXVswXSkge1xuICAgICAgICAgICAgICBzX2Fyci5wdXNoKGopO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKHN0cikge1xuICAgICAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuICAgIGFyci5wdXNoKHNfYXJyKTtcbiAgfVxuXG4gIGxldCByZXN1bHRBcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFycltpXS5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHZhbHVlID0gYXJyW2ldW2pdO1xuICAgICAgbGV0IGVudGVyID0gMTtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBlbnRlciAhPT0gMyAmJiBrIDwgYXJyLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIGlmIChrICE9PSBpICYmIGFycltrXS5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgICAgICBlbnRlciA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoayAhPT0gaSkge1xuICAgICAgICAgIGVudGVyID0gMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVudGVyID09IDEgJiYgYXJyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZW50ZXIgPSAzO1xuICAgICAgfSBlbHNlIGlmIChlbnRlciA9PSAxICYmIGFyci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW50ZXIgPSAyO1xuICAgICAgfVxuICAgICAgaWYgKGVudGVyID09IDIgJiYgcmVzdWx0QXJyLmluZGV4T2YodmFsdWUpID09IC0xKSB7XG4gICAgICAgIHJlc3VsdEFyci5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYXJyLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRBcnIubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgYSA9IHJhbmdlW3Jlc3VsdEFycltpXV07XG4gICAgaWYgKGEgJiYgIWlzTmFOKGEpKSB7XG4gICAgICByZXN1bHQgKz0gYTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vL1hX77yaZW5kXG5cbmV4cG9ydHMuU1VNUFJPRFVDVCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIWFyZ3VtZW50cyB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCBhcnJheXMgPSBhcmd1bWVudHMubGVuZ3RoICsgMTtcbiAgbGV0IHJlc3VsdCA9IDA7XG4gIGxldCBwcm9kdWN0O1xuICBsZXQgaztcbiAgbGV0IF9pO1xuICBsZXQgX2lqO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50c1swXS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghKGFyZ3VtZW50c1swXVtpXSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgcHJvZHVjdCA9IDE7XG4gICAgICBmb3IgKGsgPSAxOyBrIDwgYXJyYXlzOyBrKyspIHtcbiAgICAgICAgX2kgPSB1dGlscy5wYXJzZU51bWJlcihhcmd1bWVudHNbayAtIDFdW2ldKTtcbiAgICAgICAgaWYgKF9pIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gX2k7XG4gICAgICAgIH1cbiAgICAgICAgcHJvZHVjdCAqPSBfaTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSBwcm9kdWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFyZ3VtZW50c1swXVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBwcm9kdWN0ID0gMTtcbiAgICAgICAgZm9yIChrID0gMTsgayA8IGFycmF5czsgaysrKSB7XG4gICAgICAgICAgX2lqID0gdXRpbHMucGFyc2VOdW1iZXIoYXJndW1lbnRzW2sgLSAxXVtpXVtqXSk7XG4gICAgICAgICAgaWYgKF9paiBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gX2lqO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9kdWN0ICo9IF9pajtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gcHJvZHVjdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuU1VNU1EgPSBmdW5jdGlvbigpIHtcbiAgbGV0IG51bWJlcnMgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XG4gIGlmIChudW1iZXJzIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVycztcbiAgfVxuICBsZXQgcmVzdWx0ID0gMDtcbiAgbGV0IGxlbmd0aCA9IG51bWJlcnMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IChpbmZvcm1hdGlvbi5JU05VTUJFUihudW1iZXJzW2ldKSkgPyBudW1iZXJzW2ldICogbnVtYmVyc1tpXSA6IDA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuU1VNWDJNWTIgPSBmdW5jdGlvbiAoYXJyYXlfeCwgYXJyYXlfeSkge1xuICBpZiAodHlwZW9mIGFycmF5X3ggPT09IFwic3RyaW5nXCIpIHtcbiAgICBhcnJheV94ID0gdXRpbHMuc3RyVG9NYXRyaXgoYXJyYXlfeCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBhcnJheV95ID09PSBcInN0cmluZ1wiKSB7XG4gICAgYXJyYXlfeSA9IHV0aWxzLnN0clRvTWF0cml4KGFycmF5X3kpO1xuICB9XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGFycmF5X3gsIGFycmF5X3kpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCByZXN1bHQgPSAwO1xuICBhcnJheV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3gpKTtcbiAgYXJyYXlfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheV95KSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlfeC5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBhcnJheV94W2ldICogYXJyYXlfeFtpXSAtIGFycmF5X3lbaV0gKiBhcnJheV95W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnRzLlNVTVgyUFkyID0gZnVuY3Rpb24gKGFycmF5X3gsIGFycmF5X3kpIHtcbiAgLy9YVzog5Y+C5pWw6L2s5pWw57uEXG4gIGlmICh0eXBlb2YgYXJyYXlfeCA9PSBcInN0cmluZ1wiKSB7XG4gICAgYXJyYXlfeCA9IHV0aWxzLnN0clRvTWF0cml4KGFycmF5X3gpO1xuICB9XG4gIGlmICh0eXBlb2YgYXJyYXlfeSA9PSBcInN0cmluZ1wiKSB7XG4gICAgYXJyYXlfeSA9IHV0aWxzLnN0clRvTWF0cml4KGFycmF5X3kpO1xuICB9XG4gIC8vWFfvvJplbmRcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYXJyYXlfeCwgYXJyYXlfeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHJlc3VsdCA9IDA7XG4gIGFycmF5X3ggPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJyYXlfeCkpO1xuICBhcnJheV95ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3kpKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheV94Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IGFycmF5X3hbaV0gKiBhcnJheV94W2ldICsgYXJyYXlfeVtpXSAqIGFycmF5X3lbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuU1VNWE1ZMiA9IGZ1bmN0aW9uKGFycmF5X3gsIGFycmF5X3kpIHtcbiAgaWYgKHR5cGVvZiBhcnJheV94ID09PSBcInN0cmluZ1wiKSB7XG4gICAgYXJyYXlfeCA9IHV0aWxzLnN0clRvTWF0cml4KGFycmF5X3gpO1xuICB9XG4gIGlmICh0eXBlb2YgYXJyYXlfeSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGFycmF5X3kgPSB1dGlscy5zdHJUb01hdHJpeChhcnJheV95KTtcbiAgfVxuICBhcnJheV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3gpKTtcbiAgYXJyYXlfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheV95KSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGFycmF5X3gsIGFycmF5X3kpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCByZXN1bHQgPSAwO1xuICBhcnJheV94ID0gdXRpbHMuZmxhdHRlbihhcnJheV94KTtcbiAgYXJyYXlfeSA9IHV0aWxzLmZsYXR0ZW4oYXJyYXlfeSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlfeC5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBNYXRoLnBvdyhhcnJheV94W2ldIC0gYXJyYXlfeVtpXSwgMik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuVEFOID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIE1hdGgudGFuKG51bWJlcik7XG59O1xuXG5leHBvcnRzLlRBTkggPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICBsZXQgZTIgPSBNYXRoLmV4cCgyICogbnVtYmVyKTtcbiAgcmV0dXJuIChlMiAtIDEpIC8gKGUyICsgMSk7XG59O1xuXG5leHBvcnRzLlRSVU5DID0gZnVuY3Rpb24obnVtYmVyLCBkaWdpdHMpIHtcbiAgZGlnaXRzID0gKGRpZ2l0cyA9PT0gdW5kZWZpbmVkKSA/IDAgOiBkaWdpdHM7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGRpZ2l0cyA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpZ2l0cyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgZGlnaXRzKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgc2lnbiA9IChudW1iZXIgPiAwKSA/IDEgOiAtMTtcbiAgcmV0dXJuIHNpZ24gKiAoTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpICogTWF0aC5wb3coMTAsIGRpZ2l0cykpKSAvIE1hdGgucG93KDEwLCBkaWdpdHMpO1xufTtcbiIsImltcG9ydCBtYXRoVHJpZyBmcm9tICcuL21hdGgtdHJpZydcbmltcG9ydCB0ZXh0IGZyb20gJy4vdGV4dCdcbmltcG9ydCAqIGFzIGpTdGF0IGZyb20gJ2pzdGF0J1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnXG5pbXBvcnQge2Vycm9yT2JqfSBmcm9tICcuLi8uLi9jYWxjX3V0aWxzL2Vycm9yX2NvbmZpZydcbmltcG9ydCBtaXNjIGZyb20gJy4vbWlzY2VsbGFuZW91cydcbmltcG9ydCBldmFsRXhwcmVzc2lvbiBmcm9tICcuL2V4cHJlc3Npb24nXG5cbmxldCBTUVJUMlBJID0gMi41MDY2MjgyNzQ2MzEwMDAyO1xuXG5leHBvcnRzLkFWRURFViA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XG4gIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIHJldHVybiBqU3RhdC5zdW0oalN0YXQocmFuZ2UpLnN1YnRyYWN0KGpTdGF0Lm1lYW4ocmFuZ2UpKS5hYnMoKVswXSkgLyByYW5nZS5sZW5ndGg7XG59O1xuXG5leHBvcnRzLkFWRVJBR0UgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMuZmxhdHRlbk51bShhcmd1bWVudHMpO1xuICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBpZiAocmFuZ2UubGVuZ3RoID09PSAwKXtcbiAgICByZXR1cm4gZXJyb3JPYmouZVxuICB9XG4gIGxldCBuID0gcmFuZ2UubGVuZ3RoO1xuICBsZXQgc3VtID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBzdW0gKz0gcmFuZ2VbaV07XG4gICAgY291bnQgKz0gMTtcbiAgfVxuICByZXR1cm4gc3VtIC8gY291bnQ7XG59O1xuXG5leHBvcnRzLkFWRVJBR0VBID0gZnVuY3Rpb24oKSB7XG4gIGxldCByYW5nZSA9IHV0aWxzLmZsYXR0ZW5OdW0oYXJndW1lbnRzKTtcbiAgaWYgKHJhbmdlLmxlbmd0aCA9PT0gMSAmJiBpc05hTihyYW5nZVswXSkpe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRVxuICB9XG4gIGxldCBuID0gcmFuZ2UubGVuZ3RoO1xuICBsZXQgc3VtID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBsZXQgZWwgPSByYW5nZVtpXTtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnbnVtYmVyJykge1xuICAgICAgc3VtICs9IGVsO1xuICAgIH1cbiAgICBpZiAoZWwgPT09IHRydWUpIHtcbiAgICAgIHN1bSsrO1xuICAgIH1cbiAgICBpZiAoZWwgIT09IG51bGwpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW0gLyBjb3VudDtcbn07XG5cbmV4cG9ydHMuQVZFUkFHRUlGID0gZnVuY3Rpb24gKHJhbmdlLCBjcml0ZXJpYSwgYXZlcmFnZV9yYW5nZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG4gIGF2ZXJhZ2VfcmFuZ2UgPSBhdmVyYWdlX3JhbmdlIHx8IHJhbmdlO1xuICByYW5nZSA9IHV0aWxzLmZsYXR0ZW4ocmFuZ2UpO1xuICBhdmVyYWdlX3JhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGF2ZXJhZ2VfcmFuZ2UpKTtcblxuICBpZiAoYXZlcmFnZV9yYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGF2ZXJhZ2VfcmFuZ2U7XG4gIH1cbiAgbGV0IGF2ZXJhZ2VfY291bnQgPSAwO1xuICBsZXQgcmVzdWx0ID0gMDtcbiAgbGV0IGlzV2lsZGNhcmQgPSBjcml0ZXJpYSA9PT0gdm9pZCAwIHx8IGNyaXRlcmlhID09PSAnKic7XG4gIGxldCB0b2tlbml6ZWRDcml0ZXJpYSA9IGlzV2lsZGNhcmQgPyBudWxsIDogZXZhbEV4cHJlc3Npb24ucGFyc2UoY3JpdGVyaWEgKyAnJyk7XG4gIGxldCBmaWx0ZXJfY3JpdGVyaWEgPSBjcml0ZXJpYS5yZXBsYWNlKCc9JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnPD4nLCAnJylcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZS5sZW5ndGg7IGkrKykge1xuICAgIGxldCB2YWx1ZSA9IHJhbmdlW2ldO1xuXG4gICAgaWYgKGlzV2lsZGNhcmQpIHtcbiAgICAgIHJlc3VsdCArPSBhdmVyYWdlX3JhbmdlW2ldO1xuICAgICAgYXZlcmFnZV9jb3VudCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdG9rZW5zID0gW2V2YWxFeHByZXNzaW9uLmNyZWF0ZVRva2VuKHZhbHVlLCBldmFsRXhwcmVzc2lvbi5UT0tFTl9UWVBFX0xJVEVSQUwpXS5jb25jYXQodG9rZW5pemVkQ3JpdGVyaWEpO1xuICAgICAgaWYgKGNyaXRlcmlhLmluZGV4T2YoJzw+JykgPj0gMCl7XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKGZpbHRlcl9jcml0ZXJpYSkgPCAwKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGF2ZXJhZ2VfcmFuZ2VbaV07XG4gICAgICAgICAgYXZlcmFnZV9jb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9ZWxzZSBpZiAoZXZhbEV4cHJlc3Npb24uY29tcHV0ZSh0b2tlbnMpIHx8IHZhbHVlLnRvU3RyaW5nKCkuaW5kZXhPZihmaWx0ZXJfY3JpdGVyaWEpID49IDApIHtcbiAgICAgICAgcmVzdWx0ICs9IGF2ZXJhZ2VfcmFuZ2VbaV07XG4gICAgICAgIGF2ZXJhZ2VfY291bnQrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGF2ZXJhZ2VfY291bnQgPT09IDApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9ESVYwXG4gIH1cbiAgcmV0dXJuIHJlc3VsdCAvIGF2ZXJhZ2VfY291bnQ7XG59O1xuXG5leHBvcnRzLkFWRVJBR0VJRlMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIERvZXMgbm90IHdvcmsgd2l0aCBtdWx0aSBkaW1lbnNpb25hbCByYW5nZXMgeWV0IVxuICAvL2h0dHA6Ly9vZmZpY2UubWljcm9zb2Z0LmNvbS9lbi0wMDEvZXhjZWwtaGVscC9hdmVyYWdlaWZzLWZ1bmN0aW9uLUhBMDEwMDQ3NDkzLmFzcHhcbiAgbGV0IGFyZ3MgPSB1dGlscy5hcmdzVG9BcnJheShhcmd1bWVudHMpO1xuICBsZXQgY3JpdGVyaWFMZW5ndGggPSAoYXJncy5sZW5ndGggLSAxKSAvIDI7XG4gIGxldCByYW5nZSA9IHV0aWxzLmZsYXR0ZW4oYXJnc1swXSk7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCByZXN1bHQgPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2UubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaXNNZWV0Q29uZGl0aW9uID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNyaXRlcmlhTGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCB2YWx1ZSA9IGFyZ3NbMiAqIGogKyAxXVtpXTtcbiAgICAgIGxldCBjcml0ZXJpYSA9IGFyZ3NbMiAqIGogKyAyXTtcbiAgICAgIGxldCBpc1dpbGRjYXJkID0gY3JpdGVyaWEgPT09IHZvaWQgMCB8fCBjcml0ZXJpYSA9PT0gJyonO1xuICAgICAgbGV0IGNvbXB1dGVkUmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIGlmIChpc1dpbGRjYXJkKSB7XG4gICAgICAgIGNvbXB1dGVkUmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCB0b2tlbml6ZWRDcml0ZXJpYSA9IGV2YWxFeHByZXNzaW9uLnBhcnNlKGNyaXRlcmlhICsgJycpO1xuICAgICAgICBsZXQgdG9rZW5zID0gW2V2YWxFeHByZXNzaW9uLmNyZWF0ZVRva2VuKHZhbHVlLCBldmFsRXhwcmVzc2lvbi5UT0tFTl9UWVBFX0xJVEVSQUwpXS5jb25jYXQodG9rZW5pemVkQ3JpdGVyaWEpO1xuXG4gICAgICAgIGNvbXB1dGVkUmVzdWx0ID0gZXZhbEV4cHJlc3Npb24uY29tcHV0ZSh0b2tlbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcml0ZXJpYXMgYXJlIGNhbGN1bGF0ZWQgYXMgQU5EIHNvIGFueSBgZmFsc2VgIGJyZWFrZXMgdGhlIGxvb3AgYXMgdW5tZWV0IGNvbmRpdGlvblxuICAgICAgaWYgKCFjb21wdXRlZFJlc3VsdCkge1xuICAgICAgICBpc01lZXRDb25kaXRpb24gPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlzTWVldENvbmRpdGlvbiA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlzTWVldENvbmRpdGlvbikge1xuICAgICAgcmVzdWx0ICs9IHJhbmdlW2ldO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cblxuICBsZXQgYXZlcmFnZSA9IHJlc3VsdCAvIGNvdW50O1xuXG4gIGlmIChpc05hTihhdmVyYWdlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9ESVYwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhdmVyYWdlO1xuICB9XG59O1xuXG5leHBvcnRzLkJFVEEgPSB7fTtcblxuZXhwb3J0cy5CRVRBLkRJU1QgPSBmdW5jdGlvbiAoeCwgYWxwaGEsIGJldGEsIGN1bXVsYXRpdmUsIEEsIEIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgQSA9IChBID09PSB1bmRlZmluZWQpID8gMCA6IEE7XG4gIEIgPSAoQiA9PT0gdW5kZWZpbmVkKSA/IDEgOiBCO1xuXG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgYWxwaGEgPSB1dGlscy5wYXJzZU51bWJlcihhbHBoYSk7XG4gIGJldGEgPSB1dGlscy5wYXJzZU51bWJlcihiZXRhKTtcbiAgQSA9IHV0aWxzLnBhcnNlTnVtYmVyKEEpO1xuICBCID0gdXRpbHMucGFyc2VOdW1iZXIoQik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIGFscGhhLCBiZXRhLCBBLCBCKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBjdW11bGF0aXZlID0gdXRpbHMucGFyc2VCb29sKGN1bXVsYXRpdmUpXG4gIHggPSAoeCAtIEEpIC8gKEIgLSBBKTtcbiAgcmV0dXJuIGN1bXVsYXRpdmUgPyBqU3RhdC5iZXRhLmNkZih4LCBhbHBoYSwgYmV0YSkgOiBqU3RhdC5iZXRhLnBkZih4LCBhbHBoYSwgYmV0YSkvMjtcbn07XG5cbmV4cG9ydHMuQkVUQS5JTlYgPSBmdW5jdGlvbihwcm9iYWJpbGl0eSwgYWxwaGEsIGJldGEsIEEsIEIpIHtcbiAgQSA9IChBID09PSB1bmRlZmluZWQpID8gMCA6IEE7XG4gIEIgPSAoQiA9PT0gdW5kZWZpbmVkKSA/IDEgOiBCO1xuXG4gIHByb2JhYmlsaXR5ID0gdXRpbHMucGFyc2VOdW1iZXIocHJvYmFiaWxpdHkpO1xuICBhbHBoYSA9IHV0aWxzLnBhcnNlTnVtYmVyKGFscGhhKTtcbiAgYmV0YSA9IHV0aWxzLnBhcnNlTnVtYmVyKGJldGEpO1xuICBBID0gdXRpbHMucGFyc2VOdW1iZXIoQSk7XG4gIEIgPSB1dGlscy5wYXJzZU51bWJlcihCKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocHJvYmFiaWxpdHksIGFscGhhLCBiZXRhLCBBLCBCKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIHJldHVybiBqU3RhdC5iZXRhLmludihwcm9iYWJpbGl0eSwgYWxwaGEsIGJldGEpICogKEIgLSBBKSArIEE7XG59O1xuXG5leHBvcnRzLkJJTk9NID0ge307XG5cbmV4cG9ydHMuQklOT00uRElTVCA9IGZ1bmN0aW9uIChzdWNjZXNzZXMsIHRyaWFscywgcHJvYmFiaWxpdHksIGN1bXVsYXRpdmUpIHtcbiAgc3VjY2Vzc2VzID0gdXRpbHMucGFyc2VOdW1iZXIoc3VjY2Vzc2VzKTtcbiAgdHJpYWxzID0gdXRpbHMucGFyc2VOdW1iZXIodHJpYWxzKTtcbiAgcHJvYmFiaWxpdHkgPSB1dGlscy5wYXJzZU51bWJlcihwcm9iYWJpbGl0eSk7XG4gIGN1bXVsYXRpdmUgPSB1dGlscy5wYXJzZUJvb2woY3VtdWxhdGl2ZSlcbiAgY3VtdWxhdGl2ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGN1bXVsYXRpdmUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihzdWNjZXNzZXMsIHRyaWFscywgcHJvYmFiaWxpdHksIGN1bXVsYXRpdmUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiAoY3VtdWxhdGl2ZSkgPyBqU3RhdC5iaW5vbWlhbC5jZGYoc3VjY2Vzc2VzLCB0cmlhbHMsIHByb2JhYmlsaXR5KSA6IGpTdGF0LmJpbm9taWFsLnBkZihzdWNjZXNzZXMsIHRyaWFscywgcHJvYmFiaWxpdHkpO1xufTtcblxuZXhwb3J0cy5CSU5PTS5JTlYgPSBmdW5jdGlvbih0cmlhbHMsIHByb2JhYmlsaXR5LCBhbHBoYSkge1xuICB0cmlhbHMgPSB1dGlscy5wYXJzZU51bWJlcih0cmlhbHMpO1xuICBwcm9iYWJpbGl0eSA9IHV0aWxzLnBhcnNlTnVtYmVyKHByb2JhYmlsaXR5KTtcbiAgYWxwaGEgPSB1dGlscy5wYXJzZU51bWJlcihhbHBoYSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHRyaWFscywgcHJvYmFiaWxpdHksIGFscGhhKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIGxldCB4ID0gMDtcbiAgd2hpbGUgKHggPD0gdHJpYWxzKSB7XG4gICAgaWYgKGpTdGF0LmJpbm9taWFsLmNkZih4LCB0cmlhbHMsIHByb2JhYmlsaXR5KSA+PSBhbHBoYSkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIHgrKztcbiAgfVxufTtcblxuZXhwb3J0cy5DSElTUSA9IHt9O1xuXG5leHBvcnRzLkNISVNRLkRJU1QgPSBmdW5jdGlvbih4LCBrLCBjdW11bGF0aXZlKSB7XG4gIGN1bXVsYXRpdmUgPSB1dGlscy5wYXJzZUJvb2woY3VtdWxhdGl2ZSlcbiAgaWYgKHggPCAwKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbiAgeCA9IHV0aWxzLnBhcnNlTnVtYmVyKHgpO1xuICBrID0gdXRpbHMucGFyc2VOdW1iZXIoayk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIGspKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiAoY3VtdWxhdGl2ZSkgPyBqU3RhdC5jaGlzcXVhcmUuY2RmKHgsIGspIDogalN0YXQuY2hpc3F1YXJlLnBkZih4LCBrKTtcbn07XG5cbmV4cG9ydHMuQ0hJU1EuRElTVC5SVCA9IGZ1bmN0aW9uKHgsIGspIHtcbiAgaWYgKCF4IHwgIWspIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBpZiAoeCA8IDEgfHwgayA+IE1hdGgucG93KDEwLCAxMCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgeCAhPT0gJ251bWJlcicpIHx8ICh0eXBlb2YgayAhPT0gJ251bWJlcicpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuIDEgLSAgalN0YXQuY2hpc3F1YXJlLmNkZih4LCBrKTtcbn07XG5cbmV4cG9ydHMuQ0hJU1EuSU5WID0gZnVuY3Rpb24ocHJvYmFiaWxpdHksIGspIHtcbiAgcHJvYmFiaWxpdHkgPSB1dGlscy5wYXJzZU51bWJlcihwcm9iYWJpbGl0eSk7XG4gIGsgPSB1dGlscy5wYXJzZU51bWJlcihrKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocHJvYmFiaWxpdHksIGspKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiBqU3RhdC5jaGlzcXVhcmUuaW52KHByb2JhYmlsaXR5LCBrKTtcbn07XG5cbmV4cG9ydHMuQ0hJU1EuSU5WLlJUID0gZnVuY3Rpb24ocCwgaykge1xuICBpZiAoIXAgfCAhaykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGlmIChwIDwgMCB8fCBwID4gMSB8fCBrIDwgMSB8fCBrID4gTWF0aC5wb3coMTAsIDEwKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICBpZiAoKHR5cGVvZiBwICE9PSAnbnVtYmVyJykgfHwgKHR5cGVvZiBrICE9PSAnbnVtYmVyJykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICByZXR1cm4galN0YXQuY2hpc3F1YXJlLmludigxLjAgLSBwLCBrKTtcbn07XG5cbmV4cG9ydHMuQ0hJU1EuVEVTVCA9IGZ1bmN0aW9uKG9ic2VydmVkLCBleHBlY3RlZCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGlmICgoIShvYnNlcnZlZCBpbnN0YW5jZW9mIEFycmF5KSkgfHwgKCEoZXhwZWN0ZWQgaW5zdGFuY2VvZiBBcnJheSkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgaWYgKG9ic2VydmVkLmxlbmd0aCAhPT0gZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgaWYgKG9ic2VydmVkWzBdICYmIGV4cGVjdGVkWzBdICYmXG4gICAgICBvYnNlcnZlZFswXS5sZW5ndGggIT09IGV4cGVjdGVkWzBdLmxlbmd0aCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIGxldCByb3cgPSBvYnNlcnZlZC5sZW5ndGg7XG4gIGxldCB0bXAsIGksIGo7XG5cbiAgLy8gQ29udmVydCBzaW5nbGUtZGltZW5zaW9uIGFycmF5IGludG8gdHdvLWRpbWVuc2lvbiBhcnJheVxuICBmb3IgKGkgPSAwOyBpIDwgcm93OyBpICsrKSB7XG4gICAgaWYgKCEob2JzZXJ2ZWRbaV0gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRtcCA9IG9ic2VydmVkW2ldO1xuICAgICAgb2JzZXJ2ZWRbaV0gPSBbXTtcbiAgICAgIG9ic2VydmVkW2ldLnB1c2godG1wKTtcbiAgICB9XG4gICAgaWYgKCEoZXhwZWN0ZWRbaV0gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRtcCA9IGV4cGVjdGVkW2ldO1xuICAgICAgZXhwZWN0ZWRbaV0gPSBbXTtcbiAgICAgIGV4cGVjdGVkW2ldLnB1c2godG1wKTtcbiAgICB9XG4gIH1cblxuICBsZXQgY29sID0gb2JzZXJ2ZWRbMF0ubGVuZ3RoO1xuICBsZXQgZG9mID0gKGNvbCA9PT0gMSkgPyByb3ctMSA6IChyb3ctMSkqKGNvbC0xKTtcbiAgbGV0IHhzcXIgPSAwO1xuICBsZXQgUGkgPU1hdGguUEk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHJvdzsgaSArKykge1xuICAgIGZvciAoaiA9IDA7IGogPCBjb2w7IGogKyspIHtcbiAgICAgIHhzcXIgKz0gTWF0aC5wb3coKG9ic2VydmVkW2ldW2pdIC0gZXhwZWN0ZWRbaV1bal0pLCAyKSAvIGV4cGVjdGVkW2ldW2pdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBpbmRlcGVuZGVuY3kgYnkgWCBzcXVhcmUgYW5kIGl0cyBkZWdyZWUgb2YgZnJlZWRvbVxuICBmdW5jdGlvbiBDaGlTcSh4c3FyLCBkb2YpIHtcbiAgICBsZXQgcCA9IE1hdGguZXhwKC0wLjUgKiB4c3FyKTtcbiAgICBpZigoZG9mJTIpID09PSAxKSB7XG4gICAgICBwID0gcCAqIE1hdGguc3FydCgyICogeHNxci9QaSk7XG4gICAgfVxuICAgIGxldCBrID0gZG9mO1xuICAgIHdoaWxlKGsgPj0gMikge1xuICAgICAgcCA9IHAgKiB4c3FyL2s7XG4gICAgICBrID0gayAtIDI7XG4gICAgfVxuICAgIGxldCB0ID0gcDtcbiAgICBsZXQgYSA9IGRvZjtcbiAgICB3aGlsZSAodCA+IDAuMDAwMDAwMDAwMSpwKSB7XG4gICAgICBhID0gYSArIDI7XG4gICAgICB0ID0gdCAqIHhzcXIvYTtcbiAgICAgIHAgPSBwICsgdDtcbiAgICB9XG4gICAgcmV0dXJuIDEtcDtcbiAgfVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKENoaVNxKHhzcXIsIGRvZikgKiAxMDAwMDAwKSAvIDEwMDAwMDA7XG59O1xuXG5leHBvcnRzLkNPTFVNTiA9IGZ1bmN0aW9uKCkge1xuICBsZXQgY29sX2xpc3QgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddXG4gIGxldCBjZWxsX25hbWUgPSB0aGlzLmFyZ3NbMF0uY2VsbEZvcm11bGFQcm94eS5uYW1lXG4gIGNlbGxfbmFtZSA9IGNlbGxfbmFtZS5yZXBsYWNlKC9cXGQrL2csJycpXG4gIHJldHVybiBjb2xfbGlzdC5pbmRleE9mKGNlbGxfbmFtZSkrMVxufTtcblxuZXhwb3J0cy5DT0xVTU5TID0gZnVuY3Rpb24obWF0cml4KSB7XG4gIGlmICh0eXBlb2YgbWF0cml4ID09PSAnc3RyaW5nJyl7XG4gICAgbWF0cml4ID0gdXRpbHMuc3RyVG9NYXRyaXgobWF0cml4KVxuICB9XG5cbiAgaWYgKCEobWF0cml4IGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBqU3RhdC5jb2xzKG1hdHJpeCk7XG59O1xuXG5leHBvcnRzLkNPTkZJREVOQ0UgPSB7fTtcblxuZXhwb3J0cy5DT05GSURFTkNFLk5PUk0gPSBmdW5jdGlvbihhbHBoYSwgc2QsIG4pIHtcbiAgYWxwaGEgPSB1dGlscy5wYXJzZU51bWJlcihhbHBoYSk7XG4gIHNkID0gdXRpbHMucGFyc2VOdW1iZXIoc2QpO1xuICBuID0gdXRpbHMucGFyc2VOdW1iZXIobik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGFscGhhLCBzZCwgbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIGpTdGF0Lm5vcm1hbGNpKDEsIGFscGhhLCBzZCwgbilbMV0gLSAxO1xufTtcblxuZXhwb3J0cy5DT05GSURFTkNFLlQgPSBmdW5jdGlvbihhbHBoYSwgc2QsIG4pIHtcbiAgYWxwaGEgPSB1dGlscy5wYXJzZU51bWJlcihhbHBoYSk7XG4gIHNkID0gdXRpbHMucGFyc2VOdW1iZXIoc2QpO1xuICBuID0gdXRpbHMucGFyc2VOdW1iZXIobik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGFscGhhLCBzZCwgbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIGpTdGF0LnRjaSgxLCBhbHBoYSwgc2QsIG4pWzFdIC0gMTtcbn07XG5leHBvcnRzLklGUyA9IGZ1bmN0aW9uKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSArIDEgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBsZXQgY29uZCA9IGFyZ3VtZW50c1tpXTtcbiAgICBsZXQgdmFsID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICBpZiAoY29uZCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xufVxuZXhwb3J0cy5DT1JSRUwgPSBmdW5jdGlvbihhcnJheTEsIGFycmF5Mikge1xuICBhcnJheTEgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJyYXkxKSk7XG4gIGFycmF5MiA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheTIpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYXJyYXkxLCBhcnJheTIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiBqU3RhdC5jb3JyY29lZmYoYXJyYXkxLCBhcnJheTIpO1xufTtcblxuZXhwb3J0cy5DT1VOVCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdXRpbHMubnVtYmVycyh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpLmxlbmd0aDtcbn07XG5cbmV4cG9ydHMuQ09VTlRBID0gZnVuY3Rpb24oKSB7XG4gIGxldCByYW5nZSA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcbiAgcmV0dXJuIHJhbmdlLmxlbmd0aCAtIGV4cG9ydHMuQ09VTlRCTEFOSyhyYW5nZSk7XG59O1xuXG5leHBvcnRzLkNPVU5USU4gPSBmdW5jdGlvbiAocmFuZ2UsIHZhbHVlKSB7XG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJhbmdlW2ldID09PSB2YWx1ZSkge1xuICAgICAgcmVzdWx0Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbmV4cG9ydHMuQ09VTlRCTEFOSyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cyk7XG4gIGxldCBibGFua3MgPSAwO1xuICBsZXQgZWxlbWVudDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZS5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSByYW5nZVtpXTtcbiAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSAnJykge1xuICAgICAgYmxhbmtzKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBibGFua3M7XG59O1xuXG5leHBvcnRzLkNPVU5USUYgPSBmdW5jdGlvbiAocmFuZ2UsIGNyaXRlcmlhKSB7XG4gIHJhbmdlID0gdXRpbHMuZmxhdHRlbihyYW5nZSk7XG4gIGlmIChjcml0ZXJpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCBpc1dpbGRjYXJkID0gY3JpdGVyaWEgPT09IHZvaWQgMCB8fCBjcml0ZXJpYSA9PT0gJyonO1xuXG4gIGlmIChpc1dpbGRjYXJkKSB7XG4gICAgcmV0dXJuIHJhbmdlLmxlbmd0aDtcbiAgfVxuXG4gIGxldCBtYXRjaGVzID0gMDtcbiAgbGV0IHRva2VuaXplZENyaXRlcmlhID0gZXZhbEV4cHJlc3Npb24ucGFyc2UoY3JpdGVyaWEgKyAnJyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZS5sZW5ndGg7IGkrKykge1xuICAgIGxldCB2YWx1ZSA9IHJhbmdlW2ldO1xuICAgIGxldCB0b2tlbnMgPSBbZXZhbEV4cHJlc3Npb24uY3JlYXRlVG9rZW4odmFsdWUsIGV2YWxFeHByZXNzaW9uLlRPS0VOX1RZUEVfTElURVJBTCldLmNvbmNhdCh0b2tlbml6ZWRDcml0ZXJpYSk7XG5cbiAgICBpZiAoZXZhbEV4cHJlc3Npb24uY29tcHV0ZSh0b2tlbnMpKSB7XG4gICAgICBtYXRjaGVzKys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59O1xuXG5leHBvcnRzLkNPVU5USUZTID0gZnVuY3Rpb24gKCkge1xuICBsZXQgYXJncyA9IHV0aWxzLmFyZ3NUb0FycmF5KGFyZ3VtZW50cyk7XG4gIGxldCByZXN1bHRzID0gbmV3IEFycmF5KHV0aWxzLmZsYXR0ZW4oYXJnc1swXSkubGVuZ3RoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRzW2ldID0gdHJ1ZTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMikge1xuICAgIGxldCByYW5nZSA9IHV0aWxzLmZsYXR0ZW4oYXJnc1tpXSk7XG4gICAgbGV0IGNyaXRlcmlhID0gYXJnc1tpICsgMV07XG4gICAgbGV0IGlzV2lsZGNhcmQgPSBjcml0ZXJpYSA9PT0gdm9pZCAwIHx8IGNyaXRlcmlhID09PSAnKic7XG5cbiAgICBpZiAoIWlzV2lsZGNhcmQpIHtcbiAgICAgIGxldCB0b2tlbml6ZWRDcml0ZXJpYSA9IGV2YWxFeHByZXNzaW9uLnBhcnNlKGNyaXRlcmlhICsgJycpO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJhbmdlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHJhbmdlW2pdO1xuICAgICAgICBsZXQgdG9rZW5zID0gW2V2YWxFeHByZXNzaW9uLmNyZWF0ZVRva2VuKHZhbHVlLCBldmFsRXhwcmVzc2lvbi5UT0tFTl9UWVBFX0xJVEVSQUwpXS5jb25jYXQodG9rZW5pemVkQ3JpdGVyaWEpO1xuICAgICAgICByZXN1bHRzW2pdID0gcmVzdWx0c1tqXSAmJiBldmFsRXhwcmVzc2lvbi5jb21wdXRlKHRva2Vucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXN1bHRzW2ldKSB7XG4gICAgICByZXN1bHQrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuQ09VTlRVTklRVUUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBtaXNjLlVOSVFVRS5hcHBseShudWxsLCB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpLmxlbmd0aDtcbn07XG5cbmV4cG9ydHMuQ09WQVJJQU5DRSA9IHt9O1xuXG5leHBvcnRzLkNPVkFSSUFOQ0UuUCA9IGZ1bmN0aW9uKGFycmF5MSwgYXJyYXkyKSB7XG4gIGFycmF5MSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheTEpKTtcbiAgYXJyYXkyID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5MikpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheTEsIGFycmF5MikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IG1lYW4xID0galN0YXQubWVhbihhcnJheTEpO1xuICBsZXQgbWVhbjIgPSBqU3RhdC5tZWFuKGFycmF5Mik7XG4gIGxldCByZXN1bHQgPSAwO1xuICBsZXQgbiA9IGFycmF5MS5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IChhcnJheTFbaV0gLSBtZWFuMSkgKiAoYXJyYXkyW2ldIC0gbWVhbjIpO1xuICB9XG4gIHJldHVybiByZXN1bHQgLyBuO1xufTtcblxuZXhwb3J0cy5DT1ZBUklBTkNFLlMgPSBmdW5jdGlvbihhcnJheTEsIGFycmF5Mikge1xuICBpZiAodHlwZW9mIGFycmF5MSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGFycmF5MSA9IHV0aWxzLnN0clRvTWF0cml4KGFycmF5MSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBhcnJheTIgPT09IFwic3RyaW5nXCIpIHtcbiAgICBhcnJheTIgPSB1dGlscy5zdHJUb01hdHJpeChhcnJheTIpO1xuICB9XG4gIGFycmF5MSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheTEpKTtcbiAgYXJyYXkyID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5MikpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheTEsIGFycmF5MikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIGpTdGF0LmNvdmFyaWFuY2UoYXJyYXkxLCBhcnJheTIpO1xufTtcblxuZXhwb3J0cy5ERVZTUSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XG4gIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGxldCBtZWFuID0galN0YXQubWVhbihyYW5nZSk7XG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IE1hdGgucG93KChyYW5nZVtpXSAtIG1lYW4pLCAyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5FWFBPTiA9IHt9O1xuXG5leHBvcnRzLkVYUE9OLkRJU1QgPSBmdW5jdGlvbih4LCBsYW1iZGEsIGN1bXVsYXRpdmUpIHtcbiAgY3VtdWxhdGl2ZSA9IHV0aWxzLnBhcnNlQm9vbChjdW11bGF0aXZlKVxuICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XG4gIGxhbWJkYSA9IHV0aWxzLnBhcnNlTnVtYmVyKGxhbWJkYSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIGxhbWJkYSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIChjdW11bGF0aXZlKSA/IGpTdGF0LmV4cG9uZW50aWFsLmNkZih4LCBsYW1iZGEpIDogalN0YXQuZXhwb25lbnRpYWwucGRmKHgsIGxhbWJkYSk7XG59O1xuXG5leHBvcnRzLkYgPSB7fTtcblxuZXhwb3J0cy5GLkRJU1QgPSBmdW5jdGlvbiAoeCwgZDEsIGQyLCBjdW11bGF0aXZlKSB7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgZDEgPSB1dGlscy5wYXJzZU51bWJlcihkMSk7XG4gIGQyID0gdXRpbHMucGFyc2VOdW1iZXIoZDIpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBkMSwgZDIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChjdW11bGF0aXZlID09PSB1bmRlZmluZWQpe1xuICAgIGN1bXVsYXRpdmUgPSB0cnVlXG4gIH1cbiAgaWYodHlwZW9mIGN1bXVsYXRpdmUgPT09ICdzdHJpbmcnICYmICEoY3VtdWxhdGl2ZSA9PT0gJ0ZBTFNFJyB8fCBjdW11bGF0aXZlID09PSAnVFJVRScpKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUVcbiAgfVxuICBpZiAoY3VtdWxhdGl2ZSA9PT0gJ0ZBTFNFJyl7XG4gICAgY3VtdWxhdGl2ZSA9IGZhbHNlXG4gIH1cbiAgcmV0dXJuIChjdW11bGF0aXZlKSA/IGpTdGF0LmNlbnRyYWxGLmNkZih4LCBkMSwgZDIpIDogalN0YXQuY2VudHJhbEYucGRmKHgsIGQxLCBkMik7XG59O1xuXG5leHBvcnRzLkYuRElTVC5SVCA9IGZ1bmN0aW9uICh4LCBkMSwgZDIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDMpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBpZiAoeCA8IDAgfHwgZDEgPCAxIHx8IGQyIDwgMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICBpZiAoKHR5cGVvZiB4ICE9PSAnbnVtYmVyJykgfHwgKHR5cGVvZiBkMSAhPT0gJ251bWJlcicpIHx8ICh0eXBlb2YgZDIgIT09ICdudW1iZXInKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIHJldHVybiAxIC0galN0YXQuY2VudHJhbEYuY2RmKHgsIGQxLCBkMik7XG59O1xuXG5leHBvcnRzLkYuSU5WID0gZnVuY3Rpb24gKHAsIGQxLCBkMikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGlmIChwIDwgMCB8fCBwID4gMSB8fCBkMSA8IDEgfHwgZDEgPiBNYXRoLnBvdygxMCwgMTApIHx8IGQyIDwgMSB8fCBkMiA+IE1hdGgucG93KDEwLCAxMCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgcCAhPT0gJ251bWJlcicpIHx8ICh0eXBlb2YgZDEgIT09ICdudW1iZXInKSB8fCAodHlwZW9mIGQyICE9PSAnbnVtYmVyJykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICByZXR1cm4galN0YXQuY2VudHJhbEYuaW52KDEuMCAtIHAsIGQxLCBkMik7XG59O1xuXG5leHBvcnRzLkYuSU5WLlJUID0gZnVuY3Rpb24gKHAsIGQxLCBkMikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGlmIChwIDwgMCB8fCBwID4gMSB8fCBkMSA8IDEgfHwgZDEgPiBNYXRoLnBvdygxMCwgMTApIHx8IGQyIDwgMSB8fCBkMiA+IE1hdGgucG93KDEwLCAxMCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgcCAhPT0gJ251bWJlcicpIHx8ICh0eXBlb2YgZDEgIT09ICdudW1iZXInKSB8fCAodHlwZW9mIGQyICE9PSAnbnVtYmVyJykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICByZXR1cm4galN0YXQuY2VudHJhbEYuaW52KDEuMCAtIHAsIGQxLCBkMik7XG59O1xuXG5leHBvcnRzLkYuVEVTVCA9IGZ1bmN0aW9uIChhcnJheTEsIGFycmF5Mikge1xuICBpZiAoIWFycmF5MSB8fCAhYXJyYXkyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKCEoYXJyYXkxIGluc3RhbmNlb2YgQXJyYXkpIHx8ICEoYXJyYXkyIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKGFycmF5MS5sZW5ndGggPCAyIHx8IGFycmF5Mi5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX0RJVjA7XG4gIH1cblxuICBsZXQgc3VtT2ZTcXVhcmVzID0gZnVuY3Rpb24gKHZhbHVlcywgeDEpIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgc3VtICs9IE1hdGgucG93KCh2YWx1ZXNbaV0gLSB4MSksIDIpO1xuICAgIH1cbiAgICByZXR1cm4gc3VtO1xuICB9O1xuXG4gIGxldCB4MSA9IG1hdGhUcmlnLlNVTShhcnJheTEpIC8gYXJyYXkxLmxlbmd0aDtcbiAgbGV0IHgyID0gbWF0aFRyaWcuU1VNKGFycmF5MikgLyBhcnJheTIubGVuZ3RoO1xuICBsZXQgc3VtMSA9IHN1bU9mU3F1YXJlcyhhcnJheTEsIHgxKSAvIChhcnJheTEubGVuZ3RoIC0gMSk7XG4gIGxldCBzdW0yID0gc3VtT2ZTcXVhcmVzKGFycmF5MiwgeDIpIC8gKGFycmF5Mi5sZW5ndGggLSAxKTtcblxuICByZXR1cm4gc3VtMSAvIHN1bTI7XG59O1xuXG5leHBvcnRzLkZJU0hFUiA9IGZ1bmN0aW9uKHgpIHtcbiAgeCA9IHV0aWxzLnBhcnNlTnVtYmVyKHgpO1xuICBpZiAoeCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgcmV0dXJuIE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG59O1xuXG5leHBvcnRzLkZJU0hFUklOViA9IGZ1bmN0aW9uKHkpIHtcbiAgeSA9IHV0aWxzLnBhcnNlTnVtYmVyKHkpO1xuICBpZiAoeSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbiAgbGV0IGUyeSA9IE1hdGguZXhwKDIgKiB5KTtcbiAgcmV0dXJuIChlMnkgLSAxKSAvIChlMnkgKyAxKTtcbn07XG5cbmV4cG9ydHMuRk9SRUNBU1QgPSBmdW5jdGlvbih4LCBkYXRhX3ksIGRhdGFfeCkge1xuICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XG4gIGRhdGFfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3kpKTtcbiAgZGF0YV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeCkpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBkYXRhX3ksIGRhdGFfeCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHhtZWFuID0galN0YXQubWVhbihkYXRhX3gpO1xuICBsZXQgeW1lYW4gPSBqU3RhdC5tZWFuKGRhdGFfeSk7XG4gIGxldCBuID0gZGF0YV94Lmxlbmd0aDtcbiAgbGV0IG51bSA9IDA7XG4gIGxldCBkZW4gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIG51bSArPSAoZGF0YV94W2ldIC0geG1lYW4pICogKGRhdGFfeVtpXSAtIHltZWFuKTtcbiAgICBkZW4gKz0gTWF0aC5wb3coZGF0YV94W2ldIC0geG1lYW4sIDIpO1xuICB9XG4gIGxldCBiID0gbnVtIC8gZGVuO1xuICBsZXQgYSA9IHltZWFuIC0gYiAqIHhtZWFuO1xuICByZXR1cm4gYSArIGIgKiB4O1xufTtcblxuZXhwb3J0cy5GUkVRVUVOQ1kgPSBmdW5jdGlvbihkYXRhLCBiaW5zKSB7XG4gIGRhdGEgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YSkpO1xuICBiaW5zID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGJpbnMpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZGF0YSwgYmlucykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IG4gPSBkYXRhLmxlbmd0aDtcbiAgbGV0IGIgPSBiaW5zLmxlbmd0aDtcbiAgbGV0IHIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gYjsgaSsrKSB7XG4gICAgcltpXSA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGlmIChkYXRhW2pdIDw9IGJpbnNbMF0pIHtcbiAgICAgICAgICByWzBdICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaSA8IGIpIHtcbiAgICAgICAgaWYgKGRhdGFbal0gPiBiaW5zW2kgLSAxXSAmJiBkYXRhW2pdIDw9IGJpbnNbaV0pIHtcbiAgICAgICAgICByW2ldICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gYikge1xuICAgICAgICBpZiAoZGF0YVtqXSA+IGJpbnNbYiAtIDFdKSB7XG4gICAgICAgICAgcltiXSArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByO1xufTtcblxuXG5leHBvcnRzLkdBTU1BID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIGlmIChwYXJzZUludChudW1iZXIsIDEwKSA9PT0gbnVtYmVyICYmIG51bWJlciA8IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgcmV0dXJuIGpTdGF0LmdhbW1hZm4obnVtYmVyKTtcbn07XG5cbmV4cG9ydHMuR0FNTUEuRElTVCA9IGZ1bmN0aW9uKHZhbHVlLCBhbHBoYSwgYmV0YSwgY3VtdWxhdGl2ZSkge1xuICBjdW11bGF0aXZlID0gdXRpbHMucGFyc2VCb29sKGN1bXVsYXRpdmUpXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSA0KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKHZhbHVlIDwgMCB8fCBhbHBoYSA8PSAwIHx8IGJldGEgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykgfHwgKHR5cGVvZiBhbHBoYSAhPT0gJ251bWJlcicpIHx8ICh0eXBlb2YgYmV0YSAhPT0gJ251bWJlcicpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuIGN1bXVsYXRpdmUgPyBqU3RhdC5nYW1tYS5jZGYodmFsdWUsIGFscGhhLCBiZXRhLCB0cnVlKSA6IGpTdGF0LmdhbW1hLnBkZih2YWx1ZSwgYWxwaGEsIGJldGEsIGZhbHNlKTtcbn07XG5cbmV4cG9ydHMuR0FNTUEuSU5WID0gZnVuY3Rpb24ocHJvYmFiaWxpdHksIGFscGhhLCBiZXRhKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAzKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKHByb2JhYmlsaXR5IDwgMCB8fCBwcm9iYWJpbGl0eSA+IDEgfHwgYWxwaGEgPD0gMCB8fCBiZXRhIDw9IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgcHJvYmFiaWxpdHkgIT09ICdudW1iZXInKSB8fCAodHlwZW9mIGFscGhhICE9PSAnbnVtYmVyJykgfHwgKHR5cGVvZiBiZXRhICE9PSAnbnVtYmVyJykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICByZXR1cm4galN0YXQuZ2FtbWEuaW52KHByb2JhYmlsaXR5LCBhbHBoYSwgYmV0YSk7XG59O1xuXG5leHBvcnRzLkdBTU1BTE4gPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4galN0YXQuZ2FtbWFsbihudW1iZXIpO1xufTtcblxuZXhwb3J0cy5HQU1NQUxOLlBSRUNJU0UgPSBmdW5jdGlvbih4KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKHggPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICBpZiAodHlwZW9mIHggIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuIGpTdGF0LmdhbW1hbG4oeCk7XG59O1xuXG5leHBvcnRzLkdBVVNTID0gZnVuY3Rpb24oeikge1xuICB6ID0gdXRpbHMucGFyc2VOdW1iZXIoeik7XG4gIGlmICh6IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gejtcbiAgfVxuICByZXR1cm4galN0YXQubm9ybWFsLmNkZih6LCAwLCAxKSAtIDAuNTtcbn07XG5cbmV4cG9ydHMuR0VPTUVBTiA9IGZ1bmN0aW9uKCkge1xuICBsZXQgYXJncyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgaWYgKGFyZ3MgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBhcmdzO1xuICB9XG4gIHJldHVybiBqU3RhdC5nZW9tZWFuKGFyZ3MpO1xufTtcblxuZXhwb3J0cy5HUk9XVEggPSBmdW5jdGlvbihrbm93bl95LCBrbm93bl94LCBuZXdfeCwgdXNlX2NvbnN0KSB7XG4gIC8vIENyZWRpdHM6IElsbWFyaSBLYXJvbmVuIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE0MTYxOTkwL2hvdy10by1pbXBsZW1lbnQtZ3Jvd3RoLWZ1bmN0aW9uLWluLWphdmFzY3JpcHQpXG5cbiAga25vd25feSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkoa25vd25feSk7XG4gIGlmIChrbm93bl95IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4ga25vd25feTtcbiAgfVxuXG4gIC8vIERlZmF1bHQgdmFsdWVzIGZvciBvcHRpb25hbCBwYXJhbWV0ZXJzOlxuICBsZXQgaTtcbiAgaWYgKGtub3duX3ggPT09IHVuZGVmaW5lZCkge1xuICAgIGtub3duX3ggPSBbXTtcbiAgICBmb3IgKGkgPSAxOyBpIDw9IGtub3duX3kubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtub3duX3gucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgaWYgKG5ld194ID09PSB1bmRlZmluZWQpIHtcbiAgICBuZXdfeCA9IFtdO1xuICAgIGZvciAoaSA9IDE7IGkgPD0ga25vd25feS5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3X3gucHVzaChpKTtcbiAgICB9XG4gIH1cblxuICBrbm93bl94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheShrbm93bl94KTtcbiAgbmV3X3ggPSB1dGlscy5wYXJzZU51bWJlckFycmF5KG5ld194KTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3Ioa25vd25feCwgbmV3X3gpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cblxuICBpZiAodXNlX2NvbnN0ID09PSB1bmRlZmluZWQpIHtcbiAgICB1c2VfY29uc3QgPSB0cnVlO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIHN1bXMgb3ZlciB0aGUgZGF0YTpcbiAgbGV0IG4gPSBrbm93bl95Lmxlbmd0aDtcbiAgbGV0IGF2Z194ID0gMDtcbiAgbGV0IGF2Z195ID0gMDtcbiAgbGV0IGF2Z194eSA9IDA7XG4gIGxldCBhdmdfeHggPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgbGV0IHggPSBrbm93bl94W2ldO1xuICAgIGxldCB5ID0gTWF0aC5sb2coa25vd25feVtpXSk7XG4gICAgYXZnX3ggKz0geDtcbiAgICBhdmdfeSArPSB5O1xuICAgIGF2Z194eSArPSB4ICogeTtcbiAgICBhdmdfeHggKz0geCAqIHg7XG4gIH1cbiAgYXZnX3ggLz0gbjtcbiAgYXZnX3kgLz0gbjtcbiAgYXZnX3h5IC89IG47XG4gIGF2Z194eCAvPSBuO1xuXG4gIC8vIENvbXB1dGUgbGluZWFyIHJlZ3Jlc3Npb24gY29lZmZpY2llbnRzOlxuICBsZXQgYmV0YTtcbiAgbGV0IGFscGhhO1xuICBpZiAodXNlX2NvbnN0KSB7XG4gICAgYmV0YSA9IChhdmdfeHkgLSBhdmdfeCAqIGF2Z195KSAvIChhdmdfeHggLSBhdmdfeCAqIGF2Z194KTtcbiAgICBhbHBoYSA9IGF2Z195IC0gYmV0YSAqIGF2Z194O1xuICB9IGVsc2Uge1xuICAgIGJldGEgPSBhdmdfeHkgLyBhdmdfeHg7XG4gICAgYWxwaGEgPSAwO1xuICB9XG5cbiAgLy8gQ29tcHV0ZSBhbmQgcmV0dXJuIHJlc3VsdCBhcnJheTpcbiAgbGV0IG5ld195ID0gW107XG4gIGZvciAoaSA9IDA7IGkgPCBuZXdfeC5sZW5ndGg7IGkrKykge1xuICAgIG5ld195LnB1c2goTWF0aC5leHAoYWxwaGEgKyBiZXRhICogbmV3X3hbaV0pKTtcbiAgfVxuICByZXR1cm4gbmV3X3k7XG59O1xuXG5leHBvcnRzLkhBUk1FQU4gPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xuICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBsZXQgbiA9IHJhbmdlLmxlbmd0aDtcbiAgbGV0IGRlbiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgZGVuICs9IDEgLyByYW5nZVtpXTtcbiAgfVxuICByZXR1cm4gbiAvIGRlbjtcbn07XG5cbmV4cG9ydHMuSFlQR0VPTSA9IHt9O1xuXG5leHBvcnRzLkhZUEdFT00uRElTVCA9IGZ1bmN0aW9uKHgsIG4sIE0sIE4sIGN1bXVsYXRpdmUpIHtcbiAgY3VtdWxhdGl2ZSA9IHV0aWxzLnBhcnNlQm9vbChjdW11bGF0aXZlKVxuICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XG4gIG4gPSB1dGlscy5wYXJzZU51bWJlcihuKTtcbiAgTSA9IHV0aWxzLnBhcnNlTnVtYmVyKE0pO1xuICBOID0gdXRpbHMucGFyc2VOdW1iZXIoTik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIG4sIE0sIE4pKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgZnVuY3Rpb24gcGRmKHgsIG4sIE0sIE4pIHtcbiAgICByZXR1cm4gbWF0aFRyaWcuQ09NQklOKE0sIHgpICogbWF0aFRyaWcuQ09NQklOKE4gLSBNLCBuIC0geCkgLyBtYXRoVHJpZy5DT01CSU4oTiwgbik7XG4gIH1cblxuICBmdW5jdGlvbiBjZGYoeCwgbiwgTSwgTikge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHBkZihpLCBuLCBNLCBOKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiAoY3VtdWxhdGl2ZSkgPyBjZGYoeCwgbiwgTSwgTikgOiBwZGYoeCwgbiwgTSwgTik7XG59O1xuXG5leHBvcnRzLklOVEVSQ0VQVCA9IGZ1bmN0aW9uKGtub3duX3ksIGtub3duX3gpIHtcbiAga25vd25feSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkoa25vd25feSk7XG4gIGtub3duX3ggPSB1dGlscy5wYXJzZU51bWJlckFycmF5KGtub3duX3gpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihrbm93bl95LCBrbm93bl94KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoa25vd25feS5sZW5ndGggIT09IGtub3duX3gubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG4gIHJldHVybiBleHBvcnRzLkZPUkVDQVNUKDAsIGtub3duX3ksIGtub3duX3gpO1xufTtcblxuZXhwb3J0cy5LVVJUID0gZnVuY3Rpb24oKSB7XG4gIGxldCByYW5nZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgbGV0IG1lYW4gPSBqU3RhdC5tZWFuKHJhbmdlKTtcbiAgbGV0IG4gPSByYW5nZS5sZW5ndGg7XG4gIGxldCBzaWdtYSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgc2lnbWEgKz0gTWF0aC5wb3cocmFuZ2VbaV0gLSBtZWFuLCA0KTtcbiAgfVxuICBzaWdtYSA9IHNpZ21hIC8gTWF0aC5wb3coalN0YXQuc3RkZXYocmFuZ2UsIHRydWUpLCA0KTtcbiAgcmV0dXJuICgobiAqIChuICsgMSkpIC8gKChuIC0gMSkgKiAobiAtIDIpICogKG4gLSAzKSkpICogc2lnbWEgLSAzICogKG4gLSAxKSAqIChuIC0gMSkgLyAoKG4gLSAyKSAqIChuIC0gMykpO1xufTtcblxuZXhwb3J0cy5MQVJHRSA9IGZ1bmN0aW9uKHJhbmdlLCBrKSB7XG4gIHJhbmdlID0gdXRpbHMuZmxhdHRlbihyYW5nZSlcbiAgbGV0IGFyciA9IFtdXG4gIGZvciAoIGxldCBpPTA7aTxyYW5nZS5sZW5ndGg7aSsrKXtcbiAgICBpZiAocGFyc2VGbG9hdChyYW5nZVtpXSkpe1xuICAgICAgYXJyLnB1c2goKHBhcnNlRmxvYXQocmFuZ2VbaV0pKSlcbiAgICB9XG4gIH1cbiAgcmFuZ2UgPSBhcnI7XG4gIGsgPSB1dGlscy5wYXJzZU51bWJlcihrKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIGspKSB7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIHJldHVybiByYW5nZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhO1xuICB9KVtrIC0gMV07XG59O1xuXG5leHBvcnRzLkxJTkVTVCA9IGZ1bmN0aW9uKGRhdGFfeSwgZGF0YV94KSB7XG4gIGRhdGFfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3kpKTtcbiAgZGF0YV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeCkpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihkYXRhX3ksIGRhdGFfeCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHltZWFuID0galN0YXQubWVhbihkYXRhX3kpO1xuICBsZXQgeG1lYW4gPSBqU3RhdC5tZWFuKGRhdGFfeCk7XG4gIGxldCBuID0gZGF0YV94Lmxlbmd0aDtcbiAgbGV0IG51bSA9IDA7XG4gIGxldCBkZW4gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIG51bSArPSAoZGF0YV94W2ldIC0geG1lYW4pICogKGRhdGFfeVtpXSAtIHltZWFuKTtcbiAgICBkZW4gKz0gTWF0aC5wb3coZGF0YV94W2ldIC0geG1lYW4sIDIpO1xuICB9XG4gIGxldCBtID0gbnVtIC8gZGVuO1xuICBsZXQgYiA9IHltZWFuIC0gbSAqIHhtZWFuO1xuICByZXR1cm4gW20sIGJdO1xufTtcblxuLy8gQWNjb3JkaW5nIHRvIE1pY3Jvc29mdDpcbi8vIGh0dHA6Ly9vZmZpY2UubWljcm9zb2Z0LmNvbS9lbi11cy9zdGFydGVyLWhlbHAvbG9nZXN0LWZ1bmN0aW9uLUhQMDEwMzQyNjY1LmFzcHhcbi8vIExPR0VTVCByZXR1cm5zIGFyZSBiYXNlZCBvbiB0aGUgZm9sbG93aW5nIGxpbmVhciBtb2RlbDpcbi8vIGxuIHkgPSB4MSBsbiBtMSArIC4uLiArIHhuIGxuIG1uICsgbG4gYlxuZXhwb3J0cy5MT0dFU1QgPSBmdW5jdGlvbihkYXRhX3ksIGRhdGFfeCkge1xuICBkYXRhX3kgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YV95KSk7XG4gIGRhdGFfeCA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3gpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZGF0YV95LCBkYXRhX3gpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YV95Lmxlbmd0aDsgaSArKykge1xuICAgIGRhdGFfeVtpXSA9IE1hdGgubG9nKGRhdGFfeVtpXSk7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gZXhwb3J0cy5MSU5FU1QoZGF0YV95LCBkYXRhX3gpO1xuICByZXN1bHRbMF0gPSBNYXRoLnJvdW5kKE1hdGguZXhwKHJlc3VsdFswXSkqMTAwMDAwMCkvMTAwMDAwMDtcbiAgcmVzdWx0WzFdID0gTWF0aC5yb3VuZChNYXRoLmV4cChyZXN1bHRbMV0pKjEwMDAwMDApLzEwMDAwMDA7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnRzLkxPR05PUk0gPSB7fTtcblxuZXhwb3J0cy5MT0dOT1JNLkRJU1QgPSBmdW5jdGlvbih4LCBtZWFuLCBzZCwgY3VtdWxhdGl2ZSkge1xuICBjdW11bGF0aXZlID0gdXRpbHMucGFyc2VCb29sKGN1bXVsYXRpdmUpXG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbWVhbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG1lYW4pO1xuICBzZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHNkKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgbWVhbiwgc2QpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiAoY3VtdWxhdGl2ZSkgPyBqU3RhdC5sb2dub3JtYWwuY2RmKHgsIG1lYW4sIHNkKSA6IGpTdGF0LmxvZ25vcm1hbC5wZGYoeCwgbWVhbiwgc2QpO1xufTtcblxuZXhwb3J0cy5MT0dOT1JNLklOViA9IGZ1bmN0aW9uKHByb2JhYmlsaXR5LCBtZWFuLCBzZCkge1xuICBwcm9iYWJpbGl0eSA9IHV0aWxzLnBhcnNlTnVtYmVyKHByb2JhYmlsaXR5KTtcbiAgbWVhbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG1lYW4pO1xuICBzZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHNkKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocHJvYmFiaWxpdHksIG1lYW4sIHNkKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4galN0YXQubG9nbm9ybWFsLmludihwcm9iYWJpbGl0eSwgbWVhbiwgc2QpO1xufTtcblxuZXhwb3J0cy5NQVggPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMuYXJyYXlWYWx1ZXNUb051bWJlcnModXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgcmV0dXJuIChyYW5nZS5sZW5ndGggPT09IDApID8gMCA6IE1hdGgubWF4LmFwcGx5KE1hdGgsIHJhbmdlKTtcbn07XG5cbmV4cG9ydHMuTUFYQSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5hcnJheVZhbHVlc1RvTnVtYmVycyh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xuICByZXR1cm4gKHJhbmdlLmxlbmd0aCA9PT0gMCkgPyAwIDogTWF0aC5tYXguYXBwbHkoTWF0aCwgcmFuZ2UpO1xufTtcblxuZXhwb3J0cy5NRURJQU4gPSBmdW5jdGlvbigpIHtcbiAgbGV0IGFyciA9IHV0aWxzLmFycmF5VmFsdWVzVG9OdW1iZXJzKHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XG4gIGxldCBhcnIyID0gW11cbiAgZm9yIChsZXQgaT0wO2k8YXJyLmxlbmd0aDtpKyspe1xuICAgIGlmICh0eXBlb2YgYXJyW2ldID09PSAnbnVtYmVyJyl7XG4gICAgICBhcnIyLnB1c2goYXJyW2ldKVxuICAgIH1cbiAgfVxuICBsZXQgcmFuZ2UgPSB1dGlscy5hcnJheVZhbHVlc1RvTnVtYmVycyh1dGlscy5mbGF0dGVuKGFycjIpKTtcbiAgcmV0dXJuIGpTdGF0Lm1lZGlhbihyYW5nZSk7XG59O1xuXG5leHBvcnRzLk1JTiA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cyk7XG4gIHJldHVybiAocmFuZ2UubGVuZ3RoID09PSAwKSA/IDAgOiBNYXRoLm1pbi5hcHBseShNYXRoLCByYW5nZSk7XG59O1xuXG5leHBvcnRzLk1JTkEgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMuYXJyYXlWYWx1ZXNUb051bWJlcnModXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgcmV0dXJuIChyYW5nZS5sZW5ndGggPT09IDApID8gMCA6IE1hdGgubWluLmFwcGx5KE1hdGgsIHJhbmdlKTtcbn07XG5cbmV4cG9ydHMuTU9ERSA9IHt9O1xuXG5leHBvcnRzLk1PREUuTVVMVCA9IGZ1bmN0aW9uKCkge1xuICAvLyBDcmVkaXRzOiBSb8O2bmHDpG5cbiAgbGV0IHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xuICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBsZXQgbiA9IHJhbmdlLmxlbmd0aDtcbiAgbGV0IGNvdW50ID0ge307XG4gIGxldCBtYXhJdGVtcyA9IFtdO1xuICBsZXQgbWF4ID0gMDtcbiAgbGV0IGN1cnJlbnRJdGVtO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgY3VycmVudEl0ZW0gPSByYW5nZVtpXTtcbiAgICBjb3VudFtjdXJyZW50SXRlbV0gPSBjb3VudFtjdXJyZW50SXRlbV0gPyBjb3VudFtjdXJyZW50SXRlbV0gKyAxIDogMTtcbiAgICBpZiAoY291bnRbY3VycmVudEl0ZW1dID4gbWF4KSB7XG4gICAgICBtYXggPSBjb3VudFtjdXJyZW50SXRlbV07XG4gICAgICBtYXhJdGVtcyA9IFtdO1xuICAgIH1cbiAgICBpZiAoY291bnRbY3VycmVudEl0ZW1dID09PSBtYXgpIHtcbiAgICAgIG1heEl0ZW1zW21heEl0ZW1zLmxlbmd0aF0gPSBjdXJyZW50SXRlbTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heEl0ZW1zO1xufTtcblxuZXhwb3J0cy5NT0RFLlNOR0wgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xuICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICByZXR1cm4gZXhwb3J0cy5NT0RFLk1VTFQocmFuZ2UpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSlbMF07XG59O1xuXG5leHBvcnRzLk5FR0JJTk9NID0ge307XG5cbmV4cG9ydHMuTkVHQklOT00uRElTVCA9IGZ1bmN0aW9uKGssIHIsIHAsIGN1bXVsYXRpdmUpIHtcbiAgY3VtdWxhdGl2ZSA9IHV0aWxzLnBhcnNlQm9vbChjdW11bGF0aXZlKVxuICBrID0gdXRpbHMucGFyc2VOdW1iZXIoayk7XG4gIHIgPSB1dGlscy5wYXJzZU51bWJlcihyKTtcbiAgcCA9IHV0aWxzLnBhcnNlTnVtYmVyKHApO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihrLCByLCBwKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gKGN1bXVsYXRpdmUpID8galN0YXQubmVnYmluLmNkZihrLCByLCBwKSA6IGpTdGF0Lm5lZ2Jpbi5wZGYoaywgciwgcCk7XG59O1xuXG5leHBvcnRzLk5PUk0gPSB7fTtcblxuZXhwb3J0cy5OT1JNLkRJU1QgPSBmdW5jdGlvbih4LCBtZWFuLCBzZCwgY3VtdWxhdGl2ZSkge1xuICBjdW11bGF0aXZlID0gdXRpbHMucGFyc2VCb29sKGN1bXVsYXRpdmUpXG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbWVhbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG1lYW4pO1xuICBzZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHNkKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgbWVhbiwgc2QpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChzZCA8PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBub3JtYWwgZGlzdHJpYnV0aW9uIGNvbXB1dGVkIGJ5IGpTdGF0IFtodHRwOi8vanN0YXQub3JnXVxuICByZXR1cm4gKGN1bXVsYXRpdmUpID8galN0YXQubm9ybWFsLmNkZih4LCBtZWFuLCBzZCkgOiBqU3RhdC5ub3JtYWwucGRmKHgsIG1lYW4sIHNkKTtcbn07XG5cbmV4cG9ydHMuTk9STS5JTlYgPSBmdW5jdGlvbihwcm9iYWJpbGl0eSwgbWVhbiwgc2QpIHtcbiAgcHJvYmFiaWxpdHkgPSB1dGlscy5wYXJzZU51bWJlcihwcm9iYWJpbGl0eSk7XG4gIG1lYW4gPSB1dGlscy5wYXJzZU51bWJlcihtZWFuKTtcbiAgc2QgPSB1dGlscy5wYXJzZU51bWJlcihzZCk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHByb2JhYmlsaXR5LCBtZWFuLCBzZCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIGpTdGF0Lm5vcm1hbC5pbnYocHJvYmFiaWxpdHksIG1lYW4sIHNkKTtcbn07XG5cbmV4cG9ydHMuTk9STS5TID0ge307XG5cbmV4cG9ydHMuTk9STS5TLkRJU1QgPSBmdW5jdGlvbih6LCBjdW11bGF0aXZlKSB7XG4gIGN1bXVsYXRpdmUgPSB1dGlscy5wYXJzZUJvb2woY3VtdWxhdGl2ZSlcbiAgeiA9IHV0aWxzLnBhcnNlTnVtYmVyKHopO1xuICBpZiAoeiBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiAoY3VtdWxhdGl2ZSkgPyBqU3RhdC5ub3JtYWwuY2RmKHosIDAsIDEpIDogalN0YXQubm9ybWFsLnBkZih6LCAwLCAxKTtcbn07XG5cbmV4cG9ydHMuTk9STS5TLklOViA9IGZ1bmN0aW9uKHByb2JhYmlsaXR5KSB7XG4gIHByb2JhYmlsaXR5ID0gdXRpbHMucGFyc2VOdW1iZXIocHJvYmFiaWxpdHkpO1xuICBpZiAocHJvYmFiaWxpdHkgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4galN0YXQubm9ybWFsLmludihwcm9iYWJpbGl0eSwgMCwgMSk7XG59O1xuXG5leHBvcnRzLlBFQVJTT04gPSBmdW5jdGlvbihkYXRhX3gsIGRhdGFfeSkge1xuICBkYXRhX3kgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YV95KSk7XG4gIGRhdGFfeCA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3gpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZGF0YV95LCBkYXRhX3gpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCB4bWVhbiA9IGpTdGF0Lm1lYW4oZGF0YV94KTtcbiAgbGV0IHltZWFuID0galN0YXQubWVhbihkYXRhX3kpO1xuICBsZXQgbiA9IGRhdGFfeC5sZW5ndGg7XG4gIGxldCBudW0gPSAwO1xuICBsZXQgZGVuMSA9IDA7XG4gIGxldCBkZW4yID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBudW0gKz0gKGRhdGFfeFtpXSAtIHhtZWFuKSAqIChkYXRhX3lbaV0gLSB5bWVhbik7XG4gICAgZGVuMSArPSBNYXRoLnBvdyhkYXRhX3hbaV0gLSB4bWVhbiwgMik7XG4gICAgZGVuMiArPSBNYXRoLnBvdyhkYXRhX3lbaV0gLSB5bWVhbiwgMik7XG4gIH1cbiAgcmV0dXJuIG51bSAvIE1hdGguc3FydChkZW4xICogZGVuMik7XG59O1xuXG5leHBvcnRzLlBFUkNFTlRJTEUgPSB7fTtcblxuZXhwb3J0cy5QRVJDRU5USUxFLkVYQyA9IGZ1bmN0aW9uKGFycmF5LCBrKSB7XG4gIGFycmF5ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5KSk7XG4gIGsgPSB1dGlscy5wYXJzZU51bWJlcihrKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYXJyYXksIGspKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGFycmF5ID0gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH1cbiAgfSk7XG4gIGxldCBuID0gYXJyYXkubGVuZ3RoO1xuICBpZiAoayA8IDEgLyAobiArIDEpIHx8IGsgPiAxIC0gMSAvIChuICsgMSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGxldCBsID0gayAqIChuICsgMSkgLSAxO1xuICBsZXQgZmwgPSBNYXRoLmZsb29yKGwpO1xuICByZXR1cm4gdXRpbHMuY2xlYW5GbG9hdCgobCA9PT0gZmwpID8gYXJyYXlbbF0gOiBhcnJheVtmbF0gKyAobCAtIGZsKSAqIChhcnJheVtmbCArIDFdIC0gYXJyYXlbZmxdKSk7XG59O1xuXG5leHBvcnRzLlBFUkNFTlRJTEUuSU5DID0gZnVuY3Rpb24oYXJyYXksIGspIHtcbiAgYXJyYXkgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJyYXkpKTtcbiAgayA9IHV0aWxzLnBhcnNlTnVtYmVyKGspO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheSwgaykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgYXJyYXkgPSBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcbiAgbGV0IGwgPSBrICogKG4gLSAxKTtcbiAgbGV0IGZsID0gTWF0aC5mbG9vcihsKTtcbiAgcmV0dXJuIHV0aWxzLmNsZWFuRmxvYXQoKGwgPT09IGZsKSA/IGFycmF5W2xdIDogYXJyYXlbZmxdICsgKGwgLSBmbCkgKiAoYXJyYXlbZmwgKyAxXSAtIGFycmF5W2ZsXSkpO1xufTtcblxuZXhwb3J0cy5QRVJDRU5UUkFOSyA9IHt9O1xuXG5leHBvcnRzLlBFUkNFTlRSQU5LLkVYQyA9IGZ1bmN0aW9uKGFycmF5LCB4LCBzaWduaWZpY2FuY2UpIHtcbiAgc2lnbmlmaWNhbmNlID0gKHNpZ25pZmljYW5jZSA9PT0gdW5kZWZpbmVkKSA/IDMgOiBzaWduaWZpY2FuY2U7XG4gIGFycmF5ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5KSk7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgc2lnbmlmaWNhbmNlID0gdXRpbHMucGFyc2VOdW1iZXIoc2lnbmlmaWNhbmNlKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYXJyYXksIHgsIHNpZ25pZmljYW5jZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgYXJyYXkgPSBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICBsZXQgdW5pcXVlcyA9IG1pc2MuVU5JUVVFLmFwcGx5KG51bGwsIGFycmF5KTtcbiAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XG4gIGxldCBtID0gdW5pcXVlcy5sZW5ndGg7XG4gIGxldCBwb3dlciA9IE1hdGgucG93KDEwLCBzaWduaWZpY2FuY2UpO1xuICBsZXQgcmVzdWx0ID0gMDtcbiAgbGV0IG1hdGNoID0gZmFsc2U7XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKCFtYXRjaCAmJiBpIDwgbSkge1xuICAgIGlmICh4ID09PSB1bmlxdWVzW2ldKSB7XG4gICAgICByZXN1bHQgPSAoYXJyYXkuaW5kZXhPZih1bmlxdWVzW2ldKSArIDEpIC8gKG4gKyAxKTtcbiAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHggPj0gdW5pcXVlc1tpXSAmJiAoeCA8IHVuaXF1ZXNbaSArIDFdIHx8IGkgPT09IG0gLSAxKSkge1xuICAgICAgcmVzdWx0ID0gKGFycmF5LmluZGV4T2YodW5pcXVlc1tpXSkgKyAxICsgKHggLSB1bmlxdWVzW2ldKSAvICh1bmlxdWVzW2kgKyAxXSAtIHVuaXF1ZXNbaV0pKSAvIChuICsgMSk7XG4gICAgICBtYXRjaCA9IHRydWU7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcihyZXN1bHQgKiBwb3dlcikgLyBwb3dlcjtcbn07XG5cbmV4cG9ydHMuUEVSQ0VOVFJBTksuSU5DID0gZnVuY3Rpb24oYXJyYXksIHgsIHNpZ25pZmljYW5jZSkge1xuICBzaWduaWZpY2FuY2UgPSAoc2lnbmlmaWNhbmNlID09PSB1bmRlZmluZWQpID8gMyA6IHNpZ25pZmljYW5jZTtcbiAgYXJyYXkgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJyYXkpKTtcbiAgeCA9IHV0aWxzLnBhcnNlTnVtYmVyKHgpO1xuICBzaWduaWZpY2FuY2UgPSB1dGlscy5wYXJzZU51bWJlcihzaWduaWZpY2FuY2UpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheSwgeCwgc2lnbmlmaWNhbmNlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBhcnJheSA9IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSk7XG4gIGxldCB1bmlxdWVzID0gbWlzYy5VTklRVUUuYXBwbHkobnVsbCwgYXJyYXkpO1xuICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcbiAgbGV0IG0gPSB1bmlxdWVzLmxlbmd0aDtcbiAgbGV0IHBvd2VyID0gTWF0aC5wb3coMTAsIHNpZ25pZmljYW5jZSk7XG4gIGxldCByZXN1bHQgPSAwO1xuICBsZXQgbWF0Y2ggPSBmYWxzZTtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoIW1hdGNoICYmIGkgPCBtKSB7XG4gICAgaWYgKHggPT09IHVuaXF1ZXNbaV0pIHtcbiAgICAgIHJlc3VsdCA9IGFycmF5LmluZGV4T2YodW5pcXVlc1tpXSkgLyAobiAtIDEpO1xuICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoeCA+PSB1bmlxdWVzW2ldICYmICh4IDwgdW5pcXVlc1tpICsgMV0gfHwgaSA9PT0gbSAtIDEpKSB7XG4gICAgICByZXN1bHQgPSAoYXJyYXkuaW5kZXhPZih1bmlxdWVzW2ldKSArICh4IC0gdW5pcXVlc1tpXSkgLyAodW5pcXVlc1tpICsgMV0gLSB1bmlxdWVzW2ldKSkgLyAobiAtIDEpO1xuICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIE1hdGguZmxvb3IocmVzdWx0ICogcG93ZXIpIC8gcG93ZXI7XG59O1xuXG5leHBvcnRzLlBFUk1VVCA9IGZ1bmN0aW9uKG51bWJlciwgbnVtYmVyX2Nob3Nlbikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBudW1iZXJfY2hvc2VuID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyX2Nob3Nlbik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgbnVtYmVyX2Nob3NlbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIG1hdGhUcmlnLkZBQ1QobnVtYmVyKSAvIG1hdGhUcmlnLkZBQ1QobnVtYmVyIC0gbnVtYmVyX2Nob3Nlbik7XG59O1xuXG5leHBvcnRzLlBFUk1VVEFUSU9OQSA9IGZ1bmN0aW9uKG51bWJlciwgbnVtYmVyX2Nob3Nlbikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBudW1iZXJfY2hvc2VuID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyX2Nob3Nlbik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgbnVtYmVyX2Nob3NlbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIE1hdGgucG93KG51bWJlciwgbnVtYmVyX2Nob3Nlbik7XG59O1xuXG5leHBvcnRzLlBISSA9IGZ1bmN0aW9uKHgpIHtcbiAgeCA9IHV0aWxzLnBhcnNlTnVtYmVyKHgpO1xuICBpZiAoeCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiBNYXRoLmV4cCgtMC41ICogeCAqIHgpIC8gU1FSVDJQSTtcbn07XG5cbmV4cG9ydHMuUE9JU1NPTiA9IHt9O1xuXG5leHBvcnRzLlBPSVNTT04uRElTVCA9IGZ1bmN0aW9uKHgsIG1lYW4sIGN1bXVsYXRpdmUpIHtcbiAgY3VtdWxhdGl2ZSA9IHV0aWxzLnBhcnNlQm9vbChjdW11bGF0aXZlKVxuICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XG4gIG1lYW4gPSB1dGlscy5wYXJzZU51bWJlcihtZWFuKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgbWVhbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIChjdW11bGF0aXZlKSA/IGpTdGF0LnBvaXNzb24uY2RmKHgsIG1lYW4pIDogalN0YXQucG9pc3Nvbi5wZGYoeCwgbWVhbik7XG59O1xuXG5leHBvcnRzLlBST0IgPSBmdW5jdGlvbihyYW5nZSwgcHJvYmFiaWxpdHksIGxvd2VyLCB1cHBlcikge1xuICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHVwcGVyID0gKHVwcGVyID09PSB1bmRlZmluZWQpID8gbG93ZXIgOiB1cHBlcjtcblxuICByYW5nZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihyYW5nZSkpO1xuICBwcm9iYWJpbGl0eSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihwcm9iYWJpbGl0eSkpO1xuICBsb3dlciA9IHV0aWxzLnBhcnNlTnVtYmVyKGxvd2VyKTtcbiAgdXBwZXIgPSB1dGlscy5wYXJzZU51bWJlcih1cHBlcik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhbmdlLCBwcm9iYWJpbGl0eSwgbG93ZXIsIHVwcGVyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIGlmIChsb3dlciA9PT0gdXBwZXIpIHtcbiAgICByZXR1cm4gKHJhbmdlLmluZGV4T2YobG93ZXIpID49IDApID8gcHJvYmFiaWxpdHlbcmFuZ2UuaW5kZXhPZihsb3dlcildIDogMDtcbiAgfVxuXG4gIGxldCBzb3J0ZWQgPSByYW5nZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICBsZXQgbiA9IHNvcnRlZC5sZW5ndGg7XG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGlmIChzb3J0ZWRbaV0gPj0gbG93ZXIgJiYgc29ydGVkW2ldIDw9IHVwcGVyKSB7XG4gICAgICByZXN1bHQgKz0gcHJvYmFiaWxpdHlbcmFuZ2UuaW5kZXhPZihzb3J0ZWRbaV0pXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuUVVBUlRJTEUgPSB7fTtcblxuZXhwb3J0cy5RVUFSVElMRS5FWEMgPSBmdW5jdGlvbihyYW5nZSwgcXVhcnQpIHtcbiAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcbiAgcXVhcnQgPSB1dGlscy5wYXJzZU51bWJlcihxdWFydCk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhbmdlLCBxdWFydCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgc3dpdGNoIChxdWFydCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBleHBvcnRzLlBFUkNFTlRJTEUuRVhDKHJhbmdlLCAwLjI1KTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gZXhwb3J0cy5QRVJDRU5USUxFLkVYQyhyYW5nZSwgMC41KTtcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gZXhwb3J0cy5QRVJDRU5USUxFLkVYQyhyYW5nZSwgMC43NSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbn07XG5cbmV4cG9ydHMuUVVBUlRJTEUuSU5DID0gZnVuY3Rpb24ocmFuZ2UsIHF1YXJ0KSB7XG4gIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHJhbmdlKSk7XG4gIHF1YXJ0ID0gdXRpbHMucGFyc2VOdW1iZXIocXVhcnQpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYW5nZSwgcXVhcnQpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHN3aXRjaCAocXVhcnQpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gZXhwb3J0cy5QRVJDRU5USUxFLklOQyhyYW5nZSwgMC4yNSk7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUEVSQ0VOVElMRS5JTkMocmFuZ2UsIDAuNSk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUEVSQ0VOVElMRS5JTkMocmFuZ2UsIDAuNzUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG59O1xuXG5leHBvcnRzLlJBTksgPSB7fTtcblxuZXhwb3J0cy5SQU5LLkFWRyA9IGZ1bmN0aW9uKG51bWJlciwgcmFuZ2UsIG9yZGVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHJhbmdlKSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgcmFuZ2UpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJhbmdlID0gdXRpbHMuZmxhdHRlbihyYW5nZSk7XG4gIG9yZGVyID0gb3JkZXIgfHwgZmFsc2U7XG4gIGxldCBzb3J0ID0gKG9yZGVyKSA/IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0gOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhO1xuICB9O1xuICByYW5nZSA9IHJhbmdlLnNvcnQoc29ydCk7XG5cbiAgbGV0IGxlbmd0aCA9IHJhbmdlLmxlbmd0aDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChyYW5nZVtpXSA9PT0gbnVtYmVyKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoY291bnQgPiAxKSA/ICgyICogcmFuZ2UuaW5kZXhPZihudW1iZXIpICsgY291bnQgKyAxKSAvIDIgOiByYW5nZS5pbmRleE9mKG51bWJlcikgKyAxO1xufTtcblxuZXhwb3J0cy5SQU5LLkVRID0gZnVuY3Rpb24obnVtYmVyLCByYW5nZSwgb3JkZXIpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCByYW5nZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgb3JkZXIgPSBvcmRlciB8fCBmYWxzZTtcbiAgbGV0IHNvcnQgPSAob3JkZXIpID8gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGE7XG4gIH07XG4gIHJhbmdlID0gcmFuZ2Uuc29ydChzb3J0KTtcbiAgcmV0dXJuIHJhbmdlLmluZGV4T2YobnVtYmVyKSArIDE7XG59O1xuXG5leHBvcnRzLlJPVyA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIGlmICghKG1hdHJpeCBpbnN0YW5jZW9mIEFycmF5KSB8fCAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4galN0YXQucm93KG1hdHJpeCwgaW5kZXgpO1xufTtcblxuZXhwb3J0cy5ST1dTID0gZnVuY3Rpb24obWF0cml4KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKCEobWF0cml4IGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBqU3RhdC5yb3dzKG1hdHJpeCk7XG59O1xuXG5leHBvcnRzLlJTUSA9IGZ1bmN0aW9uKGRhdGFfeCwgZGF0YV95KSB7IC8vIG5vIG5lZWQgdG8gZmxhdHRlbiBoZXJlLCBQRUFSU09OIHdpbGwgdGFrZSBjYXJlIG9mIHRoYXRcbiAgZGF0YV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeCkpO1xuICBkYXRhX3kgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YV95KSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGRhdGFfeCwgZGF0YV95KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gTWF0aC5wb3coZXhwb3J0cy5QRUFSU09OKGRhdGFfeCwgZGF0YV95KSwgMik7XG59O1xuXG5leHBvcnRzLlNLRVcgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xuICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBsZXQgbWVhbiA9IGpTdGF0Lm1lYW4ocmFuZ2UpO1xuICBsZXQgbiA9IHJhbmdlLmxlbmd0aDtcbiAgbGV0IHNpZ21hID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBzaWdtYSArPSBNYXRoLnBvdyhyYW5nZVtpXSAtIG1lYW4sIDMpO1xuICB9XG4gIHJldHVybiBuICogc2lnbWEgLyAoKG4gLSAxKSAqIChuIC0gMikgKiBNYXRoLnBvdyhqU3RhdC5zdGRldihyYW5nZSwgdHJ1ZSksIDMpKTtcbn07XG5cbmV4cG9ydHMuU0tFVy5QID0gZnVuY3Rpb24oKSB7XG4gIGxldCByYW5nZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgbGV0IG1lYW4gPSBqU3RhdC5tZWFuKHJhbmdlKTtcbiAgbGV0IG4gPSByYW5nZS5sZW5ndGg7XG4gIGxldCBtMiA9IDA7XG4gIGxldCBtMyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgbTMgKz0gTWF0aC5wb3cocmFuZ2VbaV0gLSBtZWFuLCAzKTtcbiAgICBtMiArPSBNYXRoLnBvdyhyYW5nZVtpXSAtIG1lYW4sIDIpO1xuICB9XG4gIG0zID0gbTMgLyBuO1xuICBtMiA9IG0yIC8gbjtcbiAgcmV0dXJuIG0zIC8gTWF0aC5wb3cobTIsIDMgLyAyKTtcbn07XG5cbmV4cG9ydHMuU0xPUEUgPSBmdW5jdGlvbihkYXRhX3ksIGRhdGFfeCkge1xuICBkYXRhX3kgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YV95KSk7XG4gIGRhdGFfeCA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3gpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZGF0YV95LCBkYXRhX3gpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCB4bWVhbiA9IGpTdGF0Lm1lYW4oZGF0YV94KTtcbiAgbGV0IHltZWFuID0galN0YXQubWVhbihkYXRhX3kpO1xuICBsZXQgbiA9IGRhdGFfeC5sZW5ndGg7XG4gIGxldCBudW0gPSAwO1xuICBsZXQgZGVuID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBudW0gKz0gKGRhdGFfeFtpXSAtIHhtZWFuKSAqIChkYXRhX3lbaV0gLSB5bWVhbik7XG4gICAgZGVuICs9IE1hdGgucG93KGRhdGFfeFtpXSAtIHhtZWFuLCAyKTtcbiAgfVxuICByZXR1cm4gbnVtIC8gZGVuO1xufTtcblxuZXhwb3J0cy5TTUFMTCA9IGZ1bmN0aW9uKHJhbmdlLCBrKSB7XG4gIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHJhbmdlKSk7XG4gIGsgPSB1dGlscy5wYXJzZU51bWJlcihrKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIGspKSB7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIHJldHVybiByYW5nZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pW2sgLSAxXTtcbn07XG5cbmV4cG9ydHMuU1RBTkRBUkRJWkUgPSBmdW5jdGlvbih4LCBtZWFuLCBzZCkge1xuICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XG4gIG1lYW4gPSB1dGlscy5wYXJzZU51bWJlcihtZWFuKTtcbiAgc2QgPSB1dGlscy5wYXJzZU51bWJlcihzZCk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIG1lYW4sIHNkKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gKHggLSBtZWFuKSAvIHNkO1xufTtcblxuZXhwb3J0cy5TVERFViA9IHt9O1xuXG5leHBvcnRzLlNUREVWLlAgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHYgPSBleHBvcnRzLlZBUi5QLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBNYXRoLnNxcnQodik7XG59O1xuXG5leHBvcnRzLlNUREVWLlMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHYgPSBleHBvcnRzLlZBUi5TLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBNYXRoLnNxcnQodik7XG59O1xuXG5leHBvcnRzLlNUREVWQSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgdiA9IGV4cG9ydHMuVkFSQS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICByZXR1cm4gTWF0aC5zcXJ0KHYpO1xufTtcblxuZXhwb3J0cy5TVERFVlBBID0gZnVuY3Rpb24oKSB7XG4gIGxldCB2ID0gZXhwb3J0cy5WQVJQQS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICByZXR1cm4gTWF0aC5zcXJ0KHYpO1xufTtcblxuXG5leHBvcnRzLlNURVlYID0gZnVuY3Rpb24oZGF0YV95LCBkYXRhX3gpIHtcbiAgZGF0YV95ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeSkpO1xuICBkYXRhX3ggPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YV94KSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGRhdGFfeSwgZGF0YV94KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgeG1lYW4gPSBqU3RhdC5tZWFuKGRhdGFfeCk7XG4gIGxldCB5bWVhbiA9IGpTdGF0Lm1lYW4oZGF0YV95KTtcbiAgbGV0IG4gPSBkYXRhX3gubGVuZ3RoO1xuICBsZXQgbGZ0ID0gMDtcbiAgbGV0IG51bSA9IDA7XG4gIGxldCBkZW4gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGxmdCArPSBNYXRoLnBvdyhkYXRhX3lbaV0gLSB5bWVhbiwgMik7XG4gICAgbnVtICs9IChkYXRhX3hbaV0gLSB4bWVhbikgKiAoZGF0YV95W2ldIC0geW1lYW4pO1xuICAgIGRlbiArPSBNYXRoLnBvdyhkYXRhX3hbaV0gLSB4bWVhbiwgMik7XG4gIH1cbiAgcmV0dXJuIE1hdGguc3FydCgobGZ0IC0gbnVtICogbnVtIC8gZGVuKSAvIChuIC0gMikpO1xufTtcblxuZXhwb3J0cy5UUkFOU1BPU0UgPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgaWYgKCFtYXRyaXgpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cbiAgcmV0dXJuIGpTdGF0LnRyYW5zcG9zZShtYXRyaXgpO1xufTtcblxuZXhwb3J0cy5UID0gdGV4dC5UO1xuXG5leHBvcnRzLlQuRElTVCA9IGZ1bmN0aW9uICh4LCBkZiwgY3VtdWxhdGl2ZSkge1xuICBjdW11bGF0aXZlID0gdXRpbHMucGFyc2VCb29sKGN1bXVsYXRpdmUpXG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgZGYgPSB1dGlscy5wYXJzZU51bWJlcihkZik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIGRmKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gKGN1bXVsYXRpdmUpID8galN0YXQuc3R1ZGVudHQuY2RmKHgsIGRmKSA6IGpTdGF0LnN0dWRlbnR0LnBkZih4LCBkZik7XG59O1xuXG5leHBvcnRzLlQuRElTVFsnMlQnXSA9IGZ1bmN0aW9uKHgsIGRmKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgaWYgKHggPCAwIHx8IGRmIDwgMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICBpZiAoKHR5cGVvZiB4ICE9PSAnbnVtYmVyJykgfHwgKHR5cGVvZiBkZiAhPT0gJ251bWJlcicpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuICgxIC0galN0YXQuc3R1ZGVudHQuY2RmKHggLCBkZikpICogMjtcbn07XG5cbmV4cG9ydHMuVC5ESVNULlJUID0gZnVuY3Rpb24oeCwgZGYpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICBpZiAoeCA8IDAgfHwgZGYgPCAxKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIHggIT09ICdudW1iZXInKSB8fCAodHlwZW9mIGRmICE9PSAnbnVtYmVyJykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICByZXR1cm4gMSAtIGpTdGF0LnN0dWRlbnR0LmNkZih4ICwgZGYpO1xufTtcblxuZXhwb3J0cy5ULklOViA9IGZ1bmN0aW9uIChwcm9iYWJpbGl0eSwgZGYpIHtcbiAgLy8gcHJvYmFiaWxpdHkgPSB1dGlscy5wYXJzZU51bWJlcihwcm9iYWJpbGl0eSk7XG4gIC8vIGRmID0gdXRpbHMucGFyc2VOdW1iZXIoZGYpO1xuICAvLyBpZiAodXRpbHMuYW55SXNFcnJvcihwcm9iYWJpbGl0eSwgZGYpKSB7XG4gIC8vICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAvLyB9XG4gIC8vIGxldCByZXMgPSBqU3RhdC5zdHVkZW50dC5pbnYocHJvYmFiaWxpdHksIGRmKTtcbiAgLy8gcmV0dXJuIHJlc1xuICBwcm9iYWJpbGl0eSA9IHV0aWxzLnBhcnNlTnVtYmVyKHByb2JhYmlsaXR5KTtcbiAgZGYgPSB1dGlscy5wYXJzZU51bWJlcihkZik7XG4gIGlmIChwcm9iYWJpbGl0eSA8PSAwIHx8IHByb2JhYmlsaXR5ID4gMSB8fCBkZiA8IDEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHByb2JhYmlsaXR5LCBkZikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIE1hdGguYWJzKGpTdGF0LnN0dWRlbnR0Lmludihwcm9iYWJpbGl0eS8yLCBkZikpO1xufTtcblxuZXhwb3J0cy5ULklOVlsnMlQnXSA9IGZ1bmN0aW9uKHByb2JhYmlsaXR5LCBkZikge1xuICBwcm9iYWJpbGl0eSA9IHV0aWxzLnBhcnNlTnVtYmVyKHByb2JhYmlsaXR5KTtcbiAgZGYgPSB1dGlscy5wYXJzZU51bWJlcihkZik7XG4gIGlmIChwcm9iYWJpbGl0eSA8PSAwIHx8IHByb2JhYmlsaXR5ID4gMSB8fCBkZiA8IDEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHByb2JhYmlsaXR5LCBkZikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIE1hdGguYWJzKGpTdGF0LnN0dWRlbnR0Lmludihwcm9iYWJpbGl0eS8yLCBkZikpO1xufTtcblxuLy8gVGhlIGFsZ29yaXRobSBjYW4gYmUgZm91bmQgaGVyZTpcbi8vIGh0dHA6Ly93d3cuY2hlbS51b2EuZ3IvYXBwbGV0cy9BcHBsZXRUdGVzdC9BcHBsX1R0ZXN0Mi5odG1sXG5leHBvcnRzLlQuVEVTVCA9IGZ1bmN0aW9uKGRhdGFfeCwgZGF0YV95KSB7XG4gIGRhdGFfeCA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3gpKTtcbiAgZGF0YV95ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeSkpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihkYXRhX3gsIGRhdGFfeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICBsZXQgbWVhbl94ID0galN0YXQubWVhbihkYXRhX3gpO1xuICBsZXQgbWVhbl95ID0galN0YXQubWVhbihkYXRhX3kpO1xuICBsZXQgc194ID0gMDtcbiAgbGV0IHNfeSA9IDA7XG4gIGxldCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhX3gubGVuZ3RoOyBpKyspIHtcbiAgICBzX3ggKz0gTWF0aC5wb3coZGF0YV94W2ldIC0gbWVhbl94LCAyKTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YV95Lmxlbmd0aDsgaSsrKSB7XG4gICAgc195ICs9IE1hdGgucG93KGRhdGFfeVtpXSAtIG1lYW5feSwgMik7XG4gIH1cblxuICBzX3ggPSBzX3ggLyAoZGF0YV94Lmxlbmd0aC0xKTtcbiAgc195ID0gc195IC8gKGRhdGFfeS5sZW5ndGgtMSk7XG5cbiAgbGV0IHQgPSBNYXRoLmFicyhtZWFuX3ggLSBtZWFuX3kpIC8gTWF0aC5zcXJ0KHNfeC9kYXRhX3gubGVuZ3RoICsgc195L2RhdGFfeS5sZW5ndGgpO1xuXG4gIHJldHVybiBleHBvcnRzLlQuRElTVFsnMlQnXSh0LCBkYXRhX3gubGVuZ3RoK2RhdGFfeS5sZW5ndGgtMik7XG59O1xuXG5leHBvcnRzLlRSRU5EID0gZnVuY3Rpb24gKGRhdGFfeSwgZGF0YV94LCBuZXdfZGF0YV94KSB7XG4gIGRhdGFfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihkYXRhX3kpKTtcbiAgZGF0YV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeCkpO1xuICBsZXQgbGluZXN0ID0gZXhwb3J0cy5MSU5FU1QoZGF0YV95LCBkYXRhX3gpO1xuICBsZXQgbSA9IGxpbmVzdFswXTtcbiAgbGV0IGIgPSBsaW5lc3RbMV07XG4gIHJldHVybiBtICogbmV3X2RhdGFfeCArIGJcbn07XG5cbmV4cG9ydHMuVFJJTU1FQU4gPSBmdW5jdGlvbiAocmFuZ2UsIHBlcmNlbnQpIHtcbiAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcbiAgcGVyY2VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmNlbnQpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYW5nZSwgcGVyY2VudCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHRyaW0gPSBtYXRoVHJpZy5GTE9PUk1BVEgocmFuZ2UubGVuZ3RoICogcGVyY2VudCwgMikgLyAyO1xuICByZXR1cm4galN0YXQubWVhbih1dGlscy5pbml0aWFsKHV0aWxzLnJlc3QocmFuZ2Uuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSksIHRyaW0pLCB0cmltKSk7XG59O1xuXG5leHBvcnRzLlZBUiA9IHt9O1xuXG5leHBvcnRzLlZBUi5QID0gZnVuY3Rpb24gKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5udW1iZXJzKHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XG4gIGlmIChyYW5nZS5sZW5ndGg9PT0wKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUVcbiAgfVxuICBsZXQgbiA9IHJhbmdlLmxlbmd0aDtcbiAgbGV0IHNpZ21hID0gMDtcbiAgbGV0IG1lYW4gPSBleHBvcnRzLkFWRVJBR0UocmFuZ2UpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIHNpZ21hICs9IE1hdGgucG93KHJhbmdlW2ldIC0gbWVhbiwgMik7XG4gIH1cbiAgaWYgKGlzTmFOKHNpZ21hIC8gbikpe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRVxuICB9ZWxzZXtcbiAgICByZXR1cm4gc2lnbWEgLyBuO1xuICB9XG59O1xuXG5leHBvcnRzLlZBUi5TID0gZnVuY3Rpb24oKSB7XG4gIGxldCByYW5nZSA9IHV0aWxzLm51bWJlcnModXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgbGV0IG4gPSByYW5nZS5sZW5ndGg7XG4gIGxldCBzaWdtYSA9IDA7XG4gIGxldCBtZWFuID0gZXhwb3J0cy5BVkVSQUdFKHJhbmdlKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBzaWdtYSArPSBNYXRoLnBvdyhyYW5nZVtpXSAtIG1lYW4sIDIpO1xuICB9XG4gIHJldHVybiBzaWdtYSAvIChuIC0gMSk7XG59O1xuXG5leHBvcnRzLlZBUkEgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHJhbmdlID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xuICBsZXQgbiA9IHJhbmdlLmxlbmd0aDtcbiAgbGV0IHNpZ21hID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IG1lYW4gPSBleHBvcnRzLkFWRVJBR0VBKHJhbmdlKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBsZXQgZWwgPSByYW5nZVtpXTtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnbnVtYmVyJykge1xuICAgICAgc2lnbWEgKz0gTWF0aC5wb3coZWwgLSBtZWFuLCAyKTtcbiAgICB9IGVsc2UgaWYgKGVsID09PSB0cnVlKSB7XG4gICAgICBzaWdtYSArPSBNYXRoLnBvdygxIC0gbWVhbiwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpZ21hICs9IE1hdGgucG93KDAgLSBtZWFuLCAyKTtcbiAgICB9XG5cbiAgICBpZiAoZWwgIT09IG51bGwpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiBzaWdtYSAvIChjb3VudCAtIDEpO1xufTtcblxuZXhwb3J0cy5WQVJQQSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmFuZ2UgPSB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cyk7XG4gIGxldCBuID0gcmFuZ2UubGVuZ3RoO1xuICBsZXQgc2lnbWEgPSAwO1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgbWVhbiA9IGV4cG9ydHMuQVZFUkFHRUEocmFuZ2UpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGxldCBlbCA9IHJhbmdlW2ldO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdudW1iZXInKSB7XG4gICAgICBzaWdtYSArPSBNYXRoLnBvdyhlbCAtIG1lYW4sIDIpO1xuICAgIH0gZWxzZSBpZiAoZWwgPT09IHRydWUpIHtcbiAgICAgIHNpZ21hICs9IE1hdGgucG93KDEgLSBtZWFuLCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2lnbWEgKz0gTWF0aC5wb3coMCAtIG1lYW4sIDIpO1xuICAgIH1cblxuICAgIGlmIChlbCAhPT0gbnVsbCkge1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNpZ21hIC8gY291bnQ7XG59O1xuXG5leHBvcnRzLldFSUJVTEwgPSB7fTtcblxuZXhwb3J0cy5XRUlCVUxMLkRJU1QgPSBmdW5jdGlvbih4LCBhbHBoYSwgYmV0YSwgY3VtdWxhdGl2ZSkge1xuICAvL1hXOuWPguaVsOWIpOaWrVxuICBjdW11bGF0aXZlID0gdXRpbHMucGFyc2VCb29sKGN1bXVsYXRpdmUpXG4gIC8vWFfvvJplbmRcbiAgeCA9IHV0aWxzLnBhcnNlTnVtYmVyKHgpO1xuICBhbHBoYSA9IHV0aWxzLnBhcnNlTnVtYmVyKGFscGhhKTtcbiAgYmV0YSA9IHV0aWxzLnBhcnNlTnVtYmVyKGJldGEpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBhbHBoYSwgYmV0YSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIChjdW11bGF0aXZlKSA/IDEgLSBNYXRoLmV4cCgtTWF0aC5wb3coeCAvIGJldGEsIGFscGhhKSkgOiBNYXRoLnBvdyh4LCBhbHBoYSAtIDEpICogTWF0aC5leHAoLU1hdGgucG93KHggLyBiZXRhLCBhbHBoYSkpICogYWxwaGEgLyBNYXRoLnBvdyhiZXRhLCBhbHBoYSk7XG59O1xuXG5leHBvcnRzLlogPSB7fTtcblxuZXhwb3J0cy5aLlRFU1QgPSBmdW5jdGlvbiAocmFuZ2UsIHgsIHNkKSB7XG4gIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHJhbmdlKSk7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIHgpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgc2QgPSBzZCB8fCBleHBvcnRzLlNUREVWLlMocmFuZ2UpO1xuICBsZXQgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIDEgLSBleHBvcnRzLk5PUk0uUy5ESVNUKChleHBvcnRzLkFWRVJBR0UocmFuZ2UpIC0geCkgLyAoc2QgLyBNYXRoLnNxcnQobikpLCB0cnVlKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZDE4OTkxMjMwLCBNU19QRVJfREFZIH0gZnJvbSAnLi4vY2FsYy9jYWxjX3V0aWxzL2NvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xfc3RyXzJfaW50KGNvbF9zdHIpIHsgLy8gQSAtPiAwIEFBIC0+IDI2XG4gICAgbGV0IHIgPSAwO1xuICAgIGxldCBjb2xzdHIgPSBjb2xfc3RyLnJlcGxhY2UoL1swLTldKyQvLCAnJyk7XG4gICAgZm9yIChsZXQgaSA9IGNvbHN0ci5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgciArPSBNYXRoLnBvdygyNiwgY29sc3RyLmxlbmd0aCAtIGkgLSAxKSAqIChjb2xzdHIuY2hhckNvZGVBdChpKSAtIDY0KTtcbiAgICB9XG4gICAgcmV0dXJuIHIgLSAxO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGludF8yX2NvbF9zdHIobikge1xuICAgIGxldCBkaXZpZGVuZCA9IG4gKyAxO1xuICAgIGxldCBjb2x1bW5OYW1lID0gJyc7XG4gICAgbGV0IG1vZHVsbztcbiAgICBsZXQgZ3VhcmQgPSAxMDtcbiAgICB3aGlsZSAoZGl2aWRlbmQgPiAwICYmIGd1YXJkLS0pIHtcbiAgICAgICAgbW9kdWxvID0gKGRpdmlkZW5kIC0gMSkgJSAyNjtcbiAgICAgICAgY29sdW1uTmFtZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUobW9kdWxvICsgNjUpICsgY29sdW1uTmFtZTtcbiAgICAgICAgZGl2aWRlbmQgPSAoZGl2aWRlbmQgLSBtb2R1bG8gLSAxKSAvIDI2O1xuICAgIH1cbiAgICByZXR1cm4gY29sdW1uTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWwodjEsIHYyKSB7XG4gICAgdjEgPSB2MSArICcnO1xuICAgIHYyID0gdjIgKyAnJztcbiAgICB2MSA9IHYxLnRvVXBwZXJDYXNlKCk7XG4gICAgdjIgPSB2Mi50b1VwcGVyQ2FzZSgpO1xuICAgIGlmICh2MSA9PT0gdjIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YW1wMkRheU51bSh0aW1lU3RhbXApIHtcbiAgICByZXR1cm4gKHRpbWVTdGFtcCAtIGQxODk5MTIzMCkgLyBNU19QRVJfREFZIDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgY2xhc3MgUmF3VmFsdWV7XG4gICAgY29uc3RydWN0b3IodmFsdWUpe1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB9O1xuICAgIHNldFZhbHVlKHYpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHY7XG4gICAgfTtcbiAgICBzb2x2ZUV4cHJlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG59O1xuIiwiaW1wb3J0IHtpc0hhdmV9IGZyb20gXCIuLi9oZWxwZXIvY2hlY2tfdmFsdWVcIjtcbmltcG9ydCB7ZXhwcjJ4eX0gZnJvbSBcIi4uL3V0aWxzL2FscGhhYmV0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGxQcm9wIHtcbiAgICBjb25zdHJ1Y3RvcihyaSwgY2ksIGNlbGwsIGV4cHIsIGVtcHR5KSB7XG4gICAgICAgIHRoaXMucmkgPSByaTtcbiAgICAgICAgdGhpcy5jaSA9IGNpO1xuICAgICAgICB0aGlzLmNlbGwgPSBjZWxsO1xuICAgICAgICB0aGlzLmV4cHIgPSBleHByO1xuICAgICAgICB0aGlzLmVtcHR5ID0gZW1wdHk7XG4gICAgfVxuXG4gICAgaXNJbmNsdWRlKCkge1xuXG4gICAgfVxuXG5cbiAgICBlYWNoKGNiKSB7XG4gICAgICAgIGxldCB7Y2VsbH0gPSB0aGlzO1xuICAgICAgICBpZihpc0hhdmUoY2VsbC5kZXBlbmQpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjZWxsLmRlcGVuZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGV4cHIgPSBjZWxsLmRlcGVuZFtpXTtcbiAgICAgICAgICAgIGxldCBbY2ksIHJpXSA9IGV4cHIyeHkoZXhwcik7XG4gICAgICAgICAgICBjYihyaSwgY2kpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IFNlbGVjdG9yQ29weSBmcm9tICcuLi9jb21wb25lbnQvc2VsZWN0b3JfY29weSc7XG5pbXBvcnQge1xuICAgIGN1dEZpcnN0LFxuICAgIGN1dFN0cixcbiAgICBjdXR0aW5nLFxuICAgIGN1dHRpbmcyLFxuICAgIGN1dHRpbmdCeVBvcyxcbiAgICBpc0Fic29sdXRlVmFsdWUsXG4gICAgb3BlcmF0aW9uLFxuICAgIHZhbHVlMmFic29sdXRlLFxufSBmcm9tICcuLi9jb3JlL29wZXJhdG9yJztcbmltcG9ydCB7ZXhwcjJ4eSwgeHkyZXhwcn0gZnJvbSAnLi4vdXRpbHMvYWxwaGFiZXQnO1xuaW1wb3J0IHtzZWxlY3RvckNvbG9yfSBmcm9tICcuL2NvbG9yX3BhbGV0dGUnO1xuaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuXG4vKipcbiAqIOi/meS4quaWh+S7tuaYr3NoZWV0Lmpz55qE6KGN55Sf5paH5Lu2XG4gKi9cblxuXG5mdW5jdGlvbiBsb2NrQ2VsbHMoZXZ0LCBfc2VsZWN0b3IsIGlzQWIgPSBmYWxzZSwgcCA9IC0xKSB7XG4gICAgY29uc3Qge2RhdGEsIGVkaXRvcn0gPSB0aGlzO1xuICAgIGNvbnN0IHtvZmZzZXRYLCBvZmZzZXRZfSA9IGV2dDtcblxuICAgIGNvbnN0IGNlbGxSZWN0ID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFkob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgY29uc3Qge3JpLCBjaX0gPSBjZWxsUmVjdDtcblxuICAgIGxldCB7cG9zfSA9IGVkaXRvcjtcbiAgICBsZXQgaW5wdXRUZXh0ID0gZWRpdG9yLmVkaXRvclRleHQuZ2V0VGV4dCgpO1xuICAgIGxldCBpbnB1dCA9ICcnO1xuXG4gICAgZWRpdG9yLmhhbmRsZXIoaW5wdXRUZXh0KTtcbiAgICBjb25zdCB7bW91c2Vkb3duSW5kZXh9ID0gZWRpdG9yO1xuICAgIGlmIChpc0Fic29sdXRlVmFsdWUoY3V0dGluZ0J5UG9zKGlucHV0VGV4dCwgcG9zKSwgMikgfHwgX3NlbGVjdG9yKSB7XG4gICAgICAgIGlmIChfc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgICAgICAgICB9ID0gX3NlbGVjdG9yLnNlbGVjdG9yLnJhbmdlO1xuXG4gICAgICAgICAgICBjb25zdCBzMSA9IHh5MmV4cHIoc2NpLCBzcmkpO1xuICAgICAgICAgICAgY29uc3QgczIgPSB4eTJleHByKGVjaSwgZXJpKTtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gczEgPT09IHMyID8gczEgOiBgJHtzMX06JHtzMn1gO1xuXG4gICAgICAgICAgICBpZiAoaXNBYiA9PT0gMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVzMSA9IHZhbHVlMmFic29sdXRlKHMxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlczIgPSB2YWx1ZTJhYnNvbHV0ZShzMik7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGVzMS5zMSA9PT0gZXMyLnMxID8gZXMxLnMxIDogYCR7ZXMxLnMxfToke2VzMi5zMX1gO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FiID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXMxID0gdmFsdWUyYWJzb2x1dGUoczEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVzMiA9IHZhbHVlMmFic29sdXRlKHMyKTtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gZXMxLnMyID09PSBlczIuczIgPyBlczEuczIgOiBgJHtlczEuczJ9OiR7ZXMyLnMyfWA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQWIgPT09IDMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlczEgPSB2YWx1ZTJhYnNvbHV0ZShzMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXMyID0gdmFsdWUyYWJzb2x1dGUoczIpO1xuICAgICAgICAgICAgICAgIHRleHQgPSBlczEuczMgPT09IGVzMi5zMyA/IGVzMS5zMyA6IGAke2VzMS5zM306JHtlczIuczN9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zZWxlY3Rvci5lcnB4ID0gdGV4dDtcbiAgICAgICAgICAgIGxldCB7aXNDb3JzfSA9IGVkaXRvcjtcbiAgICAgICAgICAgIGlmIChpc0NvcnMpIHtcbiAgICAgICAgICAgICAgICBwb3MgPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgc3AgPSBwICE9PSAtMSA/IHAgOiBwb3MgLSBjdXR0aW5nQnlQb3MoaW5wdXRUZXh0LCBwb3MpLmxlbmd0aDtcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXRUZXh0LnN1YnN0cmluZygwLCBzcCkgKyB0ZXh0ICsgaW5wdXRUZXh0LnN1YnN0cmluZyhwb3MsIGlucHV0VGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgZWRpdG9yLnNldFRleHQoaW5wdXQpO1xuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvclBvcyhpbnB1dFRleHQuc3Vic3RyaW5nKDAsIHNwKS5sZW5ndGggKyB0ZXh0Lmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyDmraTmg4XlhrXmmK/kvovlpoI6ID1BMSAgLT4g6L+Z5pe25YaN54K5QTIgIOWImeWPmOaIkDogPUEyXG4gICAgICAgICAgICBsZXQgZW50ZXIgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdG9ycy5sZW5ndGggJiYgZW50ZXIgPT09IDA7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcnNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qge2VycHh9ID0gc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgaWYgKGVycHggPT09IGN1dHRpbmdCeVBvcyhpbnB1dFRleHQsIHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3JpLCBjaX0gPSBjZWxsUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnNbaV0ucmkgPSByaTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnNbaV0uY2kgPSBjaTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnNbaV0uZXJweCA9IHh5MmV4cHIoY2ksIHJpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnNbaV0uc2VsZWN0b3Iuc2V0KHJpLCBjaSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gYCR7aW5wdXRUZXh0LnN1YnN0cmluZygwLCBwb3MgLSBlcnB4Lmxlbmd0aCl9JHt4eTJleHByKGNpLCByaSl9JHtpbnB1dFRleHQuc3Vic3RyaW5nKHBvcywgaW5wdXRUZXh0Lmxlbmd0aCl9YDtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldFRleHQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yUG9zKGlucHV0VGV4dC5zdWJzdHJpbmcoMCwgcG9zIC0gZXJweC5sZW5ndGgpLmxlbmd0aCArIHh5MmV4cHIoY2ksIHJpKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChtb3VzZWRvd25JbmRleC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChvcGVyYXRpb24obW91c2Vkb3duSW5kZXhbMV1bMF0pICYmIGlzQWJzb2x1dGVWYWx1ZShjdXR0aW5nQnlQb3MobW91c2Vkb3duSW5kZXhbMV0sIG1vdXNlZG93bkluZGV4WzFdLmxlbmd0aCksIDIpKSB7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0TG9jayhmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhcmdzID0gbWFrZVNlbGVjdG9yLmNhbGwodGhpcywgcmksIGNpKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvcnMucHVzaChhcmdzKTtcbiAgICAgICAgaW5wdXQgPSBgJHttb3VzZWRvd25JbmRleFswXX0ke3h5MmV4cHIoY2ksIHJpKX0ke21vdXNlZG93bkluZGV4WzFdfWA7XG4gICAgICAgIGNvbnN0IGp1ZGdlVGV4dCA9IGlucHV0LnN1YnN0cmluZyhtb3VzZWRvd25JbmRleFswXS5sZW5ndGggKyB4eTJleHByKGNpLCByaSkubGVuZ3RoLCBpbnB1dC5sZW5ndGgpO1xuICAgICAgICAvLyDkuI3mmK/nmoTor53vvIzpnIDopoHliKDpmaTov5nkuKpcbiAgICAgICAgbGV0IG51bWJlciA9IGN1dEZpcnN0KGp1ZGdlVGV4dC5zdWJzdHJpbmcoMSkpO1xuICAgICAgICBpZiAob3BlcmF0aW9uKGp1ZGdlVGV4dFswXSkgJiYgIWlzQWJzb2x1dGVWYWx1ZShudW1iZXIsIDIpKSB7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0VGV4dChpbnB1dCk7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0TW91c2VEb3duSW5kZXgoW10pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIOS4jeaYr+eahOivne+8jOmcgOimgeWIoOmZpOi/meS4qlxuICAgICAgICBudW1iZXIgPSBjdXRGaXJzdChtb3VzZWRvd25JbmRleFsxXSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coeHkyZXhwcihjaSwgcmkpKTtcbiAgICAgICAgY29uc3QgY3V0ID0gY3V0U3RyKGAke21vdXNlZG93bkluZGV4WzBdfSR7eHkyZXhwcihjaSwgcmkpfSs0JHttb3VzZWRvd25JbmRleFsxXX1gKTtcbiAgICAgICAgY29uc3Qge3NlbGVjdG9yc19kZWxldGUsIHNlbGVjdG9yc19uZXd9ID0gZmlsdGVyU2VsZWN0b3JzLmNhbGwodGhpcywgY3V0KTtcbiAgICAgICAgT2JqZWN0LmtleXMoc2VsZWN0b3JzX2RlbGV0ZSkuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RvcnNfZGVsZXRlW2ldO1xuICAgICAgICAgICAgc2VsZWN0b3IucmVtb3ZlRWwoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RvcnMgPSBzZWxlY3RvcnNfbmV3O1xuXG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShudW1iZXIsICcnKTtcbiAgICAgICAgZWRpdG9yLnNldFRleHQoaW5wdXQpO1xuICAgICAgICAvLyBjb25zdCBjb250ZW50ID0gc3VnZ2VzdENvbnRlbnQuY2FsbCh0aGlzLCBwb3MgLSAxLCBjdXR0aW5nKGlucHV0VGV4dCksIGlucHV0VGV4dCk7XG4gICAgICAgIGVkaXRvci5zZXRDdXJzb3JQb3MobW91c2Vkb3duSW5kZXhbMF0ubGVuZ3RoICsgeHkyZXhwcihjaSwgcmkpLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qge3Bvc30gPSBlZGl0b3I7XG5cbiAgICAgICAgY29uc3QgYXJncyA9IF9zZWxlY3RvciB8fCBtYWtlU2VsZWN0b3IuY2FsbCh0aGlzLCByaSwgY2kpO1xuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgbGV0IHN0ciA9ICcnO1xuICAgICAgICAgICAgbGV0IGVudGVyID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgc3RlcCA9IHBvcztcbiAgICAgICAgICAgIGxldCBmaXJzdCA9ICcnO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGlucHV0VGV4dC5sZW5ndGg7IGkrKykgZmlyc3QgKz0gaW5wdXRUZXh0W2ldO1xuICAgICAgICAgICAgbGV0IGxlbiA9IGN1dEZpcnN0KGZpcnN0KS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0VGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwb3MgPT09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdHIgKz0geHkyZXhwcihjaSwgcmkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdGVwID09PSBpICYmIGxlbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gaW5wdXRUZXh0W2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF9zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgICAgICAgICAgICAgIH0gPSBkYXRhLnNlbGVjdG9yLnJhbmdlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHMxID0geHkyZXhwcihzY2ksIHNyaSk7XG4gICAgICAgICAgICAgICAgY29uc3QgczIgPSB4eTJleHByKGVjaSwgZXJpKTtcblxuICAgICAgICAgICAgICAgIGlucHV0ID0gczEgPT09IHMyID8gczEgOiBgJHtzMX06JHtzMn1gO1xuICAgICAgICAgICAgICAgIHN0ciA9ICFlbnRlciA/IHN0ciArIGlucHV0IDogc3RyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdG9ycy5wdXNoKGFyZ3MpO1xuICAgICAgICAgICAgICAgIHN0ciA9ICFlbnRlciA/IHN0ciArIHh5MmV4cHIoY2ksIHJpKSA6IHN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkaXRvci5zZXRUZXh0KHN0cik7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yUG9zKHN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgZWRpdG9yLnBhcnNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9ycy5wdXNoKGFyZ3MpO1xuICAgICAgICAgICAgaW5wdXQgPSBgJHtpbnB1dFRleHR9JHt4eTJleHByKGNpLCByaSl9YDtcbiAgICAgICAgICAgIGVkaXRvci5zZXRUZXh0KGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlZGl0b3IucGFyc2UoZWRpdG9yLnBvcyk7XG4gICAgaWYgKHRoaXMuc2VsZWN0b3JzLmxlbmd0aCA+IDAgfHwgX3NlbGVjdG9yKSB7XG4gICAgICAgIC8vIGNvbnN0IHtpbnB1dFRleHR9ID0gZWRpdG9yO1xuICAgICAgICBsZXQgaW5wdXRUZXh0ID0gZWRpdG9yLmVkaXRvclRleHQuZ2V0VGV4dCgpO1xuICAgICAgICAvLyDlpITnkIYg5ZCI5bm25Y2V5YWD5qC8XG4gICAgICAgIGxldCBpdCA9IGlucHV0VGV4dCwgZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgbGV0IHttZXJnZXN9ID0gdGhpcy5kYXRhO1xuICAgICAgICBPYmplY3Qua2V5cyhtZXJnZXMuXykuZm9yRWFjaChpID0+IHtcbiAgICAgICAgICAgIGxldCBtID0gbWVyZ2VzLl9baV07XG4gICAgICAgICAgICBjb25zdCBjdXQgPSBjdXRTdHIoaXQsIHRydWUpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY3V0W2ldLmluZGV4T2YoXCI6XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYTEgPSBjdXRbaV0uc3BsaXQoXCI6XCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYTIgPSBjdXRbaV0uc3BsaXQoXCI6XCIpWzFdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZTEgPSBleHByMnh5KGExKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGUyID0gZXhwcjJ4eShhMik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG0uc2NpID49IGUxWzBdICYmIG0uc3JpID49IGUxWzFdICYmIG0uZWNpIDw9IGUyWzBdICYmIG0uZXJpIDw9IGUyWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdCA9IGl0LnJlcGxhY2UobmV3IFJlZ0V4cChjdXRbaV0sICdnJyksIGExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBjbGVhclNlbGVjdG9ycy5jYWxsKHRoaXMpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhpdCk7XG4gICAgICAgIGRpdjJzcGFuLmNhbGwodGhpcywgY3V0dGluZyhpdCksIGN1dHRpbmcyKGl0KSk7XG4gICAgICAgIGlmIChlbnRlcikge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvclBvcyhpdC5sZW5ndGgpO1xuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHN0ZXAgMy4gIOWcqGVudGVy5oiW6ICF54K55Ye755qE5pe25YCZ5YaZ5YWl5YiwY2VsbOS4rVxuICAgIC8vIGRhdGFTZXRDZWxsVGV4dC5jYWxsKHRoaXMsIGlucHV0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyU2VsZWN0b3JzKGN1dCkge1xuICAgIGNvbnN0IHNlbGVjdG9yc19uZXcgPSBbXTtcbiAgICBjb25zdCBzZWxlY3RvcnNfZGVsZXRlID0gW107XG4gICAgT2JqZWN0LmtleXModGhpcy5zZWxlY3RvcnMpLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yc1tpXTtcbiAgICAgICAgY29uc3Qge2VycHh9ID0gc2VsZWN0b3I7XG4gICAgICAgIGxldCBlbnRlciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBjdXQubGVuZ3RoICYmIGVudGVyID09PSAwOyBpMisrKSB7XG4gICAgICAgICAgICBpZiAoY3V0W2kyXS5yZXBsYWNlKC9cXCQvZywgJycpID09PSBlcnB4KSB7XG4gICAgICAgICAgICAgICAgZW50ZXIgPSAxO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yc19uZXcucHVzaChzZWxlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgIHNlbGVjdG9yc19kZWxldGUucHVzaChzZWxlY3Rvci5zZWxlY3Rvci5lbCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RvcnNfZGVsZXRlLFxuICAgICAgICBzZWxlY3RvcnNfbmV3LFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VTZWxlY3RvcihyaSwgY2ksIHNlbGVjdG9ycyA9IHRoaXMuc2VsZWN0b3JzLCBtdWx0aXBsZSA9IGZhbHNlLCBfc2VsZWN0b3IsIG1lcmdlU2VsZWN0b3IpIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgIGxldCBzZWxlY3RvciA9IG51bGw7XG4gICAgLy8gY29uc3Qge2lucHV0VGV4dH0gPSB0aGlzLmVkaXRvcjtcbiAgICBsZXQgaW5wdXRUZXh0ID0gdGhpcy5lZGl0b3IuZWRpdG9yVGV4dC5nZXRUZXh0KCk7XG4gICAgY29uc3Qge2NvbG9yLCBpbmRleH0gPSBzZWxlY3RvckNvbG9yKHNlbGVjdG9ycy5sZW5ndGgpO1xuICAgIGlmIChfc2VsZWN0b3IpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBfc2VsZWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gYHNlbGVjdG9yJHtNYXRoLnJhbmRvbSgpICogOTk5OTk5fWA7XG4gICAgICAgIHNlbGVjdG9yID0gbmV3IFNlbGVjdG9yQ29weShkYXRhLCB0aGlzLCBjbGFzc05hbWUpO1xuICAgICAgICBzZWxlY3Rvci5lbC5hdHRyKCdjbGFzcycsIGAke2NsYXNzTmFtZX0gY2xlYXJfc2VsZWN0b3JgKTtcbiAgICAgICAgc2VsZWN0b3Iuc2V0Q3NzKGNvbG9yKTtcbiAgICB9XG5cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKG1lcmdlU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHNlbGVjdG9yLnNldEVuZChyaSwgY2kpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0b3Iuc2V0KHJpLCBjaSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3Rvci5zZXQocmksIGNpLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc2VsZWN0b3IuZWwuY3NzKCd6LWluZGV4JywgJzEwMCcpO1xuICAgIGNvbnN0IGxlbiA9IGlucHV0VGV4dC5zcGxpdCh4eTJleHByKGNpLCByaSkpLmxlbmd0aCAtIDI7XG5cbiAgICBsZXQgaXQgPSB4eTJleHByKGNpLCByaSk7XG4gICAgbGV0IHttZXJnZXN9ID0gZGF0YTtcbiAgICBPYmplY3Qua2V5cyhtZXJnZXMuXykuZm9yRWFjaChpID0+IHtcbiAgICAgICAgbGV0IG0gPSBtZXJnZXMuX1tpXTtcbiAgICAgICAgY29uc3QgY3V0ID0gY3V0U3RyKGl0LCB0cnVlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjdXRbaV0uaW5kZXhPZihcIjpcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IGExID0gY3V0W2ldLnNwbGl0KFwiOlwiKVswXTtcbiAgICAgICAgICAgICAgICBsZXQgYTIgPSBjdXRbaV0uc3BsaXQoXCI6XCIpWzFdO1xuICAgICAgICAgICAgICAgIGxldCBlMSA9IGV4cHIyeHkoYTEpO1xuICAgICAgICAgICAgICAgIGxldCBlMiA9IGV4cHIyeHkoYTIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG0uc2NpID49IGUxWzBdICYmIG0uc3JpID49IGUxWzFdICYmIG0uZWNpIDw9IGUyWzBdICYmIG0uZXJpIDw9IGUyWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ID0gaXQucmVwbGFjZShuZXcgUmVnRXhwKGN1dFtpXSwgJ2cnKSwgYTEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgcmksXG4gICAgICAgIGNpLFxuICAgICAgICBpbmRleDogbGVuLFxuICAgICAgICBjb2xvcixcbiAgICAgICAgaW5kZXgyOiBpbmRleCxcbiAgICAgICAgY2xhc3NOYW1lOiBzZWxlY3Rvci5lbC5lbC5jbGFzc05hbWUsXG4gICAgICAgIGVycHg6IGl0LFxuICAgICAgICBzZWxlY3RvcixcbiAgICB9O1xuICAgIGlmICghbWVyZ2VTZWxlY3Rvcikge1xuICAgICAgICBzZWxlY3Rvci5lbC5zaG93KCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3JzRWwuY2hpbGQoc2VsZWN0b3IuZWwpO1xuICAgIH1cblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdG9yc0VsLmNoaWxkKHNlbGVjdG9yLmVsKTtcbiAgICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gY2xlYXJTZWxlY3RvcnMoKSB7XG4gICAgdGhpcy5zZWxlY3RvcnNFbC5odG1sKCcnKTtcbiAgICB0aGlzLnNlbGVjdG9ycyA9IFtdO1xuICAgIGNvbnN0IHtlZGl0b3IsIHNlbGVjdG9yfSA9IHRoaXM7XG4gICAgZWRpdG9yLnNldExvY2soZmFsc2UpO1xuXG4gICAgLy8gLy8g6L+Z6KGM5piv5ZyoIEB+ZXNj55qE5pe25YCZ5Yqg55qEIOWOn+WboOaYr+imgeaKinJpIGNp6LWL5YC85Li6LTFcbiAgICAvLyBlZGl0b3Iuc2V0UmlDaSgtMSwgLTEpO1xuICAgIGVkaXRvci5zdGF0ZSA9IDE7XG4gICAgc2VsZWN0b3IuZWwuc2hvdygpO1xufVxuXG4vLyDovpPlhaUgaW5wdXRcbmZ1bmN0aW9uIGVkaXRpbmdTZWxlY3RvcnModGV4dCA9ICcnKSB7XG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdG9yc19uZXcgPSBbXTtcbiAgICBjb25zdCBjdXQgPSBjdXRTdHIodGV4dCwgdHJ1ZSk7XG4gICAgLy8gY2FzZSAxICDov4fmu6Qgc2VsZWN0b3JzXG4gICAgY29uc3Qge3NlbGVjdG9yc19kZWxldGV9ID0gZmlsdGVyU2VsZWN0b3JzLmNhbGwodGhpcywgY3V0KTtcblxuICAgIE9iamVjdC5rZXlzKHNlbGVjdG9yc19kZWxldGUpLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RvcnNfZGVsZXRlW2ldO1xuICAgICAgICBzZWxlY3Rvci5yZW1vdmVFbCgpO1xuICAgIH0pO1xuXG5cbiAgICBjb25zdCBzZWxlY3RvcnNfdmFsaWQgPSBzZWxlY3RvcnNfbmV3O1xuICAgIC8vIGNhc2UgMiAg6aqM6K+BIHNlbGVjdG9yc1xuICAgIE9iamVjdC5rZXlzKGN1dCkuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICBsZXQgZW50ZXJDb2RlID0gMTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5zZWxlY3RvcnMpLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtzZWxlY3Rvcn0gPSB0aGlzLnNlbGVjdG9yc1tpXTtcbiAgICAgICAgICAgIHNlbGVjdG9yLmVsLnJlbW92ZUVsKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIOe7neWvueWAvFxuICAgICAgICBsZXQgYXJyID0gJyc7XG4gICAgICAgIGxldCBzYyA9IGN1dFtpXS5yZXBsYWNlKC9cXCQvZywgXCJcIik7XG4gICAgICAgIGlmIChpc0Fic29sdXRlVmFsdWUoY3V0W2ldKSkge1xuICAgICAgICAgICAgY29uc3Qgbm90VHJ1ZVZhbHVlID0gY3V0W2ldLnJlcGxhY2UoL1xcJC9nLCAnJyk7XG4gICAgICAgICAgICBhcnIgPSBleHByMnh5KG5vdFRydWVWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Muc2VhcmNoKC9eW0EtWmEtel0rXFxkKzpbQS1aYS16XStcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgZW50ZXJDb2RlID0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyciA9IGV4cHIyeHkoY3V0W2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRlckNvZGUgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJpID0gYXJyWzFdO1xuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBjaSA9IGFyclswXTtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBtYWtlU2VsZWN0b3IuY2FsbCh0aGlzLCByaSwgY2ksIHNlbGVjdG9yc192YWxpZCk7XG4gICAgICAgICAgICBhcmdzLmVycHggPSBjdXRbaV07XG4gICAgICAgICAgICBzZWxlY3RvcnNfdmFsaWQucHVzaChhcmdzKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbnRlckNvZGUgPT09IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IHByeCA9IGN1dFtpXS5yZXBsYWNlKC9cXCQvZywgJycpLnNwbGl0KCc6JylbMF07XG4gICAgICAgICAgICBjb25zdCBsYXggPSBjdXRbaV0ucmVwbGFjZSgvXFwkL2csICcnKS5zcGxpdCgnOicpWzFdO1xuXG4gICAgICAgICAgICBjb25zdCBwcnhfaW5kZXggPSBleHByMnh5KHByeCk7XG4gICAgICAgICAgICBjb25zdCBsYXhfaW5kZXggPSBleHByMnh5KGxheCk7XG4gICAgICAgICAgICBsZXQgYXJncyA9IG1ha2VTZWxlY3Rvci5jYWxsKHRoaXMsIHByeF9pbmRleFsxXSwgcHJ4X2luZGV4WzBdLCBzZWxlY3RvcnNfdmFsaWQsIHRydWUsIG51bGwsIGZhbHNlKTtcbiAgICAgICAgICAgIGFyZ3MgPSBtYWtlU2VsZWN0b3IuY2FsbCh0aGlzLCBsYXhfaW5kZXhbMV0sIGxheF9pbmRleFswXSwgc2VsZWN0b3JzX3ZhbGlkLCB0cnVlLCBhcmdzLnNlbGVjdG9yLCB0cnVlKTtcbiAgICAgICAgICAgIGFyZ3MuZXJweCA9IGN1dFtpXTtcbiAgICAgICAgICAgIHNlbGVjdG9yc192YWxpZC5wdXNoKGFyZ3MpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZWxlY3RvcnMgPSBzZWxlY3RvcnNfdmFsaWQ7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RvcnMubGVuZ3RoID4gMCB8fCB0ZXh0WzBdID09PSAnPScpIHtcbiAgICAgICAgZGl2MnNwYW4uY2FsbCh0aGlzLCBjdXR0aW5nKHRleHQpLCBjdXR0aW5nMih0ZXh0KSk7XG4gICAgfVxufVxuXG4vLyDmib4gKCDnmoRpbmRleFxuZnVuY3Rpb24gZmluZEJyYWNrZXRMZWZ0KGN1dCwgaSkge1xuICAgIGxldCBiZWdpbiA9IC0xO1xuICAgIGxldCBoYXMgPSAwO1xuICAgIGxldCBzdG9wID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBqID0gaSAtIDE7IGogPiAwICYmIHN0b3AgPT09IGZhbHNlOyBqLS0pIHtcbiAgICAgICAgaWYgKGN1dFtqXSA9PT0gJygnKSB7XG4gICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3V0W2pdID09PSAnKScpIHtcbiAgICAgICAgICAgIGhhcysrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IGk7IGogPiAwICYmIGJlZ2luID09PSAtMTsgai0tKSB7XG4gICAgICAgIGlmIChjdXRbal0gPT09ICcoJykge1xuICAgICAgICAgICAgaWYgKGhhcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJlZ2luID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhcy0tO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlZ2luO1xufVxuXG4vLyA9PiB7IGxlZnQ6IDAsIHJpZ2h0OiAwLCAgZXhpc3Q6IGZhbHNlIH1cbmZ1bmN0aW9uIGZpbmRCcmFja2V0KHBvcywgY3V0LCB0ZXh0KSB7XG4gICAgbGV0IGFyZ3MgPSB7bGVmdDogMCwgcmlnaHQ6IDAsIGV4aXN0OiBmYWxzZX07XG4gICAgaWYgKHRleHRbcG9zXSAhPT0gJyknKSB7XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cbiAgICBjb25zdCByaWdodCA9IHBvcztcbiAgICBjb25zdCBsZWZ0ID0gZmluZEJyYWNrZXRMZWZ0LmNhbGwodGhpcywgY3V0LCByaWdodCk7XG5cbiAgICBpZiAobGVmdCAhPT0gLTEgJiYgcmlnaHQgIT09IC0xKSB7XG4gICAgICAgIGFyZ3MgPSB7bGVmdCwgcmlnaHQsIGV4aXN0OiB0cnVlfTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG59XG5cblxuLy8g5om+ICkg55qEIGluZGV4XG5mdW5jdGlvbiBmaW5kQnJhY2tldFJpZ2h0KGN1dCwgaSkge1xuICAgIGxldCBiZWdpbiA9IC0xO1xuICAgIGxldCBoYXMgPSAwO1xuICAgIGxldCBzdG9wID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBjdXQubGVuZ3RoICYmIHN0b3AgPT09IGZhbHNlOyBqKyspIHtcbiAgICAgICAgaWYgKGN1dFtqXSA9PT0gJyknKSB7XG4gICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3V0W2pdID09PSAnKCcpIHtcbiAgICAgICAgICAgIGhhcysrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IGk7IGogPCBjdXQubGVuZ3RoICYmIGJlZ2luID09PSAtMTsgaisrKSB7XG4gICAgICAgIGlmIChjdXRbal0gPT09ICcpJykge1xuICAgICAgICAgICAgaWYgKGhhcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJlZ2luID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhcy0tO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlZ2luO1xufVxuXG5cbmZ1bmN0aW9uIHN1Z2dlc3RDb250ZW50KHBvcywgY3V0LCBpbnB1dFRleHQpIHtcbiAgICAvLyDlpoLmnpzlnKjmi6zlj7flhoVcbiAgICAvLyBzdGVwIDEuIOaJvuWIsOi3neemu3Bvc+acgOi/keeahOW3puOAgeWPs+aLrOWPt+eahGluZGV4XG4gICAgLy8gc3RlcCAyLiDoi6Ux5oiQ56uL77yM5om+5Yiw6K+l5Ye95pWw5ZCNXG4gICAgLy8gc3RlcCAzLiDmib7lhYnmoIfliY3mnInlh6DkuKrpgJflj7dcbiAgICBjb25zdCBjb250ZW50ID0ge3N1Z2dlc3RDb250ZW50OiBmYWxzZSwgY3V0OiAnJywgcG9zOiAxfTtcbiAgICBjb25zdCBiZWdpbiA9IHBvcyAtIDE7XG4gICAgY29uc3QgbGVmdCA9IGZpbmRCcmFja2V0TGVmdC5jYWxsKHRoaXMsIGN1dCwgYmVnaW4pO1xuICAgIGNvbnN0IHJpZ2h0ID0gZmluZEJyYWNrZXRSaWdodC5jYWxsKHRoaXMsIGN1dCwgbGVmdCk7XG5cbiAgICBpZiAobGVmdCA8PSBiZWdpbiAmJiBsZWZ0ICE9PSAtMSAmJiAocmlnaHQgPj0gYmVnaW4gfHwgcmlnaHQgPT09IC0xKSkge1xuICAgICAgICBjb250ZW50LnN1Z2dlc3RDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgY29udGVudC5jdXQgPSBjdXR0aW5nQnlQb3MoaW5wdXRUZXh0LCBsZWZ0KTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gbGVmdDsgaSA8IGJlZ2luICsgMTsgaSsrKSB7XG4gICAgICAgIGlmIChpbnB1dFRleHRbaV0gPT09ICcsJykge1xuICAgICAgICAgICAgY29udGVudC5wb3MgKz0gMjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiBkaXYyc3BhbihjdXQsIGN1dGNvbG9yKSB7XG4gICAgY29uc3Qge2VkaXRvcn0gPSB0aGlzO1xuXG4gICAgY29uc3Qgc3BhbkFyciA9IFtdO1xuICAgIGxldCBiZWdpbiA9IC0xO1xuICAgIGxldCBlbmQgPSAtMTtcblxuICAgIE9iamVjdC5rZXlzKGN1dCkuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICBjb25zdCBzcGFuRWwgPSBoKCdzcGFuJywgYGZvcm11bGFfc3BhbiR7aX1gKTtcbiAgICAgICAgT2JqZWN0LmtleXMoY3V0Y29sb3IpLmZvckVhY2goKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN1dGNvbG9yW2ldICYmIGN1dGNvbG9yW2ldLmNvZGUgIT09IC0xICYmIGN1dGNvbG9yW2ldLmRhdGEgPT09IGN1dFtpXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHtjb2xvcn0gPSBzZWxlY3RvckNvbG9yKGN1dGNvbG9yW2ldLmNvZGUpO1xuICAgICAgICAgICAgICAgIHNwYW5FbC5jc3MoJ2NvbG9yJywgY29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3BhbkVsLmNzcygnZGlzcGxheScsICdpbmxpbmUtYmxvY2snKTtcbiAgICAgICAgc3BhbkVsLmNzcygnY3Vyc29yJywgJ3RleHQnKTtcblxuICAgICAgICBpZiAoY3V0W2ldID09PSAnICcpIHtcbiAgICAgICAgICAgIHNwYW5FbC5odG1sKCcmZW1zcDsnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNwYW5FbC5odG1sKGN1dFtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICBzcGFuQXJyLnB1c2goc3BhbkVsKTtcbiAgICB9KTtcblxuICAgIC8vIOmrmOS6rlxuICAgIGNvbnN0IHtwb3N9ID0gZWRpdG9yO1xuICAgIGxldCBpbnB1dFRleHQgPSBlZGl0b3IuZWRpdG9yVGV4dC5nZXRUZXh0KCk7XG4gICAgbGV0IGNvbnRlbnQgPSB7c3VnZ2VzdENvbnRlbnQ6IGZhbHNlLCBjdXQ6ICcnfTtcbiAgICBpZiAoaW5wdXRUZXh0W3BvcyAtIDFdID09PSAnKScpIHtcbiAgICAgICAgYmVnaW4gPSBwb3MgLSAxO1xuICAgICAgICBlbmQgPSBmaW5kQnJhY2tldExlZnQuY2FsbCh0aGlzLCBjdXQsIGJlZ2luKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50ID0gc3VnZ2VzdENvbnRlbnQuY2FsbCh0aGlzLCBwb3MgKyAxLCBjdXQsIGlucHV0VGV4dCk7XG4gICAgfVxuXG5cbiAgICBpZiAoaW5wdXRUZXh0ICE9PSAnJyAmJiBzcGFuQXJyLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIGNvbnN0IHNwYW5FbCA9IGgoJ3NwYW4nLCAnZm9ybXVsYV9zcGFuJyk7XG4gICAgICAgIHNwYW5BcnIucHVzaChzcGFuRWwpO1xuICAgIH1cbiAgICAvLyDmjILovb1cbiAgICBlZGl0b3IubW91bnQyc3BhbihzcGFuQXJyLCBiZWdpbiwgZW5kLCBjb250ZW50KTtcbn1cblxuXG5leHBvcnQge1xuICAgIGxvY2tDZWxscyxcbiAgICBjbGVhclNlbGVjdG9ycyxcbiAgICBlZGl0aW5nU2VsZWN0b3JzLFxuICAgIGZpbmRCcmFja2V0LFxuICAgIHN1Z2dlc3RDb250ZW50LFxuICAgIG1ha2VTZWxlY3Rvcixcbn07XG4iLCJjb25zdCBiYXNlRm9udHMgPSBbXG4gIHsga2V5OiAnQXJpYWwnLCB0aXRsZTogJ0FyaWFsJyB9LFxuICB7IGtleTogJ0hlbHZldGljYScsIHRpdGxlOiAnSGVsdmV0aWNhJyB9LFxuICB7IGtleTogJ1NvdXJjZSBTYW5zIFBybycsIHRpdGxlOiAnU291cmNlIFNhbnMgUHJvJyB9LFxuICB7IGtleTogJ0NvbWljIFNhbnMgTVMnLCB0aXRsZTogJ0NvbWljIFNhbnMgTVMnIH0sXG4gIHsga2V5OiAnQ291cmllciBOZXcnLCB0aXRsZTogJ0NvdXJpZXIgTmV3JyB9LFxuICB7IGtleTogJ1ZlcmRhbmEnLCB0aXRsZTogJ1ZlcmRhbmEnIH0sXG4gIHsga2V5OiAnTGF0bycsIHRpdGxlOiAnTGF0bycgfSxcbl07XG5cbmNvbnN0IGZvbnRTaXplcyA9IFtcbiAgeyBwdDogNy41LCBweDogMTAgfSxcbiAgeyBwdDogOCwgcHg6IDExIH0sXG4gIHsgcHQ6IDksIHB4OiAxMiB9LFxuICB7IHB0OiAxMCwgcHg6IDEzIH0sXG4gIHsgcHQ6IDEwLjUsIHB4OiAxNCB9LFxuICB7IHB0OiAxMSwgcHg6IDE1IH0sXG4gIHsgcHQ6IDEyLCBweDogMTYgfSxcbiAgeyBwdDogMTQsIHB4OiAxOC43IH0sXG4gIHsgcHQ6IDE1LCBweDogMjAgfSxcbiAgeyBwdDogMTYsIHB4OiAyMS4zIH0sXG4gIHsgcHQ6IDE4LCBweDogMjQgfSxcbiAgeyBwdDogMjIsIHB4OiAyOS4zIH0sXG4gIHsgcHQ6IDI0LCBweDogMzIgfSxcbiAgeyBwdDogMjYsIHB4OiAzNC43IH0sXG4gIHsgcHQ6IDM2LCBweDogNDggfSxcbiAgeyBwdDogNDIsIHB4OiA1NiB9LFxuICAvLyB7IHB0OiA1NCwgcHg6IDcxLjcgfSxcbiAgLy8geyBwdDogNjMsIHB4OiA4My43IH0sXG4gIC8vIHsgcHQ6IDcyLCBweDogOTUuNiB9LFxuXTtcblxuZnVuY3Rpb24gZ2V0Rm9udFNpemVQeEJ5UHQocHQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb250U2l6ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBmb250U2l6ZSA9IGZvbnRTaXplc1tpXTtcbiAgICBpZiAoZm9udFNpemUucHQgPT09IHB0KSB7XG4gICAgICByZXR1cm4gZm9udFNpemUucHg7XG4gICAgfVxuICB9XG4gIHJldHVybiBwdDtcbn1cblxuLy8gY29uc3QgZm9udHMgPSAoYXJ5ID0gW10pID0+IHtcbi8vICAgY29uc3QgbWFwID0ge307XG4vLyAgIGJhc2VGb250cy5jb25jYXQoYXJ5KS5mb3JFYWNoKChmKSA9PiB7XG4vLyAgICAgbWFwW2Yua2V5XSA9IGY7XG4vLyAgIH0pO1xuLy8gICByZXR1cm4gbWFwO1xuLy8gfTtcblxuZXhwb3J0IHtcbiAgZm9udFNpemVzLFxuICBiYXNlRm9udHMsXG4gIGdldEZvbnRTaXplUHhCeVB0LFxufTtcbiIsImltcG9ydCB7aXNIYXZlfSBmcm9tIFwiLi4vaGVscGVyL2NoZWNrX3ZhbHVlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0VmFsaWQodmFsaWQgPSB0aGlzLnZhbGlkKSB7XG4gICAgaWYoaXNIYXZlKHZhbGlkKSkge1xuICAgICAgIHZhbGlkLmFzc2VydCgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHtlcnJvck9ian0gZnJvbSAnLi4vLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcnXG5pbXBvcnQgbnVtZXJhbCBmcm9tICdudW1lcmFsJ1xuXG4vL1RPRE9cbmV4cG9ydHMuQVNDID0gZnVuY3Rpb24oc3RyKSB7XG4gIGxldCB0bXAgPSBcIlwiO1xuICBzdHI9IHN0ci50b1N0cmluZygpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0ci5jaGFyQ29kZUF0KGkpID4gNjUyNDggJiYgc3RyLmNoYXJDb2RlQXQoaSkgPCA2NTM3NSkge1xuICAgICAgdG1wICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoaSkgLSA2NTI0OCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdG1wICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG1wXG59O1xuXG4vL1RPRE9cbmV4cG9ydHMuQkFIVFRFWFQgPSBmdW5jdGlvbigpIHtcbiB0aHJvdyBuZXcgRXJyb3IoJ0JBSFRURVhUIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuZXhwb3J0cy5DSEFSID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobnVtYmVyKTtcbn07XG5cbmV4cG9ydHMuQ0xFQU4gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRleHQgPSB0ZXh0IHx8ICcnO1xuICBsZXQgcmUgPSAvW1xcMC1cXHgxRl0vZztcbiAgcmV0dXJuIHRleHQucmVwbGFjZShyZSwgXCJcIik7XG59O1xuXG5leHBvcnRzLkNPREUgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRleHQgPSB0ZXh0IHx8ICcnO1xuICByZXR1cm4gdGV4dC5jaGFyQ29kZUF0KDApO1xufTtcblxuZXhwb3J0cy5DT05DQVRFID0gZnVuY3Rpb24oKSB7XG4gIGxldCBhcmdzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xuXG4gIGxldCB0cnVlRm91bmQgPSAwO1xuICB3aGlsZSAoKHRydWVGb3VuZCA9IGFyZ3MuaW5kZXhPZih0cnVlKSkgPiAtMSkge1xuICAgIGFyZ3NbdHJ1ZUZvdW5kXSA9ICdUUlVFJztcbiAgfVxuXG4gIGxldCBmYWxzZUZvdW5kID0gMDtcbiAgd2hpbGUgKChmYWxzZUZvdW5kID0gYXJncy5pbmRleE9mKGZhbHNlKSkgPiAtMSkge1xuICAgIGFyZ3NbZmFsc2VGb3VuZF0gPSAnRkFMU0UnO1xuICB9XG5cbiAgcmV0dXJuIGFyZ3Muam9pbignJyk7XG59O1xuZXhwb3J0cy5DT05DQVRFTkFURSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgYXJncyA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcblxuICBsZXQgdHJ1ZUZvdW5kID0gMDtcbiAgd2hpbGUgKCh0cnVlRm91bmQgPSBhcmdzLmluZGV4T2YodHJ1ZSkpID4gLTEpIHtcbiAgICBhcmdzW3RydWVGb3VuZF0gPSAnVFJVRSc7XG4gIH1cblxuICBsZXQgZmFsc2VGb3VuZCA9IDA7XG4gIHdoaWxlICgoZmFsc2VGb3VuZCA9IGFyZ3MuaW5kZXhPZihmYWxzZSkpID4gLTEpIHtcbiAgICBhcmdzW2ZhbHNlRm91bmRdID0gJ0ZBTFNFJztcbiAgfVxuXG4gIHJldHVybiBhcmdzLmpvaW4oJycpO1xufTtcblxuLy9UT0RPXG5leHBvcnRzLkRCQ1MgPSBmdW5jdGlvbigpIHtcbiB0aHJvdyBuZXcgRXJyb3IoJ0RCQ1MgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5leHBvcnRzLkRPTExBUiA9IGZ1bmN0aW9uKG51bWJlciwgZGVjaW1hbHMpIHtcbiAgZGVjaW1hbHMgPSAoZGVjaW1hbHMgPT09IHVuZGVmaW5lZCkgPyAyIDogZGVjaW1hbHM7XG5cbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgZGVjaW1hbHMgPSB1dGlscy5wYXJzZU51bWJlcihkZWNpbWFscyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgZGVjaW1hbHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCBmb3JtYXQgPSAnJztcbiAgaWYgKGRlY2ltYWxzIDw9IDApIHtcbiAgICBudW1iZXIgPSBNYXRoLnJvdW5kKG51bWJlciAqIE1hdGgucG93KDEwLCBkZWNpbWFscykpIC8gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcbiAgICBmb3JtYXQgPSAnKCQwLDApJztcbiAgfSBlbHNlIGlmIChkZWNpbWFscyA+IDApIHtcbiAgICBmb3JtYXQgPSAnKCQwLDAuJyArIG5ldyBBcnJheShkZWNpbWFscyArIDEpLmpvaW4oJzAnKSArICcpJztcbiAgfVxuICByZXR1cm4gbnVtZXJhbChudW1iZXIpLmZvcm1hdChmb3JtYXQpO1xufTtcblxuZXhwb3J0cy5FWEFDVCA9IGZ1bmN0aW9uKHRleHQxLCB0ZXh0Mikge1xuICByZXR1cm4gdGV4dDEgPT09IHRleHQyO1xufTtcblxuZXhwb3J0cy5GSU5EID0gZnVuY3Rpb24gKGZpbmRfdGV4dCwgd2l0aGluX3RleHQsIHBvc2l0aW9uKSB7XG4gIHBvc2l0aW9uID0gKHBvc2l0aW9uID09PSB1bmRlZmluZWQpID8gMCA6IHBvc2l0aW9uO1xuICB3aXRoaW5fdGV4dC5pbmRleE9mKGZpbmRfdGV4dClcbiAgcmV0dXJuIHdpdGhpbl90ZXh0ID8gd2l0aGluX3RleHQuaW5kZXhPZihmaW5kX3RleHQsIHBvc2l0aW9uIC0gMSkgKyAxIDogbnVsbDtcbn07XG5leHBvcnRzLkZJWEVEID0gZnVuY3Rpb24obnVtYmVyLCBkZWNpbWFscywgbm9fY29tbWFzKSB7XG4gIGRlY2ltYWxzID0gKGRlY2ltYWxzID09PSB1bmRlZmluZWQpID8gMiA6IGRlY2ltYWxzO1xuICBub19jb21tYXMgPSAobm9fY29tbWFzID09PSB1bmRlZmluZWQpID8gZmFsc2UgOiBub19jb21tYXM7XG5cbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgZGVjaW1hbHMgPSB1dGlscy5wYXJzZU51bWJlcihkZWNpbWFscyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgZGVjaW1hbHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgbGV0IGZvcm1hdCA9IG5vX2NvbW1hcyA/ICcwJyA6ICcwLDAnO1xuICBpZiAoZGVjaW1hbHMgPD0gMCkge1xuICAgIG51bWJlciA9IE1hdGgucm91bmQobnVtYmVyICogTWF0aC5wb3coMTAsIGRlY2ltYWxzKSkgLyBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xuICB9IGVsc2UgaWYgKGRlY2ltYWxzID4gMCkge1xuICAgIGZvcm1hdCArPSAnLicgKyBuZXcgQXJyYXkoZGVjaW1hbHMgKyAxKS5qb2luKCcwJyk7XG4gIH1cbiAgcmV0dXJuIG51bWVyYWwobnVtYmVyKS5mb3JtYXQoZm9ybWF0KTtcbn07XG5cbmV4cG9ydHMuSFRNTDJURVhUID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGxldCByZXN1bHQgPSAnJztcblxuICBpZiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICBpZiAocmVzdWx0ICE9PSAnJykge1xuICAgICAgICAgIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gKGxpbmUucmVwbGFjZSgvPCg/Oi58XFxuKSo/Pi9nbSwgJycpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB2YWx1ZS5yZXBsYWNlKC88KD86LnxcXG4pKj8+L2dtLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnRzLklOREVYID0gZnVuY3Rpb24gKG1hdHJpeCwgcm93X251bSwgY29sdW1uX251bSkge1xuICBpZiAodHlwZW9mIG1hdHJpeCA9PSAnc3RyaW5nJyl7XG4gICAgbWF0cml4ID0gdXRpbHMuc3RyVG9NYXRyaXgobWF0cml4KVxuICB9XG4gIHJldHVybiBtYXRyaXhbcm93X251bV1bY29sdW1uX251bS0xXVxufTtcbmV4cG9ydHMuTEVGVCA9IGZ1bmN0aW9uKHRleHQsIG51bWJlcikge1xuICBudW1iZXIgPSAobnVtYmVyID09PSB1bmRlZmluZWQpID8gMSA6IG51bWJlcjtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gdGV4dCA/IHRleHQuc3Vic3RyaW5nKDAsIG51bWJlcikgOiBudWxsO1xufTtcblxuZXhwb3J0cy5MRU4gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0ZXh0ID8gdGV4dC5sZW5ndGggOiAwO1xuICB9XG5cbiAgaWYgKHRleHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRleHQubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xufTtcblxuZXhwb3J0cy5MT1dFUiA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gdGV4dCA/IHRleHQudG9Mb3dlckNhc2UoKSA6IHRleHQ7XG59O1xuXG5leHBvcnRzLk1JRCA9IGZ1bmN0aW9uKHRleHQsIHN0YXJ0LCBudW1iZXIpIHtcbiAgc3RhcnQgPSB1dGlscy5wYXJzZU51bWJlcihzdGFydCk7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHN0YXJ0LCBudW1iZXIpIHx8IHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICBsZXQgYmVnaW4gPSBzdGFydCAtIDE7XG4gIGxldCBlbmQgPSBiZWdpbiArIG51bWJlcjtcblxuICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoYmVnaW4sIGVuZCk7XG59O1xuXG4vLyBUT0RPXG5leHBvcnRzLk5VTUJFUlZBTFVFID0gZnVuY3Rpb24gKHRleHQsIGRlY2ltYWxfc2VwYXJhdG9yLCBncm91cF9zZXBhcmF0b3IpIHtcbiAgZGVjaW1hbF9zZXBhcmF0b3IgPSAodHlwZW9mIGRlY2ltYWxfc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJykgPyAnLicgOiBkZWNpbWFsX3NlcGFyYXRvcjtcbiAgZ3JvdXBfc2VwYXJhdG9yID0gKHR5cGVvZiBncm91cF9zZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnKSA/ICcsJyA6IGdyb3VwX3NlcGFyYXRvcjtcbiAgaWYgKHRleHQuaW5kZXhPZignJScpID4gMCl7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgnJScsICcnKVxuICAgIHJldHVybiBwYXJzZUZsb2F0KHRleHQpLzEwMFxuICB9XG4gIHJldHVybiBOdW1iZXIodGV4dC5yZXBsYWNlKGRlY2ltYWxfc2VwYXJhdG9yLCAnLicpLnJlcGxhY2UoZ3JvdXBfc2VwYXJhdG9yLCAnJykpO1xufTtcblxuLy8gVE9ET1xuZXhwb3J0cy5QUk9ORVRJQyA9IGZ1bmN0aW9uKCkge1xuIHRocm93IG5ldyBFcnJvcignUFJPTkVUSUMgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5leHBvcnRzLlBST1BFUiA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCB8fCB0ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAodGV4dCA9PT0gdHJ1ZSkge1xuICAgIHRleHQgPSAnVFJVRSc7XG4gIH1cbiAgaWYgKHRleHQgPT09IGZhbHNlKSB7XG4gICAgdGV4dCA9ICdGQUxTRSc7XG4gIH1cbiAgaWYgKGlzTmFOKHRleHQpICYmIHR5cGVvZiB0ZXh0ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAodHlwZW9mIHRleHQgPT09ICdudW1iZXInKSB7XG4gICAgdGV4dCA9ICcnICsgdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL1xcd1xcUyovZywgZnVuY3Rpb24odHh0KSB7XG4gICAgcmV0dXJuIHR4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLlJFR0VYRVhUUkFDVCA9IGZ1bmN0aW9uICh0ZXh0LCByZWd1bGFyX2V4cHJlc3Npb24pIHtcbiAgbGV0IG1hdGNoID0gdGV4dC5tYXRjaChuZXcgUmVnRXhwKHJlZ3VsYXJfZXhwcmVzc2lvbikpO1xuICByZXR1cm4gbWF0Y2ggPyAobWF0Y2hbbWF0Y2gubGVuZ3RoID4gMSA/IG1hdGNoLmxlbmd0aCAtIDEgOiAwXSkgOiBudWxsO1xufTtcblxuZXhwb3J0cy5SRUdFWE1BVENIID0gZnVuY3Rpb24gKHRleHQsIHJlZ3VsYXJfZXhwcmVzc2lvbiwgZnVsbCkge1xuICBsZXQgbWF0Y2ggPSB0ZXh0Lm1hdGNoKG5ldyBSZWdFeHAocmVndWxhcl9leHByZXNzaW9uKSk7XG4gIHJldHVybiBmdWxsID8gbWF0Y2ggOiAhIW1hdGNoO1xufTtcblxuZXhwb3J0cy5SRUdFWFJFUExBQ0UgPSBmdW5jdGlvbiAodGV4dCwgcmVndWxhcl9leHByZXNzaW9uLCByZXBsYWNlbWVudCkge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAocmVndWxhcl9leHByZXNzaW9uKSwgcmVwbGFjZW1lbnQpO1xufTtcblxuZXhwb3J0cy5SRVBMQUNFID0gZnVuY3Rpb24odGV4dCwgcG9zaXRpb24sIGxlbmd0aCwgbmV3X3RleHQpIHtcbiAgcG9zaXRpb24gPSB1dGlscy5wYXJzZU51bWJlcihwb3NpdGlvbik7XG4gIGxlbmd0aCA9IHV0aWxzLnBhcnNlTnVtYmVyKGxlbmd0aCk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHBvc2l0aW9uLCBsZW5ndGgpIHx8XG4gICAgdHlwZW9mIHRleHQgIT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIG5ld190ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gdGV4dC5zdWJzdHIoMCwgcG9zaXRpb24gLSAxKSArIG5ld190ZXh0ICsgdGV4dC5zdWJzdHIocG9zaXRpb24gLSAxICsgbGVuZ3RoKTtcbn07XG5cbmV4cG9ydHMuUkVQVCA9IGZ1bmN0aW9uKHRleHQsIG51bWJlcikge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBuZXcgQXJyYXkobnVtYmVyICsgMSkuam9pbih0ZXh0KTtcbn07XG5cbmV4cG9ydHMuUklHSFQgPSBmdW5jdGlvbih0ZXh0LCBudW1iZXIpIHtcbiAgbnVtYmVyID0gKG51bWJlciA9PT0gdW5kZWZpbmVkKSA/IDEgOiBudW1iZXI7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIHRleHQgPyB0ZXh0LnN1YnN0cmluZyh0ZXh0Lmxlbmd0aCAtIG51bWJlcikgOiBudWxsO1xufTtcblxuZXhwb3J0cy5TRUFSQ0ggPSBmdW5jdGlvbihmaW5kX3RleHQsIHdpdGhpbl90ZXh0LCBwb3NpdGlvbikge1xuICBsZXQgZm91bmRBdDtcbiAgaWYgKHR5cGVvZiBmaW5kX3RleHQgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiB3aXRoaW5fdGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcG9zaXRpb24gPSAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkgPyAwIDogcG9zaXRpb247XG4gIGZvdW5kQXQgPSB3aXRoaW5fdGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmluZF90ZXh0LnRvTG93ZXJDYXNlKCksIHBvc2l0aW9uIC0gMSkrMTtcbiAgcmV0dXJuIChmb3VuZEF0ID09PSAwKT9lcnJvck9iai5FUlJPUl9WQUxVRTpmb3VuZEF0O1xufTtcblxuZXhwb3J0cy5TUExJVCA9IGZ1bmN0aW9uICh0ZXh0LCBzZXBhcmF0b3IpIHtcbiAgcmV0dXJuIHRleHQuc3BsaXQoc2VwYXJhdG9yKTtcbn07XG5cbmV4cG9ydHMuU1VCU1RJVFVURSA9IGZ1bmN0aW9uKHRleHQsIG9sZF90ZXh0LCBuZXdfdGV4dCwgb2NjdXJyZW5jZSkge1xuICBpZiAoIXRleHQgfHwgIW9sZF90ZXh0IHx8ICFuZXdfdGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9IGVsc2UgaWYgKG9jY3VycmVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChvbGRfdGV4dCwgJ2cnKSwgbmV3X3RleHQpO1xuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlICh0ZXh0LmluZGV4T2Yob2xkX3RleHQsIGluZGV4KSA+IDApIHtcbiAgICAgIGluZGV4ID0gdGV4dC5pbmRleE9mKG9sZF90ZXh0LCBpbmRleCArIDEpO1xuICAgICAgaSsrO1xuICAgICAgaWYgKGkgPT09IG9jY3VycmVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIGluZGV4KSArIG5ld190ZXh0ICsgdGV4dC5zdWJzdHJpbmcoaW5kZXggKyBvbGRfdGV4dC5sZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5UID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlID09ICdUUlVFJyB8fCB2YWx1ZSA9PSAnRkFMU0UnKXtcbiAgICByZXR1cm4gJydcbiAgfVxuICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikgPyB2YWx1ZSA6ICcnO1xufTtcblxuLy8gVE9ETyBpbmNvbXBsZXRlIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiBudW0yZShudW0pe1xuICBsZXQgcCA9IE1hdGguZmxvb3IoTWF0aC5sb2cobnVtKS9NYXRoLkxOMTApO1xuICBsZXQgbiA9IG51bSAqIE1hdGgucG93KDEwLCAtcCk7XG4gIGlmIChwLnRvU3RyaW5nKCkubGVuZ3RoIDwgMTApe1xuICAgIHAgPSAnMCcgKyBwXG4gIH1cbiAgcmV0dXJuIG4gKyAnRSsnICsgcDtcbn1cbmZ1bmN0aW9uIGFsbHplcm8obnVtKXtcbiAgbnVtID0gbnVtLnRvU3RyaW5nKClcbiAgZm9yIChsZXQgaT0wO2k8bnVtLmxlbmd0aDtpKyspe1xuICAgIGlmIChudW1baV0gIT09ICcwJyl7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cbmZ1bmN0aW9uIGRlY2ltYWxzVG9GcmFjdGlvbmFsKGRlY2ltYWxzKXtcbiAgZm9ybWF0RGVjaW1hbHMgPSBkZWNpbWFscy50b0ZpeGVkKDIpO1xuICBsZXQgZGVub21pbmF0b3IgPSAzOy8v5Yid5aeL5YyW5YiG5q+NXG4gIGxldCBudW1lcmF0b3IgID0gZm9ybWF0RGVjaW1hbHMqMzsvL+WIneWni+WMluWIhuWtkFxuICBsZXQgYmlnZ2VyID0gMDtcbiAgZnVuY3Rpb24gIHJlY3Vyc2lvbiAoKXtcbiAgICBiaWdnZXIgPSBkZW5vbWluYXRvcj5udW1lcmF0b3I/ZGVub21pbmF0b3I6bnVtZXJhdG9yO1xuICAgIGZvcihsZXQgaT1iaWdnZXI7aT4xO2ktLSl7XG4gICAgICBpZihOdW1iZXIuaXNJbnRlZ2VyKG51bWVyYXRvci9pKSYmTnVtYmVyLmlzSW50ZWdlcihkZW5vbWluYXRvci9pKSl7XG4gICAgICAgIG51bWVyYXRvcj1udW1lcmF0b3IvaTtcbiAgICAgICAgZGVub21pbmF0b3I9ZGVub21pbmF0b3IvaTtcbiAgICAgICAgcmVjdXJzaW9uKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlY3Vyc2lvbigpO1xuICBudW1lcmF0b3IgPSBwYXJzZUludChudW1lcmF0b3IpXG4gIHJldHVybiBgJHtudW1lcmF0b3J9LyR7ZGVub21pbmF0b3J9YFxufVxuZXhwb3J0cy5URVhUID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXQpIHtcbiAgdHJ5e1xuICAgIGlmIChmb3JtYXQuaW5kZXhPZignJScpID49IDApe1xuICAgICAgbGV0IGZpeGVkID0gZm9ybWF0LnNwbGl0KCcuJylbMV0ubGVuZ3RoLTFcbiAgICAgIHJldHVybiAocGFyc2VGbG9hdCh2YWx1ZSkgKjEwMCkudG9GaXhlZChmaXhlZCkgKyAnJSdcbiAgICB9XG4gICAgbGV0IEZvcm11bGFzID0gd2luZG93LmpzU3ByZWFkc2hlZXQuQWxsRm9ybXVsYXM7XG4gICAgbGV0IHJlc3VsdCA9IEZvcm11bGFzLlRFWFQodmFsdWUsIGZvcm1hdCk7XG4gICAgY29uc29sZS5sb2cocmVzdWx0KVxuICB9Y2F0Y2ggKGUpIHtcbiAgICBsZXQgcmVzdWx0ID0gdW5kZWZpbmVkXG4gIH1cbiAgaWYgKHJlc3VsdCA9PSB1bmRlZmluZWQpe1xuICAgIGlmIChmb3JtYXQuaW5kZXhPZignIycpID49IDAgJiYgZm9ybWF0LmluZGV4T2YoJz8vPycpID49MCl7XG4gICAgICBsZXQgeCA9IHBhcnNlRmxvYXQodmFsdWUpIC0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgaWYgKHBhcnNlSW50KHZhbHVlKSAhPT0gMCl7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSkgKyAnICcgKyBkZWNpbWFsc1RvRnJhY3Rpb25hbCh4KVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRlY2ltYWxzVG9GcmFjdGlvbmFsKHgpXG4gICAgfVxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignRSsnKSA+PTApe1xuICAgICAgcmV0dXJuIG51bTJlKHZhbHVlKVxuICAgIH1lbHNlIGlmKGFsbHplcm8odmFsdWUpKXtcbiAgICAgIGxldCByZXN1bHQgPSAnJ1xuICAgICAgZm9yIChsZXQgaT0wO2k8Zm9ybWF0Lmxlbmd0aC12YWx1ZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHJlc3VsdCArPSAnMCdcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyB2YWx1ZVxuICAgIH1lbHNlIGlmIChmb3JtYXQuaW5kZXhPZignIycpID49MCl7XG4gICAgICBsZXQgZm10ID0gZm9ybWF0XG4gICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ1snKT49MCAmJiBmb3JtYXQuaW5kZXhPZignOycpPj0wKXtcbiAgICAgICAgbGV0IHZhbGlkID0gZm9ybWF0LnNwbGl0KCcjJylbMF1cbiAgICAgICAgZm10ID0gZm9ybWF0LnNwbGl0KCddJylbMV0uc3BsaXQoJzsnKVxuICAgICAgICB2YWxpZCA9IHZhbGlkLnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKVxuICAgICAgICBpZiAoZXZhbCh2YWx1ZSArIHZhbGlkKSl7XG4gICAgICAgICAgZm10ID0gZm10WzBdXG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICBmbXQgPSBmbXRbMV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCcjJykgPj0wICYmIGZvcm1hdC5pbmRleE9mKCcuJyA+PTApICYmIGZvcm1hdC5pbmRleE9mKCcwJykgPj0wICYmIGZvcm1hdC5pbmRleE9mKCfCsCcpIDw9MCl7XG4gICAgICAgIGlmICh2YWx1ZS50b1N0cmluZygpLnNwbGl0KCcuJylbMV0ubGVuZ3RoID4gZm9ybWF0LnNwbGl0KCcuJylbMV0ubGVuZ3RoKXtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvRml4ZWQoZm9ybWF0LnNwbGl0KCcuJylbMV0ubGVuZ3RoKVxuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKVxuICAgICAgICBsZXQgcmVzdWx0ID0gJydcbiAgICAgICAgbGV0IG4gPSAwXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTwgZm10Lmxlbmd0aDsgaSArKyl7XG4gICAgICAgICAgaWYgKGZtdFtpXSA9PSAnIycgfHwgZm10W2ldID09ICcwJyB8fCBmbXRbaV0gPT0gJy4nKXtcbiAgICAgICAgICAgIHJlc3VsdCArPSB2YWx1ZVtuXVxuICAgICAgICAgICAgbiArPSAxXG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXN1bHQgKz0gZm10W2ldXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICAgIGZtdCA9IGZtdC5yZXBsYWNlKCcjIzAnLCAnIyMnKVxuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpXG4gICAgICBsZXQgcmVzdWx0ID0gJydcbiAgICAgIGxldCBuID0gMFxuICAgICAgZm9yIChsZXQgaT0wOyBpPCBmbXQubGVuZ3RoOyBpICsrKXtcbiAgICAgICAgaWYgKGZtdFtpXSA9PSAnIycgfHwgZm10W2ldID09ICcwJyl7XG4gICAgICAgICAgcmVzdWx0ICs9IHZhbHVlW25dXG4gICAgICAgICAgbiArPSAxXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJlc3VsdCArPSBmbXRbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59O1xuXG5leHBvcnRzLlRSSU0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvICsvZywgJyAnKS50cmltKCk7XG59O1xuXG5leHBvcnRzLlVOSUNIQVIgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAodGV4dCA9PSAwKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUVcbiAgfVxuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh0ZXh0KTtcbn07XG5cbmV4cG9ydHMuVU5JQ09ERSA9IGZ1bmN0aW9uICh0ZXh0KXtcbiAgcmV0dXJuIHRleHQuY2hhckNvZGVBdCgwKVxufVxuXG5leHBvcnRzLlVQUEVSID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiB0ZXh0LnRvVXBwZXJDYXNlKCk7XG59O1xuXG5leHBvcnRzLlZBTFVFID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIHJldHVybiBudW1lcmFsKCkudW5mb3JtYXQodGV4dCk7XG59O1xuIiwiaW1wb3J0IHtlcnJvck9iaiwgZXJyb3JNc2dBcnJ9IGZyb20gJy4uLy4uL2NhbGNfdXRpbHMvZXJyb3JfY29uZmlnJ1xuXG4vLyBUT0RPXG5leHBvcnRzLkNFTEwgPSBmdW5jdGlvbigpIHtcbiB0aHJvdyBuZXcgRXJyb3IoJ0NFTEwgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5leHBvcnRzLkVSUk9SID0ge307XG5leHBvcnRzLkVSUk9SLlRZUEUgPSBmdW5jdGlvbiAoZXJyb3JfdmFsKSB7IC8vIOWIpOaWremUmeivr+exu+Wei1xuICAgIGxldCBtc2dJbmRpY2UgPSBlcnJvck1zZ0Fyci5pbmRleE9mKGVycm9yX3ZhbClcbiAgICBpZiAobXNnSW5kaWNlID4gLTEpe1xuICAgICAgcmV0dXJuIG1zZ0luZGljZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgICB9XG59O1xuXG4vLyBUT0RPXG5leHBvcnRzLklORk8gPSBmdW5jdGlvbigpIHtcbiB0aHJvdyBuZXcgRXJyb3IoJ0lORk8gaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5leHBvcnRzLklTQkxBTksgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG59O1xuXG5leHBvcnRzLklTQklOQVJZID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gKC9eWzAxXXsxLDEwfSQvKS50ZXN0KG51bWJlcik7XG59O1xuXG5leHBvcnRzLklTRVJSID0gZnVuY3Rpb24odmFsdWUpIHsgLy8g5piv5ZCm5piv6ZSZ6K+vMVxuICByZXR1cm4gZXJyb3JNc2dBcnIuaW5kZXhPZih2YWx1ZSkgPj0gMCB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIChpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSkpO1xufTtcblxuZXhwb3J0cy5JU0VSUk9SID0gZnVuY3Rpb24odmFsdWUpIHsgLy8g5piv5ZCm5piv6ZSZ6K+vMlxuICByZXR1cm4gZXhwb3J0cy5JU0VSUih2YWx1ZSkgfHwgdmFsdWUgPT09IGVycm9yT2JqLkVSUk9SX05BO1xufTtcblxuZXhwb3J0cy5JU0VWRU4gPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgcmV0dXJuIChNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpICYgMSkgPyBmYWxzZSA6IHRydWU7XG59O1xuXG4vLyBUT0RPXG5leHBvcnRzLklTRk9STVVMQSA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0lTRk9STVVMQSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbmV4cG9ydHMuSVNMT0dJQ0FMID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYodmFsdWUgPT09ICdGQUxTRScpe1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG59O1xuXG5leHBvcnRzLklTTkEgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IGVycm9yT2JqLkVSUk9SX05BIHx8IHZhbHVlID09PSBlcnJvck9iai5FUlJPUl9OQS5tZXNzYWdlOztcbn07XG5cbmV4cG9ydHMuSVNOT05URVhUID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZih2YWx1ZSkgIT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0cy5JU05VTUJFUiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpICYmIGlzRmluaXRlKHZhbHVlKTtcbn07XG5cbmV4cG9ydHMuSVNPREQgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgcmV0dXJuIChNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpICYgMSkgPyB0cnVlIDogZmFsc2U7XG59O1xuXG4vLyBUT0RPXG5leHBvcnRzLklTUkVGID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBhcmd1bWVudHNbJzAnXSAhPT0gbnVsbFxufTtcblxuZXhwb3J0cy5JU1RFWFQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mKHZhbHVlKSA9PT0gJ3N0cmluZyc7XG59O1xuXG5leHBvcnRzLk4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZih2YWx1ZSkgPT09ICdudW1iZXInICYmICFpc05hTih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gdmFsdWUuZ2V0VGltZSgpO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZS50b1N0cmluZygpLnRvVXBwZXJDYXNlKCkgPT09ICdUUlVFJyB8fCB2YWx1ZS50b1N0cmluZygpLnRvVXBwZXJDYXNlKCkgPT0gJ0ZBTFNFJykge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdHlwZW9mKHZhbHVlKT09PSdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKElTRVJST1IodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuZXhwb3J0cy5OQSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG59O1xuXG5cbi8vIFRPRE9cbmV4cG9ydHMuU0hFRVQgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTSEVFVCBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbi8vIFRPRE9cbmV4cG9ydHMuU0hFRVRTID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcignU0hFRVRTIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuZXhwb3J0cy5UWVBFID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YodmFsdWUpID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpICYmIGlzRmluaXRlKHZhbHVlKSkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIC8vIGlmICh0eXBlb2YodmFsdWUpICE9PSAnc3RyaW5nJyAmJiBpc05hTih2YWx1ZSkpe1xuICAvLyAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRVxuICAvLyB9XG4gIGlmICh0eXBlb2YodmFsdWUpID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZS5zbGljZSgwLDEpID09ICd7Jyl7XG4gICAgICBsZXQgYXJyID0gdXRpbHMuc3RyVG9NYXRyaXgodmFsdWUpXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICAgIHJldHVybiA2NDtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIHJldHVybiAyXG4gICAgfVxuICB9XG4gIGlmKHZhbHVlID09ICdGQUxTRScpe1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmICh2YWx1ZSA9PSB0cnVlIHx8IHZhbHVlID09IGZhbHNlKSB7XG4gICAgcmV0dXJuIDQ7XG4gIH1cbiAgaWYgKGV4cG9ydHMuSVNFUlIodmFsdWUpIHx8IHZhbHVlID09PSBlcnJvck9iai5FUlJPUl9OQSkge1xuICAgIHJldHVybiAxNjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgcmV0dXJuIDY0O1xuICB9XG5cbn07XG4iLCJpbXBvcnQge2Vycm9yT2JqfSBmcm9tICcuLi8uLi9jYWxjX3V0aWxzL2Vycm9yX2NvbmZpZydcbmltcG9ydCB7Q2VsbFZEYXRlVGltZX0gZnJvbSAnLi4vLi4vY2VsbF92YWx1ZV90eXBlL2NlbGxfdmFsdWUnO1xuaW1wb3J0ICogYXMgY2YgZnJvbSAnLi4vLi4vY2FsY191dGlscy9jb25maWcnXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscydcbmltcG9ydCB7IHN0YW1wMkRheU51bSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlci9jYWxjX2hlbHBlcic7XG5cbmxldCBkMTkwMCA9IG5ldyBDZWxsVkRhdGVUaW1lKDE5MDAsIDAsIDEpO1xubGV0IFdFRUtfU1RBUlRTID0gW1xuICB1bmRlZmluZWQsXG4gIDAsXG4gIDEsXG4gIHVuZGVmaW5lZCxcbiAgdW5kZWZpbmVkLFxuICB1bmRlZmluZWQsXG4gIHVuZGVmaW5lZCxcbiAgdW5kZWZpbmVkLFxuICB1bmRlZmluZWQsXG4gIHVuZGVmaW5lZCxcbiAgdW5kZWZpbmVkLFxuICB1bmRlZmluZWQsXG4gIDEsXG4gIDIsXG4gIDMsXG4gIDQsXG4gIDUsXG4gIDYsXG4gIDBcbl07XG5sZXQgV0VFS19UWVBFUyA9IFtcbiAgW10sXG4gIFsxLCAyLCAzLCA0LCA1LCA2LCA3XSxcbiAgWzcsIDEsIDIsIDMsIDQsIDUsIDZdLFxuICBbNiwgMCwgMSwgMiwgMywgNCwgNV0sXG4gIFtdLFxuICBbXSxcbiAgW10sXG4gIFtdLFxuICBbXSxcbiAgW10sXG4gIFtdLFxuICBbNywgMSwgMiwgMywgNCwgNSwgNl0sXG4gIFs2LCA3LCAxLCAyLCAzLCA0LCA1XSxcbiAgWzUsIDYsIDcsIDEsIDIsIDMsIDRdLFxuICBbNCwgNSwgNiwgNywgMSwgMiwgM10sXG4gIFszLCA0LCA1LCA2LCA3LCAxLCAyXSxcbiAgWzIsIDMsIDQsIDUsIDYsIDcsIDFdLFxuICBbMSwgMiwgMywgNCwgNSwgNiwgN11cbl07XG5sZXQgV0VFS0VORF9UWVBFUyA9IFtcbiAgW10sXG4gIFs2LCAwXSxcbiAgWzAsIDFdLFxuICBbMSwgMl0sXG4gIFsyLCAzXSxcbiAgWzMsIDRdLFxuICBbNCwgNV0sXG4gIFs1LCA2XSxcbiAgdW5kZWZpbmVkLFxuICB1bmRlZmluZWQsXG4gIHVuZGVmaW5lZCwgWzAsIDBdLFxuICBbMSwgMV0sXG4gIFsyLCAyXSxcbiAgWzMsIDNdLFxuICBbNCwgNF0sXG4gIFs1LCA1XSxcbiAgWzYsIDZdXG5dO1xuXG5leHBvcnRzLkRBVEUgPSBmdW5jdGlvbih5ZWFyLCBtb250aCwgZGF5KSB7XG4gIHllYXIgPSB1dGlscy5wYXJzZU51bWJlcih5ZWFyKTtcbiAgbW9udGggPSB1dGlscy5wYXJzZU51bWJlcihtb250aCk7XG4gIGRheSA9IHV0aWxzLnBhcnNlTnVtYmVyKGRheSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHllYXIsIG1vbnRoLCBkYXkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmICh5ZWFyIDwgMCB8fCBtb250aCA8IDAgfHwgZGF5IDwgMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgbGV0IGRhdGUgPSBuZXcgQ2VsbFZEYXRlVGltZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7IC8vIOmcgOimgeWHj+WOuzHmiY3lr7lcbiAgcmV0dXJuIGRhdGU7XG59O1xuXG5leHBvcnRzLkRBVEVWQUxVRSA9IGZ1bmN0aW9uKGRhdGVfdGV4dCkge1xuICBpZiAodHlwZW9mIGRhdGVfdGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IGRhdGUgPSBDZWxsVkRhdGVUaW1lLnBhcnNlKGRhdGVfdGV4dCk7XG4gIGlmIChpc05hTihkYXRlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gc3RhbXAyRGF5TnVtKGRhdGUpO1xufTtcblxuZXhwb3J0cy5EQVkgPSBmdW5jdGlvbihzZXJpYWxfbnVtYmVyKSB7XG4gIGxldCBkYXRlID0gdXRpbHMucGFyc2VEYXRlKHNlcmlhbF9udW1iZXIpO1xuICBpZiAoZGF0ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpO1xufTtcblxuZXhwb3J0cy5EQVlTID0gZnVuY3Rpb24oZW5kX2RhdGUsIHN0YXJ0X2RhdGUpIHtcbiAgZW5kX2RhdGUgPSB1dGlscy5wYXJzZURhdGUoZW5kX2RhdGUpO1xuICBzdGFydF9kYXRlID0gdXRpbHMucGFyc2VEYXRlKHN0YXJ0X2RhdGUpO1xuICBpZiAoZW5kX2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlbmRfZGF0ZTtcbiAgfVxuICBpZiAoc3RhcnRfZGF0ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHN0YXJ0X2RhdGU7XG4gIH1cbiAgcmV0dXJuIHN0YW1wMkRheU51bShlbmRfZGF0ZSkgLSBzdGFtcDJEYXlOdW0oc3RhcnRfZGF0ZSk7XG59O1xuXG5leHBvcnRzLkRBWVMzNjAgPSBmdW5jdGlvbihzdGFydF9kYXRlLCBlbmRfZGF0ZSwgbWV0aG9kKSB7XG4gIG1ldGhvZCA9IHV0aWxzLnBhcnNlQm9vbChtZXRob2QpO1xuICBzdGFydF9kYXRlID0gdXRpbHMucGFyc2VEYXRlKHN0YXJ0X2RhdGUpO1xuICBlbmRfZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShlbmRfZGF0ZSk7XG4gIGlmIChzdGFydF9kYXRlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gc3RhcnRfZGF0ZTtcbiAgfVxuICBpZiAoZW5kX2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlbmRfZGF0ZTtcbiAgfVxuICBpZiAobWV0aG9kIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbWV0aG9kO1xuICB9XG4gIGxldCBzbSA9IHN0YXJ0X2RhdGUuZ2V0TW9udGgoKTtcbiAgbGV0IGVtID0gZW5kX2RhdGUuZ2V0TW9udGgoKTtcbiAgbGV0IHNkLCBlZDtcbiAgaWYgKG1ldGhvZCkge1xuICAgIHNkID0gc3RhcnRfZGF0ZS5nZXREYXRlKCkgPT09IDMxID8gMzAgOiBzdGFydF9kYXRlLmdldERhdGUoKTtcbiAgICBlZCA9IGVuZF9kYXRlLmdldERhdGUoKSA9PT0gMzEgPyAzMCA6IGVuZF9kYXRlLmdldERhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgc21kID0gbmV3IENlbGxWRGF0ZVRpbWUoc3RhcnRfZGF0ZS5nZXRGdWxsWWVhcigpLCBzbSArIDEsIDApLmdldERhdGUoKTtcbiAgICBsZXQgZW1kID0gbmV3IENlbGxWRGF0ZVRpbWUoZW5kX2RhdGUuZ2V0RnVsbFllYXIoKSwgZW0gKyAxLCAwKS5nZXREYXRlKCk7XG4gICAgc2QgPSBzdGFydF9kYXRlLmdldERhdGUoKSA9PT0gc21kID8gMzAgOiBzdGFydF9kYXRlLmdldERhdGUoKTtcbiAgICBpZiAoZW5kX2RhdGUuZ2V0RGF0ZSgpID09PSBlbWQpIHtcbiAgICAgIGlmIChzZCA8IDMwKSB7XG4gICAgICAgIGVtKys7XG4gICAgICAgIGVkID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVkID0gMzA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkID0gZW5kX2RhdGUuZ2V0RGF0ZSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMzYwICogKGVuZF9kYXRlLmdldEZ1bGxZZWFyKCkgLSBzdGFydF9kYXRlLmdldEZ1bGxZZWFyKCkpICtcbiAgICAzMCAqIChlbSAtIHNtKSArIChlZCAtIHNkKTtcbn07XG5cbmV4cG9ydHMuRURBVEUgPSBmdW5jdGlvbihzdGFydF9kYXRlLCBtb250aHMpIHtcbiAgc3RhcnRfZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShzdGFydF9kYXRlKTtcbiAgaWYgKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBzdGFydF9kYXRlO1xuICB9XG4gIGlmIChpc05hTihtb250aHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIG1vbnRocyA9IHBhcnNlSW50KG1vbnRocywgMTApO1xuICBzdGFydF9kYXRlLnNldE1vbnRoKHN0YXJ0X2RhdGUuZ2V0TW9udGgoKSArIG1vbnRocyk7XG4gIHJldHVybiBzdGFtcDJEYXlOdW0oc3RhcnRfZGF0ZSk7XG59O1xuXG5leHBvcnRzLkVPTU9OVEggPSBmdW5jdGlvbihzdGFydF9kYXRlLCBtb250aHMpIHtcbiAgc3RhcnRfZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShzdGFydF9kYXRlKTtcbiAgaWYgKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBzdGFydF9kYXRlO1xuICB9XG4gIGlmIChpc05hTihtb250aHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIG1vbnRocyA9IHBhcnNlSW50KG1vbnRocywgMTApO1xuICByZXR1cm4gc3RhbXAyRGF5TnVtKG5ldyBDZWxsVkRhdGVUaW1lKHN0YXJ0X2RhdGUuZ2V0RnVsbFllYXIoKSwgc3RhcnRfZGF0ZS5nZXRNb250aCgpICsgbW9udGhzICsgMSwgMCkpO1xufTtcblxuZXhwb3J0cy5IT1VSID0gZnVuY3Rpb24oc2VyaWFsX251bWJlcikge1xuICBpZiAodHlwZW9mIHNlcmlhbF9udW1iZXIgPT09ICdudW1iZXInICYmICFpc05hTihzZXJpYWxfbnVtYmVyKSl7XG4gICAgLy9YVzog5Y+C5pWw5Li65pWw5a2X5pe26I635Y+W5a+55bqU55qE5bCP5pe25pWwXG4gICAgcmV0dXJuIHBhcnNlSW50KChwYXJzZUZsb2F0KHNlcmlhbF9udW1iZXIpLXBhcnNlSW50KHNlcmlhbF9udW1iZXIpKSAqIDI0KVxuICAgIC8vWFc6IGVuZFxuICB9XG4gIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XG4gIGlmIChzZXJpYWxfbnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcbiAgfVxuICByZXR1cm4gc2VyaWFsX251bWJlci5nZXRIb3VycygpO1xufTtcblxuZXhwb3J0cy5JTlRFUlZBTCA9IGZ1bmN0aW9uIChzZWNvbmQpIHtcbiAgaWYgKHR5cGVvZiBzZWNvbmQgIT09ICdudW1iZXInICYmIHR5cGVvZiBzZWNvbmQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9IGVsc2Uge1xuICAgIHNlY29uZCA9IHBhcnNlSW50KHNlY29uZCwgMTApO1xuICB9XG5cbiAgbGV0IHllYXIgID0gTWF0aC5mbG9vcihzZWNvbmQvOTQ2MDgwMDAwKTtcbiAgc2Vjb25kICAgID0gc2Vjb25kJTk0NjA4MDAwMDtcbiAgbGV0IG1vbnRoID0gTWF0aC5mbG9vcihzZWNvbmQvMjU5MjAwMCk7XG4gIHNlY29uZCAgICA9IHNlY29uZCUyNTkyMDAwO1xuICBsZXQgZGF5ICAgPSBNYXRoLmZsb29yKHNlY29uZC84NjQwMCk7XG4gIHNlY29uZCAgICA9IHNlY29uZCU4NjQwMDtcblxuICBsZXQgaG91ciAgPSBNYXRoLmZsb29yKHNlY29uZC8zNjAwKTtcbiAgc2Vjb25kICAgID0gc2Vjb25kJTM2MDA7XG4gIGxldCBtaW4gICA9IE1hdGguZmxvb3Ioc2Vjb25kLzYwKTtcbiAgc2Vjb25kICAgID0gc2Vjb25kJTYwO1xuICBsZXQgc2VjICAgPSBzZWNvbmQ7XG5cbiAgeWVhciAgPSAoeWVhciAgPiAwKSA/IHllYXIgICsgJ1knIDogJyc7XG4gIG1vbnRoID0gKG1vbnRoID4gMCkgPyBtb250aCArICdNJyA6ICcnO1xuICBkYXkgICA9IChkYXkgICA+IDApID8gZGF5ICAgKyAnRCcgOiAnJztcbiAgaG91ciAgPSAoaG91ciAgPiAwKSA/IGhvdXIgICsgJ0gnIDogJyc7XG4gIG1pbiAgID0gKG1pbiAgID4gMCkgPyBtaW4gICArICdNJyA6ICcnO1xuICBzZWMgICA9IChzZWMgICA+IDApID8gc2VjICAgKyAnUycgOiAnJztcblxuICByZXR1cm4gJ1AnICsgeWVhciArIG1vbnRoICsgZGF5ICtcbiAgJ1QnICsgaG91ciArIG1pbiArIHNlYztcbn07XG5cbmV4cG9ydHMuSVNPV0VFS05VTSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShkYXRlKTtcbiAgaWYgKGRhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwKTtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgNCAtIChkYXRlLmdldERheSgpIHx8IDcpKTtcbiAgbGV0IHllYXJTdGFydCA9IG5ldyBDZWxsVkRhdGVUaW1lKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gIHJldHVybiBNYXRoLmNlaWwoKCgoZGF0ZSAtIHllYXJTdGFydCkgLyBjZi5NU19QRVJfREFZKSArIDEpIC8gNyk7XG59O1xuXG5leHBvcnRzLk1JTlVURSA9IGZ1bmN0aW9uKHNlcmlhbF9udW1iZXIpIHtcbiAgICBsZXQgRm9ybXVsYXMgPSB3aW5kb3cuanNTcHJlYWRzaGVldC5BbGxGb3JtdWxhcztcbiAgICByZXR1cm4gRm9ybXVsYXMuTUlOVVRFKHNlcmlhbF9udW1iZXIpO1xufTtcblxuZXhwb3J0cy5NT05USCA9IGZ1bmN0aW9uKHNlcmlhbF9udW1iZXIpIHtcbiAgc2VyaWFsX251bWJlciA9IHV0aWxzLnBhcnNlRGF0ZShzZXJpYWxfbnVtYmVyKTtcbiAgaWYgKHNlcmlhbF9udW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBzZXJpYWxfbnVtYmVyO1xuICB9XG4gIHJldHVybiBzZXJpYWxfbnVtYmVyLmdldE1vbnRoKCkgKyAxO1xufTtcblxuZXhwb3J0cy5ORVRXT1JLREFZUyA9IGZ1bmN0aW9uIChzdGFydF9kYXRlLCBlbmRfZGF0ZSwgaG9saWRheXMpIHtcbiAgaWYgKGhvbGlkYXlzIGluc3RhbmNlb2YgQXJyYXkpe1xuICAgIGhvbGlkYXlzID0gdXRpbHMuZmxhdHRlbihob2xpZGF5cylcbiAgfVxuICBsZXQgRm9ybXVsYXMgPSB3aW5kb3cuanNTcHJlYWRzaGVldC5BbGxGb3JtdWxhcztcbiAgcmV0dXJuIEZvcm11bGFzLk5FVFdPUktEQVlTKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBob2xpZGF5cyk7XG59O1xuZXhwb3J0cy5ORVRXT1JLREFZU0lOVEwgPSBmdW5jdGlvbiAoc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIHdlZWtlbmQsIGhvbGlkYXlzKSB7XG4gIGlmICh0eXBlb2YgaG9saWRheXMgPT0gJ3N0cmluZycgJiYgaG9saWRheXMuaW5kZXhPZigneycpID49MCl7XG4gICAgaG9saWRheXMgPSB1dGlscy5wYXJzZURhdGVBcnJheSh1dGlscy5zdHJUb01hdHJpeChob2xpZGF5cylbMF0pXG4gIH1cbiAgdHJ5e1xuICAgIGxldCBGb3JtdWxhcyA9IHdpbmRvdy5qc1NwcmVhZHNoZWV0LkFsbEZvcm11bGFzO1xuICAgIHJldHVybiBGb3JtdWxhcy5ORVRXT1JLREFZUyRJTlRMKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCB3ZWVrZW5kLCBob2xpZGF5cyk7XG4gIH1jYXRjaCAoZSkge1xuICAgIHN0YXJ0X2RhdGUgPSB1dGlscy5FeGNlbERhdGVUb0pTRGF0ZSh1dGlscy5wYXJzZURhdGUoc3RhcnRfZGF0ZSkpO1xuICAgIGVuZF9kYXRlID0gdXRpbHMuRXhjZWxEYXRlVG9KU0RhdGUodXRpbHMucGFyc2VEYXRlKGVuZF9kYXRlKSk7XG4gICAgaWYgKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIHN0YXJ0X2RhdGU7XG4gICAgfVxuICAgIGlmIChlbmRfZGF0ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gZW5kX2RhdGU7XG4gICAgfVxuICAgIGlmICh3ZWVrZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHdlZWtlbmQgPSBXRUVLRU5EX1RZUEVTWzFdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdlZWtlbmQ9PSdzdHJpbmcnICYmIHdlZWtlbmQubGVuZ3RoID09PSA3KSB7XG4gICAgICBsZXQgYXJyID0gW11cbiAgICAgIGZvciAobGV0IGk9MDtpPHdlZWtlbmQubGVuZ3RoO2krKyl7XG4gICAgICAgIGlmICh3ZWVrZW5kW2ldID09ICcxJyl7XG4gICAgICAgICAgYXJyLnB1c2goKChpKzEpPjYpPyAwOiBpKzEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdlZWtlbmQgPSBhcnJcbiAgICB9ZWxzZSB7XG4gICAgICB3ZWVrZW5kID0gV0VFS0VORF9UWVBFU1t3ZWVrZW5kXTtcbiAgICB9XG4gICAgaWYgKCEod2Vla2VuZCBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAgIH1cbiAgICBpZiAoaG9saWRheXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaG9saWRheXMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKCEoaG9saWRheXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIGhvbGlkYXlzID0gW2hvbGlkYXlzXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob2xpZGF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGggPSB1dGlscy5wYXJzZURhdGUoaG9saWRheXNbaV0pO1xuICAgICAgaWYgKGggaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gaDtcbiAgICAgIH1cbiAgICAgIGhvbGlkYXlzW2ldID0gaDtcbiAgICB9XG4gICAgbGV0IGRheXMgPSAoZW5kX2RhdGUgLSBzdGFydF9kYXRlKSAvIGNmLk1TX1BFUl9EQVkgKyAxO1xuICAgIGxldCB0b3RhbCA9IGRheXM7XG4gICAgbGV0IGRheSA9IHN0YXJ0X2RhdGU7XG4gICAgZm9yIChpID0gMDsgaSA8IGRheXM7IGkrKykge1xuICAgICAgbGV0IGQgPSAobmV3IENlbGxWRGF0ZVRpbWUoKS5nZXRUaW1lem9uZU9mZnNldCgpID4gMCkgPyBkYXkuZ2V0VVRDRGF5KCkgOiBkYXkuZ2V0RGF5KCk7XG4gICAgICBsZXQgZGVjID0gZmFsc2U7XG4gICAgICBpZiAoZCA9PT0gd2Vla2VuZFswXSB8fCBkID09PSB3ZWVrZW5kWzFdKSB7XG4gICAgICAgIGRlYyA9IHRydWU7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhvbGlkYXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCBob2xpZGF5ID0gaG9saWRheXNbal07XG4gICAgICAgIGlmIChob2xpZGF5LmdldERhdGUoKSA9PT0gZGF5LmdldERhdGUoKSAmJlxuICAgICAgICAgIGhvbGlkYXkuZ2V0TW9udGgoKSA9PT0gZGF5LmdldE1vbnRoKCkgJiZcbiAgICAgICAgICBob2xpZGF5LmdldEZ1bGxZZWFyKCkgPT09IGRheS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgZGVjID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlYykge1xuICAgICAgICB0b3RhbC0tO1xuICAgICAgfVxuICAgICAgZGF5LnNldERhdGUoZGF5LmdldERhdGUoKSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cbn07XG5cblxuZXhwb3J0cy5ORVRXT1JLREFZUy5JTlRMID0gZnVuY3Rpb24gKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCB3ZWVrZW5kLCBob2xpZGF5cykge1xuICBpZiAodHlwZW9mIGhvbGlkYXlzID09ICdzdHJpbmcnICYmIGhvbGlkYXlzLmluZGV4T2YoJ3snKSA+PTApe1xuICAgIGhvbGlkYXlzID0gdXRpbHMucGFyc2VEYXRlQXJyYXkodXRpbHMuc3RyVG9NYXRyaXgoaG9saWRheXMpKVxuICB9XG4gIHN0YXJ0X2RhdGUgPSB1dGlscy5FeGNlbERhdGVUb0pTRGF0ZShzdGFydF9kYXRlKTtcbiAgZW5kX2RhdGUgPSB1dGlscy5FeGNlbERhdGVUb0pTRGF0ZShlbmRfZGF0ZSk7XG4gIGlmIChzdGFydF9kYXRlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gc3RhcnRfZGF0ZTtcbiAgfVxuICBpZiAoZW5kX2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlbmRfZGF0ZTtcbiAgfVxuICBpZiAod2Vla2VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgd2Vla2VuZCA9IFdFRUtFTkRfVFlQRVNbMV07XG4gIH0gZWxzZSB7XG4gICAgd2Vla2VuZCA9IFdFRUtFTkRfVFlQRVNbd2Vla2VuZF07XG4gIH1cbiAgaWYgKCEod2Vla2VuZCBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoaG9saWRheXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGhvbGlkYXlzID0gW107XG4gIH0gZWxzZSBpZiAoIShob2xpZGF5cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIGhvbGlkYXlzID0gW2hvbGlkYXlzXTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvbGlkYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGggPSB1dGlscy5wYXJzZURhdGUoaG9saWRheXNbaV0pO1xuICAgIGlmIChoIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBoO1xuICAgIH1cbiAgICBob2xpZGF5c1tpXSA9IGg7XG4gIH1cbiAgbGV0IGRheXMgPSAoZW5kX2RhdGUgLSBzdGFydF9kYXRlKSAvIGNmLk1TX1BFUl9EQVkgKyAxO1xuICBsZXQgdG90YWwgPSBkYXlzO1xuICBsZXQgZGF5ID0gc3RhcnRfZGF0ZTtcbiAgZm9yIChpID0gMDsgaSA8IGRheXM7IGkrKykge1xuICAgIGxldCBkID0gKG5ldyBDZWxsVkRhdGVUaW1lKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSA+IDApID8gZGF5LmdldFVUQ0RheSgpIDogZGF5LmdldERheSgpO1xuICAgIGxldCBkZWMgPSBmYWxzZTtcbiAgICBpZiAoZCA9PT0gd2Vla2VuZFswXSB8fCBkID09PSB3ZWVrZW5kWzFdKSB7XG4gICAgICBkZWMgPSB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhvbGlkYXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgaG9saWRheSA9IGhvbGlkYXlzW2pdO1xuICAgICAgaWYgKGhvbGlkYXkuZ2V0RGF0ZSgpID09PSBkYXkuZ2V0RGF0ZSgpICYmXG4gICAgICAgIGhvbGlkYXkuZ2V0TW9udGgoKSA9PT0gZGF5LmdldE1vbnRoKCkgJiZcbiAgICAgICAgaG9saWRheS5nZXRGdWxsWWVhcigpID09PSBkYXkuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICBkZWMgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlYykge1xuICAgICAgdG90YWwtLTtcbiAgICB9XG4gICAgZGF5LnNldERhdGUoZGF5LmdldERhdGUoKSArIDEpO1xuICB9XG4gIHJldHVybiB0b3RhbDtcbn07XG5cbmV4cG9ydHMuTk9XID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgQ2VsbFZEYXRlVGltZSgpO1xufTtcblxuZXhwb3J0cy5TRUNPTkQgPSBmdW5jdGlvbihzZXJpYWxfbnVtYmVyKSB7XG4gIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XG4gIGlmIChzZXJpYWxfbnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcbiAgfVxuICByZXR1cm4gc2VyaWFsX251bWJlci5nZXRTZWNvbmRzKCk7XG59O1xuXG5leHBvcnRzLlRJTUUgPSBmdW5jdGlvbihob3VyLCBtaW51dGUsIHNlY29uZCkge1xuICBob3VyID0gdXRpbHMucGFyc2VOdW1iZXIoaG91cik7XG4gIG1pbnV0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKG1pbnV0ZSk7XG4gIHNlY29uZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHNlY29uZCk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGhvdXIsIG1pbnV0ZSwgc2Vjb25kKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoaG91ciA8IDAgfHwgbWludXRlIDwgMCB8fCBzZWNvbmQgPCAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICByZXR1cm4gKDM2MDAgKiBob3VyICsgNjAgKiBtaW51dGUgKyBzZWNvbmQpIC8gODY0MDA7XG59O1xuXG5leHBvcnRzLlRJTUVWQUxVRSA9IGZ1bmN0aW9uKHRpbWVfdGV4dCkge1xuICBsZXQgRm9ybXVsYXMgPSB3aW5kb3cuanNTcHJlYWRzaGVldC5BbGxGb3JtdWxhcztcbiAgdHJ5e1xuICAgIHJldHVybiBGb3JtdWxhcy5USU1FVkFMVUUodGltZV90ZXh0KTtcbiAgfWNhdGNoKGUpe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRVxuICB9XG59O1xuXG5leHBvcnRzLlRPREFZID0gZnVuY3Rpb24oKSB7XG4gIGxldCBGb3JtdWxhcyA9IHdpbmRvdy5qc1NwcmVhZHNoZWV0LkFsbEZvcm11bGFzO1xuICByZXR1cm4gRm9ybXVsYXMuVE9EQVkoKVxufTtcblxuZXhwb3J0cy5XRUVLREFZID0gZnVuY3Rpb24oc2VyaWFsX251bWJlciwgcmV0dXJuX3R5cGUpIHtcbiAgc2VyaWFsX251bWJlciA9IHV0aWxzLnBhcnNlRGF0ZShzZXJpYWxfbnVtYmVyKTtcbiAgaWYgKHNlcmlhbF9udW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBzZXJpYWxfbnVtYmVyO1xuICB9XG4gIGlmIChyZXR1cm5fdHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuX3R5cGUgPSAxO1xuICB9XG4gIGxldCBkYXkgPSBzZXJpYWxfbnVtYmVyLmdldERheSgpO1xuICByZXR1cm4gV0VFS19UWVBFU1tyZXR1cm5fdHlwZV1bZGF5XTtcbn07XG5cbmV4cG9ydHMuV0VFS05VTSA9IGZ1bmN0aW9uKHNlcmlhbF9udW1iZXIsIHJldHVybl90eXBlKSB7XG4gIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XG4gIGlmIChzZXJpYWxfbnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcbiAgfVxuICBpZiAocmV0dXJuX3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybl90eXBlID0gMTtcbiAgfVxuICBpZiAocmV0dXJuX3R5cGUgPT09IDIxKSB7XG4gICAgcmV0dXJuIHRoaXMuSVNPV0VFS05VTShzZXJpYWxfbnVtYmVyKTtcbiAgfVxuICBsZXQgd2Vla19zdGFydCA9IFdFRUtfU1RBUlRTW3JldHVybl90eXBlXTtcbiAgbGV0IGphbiA9IG5ldyBDZWxsVkRhdGVUaW1lKHNlcmlhbF9udW1iZXIuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gIGxldCBpbmMgPSBqYW4uZ2V0RGF5KCkgPCB3ZWVrX3N0YXJ0ID8gMSA6IDA7XG4gIGphbiAtPSBNYXRoLmFicyhqYW4uZ2V0RGF5KCkgLSB3ZWVrX3N0YXJ0KSAqIGNmLk1TX1BFUl9EQVk7XG4gIHJldHVybiBNYXRoLmZsb29yKCgoc2VyaWFsX251bWJlciAtIGphbikgLyBjZi5NU19QRVJfREFZKSAvIDcgKyAxKSArIGluYztcbn07XG5cbmV4cG9ydHMuV09SS0RBWSA9IGZ1bmN0aW9uIChzdGFydF9kYXRlLCBkYXlzLCBob2xpZGF5cykge1xuICBpZiAoaG9saWRheXMgIT09IHVuZGVmaW5lZCl7XG4gICAgaG9saWRheXMgPSB1dGlscy5mbGF0dGVuKGhvbGlkYXlzKVxuICB9XG4gIGxldCBGb3JtdWxhcyA9IHdpbmRvdy5qc1NwcmVhZHNoZWV0LkFsbEZvcm11bGFzO1xuICByZXR1cm4gRm9ybXVsYXMuV09SS0RBWShzdGFydF9kYXRlLCBkYXlzLCBob2xpZGF5cyk7XG59O1xuZXhwb3J0cy5XT1JLREFZSU5UTCA9IGZ1bmN0aW9uIChzdGFydF9kYXRlLCBkYXlzLCB3ZWVrZW5kLCBob2xpZGF5cykge1xuICAvLyBsZXQgRm9ybXVsYXMgPSB3aW5kb3cuanNTcHJlYWRzaGVldC5BbGxGb3JtdWxhcztcbiAgLy8gcmV0dXJuIEZvcm11bGFzLldPUktEQVkkSU5UTChzdGFydF9kYXRlLCBkYXlzLCB3ZWVrZW5kLCBob2xpZGF5cyk7XG4gIHN0YXJ0X2RhdGUgPSB1dGlscy5wYXJzZURhdGUoc3RhcnRfZGF0ZSk7XG4gIGlmIChzdGFydF9kYXRlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gc3RhcnRfZGF0ZTtcbiAgfVxuICBpZiAod2Vla2VuZCA9PSAwKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbiAgZGF5cyA9IHV0aWxzLnBhcnNlTnVtYmVyKGRheXMpO1xuICBpZiAoZGF5cyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGRheXM7XG4gIH1cbiAgaWYgKGRheXMgPCAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAod2Vla2VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgd2Vla2VuZCA9IFdFRUtFTkRfVFlQRVNbMV07XG4gIH0gZWxzZSB7XG4gICAgd2Vla2VuZCA9IFdFRUtFTkRfVFlQRVNbd2Vla2VuZF07XG4gIH1cbiAgaWYgKCEod2Vla2VuZCBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoaG9saWRheXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGhvbGlkYXlzID0gW107XG4gIH0gZWxzZSBpZiAoIShob2xpZGF5cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIGhvbGlkYXlzID0gW2hvbGlkYXlzXTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvbGlkYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGggPSB1dGlscy5wYXJzZURhdGUoaG9saWRheXNbaV0pO1xuICAgIGlmIChoIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBoO1xuICAgIH1cbiAgICBob2xpZGF5c1tpXSA9IGg7XG4gIH1cbiAgbGV0IGQgPSAwO1xuICB3aGlsZSAoZCA8IGRheXMpIHtcbiAgICBzdGFydF9kYXRlLnNldERhdGUoc3RhcnRfZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICBsZXQgZGF5ID0gc3RhcnRfZGF0ZS5nZXREYXkoKTtcbiAgICBpZiAoZGF5ID09PSB3ZWVrZW5kWzBdIHx8IGRheSA9PT0gd2Vla2VuZFsxXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaG9saWRheXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCBob2xpZGF5ID0gaG9saWRheXNbal07XG4gICAgICBpZiAoaG9saWRheS5nZXREYXRlKCkgPT09IHN0YXJ0X2RhdGUuZ2V0RGF0ZSgpICYmXG4gICAgICAgIGhvbGlkYXkuZ2V0TW9udGgoKSA9PT0gc3RhcnRfZGF0ZS5nZXRNb250aCgpICYmXG4gICAgICAgIGhvbGlkYXkuZ2V0RnVsbFllYXIoKSA9PT0gc3RhcnRfZGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgIGQtLTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGQrKztcbiAgfVxuICBsZXQgeWVhciA9IHN0YXJ0X2RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgbGV0IG1vbnRoID0gc3RhcnRfZGF0ZS5nZXRNb250aCgpO1xuICBsZXQgZGF5ID0gc3RhcnRfZGF0ZS5nZXREYXkoKTtcbiAgcmV0dXJuIHllYXIrICcvJyArIG1vbnRoICsgJy8nICsgZGF5O1xufTtcblxuZXhwb3J0cy5ZRUFSID0gZnVuY3Rpb24oc2VyaWFsX251bWJlcikge1xuICBzZXJpYWxfbnVtYmVyID0gdXRpbHMucGFyc2VEYXRlKHNlcmlhbF9udW1iZXIpO1xuICBpZiAoc2VyaWFsX251bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIHNlcmlhbF9udW1iZXI7XG4gIH1cbiAgcmV0dXJuIHNlcmlhbF9udW1iZXIuZ2V0RnVsbFllYXIoKTtcbn07XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4gbmV3IENlbGxWRGF0ZVRpbWUoeWVhciwgMSwgMjkpLmdldE1vbnRoKCkgPT09IDE7XG59XG5cbi8vIFRPRE8gOiBVc2UgREFZUyA/XG5mdW5jdGlvbiBkYXlzQmV0d2VlbihzdGFydF9kYXRlLCBlbmRfZGF0ZSkge1xuICByZXR1cm4gTWF0aC5jZWlsKChlbmRfZGF0ZSAtIHN0YXJ0X2RhdGUpIC8gY2YuTVNfUEVSX0RBWSk7XG59XG5cbmV4cG9ydHMuWUVBUkZSQUMgPSBmdW5jdGlvbihzdGFydF9kYXRlLCBlbmRfZGF0ZSwgYmFzaXMpIHtcbiAgc3RhcnRfZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShzdGFydF9kYXRlKTtcbiAgaWYgKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBzdGFydF9kYXRlO1xuICB9XG4gIGVuZF9kYXRlID0gdXRpbHMucGFyc2VEYXRlKGVuZF9kYXRlKTtcbiAgaWYgKGVuZF9kYXRlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gZW5kX2RhdGU7XG4gIH1cblxuICBiYXNpcyA9IGJhc2lzIHx8IDA7XG4gIGxldCBzZCA9IHN0YXJ0X2RhdGUuZ2V0RGF0ZSgpO1xuICBsZXQgc20gPSBzdGFydF9kYXRlLmdldE1vbnRoKCkgKyAxO1xuICBsZXQgc3kgPSBzdGFydF9kYXRlLmdldEZ1bGxZZWFyKCk7XG4gIGxldCBlZCA9IGVuZF9kYXRlLmdldERhdGUoKTtcbiAgbGV0IGVtID0gZW5kX2RhdGUuZ2V0TW9udGgoKSArIDE7XG4gIGxldCBleSA9IGVuZF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgc3dpdGNoIChiYXNpcykge1xuICAgIGNhc2UgMDpcbiAgICAgIC8vIFVTIChOQVNEKSAzMC8zNjBcbiAgICAgIGlmIChzZCA9PT0gMzEgJiYgZWQgPT09IDMxKSB7XG4gICAgICAgIHNkID0gMzA7XG4gICAgICAgIGVkID0gMzA7XG4gICAgICB9IGVsc2UgaWYgKHNkID09PSAzMSkge1xuICAgICAgICBzZCA9IDMwO1xuICAgICAgfSBlbHNlIGlmIChzZCA9PT0gMzAgJiYgZWQgPT09IDMxKSB7XG4gICAgICAgIGVkID0gMzA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKChlZCArIGVtICogMzAgKyBleSAqIDM2MCkgLSAoc2QgKyBzbSAqIDMwICsgc3kgKiAzNjApKSAvIDM2MDtcbiAgICBjYXNlIDE6XG4gICAgICAvLyBBY3R1YWwvYWN0dWFsXG4gICAgICBsZXQgZmViMjlCZXR3ZWVuID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgICAgIGxldCB5ZWFyMSA9IGRhdGUxLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIGxldCBtYXIxeWVhcjEgPSBuZXcgQ2VsbFZEYXRlVGltZSh5ZWFyMSwgMiwgMSk7XG4gICAgICAgIGlmIChpc0xlYXBZZWFyKHllYXIxKSAmJiBkYXRlMSA8IG1hcjF5ZWFyMSAmJiBkYXRlMiA+PSBtYXIxeWVhcjEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeWVhcjIgPSBkYXRlMi5nZXRGdWxsWWVhcigpO1xuICAgICAgICBsZXQgbWFyMXllYXIyID0gbmV3IENlbGxWRGF0ZVRpbWUoeWVhcjIsIDIsIDEpO1xuICAgICAgICByZXR1cm4gKGlzTGVhcFllYXIoeWVhcjIpICYmIGRhdGUyID49IG1hcjF5ZWFyMiAmJiBkYXRlMSA8IG1hcjF5ZWFyMik7XG4gICAgICB9O1xuICAgICAgbGV0IHlsZW5ndGggPSAzNjU7XG4gICAgICBpZiAoc3kgPT09IGV5IHx8ICgoc3kgKyAxKSA9PT0gZXkpICYmICgoc20gPiBlbSkgfHwgKChzbSA9PT0gZW0pICYmIChzZCA+PSBlZCkpKSkge1xuICAgICAgICBpZiAoKHN5ID09PSBleSAmJiBpc0xlYXBZZWFyKHN5KSkgfHxcbiAgICAgICAgICAgIGZlYjI5QmV0d2VlbihzdGFydF9kYXRlLCBlbmRfZGF0ZSkgfHxcbiAgICAgICAgICAgIChlbSA9PT0gMSAmJiBlZCA9PT0gMjkpKSB7XG4gICAgICAgICAgeWxlbmd0aCA9IDM2NjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF5c0JldHdlZW4oc3RhcnRfZGF0ZSwgZW5kX2RhdGUpIC8geWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxldCB5ZWFycyA9IChleSAtIHN5KSArIDE7XG4gICAgICBsZXQgZGF5cyA9IChuZXcgQ2VsbFZEYXRlVGltZShleSArIDEsIDAsIDEpIC0gbmV3IENlbGxWRGF0ZVRpbWUoc3ksIDAsIDEpKSAvIGNmLk1TX1BFUl9EQVk7XG4gICAgICBsZXQgYXZlcmFnZSA9IGRheXMgLyB5ZWFycztcbiAgICAgIHJldHVybiBkYXlzQmV0d2VlbihzdGFydF9kYXRlLCBlbmRfZGF0ZSkgLyBhdmVyYWdlO1xuICAgIGNhc2UgMjpcbiAgICAgIC8vIEFjdHVhbC8zNjBcbiAgICAgIHJldHVybiBkYXlzQmV0d2VlbihzdGFydF9kYXRlLCBlbmRfZGF0ZSkgLyAzNjA7XG4gICAgY2FzZSAzOlxuICAgICAgLy8gQWN0dWFsLzM2NVxuICAgICAgcmV0dXJuIGRheXNCZXR3ZWVuKHN0YXJ0X2RhdGUsIGVuZF9kYXRlKSAvIDM2NTtcbiAgICBjYXNlIDQ6XG4gICAgICAvLyBFdXJvcGVhbiAzMC8zNjBcbiAgICAgIHJldHVybiAoKGVkICsgZW0gKiAzMCArIGV5ICogMzYwKSAtIChzZCArIHNtICogMzAgKyBzeSAqIDM2MCkpIC8gMzYwO1xuICB9XG59O1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtjb2xfc3RyXzJfaW50fSBmcm9tICcuLi8uLi9oZWxwZXIvY2FsY19oZWxwZXIuanMnXG5pbXBvcnQge2dldFNhbml0aXplZFNoZWV0TmFtZX0gZnJvbSAnLi4vY2FsY191dGlscy9nZXRfc2hlZXRuYW1lLmpzJ1xuaW1wb3J0IHtFUlJPUl9DSVJDVUxBUn0gZnJvbSAnLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcuanMnXG5pbXBvcnQgeyBpbnRfMl9jb2xfc3RyIH0gZnJvbSAnLi4vLi4vaGVscGVyL2NhbGNfaGVscGVyJztcbmltcG9ydCB7IEZPUk1VTEFfU1RBVFVTIH0gZnJvbSAnLi4vY2FsY191dGlscy9jb25maWcnO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7Q2FsY0NlbGx9IGNhbGNDZWxsXG4gKiBAcHJvcGVydHkge0NhbGNTaGVldH0gY2FsY1NoZWV0XG4gKi9cbmV4cG9ydCBjbGFzcyBSYW5nZXtcbiAgICBjb25zdHJ1Y3RvcihzdHJfZXhwcmVzc2lvbiwgY2FsY0NlbGwsIHBvc2l0aW9uX2kpe1xuICAgICAgICBsZXQgcmFuZ2VfZXhwcmVzc2lvbiwgc2hlZXRfbmFtZSwgc2hlZXQ7XG4gICAgICAgIHRoaXMuY2FsY0NlbGwgPSBjYWxjQ2VsbFxuICAgICAgICB0aGlzLnN0YXJ0X3BzdCA9IHBvc2l0aW9uX2kgLSBzdHJfZXhwcmVzc2lvbi5sZW5ndGg7XG4gICAgICAgIHRoaXMuZW5kX3BzdCA9IHBvc2l0aW9uX2k7XG5cbiAgICAgICAgaWYgKHN0cl9leHByZXNzaW9uLmluZGV4T2YoJyEnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBhdXggPSBzdHJfZXhwcmVzc2lvbi5zcGxpdCgnIScpO1xuICAgICAgICAgICAgc2hlZXRfbmFtZSA9IGdldFNhbml0aXplZFNoZWV0TmFtZShhdXhbMF0pO1xuICAgICAgICAgICAgcmFuZ2VfZXhwcmVzc2lvbiA9IGF1eFsxXTtcbiAgICAgICAgICAgIHRoaXMucmFuZ2Vfc3RhcnRfcHN0ID0gcG9zaXRpb25faSAtIGF1eFsxXS5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNoZWV0X25hbWUgPSB0aGlzLmNhbGNDZWxsLmNhbGNTaGVldC5uYW1lO1xuICAgICAgICAgICAgcmFuZ2VfZXhwcmVzc2lvbiA9IHN0cl9leHByZXNzaW9uO1xuICAgICAgICAgICAgdGhpcy5yYW5nZV9zdGFydF9wc3QgPSB0aGlzLnN0YXJ0X3BzdFxuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxjU2hlZXQgPSB0aGlzLmNhbGNDZWxsLndvcmtib29rUHJveHkuZ2V0U2hlZXRCeU5hbWUoc2hlZXRfbmFtZSk7XG4gICAgICAgIHRoaXMucmFuZ2VfZXhwcmVzc2lvbiA9IHJhbmdlX2V4cHJlc3Npb247XG4gICAgICAgIHRoaXMuc2hlZXRfbmFtZSA9IHNoZWV0X25hbWU7IC8vIOaJgOWxnueahHNoZWV0XG4gICAgfVxuICAgIHNvbHZlRXhwcmVzc2lvbigpe1xuICAgICAgICBsZXQgc2hlZXRfbmFtZSA9IHRoaXMuc2hlZXRfbmFtZTtcbiAgICAgICAgbGV0IHJhbmdlX2V4cHJlc3Npb24gPSB0aGlzLnJhbmdlX2V4cHJlc3Npb247XG4gICAgICAgIGxldCBhcnIgPSByYW5nZV9leHByZXNzaW9uLnNwbGl0KCc6Jyk7XG4gICAgICAgIGxldCBtaW5fcm93ID0gcGFyc2VJbnQoYXJyWzBdLnJlcGxhY2UoL15bQS1aXSsvLCAnJyksIDEwKSB8fCAwO1xuICAgICAgICBsZXQgc3RyX21heF9yb3cgPSBhcnJbMV0ucmVwbGFjZSgvXltBLVpdKy8sICcnKTtcbiAgICAgICAgbGV0IG1heF9yb3c7XG4gICAgICAgIC8vIHRoZSBtYXggaXMgMTA0ODU3NiwgYnV0IFRMRVxuICAgICAgICBtYXhfcm93ID0gcGFyc2VJbnQoc3RyX21heF9yb3cgPT09ICcnID8gJzUwMDAwMCcgOiBzdHJfbWF4X3JvdywgMTApO1xuICAgICAgICBsZXQgbWluX2NvbCA9IGNvbF9zdHJfMl9pbnQoYXJyWzBdKTtcbiAgICAgICAgbGV0IG1heF9jb2wgPSBjb2xfc3RyXzJfaW50KGFyclsxXSk7XG4gICAgICAgIGxldCBtYXRyaXggPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IG1pbl9yb3c7IGkgPD0gbWF4X3JvdzsgaSsrKSB7IC8vIOi/memHjOeahGnmmK9yb3cgaW5kZXjvvIwgaiDmmK9jb2wgaW5kZXhcbiAgICAgICAgICAgIGxldCByb3cgPSBbXTtcbiAgICAgICAgICAgIG1hdHJpeC5wdXNoKHJvdyk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gbWluX2NvbDsgaiA8PSBtYXhfY29sOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbF9uYW1lID0gaW50XzJfY29sX3N0cihqKSArIGk7XG4gICAgICAgICAgICAgICAgbGV0IHJlZkNhbGNDZWxsID0gdGhpcy5jYWxjQ2VsbC53b3JrYm9va1Byb3h5LmdldENlbGxCeU5hbWUoc2hlZXRfbmFtZSwgY2VsbF9uYW1lKVxuICAgICAgICAgICAgICAgIGlmIChyZWZDYWxjQ2VsbCkgeyAvLyDkuYvliY3lsLHlt7Lnu4/lrZjlnKjov5nkuKpjZWxs5LqGXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWZDYWxjQ2VsbC5jZWxsU3RhdHVzID09PSBGT1JNVUxBX1NUQVRVUy5jcmVhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZDYWxjQ2VsbC5leGVjRm9ybXVsYSgpOyAvLyDov5nkuIDmraXlh7rplJlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWZDYWxjQ2VsbC5jZWxsU3RhdHVzID09PSBGT1JNVUxBX1NUQVRVUy53b3JraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfQ0lSQ1VMQVIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWZDYWxjQ2VsbC5jZWxsT2JqLnQgPT09ICdlJykgeyAvLyDlh7rnjrDplJnor69cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKHJlZkNhbGNDZWxsLmNlbGxPYmopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93LnB1c2gocmVmQ2FsY0NlbGwuY2VsbE9iai52KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG5cbiAgICB9XG5cbn1cblxuIiwiaW1wb3J0IHtjbG9uZURlZXAsIHJhbmdlU3VtfSBmcm9tIFwiLi4vaGVscGVyL2RhdGFwcm94eV9oZWxwZXJcIjtcbmltcG9ydCB7aXNIYXZlfSBmcm9tICcuLi9oZWxwZXIvY2hlY2tfdmFsdWUnO1xuaW1wb3J0IHt4eTJleHByfSBmcm9tICcuLi91dGlscy9hbHBoYWJldCc7XG5pbXBvcnQge2NoYW5nZUZvcm11bGEsIGN1dFN0ciwgaXNBYnNvbHV0ZVZhbHVlLCB2YWx1ZTJhYnNvbHV0ZX0gZnJvbSBcIi4uL2NvcmUvb3BlcmF0b3JcIjtcbmltcG9ydCB7ZXhwcjJ4eX0gZnJvbSBcIi4uL3V0aWxzL2FscGhhYmV0XCI7XG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnXG5pbXBvcnQge2RlZXBDb3B5LCBkaXN0aW5jdCwgaXNTaGVldFZhbGUsIHNwbGl0U3RyfSBmcm9tIFwiLi9vcGVyYXRvclwiO1xuaW1wb3J0IFJlY2FzdCBmcm9tIFwiLi9yZWNhc3RcIjtcbmltcG9ydCBQYXN0ZVByb3h5IGZyb20gXCIuL3Bhc3RlX3Byb3h5XCI7XG5pbXBvcnQgQ2VsbFByb3h5IGZyb20gXCIuL2NlbGxfcHJveHlcIjtcbmltcG9ydCBDZWxsUmFuZ2UgZnJvbSBcIi4vY2VsbF9yYW5nZVwiO1xuaW1wb3J0IENlbGxQcm9wIGZyb20gXCIuLi9tb2RlbC9jZWxsX3Byb3BcIjtcbmltcG9ydCBDZWxsIGZyb20gXCIuLi9tb2RlbC9jZWxsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zvcm11bGEodGV4dCkge1xuICAgIC8vIGlmICh0ZXh0ICYmIHRleHRbMF0gPT09IFwiPVwiKSB7XG4gICAgLy8gICAgIHJldHVybiB0cnVlO1xuICAgIC8vIH1cblxuICAgIHJldHVybiB0ZXh0ICYmIHRleHRbMF0gPT09IFwiPVwiO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KHRleHQsIGZvcm11bGFzLCBmb3JtYXRUZXh0KSB7XG4gICAgaWYoaXNIYXZlKHRleHQpICYmIHRleHQgIT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmKGlzSGF2ZShmb3JtdWxhcykgJiYgZm9ybXVsYXMgIT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGlmKGlzSGF2ZShmb3JtYXRUZXh0KSkge1xuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gfVxuXG4gICAgcmV0dXJuICFpc0hhdmUoZm9ybWF0VGV4dCk7XG59XG5cbmZ1bmN0aW9uIG90aGVyQXV0b0ZpbHRlcihkLCBkYXJyLCBkaXJlY3Rpb24sIGlzQWRkLCB3aGF0LCBjYiwgb3RoZXIsIGRyaSkge1xuICAgIC8vIG90aGVyIOS4uiAnPWFzZCfmiJbogIUnYXNkJ+S5n+S4umZhbHNlXG4gICAgbGV0IG5jZWxsID0gdGhpcy5nZXRDZWxsQnlUb3BDZWxsKGQsIGRpcmVjdGlvbiwgaXNBZGQsICdvdGhlcicsIGRyaSwgMCk7XG5cbiAgICBsZXQge3RleHQsIGZvcm11bGFzfSA9IG5jZWxsO1xuICAgIGxldCBpVGV4dCA9IGZvcm11bGFzICE9PSBcIlwiID8gZm9ybXVsYXMgOiB0ZXh0O1xuXG4gICAgLy8gaWYgKG90aGVyKSB7XG4gICAgLy8gICAgIHRoaXMuY29weVJlbmRlcihkYXJyLCBkLnJpLCBkLmNpLCBuY2VsbCwgd2hhdCwgY2IpO1xuICAgIC8vIH0gZWxzZVxuICAgIGlmICh0aGlzLmlzRm9ybXVsYShpVGV4dCkpIHtcbiAgICAgICAgdGhpcy5jYWxjRm9ybXVsYUNlbGxCeVRvcENlbGwoaVRleHQsIGRhcnIsIGQsIGRpcmVjdGlvbiwgaXNBZGQsIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyDkuLogJz1hc2Qn5oiW6ICFJ2FzZCcg6L+b6L+Z6YeMXG4gICAgICAgIHRoaXMuY2FsY0NlbGxCeVRvcENlbGwoY2IsIHdoYXQsIG5jZWxsLCBkYXJyLCBpc0FkZCwgaVRleHQsIGQsIHRleHQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbnVtYmVyQXV0b0ZpbHRlcihkLCBkYXJyLCBkaXJlY3Rpb24sIGlzQWRkLCBkaWZmVmFsdWUsIHdoYXQsIGNiLCBpc051bWJlcikge1xuICAgIGxldCBuY2VsbCA9IFwiXCI7XG5cbiAgICBpZiAoaXNBZGQpIHtcbiAgICAgICAgZGlmZlZhbHVlID0gTWF0aC5hYnMoZGlmZlZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaWZmVmFsdWUgPSBkaWZmVmFsdWUgKiAtMTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTnVtYmVyKSB7XG4gICAgICAgIG5jZWxsID0ge1xuICAgICAgICAgICAgXCJ0ZXh0XCI6IGQudixcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogZC52LFxuICAgICAgICB9O1xuICAgICAgICBkaWZmVmFsdWUgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5jZWxsID0gdGhpcy5nZXRDZWxsQnlUb3BDZWxsKGQsIGRpcmVjdGlvbiwgaXNBZGQpO1xuICAgIH1cblxuICAgIHRoaXMuY2FsY051bWJlckNlbGxCeVRvcENlbGwobmNlbGwsIGRpZmZWYWx1ZSwgZGFyciwgZCwgd2hhdCwgY2IpO1xufVxuXG5mdW5jdGlvbiBkYXRlQXV0b0ZpbHRlcihkLCBsaW5lLCBpc0Rvd24sIGRhcnIsIHdoYXQsIGNiLCBpc0RhdGUpIHtcbiAgICBsZXQgZGlyZWN0aW9uID0gbGluZTtcbiAgICBsZXQgbmNlbGwgPSBcIlwiO1xuICAgIGxldCBkaWZmID0gaXNEb3duID8gMSA6IC0xO1xuICAgIGlmICghaXNEYXRlKSB7XG4gICAgICAgIG5jZWxsID0ge1xuICAgICAgICAgICAgXCJ0ZXh0XCI6IGQudixcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogZC52LFxuICAgICAgICB9O1xuICAgICAgICBkaWZmID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuY2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5VG9wQ2VsbChkLCBkaXJlY3Rpb24sIGlzRG93biwgJ2RhdGUnKTtcbiAgICB9XG4gICAgdGhpcy5jYWxjRGF0ZUNlbGxCeVRvcENlbGwobmNlbGwsIGRhcnIsIGQsIGlzRG93biwgd2hhdCwgY2IsIGRpZmYpO1xufVxuXG5jbGFzcyBSb3dzIHtcbiAgICBjb25zdHJ1Y3Rvcih7bGVuLCBoZWlnaHR9LCBkYXRhID0gXCJcIikge1xuICAgICAgICB0aGlzLl8gPSB7fTtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgICAgIC8vIGRlZmF1bHQgcm93IGhlaWdodFxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wYXN0ZVByb3h5ID0gbmV3IFBhc3RlUHJveHkoKTtcbiAgICAgICAgdGhpcy53b3JrYm9vayA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0SGVpZ2h0KHJpKSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuZ2V0KHJpKTtcbiAgICAgICAgaWYgKHJvdyAmJiByb3cuaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gcm93LmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgc2V0SGVpZ2h0KHJpLCB2KSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuZ2V0T3JOZXcocmkpO1xuICAgICAgICByb3cuaGVpZ2h0ID0gdjtcbiAgICB9XG5cbiAgICBzZXRTdHlsZShyaSwgc3R5bGUpIHtcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXRPck5ldyhyaSk7XG4gICAgICAgIHJvdy5zdHlsZSA9IHN0eWxlO1xuICAgIH1cblxuICAgIHN1bUhlaWdodChtaW4sIG1heCwgZXhjZXB0U2V0KSB7XG4gICAgICAgIHJldHVybiByYW5nZVN1bShtaW4sIG1heCwgKGkpID0+IHtcbiAgICAgICAgICAgIGlmIChleGNlcHRTZXQgJiYgZXhjZXB0U2V0LmhhcyhpKSkgcmV0dXJuIDA7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRIZWlnaHQoaSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvdGFsSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdW1IZWlnaHQoMCwgdGhpcy5sZW4pO1xuICAgIH1cblxuICAgIGdldChyaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fW3JpXTtcbiAgICB9XG5cbiAgICBnZXRPck5ldyhyaSkge1xuICAgICAgICB0aGlzLl9bcmldID0gdGhpcy5fW3JpXSB8fCB7Y2VsbHM6IHt9fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX1tyaV07XG4gICAgfVxuXG4gICAgZ2V0Q2VsbChyaSwgY2kpIHtcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXQocmkpO1xuICAgICAgICBpZiAocm93ICE9PSB1bmRlZmluZWQgJiYgcm93LmNlbGxzICE9PSB1bmRlZmluZWQgJiYgcm93LmNlbGxzW2NpXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAmJiAoaXNIYXZlKHJvdy5jZWxsc1tjaV0udGV4dCkgfHwgaXNIYXZlKHJvdy5jZWxsc1tjaV0uZm9ybXVsYXMpIHx8IGlzSGF2ZShyb3cuY2VsbHNbY2ldLnN0eWxlIHx8IHR5cGVvZiByb3cuY2VsbHNbY2ldID09PSAnb2JqZWN0JykpKSB7XG4gICAgICAgICAgICByZXR1cm4gcm93LmNlbGxzW2NpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRDZWxsTWVyZ2UocmksIGNpKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5tZXJnZSkgcmV0dXJuIGNlbGwubWVyZ2U7XG4gICAgICAgIHJldHVybiBbMCwgMF07XG4gICAgfVxuXG4gICAgZ2V0Q2VsbE9yTmV3KHJpLCBjaSkge1xuICAgICAgICBjb25zdCByb3cgPSB0aGlzLmdldE9yTmV3KHJpKTtcbiAgICAgICAgcm93LmNlbGxzW2NpXSA9IHJvdy5jZWxsc1tjaV0gfHwge307XG4gICAgICAgIHJldHVybiByb3cuY2VsbHNbY2ldO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKHRleHQpIHtcbiAgICAgICAgaWYgKGlzSGF2ZSh0ZXh0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRleHQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0ICsgXCJcIjtcbiAgICB9XG5cbiAgICBpc0JhY2tFbmRGdW5jKHRleHQpIHtcbiAgICAgICAgLy8gaWYgKHRleHQuaW5kZXhPZihcIk1ELlJURFwiKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgcmV0dXJuIHRleHQuaW5kZXhPZihcIk1ELlJURFwiKSAhPT0gLTE7XG4gICAgfVxuXG4gICAgaXNSZWZlck90aGVyU2hlZXQoY2VsbCwgc3RhdGUgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gY2VsbC5mb3JtdWxhcyAmJiBjZWxsLmZvcm11bGFzWzBdID09PSBcIj1cIiAmJiAoc3RhdGUgfHwgaXNTaGVldFZhbGUoY2VsbC5mb3JtdWxhcykpO1xuICAgIH1cblxuICAgIGlzRW1wdHkoY2VsbCkge1xuICAgICAgICByZXR1cm4gY2VsbCAmJiAoY2VsbC50ZXh0IHx8IGNlbGwuZm9ybXVsYXMgfHwgY2VsbC5kZXBlbmQpO1xuICAgIH1cblxuICAgIGlzRm9ybXVsYSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBpc0Zvcm11bGEodGV4dCk7XG4gICAgfVxuXG4gICAgc2V0VmFsdWUodHlwZSwgdmFsdWUsIGNlbGwpIHtcbiAgICAgICAgY2VsbFt0eXBlXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIHdoYXQ6IGFsbCB8IHRleHQgfCBmb3JtYXRcbiAgICBzZXRDZWxsKHJpLCBjaSwgY2VsbCwgd2hhdCA9ICdhbGwnKSB7XG4gICAgICAgIGxldCB7ZGF0YX0gPSB0aGlzO1xuICAgICAgICBjb25zdCByb3cgPSB0aGlzLmdldE9yTmV3KHJpKTtcbiAgICAgICAgbGV0IF9jZWxsID0gbmV3IENlbGwoKTtcbiAgICAgICAgX2NlbGwuc2V0Q2VsbChjZWxsKTtcbiAgICAgICAgaWYgKHdoYXQgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldID0gX2NlbGw7XG4gICAgICAgIH0gZWxzZSBpZih3aGF0ID09PSAnZm9ybXVsYXMnKSB7XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldID0gcm93LmNlbGxzW2NpXSB8fCB7fTtcbiAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0uZm9ybXVsYXMgPSBfY2VsbC5mb3JtdWxhcztcbiAgICAgICAgfSBlbHNlIGlmICh3aGF0ID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0gPSByb3cuY2VsbHNbY2ldIHx8IHt9O1xuICAgICAgICAgICAgcm93LmNlbGxzW2NpXS50ZXh0ID0gX2NlbGwudGV4dDtcbiAgICAgICAgfSBlbHNlIGlmICh3aGF0ID09PSAnZm9ybWF0Jykge1xuICAgICAgICAgICAgcm93LmNlbGxzW2NpXSA9IHJvdy5jZWxsc1tjaV0gfHwge307XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldLnN0eWxlID0gX2NlbGwuc3R5bGU7XG4gICAgICAgICAgICBpZiAoY2VsbC5tZXJnZSkgcm93LmNlbGxzW2NpXS5tZXJnZSA9IF9jZWxsLm1lcmdlO1xuICAgICAgICB9IGVsc2UgaWYgKHdoYXQgPT09ICdkYXRlJyB8fCB3aGF0ID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAvLyByb3cuY2VsbHNbY2ldID0ge307XG4gICAgICAgICAgICBpZiAoIWlzSGF2ZShyb3cuY2VsbHNbY2ldKSkge1xuICAgICAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0gPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRm9ybXVsYShjZWxsLmZvcm11bGFzKSkge1xuICAgICAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0uZm9ybXVsYXMgPSBfY2VsbC50ZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByb3cuY2VsbHNbY2ldLmZvcm11bGFzID0gX2NlbGwuZm9ybXVsYXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldLnRleHQgPSBfY2VsbC50ZXh0O1xuICAgICAgICAgICAgcm93LmNlbGxzW2NpXS5zdHlsZSA9IF9jZWxsLnN0eWxlO1xuICAgICAgICAgICAgcm93LmNlbGxzW2NpXS50b19jYWxjX251bSA9IF9jZWxsLnRvX2NhbGNfbnVtO1xuICAgICAgICB9IGVsc2UgaWYgKHdoYXQgPT09ICdub3JtYWwnIHx8IHdoYXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoIWlzSGF2ZShyb3cuY2VsbHNbY2ldKSkge1xuICAgICAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0gPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRm9ybXVsYShjZWxsLmZvcm11bGFzKSkge1xuICAgICAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0uZm9ybXVsYXMgPSBfY2VsbC50ZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByb3cuY2VsbHNbY2ldLmZvcm11bGFzID0gX2NlbGwuZm9ybXVsYXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByb3cuY2VsbHNbY2ldLnZhbHVlID0gY2VsbC52YWx1ZTtcbiAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0udGV4dCA9IF9jZWxsLnRleHQ7XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldLnN0eWxlID0gX2NlbGwuc3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAod2hhdCA9PT0gJ3JtYicgfHwgd2hhdCA9PT0gJ3BlcmNlbnQnKSB7ICAgICAgICAvLyBybWIg5Y2V54us5ou/5Ye65p2l5piv5Zug5Li6IHRleHTmmK/vv6UxMjMsIOiAjGZvcm1hbHVz5LiN6IO95pivIO+/pTEyMyzlupTor6XmmK8xMjNcbiAgICAgICAgICAgIGlmICghaXNIYXZlKHJvdy5jZWxsc1tjaV0pKSB7XG4gICAgICAgICAgICAgICAgcm93LmNlbGxzW2NpXSA9IHt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0udGV4dCA9IF9jZWxsLnRleHQ7XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldLmZvcm11bGFzID0gX2NlbGwuZm9ybXVsYXM7XG4gICAgICAgICAgICByb3cuY2VsbHNbY2ldLnN0eWxlID0gX2NlbGwuc3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAod2hhdCA9PT0gJ2FsbF93aXRoX25vX3dvcmtib29rJykge1xuICAgICAgICAgICAgcm93LmNlbGxzW2NpXSA9IF9jZWxsO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAod2hhdCA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgaWYgKCFpc0hhdmUocm93LmNlbGxzW2NpXSkpIHtcbiAgICAgICAgICAgICAgICByb3cuY2VsbHNbY2ldID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJvdy5jZWxsc1tjaV0uc3R5bGUgPSBfY2VsbC5zdHlsZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjZWxsXG4gICAgICAgIHRoaXMuZ2V0RGVwZW5kQ2VsbCh4eTJleHByKGNpLCByaSksIHRoaXMuZ2V0Q2VsbChyaSwgY2kpKTtcbiAgICAgICAgX2NlbGwuc2V0Rm9ybWF0VGV4dChkYXRhLnRyeVBhcnNlVG9OdW0oX2NlbGwsIHJpLCBjaSkpO1xuICAgIH1cblxuICAgIGdldERlcGVuZENlbGwoZXhwciwgY2VsbCkge1xuICAgICAgICBsZXQge2Zvcm11bGFzfSA9IGNlbGw7XG4gICAgICAgIGlmIChpc0hhdmUoZm9ybXVsYXMpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Zvcm11bGEoZm9ybXVsYXMpKSB7XG4gICAgICAgICAgICBsZXQgYXJyID0gY3V0U3RyKGZvcm11bGFzLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMubWVyZ2VDZWxsRXhwcihhcnJbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKC4uLmFyZ3MubWVyZ2VBcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyciA9IGRpc3RpbmN0KGFycik7XG5cbiAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbC5kZXBlbmQpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNlbGwuZGVwZW5kID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByZWYgPSBhcnJbaV07XG4gICAgICAgICAgICAgICAgbGV0IFtjaSwgcmldID0gZXhwcjJ4eShyZWYpO1xuICAgICAgICAgICAgICAgIGxldCByZWZDZWxsID0gdGhpcy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzSGF2ZShyZWZDZWxsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmQ2VsbCA9IHt9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0hhdmUocmVmQ2VsbC5kZXBlbmQpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZWZDZWxsLmRlcGVuZCA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWZDZWxsLmRlcGVuZC5wdXNoKGV4cHIpO1xuICAgICAgICAgICAgICAgIHJlZkNlbGwuZGVwZW5kID0gZGlzdGluY3QocmVmQ2VsbC5kZXBlbmQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VsbChyaSwgY2ksIHJlZkNlbGwsICdhbGxfd2l0aF9ub193b3JrYm9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWVyZ2VDZWxsRXhwcihkKSB7XG4gICAgICAgIGlmICghaXNBYnNvbHV0ZVZhbHVlKGQsIDYpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwic3RhdGVcIjogZmFsc2UsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZCA9IGQucmVwbGFjZSgvXFwkL2csICcnKTtcbiAgICAgICAgZCA9IGQuc3BsaXQoXCI6XCIpO1xuICAgICAgICBsZXQgZTEgPSBleHByMnh5KGRbMF0pO1xuICAgICAgICBsZXQgZTIgPSBleHByMnh5KGRbMV0pO1xuXG4gICAgICAgIGlmIChlMVswXSA+IGUyWzBdKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGUyWzBdO1xuICAgICAgICAgICAgZTJbMF0gPSBlMVswXTtcbiAgICAgICAgICAgIGUxWzBdID0gdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZTFbMV0gPiBlMlsxXSkge1xuICAgICAgICAgICAgbGV0IHQgPSBlMlsxXTtcbiAgICAgICAgICAgIGUyWzFdID0gZTFbMV07XG4gICAgICAgICAgICBlMVsxXSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2UoZTFbMV0sIGUxWzBdLCBlMlsxXSwgZTJbMF0pO1xuICAgICAgICBsZXQgYXJyID0gW107XG4gICAgICAgIGNlbGxSYW5nZS5lYWNoKChpLCBqKSA9PiB7XG4gICAgICAgICAgICBhcnIucHVzaCh4eTJleHByKGosIGkpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwic3RhdGVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibWVyZ2VBcnJcIjogYXJyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHVzZU9uZShwYXJhbSwgb3RoZXIsIHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICBpZiAoaXNIYXZlKHBhcmFtKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0aGlzLmlzRm9ybXVsYShwYXJhbSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgfVxuXG4gICAgLy8gd2hhdCA9PT0gY2VsbCDmiorljp/mnKznmoRjZWxsIOeahG1lcmdlIOa4heepuu+8jCDljp/lm6DmmK/kuI3muIXnqbogbWVyZ2Xov5jkvJrlrZjlnKhcbiAgICBzZXRDZWxsVGV4dChyaSwgY2ksIHt0ZXh0LCBzdHlsZSwgZm9ybXVsYXMsIG1lcmdlID0gXCJcIn0sICB3aGF0ID0gJ2FsbCcpIHtcbiAgICAgICAgaWYod2hhdCA9PT0gJ2FsbF93aXRoX25vX3dvcmtib29rJykge1xuICAgICAgICAgICAgdGhpcy5zZXRDZWxsKHJpLCBjaSwge30sICdhbGxfd2l0aF9ub193b3JrYm9vaycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuZ2V0Q2VsbE9yTmV3KHJpLCBjaSk7XG4gICAgICAgIGxldCBfY2VsbCA9IG5ldyBDZWxsKCk7XG4gICAgICAgIF9jZWxsLnNldENlbGwoY2VsbCk7XG4gICAgICAgIC8vIF9jZWxsLnNldEZvcm1hdFRleHQoZGF0YS50cnlQYXJzZVRvTnVtKF9jZWxsLCByaSwgY2kpKTtcbiAgICAgICAgaWYgKHdoYXQgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIF9jZWxsLnN0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBfY2VsbC5mb3JtdWxhcyA9IHRleHQ7ICAgLy8gICAgY2VsbC5mb3JtdWxhcyA9IGNlbGwuZm9ybXVsYXM7XG4gICAgICAgIH0gICBlbHNlIGlmICh3aGF0ID09PSAnZm9ybWF0Jykge1xuICAgICAgICAgICAgX2NlbGwuZm9ybXVsYXMgPSBjZWxsLmZvcm11bGFzO1xuICAgICAgICAgICAgX2NlbGwuc3R5bGUgPSBzdHlsZTtcbiAgICAgICAgfSBlbHNlIGlmICh3aGF0ID09PSAnY2VsbCcpIHtcbiAgICAgICAgICAgIF9jZWxsLnN0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBfY2VsbC5mb3JtdWxhcyA9IGZvcm11bGFzO1xuICAgICAgICAgICAgX2NlbGxbJ21lcmdlJ10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAobWVyZ2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBfY2VsbC5tZXJnZSA9IG1lcmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2NlbGwuZm9ybXVsYXMgPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIF9jZWxsLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLnNldENlbGwocmksIGNpLCBfY2VsbCk7XG5cbiAgICAgICAgdGhpcy5nZXREZXBlbmRDZWxsKHh5MmV4cHIoY2ksIHJpKSwgdGhpcy5nZXRDZWxsKHJpLCBjaSkpO1xuICAgIH1cblxuICAgIHNldENlbGxBbGwocmksIGNpLCB0ZXh0LCBmb3JtdWxhcyA9IFwiXCIpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuZ2V0Q2VsbE9yTmV3KHJpLCBjaSk7XG4gICAgICAgIGxldCBfY2VsbCA9IG5ldyBDZWxsKCk7XG4gICAgICAgIF9jZWxsLmZvcm11bGFzID0gZm9ybXVsYXMgPT09IFwiXCIgPyBjZWxsLmZvcm11bGFzIDogZm9ybXVsYXM7XG4gICAgICAgIF9jZWxsLnRleHQgPSB0ZXh0O1xuXG4gICAgICAgIHRoaXMuc2V0Q2VsbChyaSwgY2ksIF9jZWxsLCAnZm9ybXVsYXMnKTtcbiAgICAgICAgdGhpcy5zZXRDZWxsKHJpLCBjaSwgX2NlbGwsICd0ZXh0Jyk7XG4gICAgICAgIHRoaXMuZ2V0RGVwZW5kQ2VsbCh4eTJleHByKGNpLCByaSksIHRoaXMuZ2V0Q2VsbChyaSwgY2kpKTtcbiAgICB9XG5cbiAgICBtb3ZlQ2hhbmdlKGFyciwgYXJyMiwgYXJyMykge1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGggJiYgYXJyMy5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBsZXQgczEgPSBhcnJbaV0uZXhwcjtcbiAgICAgICAgICAgIGFycltpXS5lYWNoKChyaSwgY2kpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbChyaSwgY2kpO1xuICAgICAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc0hhdmUoY2VsbC5mb3JtdWxhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5mb3JtdWxhcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGZvcm11bGFzID0gY2hhbmdlRm9ybXVsYShjdXRTdHIoY2VsbC5mb3JtdWxhcykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZvcm11bGFzLmluZGV4T2YoczEpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2EgPSBhcnIzW2ldLmV4cHIucmVwbGFjZSgvXFwkL2csIFwiXFxcXCRcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsQWxsKHJpLCBjaSwgY2VsbC50ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChjYSwgJ2cnKSwgYXJyMltpXS5leHByKSwgY2VsbC5mb3JtdWxhcy5yZXBsYWNlKGNhLCBhcnIyW2ldLmV4cHIpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IHZhbHVlMmFic29sdXRlKHMxKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVzID0gdmFsdWUyYWJzb2x1dGUoYXJyMltpXS5leHByKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm11bGFzLmluZGV4T2Yocy5zMykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gdmFsdWUyYWJzb2x1dGUoYXJyM1tpXS5leHByKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcy5zMyA9IHMuczMucmVwbGFjZSgvXFwkL2csIFwiXFxcXCRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENlbGxBbGwocmksIGNpLCBjZWxsLnRleHQucmVwbGFjZShuZXcgUmVnRXhwKHMuczMsICdnJyksIGVzLnMzKSwgY2VsbC5mb3JtdWxhcy5yZXBsYWNlKG5ldyBSZWdFeHAocy5zMywgJ2cnKSwgZXMuczMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtdWxhcy5pbmRleE9mKHMuczIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHZhbHVlMmFic29sdXRlKGFycjNbaV0uZXhwcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnMyID0gcy5zMi5yZXBsYWNlKC9cXCQvZywgXCJcXFxcJFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VsbEFsbChyaSwgY2ksIGNlbGwudGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAocy5zMiwgJ2cnKSwgZXMuczIpLCBjZWxsLmZvcm11bGFzLnJlcGxhY2UobmV3IFJlZ0V4cChzLnMyLCAnZycpLCBlcy5zMikpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm11bGFzLmluZGV4T2Yocy5zMSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gdmFsdWUyYWJzb2x1dGUoYXJyM1tpXS5leHByKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuczEgPSBzLnMxLnJlcGxhY2UoL1xcJC9nLCBcIlxcXFwkXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENlbGxBbGwocmksIGNpLCBjZWxsLnRleHQucmVwbGFjZShuZXcgUmVnRXhwKHMuczEsICdnJyksIGVzLnMxKSwgY2VsbC5mb3JtdWxhcy5yZXBsYWNlKG5ldyBSZWdFeHAocy5zMSwgJ2cnKSwgZXMuczEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0TW9uZXkocywgdHlwZSkge1xuICAgICAgICBpZiAoL1teMC05XFwuXS8udGVzdChzKSlcbiAgICAgICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgICAgaWYgKHMgPT0gbnVsbCB8fCBzID09PSBcIlwiKVxuICAgICAgICAgICAgcmV0dXJuIFwiMFwiO1xuICAgICAgICBzID0gcy50b1N0cmluZygpLnJlcGxhY2UoL14oXFxkKikkLywgXCIkMS5cIik7XG4gICAgICAgIHMgPSAocyArIFwiMDBcIikucmVwbGFjZSgvKFxcZCpcXC5cXGRcXGQpXFxkKi8sIFwiJDFcIik7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoXCIuXCIsIFwiLFwiKTtcbiAgICAgICAgbGV0IHJlID0gLyhcXGQpKFxcZHszfSwpLztcbiAgICAgICAgd2hpbGUgKHJlLnRlc3QocykpXG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKHJlLCBcIiQxLCQyXCIpO1xuICAgICAgICBzID0gcy5yZXBsYWNlKC8sKFxcZFxcZCkkLywgXCIuJDFcIik7XG4gICAgICAgIGlmICh0eXBlID09PSAwKSB7XG4gICAgICAgICAgICBsZXQgYSA9IHMuc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgaWYgKGFbMV0gPT09IFwiMDBcIikge1xuICAgICAgICAgICAgICAgIHMgPSBhWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIC8vIGlzVmFsaWQgPT4gdHJ1ZSDkuLrml6XmnJ8gIGZhbHNlIOS4uiDmlbDlrZdcbiAgICBnZXRDZWxsU3R5bGVDb252ZXJ0KGNlbGxTdHlsZSwgaXNWYWxpZCkge1xuICAgICAgICBpZiAoY2VsbFN0eWxlICYmIGNlbGxTdHlsZS5mb3JtYXQgJiYgY2VsbFN0eWxlLmZvcm1hdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgICAgICB9IGVsc2UgaWYgKGNlbGxTdHlsZSAmJiBjZWxsU3R5bGUuZm9ybWF0ICYmIGNlbGxTdHlsZS5mb3JtYXQgPT09ICdybWInKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JtYic7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNlbGxTdHlsZSAmJiBjZWxsU3R5bGUuZm9ybWF0ICYmIGNlbGxTdHlsZS5mb3JtYXQgPT09ICdub3JtYWwnKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoY2VsbFN0eWxlICYmIGNlbGxTdHlsZS5mb3JtYXQgJiYgY2VsbFN0eWxlLmZvcm1hdCA9PT0gJ3BlcmNlbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJwZXJjZW50XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoY2VsbFN0eWxlICYmIGNlbGxTdHlsZS5mb3JtYXQgJiYgY2VsbFN0eWxlLmZvcm1hdCA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICAgICAgcmV0dXJuIFwiZGF0ZXRpbWVcIjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIChpc1ZhbGlkICYmICFpc0hhdmUoY2VsbFN0eWxlKSlcbiAgICAgICAgICAgIHx8IChpc1ZhbGlkICYmIGNlbGxTdHlsZSAmJiBjZWxsU3R5bGUuZm9ybWF0ICE9PSAnbm9ybWFsJylcbiAgICAgICAgICAgIHx8IGNlbGxTdHlsZSAmJiBjZWxsU3R5bGUuZm9ybWF0ICYmIGNlbGxTdHlsZS5mb3JtYXQgPT09ICdkYXRlJykge1xuICAgICAgICAgICAgcmV0dXJuIFwiZGF0ZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCBhYnMgPSAwLCBpc1Jvd3MpIHtcbiAgICAgICAgbGV0IGVudGVyID0gZmFsc2U7XG4gICAgICAgIGxldCBzID0gXCJcIjtcbiAgICAgICAgaWYgKGlzSW5zZXJ0KSB7XG4gICAgICAgICAgICBpZiAoc3JpIDw9IGRzWzFdICYmIGlzQWRkICYmIGlzUm93cykge1xuICAgICAgICAgICAgICAgIHMgPSB4eTJleHByKGRzWzBdICsgZGVpLCBkc1sxXSArIGRjaSwgYWJzKTtcbiAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNyaSA8PSBkc1sxXSAmJiAhaXNBZGQgJiYgaXNSb3dzKSB7XG4gICAgICAgICAgICAgICAgcyA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdICsgZGNpLCBhYnMpO1xuICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3JpIDw9IGRzWzBdICYmIGlzQWRkICYmIGlzUm93cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBzID0geHkyZXhwcihkc1swXSArIGRlaSwgZHNbMV0gKyBkY2ksIGFicyk7XG4gICAgICAgICAgICAgICAgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwiZW50ZXJcIjogZW50ZXIsXG4gICAgICAgICAgICBcImRhdGFcIjogcyxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVhY2hSYW5nZShyYW5nZSkge1xuICAgICAgICBsZXQgY2VsbHMgPSBbXTtcbiAgICAgICAgcmFuZ2UuZWFjaCgoaSwgaikgPT4ge1xuICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmdldENlbGwoaSwgaik7XG4gICAgICAgICAgICBpZiAoaXNIYXZlKGNlbGwpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVtcHR5ID0gaXNFbXB0eShjZWxsKTtcbiAgICAgICAgICAgICAgICBjZWxsID0gZGVlcENvcHkoY2VsbCk7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGxQcm9wID0gbmV3IENlbGxQcm9wKGksIGosIGNlbGwsIHh5MmV4cHIoaSwgaiksIGVtcHR5KTtcbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKGNlbGxQcm9wKTtcbiAgICAgICAgICAgIH0gZWxzZSAge1xuICAgICAgICAgICAgICAgIGNlbGwgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbFByb3AgPSBuZXcgQ2VsbFByb3AoaSwgaiwgY2VsbCwgeHkyZXhwcihpLCBqKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY2VsbHMucHVzaChjZWxsUHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjZWxscztcbiAgICB9XG5cbiAgICBnZXRDZWxsVGV4dEJ5U2hpZnQoYXJyLCBkZWksIGRjaSwgaXNJbnNlcnQgPSBmYWxzZSwgaXNBZGQgPSBmYWxzZSwgc3JpID0gMCwgaXNSb3dzID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGJhZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgbGV0IG5ld1N0ciA9IFwiXCI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGlmKGlzSW5zZXJ0ICYmIGlzSGF2ZShhcnJbaV0pKSB7XG4gICAgICAgICAgICAvLyAgICAgYXJyW2ldID0gYXJyW2ldLnJlcGxhY2UoL1xcJC8sICcnKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJyW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFycltpXS5zZWFyY2goL15bQS1aXStcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxldCBkcyA9IGV4cHIyeHkoYXJyW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoZHNbMF0gKyBkZWkgPCAwIHx8IGRzWzFdICsgZGNpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBiYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBhcmdzID0gdGhpcy5nZXRDZWxsVGV4dElzQWRkKGlzSW5zZXJ0LCBzcmksIGRzLCBpc0FkZCwgZGVpLCBkY2ksIDAsIGlzUm93cyk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gYXJncy5kYXRhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFycltpXSA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdICsgZGNpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcnJbaV0uc2VhcmNoKC9eW0EtWmEtel0rXFxkKzpbQS1aYS16XStcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxldCBhMSA9IGFycltpXS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgICAgICAgICAgbGV0IGEyID0gYXJyW2ldLnNwbGl0KFwiOlwiKVsxXTtcbiAgICAgICAgICAgICAgICBsZXQgZHMxID0gZXhwcjJ4eShhMSk7XG4gICAgICAgICAgICAgICAgbGV0IGRzMiA9IGV4cHIyeHkoYTIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRzMVswXSArIGRlaSA8IDAgfHwgZHMxWzFdICsgZGNpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBiYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZHMyWzBdICsgZGVpIDwgMCB8fCBkczJbMV0gKyBkY2kgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHMgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMxLCBpc0FkZCwgZGVpLCBkY2ksIDAsIGlzUm93cyk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcyA9IGFyZ3MuZGF0YSArIFwiOlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSB4eTJleHByKGRzMVswXSArIGRlaSwgZHMxWzFdICsgZGNpKSArIFwiOlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSBhMSArIFwiOlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMyLCBpc0FkZCwgZGVpLCBkY2ksIDAsIGlzUm93cyk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcyArPSBhcmdzLmRhdGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0luc2VydCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcyArPSB4eTJleHByKGRzMlswXSArIGRlaSwgZHMyWzFdICsgZGNpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzICs9IGEyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSBzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBpc0Fic29sdXRlVmFsdWUoYXJyW2ldLCA1KTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZHMgPSBleHByMnh5KGFycltpXS5yZXBsYWNlKC9cXCQvZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRzWzBdICsgZGVpIDwgMCB8fCBkc1sxXSArIGRjaSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCAyLCBpc1Jvd3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gYXJncy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0geHkyZXhwcihkc1swXSArIGRlaSwgZHNbMV0sIDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkcyA9IGV4cHIyeHkoYXJyW2ldLnJlcGxhY2UoL1xcJC9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHNbMF0gKyBkZWkgPCAwIHx8IGRzWzFdICsgZGNpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBhcmdzID0gdGhpcy5nZXRDZWxsVGV4dElzQWRkKGlzSW5zZXJ0LCBzcmksIGRzLCBpc0FkZCwgZGVpLCBkY2ksIDEsIGlzUm93cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0gPSBhcmdzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0gPSB4eTJleHByKGRzWzBdLCBkc1sxXSArIGRjaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3AgPSBhcnJbaV0uc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJbaV0sIHNwKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSA9IDA7IGl0ZW0gPCBzcC5sZW5ndGg7IGl0ZW0rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRzID0gZXhwcjJ4eShzcFtpdGVtXS5yZXBsYWNlKC9cXCQvZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkc1swXSArIGRlaSA8IDAgfHwgZHNbMV0gKyBkY2kgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMiwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BbaXRlbV0gPSBhcmdzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0geHkyZXhwcihkc1swXSArIGRlaSwgZHNbMV0sIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFycltpXSA9IHNwLmpvaW4oJzonKTtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwID0gYXJyW2ldLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSA9IDA7IGl0ZW0gPCBzcC5sZW5ndGg7IGl0ZW0rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRzID0gZXhwcjJ4eShzcFtpdGVtXS5yZXBsYWNlKC9cXCQvZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkc1swXSArIGRlaSA8IDAgfHwgZHNbMV0gKyBkY2kgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMSwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IHh5MmV4cHIoZHNbMF0sIGRzWzFdICsgZGNpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcmdzID0gdGhpcy5nZXRDZWxsVGV4dElzQWRkKGlzSW5zZXJ0LCBzcmksIGRzLCBpc0FkZCwgZGVpLCBkY2ksIDIsIGlzUm93cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BbaXRlbV0gPSBhcmdzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0luc2VydCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BbaXRlbV0gPSB4eTJleHByKGRzWzBdLCBkc1sxXSArIGRjaSwgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFycltpXSA9IHNwLmpvaW4oJzonKTtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwID0gYXJyW2ldLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gPSAwOyBpdGVtIDwgc3AubGVuZ3RoOyBpdGVtKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkcyA9IGV4cHIyeHkoc3BbaXRlbV0ucmVwbGFjZSgvXFwkL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHNbMF0gKyBkZWkgPCAwIHx8IGRzWzFdICsgZGNpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCAxLCBpc1Jvd3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BbaXRlbV0gPSB4eTJleHByKGRzWzBdLCBkc1sxXSArIGRjaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gc3Auam9pbignOicpO1xuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gNikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3AgPSBhcnJbaV0uc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtID0gMDsgaXRlbSA8IHNwLmxlbmd0aDsgaXRlbSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZHMgPSBleHByMnh5KHNwW2l0ZW1dLnJlcGxhY2UoL1xcJC9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRzWzBdICsgZGVpIDwgMCB8fCBkc1sxXSArIGRjaSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCAxLCBpc1Jvd3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0gYXJncy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0geHkyZXhwcihkc1swXSwgZHNbMV0gKyBkY2ksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMiwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gc3Auam9pbignOicpO1xuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gOCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3AgPSBhcnJbaV0uc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtID0gMDsgaXRlbSA8IHNwLmxlbmd0aDsgaXRlbSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZHMgPSBleHByMnh5KHNwW2l0ZW1dLnJlcGxhY2UoL1xcJC9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRzWzBdICsgZGVpIDwgMCB8fCBkc1sxXSArIGRjaSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcmdzID0gdGhpcy5nZXRDZWxsVGV4dElzQWRkKGlzSW5zZXJ0LCBzcmksIGRzLCBpc0FkZCwgZGVpLCBkY2ksIDAsIGlzUm93cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BbaXRlbV0gPSBhcmdzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0luc2VydCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BbaXRlbV0gPSB4eTJleHByKGRzWzBdICsgZGVpLCBkc1sxXSArIGRjaSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCAxLCBpc1Jvd3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0gYXJncy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0geHkyZXhwcihkc1swXSArIGRlaSwgZHNbMV0sIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcnJbaV0gPSBzcC5qb2luKCc6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcCA9IGFycltpXS5zcGxpdChcIjpcIik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gPSAwOyBpdGVtIDwgc3AubGVuZ3RoOyBpdGVtKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkcyA9IGV4cHIyeHkoc3BbaXRlbV0ucmVwbGFjZSgvXFwkL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHNbMF0gKyBkZWkgPCAwIHx8IGRzWzFdICsgZGNpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMSwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdICsgZGNpLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMiwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gc3Auam9pbignOicpO1xuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwID0gYXJyW2ldLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSA9IDA7IGl0ZW0gPCBzcC5sZW5ndGg7IGl0ZW0rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRzID0gZXhwcjJ4eShzcFtpdGVtXS5yZXBsYWNlKC9cXCQvZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkc1swXSArIGRlaSA8IDAgfHwgZHNbMV0gKyBkY2kgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCAwLCBpc1Jvd3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0gYXJncy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0geHkyZXhwcihkc1swXSArIGRlaSwgZHNbMV0gKyBkY2ksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMiwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gc3Auam9pbignOicpO1xuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwID0gYXJyW2ldLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSA9IDA7IGl0ZW0gPCBzcC5sZW5ndGg7IGl0ZW0rKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRzID0gZXhwcjJ4eShzcFtpdGVtXS5yZXBsYWNlKC9cXCQvZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkc1swXSArIGRlaSA8IDAgfHwgZHNbMV0gKyBkY2kgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0Q2VsbFRleHRJc0FkZChpc0luc2VydCwgc3JpLCBkcywgaXNBZGQsIGRlaSwgZGNpLCAwLCBpc1Jvd3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0gYXJncy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNJbnNlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwW2l0ZW1dID0geHkyZXhwcihkc1swXSArIGRlaSwgZHNbMV0gKyBkY2ksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENlbGxUZXh0SXNBZGQoaXNJbnNlcnQsIHNyaSwgZHMsIGlzQWRkLCBkZWksIGRjaSwgMSwgaXNSb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IGFyZ3MuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSW5zZXJ0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcFtpdGVtXSA9IHh5MmV4cHIoZHNbMF0gKyBkZWksIGRzWzFdLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gc3Auam9pbignOicpO1xuICAgICAgICAgICAgICAgICAgICBlbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3U3RyICs9IGFycltpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImJhZFwiOiBiYWQsXG4gICAgICAgICAgICBcImVudGVyXCI6IGVudGVyLFxuICAgICAgICAgICAgXCJyZXN1bHRcIjogbmV3U3RyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXV0b0ZpbHRlclJlZihyZWYsIHJhbmdlKSB7XG4gICAgICAgIGxldCBbY2ksIHJpXSA9IGV4cHIyeHkocmVmKTtcbiAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgd2hpbGUgKGNlbGwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJpICs9IDE7XG4gICAgICAgICAgICBjZWxsID0gdGhpcy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmFuZ2UuZXJpID0gcmk7XG5cbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cblxuICAgIC8vIGdldEFsbERhdGFUeXBlKGNlbGxSYW5nZSlcbiAgICBnZXRBbGxEYXRhVHlwZShjZWxsUmFuZ2UpIHtcbiAgICAgICAgbGV0IGlzTnVtYmVyID0gdHJ1ZSwgaXNEYXRlID0gdHJ1ZSwgc2FyciA9IFtdO1xuXG4gICAgICAgIGNlbGxSYW5nZS5lYWNoKChpLCBqKSA9PiB7XG4gICAgICAgICAgICBsZXQgdW5kID0gZmFsc2UsIGNlbGwgPSB0aGlzLmdldENlbGwoaSwgaik7XG4gICAgICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgICAgICAgIGNlbGwgPSBkZWVwQ29weShjZWxsKTtcbiAgICAgICAgICAgICAgICBsZXQgYXJncyA9IG5ldyBDZWxsUHJveHkoY2VsbCkuZ2V0Q2VsbERhdGFUeXBlKHNhcnIsIHtpc0RhdGUsIGlzTnVtYmVyfSk7XG4gICAgICAgICAgICAgICAgLy8gcGFzdGVQcm94eS5nZXRDZWxsRGF0YVR5cGUoY2VsbCwgc2Fyciwge2lzRGF0ZSwgaXNOdW1iZXJ9KTsgLy8gbGV0IGFyZ3MgPSBDZWxsUHJveHkoY2VsbCkuZ2V0Q2VsbERhdGFUeXBlKClcbiAgICAgICAgICAgICAgICBpc0RhdGUgPSBhcmdzLmlzRGF0ZTtcbiAgICAgICAgICAgICAgICBpc051bWJlciA9IGFyZ3MuaXNOdW1iZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaXNOdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc0RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHVuZCkge1xuICAgICAgICAgICAgICAgIHNhcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGZvcm11bGFzOiAwLFxuICAgICAgICAgICAgICAgICAgICB0bXA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzRGF0ZTogaXNEYXRlLCBpc051bWJlcjogaXNOdW1iZXIsIHNhcnJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhbGNOdW1iZXJDZWxsQnlUb3BDZWxsKG5jZWxsLCBkaWZmVmFsdWUsIGRhcnIsIGQsIHdoYXQsIGNiKSB7XG4gICAgICAgIGxldCB7dGV4dCwgZm9ybXVsYXN9ID0gbmNlbGw7XG4gICAgICAgIHRleHQgPSB0aGlzLnRvU3RyaW5nKHRleHQpO1xuICAgICAgICBmb3JtdWxhcyA9IHRoaXMudG9TdHJpbmcoZm9ybXVsYXMpO1xuICAgICAgICBsZXQgY2VsbCA9IHt9O1xuICAgICAgICBpZiAodGhpcy5pc0Zvcm11bGEoZm9ybXVsYXMpKSB7XG4gICAgICAgICAgICBsZXQgbGFzdDEgPSB0ZXh0LnJlcGxhY2UoXCI9XCIsIFwiXCIpICogMTtcblxuICAgICAgICAgICAgbGV0IHZhbHVlID0gbGFzdDEgKyBkaWZmVmFsdWU7XG4gICAgICAgICAgICBjZWxsID0ge1xuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIj1cIiArIHZhbHVlICsgXCJcIixcbiAgICAgICAgICAgICAgICBcImZvcm11bGFzXCI6IFwiPVwiICsgdmFsdWUgKyBcIlwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgbGV0IGxhc3QxID0gdGV4dCAqIDE7XG4gICAgICAgICAgICBpZiAodGV4dC5pbmRleE9mKFwiLFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsYXN0MSA9IGxhc3QxLnJlcGxhY2UoLywvZywgJycpO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQobGFzdDEpICsgZGlmZlZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3QxID0gdGhpcy5mb3JtYXRNb25leSh2YWx1ZSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhc3QxID0gbGFzdDEgKyBkaWZmVmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNlbGwgPSB7XG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IGxhc3QxICsgXCJcIixcbiAgICAgICAgICAgICAgICBcImZvcm11bGFzXCI6IGxhc3QxICsgXCJcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvcHlSZW5kZXIoZGFyciwgZC5yaSwgZC5jaSwgY2VsbCwgd2hhdCwgY2IpO1xuICAgIH1cblxuICAgIGNhbGNGb3JtdWxhQ2VsbEJ5VG9wQ2VsbChpVGV4dCwgZGFyciwgZCwgZGlyZWN0aW9uLCBpc0FkZCwgY2IpIHtcbiAgICAgICAgbGV0IHN0ckxpc3QgPSBzcGxpdFN0cihpVGV4dCk7XG4gICAgICAgIGxldCBhcmdzID0gdGhpcy5nZXRSYW5nZUJ5VG9wQ2VsbCh7cmk6IGQucmksIGNpOiBkLmNpfSwgZGlyZWN0aW9uLCBpc0FkZCk7XG4gICAgICAgIGxldCBkY2kgPSBkLnJpIC0gYXJncy5yaTtcbiAgICAgICAgbGV0IGRyaSA9IGQuY2kgLSBhcmdzLmNpO1xuICAgICAgICBsZXQge2JhZCwgcmVzdWx0fSA9IHRoaXMuZ2V0Q2VsbFRleHRCeVNoaWZ0KHN0ckxpc3QsIGRyaSwgZGNpKTtcbiAgICAgICAgdGhpcy51cGRhdGVDZWxsUmVmZXJlbmNlQnlTaGlmdChiYWQsIHJlc3VsdCwgZC5yaSwgZC5jaSwgY2IpO1xuICAgIH1cblxuICAgIGNhbGNDZWxsQnlUb3BDZWxsKGNiLCB3aGF0LCBuY2VsbCwgZGFyciwgaXNBZGQsIGlUZXh0LCBkLCB0ZXh0KSB7XG5cbiAgICAgICAgaWYgKCFpc0hhdmUoaVRleHQpKSB7XG4gICAgICAgICAgICBpVGV4dCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihpVGV4dCkpIHtcbiAgICAgICAgICAgIG5jZWxsLnRleHQgPSBpVGV4dDtcbiAgICAgICAgICAgIG5jZWxsLmZvcm11bGFzID0gbmNlbGwudGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBhcnIgPSB0aGlzLnRvU3RyaW5nKGlUZXh0KS5zcGxpdCgvXFxkKy9nKTtcbiAgICAgICAgICAgIGlmIChhcnIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChpc0FkZCkge1xuICAgICAgICAgICAgICAgICAgICBuY2VsbC50ZXh0ID0gaVRleHQucmVwbGFjZSgvXFxkKy9nLCAod29yZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLmxlbmd0aCAtIDEgPT09IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmQgKiAxICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5jZWxsLnRleHQgPSBpVGV4dC5yZXBsYWNlKC9cXGQrL2csICh3b3JkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoIC0gMSA9PT0gY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd29yZCAqIDEgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5jZWxsLmZvcm11bGFzID0gbmNlbGwudGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvcHlSZW5kZXIoZGFyciwgZC5yaSwgZC5jaSwgbmNlbGwsIHdoYXQsIGNiKTtcbiAgICB9XG5cbiAgICBjYWxjRGF0ZUNlbGxCeVRvcENlbGwobmNlbGwsIGRhcnIsIGQsIGlzQWRkLCB3aGF0LCBjYiwgZGlmZikge1xuICAgICAgICBpZiAobmNlbGwudGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgIGxldCBsYXN0MSA9IG5jZWxsLnRleHQ7XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoaXNBZGQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRheWpzKGxhc3QxKS5hZGQoZGlmZiwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRheWpzKGxhc3QxKS5hZGQoZGlmZiwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmNlbGwudGV4dCA9IHRoaXMudG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgbmNlbGwuZm9ybXVsYXMgPSB0aGlzLnRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY29weVJlbmRlcihkYXJyLCBkLnJpLCBkLmNpLCBuY2VsbCwgd2hhdCwgY2IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UmFuZ2VCeVRvcENlbGwoe3JpLCBjaX0sIGRpcmVjdGlvbiwgaXNBZGQpIHtcbiAgICAgICAgaWYgKGlzQWRkKSB7XG4gICAgICAgICAgICByaSA9ICFkaXJlY3Rpb24gPyByaSAtIDEgOiByaTtcbiAgICAgICAgICAgIGNpID0gIWRpcmVjdGlvbiA/IGNpIDogY2kgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmkgPSAhZGlyZWN0aW9uID8gcmkgKyAxIDogcmk7XG4gICAgICAgICAgICBjaSA9ICFkaXJlY3Rpb24gPyBjaSA6IGNpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7cmksIGNpfTtcbiAgICB9XG5cbiAgICAvLyBsb2dQcm94eS5sb2coe1wibXNnXCI6XCIxMjMxMlwifSkgIGNvbnNvbGUubG9nIC0tPiBsb2dQcm94eS5sb2dcbiAgICBnZXRDZWxsQnlUb3BDZWxsKGQsIGRpcmVjdGlvbiwgaXNBZGQsIHdoYXQgPSAnYWxsJywgZHJpID0gMCwgZGNpID0gMCkge1xuICAgICAgICBpZiAod2hhdCA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IHtyaSwgY2l9ID0gdGhpcy5nZXRSYW5nZUJ5VG9wQ2VsbCh7cmk6IGlzQWRkID8gZC5yaSAtIGRyaSA6IGQucmkgKyBkcmksIGNpOiBkLmNpfSwgZmFsc2UsIGlzQWRkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDZWxsQnlDZWxsKHJpLCBjaSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENlbGxCeUNlbGwoZC5yaSwgZC5jaSAtIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDZWxsQnlDZWxsKGQucmksIGQuY2kgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB7cmksIGNpfSA9IHRoaXMuZ2V0UmFuZ2VCeVRvcENlbGwoe3JpOiBpc0FkZCA/IGQucmkgLSBkcmkgOiBkLnJpICsgZHJpLCBjaTogZC5jaX0sIGRpcmVjdGlvbiwgaXNBZGQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbEJ5Q2VsbChyaSwgY2kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q2VsbEJ5Q2VsbChyaSwgY2kpIHtcbiAgICAgICAgbGV0IG5jZWxsID0gdGhpcy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgIGlmICghbmNlbGwpIHtcbiAgICAgICAgICAgIG5jZWxsID0ge1xuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgICAgIGZvcm11bGFzOiAnJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbG9uZURlZXAobmNlbGwpO1xuICAgIH1cblxuICAgIHVwZGF0ZUNlbGxSZWZlcmVuY2VCeVNoaWZ0KGJhZCwgcmVzdWx0LCByaSwgY2ksIGNiID0gKCkgPT4ge1xuICAgIH0pIHtcbiAgICAgICAgbGV0IF9jZWxsID0ge307XG4gICAgICAgIGlmIChiYWQpIHtcbiAgICAgICAgICAgIF9jZWxsLnRleHQgPSBcIiNSRUYhXCI7XG4gICAgICAgICAgICBfY2VsbC5mb3JtdWxhcyA9IFwiI1JFRiFcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9jZWxsLnRleHQgPSByZXN1bHQgIT09IFwiXCIgPyByZXN1bHQgOiAnJztcbiAgICAgICAgICAgIF9jZWxsLmZvcm11bGFzID0gcmVzdWx0ICE9PSBcIlwiID8gcmVzdWx0IDogJyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcm93cy5zZXRDZWxsVGV4dChyaSwgY2ksIHt0ZXh0LCBzdHlsZX0sIHByb3h5LCB0aGlzLm5hbWUsICdzdHlsZScpO1xuICAgICAgICB0aGlzLnNldENlbGwocmksIGNpLCBfY2VsbCwgJ2FsbCcpO1xuICAgICAgICBjYihyaSwgY2ksIF9jZWxsKTtcbiAgICB9XG5cbiAgICAvLyB3aGF0OiBhbGwgfCBmb3JtYXQgfCB0ZXh0XG4gICAgLy8g5aGr5YWFXG4gICAgY29weVBhc3RlKHNyY0NlbGxSYW5nZSwgZHN0Q2VsbFJhbmdlLCB3aGF0LCBhdXRvZmlsbCA9IGZhbHNlLCBjYiA9ICgpID0+IHtcbiAgICB9KSB7XG4gICAgICAgIGNvbnN0IHtwYXN0ZVByb3h5fSA9IHRoaXM7XG4gICAgICAgIHBhc3RlUHJveHkuc2V0U3JjQW5kRHN0Q2VsbFJhbmdlKHNyY0NlbGxSYW5nZSwgZHN0Q2VsbFJhbmdlKTtcbiAgICAgICAgbGV0IHtybiwgY259ID0gcGFzdGVQcm94eS51c2UoKTtcbiAgICAgICAgbGV0IGlzTGVmdFJpZ2h0ID0gcGFzdGVQcm94eS5hdXRvRmlsdGVyRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgbGV0IGxlbiA9IGlzTGVmdFJpZ2h0ID8gcm4gOiBjbjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgbGV0IGlzRG93biA9IHBhc3RlUHJveHkudXBPckRvd24oKTtcbiAgICAgICAgICAgIGxldCB7c3JjT25lRFJhbmdlLCBkc3RPbmVEUmFuZ2V9ID0gcGFzdGVQcm94eS5nZXRPbmVEUmFuZ2VPYmooaXNMZWZ0UmlnaHQsIGkpO1xuICAgICAgICAgICAgbGV0IHtpc051bWJlciwgaXNEYXRlLCBzYXJyfSA9IHRoaXMuZ2V0QWxsRGF0YVR5cGUoc3JjT25lRFJhbmdlKTtcbiAgICAgICAgICAgIC8vIGxldCBpc0NvcHkgPSBwYXN0ZVByb3h5LmlzQ29weShzYXJyLCBpKTtcblxuICAgICAgICAgICAgbGV0IGRhcnIgPSBkc3RPbmVEUmFuZ2UuZ2V0TG9jYXRpb25BcnJheShzYXJyKTsgLy9sZXQgZHN0T25lRExvY2F0aW9uQWFycmF5ID0gZHN0T25lRFJhbmdlLmdldExvY2F0aW9uQXJyYXkoKVxuICAgICAgICAgICAgbGV0IGxpbmUgPSBwYXN0ZVByb3h5LmxlZnRPclJpZ2h0KCk7IC8vIOWQkeW3puaIluiAheWQkeWPs1xuICAgICAgICAgICAgbGV0IG90aGVyID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBkID0gZGFycltpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIgfHwgZC50eXBlID09PSAnbnVtYmVyJyB8fCBpc0RhdGUgfHwgZC50eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgb3RoZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzRG93bikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IGRhcnJbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc051bWJlciB8fCBkLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGlmZlZhbHVlID0gcGFzdGVQcm94eS5jYWxjRGlmZihzYXJyLCBpc0Rvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyQXV0b0ZpbHRlci5jYWxsKHRoaXMsIGRhcnJbaV0sIGRhcnIsIGlzTGVmdFJpZ2h0LCBpc0Rvd24sIGRpZmZWYWx1ZSwgd2hhdCwgY2IsIGlzTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUgfHwgZC50eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVBdXRvRmlsdGVyLmNhbGwodGhpcywgZGFycltpXSwgbGluZSwgaXNEb3duLCBkYXJyLCB3aGF0LCBjYiwgaXNEYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyQXV0b0ZpbHRlci5jYWxsKHRoaXMsIGRhcnJbaV0sIGRhcnIsIGlzTGVmdFJpZ2h0LCBpc0Rvd24sIHdoYXQsIGNiLCBvdGhlciwgc2Fyci5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRhcnIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBkYXJyW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIgfHwgZC50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpZmZWYWx1ZSA9IHBhc3RlUHJveHkuY2FsY0RpZmYoc2FyciwgaXNEb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlckF1dG9GaWx0ZXIuY2FsbCh0aGlzLCBkYXJyW2ldLCBkYXJyLCBpc0xlZnRSaWdodCwgaXNEb3duLCBkaWZmVmFsdWUsIHdoYXQsIGNiLCBpc051bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlIHx8IGQudHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlQXV0b0ZpbHRlci5jYWxsKHRoaXMsIGRhcnJbaV0sIGxpbmUsIGlzRG93biwgZGFyciwgd2hhdCwgY2IsIGlzRGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlckF1dG9GaWx0ZXIuY2FsbCh0aGlzLCBkYXJyW2ldLCBkYXJyLCBpc0xlZnRSaWdodCwgaXNEb3duLCB3aGF0LCBjYiwgb3RoZXIsIHNhcnIubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGNvcHlSZW5kZXIoZGFyciwgbnJpLCBuY2ksIG5jZWxsLCB3aGF0LCBjYikge1xuICAgICAgICBsZXQgYXMgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGFzID09PSBmYWxzZSAmJiBrIDwgZGFyci5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgaWYgKGRhcnJba10ucmkgPT09IG5yaSAmJiBkYXJyW2tdLmNpID09PSBuY2kpIHtcbiAgICAgICAgICAgICAgICBhcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzKSB7XG4gICAgICAgICAgICB0aGlzLnNldENlbGwobnJpLCBuY2ksIG5jZWxsLCB3aGF0KTtcbiAgICAgICAgICAgIGNiKG5yaSwgbmNpLCBuY2VsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdXRQYXN0ZShzcmNDZWxsUmFuZ2UsIGRzdENlbGxSYW5nZSkge1xuICAgICAgICBsZXQgc3JjQ2VsbCA9IFtdO1xuICAgICAgICAvLyBjb25zdCBuY2VsbG1tID0ge307XG4gICAgICAgIHRoaXMuZWFjaCgocmkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWFjaENlbGxzKHJpLCAoY2kpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbnJpID0gcGFyc2VJbnQocmksIDEwKTtcbiAgICAgICAgICAgICAgICBsZXQgbmNpID0gcGFyc2VJbnQoY2ksIDEwKTtcbiAgICAgICAgICAgICAgICBpZiAoc3JjQ2VsbFJhbmdlLmluY2x1ZGVzKHJpLCBjaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbnJpID0gZHN0Q2VsbFJhbmdlLnNyaSArIChucmkgLSBzcmNDZWxsUmFuZ2Uuc3JpKTtcbiAgICAgICAgICAgICAgICAgICAgbmNpID0gZHN0Q2VsbFJhbmdlLnNjaSArIChuY2kgLSBzcmNDZWxsUmFuZ2Uuc2NpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmkgKiAxICE9PSBucmkgfHwgY2kgKiAxICE9PSBuY2kpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmNlbGxtbVtucmldID0gbmNlbGxtbVtucmldIHx8IHtjZWxsczoge319O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fW3JpXS5jZWxsc1tjaV0udGV4dCAhPT0gJycgJiYgdGhpcy5fW3JpXS5jZWxsc1tjaV0uZm9ybXVsYXMgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNDZWxsLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5yaTogbnJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5jaTogbmNpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpOiByaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaTogY2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbDogZGVlcENvcHkodGhpcy5fW3JpXS5jZWxsc1tjaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc2V0Q2VsbChucmksIG5jaSwgdGhpcy5fW3JpXS5jZWxsc1tjaV0sICdhbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmICh0aGlzLl9bcmldLmNlbGxzW2NpXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGhpcy5zZXRDZWxsKG5yaSwgbmNpLCB0aGlzLl9bcmldLmNlbGxzW2NpXSwgJ2FsbCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNyY0NlbGwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7cmksIGNpfSA9IHNyY0NlbGxbaV07XG4gICAgICAgICAgICB0aGlzLnNldENlbGwocmksIGNpLCB7fSwgJ2FsbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmNDZWxsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQge25yaSwgbmNpLCBjZWxsfSA9IHNyY0NlbGxbaV07XG4gICAgICAgICAgICB0aGlzLnNldENlbGwobnJpLCBuY2ksIGNlbGwsICdhbGwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMuXyA9IG5jZWxsbW07XG4gICAgfVxuXG4gICAgaW5zZXJ0KHNyaSwgbiA9IDEpIHtcbiAgICAgICAgY29uc3QgbmRhdGEgPSB7fTtcbiAgICAgICAgbGV0IGNlbGxzID0gW107XG4gICAgICAgIHRoaXMuZWFjaCgocmksIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IG5yaSA9IHBhcnNlSW50KHJpLCAxMCk7XG4gICAgICAgICAgICBpZiAobnJpID49IHNyaSkge1xuICAgICAgICAgICAgICAgIG5yaSArPSBuO1xuICAgICAgICAgICAgICAgIHRoaXMuZWFjaENlbGxzKHJpLCAoY2ksIGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSGF2ZShjZWxsKSAmJiBpc0hhdmUoY2VsbC5mb3JtdWxhcykgJiYgdGhpcy5pc0Zvcm11bGEoY2VsbC5mb3JtdWxhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7YmFkLCByZXN1bHQsIGVudGVyfSA9IHRoaXMuZ2V0Q2VsbFRleHRCeVNoaWZ0KHNwbGl0U3RyKGNlbGwuZm9ybXVsYXMpLCAwLCBuLCB0cnVlLCB0cnVlLCBzcmksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudGVyICYmICFiYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtyaTogbnJpLCBjaTogY2ksIGNlbGw6IHt0ZXh0OiByZXN1bHQsIGZvcm11bGFzOiByZXN1bHR9fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmRhdGFbbnJpXSA9IHJvdztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fID0gbmRhdGE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7cmksIGNpLCBjZWxsfSA9IGNlbGxzW2ldO1xuICAgICAgICAgICAgdGhpcy5zZXRDZWxsKHJpLCBjaSwgY2VsbCwgJ2FsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuICs9IG47XG4gICAgfVxuXG4gICAgZGVsZXRlKHNyaSwgZXJpKSB7XG4gICAgICAgIGNvbnN0IG4gPSBlcmkgLSBzcmkgKyAxO1xuICAgICAgICBjb25zdCBuZGF0YSA9IHt9O1xuICAgICAgICBsZXQgY2VsbHMgPSBbXTtcbiAgICAgICAgdGhpcy5lYWNoKChyaSwgcm93KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBucmkgPSBwYXJzZUludChyaSwgMTApO1xuICAgICAgICAgICAgaWYgKG5yaSA8IHNyaSkge1xuICAgICAgICAgICAgICAgIG5kYXRhW25yaV0gPSByb3c7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJpID4gZXJpKSB7XG4gICAgICAgICAgICAgICAgbmRhdGFbbnJpIC0gbl0gPSByb3c7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVhY2hDZWxscyhyaSwgKGNpLCBjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbCkgJiYgaXNIYXZlKGNlbGwuZm9ybXVsYXMpICYmIHRoaXMuaXNGb3JtdWxhKGNlbGwuZm9ybXVsYXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQge2JhZCwgcmVzdWx0LCBlbnRlcn0gPSB0aGlzLmdldENlbGxUZXh0QnlTaGlmdChzcGxpdFN0cihjZWxsLmZvcm11bGFzKSwgMCwgbiAqIC0xLCB0cnVlLCBmYWxzZSwgc3JpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRlciAmJiAhYmFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7cmk6IG5yaSAtIG4sIGNpOiBjaSwgY2VsbDoge3RleHQ6IHJlc3VsdCwgZm9ybXVsYXM6IHJlc3VsdH19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fID0gbmRhdGE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7cmksIGNpLCBjZWxsfSA9IGNlbGxzW2ldO1xuICAgICAgICAgICAgdGhpcy5zZXRDZWxsKHJpLCBjaSwgY2VsbCwgJ2FsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuIC09IG47XG4gICAgfVxuXG4gICAgaW5zZXJ0Q29sdW1uKHNjaSwgbiA9IDEpIHtcbiAgICAgICAgbGV0IGNlbGxzID0gW107XG4gICAgICAgIHRoaXMuZWFjaCgocmksIHJvdykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm5kYXRhID0ge307XG4gICAgICAgICAgICB0aGlzLmVhY2hDZWxscyhyaSwgKGNpLCBjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5jaSA9IHBhcnNlSW50KGNpLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKG5jaSA+PSBzY2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbmNpICs9IG47XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSGF2ZShjZWxsKSAmJiBpc0hhdmUoY2VsbC5mb3JtdWxhcykgJiYgdGhpcy5pc0Zvcm11bGEoY2VsbC5mb3JtdWxhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7YmFkLCByZXN1bHQsIGVudGVyfSA9IHRoaXMuZ2V0Q2VsbFRleHRCeVNoaWZ0KHNwbGl0U3RyKGNlbGwuZm9ybXVsYXMpLCBuLCAwLCB0cnVlLCB0cnVlLCBzY2ksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRlciAmJiAhYmFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7cmk6IHJpLCBjaTogbmNpLCBjZWxsOiB7dGV4dDogcmVzdWx0LCBmb3JtdWxhczogcmVzdWx0fX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJuZGF0YVtuY2ldID0gY2VsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm93LmNlbGxzID0gcm5kYXRhO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQge3JpLCBjaSwgY2VsbH0gPSBjZWxsc1tpXTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VsbChyaSwgY2ksIGNlbGwsICdhbGwnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZUNvbHVtbihzY2ksIGVjaSkge1xuICAgICAgICBjb25zdCBuID0gZWNpIC0gc2NpICsgMTtcbiAgICAgICAgdGhpcy5lYWNoKChyaSwgcm93KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBybmRhdGEgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZWFjaENlbGxzKHJpLCAoY2ksIGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuY2kgPSBwYXJzZUludChjaSwgMTApO1xuICAgICAgICAgICAgICAgIGlmIChuY2kgPCBzY2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcm5kYXRhW25jaV0gPSBjZWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmNpID4gZWNpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJuZGF0YVtuY2kgLSBuXSA9IGNlbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByb3cuY2VsbHMgPSBybmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHdoYXQ6IGFsbCB8IHRleHQgfCBmb3JtYXQgfCBtZXJnZVxuICAgIGRlbGV0ZUNlbGxzKGNlbGxSYW5nZSwgd2hhdCA9ICdhbGwnKSB7XG4gICAgICAgIGNlbGxSYW5nZS5lYWNoKChpLCBqKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUNlbGwoaSwgaiwgd2hhdCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHdoYXQ6IGFsbCB8IHRleHQgfCBmb3JtYXQgfCBtZXJnZVxuICAgIGRlbGV0ZUNlbGwocmksIGNpLCB3aGF0ID0gJ2FsbCcpIHtcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXQocmkpO1xuICAgICAgICBpZiAocm93ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgICAgICBpZiAoY2VsbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh3aGF0ID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcm93LmNlbGxzW2NpXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdoYXQgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIYXZlKGNlbGwudGV4dCkpIGRlbGV0ZSBjZWxsLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbC52YWx1ZSkpIGRlbGV0ZSBjZWxsLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIYXZlKGNlbGwuZm9ybXVsYXMpKSBkZWxldGUgY2VsbC5mb3JtdWxhcztcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGlzSGF2ZShjZWxsLmRlcGVuZCkpIGRlbGV0ZSBjZWxsLmRlcGVuZDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdoYXQgPT09ICdmb3JtYXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLnN0eWxlICE9PSB1bmRlZmluZWQpIGRlbGV0ZSBjZWxsLnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbC5tZXJnZSkgZGVsZXRlIGNlbGwubWVyZ2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aGF0ID09PSAnbWVyZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLm1lcmdlKSBkZWxldGUgY2VsbC5tZXJnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlYWNoKGNiKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuXykuZm9yRWFjaCgoW3JpLCByb3ddKSA9PiB7XG4gICAgICAgICAgICBjYihyaSwgcm93KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZWFjaENlbGxzKHJpLCBjYikge1xuICAgICAgICBpZiAodGhpcy5fW3JpXSAmJiB0aGlzLl9bcmldLmNlbGxzKSB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLl9bcmldLmNlbGxzKS5mb3JFYWNoKChbY2ksIGNlbGxdKSA9PiB7XG4gICAgICAgICAgICAgICAgY2IoY2ksIGNlbGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWNhc3QoY2VsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWZlck90aGVyU2hlZXQoY2VsbCwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjYXN0ID0gbmV3IFJlY2FzdChjZWxsLmZvcm11bGFzKTtcbiAgICAgICAgICAgICAgICByZWNhc3QucGFyc2UoKTtcbiAgICAgICAgICAgICAgICBjZWxsWydyZWNhc3QnXSA9IHJlY2FzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbFsncmVjYXN0J10gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjZWxsWydyZWNhc3QnXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLmVhY2goKHJpKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVhY2hDZWxscyhyaSwgKGNpKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXREZXBlbmRDZWxsKHh5MmV4cHIoY2ksIHJpKSwgdGhpcy5nZXRDZWxsKHJpLCBjaSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldERhdGEoZCwgc2hlZXQgPSBcIlwiLCBvdXQgPSBmYWxzZSwgcm93c0luaXQgPSBmYWxzZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGQubGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZW4gPSBkLmxlbjtcbiAgICAgICAgICAgICAgICBkZWxldGUgZC5sZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl8gPSBkO1xuXG5cbiAgICAgICAgICAgIGlmIChvdXQpIHtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGVldCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWUoXCJzZXREYXRhXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyb3dzSW5pdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQudG9vbGJhci5jaGFuZ2UoJ2Nsb3NlJywgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoXCJzZXREYXRhXCIpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREYXRhKCkge1xuICAgICAgICBjb25zdCB7bGVufSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHtsZW59LCB0aGlzLl8pO1xuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBSb3dzLFxufTtcbiIsImltcG9ydCB7c2hlZXRSZXNldH0gZnJvbSBcIi4uL2NvbXBvbmVudC9zaGVldFwiO1xuaW1wb3J0IHtofSBmcm9tIFwiLi4vY29tcG9uZW50L2VsZW1lbnRcIjtcbmltcG9ydCBEcmFnIGZyb20gXCIuLi9leHRlcm5hbC9kcmFnXCI7XG5pbXBvcnQgUmVzaXplIGZyb20gXCIuLi9leHRlcm5hbC9yZXNpemVcIjtcbmltcG9ydCB7Y3NzUHJlZml4fSBmcm9tIFwiLi4vY29uZmlnXCI7XG5pbXBvcnQge2dldENob29zZUltZ30gZnJvbSBcIi4uL2V2ZW50L2NvcHlcIjtcbmltcG9ydCBDZWxsUmFuZ2UgZnJvbSBcIi4uL2NvcmUvY2VsbF9yYW5nZVwiO1xuaW1wb3J0IFRhYmxlUHJveHkgZnJvbSBcIi4uL2NvcmUvdGFibGVfcHJveHlcIjtcblxuZXhwb3J0IGxldCByZXNpemVPcHRpb24gPSB7XG4gICAgb25CZWdpbihkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib2JlZ2luXCIsIGRhdGEpXG4gICAgfSxcblxuICAgIG9uRW5kKGRhdGEpIHtcblxuICAgIH0sXG4gICAgb25SZXNpemUoZGF0YSwgc2VsZikge1xuICAgICAgICBsZXQgaW1nID0gZ2V0Q2hvb3NlSW1nLmNhbGwoc2VsZik7XG4gICAgICAgIGlmICghaW1nKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGltZy5pbWcyLnN0eWxlWyd3aWR0aCddID0gaW1nLmltZy5lbC5zdHlsZVsnd2lkdGgnXTtcbiAgICAgICAgaW1nLmltZzIuc3R5bGVbJ2hlaWdodCddID0gaW1nLmltZy5lbC5zdHlsZVsnaGVpZ2h0J107XG4gICAgfVxufTtcblxuZXhwb3J0IGxldCBkcmFnT3B0aW9uID0ge1xuICAgIG9uQmVnaW4oZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9iZWdpblwiLCBkYXRhKVxuICAgIH0sXG4gICAgb25FbmQoZGF0YSwgc2VsZikge1xuICAgICAgICBsZXQge2xlZnQsIHRvcH0gPSBkYXRhO1xuICAgICAgICBsZXQgaW1nID0gZ2V0Q2hvb3NlSW1nLmNhbGwoc2VsZik7XG4gICAgICAgIGlmICghaW1nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBpbWcubGVmdCA9IGxlZnQgKyA3MDtcbiAgICAgICAgLy8gaW1nLnRvcCA9IHRvcCArIDMxO1xuXG4gICAgICAgIGlmICh0b3AgLSAzMSA8IDApIHtcbiAgICAgICAgICAgIHRvcCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAobGVmdCAtIDYwIDwgMCkge1xuICAgICAgICAgICAgbGVmdCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmFuZ2UgPSBzZWxmLmRhdGEuZ2V0Q2VsbFJlY3RCeVhZKGxlZnQgKyA2MCwgdG9wICsgMzEpO1xuICAgICAgICByYW5nZS5zcmkgPSByYW5nZS5yaTtcbiAgICAgICAgcmFuZ2Uuc2NpID0gcmFuZ2UuY2k7XG4gICAgICAgIHJhbmdlLmVyaSA9IHJhbmdlLnJpO1xuICAgICAgICByYW5nZS5lY2kgPSByYW5nZS5jaTtcbiAgICAgICAgbGV0IG9mZnNldExlZnQgPSBsZWZ0IC0gcmFuZ2UubGVmdCArIDUwO1xuICAgICAgICBsZXQgb2Zmc2V0VG9wID0gdG9wIC0gcmFuZ2UudG9wICsgMjE7XG5cbiAgICAgICAgaW1nLm9mZnNldExlZnQgPSBvZmZzZXRMZWZ0O1xuICAgICAgICBpbWcub2Zmc2V0VG9wID0gb2Zmc2V0VG9wO1xuICAgICAgICBpbWcucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbWcubGFzdENpICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1nLmxhc3RSaSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGltZy5yaSA9IGltZy5sYXN0Umk7XG4gICAgICAgICAgICBpbWcuY2kgPSBpbWcubGFzdENpO1xuICAgICAgICB9XG4gICAgICAgIGltZy5sYXN0Q2kgPSByYW5nZS5jaTtcbiAgICAgICAgaW1nLmxhc3RSaSA9IHJhbmdlLnJpO1xuXG4gICAgICAgIC8vIHNlbGYuZGF0YS5oaXN0b3J5LmFkZFBpYyhkZWVwQ29weShzZWxmLmRhdGEucGFzdGVEaXJlY3Rpb25zQXJyKSwgXCJkZWxldGVcIik7XG4gICAgfSxcbiAgICBvbkRyYWcoZGF0YSkge1xuICAgIH0sXG59O1xuXG5mdW5jdGlvbiBzcGFuRG9tUGFja2FnZShzcGFuRG9tLCB0YWJsZURvbSkge1xuICAgIGxldCB0YWJsZSA9IGgoXCJ0YWJsZVwiLCBcIlwiKTtcbiAgICBsZXQgdGJvZHkgPSBoKCd0Ym9keScsICcnKTtcblxuICAgIGxldCB0ZXh0QXJyID0gc3BhbkRvbS5pbm5lclRleHQuc3BsaXQoXCJcXG5cIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gdGV4dEFycltpXTtcbiAgICAgICAgbGV0IHRyID0gaCgndHInLCAnJyk7XG4gICAgICAgIGxldCB0ZCA9IGgoJ3RkJywgJycpO1xuICAgICAgICB0ZC5odG1sKHRleHQpO1xuICAgICAgICB0ZC5jc3MoJ2JhY2tncm91bmQnLCBzcGFuRG9tLnN0eWxlWydiYWNrZ3JvdW5kJ10pO1xuICAgICAgICB0ZC5jc3MoJ2ZvbnQtd2VpZ2h0Jywgc3BhbkRvbS5zdHlsZVsnZm9udC13ZWlnaHQnXSk7XG4gICAgICAgIHRkLmNzcygnY29sb3InLCBzcGFuRG9tLnN0eWxlWydjb2xvciddKTtcbiAgICAgICAgdHIuY2hpbGQodGQpO1xuICAgICAgICB0Ym9keS5jaGlsZCh0cik7XG4gICAgfVxuXG4gICAgdGFibGUuY2hpbGQodGJvZHkpO1xuICAgIHRhYmxlRG9tID0gdGFibGUuZWw7XG5cbiAgICByZXR1cm4gdGFibGVEb207XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzKHRhYmxlRG9tLCBzdHlsZURvbSA9IFwiXCIpIHtcbiAgICBsZXQge2VsLCBkYXRhfSA9IHRoaXM7XG4gICAgZGF0YS5oaXN0b3J5LmFkZChkYXRhLmdldERhdGEoKSk7XG4gICAgZWwuY2hpbGQodGFibGVEb20pO1xuICAgIEdldEluZm9Gcm9tVGFibGUuY2FsbCh0aGlzLCB0YWJsZURvbSk7XG4gICAgdGFibGVEb20ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWJsZURvbSk7XG4gICAgaWYgKHN0eWxlRG9tKSB7XG4gICAgICAgIHN0eWxlRG9tLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVEb20pO1xuICAgIH1cbiAgICBzaGVldFJlc2V0LmNhbGwodGhpcyk7XG59XG5cbmZ1bmN0aW9uIG1vdW50UGFzdGUoZSwgY2IpIHtcbiAgICBsZXQgY2JkID0gZS5jbGlwYm9hcmREYXRhO1xuICAgIGxldCBwID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNiZC5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaXRlbSA9IGNiZC5pdGVtc1tpXTtcbiAgICAgICAgaWYgKGl0ZW0ua2luZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaXRlbS5nZXRBc1N0cmluZygoc3RyKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHREb20gPSBoKCdoZWFkJywgJycpO1xuICAgICAgICAgICAgICAgIGxldCBkID0gaCgnc3BhbicsICcnKTtcbiAgICAgICAgICAgICAgICBpZiAoKHN0ci5pbmRleE9mKCc8c3BhbicpID09PSAtMSAmJiBzdHIuaW5kZXhPZignc3Bhbj4nKSA9PT0gLTEpICYmIChzdHIuaW5kZXhPZignPHRhYmxlJykgPT09IC0xICYmIHN0ci5pbmRleE9mKCd0YWJsZT4nKSA9PT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuaHRtbChzdHIpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RG9tLmNoaWxkKGQuZWwpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RG9tID0gdGV4dERvbS5lbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHREb20uaHRtbChzdHIpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RG9tID0gdGV4dERvbS5lbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGltZ0RvbSA9IHRleHREb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIilbMF07XG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlRG9tID0gdGV4dERvbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpWzBdO1xuICAgICAgICAgICAgICAgIGxldCB0YWJsZURvbSA9IHRleHREb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0YWJsZVwiKVswXTtcbiAgICAgICAgICAgICAgICBsZXQgc3BhbkRvbSA9IHRleHREb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpbWdEb20gJiYgIXN0eWxlRG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50SW1nLmNhbGwodGhpcywgaW1nRG9tKTtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWJsZURvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbkRvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURvbSA9IHNwYW5Eb21QYWNrYWdlLmNhbGwodGhpcywgc3BhbkRvbSwgdGFibGVEb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHtlbH0gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZChzdHlsZURvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlRG9tICYmIHAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7ZWx9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuY2hpbGQodGFibGVEb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXRJbmZvRnJvbVRhYmxlLmNhbGwodGhpcywgdGFibGVEb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYmxlRG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlRG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZURvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGVldFJlc2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZURvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7ZWx9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZChzdHlsZURvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZURvbSAmJiBwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuY2FsbCh0aGlzLCB0YWJsZURvbSwgc3R5bGVEb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5raW5kID09PSBcImZpbGVcIiAmJiAhcCkge1xuICAgICAgICAgICAgbGV0IGYgPSBpdGVtLmdldEFzRmlsZSgpO1xuICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGxldCB7eCwgeSwgb3ZlcmxheWVyRWx9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAvLyBsZXQge3Bhc3RlRGlyZWN0aW9uc0Fycn0gPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IGgoJ2ltZycsICdwYXN0ZS1pbWcnKTtcbiAgICAgICAgICAgICAgICBpbWcuZWwuc3JjID0gZXZ0LnRhcmdldC5yZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRJbWcuY2FsbCh0aGlzLCBpbWcuZWwpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCFmKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoIXApXG4gICAgICAgICAgICBjYigpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCB7ZGF0YX0gPSB0aGlzO1xuICAgICAgICAgICAgZGF0YS5jaGFuZ2UoZGF0YS5nZXREYXRhKCkpO1xuICAgICAgICB9XG4gICAgfSlcbn1cblxuLy8gZnVuY3Rpb24gcHJvY2Vzc0ltZyhpdGVtKSB7XG4vLyAgICAgbGV0IGYgPSBpdGVtLmdldEFzRmlsZSgpO1xuLy8gICAgIGxldCByZWFkZXIgPSBjcmVhdGVkIEZpbGVSZWFkZXIoKTtcbi8vICAgICByZWFkZXIub25sb2FkID0gKGV2dCkgPT4ge1xuLy8gICAgICAgICAvLyBsZXQge3gsIHksIG92ZXJsYXllckVsLCBwYXN0ZURpcmVjdGlvbnNBcnJ9ID0gdGhpcztcbi8vICAgICAgICAgbGV0IGltZyA9IGgoJ2ltZycsICdwYXN0ZS1pbWcnKTtcbi8vICAgICAgICAgaW1nLmVsLnNyYyA9IGV2dC50YXJnZXQucmVzdWx0O1xuLy9cbi8vICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4vLyAgICAgICAgICAgICBpZiAocCkge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybjtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIHAgPSB0cnVlO1xuLy8gICAgICAgICAgICAgbW91bnRJbWcuY2FsbCh0aGlzLCBpbWcuZWwpO1xuLy8gICAgICAgICB9LCAwKTtcbi8vICAgICB9O1xuLy9cbi8vICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmKTtcbi8vIH1cblxuLy8gZnVuY3Rpb24gbW92ZUFycih0b3AsIGxlZnQpIHtcbi8vICAgICBsZXQge3Bhc3RlRGlyZWN0aW9uc0Fycn0gPSB0aGlzLmRhdGE7XG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXN0ZURpcmVjdGlvbnNBcnIubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgICAgbGV0IHAgPSBwYXN0ZURpcmVjdGlvbnNBcnJbaV07XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKHAuaW1nLmVsWydzdHlsZSddLnRvcCwgXCIxMDhcIik7XG4vLyAgICAgICAgIHAuaW1nLmNzcyhcInRvcFwiLCBgJHt0b3AgfXB4YClcbi8vICAgICAgICAgICAgIC5jc3MoXCJsZWZ0XCIsIGAke2xlZnQgIH1weGApXG4vLyAgICAgfVxuLy8gfVxuXG5mdW5jdGlvbiBnZXRNYXhDb29yZChyaSwgY2kpIHtcbiAgICBsZXQgdG9wID0gMDtcbiAgICBsZXQgbGVmdCA9IDA7XG4gICAgbGV0IHtwYXN0ZURpcmVjdGlvbnNBcnJ9ID0gdGhpcy5kYXRhO1xuICAgIGxldCBudW1iZXIgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFzdGVEaXJlY3Rpb25zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwID0gcGFzdGVEaXJlY3Rpb25zQXJyW2ldO1xuICAgICAgICBpZiAocC5yaSA9PT0gcmkgJiYgcC5jaSA9PT0gY2kpIHtcbiAgICAgICAgICAgIGlmIChsZWZ0IDwgcC5uZXh0TGVmdCkge1xuICAgICAgICAgICAgICAgIGxlZnQgPSBwLm5leHRMZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvcCA8IHAubmV4dFRvcCkge1xuICAgICAgICAgICAgICAgIHRvcCA9IHAubmV4dFRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG51bWJlcisrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIG51bWJlcjogbnVtYmVyLFxuICAgIH1cbn1cblxuXG4vLyDliKDmjonkuoYg5YWl5Y+CICAgYWRkID0gdHJ1ZVxuZXhwb3J0IGZ1bmN0aW9uIG1vdW50SW1nKGltZ0RvbSwgaW5pdCA9IGZhbHNlLCBzcmksIHNjaSwgcmFuZ2UpIHtcbiAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5zcmMgPSBpbWdEb20uc3JjO1xuICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgbGV0IHdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgIGxldCBpbWcgPSBpbWdEb207XG4gICAgICAgIGxldCB7Y29udGFpbmVyLCBkYXRhfSA9IHRoaXM7XG4gICAgICAgIGxldCB7cGFzdGVEaXJlY3Rpb25zQXJyfSA9IGRhdGE7XG4gICAgICAgIC8vIGlmIChhZGQpIHtcbiAgICAgICAgLy8gICAgIC8vIGRhdGEuaGlzdG9yeS5hZGRQaWMoT2JqZWN0LmFzc2lnbihbXSwgcGFzdGVEaXJlY3Rpb25zQXJyKSwgXCJkZWxldGVcIik7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBsZXQge3JpLCBjaX0gPSBkYXRhLnNlbGVjdG9yO1xuICAgICAgICBpZiAoaW5pdCkge1xuICAgICAgICAgICAgcmkgPSBzcmk7XG4gICAgICAgICAgICBjaSA9IHNjaTtcbiAgICAgICAgfVxuICAgICAgICBsZXQge3BpY3R1cmVPZmZzZXRMZWZ0LCBwaWN0dXJlT2Zmc2V0VG9wfSA9IHRoaXM7XG5cbiAgICAgICAgY29uc3QgcmVjdCA9IGRhdGEuZ2V0TW92ZVJlY3QobmV3IENlbGxSYW5nZShyaSwgY2ksIHJpLCBjaSkpO1xuICAgICAgICBsZXQgbGVmdCA9IHJlY3QubGVmdCArIHBpY3R1cmVPZmZzZXRMZWZ0O1xuICAgICAgICBsZXQgdG9wID0gcmVjdC50b3AgKyBwaWN0dXJlT2Zmc2V0VG9wO1xuICAgICAgICBsZXQgbnVtYmVyID0gMDtcbiAgICAgICAgbGV0IGNob29zZSA9IGdldENob29zZUltZy5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAoY2hvb3NlKSB7XG4gICAgICAgICAgICBsZXQgYXJncyA9IGdldE1heENvb3JkLmNhbGwodGhpcywgY2hvb3NlLnJpLCBjaG9vc2UuY2kpO1xuICAgICAgICAgICAgbGVmdCA9IGFyZ3MubGVmdDtcbiAgICAgICAgICAgIHRvcCA9IGFyZ3MudG9wO1xuICAgICAgICAgICAgcmkgPSBjaG9vc2Uucmk7XG4gICAgICAgICAgICBjaSA9IGNob29zZS5jaTtcbiAgICAgICAgICAgIG51bWJlciA9IGFyZ3MubnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRpdiA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tb2JqZWN0LWNvbnRhaW5lcmApXG4gICAgICAgICAgICAuY3NzKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxuICAgICAgICAgICAgLmNzcyhcInRvcFwiLCBgJHt0b3B9cHhgKVxuICAgICAgICAgICAgLmNzcyhcIndpZHRoXCIsIGAke3dpZHRofXB4YClcbiAgICAgICAgICAgIC5jc3MoXCJoZWlnaHRcIiwgYCR7aGVpZ2h0fXB4YClcbiAgICAgICAgICAgIC5jc3MoXCJ6LWluZGV4XCIsIGAxMDAwMDBgKVxuICAgICAgICAgICAgLmNzcyhcImxlZnRcIiwgYCR7bGVmdH1weGApXG4gICAgICAgICAgICAuY2hpbGQoaW1nKTtcbiAgICAgICAgY29udGFpbmVyLmNoaWxkKGRpdik7XG4gICAgICAgIG5ldyBEcmFnKGRyYWdPcHRpb24sIHRoaXMpLnJlZ2lzdGVyKGRpdi5lbCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHtkYXRhfSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgZGlyZWN0aW9uc0FyciA9IG5ldyBSZXNpemUocmVzaXplT3B0aW9uLCB0aGlzKS5yZWdpc3RlcihkaXYuZWwpO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gcGFzdGVEaXJlY3Rpb25zQXJyLmxlbmd0aDtcblxuICAgICAgICAgICAgcGFzdGVEaXJlY3Rpb25zQXJyLnB1c2goe1xuICAgICAgICAgICAgICAgIFwic3JjXCI6IGltZy5zcmMsXG4gICAgICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiYXJyXCI6IGRpcmVjdGlvbnNBcnIsXG4gICAgICAgICAgICAgICAgXCJpbWdcIjogZGl2LFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogaW5kZXgsXG4gICAgICAgICAgICAgICAgXCJpbWcyXCI6IGltZyxcbiAgICAgICAgICAgICAgICBcInJpXCI6IHJpLFxuICAgICAgICAgICAgICAgIFwiY2lcIjogY2ksXG4gICAgICAgICAgICAgICAgXCJvZmZzZXRMZWZ0XCI6IDAsXG4gICAgICAgICAgICAgICAgXCJvZmZzZXRUb3BcIjogMCxcbiAgICAgICAgICAgICAgICBcIm51bWJlclwiOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgXCJyYW5nZVwiOiBpbml0ID8gcmFuZ2UgOiBkYXRhLnNlbGVjdG9yLnJhbmdlLFxuICAgICAgICAgICAgICAgIFwidG9wXCI6IHRvcCxcbiAgICAgICAgICAgICAgICBcImxlZnRcIjogbGVmdCxcbiAgICAgICAgICAgICAgICBcIm5leHRMZWZ0XCI6IGxlZnQgKyAxNSxcbiAgICAgICAgICAgICAgICBcIm5leHRUb3BcIjogdG9wICsgMTUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghaW5pdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jaGFuZ2UodGhpcy5kYXRhLmdldERhdGEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBkaXYuY3NzKFwid2lkdGhcIiwgYCR7aW1nLm9mZnNldFdpZHRofXB4YCk7XG4gICAgICAgICAgICBkaXYuY3NzKFwiaGVpZ2h0XCIsIGAke2ltZy5vZmZzZXRIZWlnaHR9cHhgKTtcbiAgICAgICAgICAgIGNvbnRhaW5lckhhbmRsZXJFdmVudC5jYWxsKHRoaXMsIGRpcmVjdGlvbnNBcnIsIGluZGV4LCBwYXN0ZURpcmVjdGlvbnNBcnIsIGluaXQpO1xuICAgICAgICAgICAgZGl2Lm9uKCdtb3VzZWRvd24nLCAoKSA9PiBjb250YWluZXJIYW5kbGVyRXZlbnQuY2FsbCh0aGlzLCBkaXJlY3Rpb25zQXJyLCBpbmRleCwgcGFzdGVEaXJlY3Rpb25zQXJyKSk7XG4gICAgICAgIH0sIDApO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhpZGVEaXJlY3Rpb25BcnIoKSB7XG4gICAgbGV0IHtwYXN0ZURpcmVjdGlvbnNBcnJ9ID0gdGhpcy5kYXRhO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgaWYgKHBhc3RlRGlyZWN0aW9uc0Fyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFzdGVEaXJlY3Rpb25zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYXJyID0gcGFzdGVEaXJlY3Rpb25zQXJyW2ldLmFycjtcbiAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFycltqXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhc3RlRGlyZWN0aW9uc0FycltpXS5zdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcGFzdGVEaXJlY3Rpb25zQXJyW2ldLmltZy5jc3MoXCJ6LWluZGV4XCIsIFwiMTAwMDBcIik7XG4gICAgICAgICAgICBwYXN0ZURpcmVjdGlvbnNBcnJbaV0uaW1nMi5zdHlsZVsnYm9yZGVyJ10gPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVsZXRlSW1nKGQgPSBmYWxzZSkge1xuICAgIGxldCB7cGFzdGVEaXJlY3Rpb25zQXJyfSA9IHRoaXMuZGF0YTtcbiAgICBsZXQgZGlyZWN0aW9uX25ldyA9IFtdO1xuICAgIGxldCBkaXJlY3Rpb25fZGVsZXRlID0gW107XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmYWxzZTtcbiAgICBpZiAocGFzdGVEaXJlY3Rpb25zQXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXN0ZURpcmVjdGlvbnNBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwYXN0ZURpcmVjdGlvbnNBcnJbaV0uc3RhdGUgPT09IHRydWUgfHwgZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbl9kZWxldGUucHVzaChwYXN0ZURpcmVjdGlvbnNBcnJbaV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb25fbmV3LnB1c2gocGFzdGVEaXJlY3Rpb25zQXJyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKGRpcmVjdGlvbl9kZWxldGUpLmZvckVhY2goaSA9PiB7XG4gICAgICAgIGRpcmVjdGlvbl9kZWxldGVbaV0uaW1nLnJlbW92ZUVsKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnBhc3RlRGlyZWN0aW9uc0FyciA9IGRpcmVjdGlvbl9uZXc7XG5cbiAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICBkYXRhLnBhc3RlRGlyZWN0aW9uc0FyciA9IGRpcmVjdGlvbl9uZXc7XG4gICAgZGF0YS5jaGFuZ2UoZGF0YS5nZXREYXRhKCkpO1xufVxuXG4vLyBmdW5jdGlvbiBkZWxldGVBbGxJbWcoKSB7XG4vLyAgICAgbGV0IHtwYXN0ZURpcmVjdGlvbnNBcnJ9ID0gdGhpcy5kYXRhO1xuLy8gICAgIGxldCBkaXJlY3Rpb25fbmV3ID0gW107XG4vLyAgICAgbGV0IGRpcmVjdGlvbl9kZWxldGUgPSBbXTtcbi8vICAgICB0aGlzLmRpcmVjdGlvbiA9IGZhbHNlO1xuLy8gICAgIGlmIChwYXN0ZURpcmVjdGlvbnNBcnIubGVuZ3RoID4gMCkge1xuLy8gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3RlRGlyZWN0aW9uc0Fyci5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICAgICAgZGlyZWN0aW9uX2RlbGV0ZS5wdXNoKHBhc3RlRGlyZWN0aW9uc0FycltpXSk7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vL1xuLy8gICAgIE9iamVjdC5rZXlzKHBhc3RlRGlyZWN0aW9uc0FycikuZm9yRWFjaChpID0+IHtcbi8vICAgICAgICAgZGlyZWN0aW9uX2RlbGV0ZVtpXS5pbWcucmVtb3ZlRWwoKTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgdGhpcy5wYXN0ZURpcmVjdGlvbnNBcnIgPSBkaXJlY3Rpb25fbmV3O1xuLy8gfVxuXG5mdW5jdGlvbiBjb250YWluZXJIYW5kbGVyRXZlbnQoZGlyZWN0aW9uc0FyciwgaW5kZXgsIHBhc3RlRGlyZWN0aW9uc0FyciwgaW5pdCkge1xuICAgIGhpZGVEaXJlY3Rpb25BcnIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IHRydWU7XG4gICAgT2JqZWN0LmtleXMoZGlyZWN0aW9uc0FycikuZm9yRWFjaChpID0+IHtcbiAgICAgICAgZGlyZWN0aW9uc0FycltpXS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9KTtcblxuICAgIGxldCB7c2VsZWN0b3IsIGVkaXRvcn0gPSB0aGlzO1xuICAgIGlmICghaW5pdCkge1xuICAgICAgICBzZWxlY3Rvci5oaWRlKCk7XG4gICAgICAgIGVkaXRvci5jbGVhcigpO1xuXG4gICAgICAgIHBhc3RlRGlyZWN0aW9uc0FycltpbmRleF0uaW1nLmNzcyhcInotaW5kZXhcIiwgXCI5OTk5OTk5OVwiKTtcbiAgICAgICAgcGFzdGVEaXJlY3Rpb25zQXJyW2luZGV4XS5zdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGlkZURpcmVjdGlvbkFyci5jYWxsKHRoaXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZXF1YWxzKHgsIHkpIHtcbiAgICBsZXQgZjEgPSB4IGluc3RhbmNlb2YgT2JqZWN0O1xuICAgIGxldCBmMiA9IHkgaW5zdGFuY2VvZiBPYmplY3Q7XG4gICAgaWYgKCFmMSB8fCAhZjIpIHtcbiAgICAgICAgcmV0dXJuIHggPT09IHlcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHgpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoeSkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBsZXQgbmV3WCA9IE9iamVjdC5rZXlzKHgpO1xuICAgIGZvciAobGV0IHAgaW4gbmV3WCkge1xuICAgICAgICBwID0gbmV3WFtwXTtcbiAgICAgICAgbGV0IGEgPSB4W3BdIGluc3RhbmNlb2YgT2JqZWN0O1xuICAgICAgICBsZXQgYiA9IHlbcF0gaW5zdGFuY2VvZiBPYmplY3Q7XG4gICAgICAgIGlmIChhICYmIGIpIHtcbiAgICAgICAgICAgIGxldCBlcXVhbCA9IGVxdWFscyh4W3BdLCB5W3BdKTtcbiAgICAgICAgICAgIGlmICghZXF1YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXF1YWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh4W3BdICE9PSB5W3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hhdmVTdHlsZShzdHlsZXMsIHN0eWxlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGVxdWFscyhzdHlsZXNbaV0sIHN0eWxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG5cbmZ1bmN0aW9uIEdldEluZm9Gcm9tVGFibGUodGFibGVPYmopIHsgLy8gY2xhc3MgQ2xpcGJvYXJkVGFibGVQcm94eTsgLnRhYmxlRG9tIOWxnuaApyAgLmRlYWxDb2xTcGFuKCkgWzQ3N340ODNdLCBkZWFsU3R5bGUoKSwgZGVhbFJlZmVycmVuY2UoKe+8jCDmnIDnu4jlvpfliLByb3cy77ybIHNoZWV05bGC6Z2i5LiK77ya77yIMe+8ieWinuWKoOihjOS4juWIl+OAgu+8iDLvvIlzZXRDZWxsUmFuZ2Xlj5jmm7TlgLzjgILvvIgz77yJ57uZ5Ye66buP6LS06YCJ6aG5XG4gICAgbGV0IHtkYXRhfSA9IHRoaXM7XG4gICAgbGV0IHtyaSwgY2l9ID0gZGF0YS5zZWxlY3RvcjtcbiAgICBsZXQgc3R5bGVzID0gZGF0YS5zdHlsZXM7XG4gICAgY29uc29sZS50aW1lKFwicGFzdGVcIik7XG4gICAgbGV0IHRhYmxlUHJveHkgPSBuZXcgVGFibGVQcm94eShkYXRhKTtcblxuICAgIHRhYmxlUHJveHkuZXh0ZW5kKHRhYmxlT2JqLCB7cmksIGNpfSk7XG4gICAgdGFibGVQcm94eS5kZWFsQ29sU3Bhbih0YWJsZU9iaik7XG4gICAgdGFibGVQcm94eS5kZWFsU3R5bGUodGFibGVPYmosIHtyaSwgY2l9KTtcbiAgICBsZXQge3JlZmVyZW5jZX0gPSB0YWJsZVByb3h5LmRlYWxSZWZlcmVuY2UodGFibGVPYmosIHtyaSwgY2l9KTtcbiAgICB0aGlzLnNldENlbGxSYW5nZShyZWZlcmVuY2UsIHRhYmxlUHJveHksIHRydWUsIHRhYmxlUHJveHkucGFyc2VUYWJsZUNlbGxSYW5nZSh0YWJsZU9iaiwge3JpLCBjaX0pKTtcblxuICAgIGNvbnN0IHJlY3QgPSBkYXRhLmdldFNlbGVjdGVkUmVjdCgpO1xuICAgIGxldCBsZWZ0ID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCArIDYwO1xuICAgIGxldCB0b3AgPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0ICsgMzE7XG4gICAgbGV0IHthZHZpY2UsIGVkaXRvcn0gPSB0aGlzO1xuICAgIGVkaXRvci5jbGVhcigpO1xuICAgIGFkdmljZS5zaG93KGxlZnQsIHRvcCwgMSwgcmVmZXJlbmNlLCB0YWJsZVByb3h5KTtcbiAgICBjb25zb2xlLnRpbWVFbmQoXCJwYXN0ZVwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByb3dzOiBkYXRhLnJvd3MuXyxcbiAgICAgICAgc3R5bGVzOiBzdHlsZXNcbiAgICB9O1xufVxuXG4vLyBmdW5jdGlvbiBwYXN0ZVR5cGUodHlwZSwgZHMsIGRlaSkge1xuLy8gICAgIGlmICh0eXBlID09PSAxKSB7XG4vL1xuLy8gICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMikge1xuLy8gICAgICAgICB4eTJleHByKGRzWzBdICsgZGVpLCBkc1sxXSwgMik7XG4vLyAgICAgfVxuLy8gfVxuXG5leHBvcnQge1xuICAgIG1vdW50UGFzdGUsXG4gICAgaGlkZURpcmVjdGlvbkFycixcbiAgICBkZWxldGVJbWcsXG4gICAgLy8gbW92ZUFycixcbiAgICAvLyBkZWxldGVBbGxJbWcsXG4gICAgR2V0SW5mb0Zyb21UYWJsZSxcbn1cblxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHtiaW5kLCBiaW5kVG91Y2gsIG1vdXNlTW92ZVVwLCByZW1vdmV9IGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IFJlc2l6ZXIgZnJvbSAnLi9yZXNpemVyJztcbmltcG9ydCBTY3JvbGxiYXIgZnJvbSAnLi9zY3JvbGxiYXInO1xuaW1wb3J0IFNlbGVjdG9yIGZyb20gJy4vc2VsZWN0b3InO1xuaW1wb3J0IEVkaXRvciBmcm9tICcuL2VkaXRvcic7XG5pbXBvcnQgQ29udGV4dE1lbnUgZnJvbSAnLi9jb250ZXh0bWVudSc7XG5pbXBvcnQgVGFibGUgZnJvbSAnLi90YWJsZSc7XG5pbXBvcnQgVG9vbGJhciBmcm9tICcuL3Rvb2xiYXInO1xuaW1wb3J0IE1vZGFsVmFsaWRhdGlvbiBmcm9tICcuL21vZGFsX3ZhbGlkYXRpb24nO1xuaW1wb3J0IFNvcnRGaWx0ZXIgZnJvbSAnLi9zb3J0X2ZpbHRlcic7XG5pbXBvcnQge3h0b2FzdH0gZnJvbSAnLi9tZXNzYWdlJztcbmltcG9ydCB7Y3NzUHJlZml4LCBvZmZzZXRMZWZ0LCBvZmZzZXRUb3B9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge2ZuTmFtZUFycmF5V2l0aEtleX0gZnJvbSAnLi4vY2FsYy9jYWxjX2NtZC9mb3JtdWxhJztcbmltcG9ydCB7Z2V0Rm9udFNpemVQeEJ5UHR9IGZyb20gXCIuLi9jb3JlL2ZvbnRcIjtcbi8vIGltcG9ydCB7YmFzZUZvcm1hdHMsIG11bHRpcGx5fSBmcm9tIFwiLi4vY29yZS9mb3JtYXRcIjtcbmltcG9ydCBBZHZpY2UgZnJvbSBcIi4uL2NvbXBvbmVudC9hZHZpY2VcIjtcbmltcG9ydCB7Y2xlYXJTZWxlY3RvcnMsIGVkaXRpbmdTZWxlY3RvcnMsIGxvY2tDZWxscywgbWFrZVNlbGVjdG9yfSBmcm9tIFwiLi4vY29tcG9uZW50L2Zvcm11bGFfZWRpdG9yXCI7XG5pbXBvcnQge2RlbGV0ZUltZywgaGlkZURpcmVjdGlvbkFyciwgbW91bnRQYXN0ZX0gZnJvbSBcIi4uL2V2ZW50L3Bhc3RlXCI7XG5pbXBvcnQge2dldENob29zZUltZywgbW91bnRDb3B5fSBmcm9tIFwiLi4vZXZlbnQvY29weVwiO1xuaW1wb3J0IFdlYnNpdGUgZnJvbSBcIi4uL2NvbXBvbmVudC93ZWJzaXRlXCI7XG5pbXBvcnQge2N1dFN0ciwgY3V0dGluZ0J5UG9zLCBkZWVwQ29weX0gZnJvbSBcIi4uL2NvcmUvb3BlcmF0b3JcIjtcbmltcG9ydCB7bW92ZUNlbGx9IGZyb20gXCIuLi9ldmVudC9tb3ZlXCI7XG5pbXBvcnQgQ2VsbFJhbmdlIGZyb20gXCIuLi9jb3JlL2NlbGxfcmFuZ2VcIjtcbmltcG9ydCB7aXNIYXZlLCBpc091c2lkZVZpZXdSYW5nZX0gZnJvbSBcIi4uL2hlbHBlci9kYXRhcHJveHlfaGVscGVyXCI7XG5pbXBvcnQge2V4cHIyeHl9IGZyb20gXCIuLi91dGlscy9hbHBoYWJldFwiO1xuaW1wb3J0IEVycm9yUG9wVXAgZnJvbSBcIi4vZXJyb3JfcG9wX3VwXCI7XG5pbXBvcnQgUmVjdFByb3h5IGZyb20gXCIuLi9jb3JlL3JlY3RfcHJveHlcIjtcbmltcG9ydCB7dGVzdFZhbGlkfSBmcm9tIFwiLi4vdXRpbHMvdGVzdFwiO1xuaW1wb3J0IFRpbWVyIGZyb20gXCIuLi9tb2RlbC9UaW1lclwiO1xuaW1wb3J0IFByZUFjdGlvbiBmcm9tIFwiLi4vbW9kZWwvcHJlX2FjdGlvblwiO1xuXG5mdW5jdGlvbiBzY3JvbGxiYXJNb3ZlKCkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YSwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgICBsLCB0LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgfSA9IGRhdGEuZ2V0U2VsZWN0ZWRSZWN0KCk7XG4gICAgY29uc3QgdGFibGVPZmZzZXQgPSB0aGlzLmdldFRhYmxlT2Zmc2V0KCk7XG4gICAgLy8gY29uc29sZS5sb2coJyxsOicsIGwsICcsIGxlZnQ6JywgbGVmdCwgJywgdE9mZnNldC5sZWZ0OicsIHRhYmxlT2Zmc2V0LndpZHRoKTtcblxuICAgIGlmIChNYXRoLmFicyhsZWZ0KSArIHdpZHRoID4gdGFibGVPZmZzZXQud2lkdGgpIHtcbiAgICAgICAgaG9yaXpvbnRhbFNjcm9sbGJhci5tb3ZlKHtsZWZ0OiBsICsgd2lkdGggLSB0YWJsZU9mZnNldC53aWR0aH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGZzdyA9IGRhdGEuZnJlZXplVG90YWxXaWR0aCgpO1xuICAgICAgICBpZiAobGVmdCA8IGZzdykge1xuICAgICAgICAgICAgaG9yaXpvbnRhbFNjcm9sbGJhci5tb3ZlKHtsZWZ0OiBsIC0gMSAtIGZzd30pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCd0b3A6JywgdG9wLCAnLCBoZWlnaHQ6JywgaGVpZ2h0LCAnLCB0b2YuaGVpZ2h0OicsIHRhYmxlT2Zmc2V0LmhlaWdodCk7XG4gICAgaWYgKE1hdGguYWJzKHRvcCAqIDEpICsgaGVpZ2h0ID4gdGFibGVPZmZzZXQuaGVpZ2h0KSB7XG4gICAgICAgIHZlcnRpY2FsU2Nyb2xsYmFyLm1vdmUoe3RvcDogdCArIGhlaWdodCAtIHRhYmxlT2Zmc2V0LmhlaWdodCAtIDF9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmc2ggPSBkYXRhLmZyZWV6ZVRvdGFsSGVpZ2h0KCk7XG4gICAgICAgIGlmICh0b3AgPCBmc2gpIHtcbiAgICAgICAgICAgIHZlcnRpY2FsU2Nyb2xsYmFyLm1vdmUoe3RvcDogdCAtIDEgLSBmc2h9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JTZXQobXVsdGlwbGUsIHJpLCBjaSwgaW5kZXhlc1VwZGF0ZWQgPSB0cnVlLCBtb3ZpbmcgPSBmYWxzZSkge1xuICAgIGlmIChyaSA9PT0gLTEgJiYgY2kgPT09IC0xKSByZXR1cm47XG4gICAgLy8gY29uc29sZS5sb2cobXVsdGlwbGUsICcsIHJpOicsIHJpLCAnLCBjaTonLCBjaSk7XG4gICAgY29uc3Qge1xuICAgICAgICB0YWJsZSwgc2VsZWN0b3IsIHRvb2xiYXIsXG4gICAgfSA9IHRoaXM7XG4gICAgLyoqXG4gICAgICogQHR5cGUge1RhYmxlfSB0YWJsZVxuICAgICAqL1xuXG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIHNlbGVjdG9yLnNldEVuZChyaSwgY2ksIG1vdmluZywgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0b3Iuc2V0KHJpLCBjaSwgaW5kZXhlc1VwZGF0ZWQpO1xuICAgIH1cblxuICAgIHRvb2xiYXIucmVzZXQoKTtcblxuICAgIC8vIGFkZFxuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbmRlcl90aW1lcik7XG5cbiAgICB0aGlzLnJlbmRlcl90aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge1RhYmxlfSB0YWJsZVxuICAgICAgICAgKi9cbiAgICAgICAgdGFibGUucmVuZGVyKCk7XG4gICAgfSwgMTAwKTtcbn1cblxuLy8gbXVsdGlwbGU6IGJvb2xlYW5cbi8vIGRpcmVjdGlvbjogbGVmdCB8IHJpZ2h0IHwgdXAgfCBkb3duIHwgcm93LWZpcnN0IHwgcm93LWxhc3QgfCBjb2wtZmlyc3QgfCBjb2wtbGFzdFxuZnVuY3Rpb24gc2VsZWN0b3JNb3ZlKG11bHRpcGxlLCBkaXJlY3Rpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNlbGVjdG9yLCBkYXRhLCBlZGl0b3JcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCB7cm93cywgY29sc30gPSBkYXRhO1xuICAgIGlmIChlZGl0b3IuaXNDb3JzKSB7XG4gICAgICAgIHNlbGVjdG9yLmluZGV4ZXMgPSBbZWRpdG9yLnJpLCBlZGl0b3IuY2ldO1xuICAgIH1cbiAgICBsZXQgW3JpLCBjaV0gPSBzZWxlY3Rvci5pbmRleGVzO1xuICAgIGNvbnN0IHsgZWNpfSA9IHNlbGVjdG9yLnJhbmdlO1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICBbcmksIGNpXSA9IHNlbGVjdG9yLm1vdmVJbmRleGVzO1xuICAgIH1cblxuXG4gICAgLy8gY29uc29sZS5sb2coXCI5MlwiLCByaSwgY2ksIGVkaXRvci5yaSwgZWRpdG9yLmNpKVxuICAgIC8vIGlmKChlZGl0b3IucmkgIT0gcmkgJiYgZWRpdG9yLnJpICE9IC0xKSB8fCAoZWRpdG9yLmNpICE9IGNpICYmIGVkaXRvci5jaSAhPSAtMSkpIHtcbiAgICAvLyAgICAgcmV0dXJuO1xuICAgIC8vIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKCdzZWxlY3Rvci5tb3ZlOicsIHJpLCBjaSk7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIGlmIChjaSA+IDApIGNpIC09IDE7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgaWYgKGVjaSAhPT0gY2kpIGNpID0gZWNpO1xuICAgICAgICBpZiAoY2kgPCBjb2xzLmxlbiAtIDEpIGNpICs9IDE7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgaWYgKHJpID4gMCkgcmkgLT0gMTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgIC8vIGlmIChlcmkgIT09IHJpKSByaSA9IGVyaTtcbiAgICAgICAgaWYgKHJpIDwgcm93cy5sZW4gLSAxKSByaSArPSAxO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncm93LWZpcnN0Jykge1xuICAgICAgICBjaSA9IDA7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyb3ctbGFzdCcpIHtcbiAgICAgICAgY2kgPSBjb2xzLmxlbiAtIDE7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdjb2wtZmlyc3QnKSB7XG4gICAgICAgIHJpID0gMDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2NvbC1sYXN0Jykge1xuICAgICAgICByaSA9IHJvd3MubGVuIC0gMTtcbiAgICB9XG5cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgc2VsZWN0b3IubW92ZUluZGV4ZXMgPSBbcmksIGNpXTtcbiAgICB9XG4gICAgc2VsZWN0b3Iuc2VsZWN0Q2VsbC5zZXREYXRhKHJpLCBjaSk7XG4gICAgc2VsZWN0b3Iuc2VsZWN0Q2VsbC5yZXNldFNlbGVjdE9mZnNldCgpO1xuICAgIHNlbGVjdG9yU2V0LmNhbGwodGhpcywgbXVsdGlwbGUsIHJpLCBjaSk7XG4gICAgLy8gZWRpdG9yLmNsZWFyKCk7XG5cbiAgICBlZGl0b3JTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbiAgICBzY3JvbGxiYXJNb3ZlLmNhbGwodGhpcyk7XG59XG5cbi8vIHByaXZhdGUgbWV0aG9kc1xuZnVuY3Rpb24gb3ZlcmxheWVyTW91c2Vtb3ZlKGV2dCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCd4OicsIGV2dC5vZmZzZXRYLCAnLCB5OicsIGV2dC5vZmZzZXRZKTtcbiAgICBpZiAoZXZ0LmJ1dHRvbnMgIT09IDApIHJldHVybjtcbiAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc05hbWUgPT09IGAke2Nzc1ByZWZpeH0tcmVzaXplci1ob3ZlcmApIHJldHVybjtcbiAgICBjb25zdCB7b2Zmc2V0WCwgb2Zmc2V0WX0gPSBldnQ7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHJvd1Jlc2l6ZXIsIGNvbFJlc2l6ZXIsIHRhYmxlRWwsIGRhdGEsIHdlYnNpdGVcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBjUmVjdCA9IGRhdGEuZ2V0Q2VsbFJlY3RCeVhZKGV2dC5vZmZzZXRYLCBldnQub2Zmc2V0WSk7XG5cbiAgICAvLyBtb3ZlQ2VsbC5jYWxsKHRoaXMpO1xuXG4gICAgLy8gdXJsIOWxleW8gFxuICAgIHdlYnNpdGUuc2hvdyhjUmVjdC5yaSwgY1JlY3QuY2kpO1xuICAgIGNvbnN0IHtyb3dzLCBjb2xzfSA9IGRhdGE7XG4gICAgaWYgKG9mZnNldFggPiBjb2xzLmluZGV4V2lkdGggJiYgb2Zmc2V0WSA+IHJvd3MuaGVpZ2h0KSB7XG4gICAgICAgIHJvd1Jlc2l6ZXIuaGlkZSgpO1xuICAgICAgICBjb2xSZXNpemVyLmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0UmVjdCA9IHRhYmxlRWwuYm94KCk7XG4gICAgaWYgKGNSZWN0LnJpID49IDAgJiYgY1JlY3QuY2kgPT09IC0xKSB7XG4gICAgICAgIGNSZWN0LndpZHRoID0gY29scy5pbmRleFdpZHRoO1xuICAgICAgICByb3dSZXNpemVyLnNob3coY1JlY3QsIHtcbiAgICAgICAgICAgIHdpZHRoOiB0UmVjdC53aWR0aCxcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm93UmVzaXplci5oaWRlKCk7XG4gICAgfVxuICAgIGlmIChjUmVjdC5yaSA9PT0gLTEgJiYgY1JlY3QuY2kgPj0gMCkge1xuICAgICAgICBjUmVjdC5oZWlnaHQgPSByb3dzLmhlaWdodDtcbiAgICAgICAgY29sUmVzaXplci5zaG93KGNSZWN0LCB7XG4gICAgICAgICAgICBoZWlnaHQ6IHRSZWN0LmhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29sUmVzaXplci5oaWRlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvdmVybGF5ZXJNb3VzZXNjcm9sbChldnQpIHtcbiAgICBjb25zdCB7dmVydGljYWxTY3JvbGxiYXIsIGRhdGF9ID0gdGhpcztcbiAgICBjb25zdCB7YXV0b0xvYWR9ID0gZGF0YS5zZXR0aW5ncztcbiAgICBjb25zdCB7dG9wfSA9IHZlcnRpY2FsU2Nyb2xsYmFyLnNjcm9sbCgpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdldnQ6OjonLCBldnQud2hlZWxEZWx0YSwgZXZ0LmRldGFpbCAqIDQwKTtcbiAgICBsZXQgZGVsdGEgPSBldnQuZGVsdGFZO1xuICAgIGNvbnN0IHtyb3dzfSA9IGRhdGE7XG4gICAgaWYgKGV2dC5kZXRhaWwpIGRlbHRhID0gZXZ0LmRldGFpbCAqIDQwO1xuICAgIGlmIChkZWx0YSA+IDAgJiYgYXV0b0xvYWQgPT09IHRydWUpIHtcbiAgICAgICAgLy8gdXBcbiAgICAgICAgY29uc3QgcmkgPSBkYXRhLnNjcm9sbC5yaSArIDE7XG4gICAgICAgIGlmIChyaSA8IHJvd3MubGVuKSB7XG4gICAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbGJhci5tb3ZlKHt0b3A6IHRvcCArIHJvd3MuZ2V0SGVpZ2h0KHJpKSAtIDF9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXV0b0xvYWQgPT09IHRydWUpIHtcbiAgICAgICAgLy8gZG93blxuICAgICAgICBjb25zdCByaSA9IGRhdGEuc2Nyb2xsLnJpIC0gMTtcbiAgICAgICAgaWYgKHJpID49IDApIHtcbiAgICAgICAgICAgIHZlcnRpY2FsU2Nyb2xsYmFyLm1vdmUoe3RvcDogcmkgPT09IDAgPyAwIDogdG9wIC0gcm93cy5nZXRIZWlnaHQocmkpfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG92ZXJsYXllclRvdWNoKGRpcmVjdGlvbiwgZGlzdGFuY2UpIHtcbiAgICBjb25zdCB7dmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXJ9ID0gdGhpcztcbiAgICBjb25zdCB7dG9wfSA9IHZlcnRpY2FsU2Nyb2xsYmFyLnNjcm9sbCgpO1xuICAgIGNvbnN0IHtsZWZ0fSA9IGhvcml6b250YWxTY3JvbGxiYXIuc2Nyb2xsKCk7XG4gICAgLy8gY29uc29sZS5sb2coJ2RpcmVjdGlvbjonLCBkaXJlY3Rpb24sICcsIGRpc3RhbmNlOicsIGRpc3RhbmNlLCBsZWZ0KTtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIGhvcml6b250YWxTY3JvbGxiYXIubW92ZSh7bGVmdDogbGVmdCAtIGRpc3RhbmNlfSk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICd1cCcgfHwgZGlyZWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgdmVydGljYWxTY3JvbGxiYXIubW92ZSh7dG9wOiB0b3AgLSBkaXN0YW5jZX0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdmVydGljYWxTY3JvbGxiYXJTZXQoKSB7XG4gICAgY29uc3Qge2RhdGEsIHZlcnRpY2FsU2Nyb2xsYmFyfSA9IHRoaXM7XG4gICAgY29uc3Qge2hlaWdodH0gPSB0aGlzLmdldFRhYmxlT2Zmc2V0KCk7XG4gICAgdmVydGljYWxTY3JvbGxiYXIuc2V0KGhlaWdodCwgZGF0YS5yb3dzLnRvdGFsSGVpZ2h0KCkpO1xufVxuXG5mdW5jdGlvbiBob3Jpem9udGFsU2Nyb2xsYmFyU2V0KCkge1xuICAgIGNvbnN0IHtkYXRhLCBob3Jpem9udGFsU2Nyb2xsYmFyfSA9IHRoaXM7XG4gICAgY29uc3Qge3dpZHRofSA9IHRoaXMuZ2V0VGFibGVPZmZzZXQoKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBob3Jpem9udGFsU2Nyb2xsYmFyLnNldCh3aWR0aCwgZGF0YS5jb2xzLnRvdGFsV2lkdGgoKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaGVldEZyZWV6ZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNlbGVjdG9yLCBkYXRhLCBlZGl0b3IsXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgW3JpLCBjaV0gPSBkYXRhLmZyZWV6ZTtcbiAgICBpZiAocmkgPiAwIHx8IGNpID4gMCkge1xuICAgICAgICBjb25zdCBmd2lkdGggPSBkYXRhLmZyZWV6ZVRvdGFsV2lkdGgoKTtcbiAgICAgICAgY29uc3QgZmhlaWdodCA9IGRhdGEuZnJlZXplVG90YWxIZWlnaHQoKTtcbiAgICAgICAgZWRpdG9yLnNldEZyZWV6ZUxlbmd0aHMoZndpZHRoLCBmaGVpZ2h0KTtcbiAgICB9XG4gICAgc2VsZWN0b3IucmVzZXRBcmVhT2Zmc2V0KCk7XG59XG5cbmZ1bmN0aW9uIHNoZWV0UmVzZXQoKSB7XG4gICAgLy8gZGVidWdnZXJcbiAgICBjb25zdCB7XG4gICAgICAgIHRhYmxlRWwsXG4gICAgICAgIG92ZXJsYXllckVsLFxuICAgICAgICBvdmVybGF5ZXJDRWwsXG4gICAgICAgIHRhYmxlLFxuICAgICAgICB0b29sYmFyLFxuICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgZWwsXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgdE9mZnNldCA9IHRoaXMuZ2V0VGFibGVPZmZzZXQoKTtcbiAgICBjb25zdCB2UmVjdCA9IHRoaXMuZ2V0UmVjdCgpO1xuICAgIHRhYmxlRWwuYXR0cih2UmVjdCk7XG4gICAgb3ZlcmxheWVyRWwub2Zmc2V0KHZSZWN0KTtcbiAgICBvdmVybGF5ZXJDRWwub2Zmc2V0KHRPZmZzZXQpO1xuICAgIGVsLmNzcygnd2lkdGgnLCBgJHt2UmVjdC53aWR0aH1weGApO1xuICAgIHJlbmRlckF1dG9BZGFwdC5jYWxsKHRoaXMpO1xuICAgIGF1dG9Sb3dSZXNpemVyLmNhbGwodGhpcyk7XG5cbiAgICB2ZXJ0aWNhbFNjcm9sbGJhclNldC5jYWxsKHRoaXMpO1xuICAgIGhvcml6b250YWxTY3JvbGxiYXJTZXQuY2FsbCh0aGlzKTtcbiAgICBzaGVldEZyZWV6ZS5jYWxsKHRoaXMpO1xuICAgIHNlbGVjdG9yLnNlbGVjdENlbGwudG9vbGJhckNoYW5nZVNlbGVjdG9yQ2VsbCgpO1xuICAgIHRhYmxlLnJlbmRlcigpO1xuICAgIHRvb2xiYXIucmVzZXQoKTtcbiAgICBzZWxlY3Rvci5yZXNldCgpO1xufVxuXG5mdW5jdGlvbiBjbGVhckNsaXBib2FyZCgpIHtcbiAgICBjb25zdCB7ZGF0YSwgc2VsZWN0b3J9ID0gdGhpcztcbiAgICBkYXRhLmNsZWFyQ2xpcGJvYXJkKCk7XG4gICAgc2VsZWN0b3IuaGlkZUNsaXBib2FyZCgpO1xufVxuXG5mdW5jdGlvbiBjb3B5KCkge1xuICAgIGNvbnN0IHtkYXRhLCBzZWxlY3Rvcn0gPSB0aGlzO1xuICAgIGRhdGEuY29weSgpO1xuICAgIHNlbGVjdG9yLnNob3dDbGlwYm9hcmQoKTtcbn1cblxuZnVuY3Rpb24gY3V0KCkge1xuICAgIGNvbnN0IHtkYXRhLCBzZWxlY3Rvcn0gPSB0aGlzO1xuICAgIGRhdGEuY3V0KCk7XG4gICAgc2VsZWN0b3Iuc2hvd0NsaXBib2FyZCgpO1xufVxuXG4vLyBjb25zdCBhID0gKCkgPT4ge1xuLy8gfVxuXG5mdW5jdGlvbiBwYXN0ZSh3aGF0LCBjYiA9IChwKSA9PiB7XG4gICAgaWYgKHApIHtcbiAgICAgICAgY2xlYXJDbGlwYm9hcmQuY2FsbCh0aGlzKTtcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xuICAgIH1cbn0pIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgIGxldCBwID0gZGF0YS5wYXN0ZSh3aGF0LCBtc2cgPT4geHRvYXN0KCdUaXAnLCBtc2cpKTtcbiAgICBjYihwKTtcblxuICAgIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBhdXRvZmlsdGVyKCkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgZGF0YS5hdXRvZmlsdGVyKCk7XG4gICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xufVxuXG5mdW5jdGlvbiB0b29sYmFyQ2hhbmdlUGFpbnRmb3JtYXRQYXN0ZSgpIHtcbiAgICBjb25zdCB7dG9vbGJhciwgZGF0YX0gPSB0aGlzO1xuICAgIGlmICh0b29sYmFyLnBhaW50Zm9ybWF0QWN0aXZlKCkpIHtcbiAgICAgICAgLy8gcGFzdGUuY2FsbCh0aGlzLCAnZm9ybWF0Jyk7XG4gICAgICAgIGRhdGEucGFpbnRGb3JtYXRDaGFuZ2UoKHJpLCBjaSkgPT4ge1xuICAgICAgICAgICAgc2VsZWN0b3JTZXQuY2FsbCh0aGlzLCB0cnVlLCByaSwgY2ksIHRydWUsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY2xlYXJDbGlwYm9hcmQuY2FsbCh0aGlzKTtcbiAgICAgICAgdG9vbGJhci5wYWludGZvcm1hdFRvZ2dsZSgpO1xuICAgICAgICB0b29sYmFyLnJlc2V0KCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRQb2ludChvYmopIHsgLy/ojrflj5bmn5DlhYPntKDku6XmtY/op4jlmajlt6bkuIrop5LkuLrljp/ngrnnmoTlnZDmoIdcbiAgICBsZXQgdCA9IG9iai5vZmZzZXRUb3A7IC8v6I635Y+W6K+l5YWD57Sg5a+55bqU54i25a655Zmo55qE5LiK6L656LedXG4gICAgbGV0IGwgPSBvYmoub2Zmc2V0TGVmdDsgLy/lr7nlupTniLblrrnlmajnmoTkuIrovrnot51cbiAgICAvL+WIpOaWreaYr+WQpuacieeItuWuueWZqO+8jOWmguaenOWtmOWcqOWImee0r+WKoOWFtui+uei3nVxuICAgIHdoaWxlIChvYmogPSBvYmoub2Zmc2V0UGFyZW50KSB7Ly/nrYnmlYggb2JqID0gb2JqLm9mZnNldFBhcmVudDt3aGlsZSAob2JqICE9IHVuZGVmaW5lZClcbiAgICAgICAgdCArPSBvYmoub2Zmc2V0VG9wOyAvL+WPoOWKoOeItuWuueWZqOeahOS4iui+uei3nVxuICAgICAgICBsICs9IG9iai5vZmZzZXRMZWZ0OyAvL+WPoOWKoOeItuWuueWZqOeahOW3pui+uei3nVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHQ6IHQsXG4gICAgICAgIGw6IGxcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyb3BEb3duKGUsIGlzQXV0b2ZpbGxFbCwgc2VsZWN0b3IsIGRhdGEsIHZlcnRpY2FsU2Nyb2xsYmFyLCByb3dzLCBldnQsIHBvcyA9IDAsIG9mZnNldCwgaG9yaXpvbnRhbFNjcm9sbGJhciwgY29scykge1xuICAgIHRoaXMuc2VsZWN0b3Iuc2V0Qm94aW5uZXIoXCJub25lXCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmNzcygncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xuICAgIGxldCBkc3RSZWN0ID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFlXaXRoTm90VG90YWxSZXN1bHQoZS5sYXllclggfHwgZS5jbGllbnRYLCBlLmxheWVyWSB8fCBlLmNsaWVudFkpO1xuICAgIGxldCB7cmksIGNpfSA9IGRzdFJlY3Q7XG5cbiAgICBpZiAoaXNBdXRvZmlsbEVsKSB7XG4gICAgICAgIGxldCB7cnBvcywgZXksIGV4LH0gPSBkcm9wR2V0UG9zLmNhbGwodGhpcywgZGF0YSwgc2VsZWN0b3IsIHZlcnRpY2FsU2Nyb2xsYmFyLCBob3Jpem9udGFsU2Nyb2xsYmFyLCBvZmZzZXQsIGUsIHJvd3MsIGNvbHMsIHJpLCBjaSwgcG9zKTtcblxuICAgICAgICBsZXQgb3JpZW4gPSBzZWxlY3Rvci5zaG93QXV0b2ZpbGwocmksIGNpLCBycG9zKTtcbiAgICAgICAgaWYgKGlzT3VzaWRlVmlld1JhbmdlKHRoaXMuZGF0YS5zZXR0aW5ncy52aWV3LmhlaWdodCgpLCB0aGlzLmRhdGEuc2V0dGluZ3Mudmlldy53aWR0aCgpLCBleSwgZXgsIG9yaWVuKSkge1xuICAgICAgICAgICAgLy8gaWYgKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlTW92ZS5jYWxsKHRoaXMsIG9yaWVuLCB2ZXJ0aWNhbFNjcm9sbGJhciwgaG9yaXpvbnRhbFNjcm9sbGJhciwgY29scywgcm93cywgZGF0YSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoZS5idXR0b25zID09PSAxICYmICFlLnNoaWZ0S2V5KSB7XG4gICAgICAgIHJpID0gcmkgPD0gMCA/IDAgOiByaTtcbiAgICAgICAgY2kgPSBjaSA8PSAwID8gMCA6IGNpO1xuICAgICAgICBsZXQgY2VsbCA9IGRhdGEudmlld1JhbmdlKCk7XG4gICAgICAgIGxldCBwb3MgPSBjZWxsLmdldE1vdmVQb3MocmksIGNpKTtcblxuICAgICAgICBzZWxlY3RvckJleW9uZE1vdmUuY2FsbCh0aGlzLCBwb3MsIHZlcnRpY2FsU2Nyb2xsYmFyLCBob3Jpem9udGFsU2Nyb2xsYmFyLCBjb2xzLCByb3dzLCBkYXRhKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcInJpOiBcIiwgcmksIFwiY2k6IFwiLCBjaSk7XG4gICAgICAgIHNlbGVjdG9yU2V0LmNhbGwodGhpcywgdHJ1ZSwgcmksIGNpLCB0cnVlLCB0cnVlKTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gZHJvcEdldFBvcyhkYXRhLCBzZWxlY3RvciwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIG9mZnNldCwgZSwgcm93cywgY29scywgcmksIGNpLCBwb3MpIHtcbiAgICBsZXQgcmVjdCA9IGRhdGEuZ2V0UmVjdChzZWxlY3Rvci5yYW5nZSk7XG4gICAgbGV0IHJlY3RQcm94eSA9IG5ldyBSZWN0UHJveHkocmVjdCk7XG4gICAgbGV0IGNsaWVudFggPSByZWN0LndpZHRoICsgcmVjdC5sZWZ0O1xuICAgIGxldCBjbGllbnRZID0gcmVjdC5oZWlnaHQgKyByZWN0LnRvcCArIG9mZnNldFRvcDtcbiAgICBsZXQgZXggPSBlLmNsaWVudFggLSBvZmZzZXQubCAtIG9mZnNldExlZnQ7XG4gICAgbGV0IGV5ID0gZS5jbGllbnRZO1xuXG4gICAgaWYgKHJlY3RQcm94eS5pc0xvY0luc2lkZShleCwgZXkpKSB7XG4gICAgICAgIHBvcyA9IC0xO1xuICAgICAgICBzZWxlY3Rvci5hcmFuZ2UgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcyA9IHJlY3RQcm94eS5nZXRVcERvd25MZWZ0UmlnaHQoZXgsIGV5LCBjbGllbnRYLCBjbGllbnRZKVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHJwb3M6IHBvcyxcbiAgICAgICAgZXgsXG4gICAgICAgIGV5XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JCZXlvbmRNb3ZlKG9yaWVuLCB2ZXJ0aWNhbFNjcm9sbGJhciwgaG9yaXpvbnRhbFNjcm9sbGJhciwgY29scywgcm93cywgZGF0YSkge1xuICAgIGlmIChvcmllbiA9PT0gMikgeyAgIC8v5b6A5LiLXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgMSwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDYpIHsgICAgLy8g5b6A5LiKXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgMiwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDMpIHsgICAgICAgIC8v5b6A5Y+zXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgNCwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDUpIHsgICAgLy8g5b6A5bemXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgMywgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDEpIHsgLy8g5b6A5LiL5b6A5Y+zXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgMSwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgICAgICBzY3JvbGxUby5jYWxsKHRoaXMsIDQsIHZlcnRpY2FsU2Nyb2xsYmFyLCBob3Jpem9udGFsU2Nyb2xsYmFyLCByb3dzLCBkYXRhLCBjb2xzKTtcbiAgICB9IGVsc2UgaWYgKG9yaWVuID09PSA3KSB7ICAgICAgICAgLy8g5b6A5LiL5b6A5bemXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgMSwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgICAgICBzY3JvbGxUby5jYWxsKHRoaXMsIDMsIHZlcnRpY2FsU2Nyb2xsYmFyLCBob3Jpem9udGFsU2Nyb2xsYmFyLCByb3dzLCBkYXRhLCBjb2xzKTtcbiAgICB9IGVsc2UgaWYgKG9yaWVuID09PSA4KSB7ICAgICAvLyDlvoDkuIrlvoDlj7NcbiAgICAgICAgc2Nyb2xsVG8uY2FsbCh0aGlzLCAyLCB2ZXJ0aWNhbFNjcm9sbGJhciwgaG9yaXpvbnRhbFNjcm9sbGJhciwgcm93cywgZGF0YSwgY29scyk7XG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgNCwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDQpIHsgICAgICAgLy8g5b6A5LiK5b6A5bemXG4gICAgICAgIHNjcm9sbFRvLmNhbGwodGhpcywgMiwgdmVydGljYWxTY3JvbGxiYXIsIGhvcml6b250YWxTY3JvbGxiYXIsIHJvd3MsIGRhdGEsIGNvbHMpO1xuICAgICAgICBzY3JvbGxUby5jYWxsKHRoaXMsIDMsIHZlcnRpY2FsU2Nyb2xsYmFyLCBob3Jpem9udGFsU2Nyb2xsYmFyLCByb3dzLCBkYXRhLCBjb2xzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvKG9yaWVuLCB2ZXJ0aWNhbFNjcm9sbGJhciwgaG9yaXpvbnRhbFNjcm9sbGJhciwgcm93cywgZGF0YSwgY29scykge1xuICAgIGlmIChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpICE9PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gMSDkuIsgMiDkuIogM+W3piA0IOWPs1xuICAgIGxldCByaSA9IDAsIGNpID0gMDtcbiAgICBpZiAob3JpZW4gPT09IDEpIHtcbiAgICAgICAgY29uc3Qge3RvcH0gPSB2ZXJ0aWNhbFNjcm9sbGJhci5zY3JvbGwoKTsgIC8vIOWPr+ingeinhuWbvuS4iui+uee8mOi3neemu3Rvb2xiYXLnmoTlg4/ntKBcbiAgICAgICAgcmkgPSBkYXRhLnNjcm9sbC5yaSArIDE7XG4gICAgICAgIHZlcnRpY2FsU2Nyb2xsYmFyLm1vdmUoe3RvcDogdG9wICsgcm93cy5nZXRIZWlnaHQocmkpIC0gMX0pO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDIpIHtcbiAgICAgICAgY29uc3Qge3RvcH0gPSB2ZXJ0aWNhbFNjcm9sbGJhci5zY3JvbGwoKTtcbiAgICAgICAgcmkgPSBkYXRhLnNjcm9sbC5yaSAtIDE7XG5cbiAgICAgICAgdmVydGljYWxTY3JvbGxiYXIubW92ZSh7dG9wOiByaSA9PT0gMCA/IDAgOiB0b3AgLSByb3dzLmdldEhlaWdodChyaSl9KTtcbiAgICB9IGVsc2UgaWYgKG9yaWVuID09PSA0KSB7XG4gICAgICAgIGNvbnN0IHtsZWZ0fSA9IGhvcml6b250YWxTY3JvbGxiYXIuc2Nyb2xsKCk7XG4gICAgICAgIGNpID0gZGF0YS5zY3JvbGwuY2kgKyAxO1xuICAgICAgICBob3Jpem9udGFsU2Nyb2xsYmFyLm1vdmUoe2xlZnQ6IGxlZnQgKyBjb2xzLmdldFdpZHRoKGNpKX0pO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDMpIHtcbiAgICAgICAgY29uc3Qge2xlZnR9ID0gaG9yaXpvbnRhbFNjcm9sbGJhci5zY3JvbGwoKTtcbiAgICAgICAgY2kgPSBkYXRhLnNjcm9sbC5jaSAtIDE7XG4gICAgICAgIGhvcml6b250YWxTY3JvbGxiYXIubW92ZSh7bGVmdDogbGVmdCAtIGNvbHMuZ2V0V2lkdGgoY2kpfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb250aW51ZU1vdmUob3JpZW4sIHZlcnRpY2FsU2Nyb2xsYmFyLCBob3Jpem9udGFsU2Nyb2xsYmFyLCBjb2xzLCByb3dzLCBkYXRhKSB7XG4gICAgbGV0IHJpID0gMCwgY2kgPSAwO1xuICAgIGlmIChvcmllbiA9PT0gNDQpIHtcbiAgICAgICAgY29uc3Qge3RvcH0gPSB2ZXJ0aWNhbFNjcm9sbGJhci5zY3JvbGwoKTsgIC8vIOWPr+ingeinhuWbvuS4iui+uee8mOi3neemu3Rvb2xiYXLnmoTlg4/ntKBcbiAgICAgICAgcmkgPSBkYXRhLnNjcm9sbC5yaSArIDE7XG4gICAgICAgIHZlcnRpY2FsU2Nyb2xsYmFyLm1vdmUoe3RvcDogdG9wICsgcm93cy5nZXRIZWlnaHQocmkpIC0gMX0pO1xuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDIyKSB7XG4gICAgICAgIGNvbnN0IHt0b3B9ID0gdmVydGljYWxTY3JvbGxiYXIuc2Nyb2xsKCk7XG4gICAgICAgIHJpID0gZGF0YS5zY3JvbGwucmkgLSAxO1xuICAgICAgICBpZiAocmkgPj0gMCkge1xuICAgICAgICAgICAgdmVydGljYWxTY3JvbGxiYXIubW92ZSh7dG9wOiByaSA9PT0gMCA/IDAgOiB0b3AgLSByb3dzLmdldEhlaWdodChyaSl9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JpZW4gPT09IDMzICYmIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPT09IDEgJiYgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSA9PT0gMSkge1xuICAgICAgICBjb25zdCB7bGVmdH0gPSBob3Jpem9udGFsU2Nyb2xsYmFyLnNjcm9sbCgpO1xuICAgICAgICBjaSA9IGRhdGEuc2Nyb2xsLmNpICsgMTtcbiAgICAgICAgaG9yaXpvbnRhbFNjcm9sbGJhci5tb3ZlKHtsZWZ0OiBsZWZ0ICsgY29scy5nZXRXaWR0aChjaSl9KTtcbiAgICB9IGVsc2UgaWYgKG9yaWVuID09PSAxMSAmJiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpID09PSAxICYmIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPT09IDEpIHtcbiAgICAgICAgY29uc3Qge2xlZnR9ID0gaG9yaXpvbnRhbFNjcm9sbGJhci5zY3JvbGwoKTtcbiAgICAgICAgY2kgPSBkYXRhLnNjcm9sbC5jaSAtIDE7XG4gICAgICAgIGhvcml6b250YWxTY3JvbGxiYXIubW92ZSh7bGVmdDogbGVmdCAtIGNvbHMuZ2V0V2lkdGgoY2kpfSk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIG92ZXJsYXllck1vdXNlZG93bihldnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnOjo6OjpvdmVybGF5ZXIubW91c2Vkb3duOicsIGV2dC5kZXRhaWwsIGV2dC5idXR0b24sIGV2dC5idXR0b25zLCBldnQuc2hpZnRLZXkpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdldnQudGFyZ2V0LmNsYXNzTmFtZTonLCBldnQudGFyZ2V0LmNsYXNzTmFtZSk7XG4gICAgY29uc3Qge1xuICAgICAgICBzZWxlY3RvciwgZGF0YSwgIHNvcnRGaWx0ZXIsIGVkaXRvciwgYWR2aWNlXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qge29mZnNldFgsIG9mZnNldFl9ID0gZXZ0O1xuICAgIGNvbnN0IGlzQXV0b2ZpbGxFbCA9IGV2dC50YXJnZXQuY2xhc3NOYW1lID09PSBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWNvcm5lcmA7XG4gICAgY29uc3QgY2VsbFJlY3QgPSBkYXRhLmdldENlbGxSZWN0QnlYWShvZmZzZXRYLCBvZmZzZXRZKTtcbiAgICBjb25zdCB7XG4gICAgICAgIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCxcbiAgICB9ID0gY2VsbFJlY3Q7XG4gICAgbGV0IHtyaSwgY2l9ID0gY2VsbFJlY3Q7XG4gICAgZWRpdG9yLnNldFJpQ2kocmksIGNpKTtcblxuICAgIC8vIHNvcnQgb3IgZmlsdGVyXG4gICAgY29uc3Qge2F1dG9GaWx0ZXJ9ID0gZGF0YTtcblxuICAgIC8vIHRyYWl0IGFkZFxuICAgIGhpZGVEaXJlY3Rpb25BcnIuY2FsbCh0aGlzKTtcbiAgICBhZHZpY2UuZWwuaGlkZSgpO1xuXG4gICAgaWYgKGF1dG9GaWx0ZXIuaW5jbHVkZXMyKHJpLCBjaSkpIHtcbiAgICAgICAgYXV0b0ZpbHRlci5nZXRTZXQoZGF0YS5leGNlcHRSb3dTZXQsIHJpKTtcbiAgICB9XG5cbiAgICBpZiAoYXV0b0ZpbHRlci5pbmNsdWRlcyhyaSwgY2kpKSB7XG4gICAgICAgIGlmIChsZWZ0ICsgd2lkdGggLSAyMCA8IG9mZnNldFggJiYgdG9wICsgaGVpZ2h0IC0gMjAgPCBvZmZzZXRZKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGF1dG9GaWx0ZXIuaXRlbXMoY2ksIChyLCBjKSA9PiBkYXRhLnJvd3MuZ2V0Q2VsbChyLCBjKSk7XG4gICAgICAgICAgICBzb3J0RmlsdGVyLnNldChjaSwgaXRlbXMsIGF1dG9GaWx0ZXIuZ2V0RmlsdGVyKGNpKSwgYXV0b0ZpbHRlci5nZXRTb3J0KGNpKSk7XG4gICAgICAgICAgICBzb3J0RmlsdGVyLnNldE9mZnNldCh7bGVmdCwgdG9wOiB0b3AgKyBoZWlnaHQgKyAyfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZygncmk6JywgcmksICcsIGNpOicsIGNpKTtcbiAgICBpZiAoIWV2dC5zaGlmdEtleSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnc2VsZWN0b3JTZXRTdGFydDo6OicpO1xuICAgICAgICBpZiAoaXNBdXRvZmlsbEVsKSB7XG4gICAgICAgICAgICBzZWxlY3Rvci5zaG93QXV0b2ZpbGwocmksIGNpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdG9yU2V0LmNhbGwodGhpcywgZmFsc2UsIHJpLCBjaSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIGxldCB7cGFnZVgsIHBhZ2VZfSA9IGV2dDtcbiAgICAgICAgbGV0IHt2ZXJ0aWNhbFNjcm9sbGJhciwgaG9yaXpvbnRhbFNjcm9sbGJhcn0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7cm93cywgY29sc30gPSBkYXRhO1xuICAgICAgICAvLyBjb25zdCB7dG9wfSA9IHZlcnRpY2FsU2Nyb2xsYmFyLnNjcm9sbCgpO1xuICAgICAgICByaSA9IGRhdGEuc2Nyb2xsLnJpICsgMTtcbiAgICAgICAgLy8gbGV0IHR0b3AgPSB0b3AgKyByb3dzLmdldEhlaWdodChyaSkgLSAxO1xuXG4gICAgICAgIGxldCBwb2ludCA9IGdldFBvaW50KHRoaXMuZWwuZWwpO1xuICAgICAgICAvLyBtb3VzZSBtb3ZlIHVwXG4gICAgICAgIG1vdXNlTW92ZVVwKHdpbmRvdywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZHJvcGRvd25cIik7XG4gICAgICAgICAgICBjbGVhclN0b3BUaW1lci5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZURyb3BEb3duLmNhbGwodGhpcywgZSwgaXNBdXRvZmlsbEVsLCBzZWxlY3RvciwgZGF0YSwgdmVydGljYWxTY3JvbGxiYXIsIHJvd3MsIGV2dCwgcG9pbnQsIGhvcml6b250YWxTY3JvbGxiYXIsIGNvbHMpO1xuXG4gICAgICAgICAgICBkcm9wRG93bi5jYWxsKHRoaXMsIGUsIGlzQXV0b2ZpbGxFbCwgc2VsZWN0b3IsIGRhdGEsIHZlcnRpY2FsU2Nyb2xsYmFyLCByb3dzLCBldnQsIDAsIHBvaW50LCBob3Jpem9udGFsU2Nyb2xsYmFyLCBjb2xzKTtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJTdG9wVGltZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgaWYgKGlzQXV0b2ZpbGxFbCkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmF1dG9maWxsKHNlbGVjdG9yLmFyYW5nZSwgJ2FsbCcsIG1zZyA9PiB4dG9hc3QoJ1RpcCcsIG1zZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3RWYWxpZC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBhdXRvZmlsbE5leHQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9yLnNldEJveGlubmVyKFwiYXV0b1wiKTtcblxuICAgICAgICAgICAgc2VsZWN0b3IuaGlkZUF1dG9maWxsKCk7XG4gICAgICAgICAgICB0b29sYmFyQ2hhbmdlUGFpbnRmb3JtYXRQYXN0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKCdwb2ludGVyLWV2ZW50cycsICdhdXRvJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghaXNBdXRvZmlsbEVsICYmIGV2dC5idXR0b25zID09PSAxKSB7XG4gICAgICAgIGlmIChldnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzaGlmdEtleTo6OjonKTtcbiAgICAgICAgICAgIHNlbGVjdG9yU2V0LmNhbGwodGhpcywgdHJ1ZSwgcmksIGNpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY29udGludWVEcm9wRG93bihlLCBpc0F1dG9maWxsRWwsIHNlbGVjdG9yLCBkYXRhLCB2ZXJ0aWNhbFNjcm9sbGJhciwgcm93cywgZXZ0LCBwb2ludCwgaG9yaXpvbnRhbFNjcm9sbGJhciwgY29scykge1xuICAgIGxldCBzdG9wVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbGV0IHN0b3BUaW1lcjIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBkcm9wRG93bi5jYWxsKHRoaXMsIGUsIGlzQXV0b2ZpbGxFbCwgc2VsZWN0b3IsIGRhdGEsIHZlcnRpY2FsU2Nyb2xsYmFyLCByb3dzLCBldnQsIDAsIHBvaW50LCBob3Jpem9udGFsU2Nyb2xsYmFyLCBjb2xzLCk7XG4gICAgICAgIH0sIDUwKTtcbiAgICAgICAgdGhpcy5zdG9wVGltZXIyLnB1c2goc3RvcFRpbWVyMik7XG4gICAgfSwgMjAwKTtcblxuICAgIHRoaXMuc3RvcFRpbWVyLnB1c2goc3RvcFRpbWVyKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJTdG9wVGltZXIoKSB7XG4gICAgdGhpcy5zdG9wVGltZXIuY2xlYXIoKTtcbiAgICB0aGlzLnN0b3BUaW1lcjIuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gYXV0b2ZpbGxOZXh0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YSwgdGFibGUsIGVkaXRvclxuICAgIH0gPSB0aGlzO1xuICAgIGVkaXRvci5kaXNwbGF5ID0gdHJ1ZTtcbiAgICBsZXQgZW50ZXIgPSBmYWxzZTtcbiAgICAvLyB0aGlzLnNlbGVjdG9yLmFyYW5nZS5lYWNoKChyaSwgY2kpID0+IHtcbiAgICAvLyAgICAgLy8gbGV0IGNlbGwgPSBkYXRhLnJvd3MuZ2V0Q2VsbChyaSwgY2kpO1xuICAgIC8vICAgICAvLyBpZiAoY2VsbCAmJiBjZWxsLmZvcm11bGFzKSB7XG4gICAgLy8gICAgIC8vICAgICBsZXQgZW50ZXIyID0gdGhpcy5lZGl0b3JQcm94eS5jaGFuZ2UocmksIGNpLCBjZWxsLmZvcm11bGFzLCBkYXRhLnJvd3MsIGRhdGEsIHRydWUpO1xuICAgIC8vICAgICAvLyAgICAgaWYgKGVudGVyMiA9PT0gdHJ1ZSkge1xuICAgIC8vICAgICAvLyAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAvLyAgICAgLy8gICAgIH1cbiAgICAvLyAgICAgLy8gfVxuICAgIC8vIH0pO1xuICAgIGlmIChlbnRlcikge1xuICAgICAgICBkYXRhLmNoYW5nZShkYXRhLmdldERhdGEoKSk7XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0b3IuYXJhbmdlID0gbnVsbDtcbiAgICBsb2FkRm9ybXVsYS5jYWxsKHRoaXMpO1xuICAgIHRhYmxlLnJlbmRlcigpO1xufVxuXG5mdW5jdGlvbiBsb2FkRm9ybXVsYShsb2FkID0gZmFsc2UpIHtcbiAgICAvLyB0aGlzLnRhYmxlLnByb3h5LmRpZmYgPSAzMDU7XG4gICAgLy8gdGhpcy50YWJsZS5wcm94eS5vbGREYXRhID0gXCJcIjtcbiAgICAvLyBzaGVldFJlc2V0LmNhbGwodGhpcyk7XG4gICAgLy8gY2xlYXJUaW1lb3V0KHRoaXMuZm9ybXVsYVRpbWUpO1xuICAgIC8vIGxldCB7ZGF0YSwgdGFibGV9ID0gdGhpcztcbiAgICAvLyB0aGlzLmZvcm11bGFUaW1lID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgLy8gICAgIGxldCB7ZGF0ZV9mb3JtdWxhfSA9IGRhdGEuc2V0dGluZ3M7XG4gICAgLy8gICAgIGlmIChkYXRlX2Zvcm11bGEgJiYgdHlwZW9mIGRhdGVfZm9ybXVsYS53bGFuZCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyAgICAgICAgIGRhdGVfZm9ybXVsYS53bGFuZChkYXRlX2Zvcm11bGEsIGRhdGEsIHRhYmxlLCBsb2FkKTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH0sIDE1MDApO1xufVxuXG5mdW5jdGlvbiBmaXJzdFJvd1RvV2lkdGgod2lkdGgpIHtcbiAgICBsZXQgY1JlY3QgPSB7cmk6IC0xLCBjaTogMCwgbGVmdDogNjAsIHRvcDogMCwgd2lkdGg6IDEwMH07XG4gICAgY29sUmVzaXplckZpbmlzaGVkLmNhbGwodGhpcywgY1JlY3QsIHdpZHRoKTtcbn1cblxuZnVuY3Rpb24gYWR2aWNlU2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgY29uc3QgcmVjdCA9IGRhdGEuZ2V0U2VsZWN0ZWRSZWN0KCk7XG4gICAgbGV0IGxlZnQgPSByZWN0LmxlZnQgKyByZWN0LndpZHRoICsgNjA7XG4gICAgbGV0IHRvcCA9IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgKyAzMTtcblxuICAgIHRoaXMuYWR2aWNlLmVsLmVsLnN0eWxlWyd0b3AnXSA9IGAke3RvcH1weGA7XG4gICAgdGhpcy5hZHZpY2UuZWwuZWwuc3R5bGVbJ2xlZnQnXSA9IGAkeyBsZWZ0fXB4YDtcbn1cblxuZnVuY3Rpb24gcGljdHVyZVNldE9mZnNldCgpIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgIGxldCB7cGljdHVyZU9mZnNldExlZnQsIHBpY3R1cmVPZmZzZXRUb3B9ID0gdGhpcztcblxuXG4gICAgdGhpcy5kYXRhLnBhc3RlRGlyZWN0aW9uc0Fyci5mb3JFYWNoKGkgPT4ge1xuICAgICAgICBjb25zdCBzT2Zmc2V0ID0gZGF0YS5nZXRNb3ZlUmVjdChpLnJhbmdlKTtcblxuICAgICAgICBpLmltZy5lbC5zdHlsZVsndG9wJ10gPSBgJHtzT2Zmc2V0LnRvcCArIHBpY3R1cmVPZmZzZXRUb3AgKyBpLm51bWJlciAqIDE1ICsgaS5vZmZzZXRUb3AgfXB4YDtcbiAgICAgICAgaS5pbWcuZWwuc3R5bGVbJ2xlZnQnXSA9IGAke3NPZmZzZXQubGVmdCArIHBpY3R1cmVPZmZzZXRMZWZ0ICsgaS5udW1iZXIgKiAxNSArIGkub2Zmc2V0TGVmdH1weGA7XG4gICAgfSk7XG59XG5cblxuZnVuY3Rpb24gZWRpdG9yU2V0T2Zmc2V0KHNob3cgPSB0cnVlLCBjcmkgPSAtMSwgY2NpID0gLTEpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHNlbGVjdG9yLCBkYXRhLCBlZGl0b3JcbiAgICB9ID0gdGhpcztcbiAgICBsZXQgW3JpLCBjaV0gPSBzZWxlY3Rvci5pbmRleGVzO1xuICAgIHJpID0gY3JpID09PSAtMSA/IHJpIDogY3JpO1xuICAgIGNpID0gY2NpID09PSAtMSA/IGNpIDogY2NpO1xuXG4gICAgY29uc3Qgc09mZnNldCA9IGRhdGEuZ2V0TW92ZVJlY3QobmV3IENlbGxSYW5nZShyaSwgY2ksIHNlbGVjdG9yLnJhbmdlLmVyaSwgc2VsZWN0b3IucmFuZ2UuZWNpKSk7XG4gICAgY29uc3QgdE9mZnNldCA9IHRoaXMuZ2V0VGFibGVPZmZzZXQoKTtcblxuICAgIGxldCBzUG9zaXRpb24gPSAndG9wJztcbiAgICAvLyBjb25zb2xlLmxvZygnc09mZnNldDonLCBzT2Zmc2V0LCAnOicsIHRPZmZzZXQpO1xuICAgIGlmIChzT2Zmc2V0LnRvcCA+IHRPZmZzZXQuaGVpZ2h0IC8gMikge1xuICAgICAgICBzUG9zaXRpb24gPSAnYm90dG9tJztcbiAgICB9XG5cbiAgICBlZGl0b3Iuc2V0T2Zmc2V0KHNPZmZzZXQsIHNQb3NpdGlvbiwgc2hvdyk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGVkaXRvci5zZXRDdXJzb3JQb3MoZWRpdG9yLmVkaXRvclRleHQuZ2V0VGV4dCgpLmxlbmd0aCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdG9yc1NldE9mZnNldCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3JzW2ldO1xuICAgICAgICBzZWxlY3Rvci5zZWxlY3Rvci5yZXNldFNlbGVjdG9yQlJMQXJlYU9mZnNldChuZXcgQ2VsbFJhbmdlKHNlbGVjdG9yLnJpLCBzZWxlY3Rvci5jaSwgc2VsZWN0b3IucmksIHNlbGVjdG9yLmNpKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNFZGl0b3Ioc2hvd0VkaXRvciA9IHRydWUpIHtcbiAgICAvLyBsZXQge3NlbGVjdG9yfSA9IHRoaXM7XG4gICAgaWYgKHNob3dFZGl0b3IgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3ZlcmxheWVyQ0VsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1vdmVybGF5ZXItY29udGVudGApXG4gICAgICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rvck1vdmVFbC5lbCxcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdG9yLmVsLFxuICAgICAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vdmVybGF5ZXJDRWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LW92ZXJsYXllci1jb250ZW50YClcbiAgICAgICAgICAgIC5jaGlsZHJlbihcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmVkaXRvci5lbCxcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdG9yLmVsLFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0b3JNb3ZlRWwuZWxcbiAgICAgICAgICAgICk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlZGl0b3JTZXQoKSB7XG4gICAgY29uc3Qge2VkaXRvciwgZGF0YSwgc2VsZWN0b3J9ID0gdGhpcztcbiAgICBlZGl0b3JTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbiAgICBlZGl0b3Iuc2V0Q2VsbEVuZChkYXRhLmdldFNlbGVjdGVkQ2VsbCgpKTtcbiAgICAvLyBlZGl0b3Iuc2V0Q2VsbChkYXRhLmdldFNlbGVjdGVkQ2VsbCgpLCBkYXRhLmdldFNlbGVjdGVkVmFsaWRhdG9yKCksIHR5cGUpO1xuICAgIGlmICh0aGlzLmRhdGEuc2V0dGluZ3Muc2hvd0VkaXRvcikge1xuICAgICAgICBzZWxlY3Rvci5lbC5oaWRlKCk7XG4gICAgfVxuICAgIGNsZWFyQ2xpcGJvYXJkLmNhbGwodGhpcyk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWRpdG9yLnNldEN1cnNvclBvcyhlZGl0b3IuZWRpdG9yVGV4dC5nZXRUZXh0KCkubGVuZ3RoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdmVydGljYWxTY3JvbGxiYXJNb3ZlKGRpc3RhbmNlKSB7XG4gICAgY29uc3Qge2RhdGEsIHRhYmxlLCBzZWxlY3RvciwgZWRpdG9yfSA9IHRoaXM7XG4gICAgZGF0YS5zY3JvbGx5KGRpc3RhbmNlLCAoKSA9PiB7XG4gICAgICAgIGVkaXRvci5kaXNwbGF5ID0gZmFsc2U7XG4gICAgICAgIHNlbGVjdG9yLnJlc2V0QlJMQXJlYU9mZnNldCgpO1xuICAgICAgICBwaWN0dXJlU2V0T2Zmc2V0LmNhbGwodGhpcyk7XG4gICAgICAgIGFkdmljZVNldE9mZnNldC5jYWxsKHRoaXMpO1xuICAgICAgICBzZWxlY3RvcnNTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgZWRpdG9yU2V0T2Zmc2V0LmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICB0YWJsZS5yZW5kZXIoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaG9yaXpvbnRhbFNjcm9sbGJhck1vdmUoZGlzdGFuY2UpIHtcbiAgICBjb25zdCB7ZGF0YSwgdGFibGUsIHNlbGVjdG9yLCBlZGl0b3J9ID0gdGhpcztcbiAgICBkYXRhLnNjcm9sbHgoZGlzdGFuY2UsICgpID0+IHtcbiAgICAgICAgZWRpdG9yLmRpc3BsYXkgPSBmYWxzZTtcbiAgICAgICAgc2VsZWN0b3IucmVzZXRCUlRBcmVhT2Zmc2V0KCk7XG4gICAgICAgIHBpY3R1cmVTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgYWR2aWNlU2V0T2Zmc2V0LmNhbGwodGhpcyk7XG4gICAgICAgIHNlbGVjdG9yc1NldE9mZnNldC5jYWxsKHRoaXMpO1xuICAgICAgICBlZGl0b3JTZXRPZmZzZXQuY2FsbCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRhYmxlLnJlbmRlcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJBdXRvQWRhcHQoKSB7XG4gICAgbGV0IHtkYXRhLCB0YWJsZX0gPSB0aGlzO1xuICAgIGNvbnN0IHZpZXdSYW5nZSA9IGRhdGEudmlld1JhbmdlMigpO1xuICAgIGxldCB7YXV0b0FkYXB0fSA9IGRhdGEuc2V0dGluZ3Muc3R5bGU7XG4gICAgbGV0IHtpZ25vcmVSaX0gPSBkYXRhLnNldHRpbmdzO1xuICAgIGxldCB2aWV3V2lkdGggPSAwO1xuXG4gICAgaWYgKGF1dG9BZGFwdCkge1xuICAgICAgICB2aWV3UmFuZ2UuZWFjaCgocmksIGNpKSA9PiB7XG4gICAgICAgICAgICBsZXQgdHh0ID0gdGFibGUuZ2V0Q2VsbFRleHRDb250ZW50KHJpLCBjaSk7XG4gICAgICAgICAgICBjb25zdCBkYm94ID0gdGFibGUuZ2V0RHJhd0JveChyaSwgY2kpO1xuXG4gICAgICAgICAgICBpZiAodHh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IHRhYmxlLmdldENlbGxUZXh0U3R5bGUocmksIGNpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmb250ID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGUuZm9udCk7XG4gICAgICAgICAgICAgICAgZm9udC5zaXplID0gZ2V0Rm9udFNpemVQeEJ5UHQoZm9udC5zaXplKTtcbiAgICAgICAgICAgICAgICAvLyDlvpfliLDlvZPliY3mloflrZfmnIDlrr3nmoR3aWR0aFxuICAgICAgICAgICAgICAgIGxldCB0eHRXaWR0aCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlLmZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHR4dFdpZHRoID0gdGFibGUuZHJhdy5zZWxmQWRhcHRpb25UeHRXaWR0aChmb3JtYXRtW3N0eWxlLmZvcm1hdF0ucmVuZGVyKHR4dCksIGZvbnQsIGRib3gpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHh0V2lkdGggPSB0YWJsZS5kcmF3LnNlbGZBZGFwdGlvblR4dFdpZHRoKHR4dCwgZm9udCwgZGJveCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgodGFibGUuYXV0b0FkYXB0TGlzdFtjaV0gPT09IHVuZGVmaW5lZCB8fCB0YWJsZS5hdXRvQWRhcHRMaXN0W2NpXSA8IHR4dFdpZHRoKSAmJiByaSA+IGlnbm9yZVJpIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hdXRvQWRhcHRMaXN0W2NpXSA9IHR4dFdpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0YWJsZS5hdXRvQWRhcHRMaXN0Lmxlbmd0aCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQge2lnbm9yZX0gPSBkYXRhLnNldHRpbmdzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhYmxlLmF1dG9BZGFwdExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBfaWdub3JlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGlnbm9yZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBpZ25vcmVbal0pIF9pZ25vcmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9pZ25vcmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlLmF1dG9BZGFwdExpc3RbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2aWV3V2lkdGggKz0gNTA7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29scy5zZXRXaWR0aChpLCA1MCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlLmF1dG9BZGFwdExpc3RbaV0gPCAzMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuYXV0b0FkYXB0TGlzdFtpXSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29scy5zZXRXaWR0aChpLCB0YWJsZS5hdXRvQWRhcHRMaXN0W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aWV3V2lkdGggKz0gdGFibGUuYXV0b0FkYXB0TGlzdFtpXTtcblxuICAgICAgICB9XG4gICAgICAgIGlmICh2aWV3V2lkdGggPiAwKVxuICAgICAgICAgICAgZGF0YS5zZXR0aW5ncy5jZWxsV2lkdGggPSAoKSA9PiB2aWV3V2lkdGg7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhdXRvUm93UmVzaXplcigpIHtcbiAgICBsZXQge2RhdGEsIHRhYmxlfSA9IHRoaXM7XG4gICAgbGV0IHZpZXdSYW5nZSA9IGRhdGEudmlld1JhbmdlMigpO1xuICAgIGxldCByZWNvcmRfcmMgPSAwLCBtYXggPSAwO1xuICAgIGxldCByX2ggPSBkYXRhLnNldHRpbmdzLnJvdy5oZWlnaHQ7XG4gICAgbGV0IHthdXRvQWRhcHR9ID0gZGF0YS5zZXR0aW5ncy5zdHlsZTtcbiAgICBsZXQgdmlld0hlaWdodCA9IDA7XG5cbiAgICBpZiAoYXV0b0FkYXB0KSB7XG4gICAgICAgIHZpZXdSYW5nZS5lYWNoKChyaSwgY2kpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR4dCA9IHRhYmxlLmdldENlbGxUZXh0Q29udGVudChyZWNvcmRfcmMsIGNpKTtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gdGFibGUuZ2V0Q2VsbFRleHRTdHlsZShyaSwgY2kpO1xuICAgICAgICAgICAgY29uc3QgZm9udCA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlLmZvbnQpO1xuICAgICAgICAgICAgZm9udC5zaXplID0gZ2V0Rm9udFNpemVQeEJ5UHQoZm9udC5zaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGRib3ggPSB0YWJsZS5nZXREcmF3Qm94KHJlY29yZF9yYywgY2kpO1xuICAgICAgICAgICAgLy8gMS4g6Ieq6YCC5bqU6LCD5pW05LiA6KGM55qE6auY5bqmXG4gICAgICAgICAgICAvLyAyLiDov5vlhaXkuIvkuIDooYwg5b6X5YiwIOacrOihjOeahG1heFxuICAgICAgICAgICAgaWYgKHJlY29yZF9yYyAhPT0gcmkgJiYgdHh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3JkX2ggPSBkYXRhLnJvd3MuZ2V0SGVpZ2h0KHJlY29yZF9yYyk7XG4gICAgICAgICAgICAgICAgaWYgKHJfaCAqIG1heCAhPT0gcmVjb3JkX2gpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNfaCA9IGZvbnQuc2l6ZSAqIG1heCArIGRib3gucGFkZGluZyAqIDIgKyAyICogbWF4O1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIjQ1MVwiLCB2aWV3LmhlaWdodChyX2ggKiBtYXgpKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yb3dzLnNldEhlaWdodChyZWNvcmRfcmMsIGNfaCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdIZWlnaHQgKz0gY19oO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdIZWlnaHQgKz0gcmVjb3JkX2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1heCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR4dCAhPT0gdW5kZWZpbmVkICYmIHJlY29yZF9yYyA9PT0gcmkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRhYmxlLmRyYXcuc2VsZkFkYXB0aW9uSGVpZ2h0KGRib3gsIHR4dCwgZm9udCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuID4gbWF4IHx8IG1heCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY29yZF9yYyA9IHJpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlY29yZF9oID0gZGF0YS5yb3dzLmdldEhlaWdodChyZWNvcmRfcmMpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IHRhYmxlLmdldENlbGxUZXh0U3R5bGUocmVjb3JkX2gsIDApO1xuICAgICAgICBjb25zdCBmb250ID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGUuZm9udCk7XG4gICAgICAgIGZvbnQuc2l6ZSA9IGdldEZvbnRTaXplUHhCeVB0KGZvbnQuc2l6ZSk7XG4gICAgICAgIGNvbnN0IGRib3ggPSB0YWJsZS5nZXREcmF3Qm94KHJlY29yZF9yYywgMCk7XG4gICAgICAgIGlmIChyX2ggKiBtYXggIT09IHJlY29yZF9oICYmIHZpZXdIZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgY19oID0gZm9udC5zaXplICogbWF4ICsgZGJveC5wYWRkaW5nICogMjtcbiAgICAgICAgICAgIHZpZXdIZWlnaHQgKz0gY19oO1xuICAgICAgICAgICAgZGF0YS5yb3dzLnNldEhlaWdodChyZWNvcmRfcmMsIGNfaCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmlld0hlaWdodCA+IDApIHtcbiAgICAgICAgICAgIHZpZXdIZWlnaHQgKz0gcmVjb3JkX2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coNTAzLCB2aWV3SGVpZ2h0KTtcbiAgICBpZiAodmlld0hlaWdodCA+IDApXG4gICAgICAgIGRhdGEuc2V0dGluZ3Mudmlldy5oZWlnaHQgPSAoKSA9PiB2aWV3SGVpZ2h0ICsgNDA7XG59XG5cbmZ1bmN0aW9uIGNsaWNrU2VsZWN0b3JDaGFuZ2VSaUNpKGV2dCkge1xuICAgIGNvbnN0IG92ZXJsYXllciA9IGV2dC50YXJnZXQuY2xhc3NOYW1lID09PSBgJHtjc3NQcmVmaXh9LW92ZXJsYXllcmA7XG4gICAgaWYgKCFvdmVybGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB7c2VsZWN0b3IsIGRhdGF9ID0gdGhpcztcblxuICAgIGNvbnN0IHtvZmZzZXRYLCBvZmZzZXRZfSA9IGV2dDtcbiAgICBjb25zdCBjZWxsUmVjdCA9IGRhdGEuZ2V0Q2VsbFJlY3RCeVhZKG9mZnNldFgsIG9mZnNldFkpO1xuXG4gICAgc2VsZWN0b3Iuc2VsZWN0Q2VsbC5zZXREYXRhKGNlbGxSZWN0LnJpLCBjZWxsUmVjdC5jaSk7XG4gICAgc2VsZWN0b3Iuc2VsZWN0Q2VsbC5yZXNldFNlbGVjdE9mZnNldCgpO1xufVxuXG5mdW5jdGlvbiByb3dSZXNpemVyRmluaXNoZWQoY1JlY3QsIGRpc3RhbmNlKSB7XG4gICAgY29uc3Qge3JpfSA9IGNSZWN0O1xuICAgIGNvbnN0IHt0YWJsZSwgc2VsZWN0b3IsIGRhdGEsIHRvb2xiYXJ9ID0gdGhpcztcbiAgICBkYXRhLnNldFJvd0hlaWdodChyaSwgZGlzdGFuY2UpO1xuICAgIGRhdGEuY2hhbmdlKGRhdGEuZ2V0RGF0YSgpKTtcbiAgICB0b29sYmFyLnJlc2V0KCk7XG4gICAgdGFibGUucmVuZGVyKCk7XG4gICAgc2VsZWN0b3IucmVzZXRBcmVhT2Zmc2V0KCk7XG4gICAgdmVydGljYWxTY3JvbGxiYXJTZXQuY2FsbCh0aGlzKTtcbiAgICBlZGl0b3JTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gY29sUmVzaXplckZpbmlzaGVkKGNSZWN0LCBkaXN0YW5jZSkge1xuICAgIGNvbnN0IHtjaX0gPSBjUmVjdDtcbiAgICBjb25zdCB7dGFibGUsIHNlbGVjdG9yLCBkYXRhLCB0b29sYmFyfSA9IHRoaXM7XG4gICAgZGF0YS5zZXRDb2xXaWR0aChjaSwgZGlzdGFuY2UpO1xuICAgIGRhdGEuY2hhbmdlKGRhdGEuZ2V0RGF0YSgpKTtcbiAgICB0b29sYmFyLnJlc2V0KCk7XG4gICAgLy8gY29uc29sZS5sb2coJ2RhdGE6JywgZGF0YSk7XG4gICAgdGFibGUucmVuZGVyKCk7XG4gICAgc2VsZWN0b3IucmVzZXRBcmVhT2Zmc2V0KCk7XG4gICAgaG9yaXpvbnRhbFNjcm9sbGJhclNldC5jYWxsKHRoaXMpO1xuICAgIGVkaXRvclNldE9mZnNldC5jYWxsKHRoaXMpO1xufVxuXG5mdW5jdGlvbiBlcnJvclBvcChlbnRlciwgbXNnKSB7XG4gICAgY29uc3Qge2Vycm9yUG9wVXB9ID0gdGhpcztcblxuICAgIGlmIChlbnRlciAmJiAhZXJyb3JQb3BVcC5vcGVuKSB7XG4gICAgICAgIGVycm9yUG9wVXAuc2hvdyhtc2cpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogbXNnXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChlcnJvclBvcFVwLm9wZW4pIHtcbiAgICAgICAgZXJyb3JQb3BVcC5oaWRlKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBtc2dcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJzdGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgXCJtc2dcIjogbXNnXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdG9yQ2VsbFRleHQocmksIGNpLCB7dGV4dCwgc3R5bGV9LCBzdGF0ZSkge1xuICAgIGNvbnN0IHtkYXRhLCBlZGl0b3IsfSA9IHRoaXM7XG4gICAgbGV0IGFyZ3MgPSBkYXRhLnNlbGVjdG9yQ2VsbFRleHQocmksIGNpLCB0ZXh0ICsgXCJcIiwgc3RhdGUpO1xuICAgIGlmIChhcmdzLnN0YXRlKSB7XG4gICAgICAgIGFyZ3MgPSBlcnJvclBvcC5jYWxsKHRoaXMsIHRydWUsIGFyZ3MubXNnKTtcbiAgICAgICAgaWYgKGFyZ3Muc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGF0YS5zZXRDZWxsVGV4dChyaSwgY2ksIHt0ZXh0LCBzdHlsZX0pO1xuICAgIGVkaXRvci5zZXRSaUNpKC0xLCAtMSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGRhdGFTZXRDZWxsVGV4dCh0ZXh0LCBzdGF0ZSA9ICdmaW5pc2hlZCcpIHtcbiAgICBjb25zdCB7ZGF0YSwgdGFibGUsIGVkaXRvcn0gPSB0aGlzO1xuICAgIC8vIGNvbnN0IFtyaSwgY2ldID0gc2VsZWN0b3IuaW5kZXhlcztcbiAgICBsZXQge3JpLCBjaX0gPSBkYXRhLnNlbGVjdG9yO1xuICAgIGlmICgoZWRpdG9yLnJpICE9PSByaSAmJiBlZGl0b3IucmkgIT09IC0xKSB8fCAoZWRpdG9yLmNpICE9PSBjaSAmJiBlZGl0b3IuY2kgIT09IC0xKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5zZXRTZWxlY3RlZENlbGxUZXh0KHRleHQsIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUgPT09ICdmaW5pc2hlZCcpIHRhYmxlLnJlbmRlcigpO1xufVxuXG5mdW5jdGlvbiB0aHJvd0Zvcm11bGEoKSB7XG4gICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbiAgICBkYXRhLnRocm93Rm9ybXVsYSgpO1xuICAgIC8vIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc2VydERlbGV0ZVJvd0NvbHVtbih0eXBlKSB7XG4gICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbiAgICBpZiAodHlwZSA9PT0gJ2luc2VydC1yb3cnKSB7XG4gICAgICAgIGRhdGEuaW5zZXJ0KCdyb3cnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkZWxldGUtcm93Jykge1xuICAgICAgICBkYXRhLmRlbGV0ZSgncm93Jyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnaW5zZXJ0LWNvbHVtbicpIHtcbiAgICAgICAgZGF0YS5pbnNlcnQoJ2NvbHVtbicpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2RlbGV0ZS1jb2x1bW4nKSB7XG4gICAgICAgIGRhdGEuZGVsZXRlKCdjb2x1bW4nKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkZWxldGUtY2VsbCcpIHtcbiAgICAgICAgZGF0YS5kZWxldGVDZWxsKCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZGVsZXRlLWNlbGwtZm9ybWF0Jykge1xuICAgICAgICBkYXRhLmRlbGV0ZUNlbGwoJ2Zvcm1hdCcpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2RlbGV0ZS1jZWxsLXRleHQnKSB7XG4gICAgICAgIGRhdGEuZGVsZXRlQ2VsbCgndGV4dCcpO1xuICAgIH1cbiAgICBjbGVhckNsaXBib2FyZC5jYWxsKHRoaXMpO1xuICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gdG9vbGJhckNoYW5nZSh0eXBlLCB2YWx1ZSkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgaWYgKHR5cGUgPT09ICd1bmRvJykge1xuICAgICAgICB0aGlzLnVuZG8oKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd1bmRvTGlzdCcpIHtcbiAgICAgICAgdmFsdWUuc2V0Q29udGVudChkYXRhLmhpc3RvcnlMaXN0KDEpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZWRvTGlzdCcpIHtcbiAgICAgICAgdmFsdWUuc2V0Q29udGVudChkYXRhLmhpc3RvcnlMaXN0KDIpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZWRvJykge1xuICAgICAgICB0aGlzLnJlZG8oKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwcmludCcpIHtcbiAgICAgICAgLy8gcHJpbnRcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwYWludGZvcm1hdCcpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSBjb3B5LmNhbGwodGhpcyk7XG4gICAgICAgIGVsc2UgY2xlYXJDbGlwYm9hcmQuY2FsbCh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjbGVhcmZvcm1hdCcpIHtcbiAgICAgICAgaW5zZXJ0RGVsZXRlUm93Q29sdW1uLmNhbGwodGhpcywgJ2RlbGV0ZS1jZWxsLWZvcm1hdCcpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAgIC8vIGxpbmtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjaGFydCcpIHtcbiAgICAgICAgLy8gY2hhcnRcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhdXRvZmlsdGVyJykge1xuICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgYXV0b2ZpbHRlci5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Rocm93Rm9ybXVsYScpIHtcbiAgICAgICAgdGhyb3dGb3JtdWxhLmNhbGwodGhpcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnY2xvc2UnKSB7XG4gICAgICAgIGxldCB7bXJpLCBtY2l9ID0gZGF0YS5nZXRNYXgoKTtcblxuICAgICAgICBkYXRhLmNoYW5nZURhdGFGb3JDYWxjID0gbmV3IFByZUFjdGlvbih7XG4gICAgICAgICAgICB0eXBlOiA5OTksXG4gICAgICAgICAgICBhY3Rpb246IFwi6YeN5paw6K6h566XXCIsIHJpOiAtMSwgY2k6IC0xLCBvbGRDZWxsOiB7fSwgbmV3Q2VsbDogZGF0YS5yb3dzLmVhY2hSYW5nZShuZXcgQ2VsbFJhbmdlKDAsIDAsIG1yaSwgbWNpKSlcbiAgICAgICAgfSwgdGhpcy5kYXRhKTtcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xuICAgICAgICAvLyBsb2FkRm9ybXVsYS5jYWxsKHRoaXMsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ZyZWV6ZScpIHtcbiAgICAgICAgbGV0IHtzaG93RnJlZXplfSA9IGRhdGEuc2V0dGluZ3M7XG4gICAgICAgIGlmICh2YWx1ZSAmJiBzaG93RnJlZXplID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCB7cmksIGNpfSA9IGRhdGEuc2VsZWN0b3I7XG4gICAgICAgICAgICB0aGlzLmZyZWV6ZShyaSwgY2kpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mcmVlemUoMCwgMCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhZGQnKSB7XG4gICAgICAgIGRhdGEuc2hvd0VxdWF0aW9uID0gIWRhdGEuc2hvd0VxdWF0aW9uO1xuICAgICAgICBzaGVldFJlc2V0LmNhbGwodGhpcywgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9mb3JtYXQgcGVyY2VudCA0NzNcbiAgICAgICAgZGF0YS5zZXRTZWxlY3RlZENlbGxBdHRyKHR5cGUsIHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdib3JkZXInKSB7XG4gICAgICAgICAgICBib3JkZXJSZXNTZXQuY2FsbCh0aGlzLCAnbm9uZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY2VsbEZvcm11bGFQcm94eScpIHtcbiAgICAgICAgICAgIGVkaXRvclNldC5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJvcmRlclJlc1NldCh2YWx1ZSA9IFwiMXB4IHNvbGlkIHJnYig3NSwgMTM3LCAyNTVcIikge1xuICAgIHRoaXMuc2VsZWN0b3IuYnIuYm9yZGVyKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc29ydEZpbHRlckNoYW5nZShjaSwgb3JkZXIsIG9wZXJhdG9yLCB2YWx1ZSkge1xuICAgIHRoaXMuZGF0YS5zZXRBdXRvRmlsdGVyKGNpLCBvcmRlciwgb3BlcmF0b3IsIHZhbHVlKTtcbiAgICBzaGVldFJlc2V0LmNhbGwodGhpcyk7XG59XG5cbmZ1bmN0aW9uIGFmdGVyU2VsZWN0b3IoZWRpdG9yKSB7XG4gICAgaWYgKGVkaXRvci5nZXRMb2NrKCkgfHwgZWRpdG9yLnN0YXRlID09PSAyKSB7XG4gICAgICAgIGxldCB7cmksIGNpfSA9IGVkaXRvcjtcbiAgICAgICAgbGV0IGlucHV0VGV4dCA9IGVkaXRvci5lZGl0b3JUZXh0LmdldFRleHQoKTtcbiAgICAgICAgbGV0IHtzZWxlY3Rvcn0gPSB0aGlzO1xuICAgICAgICBzZWxlY3Rvci5pbmRleGVzID0gW3JpLCBjaV07XG4gICAgICAgIHJldHVybiBzZWxlY3RvckNlbGxUZXh0LmNhbGwodGhpcywgcmksIGNpLCB7dGV4dDogaW5wdXRUZXh0fSwgJ2lucHV0Jyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcGFzdGVFdmVudChldnQpIHtcbiAgICBjbGVhckNsaXBib2FyZC5jYWxsKHRoaXMpO1xuICAgIG1vdW50UGFzdGUuY2FsbCh0aGlzLCBldnQsICgpID0+IHtcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xuICAgICAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICAgICAgZGF0YS5jaGFuZ2UoZGF0YS5nZXREYXRhKCkpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzaGVldEluaXRFdmVudHMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBvdmVybGF5ZXJFbCxcbiAgICAgICAgcm93UmVzaXplcixcbiAgICAgICAgY29sUmVzaXplcixcbiAgICAgICAgdmVydGljYWxTY3JvbGxiYXIsXG4gICAgICAgIGhvcml6b250YWxTY3JvbGxiYXIsXG4gICAgICAgIGVkaXRvcixcbiAgICAgICAgIGNvbnRleHRNZW51LFxuICAgICAgICBkYXRhLFxuICAgICAgICB0b29sYmFyLFxuICAgICAgICBtb2RhbFZhbGlkYXRpb24sXG4gICAgICAgIHNvcnRGaWx0ZXIsXG4gICAgfSA9IHRoaXM7XG5cbiAgICAvLyBwYXN0ZU92ZXJsYXkub24oJ21vdXNlZG93bicsIGV2dCA9PiB7XG4gICAgLy8gICBjb25zb2xlLmxvZyhcIjY2OVwiKTtcbiAgICAvLyAgIHBhc3RlT3ZlcmxheS5oaWRlKCk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyBvdmVybGF5ZXJcbiAgICBvdmVybGF5ZXJFbFxuICAgICAgICAub24oJ21vdXNlbW92ZScsIChldnQpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXllck1vdXNlbW92ZS5jYWxsKHRoaXMsIGV2dCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2Vkb3duJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgLy8gcmVuZGVyQXV0b0FkYXB0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAvLyBhdXRvUm93UmVzaXplci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgLy8gdGhlIGxlZnQgbW91c2UgYnV0dG9uOiBtb3VzZWRvd24g4oaSIG1vdXNldXAg4oaSIGNsaWNrXG4gICAgICAgICAgICAvLyB0aGUgcmlnaHQgbW91c2UgYnV0dG9uOiBtb3VzZWRvd24g4oaSIGNvbnRlbnh0bWVudSDihpIgbW91c2V1cFxuICAgICAgICAgICAgaWYgKGV2dC5idXR0b25zID09PSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEueHlJblNlbGVjdGVkUmVjdChldnQub2Zmc2V0WCwgZXZ0Lm9mZnNldFkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LnNldFBvc2l0aW9uKGV2dC5vZmZzZXRYLCBldnQub2Zmc2V0WSk7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXllck1vdXNlZG93bi5jYWxsKHRoaXMsIGV2dCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnUuc2V0UG9zaXRpb24oZXZ0Lm9mZnNldFgsIGV2dC5vZmZzZXRZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xpY2tTZWxlY3RvckNoYW5nZVJpQ2kuY2FsbCh0aGlzLCBldnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldnQuZGV0YWlsID09PSAyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVuZGVyX3RpbWVyKTtcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0TW91c2VEb3duSW5kZXgoW10pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvci5nZXRMb2NrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlZGl0b3JTZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvci5nZXRMb2NrKCkgfHwgZWRpdG9yLmlzQ29ycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgX3NlbGVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYW5nZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlTW92ZVVwKHdpbmRvdywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNzcygncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9zZWxlY3RvciAmJiBfc2VsZWN0b3Iuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2VsZWN0b3Iuc2VsZWN0b3Iuc2V0Qm94aW5uZXIoXCJub25lXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHttZXJnZXN9ID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCB7aW5wdXRUZXh0fSA9IGVkaXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dFRleHQgPSBlZGl0b3IuZWRpdG9yVGV4dC5nZXRUZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXQgPSBpbnB1dFRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1lcmdlcy5fKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gbWVyZ2VzLl9baV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3V0ID0gY3V0U3RyKGl0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3V0W2ldLmluZGV4T2YoXCI6XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGExID0gY3V0W2ldLnNwbGl0KFwiOlwiKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGN1dFtpXS5zcGxpdChcIjpcIilbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZTEgPSBleHByMnh5KGExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMiA9IGV4cHIyeHkoYTIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5zY2kgPj0gZTFbMF0gJiYgbS5zcmkgPj0gZTFbMV0gJiYgbS5lY2kgPD0gZTJbMF0gJiYgbS5lcmkgPD0gZTJbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmJ1dHRvbnMgPT09IDEgJiYgIWUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHtyaSwgY2l9ID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFkoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3NlbGVjdG9yICYmIF9zZWxlY3Rvci5zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NlbGVjdG9yID0gbWFrZVNlbGVjdG9yLmNhbGwodGhpcywgcmksIGNpLCB0aGlzLnNlbGVjdG9ycywgdHJ1ZSwgX3NlbGVjdG9yLnNlbGVjdG9yLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2tDZWxscy5jYWxsKHRoaXMsIGV2dCwgX3NlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2VTZWxlY3RvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQge3Bvc30gPSBlZGl0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5wdXRUZXh0ID0gZWRpdG9yLmVkaXRvclRleHQuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3JzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7ZXJweH0gPSBzZWxlY3RvcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnB4ID09PSBjdXR0aW5nQnlQb3MoaW5wdXRUZXh0LCBwb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2VsZWN0b3Iuc2VsZWN0b3Iuc2V0KHJpLCBjaSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NlbGVjdG9yID0gX3NlbGVjdG9yID8gX3NlbGVjdG9yIDogbWFrZVNlbGVjdG9yLmNhbGwodGhpcywgcmksIGNpLCB0aGlzLnNlbGVjdG9ycywgdHJ1ZSwgbnVsbCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jc3MoJ3BvaW50ZXItZXZlbnRzJywgJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2VsZWN0b3IgJiYgX3NlbGVjdG9yLnNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NlbGVjdG9yLnNlbGVjdG9yLnNldEJveGlubmVyKFwiYXV0b1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVyZ2VTZWxlY3RvciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3NlbGVjdG9yICYmICFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnMucHVzaChfc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NrQ2VsbHMuY2FsbCh0aGlzLCBldnQsIF9zZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9zZWxlY3RvciAmJiAhY2hhbmdlICYmIF9zZWxlY3Rvci5zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0b3JzLnB1c2goX3NlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3JzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jbGFzc05hbWUgPT09IF9zZWxlY3Rvci5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLmVycHggPSBfc2VsZWN0b3IuZXJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3NlbGVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lcmdlU2VsZWN0b3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS50aW1lKFwiZGJjbGljayB0aW1lMVwiKTtcblxuICAgICAgICAgICAgICAgIGlmICghZWRpdG9yLmdldExvY2soKSAmJiAhZWRpdG9yLmlzQ29ycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWUoXCJkYmNsaWNrIHRpbWUyXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCB7cmksIGNpfSA9IGVkaXRvcjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0VGV4dCA9IGVkaXRvci5lZGl0b3JUZXh0LmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJpICE9PSAtMSAmJiBjaSAhPT0gLTEgJiYgaW5wdXRUZXh0WzBdID09PSBcIj1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yID0gc2VsZWN0b3JDZWxsVGV4dC5jYWxsKHRoaXMsIHJpLCBjaSwge3RleHQ6IGlucHV0VGV4dH0sICdpbnB1dCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS50aW1lRW5kKFwiZGJjbGljayB0aW1lMlwiKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhdGUgPSBlZGl0b3IuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGNlbGwgPSBkYXRhLnJvd3MuZ2V0Q2VsbChyaSwgY2kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGNlbGwgJiYgY2VsbC5mb3JtdWxhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRoaXMuZWRpdG9yUHJveHkuY2hhbmdlKHJpLCBjaSwgY2VsbC5mb3JtdWxhcywgZGF0YS5yb3dzLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRGb3JtdWxhLmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rvci5sb25nVGltZUJlZm9yZSgpO1xuICAgICAgICAgICAgICAgICAgICBvdmVybGF5ZXJNb3VzZWRvd24uY2FsbCh0aGlzLCBldnQpO1xuICAgICAgICAgICAgICAgICAgICBjbGlja1NlbGVjdG9yQ2hhbmdlUmlDaS5jYWxsKHRoaXMsIGV2dCk7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclJlc1NldC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhclNlbGVjdG9ycy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3JTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGVzdFZhbGlkLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS50aW1lRW5kKFwiZGJjbGljayB0aW1lMVwiKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5vbignbW91c2V3aGVlbC5zdG9wJywgKGV2dCkgPT4ge1xuICAgICAgICBvdmVybGF5ZXJNb3VzZXNjcm9sbC5jYWxsKHRoaXMsIGV2dCk7XG4gICAgfSk7XG5cbiAgICAvLyBzbGlkZSBvbiBtb2JpbGVcbiAgICBiaW5kVG91Y2gob3ZlcmxheWVyRWwuZWwsIHtcbiAgICAgICAgbW92ZTogKGRpcmVjdGlvbiwgZCkgPT4ge1xuICAgICAgICAgICAgb3ZlcmxheWVyVG91Y2guY2FsbCh0aGlzLCBkaXJlY3Rpb24sIGQpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB0b29sYmFyIGNoYW5nZVxuICAgIHRvb2xiYXIuY2hhbmdlID0gKHR5cGUsIHZhbHVlKSA9PiB0b29sYmFyQ2hhbmdlLmNhbGwodGhpcywgdHlwZSwgdmFsdWUpO1xuXG4gICAgLy8gc29ydCBmaWx0ZXIgb2tcbiAgICBzb3J0RmlsdGVyLm9rID0gKGNpLCBvcmRlciwgbywgdikgPT4gc29ydEZpbHRlckNoYW5nZS5jYWxsKHRoaXMsIGNpLCBvcmRlciwgbywgdik7XG5cbiAgICAvLyByZXNpemVyIGZpbmlzaGVkIGNhbGxiYWNrXG4gICAgcm93UmVzaXplci5maW5pc2hlZEZuID0gKGNSZWN0LCBkaXN0YW5jZSkgPT4ge1xuICAgICAgICByb3dSZXNpemVyRmluaXNoZWQuY2FsbCh0aGlzLCBjUmVjdCwgZGlzdGFuY2UpO1xuICAgIH07XG4gICAgY29sUmVzaXplci5maW5pc2hlZEZuID0gKGNSZWN0LCBkaXN0YW5jZSkgPT4ge1xuICAgICAgICBjb2xSZXNpemVyRmluaXNoZWQuY2FsbCh0aGlzLCBjUmVjdCwgZGlzdGFuY2UpO1xuICAgIH07XG4gICAgLy8gc2Nyb2xsYmFyIG1vdmUgY2FsbGJhY2tcbiAgICB2ZXJ0aWNhbFNjcm9sbGJhci5tb3ZlRm4gPSAoZGlzdGFuY2UsIGV2dCkgPT4ge1xuICAgICAgICB2ZXJ0aWNhbFNjcm9sbGJhck1vdmUuY2FsbCh0aGlzLCBkaXN0YW5jZSwgZXZ0KTtcbiAgICB9O1xuICAgIGhvcml6b250YWxTY3JvbGxiYXIubW92ZUZuID0gKGRpc3RhbmNlLCBldnQpID0+IHtcbiAgICAgICAgaG9yaXpvbnRhbFNjcm9sbGJhck1vdmUuY2FsbCh0aGlzLCBkaXN0YW5jZSwgZXZ0KTtcbiAgICB9O1xuICAgIC8vIGVkaXRvclxuICAgIGVkaXRvci5jaGFuZ2UgPSAoc3RhdGUsIGl0ZXh0KSA9PiB7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2ZpbmlzaCcpIHsgLy8gIOeUqOaIt+i+k+WFpVxuICAgICAgICAgICAgZGF0YS5lZGl0b3JDaGFuZ2VUb0hpc3RvcnkoZWRpdG9yLmVkaXRvclRleHQuZ2V0T2xkQ2VsbCgpLCBlZGl0b3IuZWRpdG9yVGV4dC5nZXRSSUNJKCksIDEpO1xuICAgICAgICAgICAgZWRpdG9yLmVkaXRvclRleHQuc2V0T2xkQ2VsbCh7fSwge3JpOiAtMSwgY2k6IC0xfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlpoLmnpzmmK8gZXNjXG4gICAgICAgIGlmIChpdGV4dCA9PT0gXCJAfmVzY1wiKSB7XG4gICAgICAgICAgICBsZXQge3RleHQsIGZvcm11bGFzfSA9IGVkaXRvci5lZGl0b3JUZXh0LmdldE9sZENlbGwoKTtcbiAgICAgICAgICAgIGVkaXRvci5lZGl0b3JUZXh0LnNldE9sZENlbGwoe1xuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgICAgIGZvcm11bGFzOiAnJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHtyaSwgY2l9ID0gZWRpdG9yO1xuICAgICAgICAgICAgZGF0YS5zZXRTZWxlY3RlZENlbGwodGV4dCwgJ2lucHV0JywgZm9ybXVsYXMsIHJpLCBjaSk7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0VGV4dChcIlwiKTtcbiAgICAgICAgICAgIGNsZWFyU2VsZWN0b3JzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBlZGl0b3IuY2xlYXIodHJ1ZSk7XG4gICAgICAgICAgICAvLyBlZGl0b3Iuc2V0UmlDaSgtMSwgLTEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlID09PSBcImZvcm1hdFwiKSB7XG4gICAgICAgICAgICBkYXRhLnNldFNlbGVjdGVkQ2VsbEF0dHIoc3RhdGUsIFwicm1iXCIpO1xuICAgICAgICAgICAgLy8gcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxldCB7c2VsZWN0b3J9ID0gdGhpcztcbiAgICAgICAgLy8gc2VsZWN0b3IuZWwuaGlkZSgpO1xuICAgICAgICAvL+WunuaXtuabtOaWsHRoaXMuc2VsZWN0b3JzXG4gICAgICAgIGxldCB7bG9ja30gPSBlZGl0b3I7XG4gICAgICAgIGVkaXRvci5zZXRNb3VzZURvd25JbmRleChkYXRhLnJvd3MsIFtdKTtcbiAgICAgICAgZWRpdGluZ1NlbGVjdG9ycy5jYWxsKHRoaXMsIGl0ZXh0KTtcblxuICAgICAgICBpZiAobG9jayAmJiBpdGV4dCAhPT0gJz0nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiAodGhpcy5zZWxlY3RvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgaWYgKHN0YXRlID09PSBcImZvcm1hdFwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhU2V0Q2VsbFRleHQuY2FsbCh0aGlzLCBpdGV4dCwgc3RhdGUpO1xuICAgIH07XG4gICAgLy8gbW9kYWwgdmFsaWRhdGlvblxuICAgIG1vZGFsVmFsaWRhdGlvbi5jaGFuZ2UgPSAoYWN0aW9uLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmIChhY3Rpb24gPT09ICdzYXZlJykge1xuICAgICAgICAgICAgZGF0YS5hZGRWYWxpZGF0aW9uKC4uLmFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS5yZW1vdmVWYWxpZGF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGNvbnRleHRtZW51XG4gICAgY29udGV4dE1lbnUuaXRlbUNsaWNrID0gKHR5cGUpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3R5cGU6JywgdHlwZSk7XG4gICAgICAgIGlmICh0eXBlID09PSAndmFsaWRhdGlvbicpIHtcbiAgICAgICAgICAgIG1vZGFsVmFsaWRhdGlvbi5zZXRWYWx1ZShkYXRhLmdldFNlbGVjdGVkVmFsaWRhdGlvbigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY29weScpIHtcbiAgICAgICAgICAgIGNvcHkuY2FsbCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY3V0Jykge1xuICAgICAgICAgICAgY3V0LmNhbGwodGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Bhc3RlJykge1xuICAgICAgICAgICAgLy8gcGFzdGUuY2FsbCh0aGlzLCAnYWxsJyk7XG4gICAgICAgICAgICAvLyBwcm9jZXNzLmNhbGwodGhpcywgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJzaGVldENvcHlcIikpO1xuICAgICAgICAgICAgLy8gY3JlYXRlRXZlbnQoMSwgZmFsc2UsIFwicGFzdGVcIik7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyggIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwicGFzdGVcIikpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwYXN0ZS12YWx1ZScpIHtcbiAgICAgICAgICAgIHBhc3RlLmNhbGwodGhpcywgJ3RleHQnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncGFzdGUtZm9ybWF0Jykge1xuICAgICAgICAgICAgcGFzdGUuY2FsbCh0aGlzLCAnZm9ybWF0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnNlcnREZWxldGVSb3dDb2x1bW4uY2FsbCh0aGlzLCB0eXBlKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vIGxldCB3aW5kb3dzID0gdGhpcy5lbC5lbDtcbiAgICBiaW5kKHdpbmRvdywgJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICB9KTtcblxuICAgIGJpbmQod2luZG93LCAnY2xpY2snLCAoZXZ0KSA9PiB7XG4gICAgICAgIG92ZXJsYXllckVsLmNvbnRhaW5zKGV2dC50YXJnZXQpO1xuICAgICAgICAvLyB0aGlzLmZvY3VzaW5nID0gb3ZlcmxheWVyRWwuY29udGFpbnMoZXZ0LnRhcmdldCk7XG4gICAgfSk7XG5cbiAgICBiaW5kKHdpbmRvdywgJ2NvcHknLCAoZXZ0KSA9PiB7XG4gICAgICAgIG1vdW50Q29weS5jYWxsKHRoaXMsIGV2dCk7XG4gICAgICAgIC8vIGRhdGEuaGlzdG9yeS5hZGQoZGF0YS5nZXREYXRhKCkpO1xuICAgIH0pO1xuXG4gICAgYmluZCh3aW5kb3csICdjdXQnLCAoZXZ0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3V0XCIsIGV2dCk7XG4gICAgICAgIGN1dC5jYWxsKHRoaXMpO1xuICAgICAgICBtb3VudENvcHkuY2FsbCh0aGlzLCBldnQpO1xuICAgICAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICAgICAgZGF0YS5oaXN0b3J5LmFkZChkYXRhLmdldERhdGEoKSk7XG4gICAgfSk7XG5cbiAgICBiaW5kKHdpbmRvdywgJ3Bhc3RlJywgKGV2dCkgPT4ge1xuICAgICAgICBwYXN0ZUV2ZW50LmNhbGwodGhpcywgZXZ0KTtcbiAgICB9KTtcblxuICAgIC8vIGZvciBzZWxlY3RvclxuICAgIGJpbmQod2luZG93LCAna2V5ZG93bicsIGV2dCA9PiB7XG4gICAgICAgIC8vIGlmICghdGhpcy5mb2N1c2luZykgcmV0dXJuO1xuICAgICAgICBjb25zdCBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBrZXksIGN0cmxLZXksIHNoaWZ0S2V5LCAgIG1ldGFLZXksXG4gICAgICAgIH0gPSBldnQ7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdrZXlkb3duLmV2dDogJywga2V5Q29kZSk7XG4gICAgICAgIGlmIChnZXRDaG9vc2VJbWcuY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coa2V5Q29kZSk7XG4gICAgICAgICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDg6ICAgICAgICAgLy8gZGVsZXRlXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaGlzdG9yeS5hZGRQaWMoZGF0YS5nZXREYXRhKCkucGljdHVyZXMsIFwiYWRkXCIpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVJbWcuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gY2FzZSA5MDogICAgICAgICAvLyBkZWxldGVcbiAgICAgICAgICAgICAgICAvLyAgICAgZGF0YS5oaXN0b3J5LmFkZFBpYyhkYXRhLmdldERhdGEoKS5waWN0dXJlcywgXCJhZGRcIik7XG4gICAgICAgICAgICAgICAgLy8gICAgIGRlbGV0ZUltZy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIC8vICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN0cmxLZXkgfHwgbWV0YUtleSkge1xuICAgICAgICAgICAgICAgIGlmICg5MCA9PT0ga2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuZG8oKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGN0cmxLZXkgfHwgbWV0YUtleSkge1xuICAgICAgICAgICAgLy8gY29uc3QgeyBzSW5kZXhlcywgZUluZGV4ZXMgfSA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgLy8gbGV0IHdoYXQgPSAnYWxsJztcbiAgICAgICAgICAgIC8vIGlmIChzaGlmdEtleSkgd2hhdCA9ICd0ZXh0JztcbiAgICAgICAgICAgIC8vIGlmIChhbHRLZXkpIHdoYXQgPSAnZm9ybWF0JztcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgOTA6XG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZG86IGN0cmwgKyB6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5kbygpO1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OTpcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVkbzogY3RybCArIHlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWRvKCk7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY3OlxuICAgICAgICAgICAgICAgICAgICAvLyBjdHJsICsgY1xuICAgICAgICAgICAgICAgICAgICAvLyAg5Yqg5LiK6L+Z6YeM5piv5Zug5Li6IOmcgOimgeWxleekuuiZmue6v1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0Q2hvb3NlSW1nLmNhbGwodGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNvcHkuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFibGUucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODg6XG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyB4XG4gICAgICAgICAgICAgICAgICAgIGN1dC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4NTpcbiAgICAgICAgICAgICAgICAgICAgLy8gY3RybCArIHVcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhci50cmlnZ2VyKCd1bmRlcmxpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODY6XG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyB2XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3RlLmNhbGwodGhpcywgd2hhdCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCI4MzdcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyBsZWZ0XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JNb3ZlLmNhbGwodGhpcywgc2hpZnRLZXksICdyb3ctZmlyc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyB1cFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvck1vdmUuY2FsbCh0aGlzLCBzaGlmdEtleSwgJ2NvbC1maXJzdCcpO1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgICAgLy8gY3RybCArIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yTW92ZS5jYWxsKHRoaXMsIHNoaWZ0S2V5LCAncm93LWxhc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyBkb3duXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yTW92ZS5jYWxsKHRoaXMsIHNoaWZ0S2V5LCAnY29sLWxhc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyBzcGFjZSwgYWxsIGNlbGxzIGluIGNvbFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvclNldC5jYWxsKHRoaXMsIGZhbHNlLCAtMSwgZGF0YS5zZWxlY3Rvci5jaSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2NjpcbiAgICAgICAgICAgICAgICAgICAgLy8gY3RybCArIEJcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhci50cmlnZ2VyKCdmb250LWJvbGQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3MzpcbiAgICAgICAgICAgICAgICAgICAgLy8gY3RybCArIElcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhci50cmlnZ2VyKCdmb250LWl0YWxpYycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdldnQua2V5Q29kZTonLCBldnQua2V5Q29kZSk7XG4gICAgICAgICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNoaWZ0ICsgc3BhY2UsIGFsbCBjZWxscyBpbiByb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yU2V0LmNhbGwodGhpcywgZmFsc2UsIGRhdGEuc2VsZWN0b3IucmksIC0xLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNzogLy8gZXNjXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJDbGlwYm9hcmQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvck1vdmUuY2FsbCh0aGlzLCBzaGlmdEtleSwgJ2xlZnQnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzg6IC8vIHVwXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yTW92ZS5jYWxsKHRoaXMsIHNoaWZ0S2V5LCAndXAnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yTW92ZS5jYWxsKHRoaXMsIHNoaWZ0S2V5LCAncmlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDA6IC8vIGRvd25cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JNb3ZlLmNhbGwodGhpcywgc2hpZnRLZXksICdkb3duJyk7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6IC8vIHRhYlxuICAgICAgICAgICAgICAgICAgICAvLyBsb2NrQ2VsbHNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5lZGl0b3JQcm94eS5jaGFuZ2UoZWRpdG9yLnJpLCBlZGl0b3IuY2ksIGVkaXRvci5lZGl0b3JUZXh0LmdldFRleHQoKSwgZGF0YS5yb3dzLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yID0gYWZ0ZXJTZWxlY3Rvci5jYWxsKHRoaXMsIGVkaXRvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNoaWZ0ICsgdGFiID0+IG1vdmUgbGVmdFxuICAgICAgICAgICAgICAgICAgICAvLyB0YWIgPT4gbW92ZSByaWdodFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvck1vdmUuY2FsbCh0aGlzLCBmYWxzZSwgc2hpZnRLZXkgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIOa4hemZpOWQhOenjeWxnuaAp1xuICAgICAgICAgICAgICAgICAgICBjbGVhclNlbGVjdG9ycy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiAvLyBlbnRlclxuICAgICAgICAgICAgICAgICAgICAvLyBsb2NrQ2VsbHNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5lZGl0b3JQcm94eS5jaGFuZ2UoZWRpdG9yLnJpLCBlZGl0b3IuY2ksIGVkaXRvci5lZGl0b3JUZXh0LmdldFRleHQoKSwgZGF0YS5yb3dzLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yMiA9IGFmdGVyU2VsZWN0b3IuY2FsbCh0aGlzLCBlZGl0b3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckF1dG9BZGFwdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBhdXRvUm93UmVzaXplci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvck1vdmUuY2FsbCh0aGlzLCBmYWxzZSwgc2hpZnRLZXkgPyAndXAnIDogJ2Rvd24nKTtcbiAgICAgICAgICAgICAgICAgICAgbG9hZEZvcm11bGEuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yU2V0T2Zmc2V0LmNhbGwodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIOa4hemZpOWQhOenjeWxnuaAp1xuICAgICAgICAgICAgICAgICAgICBjbGVhclNlbGVjdG9ycy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6IC8vIGJhY2tzcGFjZVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnREZWxldGVSb3dDb2x1bW4uY2FsbCh0aGlzLCAnZGVsZXRlLWNlbGwtdGV4dCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdEZWxldGUnKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0RGVsZXRlUm93Q29sdW1uLmNhbGwodGhpcywgJ2RlbGV0ZS1jZWxsLXRleHQnKTtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGtleUNvZGUgPj0gNjUgJiYga2V5Q29kZSA8PSA5MClcbiAgICAgICAgICAgICAgICB8fCAoa2V5Q29kZSA+PSA0OCAmJiBrZXlDb2RlIDw9IDU3KVxuICAgICAgICAgICAgICAgIHx8IChrZXlDb2RlID49IDk2ICYmIGtleUNvZGUgPD0gMTA1KVxuICAgICAgICAgICAgICAgIHx8IGV2dC5rZXkgPT09ICc9J1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gZGF0YVNldENlbGxUZXh0LmNhbGwodGhpcywgZXZ0LmtleSwgJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgLy8gZWRpdG9yU2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgLy8gZWRpdG9yLmlucHV0RXZlbnRIYW5kbGVyKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IDExMykge1xuICAgICAgICAgICAgICAgIC8vIEYyXG4gICAgICAgICAgICAgICAgZWRpdG9yU2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZXhwb3J0IHtcbiAgICBzaGVldFJlc2V0LFxuICAgIHNlbGVjdG9yU2V0LFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldCB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0RWwsIGRhdGEpIHtcbiAgICAgICAgY29uc3Qge3ZpZXcsIHNob3dUb29sYmFyLCBzaG93Q29udGV4dG1lbnUsIHNob3dFZGl0b3IsIHJvd1dpZHRofSA9IGRhdGEuc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNoZWV0YCk7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKGRhdGEsIHZpZXcud2lkdGgsICFzaG93VG9vbGJhcik7XG5cbiAgICAgICAgdGFyZ2V0RWwuY2hpbGRyZW4odGhpcy50b29sYmFyLmVsLCB0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5waWN0dXJlT2Zmc2V0TGVmdCA9IDEwO1xuICAgICAgICB0aGlzLnBpY3R1cmVPZmZzZXRUb3AgPSAxMDtcblxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAvLyB0YWJsZVxuICAgICAgICB0aGlzLnRhYmxlRWwgPSBoKCdjYW52YXMnLCBgJHtjc3NQcmVmaXh9LXRhYmxlYCk7XG4gICAgICAgIC8vIHJlc2l6ZXJcbiAgICAgICAgdGhpcy5yb3dSZXNpemVyID0gbmV3IFJlc2l6ZXIoZmFsc2UsIGRhdGEucm93cy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmNvbFJlc2l6ZXIgPSBuZXcgUmVzaXplcih0cnVlLCBkYXRhLmNvbHMubWluV2lkdGgpO1xuICAgICAgICAvLyBzY3JvbGxiYXJcbiAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbGJhciA9IG5ldyBTY3JvbGxiYXIodHJ1ZSk7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbGJhciA9IG5ldyBTY3JvbGxiYXIoZmFsc2UpO1xuICAgICAgICAvLyBlZGl0b3JcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBuZXcgRWRpdG9yKFxuICAgICAgICAgICAgZm5OYW1lQXJyYXlXaXRoS2V5LFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5nZXRUYWJsZU9mZnNldCgpLFxuICAgICAgICAgICAgZGF0YS5yb3dzLmhlaWdodCxcbiAgICAgICAgICAgIGRhdGEuY29scy53aWR0aCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0b3BUaW1lciA9IG5ldyBUaW1lcigpO1xuICAgICAgICB0aGlzLnN0b3BUaW1lcjIgPSBuZXcgVGltZXIoKTtcbiAgICAgICAgdGhpcy53ZWJzaXRlID0gbmV3IFdlYnNpdGUoZGF0YSwgdGhpcy5lZGl0b3IpO1xuXG4gICAgICAgIC8vIGRhdGEgdmFsaWRhdGlvblxuICAgICAgICB0aGlzLm1vZGFsVmFsaWRhdGlvbiA9IG5ldyBNb2RhbFZhbGlkYXRpb24oKTtcbiAgICAgICAgdGhpcy5lcnJvclBvcFVwID0gbmV3IEVycm9yUG9wVXAoKTtcbiAgICAgICAgLy8gY29udGV4dE1lbnVcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudSA9IG5ldyBDb250ZXh0TWVudSgoKSA9PiB0aGlzLmdldFRhYmxlT2Zmc2V0KCksICFzaG93Q29udGV4dG1lbnUpO1xuICAgICAgICAvLyBzZWxlY3RvclxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKGRhdGEsIHRoaXMsIHRydWUpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yTW92ZUVsID0gbmV3IFNlbGVjdG9yKGRhdGEsIHRoaXMsIGZhbHNlKTtcbiAgICAgICAgLy8gdGhpcy5lZGl0b3JQcm94eSA9IGNyZWF0ZWQgRWRpdG9yUHJveHkoKTtcblxuICAgICAgICB0aGlzLmFkdmljZSA9IG5ldyBBZHZpY2UoZGF0YSwgdGhpcyk7XG4gICAgICAgIC8vIHRoaXMucGFzdGVEaXJlY3Rpb25zQXJyID0gW107XG4gICAgICAgIC8vIHRoaXMucGFzdGVPdmVybGF5ID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1wYXN0ZS1vdmVybGF5LWNvbnRhaW5lcmApLmhpZGUoKTtcblxuICAgICAgICB0aGlzLm92ZXJsYXllckNFbCA9IGhhc0VkaXRvci5jYWxsKHRoaXMsIHNob3dFZGl0b3IpO1xuICAgICAgICB0aGlzLnNlbGVjdG9ycyA9IFtdO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGgoJ2RpdicsICcnKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvcnNFbCA9IGgoJ2RpdicsIGBzZWxlY3Rvcl9jbGVhcmApLmF0dHIoXCJpZFwiLCBcInNlbGVjdG9yX2NsZWFyXCIpO1xuXG4gICAgICAgIC8vIOaKiuWbvueJh+WuueWZqOenu+WIsOS6hiBvdmVybGF5ZXJDRWwg5LiL6Z2i77yM5Y6f5Zug5pivIOWmguaenOWcqCBvdmVybGF5ZXJFbOS4i+mdoiDkvJrpga7mjKHooajlpLRcbiAgICAgICAgdGhpcy5vdmVybGF5ZXJDRWwuY2hpbGRyZW4odGhpcy5zZWxlY3RvcnNFbCwgdGhpcy5jb250YWluZXIpO1xuXG4gICAgICAgIHRoaXMubWVyZ2VTZWxlY3RvciA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMub3ZlcmxheWVyRWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LW92ZXJsYXllcmApXG4gICAgICAgICAgICAuY2hpbGRyZW4odGhpcy5vdmVybGF5ZXJDRWwpO1xuICAgICAgICAvLyBzb3J0RmlsdGVyXG4gICAgICAgIHRoaXMuc29ydEZpbHRlciA9IG5ldyBTb3J0RmlsdGVyKCk7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZmFsc2U7ICAgLy8g5Zu+54mH56e75YqoXG5cbiAgICAgICAgLy8gcm9vdCBlbGVtZW50XG4gICAgICAgIHRoaXMuZWwuY2hpbGRyZW4oXG4gICAgICAgICAgICB0aGlzLnRhYmxlRWwsXG4gICAgICAgICAgICB0aGlzLnJvd1Jlc2l6ZXIuZWwsXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXllckVsLmVsLFxuICAgICAgICAgICAgdGhpcy5jb2xSZXNpemVyLmVsLFxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFNjcm9sbGJhci5lbCxcbiAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbGJhci5lbCxcbiAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnUuZWwsXG4gICAgICAgICAgICB0aGlzLm1vZGFsVmFsaWRhdGlvbi5lbCxcbiAgICAgICAgICAgIHRoaXMuZXJyb3JQb3BVcC5lbCxcbiAgICAgICAgICAgIHRoaXMuc29ydEZpbHRlci5lbCxcbiAgICAgICAgICAgIHRoaXMuYWR2aWNlLmVsLFxuICAgICAgICAgICAgdGhpcy53ZWJzaXRlLmVsLFxuICAgICAgICAgICAgdGhpcy53ZWJzaXRlLnRhYmxlRWwsXG4gICAgICAgICAgICAvLyB0aGlzLnBhc3RlT3ZlcmxheS5lbCxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB0YWJsZVxuICAgICAgICB0aGlzLnRhYmxlID0gbmV3IFRhYmxlKHRoaXMudGFibGVFbC5lbCwgZGF0YSwgdGhpcy5lZGl0b3IpO1xuICAgICAgICBzaGVldEluaXRFdmVudHMuY2FsbCh0aGlzKTtcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMsIGZhbHNlKTtcbiAgICAgICAgLy8gaW5pdCBzZWxlY3RvciBbMCwgMF1cbiAgICAgICAgc2VsZWN0b3JTZXQuY2FsbCh0aGlzLCBmYWxzZSwgMCwgMCk7XG5cbiAgICAgICAgaWYgKHJvd1dpZHRoICYmIHJvd1dpZHRoLnN0YXRlKSB7XG4gICAgICAgICAgICBmaXJzdFJvd1RvV2lkdGguY2FsbCh0aGlzLCByb3dXaWR0aC53aWR0aClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGVjdG9yTW92ZVJlc2V0KCkge1xuICAgICAgICBlZGl0b3JTZXRPZmZzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5lZGl0b3Iuc2V0UmlDaSh0aGlzLmRhdGEuc2VsZWN0b3IucmksIHRoaXMuZGF0YS5zZWxlY3Rvci5jaSlcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGdldFRhYmxlKCkge1xuICAgICAgICBsZXQge3RhYmxlfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWNhbGM6IGZhbHNlLFxuICAgICAgICAgICAgdGFibGU6IHRhYmxlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGlja0NvcHlQYXN0ZSgpIHtcbiAgICAgICAgbGV0IHtkYXRhfSA9IHRoaXM7XG4gICAgICAgIGxldCBhcmdzID0gZGF0YS5jbGlja0NvcHlQYXN0ZSgpO1xuICAgICAgICBpZiAoYXJncy5lbnRlcikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rvci5hcmFuZ2UgPSBhcmdzLmRzdENlbGxSYW5nZTtcbiAgICAgICAgICAgIGRhdGEuY2xpY2tBdXRvZmlsbChhcmdzLnNyY0NlbGxSYW5nZSwgYXJncy5kc3RDZWxsUmFuZ2UsIFwiYWxsXCIsIG1zZyA9PiB4dG9hc3QoJ1RpcCcsIG1zZykpO1xuICAgICAgICAgICAgYXV0b2ZpbGxOZXh0LmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDZWxsUmFuZ2UocmVmZXJlbmNlLCB0YWJsZVByb3h5LCBzdHlsZUJvb2wsIGNlbGxSYW5nZSkge1xuICAgICAgICBsZXQgeyAgZGF0YX0gPSB0aGlzO1xuICAgICAgICBkYXRhLnBhc3RlKGNlbGxSYW5nZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVmZXJlbmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQge3JpLCBjaX0gPSByZWZlcmVuY2VbaV07XG4gICAgICAgICAgICBsZXQgY2VsbCA9IGRlZXBDb3B5KHRhYmxlUHJveHkucm93cy5nZXRDZWxsT3JOZXcocmksIGNpKSk7XG4gICAgICAgICAgICBpZiAoc3R5bGVCb29sID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjZWxsWydzdHlsZSddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0b3JDZWxsVGV4dC5jYWxsKHRoaXMsIHJpLCBjaSwgY2VsbCwgJ3N0eWxlJyk7XG4gICAgICAgICAgICBzZWxlY3RvclNldC5jYWxsKHRoaXMsIHRydWUsIHJpLCBjaSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RvckVkaXRvclJlc2V0KHJpLCBjaSkge1xuICAgICAgICBsZXQge3NlbGVjdG9yfSA9IHRoaXM7XG4gICAgICAgIGVkaXRvclNldE9mZnNldC5jYWxsKHRoaXMsIHRydWUsIHJpLCBjaSk7XG4gICAgICAgIHRoaXMuZWRpdG9yLnNldFJpQ2kocmksIGNpKTtcbiAgICAgICAgc2VsZWN0b3IuaGlkZSgpO1xuICAgICAgICBzaGVldFJlc2V0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgbG9hZERhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEuc2V0RGF0YShkYXRhLCB0aGlzKTtcbiAgICAgICAgLy8g5oqK5omA5pyJ5ZCO56uv6K6h566X55qE5YWs5byP6L+H5ruk5Ye65p2lXG4gICAgICAgIC8vIHRoaXMuZWRpdG9yUHJveHkuYXNzb2NpYXRlZEFycih0aGlzLmRhdGEucm93cyk7XG4gICAgICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gZnJlZXplIHJvd3Mgb3IgY29sc1xuICAgIGZyZWV6ZShyaSwgY2kpIHtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbiAgICAgICAgZGF0YS5zZXRGcmVlemUocmksIGNpKTtcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1bmRvKCkge1xuICAgICAgICB0aGlzLmRhdGEudW5kbyh0aGlzKTtcbiAgICAgICAgc2hlZXRSZXNldC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIHJlZG8oKSB7XG4gICAgICAgIHRoaXMuZGF0YS5yZWRvKCk7XG4gICAgICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVtb3ZlRXZlbnQoKSB7XG4gICAgICAgIHJlbW92ZS5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGdldFJlY3QoKSB7XG4gICAgICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7d2lkdGg6IGRhdGEudmlld1dpZHRoKCksIGhlaWdodDogZGF0YS52aWV3SGVpZ2h0KCl9O1xuICAgIH1cblxuICAgIGdldFRhYmxlT2Zmc2V0KCkge1xuICAgICAgICBjb25zdCB7cm93cywgY29sc30gPSB0aGlzLmRhdGE7XG4gICAgICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRoaXMuZ2V0UmVjdCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoIC0gY29scy5pbmRleFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSByb3dzLmhlaWdodCxcbiAgICAgICAgICAgIGxlZnQ6IGNvbHMuaW5kZXhXaWR0aCxcbiAgICAgICAgICAgIHRvcDogcm93cy5oZWlnaHQsXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgeyBzdHJpbmdBdH0gZnJvbSAnLi4vdXRpbHMvYWxwaGFiZXQnO1xuaW1wb3J0IHtnZXRGb250U2l6ZVB4QnlQdH0gZnJvbSAnLi4vY29yZS9mb250JztcbmltcG9ydCBfY2VsbCBmcm9tICcuLi9jb3JlL2NlbGwnO1xuaW1wb3J0IHtpc01pbnVzfSBmcm9tIFwiLi4vdXRpbHMvbnVtYmVyX3V0aWxcIjtcbmltcG9ydCB7RHJhdywgRHJhd0JveCwgbnB4LCB0aGluTGluZVdpZHRoLH0gZnJvbSAnLi4vY2FudmFzL2RyYXcnO1xuaW1wb3J0IHtsb29rfSBmcm9tIFwiLi4vY29uZmlnXCI7XG4vLyBpbXBvcnQge2RlZXBDb3B5LCBkaXN0aW5jdH0gZnJvbSBcIi4uL2NvcmUvb3BlcmF0b3JcIjtcbmltcG9ydCB7dGVzdFZhbGlkfSBmcm9tIFwiLi4vdXRpbHMvdGVzdFwiO1xuaW1wb3J0IHtpc0hhdmV9IGZyb20gXCIuLi9oZWxwZXIvY2hlY2tfdmFsdWVcIjtcbi8vIGltcG9ydCBXb3JrZXIgZnJvbSAnd29ya2VyLWxvYWRlciEuLi9leHRlcm5hbC9Xb3JrZXIyLmpzJztcbi8vIGdvYmFsIHZhclxuY29uc3QgY2VsbFBhZGRpbmdXaWR0aCA9IDU7XG5jb25zdCB0YWJsZUZpeGVkSGVhZGVyQ2xlYW5TdHlsZSA9IHtmaWxsU3R5bGU6ICcjZjRmNWY4J307XG5jb25zdCB0YWJsZUdyaWRTdHlsZSA9IHtcbiAgICBmaWxsU3R5bGU6ICcjZmZmJyxcbiAgICBsaW5lV2lkdGg6IHRoaW5MaW5lV2lkdGgsXG4gICAgc3Ryb2tlU3R5bGU6ICcjZTZlNmU2Jyxcbn07XG5cbmZ1bmN0aW9uIHRhYmxlRml4ZWRIZWFkZXJTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgICBmb250OiBgNTAwICR7bnB4KDEyKX1weCBTb3VyY2UgU2FucyBQcm9gLFxuICAgICAgICBmaWxsU3R5bGU6ICcjNTg1NzU3JyxcbiAgICAgICAgbGluZVdpZHRoOiB0aGluTGluZVdpZHRoKCksXG4gICAgICAgIHN0cm9rZVN0eWxlOiAnI2U2ZTZlNicsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RHJhd0JveChyaW5kZXgsIGNpbmRleCkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgICBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgfSA9IGRhdGEuY2VsbFJlY3QocmluZGV4LCBjaW5kZXgpO1xuICAgIHJldHVybiBuZXcgRHJhd0JveChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIGNlbGxQYWRkaW5nV2lkdGgpO1xufVxuXG4vLyBmdW5jdGlvbiBnZXRBdXRvRHJhd0JveChyaW5kZXgsIGNpbmRleCwgd2lkdGgpIHtcbi8vICAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuLy8gICAgIGNvbnN0IHtcbi8vICAgICAgICAgbGVmdCwgdG9wLCBoZWlnaHRcbi8vICAgICB9ID0gZGF0YS5jZWxsUmVjdChyaW5kZXgsIGNpbmRleCk7XG4vLyAgICAgcmV0dXJuIGNyZWF0ZWQgRHJhd0JveChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIGNlbGxQYWRkaW5nV2lkdGgpO1xuLy8gfVxuXG4vLyBmdW5jdGlvbiBnZXRDZWxsVGV4dFN0eWxlKHJpbmRleCwgY2luZGV4KSB7XG4vLyAgICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbi8vICAgICBjb25zdCB7c29ydGVkUm93TWFwfSA9IGRhdGE7XG4vLyAgICAgbGV0IG5yaW5kZXggPSByaW5kZXg7XG4vLyAgICAgaWYgKHNvcnRlZFJvd01hcC5oYXMocmluZGV4KSkge1xuLy8gICAgICAgICBucmluZGV4ID0gc29ydGVkUm93TWFwLmdldChyaW5kZXgpO1xuLy8gICAgIH1cbi8vXG4vLyAgICAgcmV0dXJuIGRhdGEuZ2V0Q2VsbFN0eWxlT3JEZWZhdWx0KG5yaW5kZXgsIGNpbmRleCk7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1VwcGVyQ2FzZSh0ZXh0KSB7XG4gICAgdGV4dCA9IHRleHQudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgcmV0dXJuIHRleHQ7XG59XG5cbmZ1bmN0aW9uIGdldENoYW5nZURhdGFUb0NhbGMoKSB7XG4gICAgbGV0IHtkYXRhfSA9IHRoaXM7XG4gICAgbGV0IGNoYW5nZURhdGEgPSBkYXRhLmNoYW5nZURhdGFGb3JDYWxjO1xuICAgIGlmICghaXNIYXZlKGNoYW5nZURhdGEpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJkYXRhXCI6IG51bGwsXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkYXRhXCI6IGNoYW5nZURhdGFcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VDZWxsKCkge1xuICAgIGxldCB7ZGF0YX0gPSB0aGlzO1xuXG4gICAgbGV0IGNoYW5nZURhdGFBcmdzID0gZ2V0Q2hhbmdlRGF0YVRvQ2FsYy5jYWxsKHRoaXMpO1xuICAgIGlmKCFpc0hhdmUoY2hhbmdlRGF0YUFyZ3MuZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBkYXRhLmNhbGMuY2FsY3VsYXRlUm93cyhkYXRhLnJvd3MsIGNoYW5nZURhdGFBcmdzLmRhdGEpOyAvLyBqb2JzOyDosIPnlKhjYWxj5qih5Z2X6L+b6KGM6K6h566XXG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLlhazlvI/mqKHlnZfmiqXplJnvvJpcIiArIGUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VEYXRhQXJncy5zdGF0ZSkge1xuICAgICAgICBkYXRhLmNoYW5nZURhdGFGb3JDYWxjID0gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNwZWNpYWxTdHlsZSh0ZXh0KSB7XG4gICAgdGV4dCA9IHRleHQgKyBcIlwiO1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvb2suaW5kZXhPZih0ZXh0LnNwbGl0KFwiIVwiKVswXSkgPT09IDE7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNlbGwocmluZGV4LCBjaW5kZXgpIHtcbiAgICBjb25zdCB7ZHJhdywgZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtzb3J0ZWRSb3dNYXB9ID0gZGF0YTtcbiAgICBsZXQgbnJpbmRleCA9IHJpbmRleDtcbiAgICBpZiAoc29ydGVkUm93TWFwLmhhcyhyaW5kZXgpKSB7XG4gICAgICAgIG5yaW5kZXggPSBzb3J0ZWRSb3dNYXAuZ2V0KHJpbmRleCk7XG4gICAgfVxuXG4gICAgY29uc3QgY2VsbCA9IGRhdGEuZ2V0Q2VsbChucmluZGV4LCBjaW5kZXgpO1xuICAgIGlmICghaXNIYXZlKGNlbGwpKSByZXR1cm47XG4gICAgLy8gZGF0YS5yb3dzLnNldEhlaWdodCgxLCA1MCk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhyaW5kZXgsIG5yaW5kZXgsIFwiNjNcIilcbiAgICBjb25zdCBzdHlsZSA9IGRhdGEuZ2V0Q2VsbFN0eWxlT3JEZWZhdWx0KG5yaW5kZXgsIGNpbmRleCk7XG4gICAgY29uc3QgZGJveCA9IGdldERyYXdCb3guY2FsbCh0aGlzLCByaW5kZXgsIGNpbmRleCk7XG4gICAgZGJveC5iZ2NvbG9yID0gc3R5bGUuYmdjb2xvcjtcbiAgICBpZiAoc3R5bGUuYm9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGJveC5zZXRCb3JkZXJzKHN0eWxlLmJvcmRlcik7XG4gICAgICAgIC8vIGJib3hlcy5wdXNoKHsgcmk6IHJpbmRleCwgY2k6IGNpbmRleCwgYm94OiBkYm94IH0pO1xuICAgICAgICBkcmF3LnN0cm9rZUJvcmRlcnMoZGJveCk7XG4gICAgfVxuXG4gICAgbGV0IGNlbGxUZXh0ID0gXCJcIjtcblxuICAgIGlmIChkYXRhLnNob3dFcXVhdGlvbikge1xuICAgICAgICBpZihpc0hhdmUoY2VsbC5mb3JtdWxhcykpIHtcbiAgICAgICAgICAgIGNlbGxUZXh0ID0gY2VsbC5mb3JtdWxhcztcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZihpc0hhdmUoY2VsbC50ZXh0KSkge1xuICAgICAgICBjZWxsVGV4dCA9IGNlbGwudGV4dDtcbiAgICB9XG4gICAgZHJhdy5yZWN0MihkYm94LCAoKSA9PiB7XG4gICAgICAgIC8vIHJlbmRlciB0ZXh0XG4gICAgICAgIGxldCBhcmdzID0gZGF0YS5yZW5kZXJGb3JtYXQoc3R5bGUsIGNlbGwsIG5yaW5kZXgsIGNpbmRleCwgZmFsc2UpO1xuICAgICAgICBjZWxsVGV4dCA9IGFyZ3Muc3RhdGUgPyBhcmdzLmNlbGxUZXh0IDogY2VsbFRleHQ7XG4gICAgICAgIGNvbnN0IGZvbnQgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZS5mb250KTtcblxuICAgICAgICBmb250LnNpemUgPSBnZXRGb250U2l6ZVB4QnlQdChmb250LnNpemUpO1xuICAgICAgICBsZXQge2lnbm9yZSwgbWludXN9ID0gZGF0YS5zZXR0aW5ncztcbiAgICAgICAgbGV0IGNvbG9yID0gc3R5bGUuY29sb3I7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdHlsZTonLCBjZWxsVGV4dCk7XG4gICAgICAgIGlmIChtaW51cyA9PT0gdHJ1ZSAmJiBpc01pbnVzKGNlbGxUZXh0KSkge1xuICAgICAgICAgICAgY29sb3IgPSAncmVkJ1xuICAgICAgICB9XG4gICAgICAgIGxldCB1bmRlcmxpbmUgPSBzdHlsZS51bmRlcmxpbmU7XG4gICAgICAgIGxldCByZWdleCA9IC9eaHR0cChzKT86XFwvXFwvKFtcXHctXStcXC4pK1tcXHctXSsoXFwvW1xcdy0gLi8/JSY9XSopPyQvO1xuICAgICAgICBjZWxsVGV4dCA9IGNlbGxUZXh0ICsgXCJcIjtcbiAgICAgICAgbGV0IHRleHQgPSBjZWxsVGV4dC5zdWJzdHIoMCwgMykudG9Mb3dlckNhc2UoKSA9PT0gXCJ3d3dcIiA/IFwiaHR0cDovL1wiICsgY2VsbFRleHQgOiBjZWxsVGV4dDtcbiAgICAgICAgaWYgKHJlZ2V4LnRlc3QodGV4dCkgfHwgc3BlY2lhbFN0eWxlKGNlbGwudGV4dCkpIHtcbiAgICAgICAgICAgIGNvbG9yID0gXCIjNGI4OWZmXCI7XG4gICAgICAgICAgICB1bmRlcmxpbmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhdy50ZXh0KGNlbGxUZXh0LCBkYm94LCB7XG4gICAgICAgICAgICBhbGlnbjogc3R5bGUuYWxpZ24sXG4gICAgICAgICAgICB2YWxpZ246IHN0eWxlLnZhbGlnbixcbiAgICAgICAgICAgIGZvbnQsXG4gICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICBzdHJpa2U6IHN0eWxlLnN0cmlrZSxcbiAgICAgICAgICAgIHVuZGVybGluZTogdW5kZXJsaW5lLFxuICAgICAgICAgICAgaWdub3JlOiBpZ25vcmUsXG4gICAgICAgICAgICBjaW5kZXg6IGNpbmRleCxcbiAgICAgICAgfSwgc3R5bGUudGV4dHdyYXApO1xuICAgICAgICAvLyBlcnJvclxuICAgICAgICBjb25zdCBlcnJvciA9IGRhdGEudmFsaWRhdGlvbnMuZ2V0RXJyb3IocmluZGV4LCBjaW5kZXgpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGRyYXcuZXJyb3IoZGJveCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRmxleGlibGUoKSB7XG4gICAgY29uc3Qge2RyYXcsIGRhdGF9ID0gdGhpcztcbiAgICBjb25zdCB7YXV0b0ZpbHRlcn0gPSBkYXRhO1xuICAgIGNvbnN0IHtmbGV4fSA9IGF1dG9GaWx0ZXI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZsZXgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHtyaSwgY2ksIHN0YXRlfSA9IGZsZXhbaV07XG4gICAgICAgIGxldCBzX3QgPSAwO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICAgICAgbGV0IHtzZXRfdG90YWwsIHN0YXRlfSA9IGZsZXhbal07XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzX3QgKz0gc2V0X3RvdGFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGJveCA9IGdldERyYXdCb3guY2FsbCh0aGlzLCByaSwgY2kpO1xuICAgICAgICBkcmF3LmRyb3BVcChkYm94LCBzdGF0ZSwgc190ICogMjUpO1xuICAgIH1cblxuICAgIC8vIGNvbnN0IGRib3ggPSBnZXREcmF3Qm94LmNhbGwodGhpcywgcmksIGNpKTtcbiAgICAvLyBkcmF3LmRyb3BVcChkYm94KTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQXV0b2ZpbHRlcih2aWV3UmFuZ2UpIHtcbiAgICBjb25zdCB7ZGF0YSwgZHJhd30gPSB0aGlzO1xuICAgIGlmICh2aWV3UmFuZ2UpIHtcbiAgICAgICAgY29uc3Qge2F1dG9GaWx0ZXJ9ID0gZGF0YTtcblxuICAgICAgICBpZiAoIWF1dG9GaWx0ZXIuYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZlJhbmdlID0gYXV0b0ZpbHRlci5ocmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpZXdSYW5nZS5pbnRlcnNlY3RzKGFmUmFuZ2UpKSB7XG4gICAgICAgICAgICBhZlJhbmdlLmVhY2goKHJpLCBjaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRib3ggPSBnZXREcmF3Qm94LmNhbGwodGhpcywgcmksIGNpKTtcbiAgICAgICAgICAgICAgICBkcmF3LmRyb3Bkb3duKGRib3gpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVuZGVyRmxleGlibGUuY2FsbCh0aGlzLCAxLCAxKVxufVxuXG5mdW5jdGlvbiByZW5kZXJDb250ZW50KHZpZXdSYW5nZSwgZncsIGZoLCB0eCwgdHkpIHtcbiAgICBjb25zdCB7ZHJhdywgZGF0YX0gPSB0aGlzO1xuICAgIGRyYXcuc2F2ZSgpO1xuICAgIGRyYXcudHJhbnNsYXRlKGZ3LCBmaClcbiAgICAgICAgLnRyYW5zbGF0ZSh0eCwgdHkpO1xuXG4gICAgY29uc3Qge2V4Y2VwdFJvd1NldH0gPSBkYXRhO1xuXG4gICAgY29uc3QgZmlsdGVyZWRUcmFuc2xhdGVGdW5jID0gKHJpKSA9PiB7XG4gICAgICAgIGNvbnN0IHJldCA9IGV4Y2VwdFJvd1NldC5oYXMocmkpO1xuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBkYXRhLnJvd3MuZ2V0SGVpZ2h0KHJpKTtcbiAgICAgICAgICAgIGRyYXcudHJhbnNsYXRlKDAsIC1oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcmV0O1xuICAgIH07XG4gICAgLy8gMSByZW5kZXIgY2VsbFxuICAgIGRyYXcuc2F2ZSgpO1xuXG4gICAgdmlld1JhbmdlLmVhY2goKHJpLCBjaSkgPT4ge1xuICAgICAgICByZW5kZXJDZWxsLmNhbGwodGhpcywgcmksIGNpKTtcbiAgICB9LCByaSA9PiBmaWx0ZXJlZFRyYW5zbGF0ZUZ1bmMocmkpKTtcbiAgICBkcmF3LnJlc3RvcmUoKTtcbiAgICAvLyAyIHJlbmRlciBjZWxsIGJvcmRlclxuICAgIC8vIGRyYXcuc2F2ZSgpO1xuICAgIC8vIHJlbmRlckNlbGxCb3JkZXJzLmNhbGwodGhpcywgYmJveGVzLCAocmkpID0+IGZpbHRlcmVkVHJhbnNsYXRlRnVuYyhyaSkpO1xuICAgIC8vIGRyYXcucmVzdG9yZSgpO1xuXG4gICAgLy8gLyBiYm94ZXMgPSBbXTtcbiAgICAvLyAzIHJlbmRlciBtZXJnZUNlbGxcbiAgICBjb25zdCByc2V0ID0gbmV3IFNldCgpO1xuICAgIGRyYXcuc2F2ZSgpO1xuICAgIGRhdGEuZWFjaE1lcmdlc0luVmlldyh2aWV3UmFuZ2UsICh7c3JpLCBzY2ksIGVyaX0pID0+IHtcbiAgICAgICAgaWYgKCFleGNlcHRSb3dTZXQuaGFzKHNyaSkpIHtcbiAgICAgICAgICAgIHJlbmRlckNlbGwuY2FsbCh0aGlzLCBzcmksIHNjaSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJzZXQuaGFzKHNyaSkpIHtcbiAgICAgICAgICAgIHJzZXQuYWRkKHNyaSk7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBkYXRhLnJvd3Muc3VtSGVpZ2h0KHNyaSwgZXJpICsgMSk7XG4gICAgICAgICAgICBkcmF3LnRyYW5zbGF0ZSgwLCAtaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRyYXcucmVzdG9yZSgpO1xuXG5cbiAgICAvLyA0IHJlbmRlciBhdXRvZmlsdGVyXG4gICAgcmVuZGVyQXV0b2ZpbHRlci5jYWxsKHRoaXMsIHZpZXdSYW5nZSk7XG5cbiAgICAvLyA1IHJlbmRlciBmbGV4XG4gICAgcmVuZGVyRmxleGlibGUuY2FsbCh0aGlzKTtcblxuICAgIGRyYXcucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTZWxlY3RlZEhlYWRlckNlbGwoeCwgeSwgdywgaCkge1xuICAgIGNvbnN0IHtkcmF3fSA9IHRoaXM7XG4gICAgZHJhdy5zYXZlKCk7XG4gICAgZHJhdy5hdHRyKHtmaWxsU3R5bGU6ICdyZ2JhKDc1LCAxMzcsIDI1NSwgMC4wOCknfSlcbiAgICAgICAgLmZpbGxSZWN0KHgsIHksIHcsIGgpO1xuICAgIGRyYXcucmVzdG9yZSgpO1xufVxuXG4vLyB2aWV3UmFuZ2Vcbi8vIHR5cGU6IGFsbCB8IGxlZnQgfCB0b3Bcbi8vIHc6IHRoZSBmaXhlZCB3aWR0aCBvZiBoZWFkZXJcbi8vIGg6IHRoZSBmaXhlZCBoZWlnaHQgb2YgaGVhZGVyXG4vLyB0eDogbW92aW5nIGRpc3RhbmNlIG9uIHgtYXhpc1xuLy8gdHk6IG1vdmluZyBkaXN0YW5jZSBvbiB5LWF4aXNcbmZ1bmN0aW9uIHJlbmRlckZpeGVkSGVhZGVycyh0eXBlLCB2aWV3UmFuZ2UsIHcsIGgsIHR4LCB0eSkge1xuICAgIGNvbnN0IHtkcmF3LCBkYXRhfSA9IHRoaXM7XG4gICAgY29uc3Qgc3VtSGVpZ2h0ID0gdmlld1JhbmdlLmg7IC8vIHJvd3Muc3VtSGVpZ2h0KHZpZXdSYW5nZS5zcmksIHZpZXdSYW5nZS5lcmkgKyAxKTtcbiAgICBjb25zdCBzdW1XaWR0aCA9IHZpZXdSYW5nZS53OyAvLyBjb2xzLnN1bVdpZHRoKHZpZXdSYW5nZS5zY2ksIHZpZXdSYW5nZS5lY2kgKyAxKTtcbiAgICBjb25zdCBudHkgPSB0eSArIGg7XG4gICAgY29uc3QgbnR4ID0gdHggKyB3O1xuXG4gICAgZHJhdy5zYXZlKCk7XG4gICAgLy8gZHJhdyByZWN0IGJhY2tncm91bmRcbiAgICBkcmF3LmF0dHIodGFibGVGaXhlZEhlYWRlckNsZWFuU3R5bGUpO1xuICAgIGlmICh0eXBlID09PSAnYWxsJyB8fCB0eXBlID09PSAnbGVmdCcpIGRyYXcuZmlsbFJlY3QoMCwgbnR5LCB3LCBzdW1IZWlnaHQpO1xuICAgIGlmICh0eXBlID09PSAnYWxsJyB8fCB0eXBlID09PSAndG9wJykgZHJhdy5maWxsUmVjdChudHgsIDAsIHN1bVdpZHRoLCBoKTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgIH0gPSBkYXRhLnNlbGVjdG9yLnJhbmdlO1xuICAgIC8vIGNvbnNvbGUubG9nKGRhdGEuc2VsZWN0SW5kZXhlcyk7XG4gICAgLy8gZHJhdyB0ZXh0XG4gICAgLy8gdGV4dCBmb250LCBhbGlnbi4uLlxuICAgIGRyYXcuYXR0cih0YWJsZUZpeGVkSGVhZGVyU3R5bGUoKSk7XG4gICAgLy8geS1oZWFkZXItdGV4dFxuICAgIGlmICh0eXBlID09PSAnYWxsJyB8fCB0eXBlID09PSAnbGVmdCcpIHtcbiAgICAgICAgZGF0YS5yb3dFYWNoKHZpZXdSYW5nZS5zcmksIHZpZXdSYW5nZS5lcmksIChpLCB5MSwgcm93SGVpZ2h0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB5ID0gbnR5ICsgeTE7XG4gICAgICAgICAgICBjb25zdCBpaSA9IGk7XG4gICAgICAgICAgICBkcmF3LmxpbmUoWzAsIHldLCBbdywgeV0pO1xuICAgICAgICAgICAgaWYgKHNyaSA8PSBpaSAmJiBpaSA8IGVyaSArIDEpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJTZWxlY3RlZEhlYWRlckNlbGwuY2FsbCh0aGlzLCAwLCB5LCB3LCByb3dIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHJhdy5maWxsVGV4dChpaSArIDEsIHcgLyAyLCB5ICsgKHJvd0hlaWdodCAvIDIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRyYXcubGluZShbMCwgc3VtSGVpZ2h0ICsgbnR5XSwgW3csIHN1bUhlaWdodCArIG50eV0pO1xuICAgICAgICBkcmF3LmxpbmUoW3csIG50eV0sIFt3LCBzdW1IZWlnaHQgKyBudHldKTtcbiAgICB9XG4gICAgLy8geC1oZWFkZXItdGV4dFxuICAgIGlmICh0eXBlID09PSAnYWxsJyB8fCB0eXBlID09PSAndG9wJykge1xuICAgICAgICBkYXRhLmNvbEVhY2godmlld1JhbmdlLnNjaSwgdmlld1JhbmdlLmVjaSwgKGksIHgxLCBjb2xXaWR0aCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeCA9IG50eCArIHgxO1xuICAgICAgICAgICAgY29uc3QgaWkgPSBpO1xuICAgICAgICAgICAgZHJhdy5saW5lKFt4LCAwXSwgW3gsIGhdKTtcbiAgICAgICAgICAgIGlmIChzY2kgPD0gaWkgJiYgaWkgPCBlY2kgKyAxKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyU2VsZWN0ZWRIZWFkZXJDZWxsLmNhbGwodGhpcywgeCwgMCwgY29sV2lkdGgsIGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHJhdy5maWxsVGV4dChzdHJpbmdBdChpaSksIHggKyAoY29sV2lkdGggLyAyKSwgaCAvIDIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZHJhdy5saW5lKFtzdW1XaWR0aCArIG50eCwgMF0sIFtzdW1XaWR0aCArIG50eCwgaF0pO1xuICAgICAgICBkcmF3LmxpbmUoWzAsIGhdLCBbc3VtV2lkdGggKyBudHgsIGhdKTtcbiAgICB9XG4gICAgZHJhdy5yZXN0b3JlKCk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckZpeGVkTGVmdFRvcENlbGwoZncsIGZoKSB7XG4gICAgY29uc3Qge2RyYXd9ID0gdGhpcztcbiAgICBkcmF3LnNhdmUoKTtcbiAgICAvLyBsZWZ0LXRvcC1jZWxsXG4gICAgZHJhdy5hdHRyKHtmaWxsU3R5bGU6ICcjZjRmNWY4J30pXG4gICAgICAgIC5maWxsUmVjdCgwLCAwLCBmdywgZmgpO1xuICAgIGRyYXcucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJDb250ZW50R3JpZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZncsIGZoLCB0eCwgdHkpIHtcbiAgICBjb25zdCB7ZHJhdywgZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtzZXR0aW5nc30gPSBkYXRhO1xuXG4gICAgZHJhdy5zYXZlKCk7XG4gICAgZHJhdy5hdHRyKHRhYmxlR3JpZFN0eWxlKVxuICAgICAgICAudHJhbnNsYXRlKGZ3ICsgdHgsIGZoICsgdHkpO1xuICAgIC8vIGNvbnN0IHN1bVdpZHRoID0gY29scy5zdW1XaWR0aChzY2ksIGVjaSArIDEpO1xuICAgIC8vIGNvbnN0IHN1bUhlaWdodCA9IHJvd3Muc3VtSGVpZ2h0KHNyaSwgZXJpICsgMSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3N1bVdpZHRoOicsIHN1bVdpZHRoKTtcbiAgICBkcmF3LmNsZWFyUmVjdCgwLCAwLCB3LCBoKTtcbiAgICBpZiAoIXNldHRpbmdzLnNob3dHcmlkKSB7XG4gICAgICAgIGRyYXcucmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCdyb3dTdGFydDonLCByb3dTdGFydCwgJywgcm93TGVuOicsIHJvd0xlbik7XG4gICAgZGF0YS5yb3dFYWNoKHNyaSwgZXJpLCAoaSwgeSwgY2gpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3k6JywgeSk7XG4gICAgICAgIGlmIChpICE9PSBzcmkpIGRyYXcubGluZShbMCwgeV0sIFt3LCB5XSk7XG4gICAgICAgIGlmIChpID09PSBlcmkpIGRyYXcubGluZShbMCwgeSArIGNoXSwgW3csIHkgKyBjaF0pO1xuICAgIH0pO1xuICAgIGRhdGEuY29sRWFjaChzY2ksIGVjaSwgKGksIHgsIGN3KSA9PiB7XG4gICAgICAgIGlmIChpICE9PSBzY2kpIGRyYXcubGluZShbeCwgMF0sIFt4LCBoXSk7XG4gICAgICAgIGlmIChpID09PSBlY2kpIGRyYXcubGluZShbeCArIGN3LCAwXSwgW3ggKyBjdywgaF0pO1xuICAgIH0pO1xuICAgIGRyYXcucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJGcmVlemVIaWdobGlnaHRMaW5lKGZ3LCBmaCwgZnR3LCBmdGgpIHtcbiAgICBjb25zdCB7ZHJhdywgZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHR3aWR0aCA9IGRhdGEudmlld1dpZHRoKCkgLSBmdztcbiAgICBjb25zdCB0aGVpZ2h0ID0gZGF0YS52aWV3SGVpZ2h0KCkgLSBmaDtcbiAgICBkcmF3LnNhdmUoKVxuICAgICAgICAudHJhbnNsYXRlKGZ3LCBmaClcbiAgICAgICAgLmF0dHIoe3N0cm9rZVN0eWxlOiAncmdiYSg3NSwgMTM3LCAyNTUsIC42KSd9KTtcbiAgICBkcmF3LmxpbmUoWzAsIGZ0aF0sIFt0d2lkdGgsIGZ0aF0pO1xuICAgIGRyYXcubGluZShbZnR3LCAwXSwgW2Z0dywgdGhlaWdodF0pO1xuICAgIGRyYXcucmVzdG9yZSgpO1xufVxuXG4vKiogZW5kICovXG5jbGFzcyBUYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWwsIGRhdGEsIGVkaXRvcikge1xuICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgIHRoaXMuZHJhdyA9IG5ldyBEcmF3KGVsLCBkYXRhLnZpZXdXaWR0aCgpLCBkYXRhLnZpZXdIZWlnaHQoKSk7XG4gICAgICAgIC8vIHRoaXMuZmFjdG9yeSA9IGNyZWF0ZWQgQXBwbGljYXRpb25GYWN0b3J5KGRhdGEubWV0aG9kcywgZGF0YS5uYW1lLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICAvLyB0aGlzLndvcmtlciA9IGNyZWF0ZWQgV29ya2VyKCk7XG4gICAgICAgIHRoaXMuYXV0b0FkYXB0TGlzdCA9IFtdO1xuICAgIH1cblxuXG4gICAgZ2V0Q2VsbFRleHRDb250ZW50KHJpbmRleCwgY2luZGV4KSB7XG4gICAgICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtzb3J0ZWRSb3dNYXB9ID0gZGF0YTtcbiAgICAgICAgbGV0IG5yaW5kZXggPSByaW5kZXg7XG4gICAgICAgIGlmIChzb3J0ZWRSb3dNYXAuaGFzKHJpbmRleCkpIHtcbiAgICAgICAgICAgIG5yaW5kZXggPSBzb3J0ZWRSb3dNYXAuZ2V0KHJpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjZWxsID0gZGF0YS5nZXRDZWxsKG5yaW5kZXgsIGNpbmRleCk7XG4gICAgICAgIGlmIChjZWxsID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiNjJcIiwgY2VsbC5hZGFwdCk7XG5cbiAgICAgICAgcmV0dXJuIF9jZWxsLnJlbmRlcihjZWxsLnRleHQgfHwgJycsIGRhdGEsICh5LCB4KSA9PiAoZGF0YS5nZXRDZWxsVGV4dE9yRGVmYXVsdCh4LCB5KSkpO1xuICAgIH1cblxuICAgIGdldERyYXdCb3gocmluZGV4LCBjaW5kZXgpIHtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gZGF0YS5jZWxsUmVjdChyaW5kZXgsIGNpbmRleCk7XG4gICAgICAgIHJldHVybiBuZXcgRHJhd0JveChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIGNlbGxQYWRkaW5nV2lkdGgpO1xuICAgIH1cblxuICAgIGdldENlbGxUZXh0U3R5bGUocmluZGV4LCBjaW5kZXgpIHtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbiAgICAgICAgY29uc3Qge3NvcnRlZFJvd01hcH0gPSBkYXRhO1xuICAgICAgICBsZXQgbnJpbmRleCA9IHJpbmRleDtcbiAgICAgICAgaWYgKHNvcnRlZFJvd01hcC5oYXMocmluZGV4KSkge1xuICAgICAgICAgICAgbnJpbmRleCA9IHNvcnRlZFJvd01hcC5nZXQocmluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhLmdldENlbGxTdHlsZU9yRGVmYXVsdChucmluZGV4LCBjaW5kZXgpO1xuICAgIH1cblxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvLyByZXNpemUgY2FudmFzXG4gICAgICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtyb3dzLCBjb2xzfSA9IGRhdGE7XG4gICAgICAgIGxldCB2aWV3UmFuZ2UgPSBkYXRhLnZpZXdSYW5nZSgpO1xuXG4gICAgICAgIHBhcnNlQ2VsbC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5kcmF3LnJlc2l6ZShkYXRhLnZpZXdXaWR0aCgpLCBkYXRhLnZpZXdIZWlnaHQoKSk7XG5cbiAgICAgICAgY29uc3QgdHggPSBkYXRhLmZyZWV6ZVRvdGFsV2lkdGgoKTtcbiAgICAgICAgY29uc3QgdHkgPSBkYXRhLmZyZWV6ZVRvdGFsSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHt4LCB5fSA9IGRhdGEuc2Nyb2xsO1xuXG4gICAgICAgIC8vIGZpeGVkIHdpZHRoIG9mIGhlYWRlclxuICAgICAgICBjb25zdCBmdyA9IGNvbHMuaW5kZXhXaWR0aDtcbiAgICAgICAgLy8gZml4ZWQgaGVpZ2h0IG9mIGhlYWRlclxuICAgICAgICBsZXQgZmggPSByb3dzLmhlaWdodDtcblxuICAgICAgICByZW5kZXJDb250ZW50R3JpZC5jYWxsKHRoaXMsIHZpZXdSYW5nZSwgZncsIGZoLCB0eCwgdHkpO1xuXG4gICAgICAgIHJlbmRlckNvbnRlbnQuY2FsbCh0aGlzLCB2aWV3UmFuZ2UsIGZ3LCBmaCwgLXgsIC15KTtcblxuICAgICAgICByZW5kZXJGaXhlZEhlYWRlcnMuY2FsbCh0aGlzLCAnYWxsJywgdmlld1JhbmdlLCBmdywgZmgsIHR4LCB0eSk7XG5cbiAgICAgICAgcmVuZGVyRml4ZWRMZWZ0VG9wQ2VsbC5jYWxsKHRoaXMsIGZ3LCBmaCk7XG5cbiAgICAgICAgY29uc3QgW2ZyaSwgZmNpXSA9IGRhdGEuZnJlZXplO1xuICAgICAgICBpZiAoZnJpID4gMCB8fCBmY2kgPiAwKSB7XG4gICAgICAgICAgICAvLyAyXG4gICAgICAgICAgICBpZiAoZnJpID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZyID0gdmlld1JhbmdlLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgdnIuc3JpID0gMDtcbiAgICAgICAgICAgICAgICB2ci5lcmkgPSBmcmkgLSAxO1xuICAgICAgICAgICAgICAgIHZyLmggPSB0eTtcbiAgICAgICAgICAgICAgICByZW5kZXJDb250ZW50R3JpZC5jYWxsKHRoaXMsIHZyLCBmdywgZmgsIHR4LCAwKTtcbiAgICAgICAgICAgICAgICByZW5kZXJDb250ZW50LmNhbGwodGhpcywgdnIsIGZ3LCBmaCwgLXgsIDApO1xuICAgICAgICAgICAgICAgIHJlbmRlckZpeGVkSGVhZGVycy5jYWxsKHRoaXMsICd0b3AnLCB2ciwgZncsIGZoLCB0eCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAzeFxuICAgICAgICAgICAgaWYgKGZjaSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ciA9IHZpZXdSYW5nZS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIHZyLnNjaSA9IDA7XG4gICAgICAgICAgICAgICAgdnIuZWNpID0gZmNpIC0gMTtcbiAgICAgICAgICAgICAgICB2ci53ID0gdHg7XG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudEdyaWQuY2FsbCh0aGlzLCB2ciwgZncsIGZoLCAwLCB0eSk7XG4gICAgICAgICAgICAgICAgcmVuZGVyRml4ZWRIZWFkZXJzLmNhbGwodGhpcywgJ2xlZnQnLCB2ciwgZncsIGZoLCAwLCB0eSk7XG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudC5jYWxsKHRoaXMsIHZyLCBmdywgZmgsIDAsIC15KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDRcbiAgICAgICAgICAgIGNvbnN0IGZyZWV6ZVZpZXdSYW5nZSA9IGRhdGEuZnJlZXplVmlld1JhbmdlKCk7XG4gICAgICAgICAgICByZW5kZXJDb250ZW50R3JpZC5jYWxsKHRoaXMsIGZyZWV6ZVZpZXdSYW5nZSwgZncsIGZoLCAwLCAwKTtcbiAgICAgICAgICAgIHJlbmRlckZpeGVkSGVhZGVycy5jYWxsKHRoaXMsICdhbGwnLCBmcmVlemVWaWV3UmFuZ2UsIGZ3LCBmaCwgMCwgMCk7XG4gICAgICAgICAgICByZW5kZXJDb250ZW50LmNhbGwodGhpcywgZnJlZXplVmlld1JhbmdlLCBmdywgZmgsIDAsIDApO1xuICAgICAgICAgICAgLy8gNVxuICAgICAgICAgICAgcmVuZGVyRnJlZXplSGlnaGxpZ2h0TGluZS5jYWxsKHRoaXMsIGZ3LCBmaCwgdHgsIHR5KTtcbiAgICAgICAgfVxuICAgICAgICB0ZXN0VmFsaWQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5kcmF3LmNsZWFyKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJsZTtcbiIsImltcG9ydCB7dGZ9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGUnO1xuaW1wb3J0IHtpc051bWJlcn0gZnJvbSBcIi4uL2hlbHBlci9kYXRhcHJveHlfaGVscGVyXCI7XG5pbXBvcnQge2lzSGF2ZX0gZnJvbSAnLi4vaGVscGVyL2NoZWNrX3ZhbHVlJztcblxuY29uc3QgZm9ybWF0U3RyaW5nUmVuZGVyID0gdiA9PiB2O1xuXG5jb25zdCBmb3JtYXROdW1iZXJSZW5kZXIgPSAodiwgZml4ZWQgPSAyKSA9PiB7XG4gICAgaWYoIWlzSGF2ZSh2KSB8fCAhaXNOdW1iZXIodikpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGlmICgvXigtP1xcZCouP1xcZCopJC8udGVzdCh2KSkge1xuICAgICAgICBjb25zdCB2MSA9IGZpeGVkID09PSAtMSA/IHYudG9TdHJpbmcoKSA6IE51bWJlcih2KS50b0ZpeGVkKGZpeGVkKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBbZmlyc3QsIC4uLnBhcnRzXSA9IHYxLnNwbGl0KCdcXFxcLicpO1xuICAgICAgICBsZXQgdmFsdWUgPSBmaXJzdC5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyg/IVxcZCkpL2csICckMScpO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09ICdOYU4nID8gdiA6IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2ID09PSAnTmFOJyA/IHYgOiB2O1xufTtcblxuY29uc3QgYmFzZUZvcm1hdHMgPSBbXG4gICAge1xuICAgICAgICBrZXk6ICdub3JtYWwnLFxuICAgICAgICB0aXRsZTogdGYoJ2Zvcm1hdC5ub3JtYWwnKSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIHJlbmRlcjogZm9ybWF0U3RyaW5nUmVuZGVyLFxuICAgIH0sXG4gICAgLy8ge1xuICAgIC8vICAgICBrZXk6ICd0ZXh0JyxcbiAgICAvLyAgICAgdGl0bGU6IHRmKCdmb3JtYXQudGV4dCcpLFxuICAgIC8vICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAvLyAgICAgcmVuZGVyOiBmb3JtYXRTdHJpbmdSZW5kZXIsXG4gICAgLy8gfSxcbiAgICB7XG4gICAgICAgIGtleTogJ251bWJlcicsXG4gICAgICAgIHRpdGxlOiB0ZignZm9ybWF0Lm51bWJlcicpLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgbGFiZWw6ICcxLDAwMC4xMicsXG4gICAgICAgIHJlbmRlcjogZm9ybWF0TnVtYmVyUmVuZGVyLFxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdwZXJjZW50JyxcbiAgICAgICAgdGl0bGU6IHRmKCdmb3JtYXQucGVyY2VudCcpLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgbGFiZWw6ICcxMC4xMiUnLFxuICAgICAgICByZW5kZXI6ICh2KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gbXVsdGlwbHkodiwgMTAwKTtcbiAgICAgICAgICAgIGNvbnN0IGFfcyA9IGAke2F9YDtcbiAgICAgICAgICAgIHJldHVybiBgJHthX3N9JWA7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ3JtYicsXG4gICAgICAgIHRpdGxlOiB0ZignZm9ybWF0LnJtYicpLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgbGFiZWw6ICfvv6UxMC4wMCcsXG4gICAgICAgIHJlbmRlcjogdiA9PiBg77+lJHtmb3JtYXROdW1iZXJSZW5kZXIodil9YCxcbiAgICB9LFxuICAgIC8vIHtcbiAgICAvLyAgICAga2V5OiAndXNkJyxcbiAgICAvLyAgICAgdGl0bGU6IHRmKCdmb3JtYXQudXNkJyksXG4gICAgLy8gICAgIHR5cGU6ICdudW1iZXInLFxuICAgIC8vICAgICBsYWJlbDogJyQxMC4wMCcsXG4gICAgLy8gICAgIHJlbmRlcjogdiA9PiBgJCR7Zm9ybWF0TnVtYmVyUmVuZGVyKHYpfWAsXG4gICAgLy8gfSxcbiAgICB7XG4gICAgICAgIGtleTogJ2RhdGUnLFxuICAgICAgICB0aXRsZTogdGYoJ2Zvcm1hdC5kYXRlJyksXG4gICAgICAgIHR5cGU6ICdkYXRlJyxcbiAgICAgICAgbGFiZWw6ICcyMDA5LTAxLTAxJyxcbiAgICAgICAgcmVuZGVyOiBmb3JtYXRTdHJpbmdSZW5kZXIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ2RhdGV0aW1lJyxcbiAgICAgICAgdGl0bGU6IHRmKCdmb3JtYXQuZGF0ZXRpbWUnKSxcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgbGFiZWw6ICcyMDA55bm0MDHmnIgwMeaXpScsXG4gICAgICAgIHJlbmRlcjogZm9ybWF0U3RyaW5nUmVuZGVyLFxuICAgIH0sXG4gICAgLy8ge1xuICAgIC8vICAgICBrZXk6ICd0aW1lJyxcbiAgICAvLyAgICAgdGl0bGU6IHRmKCdmb3JtYXQudGltZScpLFxuICAgIC8vICAgICB0eXBlOiAnZGF0ZScsXG4gICAgLy8gICAgIGxhYmVsOiAnMTU6NTk6MDAnLFxuICAgIC8vICAgICByZW5kZXI6IGZvcm1hdFN0cmluZ1JlbmRlcixcbiAgICAvLyB9LFxuICAgIC8vIHtcbiAgICAvLyAgICAga2V5OiAnZGF0ZXRpbWUnLFxuICAgIC8vICAgICB0aXRsZTogdGYoJ2Zvcm1hdC5kYXRldGltZScpLFxuICAgIC8vICAgICB0eXBlOiAnZGF0ZScsXG4gICAgLy8gICAgIGxhYmVsOiAnMjYvMDkvMjAwOCAxNTo1OTowMCcsXG4gICAgLy8gICAgIHJlbmRlcjogZm9ybWF0U3RyaW5nUmVuZGVyLFxuICAgIC8vIH0sXG4gICAgLy8ge1xuICAgIC8vICAgICBrZXk6ICdkdXJhdGlvbicsXG4gICAgLy8gICAgIHRpdGxlOiB0ZignZm9ybWF0LmR1cmF0aW9uJyksXG4gICAgLy8gICAgIHR5cGU6ICdkYXRlJyxcbiAgICAvLyAgICAgbGFiZWw6ICcyNDowMTowMCcsXG4gICAgLy8gICAgIHJlbmRlcjogZm9ybWF0U3RyaW5nUmVuZGVyLFxuICAgIC8vIH0sXG5dO1xuXG5mdW5jdGlvbiBpc0ludGVnZXIob2JqKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3Iob2JqKSA9PT0gb2JqO1xufVxuXG5cbi8vIGZ1bmN0aW9uIGFkZChhLCBiLCBkaWdpdHMpIHtcbi8vICAgICByZXR1cm4gb3BlcmF0aW9uKGEsIGIsIGRpZ2l0cywgJ2FkZCcpO1xuLy8gfVxuLy9cbi8vIGZ1bmN0aW9uIHN1YnRyYWN0KGEsIGIsIGRpZ2l0cykge1xuLy8gICAgIHJldHVybiBvcGVyYXRpb24oYSwgYiwgZGlnaXRzLCAnc3VidHJhY3QnKTtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KGEsIGIsIGRpZ2l0cykge1xuICAgIHJldHVybiBvcGVyYXRpb24oYSwgYiwgZGlnaXRzLCAnbXVsdGlwbHknKTtcbn1cblxuZnVuY3Rpb24gZGl2aWRlKGEsIGIsIGRpZ2l0cykge1xuICAgIHJldHVybiBvcGVyYXRpb24oYSwgYiwgZGlnaXRzLCAnZGl2aWRlJyk7XG59XG5cbi8qXG4gKiDlsIbkuIDkuKrmta7ngrnmlbDovazmiJDmlbTmlbDvvIzov5Tlm57mlbTmlbDlkozlgI3mlbDjgILlpoIgMy4xNCA+PiAzMTTvvIzlgI3mlbDmmK8gMTAwXG4gKiBAcGFyYW0gZmxvYXROdW0ge251bWJlcn0g5bCP5pWwXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiAgIHt0aW1lczoxMDAsIG51bTogMzE0fVxuICovXG5mdW5jdGlvbiB0b0ludGVnZXIoZmxvYXROdW0pIHtcbiAgICBjb25zdCByZXQgPSB7dGltZXM6IDEsIG51bTogMH07XG4gICAgY29uc3QgaXNOZWdhdGl2ZSA9IGZsb2F0TnVtIDwgMDtcbiAgICBpZiAoaXNJbnRlZ2VyKGZsb2F0TnVtKSkge1xuICAgICAgICByZXQubnVtID0gZmxvYXROdW07XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGNvbnN0IHN0cmZpID0gYCR7ZmxvYXROdW19YDtcbiAgICBjb25zdCBkb3RQb3MgPSBzdHJmaS5pbmRleE9mKCcuJyk7XG4gICAgY29uc3QgbGVuID0gc3RyZmkuc3Vic3RyKGRvdFBvcyArIDEpLmxlbmd0aDtcbiAgICBjb25zdCB0aW1lcyA9IE1hdGgucG93KDEwLCBsZW4pO1xuICAgIGxldCBpbnROdW0gPSBwYXJzZUludChNYXRoLmFicyhmbG9hdE51bSkgKiB0aW1lcyArIDAuNSwgMTApO1xuICAgIHJldC50aW1lcyA9IHRpbWVzO1xuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAgIGludE51bSA9IC1pbnROdW07XG4gICAgfVxuICAgIHJldC5udW0gPSBpbnROdW07XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb3BlcmF0aW9uKGEsIGIsIGRpZ2l0cywgb3ApIHtcbiAgICBjb25zdCBvMSA9IHRvSW50ZWdlcihhKTtcbiAgICBjb25zdCBvMiA9IHRvSW50ZWdlcihiKTtcbiAgICBjb25zdCBuMSA9IG8xLm51bTtcbiAgICBjb25zdCBuMiA9IG8yLm51bTtcbiAgICBjb25zdCB0MSA9IG8xLnRpbWVzO1xuICAgIGNvbnN0IHQyID0gbzIudGltZXM7XG4gICAgY29uc3QgbWF4ID0gdDEgPiB0MiA/IHQxIDogdDI7XG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgICBjYXNlICdhZGQnOlxuICAgICAgICAgICAgaWYgKHQxID09PSB0MikgeyAvLyDkuKTkuKrlsI/mlbDkvY3mlbDnm7jlkIxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuMSArIG4yO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0MSA+IHQyKSB7IC8vIG8xIOWwj+aVsOS9jSDlpKfkuo4gbzJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuMSArIG4yICogKHQxIC8gdDIpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gbzEg5bCP5pWw5L2NIOWwj+S6jiBvMlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG4xICogKHQyIC8gdDEpICsgbjI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0IC8gbWF4O1xuICAgICAgICBjYXNlICdzdWJ0cmFjdCc6XG4gICAgICAgICAgICBpZiAodDEgPT09IHQyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbjEgLSBuMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodDEgPiB0Mikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG4xIC0gbjIgKiAodDEgLyB0Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG4xICogKHQyIC8gdDEpIC0gbjI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0IC8gbWF4O1xuICAgICAgICBjYXNlICdtdWx0aXBseSc6XG4gICAgICAgICAgICByZXN1bHQgPSAobjEgKiBuMikgLyAodDEgKiB0Mik7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICdkaXZpZGUnOlxuICAgICAgICAgICAgcmVzdWx0ID0gKG4xIC8gbjIpICogKHQyIC8gdDEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbi8vIGNvbnN0IGZvcm1hdHMgPSAoYXJ5ID0gW10pID0+IHtcbi8vICAgY29uc3QgbWFwID0ge307XG4vLyAgIGJhc2VGb3JtYXRzLmNvbmNhdChhcnkpLmZvckVhY2goKGYpID0+IHtcbi8vICAgICBtYXBbZi5rZXldID0gZjtcbi8vICAgfSk7XG4vLyAgIHJldHVybiBtYXA7XG4vLyB9O1xuY29uc3QgZm9ybWF0bSA9IHt9O1xuYmFzZUZvcm1hdHMuZm9yRWFjaCgoZikgPT4ge1xuICAgIGZvcm1hdG1bZi5rZXldID0gZjtcbn0pO1xuXG5leHBvcnQge1xuICAgIGZvcm1hdG0sXG4gICAgYmFzZUZvcm1hdHMsXG4gICAgZm9ybWF0TnVtYmVyUmVuZGVyXG59O1xuIiwiaW1wb3J0IHtFbGVtZW50fSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge3R9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBFbGVtZW50IHtcbiAgICAvLyB0eXBlOiBwcmltYXJ5XG4gICAgY29uc3RydWN0b3IodGl0bGUsIHR5cGUgPSAnJykge1xuICAgICAgICBzdXBlcignZGl2JywgYCR7Y3NzUHJlZml4fS1idXR0b24gJHt0eXBlfWApO1xuICAgICAgICB0aGlzLmNoaWxkKHQoYGJ1dHRvbi4ke3RpdGxlfWApKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc1ZhbHVlVmFsaWQgfSBmcm9tICcuLi8uLi9oZWxwZXIvZGF0YXByb3h5X2hlbHBlcic7XG5pbXBvcnQgKiBhcyBjaGVja2VyIGZyb20gJy4uL2NhbGNfdXRpbHMvZm9ybXVsYV9jaGVjayc7XG5pbXBvcnQgeyBDYWxjQ2VsbCB9IGZyb20gJy4vY2VsbF9mb3JtdWxhJztcbmltcG9ydCB7IEZuQ29sbGVjdGlvbiwgTXVsdGlDb2xsRXhwRm4gfSBmcm9tICcuL2ZuX2NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgZm5PYmpBcnJheSB9IGZyb20gJy4uL2V4cHJlc3Npb25fZm4vbm9ybWFsX2ZuJztcbmltcG9ydCAqIGFzIHJhd0ZuT2JqIGZyb20gJy4uL2V4cHJlc3Npb25fZm4vcmF3X2ZuJztcbmltcG9ydCB7IFNpbXBsZUV4cHJlc3Npb25CdWlsZGVyIH0gZnJvbSAnLi4vY2FsY19kZWFsL3NpbXBsZV9leHByZXNzaW9uL2RlYWxfc2ltcGxlX2V4cHJlc3Npb24nO1xuaW1wb3J0IHsgU3RydWN0dXJhbEV4cHJlc3Npb25CdWlsZGVyIH0gZnJvbSAnLi4vY2FsY19kZWFsL3N0cnVjdHVyYWxfZXhwcmVzc2lvbi9kZWFsX3N0cnVjdHVyYWxfZXhwcmVzc2lvbic7XG5pbXBvcnQge0ZPUk1VTEFfU1RBVFVTfSBmcm9tICcuLi9jYWxjX3V0aWxzL2NvbmZpZyc7XG5pbXBvcnQge2NvbnZlcnRUb0NlbGxWfSBmcm9tICcuLi9jZWxsX3ZhbHVlX3R5cGUvY2VsbF92YWx1ZSc7XG5cbi8qKlxuICog55So5p2l5Luj6KGo5LiA5Liq6K6h566X5byV5pOO5Lit55qEY2VsbFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWVcbiAqIEBwcm9wZXJ0eSB7Q2FsY1dvcmtib29rUHJveHl9IHdvcmtib29rUHJveHlcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBuYW1lMkNlbGxQcm94eVxuICovXG5leHBvcnQgY2xhc3MgQ2FsY1NoZWV0IHtcbiAgY29uc3RydWN0b3IobmFtZSwgd29ya2Jvb2tQcm94eSwgbmFtZTJDZWxsT2JqKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMud29ya2Jvb2tQcm94eSA9IHdvcmtib29rUHJveHlcbiAgICB0aGlzLm5hbWUyQ2VsbFByb3h5ID0gdGhpcy5jcmVhdGVOYW1lMkNlbGxQcm94eShuYW1lMkNlbGxPYmopXG4gIH1cblxuICBjcmVhdGVOYW1lMkNlbGxQcm94eShuYW1lMkNlbGxPYmope1xuICAgIGxldCBuYW1lMkNlbGxQcm94eSA9IHt9XG4gICAgbGV0IGNlbGxOYW1lLCBjZWxsU3RhdHVzXG4gICAgZm9yIChjZWxsTmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuYW1lMkNlbGxPYmopKXtcbiAgICAgIGxldCBjZWxsT2JqID0gbmFtZTJDZWxsT2JqW2NlbGxOYW1lXVxuICAgICAgaWYodHlwZW9mIGNlbGxPYmoudiA9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgY2VsbFN0YXR1cyA9IEZPUk1VTEFfU1RBVFVTLmNyZWF0ZWRcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjZWxsT2JqLnYgPSBjb252ZXJ0VG9DZWxsVihjZWxsT2JqLnYpIC8vIOWwgeijheeahOWNleWFg+agvOaVsOWAvFxuICAgICAgICBjZWxsU3RhdHVzID0gRk9STVVMQV9TVEFUVVMuc29sdmVkXG4gICAgICB9XG5cbiAgICAgIG5hbWUyQ2VsbFByb3h5W2NlbGxOYW1lXSA9IG5ldyBDYWxjQ2VsbChcbiAgICAgICAgdGhpcy53b3JrYm9va1Byb3h5LFxuICAgICAgICB0aGlzLFxuICAgICAgICBjZWxsT2JqLFxuICAgICAgICBjZWxsTmFtZSxcbiAgICAgICAgY2VsbFN0YXR1cy8vIOWtmOWcqHbnmoTml7blgJnku6Pooajlt7Lnu4/orqHnrpflpb3kuoZcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUyQ2VsbFByb3h5XG4gIH1cblxuICBnZXRDZWxsTmFtZXMoKXtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5uYW1lMkNlbGxQcm94eSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gY2VsbE5hbWVcbiAgICogQHJldHVybiB7Q2FsY0NlbGx9XG4gICAqL1xuICBnZXRDZWxsQnlOYW1lKGNlbGxOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTJDZWxsUHJveHlbY2VsbE5hbWVdXG4gIH1cblxuICBhZGRDYWxjQ2VsbChjZWxsTmFtZSwgY2VsbE9iaiwgc3RhdHVzID0gRk9STVVMQV9TVEFUVVMuY3JlYXRlZCl7XG4gICAgdGhpcy5uYW1lMkNlbGxQcm94eVtjZWxsTmFtZV0gPSBuZXcgQ2FsY0NlbGwoXG4gICAgICB0aGlzLndvcmtib29rUHJveHksXG4gICAgICB0aGlzLFxuICAgICAgY2VsbE9iaixcbiAgICAgIGNlbGxOYW1lLFxuICAgICAgc3RhdHVzXG4gICAgKVxuXG4gIH1cbn1cbi8qKlxuICogQHByb3BlcnR5e1NpbXBsZUV4cHJlc3Npb25CdWlsZGVyfSBzaW1wbGVFeHByZXNzaW9uQnVpbGRlclxuICogQHByb3BlcnR5e1N0cnVjdHVyYWxFeHByZXNzaW9uQnVpbGRlcn0gc3RydWN0dXJhbEV4cHJlc3Npb25CdWlsZGVyXG4gKiBAcHJvcGVydHl7TXVsdGlDb2xsRXhwRm59XG4gKi9cbmV4cG9ydCBjbGFzcyBDYWxjV29ya2Jvb2tQcm94eSB7IC8vIOWvuXdvcmtib29r55qE5pWw5o2u5Luj55CGXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gd29ya2Jvb2tPYmpcbiAgICovXG4gIGNvbnN0cnVjdG9yKHdvcmtib29rT2JqKSB7XG4gICAgdGhpcy5uYW1lMlNoZWV0UHJveHkgPSB0aGlzLmNyZWF0ZU5hbWUyU2hlZXRQcm94eSh3b3JrYm9va09iaik7IC8vIOWunuS+i+WMlnNoZWV05LiOY2VsbFxuICAgIHRoaXMubXVsdGlDb2xsRXhwRm4gID0gY3JlYXRlRGVmYXVsdEZuQ29sbGVjdGlvbigpXG4gIH1cblxuICB1cGRhdGVCeVdvcmtib29rT2JqKHdvcmtib29rT2JqKXtcbiAgICB0aGlzLm5hbWUyU2hlZXRQcm94eSA9IHRoaXMuY3JlYXRlTmFtZTJTaGVldFByb3h5KHdvcmtib29rT2JqKTsgLy8g5a6e5L6L5YyWc2hlZXTkuI5jZWxsXG4gIH1cblxuICBjcmVhdGVOYW1lMlNoZWV0UHJveHkod29ya2Jvb2tPYmopIHtcbiAgICBpZih0eXBlb2Ygd29ya2Jvb2tPYmouU2hlZXRzID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHdvcmtib29rT2JqLlNoZWV0cyA9IHsgU2hlZXQxOiB7QTE6IFwiXCJ9fSAvLyDpu5jorqTnmoTnqbrmlofku7ZcbiAgICB9XG4gICAgbGV0IG5hbWUyU2hlZXRQcm94eSA9IHt9XG4gICAgZm9yIChsZXQgc2hlZXROYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdvcmtib29rT2JqLlNoZWV0cykpIHtcbiAgICAgIGxldCBuYW1lMkNlbGxPYmogPSB3b3JrYm9va09iai5TaGVldHNbc2hlZXROYW1lXTtcbiAgICAgIG5hbWUyU2hlZXRQcm94eVtzaGVldE5hbWVdID0gbmV3IENhbGNTaGVldChzaGVldE5hbWUsIHRoaXMsIG5hbWUyQ2VsbE9iailcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUyU2hlZXRQcm94eVxuICB9XG5cbiAgZ2V0U2hlZXROYW1lcygpe1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLm5hbWUyU2hlZXRQcm94eSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc2hlZXROYW1lXG4gICAqIEByZXR1cm4ge0NhbGNTaGVldH1cbiAgICovXG4gIGdldFNoZWV0QnlOYW1lKHNoZWV0TmFtZSl7XG4gICAgcmV0dXJuIHRoaXMubmFtZTJTaGVldFByb3h5W3NoZWV0TmFtZV1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc2hlZXROYW1lXG4gICAqIEBwYXJhbSBjZWxsTmFtZVxuICAgKiBAcmV0dXJuIHtDYWxjQ2VsbH1cbiAgICovXG4gIGdldENlbGxCeU5hbWUoc2hlZXROYW1lLCBjZWxsTmFtZSl7XG4gICAgbGV0IHRoZVNoZWV0ID0gdGhpcy5nZXRTaGVldEJ5TmFtZShzaGVldE5hbWUpXG4gICAgcmV0dXJuIHRoZVNoZWV0LmdldENlbGxCeU5hbWUoY2VsbE5hbWUpXG4gIH1cblxuXG4gIGdldENlbGxQcm9wZXJ0eUJ5TmFtZShzaGVldE5hbWUsIGNlbGxOYW1lLCBwcm9wZXJ0eU5hbWUpe1xuICAgIGxldCB0aGVDZWxsID0gdGhpcy5nZXRDZWxsQnlOYW1lKHNoZWV0TmFtZSwgY2VsbE5hbWUpXG4gICAgcmV0dXJuIHRoZUNlbGwuZ2V0Q2VsbFByb3BlcnR5KHByb3BlcnR5TmFtZSlcbiAgfVxuXG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Q2FsY0NlbGx9IGNhbGNDZWxsXG4gICAqL1xuICBwYXJzZUNhbGNDZWxsKGNhbGNDZWxsKXtcbiAgICBsZXQgYnVpbGRlclxuICAgIGlmKGNhbGNDZWxsLmlzU3RydWN0dXJhbEZvcm11bGEoKSl7XG4gICAgICBidWlsZGVyID0gbmV3IFN0cnVjdHVyYWxFeHByZXNzaW9uQnVpbGRlcihjYWxjQ2VsbCwgdGhpcy5tdWx0aUNvbGxFeHBGbilcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge1N0cnVjdHVyYWxFeHByZXNzaW9uQnVpbGRlcn0gYnVpbGRlclxuICAgICAgICovXG4gICAgICByZXR1cm4gIGJ1aWxkZXIucGFyc2VGb3JtdWxhKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYnVpbGRlciA9IG5ldyBTaW1wbGVFeHByZXNzaW9uQnVpbGRlcihjYWxjQ2VsbClcbiAgICAgIHJldHVybiAgYnVpbGRlci5wYXJzZUZvcm11bGEoKVxuICAgIH1cbiAgfVxuXG5cbiAgY2FsY3VsYXRlRm9ybXVsYXMoY2FsY0NlbGxBcnJheSkgeyAvLyDmoLjlv4PnmoTorqHnrpflvJXmk447IGZvcm11bGFz5piv5pWw57uE77yM5bqU6K+l6L2s5YyW5Li6Y2VsbEZvcm11bGHnsbvjgIJcbiAgICBmb3IgKGxldCBpID0gY2FsY0NlbGxBcnJheS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgeyAvLyDpgY3ljobmiYDmnInpnIDopoHorqHnrpfnmoRmb3JtdWxhczsg5LuO5ZCO5ZCR5YmN6YGN5Y6GXG4gICAgICB0cnkge1xuICAgICAgICBsZXQgY2FsY0NlbGwgPSBjYWxjQ2VsbEFycmF5W2ldO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0NhbGNDZWxsfSBjYWxjQ2VsbFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGNhbGNDZWxsLmNoZWNrX3ZhbGlkKCkgIT09IHRydWUpIHsvL+WmguaenOWFrOW8j+S4jeWQiOazlVxuICAgICAgICAgIHRocm93IEVycm9yKFwibm90IGEgdmFsaWQgZm9ybXVsYVwiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGNDZWxsLmV4ZWNGb3JtdWxhKCk7IC8vIOaguOW/g+aWueazle+8jOaJp+ihjOWFrOW8j1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiAg6YGN5Y6G5omA5pyJ55qEY2VsbOWxnuaAp++8jOeEtuWQjui/lOWbnue7k+aenFxuICAgKiBAcGFyYW17ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBhcHBseVRvQWxsQ2VsbHMoY2FsbGJhY2speyAvLyDkuI3ov4fmu6RcbiAgICBsZXQgd2IgPSB0aGlzLm5hbWUyU2hlZXRQcm94eTtcbiAgICBsZXQgY2FsbEJhY2tSZXNcbiAgICBsZXQgZm9ybXVsYUFycmF5ID0gW107XG4gICAgZm9yIChsZXQgc2hlZXRfbmFtZSBvZiB0aGlzLmdldFNoZWV0TmFtZXMoKSkgeyAvLyB0b2RvIOaPkOS+m+exu+S8vHB5dGhvbuS4reeahGRpY3QuaXRlcm1zKCnnmoTmlrnms5VcbiAgICAgIGxldCBzaGVldFByb3h5ID0gdGhpcy5nZXRTaGVldEJ5TmFtZShzaGVldF9uYW1lKTtcbiAgICAgIGZvciAobGV0IGNlbGxfbmFtZSBvZiBzaGVldFByb3h5LmdldENlbGxOYW1lcygpKSB7XG4gICAgICAgIGNhbGxCYWNrUmVzID0gY2FsbGJhY2soc2hlZXRQcm94eS5nZXRDZWxsQnlOYW1lKGNlbGxfbmFtZSkpIC8vIOmBjeWOhmNlbGxcbiAgICAgICAgZm9ybXVsYUFycmF5LnB1c2goY2FsbEJhY2tSZXMpOyAvLyDkuYvlkI7lj6/ku6Xnm7TmjqXmiopudWxs6L+H5ruk5o6JXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3JtdWxhQXJyYXk7XG4gIH1cbiAgYXBwbHlUb0FsbENlbGxzRmlsdGVyRW1wdHkoY2FsbGJhY2speyAvLyDov4fmu6ROdWxsXG4gICAgbGV0IHdiID0gdGhpcy5uYW1lMlNoZWV0UHJveHk7XG4gICAgbGV0IGNhbGxCYWNrUmVzXG4gICAgbGV0IGZvcm11bGFBcnJheSA9IFtdO1xuICAgIGZvciAobGV0IHNoZWV0X25hbWUgb2YgdGhpcy5nZXRTaGVldE5hbWVzKCkpIHtcbiAgICAgIGxldCBzaGVldFByb3h5ID0gdGhpcy5nZXRTaGVldEJ5TmFtZShzaGVldF9uYW1lKTtcbiAgICAgIGZvciAobGV0IGNlbGxfbmFtZSBvZiBzaGVldFByb3h5LmdldENlbGxOYW1lcygpKSB7XG4gICAgICAgIGNhbGxCYWNrUmVzID0gY2FsbGJhY2soc2hlZXRQcm94eS5nZXRDZWxsQnlOYW1lKGNlbGxfbmFtZSkpIC8vIOmBjeWOhmNlbGxcbiAgICAgICAgaWYodHlwZW9mIGNhbGxCYWNrUmVzICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgZm9ybXVsYUFycmF5LnB1c2goY2FsbEJhY2tSZXMpOyAvLyDkuYvlkI7lj6/ku6Xnm7TmjqXmiopudWxs6L+H5ruk5o6JXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvcm11bGFBcnJheTtcbiAgfVxuXG5cbiAgZmluZF9hbGxfY2VsbHNfd2l0aF9mb3JtdWxhcygpIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q2FsY0NlbGx9IGNlbGxQcm94eVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlckNlbGxQcm94eShjZWxsUHJveHkpe1xuICAgICAgaWYoY2VsbFByb3h5LmlzRm9ybXVsYVZhbGlkKCkgJiYgY2VsbFByb3h5LmNlbGxTdGF0dXMgIT09IEZPUk1VTEFfU1RBVFVTLnNvbHZlZCl7IC8vIOiOt+WPluayoeacieiiq+ino+WGs+eahGZvcm11bGFcbiAgICAgICAgcmV0dXJuIGNlbGxQcm94eVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgY2VsbFdpdGhGb3JtdWxhQXJyYXkgPSB0aGlzLmFwcGx5VG9BbGxDZWxsc0ZpbHRlckVtcHR5KGZpbHRlckNlbGxQcm94eSlcbiAgICByZXR1cm4gY2VsbFdpdGhGb3JtdWxhQXJyYXk7XG4gIH1cblxuICBmaW5kX2FsbF9uZWVkX2NhbGNfY2VsbChwcmVBY3Rpb24pIHsgLy8gdG9kbzogcHJlQWN0aW9uLmZpbmRBbGxOZWVkQ2FsY0NlbGwg5bqU6K+l6L+U5Zued29ya2Jvb2vkuK3lpJrkuKpzaGVldOeahOWPmOWMlue7k+aenO+8myDpnIDopoHnrZvpgInlh7rpgqPkupvpnIDopoHph43mlrDorqHnrpfnmoRmb3JtdWxhc1xuICAgIGNvbnNvbGUubG9nKCdmaW5kX2FsbF9uZWVkX2NhbGNfY2VsbCcpO1xuICAgIGxldCB3YiA9IHRoaXMubmFtZTJTaGVldFByb3h5O1xuICAgIGxldCB0b19jYWxjX2NlbGxfbmFtZXMgPSBwcmVBY3Rpb24uZmluZEFsbE5lZWRDYWxjQ2VsbCgpOyAvLyDojrflj5bmiYDmnInpnIDopoHorqHnrpfnmoTljZXlhYPmoLzvvJsg5Y+v6IO95pyJ5b6I5aSabnVsbDsg5LiN5a2Y5Zyo5aSac2hlZXTnmoTmg4XlhrVcbiAgICBsZXQgZm9ybXVsYV9yZWYgPSB7fTtcbiAgICBsZXQgY2VsbHMgPSBbXTtcbiAgICBsZXQgc2hlZXRfbmFtZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdiLlNoZWV0cylbMF0gLy8gdG9kbzog5LmL5ZCO6KaB5pSv5oyB5aSac2hlZXRcbiAgICBsZXQgc2hlZXQgPSB3Yi5TaGVldHNbc2hlZXRfbmFtZV07IC8vIOW9k+WJjeeahHNoZWV0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b19jYWxjX2NlbGxfbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjZWxsX25hbWUgPSB0b19jYWxjX2NlbGxfbmFtZXNbaV07XG4gICAgICBpZihjZWxsX25hbWUgaW4gc2hlZXQgPT09IGZhbHNlKXsgLy8g5LiN5YyF5ZCr6L+Z5Liqc2hlZXRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGxldCBjZWxsID0gc2hlZXRbY2VsbF9uYW1lXTtcbiAgICAgIGxldCBmb3JtdWxhID0gZm9ybXVsYV9yZWZbc2hlZXRfbmFtZSArICchJyArIGNlbGxfbmFtZV0gPSBuZXcgQ2FsY0NlbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHNoZWV0LFxuICAgICAgICBzaGVldF9uYW1lLFxuICAgICAgICBzaGVldFtjZWxsX25hbWVdLFxuICAgICAgICBmb3JtdWxhX3JlZixcbiAgICAgICAgY2VsbF9uYW1lLFxuICAgICAgICAnY3JlYXRlZCcsXG4gICAgICApO1xuICAgICAgY2VsbHMucHVzaChmb3JtdWxhKTtcbiAgICB9XG4gICAgcmV0dXJuIGNlbGxzO1xuICB9O1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtNdWx0aUNvbGxFeHBGbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRGbkNvbGxlY3Rpb24oKSB7IC8vIOWIm+W7uum7mOiupOeahGV4cF9mbiBjb2xsZWN0aW9u57G7XG4gIGxldCBub3JtYWxfZm5fY29sbCA9IG5ldyBGbkNvbGxlY3Rpb24oKTtcbiAgbm9ybWFsX2ZuX2NvbGwuYWRkRm5PYmpBcnJheShmbk9iakFycmF5KTtcbiAgbGV0IG5vcm1hbEZuT2JqID0gbm9ybWFsX2ZuX2NvbGwuZm5PYmo7IC8vIOS7jmV4cHJlc3Npb25fZm4vbm9ybWFsX2Zu6I635Y+Wbm9ybWFsRm5PYmpcblxuICBsZXQgcmF3X2ZuX2NvbGwgPSBuZXcgRm5Db2xsZWN0aW9uKCk7XG4gIHJhd19mbl9jb2xsLmFkZEZuT2JqKHJhd0ZuT2JqKTtcbiAgbGV0IHJlc1Jhd0ZuT2JqID0gcmF3X2ZuX2NvbGwuZm5PYmo7IC8vIOS7jmV4cHJlc3Npb25fZm4vcmF3X2Zu6I635Y+WcmF3Rm5PYmpcblxuICBsZXQgbXVsdGlDb2xsRXhwRm4gPSBuZXcgTXVsdGlDb2xsRXhwRm4obm9ybWFsX2ZuX2NvbGwsIHJhd19mbl9jb2xsKTtcbiAgcmV0dXJuIG11bHRpQ29sbEV4cEZuO1xufVxuIiwiaW1wb3J0IGhlbHBlciBmcm9tIFwiLi4vLi4vaGVscGVyL2RhdGFwcm94eV9oZWxwZXJcIjtcbi8vWFc6IGVuZFxuLy9YVzrlpKfmi6zlj7flj4LmlbDliKTmlq0s5pyJ5aSn5ous5Y+35Y+C5pWw55SoJyfljIXotbfmnaXkvZzkuLrkuIDkuKrlj4LmlbBcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc19wYXJhbXMgKGNlbGwpIHtcbiAgbGV0IHJlZyA9IG5ldyBSZWdFeHAoJ1xceyguKj8pXFx9JywgJ2cnKTtcbiAgbGV0IGFyZyA9IGNlbGwuZi5tYXRjaChyZWcpO1xuICBpZiAoYXJnICE9PSBudWxsKXtcbiAgICBmb3IgKGxldCBpPTA7IGk8YXJnLmxlbmd0aDsgaSsrKXtcbiAgICAgIGxldCBwYXJhbSA9IGFyZ1tpXTtcbiAgICAgIGxldCByZXAgPSBcIidcIiArIHBhcmFtICsgXCInXCI7XG4gICAgICBjZWxsLmYgPSBjZWxsLmYucmVwbGFjZShwYXJhbSwgcmVwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2VsbFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJfc2hlZXQoc2hlZXQpIHtcbiAgT2JqZWN0LmtleXMoc2hlZXQpLmZvckVhY2goaSA9PiB7XG4gICAgaWYgKHNoZWV0W2ldLnYgPT09ICdkZWZhdWx0XzAnKXtcbiAgICAgIGlmICghaGVscGVyLmlzSGF2ZShzaGVldFtpXS5mKSkge1xuICAgICAgICBzaGVldFtpXS5mID0gXCJcIlxuICAgICAgfVxuICAgICAgc2hlZXRbaV0udiA9IDBcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2hlZXRcbn07XG4vL1hXOiBlbmRcbi8vWFc6IOWOu+mZpOWFrOW8j+W8gOWktOe7k+WwvueahOepuuagvFxuZXhwb3J0IGZ1bmN0aW9uIHN0cmltKHN0cil7XG4gIGxldCBzdHIxID0gc3RyLnJlcGxhY2UoL1xccyskLywnJyk7XG4gIGxldCBzdHIyID0gc3RyMS5yZXBsYWNlKC9eXFxzKy8sJycpO1xuICByZXR1cm4gc3RyMjtcbn07XG4vL1hX77yaIGVuZFxuXG4vL3hXOiDlhazlvI/lj4LmlbDovazmjaJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc19mb3JtdWxhKGYpe1xuICAvL+eJueauiuWFrOW8j+i9rOaNoiBGTE9PUi0+RkxPT1JNQVRILCB2YXAtPiB2YXJh562JXG4gIGxldCB0cmFuc19kaWN0ID0ge1xuICAgICdGTE9PUic6ICdGTE9PUk1BVEgnLFxuICAgICdsZXQnOiAnVkFSQScsXG4gICAgJ1dPUktEQVkuSU5UTCc6ICdXT1JLREFZSU5UTCdcbiAgfTtcbiAgZm9yKGxldCBpIGluIHRyYW5zX2RpY3Qpe1xuICAgIGxldCBiID0gdHJhbnNfZGljdFtpXTtcbiAgICBpZiAoZi5pbmRleE9mKGIpIDwgMCAmJiBmLmluZGV4T2YoaSk+PTAgJiYgZi5pbmRleE9mKGkgKyAnLicpIDw9MCl7XG4gICAgICBmID0gZi5yZXBsYWNlKGksIGIpXG4gICAgfVxuICB9XG4gIC8vX1hMRk4uIOW8gOWktOeahOWHveaVsOWOu+aOieW8gOWktFxuICBmID0gZi5yZXBsYWNlKCdfWExGTi4nLCAnJyk7XG4gIC8v5bCG5Ye95pWw5YWs5byP5Lit6ZmkXCJcIuS4reeahOWFtuS7lumDqOWIhui9rOaIkOWkp+WGmVxuICBsZXQgcmVnID0gbmV3IFJlZ0V4cCgnXCIoLio/KVwiJywgJ2cnKTtcbiAgbGV0IGFyZyA9IGYubWF0Y2gocmVnKTtcbiAgaWYgKGYuaW5kZXhPZignPScpID09PSAwKXtcbiAgICBmID0gZi50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChhcmcgIT09IG51bGwpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwYXJhbSA9IGFyZ1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZihmLmluZGV4T2YocGFyYW0pID49IDApe1xuICAgICAgICAgIGYgPSBmLnJlcGxhY2UocGFyYW0sIGFyZ1tpXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZlxufVxuLy94VzplbmRcbiIsImltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IG51bWVyYWwgZnJvbSAnbnVtZXJhbCdcblxuZXhwb3J0cy5VTklRVUUgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgaGFzRWxlbWVudCA9IGZhbHNlO1xuICAgIGxldCBlbGVtZW50ICAgID0gYXJndW1lbnRzW2ldO1xuXG4gICAgLy8gQ2hlY2sgaWYgd2UndmUgYWxyZWFkeSBzZWVuIHRoaXMgZWxlbWVudC5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJlc3VsdC5sZW5ndGg7ICsraikge1xuICAgICAgaGFzRWxlbWVudCA9IHJlc3VsdFtqXSA9PT0gZWxlbWVudDtcbiAgICAgIGlmIChoYXNFbGVtZW50KSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZGlkIG5vdCBmaW5kIGl0LCBhZGQgaXQgdG8gdGhlIHJlc3VsdC5cbiAgICBpZiAoIWhhc0VsZW1lbnQpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5GTEFUVEVOID0gdXRpbHMuZmxhdHRlbjtcblxuZXhwb3J0cy5BUkdTMkFSUkFZID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbn07XG5cbmV4cG9ydHMuUkVGRVJFTkNFID0gZnVuY3Rpb24gKGNvbnRleHQsIHJlZmVyZW5jZSkge1xuICB0cnkge1xuICAgIGxldCBwYXRoID0gcmVmZXJlbmNlLnNwbGl0KCcuJyk7XG4gICAgbGV0IHJlc3VsdCA9IGNvbnRleHQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgKytpKSB7XG4gICAgICBsZXQgc3RlcCA9IHBhdGhbaV07XG4gICAgICBpZiAoc3RlcFtzdGVwLmxlbmd0aCAtIDFdID09PSAnXScpIHtcbiAgICAgICAgbGV0IG9wZW5pbmcgPSBzdGVwLmluZGV4T2YoJ1snKTtcbiAgICAgICAgbGV0IGluZGV4ID0gc3RlcC5zdWJzdHJpbmcob3BlbmluZyArIDEsIHN0ZXAubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdFtzdGVwLnN1YnN0cmluZygwLCBvcGVuaW5nKV1baW5kZXhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3N0ZXBdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnJvcikge31cbn07XG5cbmV4cG9ydHMuSk9JTiA9IGZ1bmN0aW9uIChhcnJheSwgc2VwYXJhdG9yKSB7XG4gIHJldHVybiBhcnJheS5qb2luKHNlcGFyYXRvcik7XG59O1xuXG5leHBvcnRzLk5VTUJFUlMgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBwb3NzaWJsZU51bWJlcnMgPSB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cyk7XG4gIHJldHVybiBwb3NzaWJsZU51bWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiB0eXBlb2YgZWwgPT09ICdudW1iZXInO1xuICB9KTtcbn07XG5cbmV4cG9ydHMuTlVNRVJBTCA9IGZ1bmN0aW9uIChudW1iZXIsIGZvcm1hdCkge1xuICByZXR1cm4gbnVtZXJhbChudW1iZXIpLmZvcm1hdChmb3JtYXQpO1xufTtcbiIsImltcG9ydCB7ZXJyb3JPYmp9IGZyb20gJy4uLy4uL2NhbGNfdXRpbHMvZXJyb3JfY29uZmlnJ1xuaW1wb3J0IHtqU3RhdH0gZnJvbSAnanN0YXQnXG5pbXBvcnQgdGV4dCAgZnJvbSAnLi90ZXh0J1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgYmVzc2VsIGZyb20gJ2Jlc3NlbCdcblxuZnVuY3Rpb24gaXNWYWxpZEJpbmFyeU51bWJlcihudW1iZXIpIHtcbiAgcmV0dXJuICgvXlswMV17MSwxMH0kLykudGVzdChudW1iZXIpO1xufVxuXG5leHBvcnRzLkJFU1NFTEkgPSBmdW5jdGlvbih4LCBuKSB7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG4pO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBuKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gYmVzc2VsLmJlc3NlbGkoeCwgbik7XG59O1xuXG5leHBvcnRzLkJFU1NFTEogPSBmdW5jdGlvbih4LCBuKSB7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG4pO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBuKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gYmVzc2VsLmJlc3NlbGooeCwgbik7XG59O1xuXG5leHBvcnRzLkJFU1NFTEsgPSBmdW5jdGlvbih4LCBuKSB7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG4pO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBuKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gYmVzc2VsLmJlc3NlbGsoeCwgbik7XG59O1xuXG5leHBvcnRzLkJFU1NFTFkgPSBmdW5jdGlvbih4LCBuKSB7XG4gIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcbiAgbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG4pO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCBuKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gYmVzc2VsLmJlc3NlbHkoeCwgbik7XG59O1xuXG5leHBvcnRzLkJJTjJERUMgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3QgYmluYXJ5IG9yIGNvbnRhaW5zIG1vcmUgdGhhbiAxMCBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXG4gIGlmICghaXNWYWxpZEJpbmFyeU51bWJlcihudW1iZXIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgYmluYXJ5IG51bWJlciB0byBkZWNpbWFsXG4gIGxldCByZXN1bHQgPSBwYXJzZUludChudW1iZXIsIDIpO1xuXG4gIC8vIEhhbmRsZSBuZWdhdGl2ZSBudW1iZXJzXG4gIGxldCBzdHJpbmdpZmllZCA9IG51bWJlci50b1N0cmluZygpO1xuICBpZiAoc3RyaW5naWZpZWQubGVuZ3RoID09PSAxMCAmJiBzdHJpbmdpZmllZC5zdWJzdHJpbmcoMCwgMSkgPT09ICcxJykge1xuICAgIHJldHVybiBwYXJzZUludChzdHJpbmdpZmllZC5zdWJzdHJpbmcoMSksIDIpIC0gNTEyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cblxuZXhwb3J0cy5CSU4ySEVYID0gZnVuY3Rpb24obnVtYmVyLCBwbGFjZXMpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3QgYmluYXJ5IG9yIGNvbnRhaW5zIG1vcmUgdGhhbiAxMCBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXG4gIGlmICghaXNWYWxpZEJpbmFyeU51bWJlcihudW1iZXIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBoZXhhZGVjaW1hbCBudW1iZXIgaWYgbnVtYmVyIGlzIG5lZ2F0aXZlXG4gIGxldCBzdHJpbmdpZmllZCA9IG51bWJlci50b1N0cmluZygpO1xuICBpZiAoc3RyaW5naWZpZWQubGVuZ3RoID09PSAxMCAmJiBzdHJpbmdpZmllZC5zdWJzdHJpbmcoMCwgMSkgPT09ICcxJykge1xuICAgIHJldHVybiAoMTA5OTUxMTYyNzI2NCArIHBhcnNlSW50KHN0cmluZ2lmaWVkLnN1YnN0cmluZygxKSwgMikpLnRvU3RyaW5nKDE2KTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgYmluYXJ5IG51bWJlciB0byBoZXhhZGVjaW1hbFxuICBsZXQgcmVzdWx0ID0gcGFyc2VJbnQobnVtYmVyLCAyKS50b1N0cmluZygxNik7XG5cbiAgLy8gUmV0dXJuIGhleGFkZWNpbWFsIG51bWJlciB1c2luZyB0aGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBuZWNlc3NhcnkgaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxuICBpZiAocGxhY2VzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xuICAgIGlmIChpc05hTihwbGFjZXMpKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxuICAgIGlmIChwbGFjZXMgPCAwKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICAgIH1cblxuICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXG4gICAgcGxhY2VzID0gTWF0aC5mbG9vcihwbGFjZXMpO1xuXG4gICAgLy8gUGFkIHJldHVybiB2YWx1ZSB3aXRoIGxlYWRpbmcgMHMgKHplcm9zKSBpZiBuZWNlc3NhcnkgKHVzaW5nIFVuZGVyc2NvcmUuc3RyaW5nKVxuICAgIHJldHVybiAocGxhY2VzID49IHJlc3VsdC5sZW5ndGgpID8gdGV4dC5SRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbn07XG5cbmV4cG9ydHMuQklOMk9DVCA9IGZ1bmN0aW9uKG51bWJlciwgcGxhY2VzKSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGJpbmFyeSBvciBjb250YWlucyBtb3JlIHRoYW4gMTAgY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxuICBpZiAoIWlzVmFsaWRCaW5hcnlOdW1iZXIobnVtYmVyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgb2N0YWwgbnVtYmVyIGlmIG51bWJlciBpcyBuZWdhdGl2ZVxuICBsZXQgc3RyaW5naWZpZWQgPSBudW1iZXIudG9TdHJpbmcoKTtcbiAgaWYgKHN0cmluZ2lmaWVkLmxlbmd0aCA9PT0gMTAgJiYgc3RyaW5naWZpZWQuc3Vic3RyaW5nKDAsIDEpID09PSAnMScpIHtcbiAgICByZXR1cm4gKDEwNzM3NDEzMTIgKyBwYXJzZUludChzdHJpbmdpZmllZC5zdWJzdHJpbmcoMSksIDIpKS50b1N0cmluZyg4KTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgYmluYXJ5IG51bWJlciB0byBvY3RhbFxuICBsZXQgcmVzdWx0ID0gcGFyc2VJbnQobnVtYmVyLCAyKS50b1N0cmluZyg4KTtcblxuICAvLyBSZXR1cm4gb2N0YWwgbnVtYmVyIHVzaW5nIHRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIG5lY2Vzc2FyeSBpZiBwbGFjZXMgaXMgdW5kZWZpbmVkXG4gIGlmIChwbGFjZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBub25udW1lcmljXG4gICAgaWYgKGlzTmFOKHBsYWNlcykpIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5lZ2F0aXZlXG4gICAgaWYgKHBsYWNlcyA8IDApIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gICAgfVxuXG4gICAgLy8gVHJ1bmNhdGUgcGxhY2VzIGluIGNhc2UgaXQgaXMgbm90IGFuIGludGVnZXJcbiAgICBwbGFjZXMgPSBNYXRoLmZsb29yKHBsYWNlcyk7XG5cbiAgICAvLyBQYWQgcmV0dXJuIHZhbHVlIHdpdGggbGVhZGluZyAwcyAoemVyb3MpIGlmIG5lY2Vzc2FyeSAodXNpbmcgVW5kZXJzY29yZS5zdHJpbmcpXG4gICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyB0ZXh0LlJFUFQoJzAnLCBwbGFjZXMgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdCA6IGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxufTtcblxuZXhwb3J0cy5CSVRBTkQgPSBmdW5jdGlvbihudW1iZXIxLCBudW1iZXIyKSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGEgbm9uLW51bWVyaWMgdmFsdWVcbiAgbnVtYmVyMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcjEpO1xuICBudW1iZXIyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyMik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlcjEsIG51bWJlcjIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgbGVzcyB0aGFuIDBcbiAgaWYgKG51bWJlcjEgPCAwIHx8IG51bWJlcjIgPCAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGEgbm9uLWludGVnZXJcbiAgaWYgKE1hdGguZmxvb3IobnVtYmVyMSkgIT09IG51bWJlcjEgfHwgTWF0aC5mbG9vcihudW1iZXIyKSAhPT0gbnVtYmVyMikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIG51bWJlciBpcyBncmVhdGVyIHRoYW4gKDJeNDgpLTFcbiAgaWYgKG51bWJlcjEgPiAyODE0NzQ5NzY3MTA2NTUgfHwgbnVtYmVyMiA+IDI4MTQ3NDk3NjcxMDY1NSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gYml0d2lzZSBBTkQgb2YgdHdvIG51bWJlcnNcbiAgcmV0dXJuIG51bWJlcjEgJiBudW1iZXIyO1xufTtcblxuZXhwb3J0cy5CSVRMU0hJRlQgPSBmdW5jdGlvbihudW1iZXIsIHNoaWZ0KSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIHNoaWZ0ID0gdXRpbHMucGFyc2VOdW1iZXIoc2hpZnQpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIHNoaWZ0KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbGVzcyB0aGFuIDBcbiAgaWYgKG51bWJlciA8IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBhIG5vbi1pbnRlZ2VyXG4gIGlmIChNYXRoLmZsb29yKG51bWJlcikgIT09IG51bWJlcikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiAoMl40OCktMVxuICBpZiAobnVtYmVyID4gMjgxNDc0OTc2NzEwNjU1KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiB0aGUgYWJzb2x1dGUgdmFsdWUgb2Ygc2hpZnQgaXMgZ3JlYXRlciB0aGFuIDUzXG4gIGlmIChNYXRoLmFicyhzaGlmdCkgPiA1Mykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gbnVtYmVyIHNoaWZ0ZWQgYnkgc2hpZnQgYml0cyB0byB0aGUgbGVmdCBvciB0byB0aGUgcmlnaHQgaWYgc2hpZnQgaXMgbmVnYXRpdmVcbiAgcmV0dXJuIChzaGlmdCA+PSAwKSA/IG51bWJlciA8PCBzaGlmdCA6IG51bWJlciA+PiAtc2hpZnQ7XG59O1xuXG5leHBvcnRzLkJJVE9SID0gZnVuY3Rpb24obnVtYmVyMSwgbnVtYmVyMikge1xuICBudW1iZXIxID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyMSk7XG4gIG51bWJlcjIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIyKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyMSwgbnVtYmVyMikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIG51bWJlciBpcyBsZXNzIHRoYW4gMFxuICBpZiAobnVtYmVyMSA8IDAgfHwgbnVtYmVyMiA8IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgYSBub24taW50ZWdlclxuICBpZiAoTWF0aC5mbG9vcihudW1iZXIxKSAhPT0gbnVtYmVyMSB8fCBNYXRoLmZsb29yKG51bWJlcjIpICE9PSBudW1iZXIyKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiAoMl40OCktMVxuICBpZiAobnVtYmVyMSA+IDI4MTQ3NDk3NjcxMDY1NSB8fCBudW1iZXIyID4gMjgxNDc0OTc2NzEwNjU1KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBiaXR3aXNlIE9SIG9mIHR3byBudW1iZXJzXG4gIHJldHVybiBudW1iZXIxIHwgbnVtYmVyMjtcbn07XG5cbmV4cG9ydHMuQklUUlNISUZUID0gZnVuY3Rpb24obnVtYmVyLCBzaGlmdCkge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBzaGlmdCA9IHV0aWxzLnBhcnNlTnVtYmVyKHNoaWZ0KTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBzaGlmdCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIGxlc3MgdGhhbiAwXG4gIGlmIChudW1iZXIgPCAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgYSBub24taW50ZWdlclxuICBpZiAoTWF0aC5mbG9vcihudW1iZXIpICE9PSBudW1iZXIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBncmVhdGVyIHRoYW4gKDJeNDgpLTFcbiAgaWYgKG51bWJlciA+IDI4MTQ3NDk3NjcxMDY1NSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgdGhlIGFic29sdXRlIHZhbHVlIG9mIHNoaWZ0IGlzIGdyZWF0ZXIgdGhhbiA1M1xuICBpZiAoTWF0aC5hYnMoc2hpZnQpID4gNTMpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIG51bWJlciBzaGlmdGVkIGJ5IHNoaWZ0IGJpdHMgdG8gdGhlIHJpZ2h0IG9yIHRvIHRoZSBsZWZ0IGlmIHNoaWZ0IGlzIG5lZ2F0aXZlXG4gIHJldHVybiAoc2hpZnQgPj0gMCkgPyBudW1iZXIgPj4gc2hpZnQgOiBudW1iZXIgPDwgLXNoaWZ0O1xufTtcblxuZXhwb3J0cy5CSVRYT1IgPSBmdW5jdGlvbihudW1iZXIxLCBudW1iZXIyKSB7XG4gIG51bWJlcjEgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIxKTtcbiAgbnVtYmVyMiA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcjIpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIxLCBudW1iZXIyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGxlc3MgdGhhbiAwXG4gIGlmIChudW1iZXIxIDwgMCB8fCBudW1iZXIyIDwgMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIG51bWJlciBpcyBhIG5vbi1pbnRlZ2VyXG4gIGlmIChNYXRoLmZsb29yKG51bWJlcjEpICE9PSBudW1iZXIxIHx8IE1hdGguZmxvb3IobnVtYmVyMikgIT09IG51bWJlcjIpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgZ3JlYXRlciB0aGFuICgyXjQ4KS0xXG4gIGlmIChudW1iZXIxID4gMjgxNDc0OTc2NzEwNjU1IHx8IG51bWJlcjIgPiAyODE0NzQ5NzY3MTA2NTUpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGJpdHdpc2UgWE9SIG9mIHR3byBudW1iZXJzXG4gIHJldHVybiBudW1iZXIxIF4gbnVtYmVyMjtcbn07XG5cbmV4cG9ydHMuQ09NUExFWCA9IGZ1bmN0aW9uKHJlYWwsIGltYWdpbmFyeSwgc3VmZml4KSB7XG4gIHJlYWwgPSB1dGlscy5wYXJzZU51bWJlcihyZWFsKTtcbiAgaW1hZ2luYXJ5ID0gdXRpbHMucGFyc2VOdW1iZXIoaW1hZ2luYXJ5KTtcbiAgLy9YVzog5Y+C5pWw5oql6ZSZXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHJlYWwsIGltYWdpbmFyeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgLy9YV++8mmVuZFxuXG4gIC8vIFNldCBzdWZmaXhcbiAgc3VmZml4ID0gKHN1ZmZpeCA9PT0gdW5kZWZpbmVkKSA/ICdpJyA6IHN1ZmZpeDtcbiAgc3VmZml4ID0gc3VmZml4LnRvTG93ZXJDYXNlKCk7XG4gIC8vIFJldHVybiBlcnJvciBpZiBzdWZmaXggaXMgbmVpdGhlciBcImlcIiBub3IgXCJqXCJcbiAgaWYgKHN1ZmZpeCAhPT0gJ2knICYmIHN1ZmZpeCAhPT0gJ2onKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGNvbXBsZXggbnVtYmVyXG4gIGlmIChyZWFsID09PSAwICYmIGltYWdpbmFyeSA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2UgaWYgKHJlYWwgPT09IDApIHtcbiAgICByZXR1cm4gKGltYWdpbmFyeSA9PT0gMSkgPyBzdWZmaXggOiBpbWFnaW5hcnkudG9TdHJpbmcoKSArIHN1ZmZpeDtcbiAgfSBlbHNlIGlmIChpbWFnaW5hcnkgPT09IDApIHtcbiAgICByZXR1cm4gcmVhbC50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIGxldCBzaWduID0gKGltYWdpbmFyeSA+IDApID8gJysnIDogJyc7XG4gICAgcmV0dXJuIHJlYWwudG9TdHJpbmcoKSArIHNpZ24gKyAoKGltYWdpbmFyeSA9PT0gMSkgPyBzdWZmaXggOiBpbWFnaW5hcnkudG9TdHJpbmcoKSArIHN1ZmZpeCk7XG4gIH1cbn07XG5cbmV4cG9ydHMuQ09OVkVSVCA9IGZ1bmN0aW9uKG51bWJlciwgZnJvbV91bml0LCB0b191bml0KSB7XG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cbiAgLy8gTGlzdCBvZiB1bml0cyBzdXBwb3J0ZWQgYnkgQ09OVkVSVCBhbmQgdW5pdHMgZGVmaW5lZCBieSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHNcbiAgLy8gW05hbWUsIFN5bWJvbCwgQWx0ZXJuYXRlIHN5bWJvbHMsIFF1YW50aXR5LCBJU1UsIENPTlZFUlQsIENvbnZlcnNpb24gcmF0aW9dXG4gIGxldCB1bml0cyA9IFtcbiAgICBbXCJhLnUuIG9mIGFjdGlvblwiLCBcIj9cIiwgbnVsbCwgXCJhY3Rpb25cIiwgZmFsc2UsIGZhbHNlLCAxLjA1NDU3MTY4MTgxODE4ZS0zNF0sXG4gICAgW1wiYS51LiBvZiBjaGFyZ2VcIiwgXCJlXCIsIG51bGwsIFwiZWxlY3RyaWNfY2hhcmdlXCIsIGZhbHNlLCBmYWxzZSwgMS42MDIxNzY1MzE0MTQxNGUtMTldLFxuICAgIFtcImEudS4gb2YgZW5lcmd5XCIsIFwiRWhcIiwgbnVsbCwgXCJlbmVyZ3lcIiwgZmFsc2UsIGZhbHNlLCA0LjM1OTc0NDE3NzU3NTc2ZS0xOF0sXG4gICAgW1wiYS51LiBvZiBsZW5ndGhcIiwgXCJhP1wiLCBudWxsLCBcImxlbmd0aFwiLCBmYWxzZSwgZmFsc2UsIDUuMjkxNzcyMTA4MTgxODJlLTExXSxcbiAgICBbXCJhLnUuIG9mIG1hc3NcIiwgXCJtP1wiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIGZhbHNlLCA5LjEwOTM4MjYxNjE2MTYyZS0zMV0sXG4gICAgW1wiYS51LiBvZiB0aW1lXCIsIFwiPy9FaFwiLCBudWxsLCBcInRpbWVcIiwgZmFsc2UsIGZhbHNlLCAyLjQxODg4NDMyNjUwNTE2ZS0xN10sXG4gICAgW1wiYWRtaXJhbHR5IGtub3RcIiwgXCJhZG1rblwiLCBudWxsLCBcInNwZWVkXCIsIGZhbHNlLCB0cnVlLCAwLjUxNDc3MzMzM10sXG4gICAgW1wiYW1wZXJlXCIsIFwiQVwiLCBudWxsLCBcImVsZWN0cmljX2N1cnJlbnRcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcImFtcGVyZSBwZXIgbWV0ZXJcIiwgXCJBL21cIiwgbnVsbCwgXCJtYWduZXRpY19maWVsZF9pbnRlbnNpdHlcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcIsOlbmdzdHLDtm1cIiwgXCLDhVwiLCBbXCJhbmdcIl0sIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAxZS0xMF0sXG4gICAgW1wiYXJlXCIsIFwiYXJcIiwgbnVsbCwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAxMDBdLFxuICAgIFtcImFzdHJvbm9taWNhbCB1bml0XCIsIFwidWFcIiwgbnVsbCwgXCJsZW5ndGhcIiwgZmFsc2UsIGZhbHNlLCAxLjQ5NTk3ODcwNjkxNjY3ZS0xMV0sXG4gICAgW1wiYmFyXCIsIFwiYmFyXCIsIG51bGwsIFwicHJlc3N1cmVcIiwgZmFsc2UsIGZhbHNlLCAxMDAwMDBdLFxuICAgIFtcImJhcm5cIiwgXCJiXCIsIG51bGwsIFwiYXJlYVwiLCBmYWxzZSwgZmFsc2UsIDFlLTI4XSxcbiAgICBbXCJiZWNxdWVyZWxcIiwgXCJCcVwiLCBudWxsLCBcInJhZGlvYWN0aXZpdHlcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcImJpdFwiLCBcImJpdFwiLCBbXCJiXCJdLCBcImluZm9ybWF0aW9uXCIsIGZhbHNlLCB0cnVlLCAxXSxcbiAgICBbXCJidHVcIiwgXCJCVFVcIiwgW1wiYnR1XCJdLCBcImVuZXJneVwiLCBmYWxzZSwgdHJ1ZSwgMTA1NS4wNTU4NTI2Ml0sXG4gICAgW1wiYnl0ZVwiLCBcImJ5dGVcIiwgbnVsbCwgXCJpbmZvcm1hdGlvblwiLCBmYWxzZSwgdHJ1ZSwgOF0sXG4gICAgW1wiY2FuZGVsYVwiLCBcImNkXCIsIG51bGwsIFwibHVtaW5vdXNfaW50ZW5zaXR5XCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJjYW5kZWxhIHBlciBzcXVhcmUgbWV0cmVcIiwgXCJjZC9tP1wiLCBudWxsLCBcImx1bWluYW5jZVwiLCB0cnVlLCBmYWxzZSwgMV0sXG4gICAgW1wiY291bG9tYlwiLCBcIkNcIiwgbnVsbCwgXCJlbGVjdHJpY19jaGFyZ2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcImN1YmljIMOlbmdzdHLDtm1cIiwgXCJhbmczXCIsIFtcImFuZ14zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMWUtMzBdLFxuICAgIFtcImN1YmljIGZvb3RcIiwgXCJmdDNcIiwgW1wiZnReM1wiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDI4MzE2ODQ2NTkyXSxcbiAgICBbXCJjdWJpYyBpbmNoXCIsIFwiaW4zXCIsIFtcImluXjNcIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDAxNjM4NzA2NF0sXG4gICAgW1wiY3ViaWMgbGlnaHQteWVhclwiLCBcImx5M1wiLCBbXCJseV4zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgOC40Njc4NjY2NDYyMzcxNWUtNDddLFxuICAgIFtcImN1YmljIG1ldHJlXCIsIFwibT9cIiwgbnVsbCwgXCJ2b2x1bWVcIiwgdHJ1ZSwgdHJ1ZSwgMV0sXG4gICAgW1wiY3ViaWMgbWlsZVwiLCBcIm1pM1wiLCBbXCJtaV4zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgNDE2ODE4MTgyNS40NDA1OF0sXG4gICAgW1wiY3ViaWMgbmF1dGljYWwgbWlsZVwiLCBcIk5taTNcIiwgW1wiTm1pXjNcIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCA2MzUyMTgyMjA4XSxcbiAgICBbXCJjdWJpYyBQaWNhXCIsIFwiUGljYTNcIiwgW1wiUGljYXB0M1wiLCBcIlBpY2FeM1wiLCBcIlBpY2FwdF4zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgNy41ODY2MDM3MDM3MDM2OWUtOF0sXG4gICAgW1wiY3ViaWMgeWFyZFwiLCBcInlkM1wiLCBbXCJ5ZF4zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC43NjQ1NTQ4NTc5ODRdLFxuICAgIFtcImN1cFwiLCBcImN1cFwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAyMzY1ODgyMzY1XSxcbiAgICBbXCJkYWx0b25cIiwgXCJEYVwiLCBbXCJ1XCJdLCBcIm1hc3NcIiwgZmFsc2UsIGZhbHNlLCAxLjY2MDUzODg2MjgyODI4ZS0yN10sXG4gICAgW1wiZGF5XCIsIFwiZFwiLCBbXCJkYXlcIl0sIFwidGltZVwiLCBmYWxzZSwgdHJ1ZSwgODY0MDBdLFxuICAgIFtcImRlZ3JlZVwiLCBcIsKwXCIsIG51bGwsIFwiYW5nbGVcIiwgZmFsc2UsIGZhbHNlLCAwLjAxNzQ1MzI5MjUxOTk0MzNdLFxuICAgIFtcImRlZ3JlZXMgUmFua2luZVwiLCBcIlJhbmtcIiwgbnVsbCwgXCJ0ZW1wZXJhdHVyZVwiLCBmYWxzZSwgdHJ1ZSwgMC41NTU1NTU1NTU1NTU1NTZdLFxuICAgIFtcImR5bmVcIiwgXCJkeW5cIiwgW1wiZHlcIl0sIFwiZm9yY2VcIiwgZmFsc2UsIHRydWUsIDAuMDAwMDFdLFxuICAgIFtcImVsZWN0cm9udm9sdFwiLCBcImVWXCIsIFtcImV2XCJdLCBcImVuZXJneVwiLCBmYWxzZSwgdHJ1ZSwgMS42MDIxNzY1NjUxNDE0MV0sXG4gICAgW1wiZWxsXCIsIFwiZWxsXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAxLjE0M10sXG4gICAgW1wiZXJnXCIsIFwiZXJnXCIsIFtcImVcIl0sIFwiZW5lcmd5XCIsIGZhbHNlLCB0cnVlLCAxZS03XSxcbiAgICBbXCJmYXJhZFwiLCBcIkZcIiwgbnVsbCwgXCJlbGVjdHJpY19jYXBhY2l0YW5jZVwiLCB0cnVlLCBmYWxzZSwgMV0sXG4gICAgW1wiZmx1aWQgb3VuY2VcIiwgXCJvelwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwMjk1NzM1Mjk1NjI1XSxcbiAgICBbXCJmb290XCIsIFwiZnRcIiwgbnVsbCwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDAuMzA0OF0sXG4gICAgW1wiZm9vdC1wb3VuZFwiLCBcImZsYlwiLCBudWxsLCBcImVuZXJneVwiLCBmYWxzZSwgdHJ1ZSwgMS4zNTU4MTc5NDgzMzE0XSxcbiAgICBbXCJnYWxcIiwgXCJHYWxcIiwgbnVsbCwgXCJhY2NlbGVyYXRpb25cIiwgZmFsc2UsIGZhbHNlLCAwLjAxXSxcbiAgICBbXCJnYWxsb25cIiwgXCJnYWxcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAzNzg1NDExNzg0XSxcbiAgICBbXCJnYXVzc1wiLCBcIkdcIiwgW1wiZ2FcIl0sIFwibWFnbmV0aWNfZmx1eF9kZW5zaXR5XCIsIGZhbHNlLCB0cnVlLCAxXSxcbiAgICBbXCJncmFpblwiLCBcImdyYWluXCIsIG51bGwsIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwNjQ3OTg5XSxcbiAgICBbXCJncmFtXCIsIFwiZ1wiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDAuMDAxXSxcbiAgICBbXCJncmF5XCIsIFwiR3lcIiwgbnVsbCwgXCJhYnNvcmJlZF9kb3NlXCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJncm9zcyByZWdpc3RlcmVkIHRvblwiLCBcIkdSVFwiLCBbXCJyZWd0b25cIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAyLjgzMTY4NDY1OTJdLFxuICAgIFtcImhlY3RhcmVcIiwgXCJoYVwiLCBudWxsLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDEwMDAwXSxcbiAgICBbXCJoZW5yeVwiLCBcIkhcIiwgbnVsbCwgXCJpbmR1Y3RhbmNlXCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJoZXJ0elwiLCBcIkh6XCIsIG51bGwsIFwiZnJlcXVlbmN5XCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJob3JzZXBvd2VyXCIsIFwiSFBcIiwgW1wiaFwiXSwgXCJwb3dlclwiLCBmYWxzZSwgdHJ1ZSwgNzQ1LjY5OTg3MTU4MjI3XSxcbiAgICBbXCJob3JzZXBvd2VyLWhvdXJcIiwgXCJIUGhcIiwgW1wiaGhcIiwgXCJocGhcIl0sIFwiZW5lcmd5XCIsIGZhbHNlLCB0cnVlLCAyNjg0NTE5LjUzOF0sXG4gICAgW1wiaG91clwiLCBcImhcIiwgW1wiaHJcIl0sIFwidGltZVwiLCBmYWxzZSwgdHJ1ZSwgMzYwMF0sXG4gICAgW1wiaW1wZXJpYWwgZ2FsbG9uIChVLksuKVwiLCBcInVrX2dhbFwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDQ1NDYwOV0sXG4gICAgW1wiaW1wZXJpYWwgaHVuZHJlZHdlaWdodFwiLCBcImxjd3RcIiwgW1widWtfY3d0XCIsIFwiaHdlaWdodFwiXSwgXCJtYXNzXCIsIGZhbHNlLCB0cnVlLCA1MC44MDIzNDVdLFxuICAgIFtcImltcGVyaWFsIHF1YXJ0IChVLkspXCIsIFwidWtfcXRcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAxMTM2NTIyNV0sXG4gICAgW1wiaW1wZXJpYWwgdG9uXCIsIFwiYnJ0b25cIiwgW1widWtfdG9uXCIsIFwiTFRPTlwiXSwgXCJtYXNzXCIsIGZhbHNlLCB0cnVlLCAxMDE2LjA0NjkwOV0sXG4gICAgW1wiaW5jaFwiLCBcImluXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAwLjAyNTRdLFxuICAgIFtcImludGVybmF0aW9uYWwgYWNyZVwiLCBcInVrX2FjcmVcIiwgbnVsbCwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCA0MDQ2Ljg1NjQyMjRdLFxuICAgIFtcIklUIGNhbG9yaWVcIiwgXCJjYWxcIiwgbnVsbCwgXCJlbmVyZ3lcIiwgZmFsc2UsIHRydWUsIDQuMTg2OF0sXG4gICAgW1wiam91bGVcIiwgXCJKXCIsIG51bGwsIFwiZW5lcmd5XCIsIHRydWUsIHRydWUsIDFdLFxuICAgIFtcImthdGFsXCIsIFwia2F0XCIsIG51bGwsIFwiY2F0YWx5dGljX2FjdGl2aXR5XCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJrZWx2aW5cIiwgXCJLXCIsIFtcImtlbFwiXSwgXCJ0ZW1wZXJhdHVyZVwiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCJraWxvZ3JhbVwiLCBcImtnXCIsIG51bGwsIFwibWFzc1wiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCJrbm90XCIsIFwia25cIiwgbnVsbCwgXCJzcGVlZFwiLCBmYWxzZSwgdHJ1ZSwgMC41MTQ0NDQ0NDQ0NDQ0NDRdLFxuICAgIFtcImxpZ2h0LXllYXJcIiwgXCJseVwiLCBudWxsLCBcImxlbmd0aFwiLCBmYWxzZSwgdHJ1ZSwgOTQ2MDczMDQ3MjU4MDgwMF0sXG4gICAgW1wibGl0cmVcIiwgXCJMXCIsIFtcImxcIiwgXCJsdFwiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAxXSxcbiAgICBbXCJsdW1lblwiLCBcImxtXCIsIG51bGwsIFwibHVtaW5vdXNfZmx1eFwiLCB0cnVlLCBmYWxzZSwgMV0sXG4gICAgW1wibHV4XCIsIFwibHhcIiwgbnVsbCwgXCJpbGx1bWluYW5jZVwiLCB0cnVlLCBmYWxzZSwgMV0sXG4gICAgW1wibWF4d2VsbFwiLCBcIk14XCIsIG51bGwsIFwibWFnbmV0aWNfZmx1eFwiLCBmYWxzZSwgZmFsc2UsIDFlLTE4XSxcbiAgICBbXCJtZWFzdXJlbWVudCB0b25cIiwgXCJNVE9OXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAxLjEzMjY3Mzg2MzY4XSxcbiAgICBbXCJtZXRlciBwZXIgaG91clwiLCBcIm0vaFwiLCBbXCJtL2hyXCJdLCBcInNwZWVkXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDI3Nzc3Nzc3Nzc3Nzc4XSxcbiAgICBbXCJtZXRlciBwZXIgc2Vjb25kXCIsIFwibS9zXCIsIFtcIm0vc2VjXCJdLCBcInNwZWVkXCIsIHRydWUsIHRydWUsIDFdLFxuICAgIFtcIm1ldGVyIHBlciBzZWNvbmQgc3F1YXJlZFwiLCBcIm0/cz8/XCIsIG51bGwsIFwiYWNjZWxlcmF0aW9uXCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJwYXJzZWNcIiwgXCJwY1wiLCBbXCJwYXJzZWNcIl0sIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAzMDg1Njc3NTgxNDY3MTkwMF0sXG4gICAgW1wibWV0ZXIgc3F1YXJlZCBwZXIgc2Vjb25kXCIsIFwibT8vc1wiLCBudWxsLCBcImtpbmVtYXRpY192aXNjb3NpdHlcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcIm1ldHJlXCIsIFwibVwiLCBudWxsLCBcImxlbmd0aFwiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCJtaWxlcyBwZXIgaG91clwiLCBcIm1waFwiLCBudWxsLCBcInNwZWVkXCIsIGZhbHNlLCB0cnVlLCAwLjQ0NzA0XSxcbiAgICBbXCJtaWxsaW1ldHJlIG9mIG1lcmN1cnlcIiwgXCJtbUhnXCIsIG51bGwsIFwicHJlc3N1cmVcIiwgZmFsc2UsIGZhbHNlLCAxMzMuMzIyXSxcbiAgICBbXCJtaW51dGVcIiwgXCI/XCIsIG51bGwsIFwiYW5nbGVcIiwgZmFsc2UsIGZhbHNlLCAwLjAwMDI5MDg4ODIwODY2NTcyMl0sXG4gICAgW1wibWludXRlXCIsIFwibWluXCIsIFtcIm1uXCJdLCBcInRpbWVcIiwgZmFsc2UsIHRydWUsIDYwXSxcbiAgICBbXCJtb2Rlcm4gdGVhc3Bvb25cIiwgXCJ0c3BtXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDAwNV0sXG4gICAgW1wibW9sZVwiLCBcIm1vbFwiLCBudWxsLCBcImFtb3VudF9vZl9zdWJzdGFuY2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcIm1vcmdlblwiLCBcIk1vcmdlblwiLCBudWxsLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDI1MDBdLFxuICAgIFtcIm4udS4gb2YgYWN0aW9uXCIsIFwiP1wiLCBudWxsLCBcImFjdGlvblwiLCBmYWxzZSwgZmFsc2UsIDEuMDU0NTcxNjgxODE4MThlLTM0XSxcbiAgICBbXCJuLnUuIG9mIG1hc3NcIiwgXCJtP1wiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIGZhbHNlLCA5LjEwOTM4MjYxNjE2MTYyZS0zMV0sXG4gICAgW1wibi51LiBvZiBzcGVlZFwiLCBcImM/XCIsIG51bGwsIFwic3BlZWRcIiwgZmFsc2UsIGZhbHNlLCAyOTk3OTI0NThdLFxuICAgIFtcIm4udS4gb2YgdGltZVwiLCBcIj8vKG1lP2M/PylcIiwgbnVsbCwgXCJ0aW1lXCIsIGZhbHNlLCBmYWxzZSwgMS4yODgwODg2Njc3ODY4N2UtMjFdLFxuICAgIFtcIm5hdXRpY2FsIG1pbGVcIiwgXCJNXCIsIFtcIk5taVwiXSwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDFdLFxuICAgIFtcIm5ld3RvblwiLCBcIk5cIiwgbnVsbCwgXCJmb3JjZVwiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCLFk3JzdGVkXCIsIFwiT2UgXCIsIG51bGwsIFwibWFnbmV0aWNfZmllbGRfaW50ZW5zaXR5XCIsIGZhbHNlLCBmYWxzZSwgNzkuNTc3NDcxNTQ1OTQ3N10sXG4gICAgW1wib2htXCIsIFwizqlcIiwgbnVsbCwgXCJlbGVjdHJpY19yZXNpc3RhbmNlXCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJvdW5jZSBtYXNzXCIsIFwib3ptXCIsIG51bGwsIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgMC4wMjgzNDk1MjMxMjVdLFxuICAgIFtcInBhc2NhbFwiLCBcIlBhXCIsIG51bGwsIFwicHJlc3N1cmVcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcInBhc2NhbCBzZWNvbmRcIiwgXCJQYT9zXCIsIG51bGwsIFwiZHluYW1pY192aXNjb3NpdHlcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcInBmZXJkZXN0w6Rya2VcIiwgXCJQU1wiLCBudWxsLCBcInBvd2VyXCIsIGZhbHNlLCB0cnVlLCA3MzUuNDk4NzVdLFxuICAgIFtcInBob3RcIiwgXCJwaFwiLCBudWxsLCBcImlsbHVtaW5hbmNlXCIsIGZhbHNlLCBmYWxzZSwgMC4wMDAxXSxcbiAgICBbXCJwaWNhICgxLzYgaW5jaClcIiwgXCJwaWNhXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDM1Mjc3Nzc3Nzc3Nzc4XSxcbiAgICBbXCJwaWNhICgxLzcyIGluY2gpXCIsIFwiUGljYVwiLCBbXCJQaWNhcHRcIl0sIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAwLjAwNDIzMzMzMzMzMzMzMzMzXSxcbiAgICBbXCJwb2lzZVwiLCBcIlBcIiwgbnVsbCwgXCJkeW5hbWljX3Zpc2Nvc2l0eVwiLCBmYWxzZSwgZmFsc2UsIDAuMV0sXG4gICAgW1wicG9uZFwiLCBcInBvbmRcIiwgbnVsbCwgXCJmb3JjZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDk4MDY2NV0sXG4gICAgW1wicG91bmQgZm9yY2VcIiwgXCJsYmZcIiwgbnVsbCwgXCJmb3JjZVwiLCBmYWxzZSwgdHJ1ZSwgNC40NDgyMjE2MTUyNjA1XSxcbiAgICBbXCJwb3VuZCBtYXNzXCIsIFwibGJtXCIsIG51bGwsIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgMC40NTM1OTIzN10sXG4gICAgW1wicXVhcnRcIiwgXCJxdFwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDA5NDYzNTI5NDZdLFxuICAgIFtcInJhZGlhblwiLCBcInJhZFwiLCBudWxsLCBcImFuZ2xlXCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJzZWNvbmRcIiwgXCI/XCIsIG51bGwsIFwiYW5nbGVcIiwgZmFsc2UsIGZhbHNlLCAwLjAwMDAwNDg0ODEzNjgxMTA5NTM2XSxcbiAgICBbXCJzZWNvbmRcIiwgXCJzXCIsIFtcInNlY1wiXSwgXCJ0aW1lXCIsIHRydWUsIHRydWUsIDFdLFxuICAgIFtcInNob3J0IGh1bmRyZWR3ZWlnaHRcIiwgXCJjd3RcIiwgW1wic2h3ZWlnaHRcIl0sIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgNDUuMzU5MjM3XSxcbiAgICBbXCJzaWVtZW5zXCIsIFwiU1wiLCBudWxsLCBcImVsZWN0cmljYWxfY29uZHVjdGFuY2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcInNpZXZlcnRcIiwgXCJTdlwiLCBudWxsLCBcImVxdWl2YWxlbnRfZG9zZVwiLCB0cnVlLCBmYWxzZSwgMV0sXG4gICAgW1wic2x1Z1wiLCBcInNnXCIsIG51bGwsIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgMTQuNTkzOTAyOTRdLFxuICAgIFtcInNxdWFyZSDDpW5nc3Ryw7ZtXCIsIFwiYW5nMlwiLCBbXCJhbmdeMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAxZS0yMF0sXG4gICAgW1wic3F1YXJlIGZvb3RcIiwgXCJmdDJcIiwgW1wiZnReMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAwLjA5MjkwMzA0XSxcbiAgICBbXCJzcXVhcmUgaW5jaFwiLCBcImluMlwiLCBbXCJpbl4yXCJdLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDAuMDAwNjQ1MTZdLFxuICAgIFtcInNxdWFyZSBsaWdodC15ZWFyXCIsIFwibHkyXCIsIFtcImx5XjJcIl0sIFwiYXJlYVwiLCBmYWxzZSwgdHJ1ZSwgOC45NTA1NDIxMDc0ODE4OWUrMzFdLFxuICAgIFtcInNxdWFyZSBtZXRlclwiLCBcIm0/XCIsIG51bGwsIFwiYXJlYVwiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCJzcXVhcmUgbWlsZVwiLCBcIm1pMlwiLCBbXCJtaV4yXCJdLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDI1ODk5ODguMTEwMzM2XSxcbiAgICBbXCJzcXVhcmUgbmF1dGljYWwgbWlsZVwiLCBcIk5taTJcIiwgW1wiTm1pXjJcIl0sIFwiYXJlYVwiLCBmYWxzZSwgdHJ1ZSwgMzQyOTkwNF0sXG4gICAgW1wic3F1YXJlIFBpY2FcIiwgXCJQaWNhMlwiLCBbXCJQaWNhcHQyXCIsIFwiUGljYV4yXCIsIFwiUGljYXB0XjJcIl0sIFwiYXJlYVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwMTc5MjExMTExMTExMV0sXG4gICAgW1wic3F1YXJlIHlhcmRcIiwgXCJ5ZDJcIiwgW1wieWReMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAwLjgzNjEyNzM2XSxcbiAgICBbXCJzdGF0dXRlIG1pbGVcIiwgXCJtaVwiLCBudWxsLCBcImxlbmd0aFwiLCBmYWxzZSwgdHJ1ZSwgMTYwOS4zNDRdLFxuICAgIFtcInN0ZXJhZGlhblwiLCBcInNyXCIsIG51bGwsIFwic29saWRfYW5nbGVcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxuICAgIFtcInN0aWxiXCIsIFwic2JcIiwgbnVsbCwgXCJsdW1pbmFuY2VcIiwgZmFsc2UsIGZhbHNlLCAwLjAwMDFdLFxuICAgIFtcInN0b2tlc1wiLCBcIlN0XCIsIG51bGwsIFwia2luZW1hdGljX3Zpc2Nvc2l0eVwiLCBmYWxzZSwgZmFsc2UsIDAuMDAwMV0sXG4gICAgW1wic3RvbmVcIiwgXCJzdG9uZVwiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDYuMzUwMjkzMThdLFxuICAgIFtcInRhYmxlc3Bvb25cIiwgXCJ0YnNcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAwMDE0Nzg2OF0sXG4gICAgW1widGVhc3Bvb25cIiwgXCJ0c3BcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAwMDA0OTI4OTJdLFxuICAgIFtcInRlc2xhXCIsIFwiVFwiLCBudWxsLCBcIm1hZ25ldGljX2ZsdXhfZGVuc2l0eVwiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCJ0aGVybW9keW5hbWljIGNhbG9yaWVcIiwgXCJjXCIsIG51bGwsIFwiZW5lcmd5XCIsIGZhbHNlLCB0cnVlLCA0LjE4NF0sXG4gICAgW1widG9uXCIsIFwidG9uXCIsIG51bGwsIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgOTA3LjE4NDc0XSxcbiAgICBbXCJ0b25uZVwiLCBcInRcIiwgbnVsbCwgXCJtYXNzXCIsIGZhbHNlLCBmYWxzZSwgMTAwMF0sXG4gICAgW1wiVS5LLiBwaW50XCIsIFwidWtfcHRcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAwNTY4MjYxMjVdLFxuICAgIFtcIlUuUy4gYnVzaGVsXCIsIFwiYnVzaGVsXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAzNTIzOTA3XSxcbiAgICBbXCJVLlMuIG9pbCBiYXJyZWxcIiwgXCJiYXJyZWxcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMTU4OTg3Mjk1XSxcbiAgICBbXCJVLlMuIHBpbnRcIiwgXCJwdFwiLCBbXCJ1c19wdFwiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAwNDczMTc2NDczXSxcbiAgICBbXCJVLlMuIHN1cnZleSBtaWxlXCIsIFwic3VydmV5X21pXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAxNjA5LjM0NzIxOV0sXG4gICAgW1wiVS5TLiBzdXJ2ZXkvc3RhdHV0ZSBhY3JlXCIsIFwidXNfYWNyZVwiLCBudWxsLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDQwNDYuODcyNjFdLFxuICAgIFtcInZvbHRcIiwgXCJWXCIsIG51bGwsIFwidm9sdGFnZVwiLCB0cnVlLCBmYWxzZSwgMV0sXG4gICAgW1wid2F0dFwiLCBcIldcIiwgbnVsbCwgXCJwb3dlclwiLCB0cnVlLCB0cnVlLCAxXSxcbiAgICBbXCJ3YXR0LWhvdXJcIiwgXCJXaFwiLCBbXCJ3aFwiXSwgXCJlbmVyZ3lcIiwgZmFsc2UsIHRydWUsIDM2MDBdLFxuICAgIFtcIndlYmVyXCIsIFwiV2JcIiwgbnVsbCwgXCJtYWduZXRpY19mbHV4XCIsIHRydWUsIGZhbHNlLCAxXSxcbiAgICBbXCJ5YXJkXCIsIFwieWRcIiwgbnVsbCwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDAuOTE0NF0sXG4gICAgW1wieWVhclwiLCBcInlyXCIsIG51bGwsIFwidGltZVwiLCBmYWxzZSwgdHJ1ZSwgMzE1NTc2MDBdXG4gIF07XG5cbiAgLy8gQmluYXJ5IHByZWZpeGVzXG4gIC8vIFtOYW1lLCBQcmVmaXggcG93ZXIgb2YgMiB2YWx1ZSwgUHJldml4IHZhbHVlLCBBYmJyZXZpYXRpb24sIERlcml2ZWQgZnJvbV1cbiAgbGV0IGJpbmFyeV9wcmVmaXhlcyA9IHtcbiAgICBZaTogW1wieW9iaVwiLCA4MCwgMTIwODkyNTgxOTYxNDYyOTE3NDcwNjE3NiwgXCJZaVwiLCBcInlvdHRhXCJdLFxuICAgIFppOiBbXCJ6ZWJpXCIsIDcwLCAxMTgwNTkxNjIwNzE3NDExMzAzNDI0LCBcIlppXCIsIFwiemV0dGFcIl0sXG4gICAgRWk6IFtcImV4YmlcIiwgNjAsIDExNTI5MjE1MDQ2MDY4NDY5NzYsIFwiRWlcIiwgXCJleGFcIl0sXG4gICAgUGk6IFtcInBlYmlcIiwgNTAsIDExMjU4OTk5MDY4NDI2MjQsIFwiUGlcIiwgXCJwZXRhXCJdLFxuICAgIFRpOiBbXCJ0ZWJpXCIsIDQwLCAxMDk5NTExNjI3Nzc2LCBcIlRpXCIsIFwidGVyYVwiXSxcbiAgICBHaTogW1wiZ2liaVwiLCAzMCwgMTA3Mzc0MTgyNCwgXCJHaVwiLCBcImdpZ2FcIl0sXG4gICAgTWk6IFtcIm1lYmlcIiwgMjAsIDEwNDg1NzYsIFwiTWlcIiwgXCJtZWdhXCJdLFxuICAgIGtpOiBbXCJraWJpXCIsIDEwLCAxMDI0LCBcImtpXCIsIFwia2lsb1wiXVxuICB9O1xuXG4gIC8vIFVuaXQgcHJlZml4ZXNcbiAgLy8gW05hbWUsIE11bHRpcGxpZXIsIEFiYnJldmlhdGlvbl1cbiAgbGV0IHVuaXRfcHJlZml4ZXMgPSB7XG4gICAgWTogW1wieW90dGFcIiwgMWUrMjQsIFwiWVwiXSxcbiAgICBaOiBbXCJ6ZXR0YVwiLCAxZSsyMSwgXCJaXCJdLFxuICAgIEU6IFtcImV4YVwiLCAxZSsxOCwgXCJFXCJdLFxuICAgIFA6IFtcInBldGFcIiwgMWUrMTUsIFwiUFwiXSxcbiAgICBUOiBbXCJ0ZXJhXCIsIDFlKzEyLCBcIlRcIl0sXG4gICAgRzogW1wiZ2lnYVwiLCAxZSswOSwgXCJHXCJdLFxuICAgIE06IFtcIm1lZ2FcIiwgMWUrMDYsIFwiTVwiXSxcbiAgICBrOiBbXCJraWxvXCIsIDFlKzAzLCBcImtcIl0sXG4gICAgaDogW1wiaGVjdG9cIiwgMWUrMDIsIFwiaFwiXSxcbiAgICBlOiBbXCJkZWthb1wiLCAxZSswMSwgXCJlXCJdLFxuICAgIGQ6IFtcImRlY2lcIiwgMWUtMDEsIFwiZFwiXSxcbiAgICBjOiBbXCJjZW50aVwiLCAxZS0wMiwgXCJjXCJdLFxuICAgIG06IFtcIm1pbGxpXCIsIDFlLTAzLCBcIm1cIl0sXG4gICAgdTogW1wibWljcm9cIiwgMWUtMDYsIFwidVwiXSxcbiAgICBuOiBbXCJuYW5vXCIsIDFlLTA5LCBcIm5cIl0sXG4gICAgcDogW1wicGljb1wiLCAxZS0xMiwgXCJwXCJdLFxuICAgIGY6IFtcImZlbXRvXCIsIDFlLTE1LCBcImZcIl0sXG4gICAgYTogW1wiYXR0b1wiLCAxZS0xOCwgXCJhXCJdLFxuICAgIHo6IFtcInplcHRvXCIsIDFlLTIxLCBcInpcIl0sXG4gICAgeTogW1wieW9jdG9cIiwgMWUtMjQsIFwieVwiXVxuICB9O1xuXG4gIC8vIEluaXRpYWxpemUgdW5pdHMgYW5kIG11bHRpcGxpZXJzXG4gIGxldCBmcm9tID0gbnVsbDtcbiAgbGV0IHRvID0gbnVsbDtcbiAgbGV0IGJhc2VfZnJvbV91bml0ID0gZnJvbV91bml0LnRvTG93ZXJDYXNlKCk7XG4gIGxldCBiYXNlX3RvX3VuaXQgPSB0b191bml0LnRvTG93ZXJDYXNlKCk7XG4gIGxldCBmcm9tX211bHRpcGxpZXIgPSAxO1xuICBsZXQgdG9fbXVsdGlwbGllciA9IDE7XG4gIGxldCBhbHQ7XG4gIC8vIExvb2t1cCBmcm9tIGFuZCB0byB1bml0c1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgYWx0ID0gKHVuaXRzW2ldWzJdID09PSBudWxsKSA/IFtdIDogdW5pdHNbaV1bMl07XG4gICAgaWYgKHVuaXRzW2ldWzFdLnRvTG93ZXJDYXNlKCkgPT09IGJhc2VfZnJvbV91bml0IHx8IGFsdC5pbmRleE9mKGZyb21fdW5pdCkgPj0gMCkge1xuICAgICAgZnJvbSA9IHVuaXRzW2ldO1xuICAgIH1cbiAgICBpZiAodW5pdHNbaV1bMV0udG9Mb3dlckNhc2UoKSA9PT0gYmFzZV90b191bml0IHx8IGFsdC5pbmRleE9mKHRvX3VuaXQpID49IDApIHtcbiAgICAgIHRvID0gdW5pdHNbaV07XG4gICAgfVxuICB9XG4gIC8vIExvb2t1cCBmcm9tIHByZWZpeFxuICBpZiAoZnJvbSA9PT0gbnVsbCkge1xuICAgIGxldCBmcm9tX2JpbmFyeV9wcmVmaXggPSBiaW5hcnlfcHJlZml4ZXNbZnJvbV91bml0LnN1YnN0cmluZygwLCAyKV07XG4gICAgbGV0IGZyb21fdW5pdF9wcmVmaXggPSB1bml0X3ByZWZpeGVzW2Zyb21fdW5pdC5zdWJzdHJpbmcoMCwgMSldO1xuXG4gICAgLy8gSGFuZGxlIGRla2FvIHVuaXQgcHJlZml4IChvbmx5IHVuaXQgcHJlZml4IHdpdGggdHdvIGNoYXJhY3RlcnMpXG4gICAgaWYgKGZyb21fdW5pdC5zdWJzdHJpbmcoMCwgMikgPT09ICdkYScpIHtcbiAgICAgIGZyb21fdW5pdF9wcmVmaXggPSBbXCJkZWthb1wiLCAxZSswMSwgXCJkYVwiXTtcbiAgICB9XG4gICAgLy8gSGFuZGxlIGJpbmFyeSBwcmVmaXhlcyBmaXJzdCAoc28gdGhhdCAnWWknIGlzIHByb2Nlc3NlZCBiZWZvcmUgJ1knKVxuICAgIGlmIChmcm9tX2JpbmFyeV9wcmVmaXgpIHtcbiAgICAgIGZyb21fbXVsdGlwbGllciA9IGZyb21fYmluYXJ5X3ByZWZpeFsyXTtcbiAgICAgIGJhc2VfZnJvbV91bml0ID0gZnJvbV91bml0LnN1YnN0cmluZygyKTtcbiAgICB9IGVsc2UgaWYgKGZyb21fdW5pdF9wcmVmaXgpIHtcbiAgICAgIGZyb21fbXVsdGlwbGllciA9IGZyb21fdW5pdF9wcmVmaXhbMV07XG4gICAgICBiYXNlX2Zyb21fdW5pdCA9IGZyb21fdW5pdC5zdWJzdHJpbmcoZnJvbV91bml0X3ByZWZpeFsyXS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8vIExvb2t1cCBmcm9tIHVuaXRcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHVuaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICBhbHQgPSAodW5pdHNbal1bMl0gPT09IG51bGwpID8gW10gOiB1bml0c1tqXVsyXTtcbiAgICAgIGlmICh1bml0c1tqXVsxXSA9PT0gYmFzZV9mcm9tX3VuaXQgfHwgYWx0LmluZGV4T2YoYmFzZV9mcm9tX3VuaXQpID49IDApIHtcbiAgICAgICAgZnJvbSA9IHVuaXRzW2pdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIExvb2t1cCB0byBwcmVmaXhcbiAgaWYgKHRvID09PSBudWxsKSB7XG4gICAgbGV0IHRvX2JpbmFyeV9wcmVmaXggPSBiaW5hcnlfcHJlZml4ZXNbdG9fdW5pdC5zdWJzdHJpbmcoMCwgMildO1xuICAgIGxldCB0b191bml0X3ByZWZpeCA9IHVuaXRfcHJlZml4ZXNbdG9fdW5pdC5zdWJzdHJpbmcoMCwgMSldO1xuXG4gICAgLy8gSGFuZGxlIGRla2FvIHVuaXQgcHJlZml4IChvbmx5IHVuaXQgcHJlZml4IHdpdGggdHdvIGNoYXJhY3RlcnMpXG4gICAgaWYgKHRvX3VuaXQuc3Vic3RyaW5nKDAsIDIpID09PSAnZGEnKSB7XG4gICAgICB0b191bml0X3ByZWZpeCA9IFtcImRla2FvXCIsIDFlKzAxLCBcImRhXCJdO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBiaW5hcnkgcHJlZml4ZXMgZmlyc3QgKHNvIHRoYXQgJ1lpJyBpcyBwcm9jZXNzZWQgYmVmb3JlICdZJylcbiAgICBpZiAodG9fYmluYXJ5X3ByZWZpeCkge1xuICAgICAgdG9fbXVsdGlwbGllciA9IHRvX2JpbmFyeV9wcmVmaXhbMl07XG4gICAgICBiYXNlX3RvX3VuaXQgPSB0b191bml0LnN1YnN0cmluZygyKTtcbiAgICB9IGVsc2UgaWYgKHRvX3VuaXRfcHJlZml4KSB7XG4gICAgICB0b19tdWx0aXBsaWVyID0gdG9fdW5pdF9wcmVmaXhbMV07XG4gICAgICBiYXNlX3RvX3VuaXQgPSB0b191bml0LnN1YnN0cmluZyh0b191bml0X3ByZWZpeFsyXS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8vIExvb2t1cCB0byB1bml0XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCB1bml0cy5sZW5ndGg7IGsrKykge1xuICAgICAgYWx0ID0gKHVuaXRzW2tdWzJdID09PSBudWxsKSA/IFtdIDogdW5pdHNba11bMl07XG4gICAgICBpZiAodW5pdHNba11bMV0gPT09IGJhc2VfdG9fdW5pdCB8fCBhbHQuaW5kZXhPZihiYXNlX3RvX3VuaXQpID49IDApIHtcbiAgICAgICAgdG8gPSB1bml0c1trXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgYSB1bml0IGRvZXMgbm90IGV4aXN0XG4gIGlmIChmcm9tID09PSBudWxsIHx8IHRvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG5cbiAgLy9SZXR1cm4gZXJyb3IgaWYgdW5pdHMgcmVwcmVzZW50IGRpZmZlcmVudCBxdWFudGl0aWVzXG4gIGlmIChmcm9tWzNdICE9PSB0b1szXSkge1xuICAgIGlmKGZyb21fdW5pdCA9PSAnRicgJiYgdG9fdW5pdCA9PSAnQycpe1xuICAgICAgcmV0dXJuIChudW1iZXItMzIpLzEuOFxuICAgIH1cbiAgICBpZihmcm9tX3VuaXQgPT0gJ0MnICYmIHRvX3VuaXQgPT0gJ0YnKXtcbiAgICAgIHJldHVybiBudW1iZXIgKiAxLjggKyAzMlxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cblxuICAvLyBSZXR1cm4gY29udmVydGVkIG51bWJlclxuICByZXR1cm4gbnVtYmVyICogZnJvbVs2XSAqIGZyb21fbXVsdGlwbGllciAvICh0b1s2XSAqIHRvX211bHRpcGxpZXIpO1xufTtcblxuZXhwb3J0cy5ERUMyQklOID0gZnVuY3Rpb24obnVtYmVyLCBwbGFjZXMpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGRlY2ltYWwsIGlzIGxvd2VyIHRoYW4gLTUxMiwgb3IgaXMgZ3JlYXRlciB0aGFuIDUxMVxuICBpZiAoIS9eLT9bMC05XXsxLDN9JC8udGVzdChudW1iZXIpIHx8IG51bWJlciA8IC01MTIgfHwgbnVtYmVyID4gNTExKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBiaW5hcnkgbnVtYmVyIGlmIG51bWJlciBpcyBuZWdhdGl2ZVxuICBpZiAobnVtYmVyIDwgMCkge1xuICAgIHJldHVybiAnMScgKyB0ZXh0LlJFUFQoJzAnLCA5IC0gKDUxMiArIG51bWJlcikudG9TdHJpbmcoMikubGVuZ3RoKSArICg1MTIgKyBudW1iZXIpLnRvU3RyaW5nKDIpO1xuICB9XG5cbiAgLy8gQ29udmVydCBkZWNpbWFsIG51bWJlciB0byBiaW5hcnlcbiAgbGV0IHJlc3VsdCA9IHBhcnNlSW50KG51bWJlciwgMTApLnRvU3RyaW5nKDIpO1xuXG4gIC8vIFJldHVybiBiaW5hcnkgbnVtYmVyIHVzaW5nIHRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIG5lY2Vzc2FyeSBpZiBwbGFjZXMgaXMgdW5kZWZpbmVkXG4gIGlmICh0eXBlb2YgcGxhY2VzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBub25udW1lcmljXG4gICAgaWYgKGlzTmFOKHBsYWNlcykpIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5lZ2F0aXZlXG4gICAgaWYgKHBsYWNlcyA8IDApIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gICAgfVxuXG4gICAgLy8gVHJ1bmNhdGUgcGxhY2VzIGluIGNhc2UgaXQgaXMgbm90IGFuIGludGVnZXJcbiAgICBwbGFjZXMgPSBNYXRoLmZsb29yKHBsYWNlcyk7XG5cbiAgICAvLyBQYWQgcmV0dXJuIHZhbHVlIHdpdGggbGVhZGluZyAwcyAoemVyb3MpIGlmIG5lY2Vzc2FyeSAodXNpbmcgVW5kZXJzY29yZS5zdHJpbmcpXG4gICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyB0ZXh0LlJFUFQoJzAnLCBwbGFjZXMgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdCA6IGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxufTtcblxuZXhwb3J0cy5ERUMySEVYID0gZnVuY3Rpb24obnVtYmVyLCBwbGFjZXMpIHtcbiAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcbiAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGRlY2ltYWwsIGlzIGxvd2VyIHRoYW4gLTU0OTc1NTgxMzg4OCwgb3IgaXMgZ3JlYXRlciB0aGFuIDU0OTc1NTgxMzg4N1xuICBpZiAoIS9eLT9bMC05XXsxLDEyfSQvLnRlc3QobnVtYmVyKSB8fCBudW1iZXIgPCAtNTQ5NzU1ODEzODg4IHx8IG51bWJlciA+IDU0OTc1NTgxMzg4Nykge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgaGV4YWRlY2ltYWwgbnVtYmVyIGlmIG51bWJlciBpcyBuZWdhdGl2ZVxuICBpZiAobnVtYmVyIDwgMCkge1xuICAgIHJldHVybiAoMTA5OTUxMTYyNzc3NiArIG51bWJlcikudG9TdHJpbmcoMTYpO1xuICB9XG5cbiAgLy8gQ29udmVydCBkZWNpbWFsIG51bWJlciB0byBoZXhhZGVjaW1hbFxuICBsZXQgcmVzdWx0ID0gcGFyc2VJbnQobnVtYmVyLCAxMCkudG9TdHJpbmcoMTYpO1xuXG4gIC8vIFJldHVybiBoZXhhZGVjaW1hbCBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgbmVjZXNzYXJ5IGlmIHBsYWNlcyBpcyB1bmRlZmluZWRcbiAgaWYgKHR5cGVvZiBwbGFjZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5vbm51bWVyaWNcbiAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbmVnYXRpdmVcbiAgICBpZiAocGxhY2VzIDwgMCkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgICB9XG5cbiAgICAvLyBUcnVuY2F0ZSBwbGFjZXMgaW4gY2FzZSBpdCBpcyBub3QgYW4gaW50ZWdlclxuICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcblxuICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZyBVbmRlcnNjb3JlLnN0cmluZylcbiAgICByZXR1cm4gKHBsYWNlcyA+PSByZXN1bHQubGVuZ3RoKSA/IHRleHQuUkVQVCgnMCcsIHBsYWNlcyAtIHJlc3VsdC5sZW5ndGgpICsgcmVzdWx0IDogZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG59O1xuXG5leHBvcnRzLkRFQzJPQ1QgPSBmdW5jdGlvbihudW1iZXIsIHBsYWNlcykge1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3QgZGVjaW1hbCwgaXMgbG93ZXIgdGhhbiAtNTQ5NzU1ODEzODg4LCBvciBpcyBncmVhdGVyIHRoYW4gNTQ5NzU1ODEzODg3XG4gIGlmICghL14tP1swLTldezEsOX0kLy50ZXN0KG51bWJlcikgfHwgbnVtYmVyIDwgLTUzNjg3MDkxMiB8fCBudW1iZXIgPiA1MzY4NzA5MTEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gSWdub3JlIHBsYWNlcyBhbmQgcmV0dXJuIGEgMTAtY2hhcmFjdGVyIG9jdGFsIG51bWJlciBpZiBudW1iZXIgaXMgbmVnYXRpdmVcbiAgaWYgKG51bWJlciA8IDApIHtcbiAgICByZXR1cm4gKDEwNzM3NDE4MjQgKyBudW1iZXIpLnRvU3RyaW5nKDgpO1xuICB9XG5cbiAgLy8gQ29udmVydCBkZWNpbWFsIG51bWJlciB0byBvY3RhbFxuICBsZXQgcmVzdWx0ID0gcGFyc2VJbnQobnVtYmVyLCAxMCkudG9TdHJpbmcoOCk7XG5cbiAgLy8gUmV0dXJuIG9jdGFsIG51bWJlciB1c2luZyB0aGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBuZWNlc3NhcnkgaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxuICBpZiAodHlwZW9mIHBsYWNlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xuICAgIGlmIChpc05hTihwbGFjZXMpKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxuICAgIGlmIChwbGFjZXMgPCAwKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICAgIH1cblxuICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXG4gICAgcGxhY2VzID0gTWF0aC5mbG9vcihwbGFjZXMpO1xuXG4gICAgLy8gUGFkIHJldHVybiB2YWx1ZSB3aXRoIGxlYWRpbmcgMHMgKHplcm9zKSBpZiBuZWNlc3NhcnkgKHVzaW5nIFVuZGVyc2NvcmUuc3RyaW5nKVxuICAgIHJldHVybiAocGxhY2VzID49IHJlc3VsdC5sZW5ndGgpID8gdGV4dC5SRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbn07XG5cbmV4cG9ydHMuREVMVEEgPSBmdW5jdGlvbihudW1iZXIxLCBudW1iZXIyKSB7XG4gIC8vIFNldCBudW1iZXIyIHRvIHplcm8gaWYgdW5kZWZpbmVkXG4gIG51bWJlcjIgPSAobnVtYmVyMiA9PT0gdW5kZWZpbmVkKSA/IDAgOiBudW1iZXIyO1xuICBudW1iZXIxID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyMSk7XG4gIG51bWJlcjIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIyKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyMSwgbnVtYmVyMikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZGVsdGFcbiAgcmV0dXJuIChudW1iZXIxID09PSBudW1iZXIyKSA/IDEgOiAwO1xufTtcblxuLy8gVE9ETzogd2h5IGlzIHVwcGVyX2JvdW5kIG5vdCB1c2VkID8gVGhlIGV4Y2VsIGRvY3VtZW50YXRpb24gaGFzIG5vIGV4YW1wbGVzIHdpdGggdXBwZXJfYm91bmRcbmV4cG9ydHMuRVJGID0gZnVuY3Rpb24obG93ZXJfYm91bmQsIHVwcGVyX2JvdW5kKSB7XG4gIC8vIFNldCBudW1iZXIyIHRvIHplcm8gaWYgdW5kZWZpbmVkXG4gIHVwcGVyX2JvdW5kID0gKHVwcGVyX2JvdW5kID09PSB1bmRlZmluZWQpID8gMCA6IHVwcGVyX2JvdW5kO1xuXG4gIGxvd2VyX2JvdW5kID0gdXRpbHMucGFyc2VOdW1iZXIobG93ZXJfYm91bmQpO1xuICB1cHBlcl9ib3VuZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHVwcGVyX2JvdW5kKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IobG93ZXJfYm91bmQsIHVwcGVyX2JvdW5kKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIHJldHVybiBqU3RhdC5lcmYobG93ZXJfYm91bmQpO1xufTtcblxuLy8gVE9ET1xuZXhwb3J0cy5FUkYuUFJFQ0lTRSA9IGZ1bmN0aW9uKHgpIHtcbiAgaWYgKGlzTmFOKHgpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCBGb3JtdWxhcyA9IHdpbmRvdy5qc1NwcmVhZHNoZWV0LkFsbEZvcm11bGFzO1xuICByZXR1cm4gRm9ybXVsYXMuRVJGKHgpXG59O1xuXG5leHBvcnRzLkVSRkMgPSBmdW5jdGlvbih4KSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiB4IGlzIG5vdCBhIG51bWJlclxuICBpZiAoaXNOYU4oeCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICByZXR1cm4galN0YXQuZXJmYyh4KTtcbn07XG5cbi8vIFRPRE9cbmV4cG9ydHMuRVJGQy5QUkVDSVNFID0gZnVuY3Rpb24oeCkge1xuICBpZiAoaXNOYU4oeCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IEZvcm11bGFzID0gd2luZG93LmpzU3ByZWFkc2hlZXQuQWxsRm9ybXVsYXM7XG4gIHJldHVybiBGb3JtdWxhcy5FUkZDKHgpXG59O1xuXG5leHBvcnRzLkdFU1RFUCA9IGZ1bmN0aW9uKG51bWJlciwgc3RlcCkge1xuICBzdGVwID0gc3RlcCB8fCAwO1xuICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihzdGVwLCBudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIC8vIFJldHVybiBkZWx0YVxuICByZXR1cm4gKG51bWJlciA+PSBzdGVwKSA/IDEgOiAwO1xufTtcblxuZXhwb3J0cy5IRVgyQklOID0gZnVuY3Rpb24obnVtYmVyLCBwbGFjZXMpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3QgaGV4YWRlY2ltYWwgb3IgY29udGFpbnMgbW9yZSB0aGFuIHRlbiBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXG4gIGlmICghL15bMC05QS1GYS1mXXsxLDEwfSQvLnRlc3QobnVtYmVyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBDaGVjayBpZiBudW1iZXIgaXMgbmVnYXRpdmVcbiAgbGV0IG5lZ2F0aXZlID0gKG51bWJlci5sZW5ndGggPT09IDEwICYmIG51bWJlci5zdWJzdHJpbmcoMCwgMSkudG9Mb3dlckNhc2UoKSA9PT0gJ2YnKSA/IHRydWUgOiBmYWxzZTtcblxuICAvLyBDb252ZXJ0IGhleGFkZWNpbWFsIG51bWJlciB0byBkZWNpbWFsXG4gIGxldCBkZWNpbWFsID0gKG5lZ2F0aXZlKSA/IHBhcnNlSW50KG51bWJlciwgMTYpIC0gMTA5OTUxMTYyNzc3NiA6IHBhcnNlSW50KG51bWJlciwgMTYpO1xuXG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbG93ZXIgdGhhbiAtNTEyIG9yIGdyZWF0ZXIgdGhhbiA1MTFcbiAgaWYgKGRlY2ltYWwgPCAtNTEyIHx8IGRlY2ltYWwgPiA1MTEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gSWdub3JlIHBsYWNlcyBhbmQgcmV0dXJuIGEgMTAtY2hhcmFjdGVyIGJpbmFyeSBudW1iZXIgaWYgbnVtYmVyIGlzIG5lZ2F0aXZlXG4gIGlmIChuZWdhdGl2ZSkge1xuICAgIHJldHVybiAnMScgKyB0ZXh0LlJFUFQoJzAnLCA5IC0gKDUxMiArIGRlY2ltYWwpLnRvU3RyaW5nKDIpLmxlbmd0aCkgKyAoNTEyICsgZGVjaW1hbCkudG9TdHJpbmcoMik7XG4gIH1cblxuICAvLyBDb252ZXJ0IGRlY2ltYWwgbnVtYmVyIHRvIGJpbmFyeVxuICBsZXQgcmVzdWx0ID0gZGVjaW1hbC50b1N0cmluZygyKTtcblxuICAvLyBSZXR1cm4gYmluYXJ5IG51bWJlciB1c2luZyB0aGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBuZWNlc3NhcnkgaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxuICBpZiAocGxhY2VzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xuICAgIGlmIChpc05hTihwbGFjZXMpKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxuICAgIGlmIChwbGFjZXMgPCAwKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICAgIH1cblxuICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXG4gICAgcGxhY2VzID0gTWF0aC5mbG9vcihwbGFjZXMpO1xuXG4gICAgLy8gUGFkIHJldHVybiB2YWx1ZSB3aXRoIGxlYWRpbmcgMHMgKHplcm9zKSBpZiBuZWNlc3NhcnkgKHVzaW5nIFVuZGVyc2NvcmUuc3RyaW5nKVxuICAgIHJldHVybiAocGxhY2VzID49IHJlc3VsdC5sZW5ndGgpID8gdGV4dC5SRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbn07XG5cbmV4cG9ydHMuSEVYMkRFQyA9IGZ1bmN0aW9uKG51bWJlcikge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBoZXhhZGVjaW1hbCBvciBjb250YWlucyBtb3JlIHRoYW4gdGVuIGNoYXJhY3RlcnMgKDEwIGRpZ2l0cylcbiAgaWYgKCEvXlswLTlBLUZhLWZdezEsMTB9JC8udGVzdChudW1iZXIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgaGV4YWRlY2ltYWwgbnVtYmVyIHRvIGRlY2ltYWxcbiAgbGV0IGRlY2ltYWwgPSBwYXJzZUludChudW1iZXIsIDE2KTtcblxuICAvLyBSZXR1cm4gZGVjaW1hbCBudW1iZXJcbiAgcmV0dXJuIChkZWNpbWFsID49IDU0OTc1NTgxMzg4OCkgPyBkZWNpbWFsIC0gMTA5OTUxMTYyNzc3NiA6IGRlY2ltYWw7XG59O1xuXG5leHBvcnRzLkhFWDJPQ1QgPSBmdW5jdGlvbihudW1iZXIsIHBsYWNlcykge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBoZXhhZGVjaW1hbCBvciBjb250YWlucyBtb3JlIHRoYW4gdGVuIGNoYXJhY3RlcnMgKDEwIGRpZ2l0cylcbiAgaWYgKCEvXlswLTlBLUZhLWZdezEsMTB9JC8udGVzdChudW1iZXIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgaGV4YWRlY2ltYWwgbnVtYmVyIHRvIGRlY2ltYWxcbiAgbGV0IGRlY2ltYWwgPSBwYXJzZUludChudW1iZXIsIDE2KTtcblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIHBvc2l0aXZlIGFuZCBncmVhdGVyIHRoYW4gMHgxZmZmZmZmZiAoNTM2ODcwOTExKVxuICBpZiAoZGVjaW1hbCA+IDUzNjg3MDkxMSAmJiBkZWNpbWFsIDwgMTA5ODk3NDc1Njg2NCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgb2N0YWwgbnVtYmVyIGlmIG51bWJlciBpcyBuZWdhdGl2ZVxuICBpZiAoZGVjaW1hbCA+PSAxMDk4OTc0NzU2ODY0KSB7XG4gICAgcmV0dXJuIChkZWNpbWFsIC0gMTA5ODQzNzg4NTk1MikudG9TdHJpbmcoOCk7XG4gIH1cblxuICAvLyBDb252ZXJ0IGRlY2ltYWwgbnVtYmVyIHRvIG9jdGFsXG4gIGxldCByZXN1bHQgPSBkZWNpbWFsLnRvU3RyaW5nKDgpO1xuXG4gIC8vIFJldHVybiBvY3RhbCBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgbmVjZXNzYXJ5IGlmIHBsYWNlcyBpcyB1bmRlZmluZWRcbiAgaWYgKHBsYWNlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5vbm51bWVyaWNcbiAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbmVnYXRpdmVcbiAgICBpZiAocGxhY2VzIDwgMCkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgICB9XG5cbiAgICAvLyBUcnVuY2F0ZSBwbGFjZXMgaW4gY2FzZSBpdCBpcyBub3QgYW4gaW50ZWdlclxuICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcblxuICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZyBVbmRlcnNjb3JlLnN0cmluZylcbiAgICByZXR1cm4gKHBsYWNlcyA+PSByZXN1bHQubGVuZ3RoKSA/IHRleHQuUkVQVCgnMCcsIHBsYWNlcyAtIHJlc3VsdC5sZW5ndGgpICsgcmVzdWx0IDogZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG59O1xuZXhwb3J0cy5ST1dTID0gZnVuY3Rpb24gKG1hdHJpeCkge1xuICBpZiAodHlwZW9mIG1hdHJpeCA9PSAnc3RyaW5nJyl7XG4gICAgbWF0cml4ID0gdXRpbHMuc3RyVG9NYXRyaXgobWF0cml4KVxuICB9XG5cbiAgaWYgKCEobWF0cml4IGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBqU3RhdC5yb3dzKG1hdHJpeCk7XG59O1xuZnVuY3Rpb24gdHJhbnNfbnVtKGludW1iZXIpe1xuICBpbnVtYmVyID0gaW51bWJlci50b1N0cmluZygpXG4gIGludW1iZXIgPSBpbnVtYmVyLnJlcGxhY2UoJ0knLCAnaScpLnJlcGxhY2UoJ0onLCAnaicpXG4gIHJldHVybiBpbnVtYmVyXG59XG5leHBvcnRzLklNQUJTID0gZnVuY3Rpb24gKGludW1iZXIpIHtcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgZXhwb3J0cy5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIGNvZWZmaWNpZW50IGlzIG5vdCBhIG51bWJlclxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBhYnNvbHV0ZSB2YWx1ZSBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMikpO1xufTtcblxuZXhwb3J0cy5JTUFHSU5BUlkgPSBmdW5jdGlvbiAoaW51bWJlcikge1xuICBpbnVtYmVyID0gdHJhbnNfbnVtKGludW1iZXIpXG4gIGlmIChpbnVtYmVyID09PSB1bmRlZmluZWQgfHwgaW51bWJlciA9PT0gdHJ1ZSB8fCBpbnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiAwIGlmIGludW1iZXIgaXMgZXF1YWwgdG8gMFxuICBpZiAoaW51bWJlciA9PT0gMCB8fCBpbnVtYmVyID09PSAnMCcpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2VzXG4gIGlmIChbJ2knLCAnaiddLmluZGV4T2YoaW51bWJlcikgPj0gMCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIGltYWdpbmFyeSBjb2VmZmljaWVudFxuICBpbnVtYmVyID0gaW51bWJlci5yZXBsYWNlKCcraScsICcrMWknKS5yZXBsYWNlKCctaScsICctMWknKS5yZXBsYWNlKCcraicsICcrMWonKS5yZXBsYWNlKCctaicsICctMWonKTtcblxuICAvLyBMb29rdXAgc2lnblxuICBsZXQgcGx1cyA9IGludW1iZXIuaW5kZXhPZignKycpO1xuICBsZXQgbWludXMgPSBpbnVtYmVyLmluZGV4T2YoJy0nKTtcbiAgaWYgKHBsdXMgPT09IDApIHtcbiAgICBwbHVzID0gaW51bWJlci5pbmRleE9mKCcrJywgMSk7XG4gIH1cblxuICBpZiAobWludXMgPT09IDApIHtcbiAgICBtaW51cyA9IGludW1iZXIuaW5kZXhPZignLScsIDEpO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCBsYXN0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxLCBpbnVtYmVyLmxlbmd0aCk7XG4gIGxldCB1bml0ID0gKGxhc3QgPT09ICdpJyB8fCBsYXN0ID09PSAnaicpO1xuXG4gIGlmIChwbHVzID49IDAgfHwgbWludXMgPj0gMCkge1xuICAgIC8vIFJldHVybiBlcnJvciBpZiBpbWFnaW5hcnkgdW5pdCBpcyBuZWl0aGVyIGkgbm9yIGpcbiAgICBpZiAoIXVuaXQpIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGltYWdpbmFyeSBjb2VmZmljaWVudCBvZiBjb21wbGV4IG51bWJlclxuICAgIGlmIChwbHVzID49IDApIHtcbiAgICAgIHJldHVybiAoaXNOYU4oaW51bWJlci5zdWJzdHJpbmcoMCwgcGx1cykpIHx8IGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKHBsdXMgKyAxLCBpbnVtYmVyLmxlbmd0aCAtIDEpKSkgP1xuICAgICAgICBlcnJvck9iai5FUlJPUl9OVU0gOlxuICAgICAgICBOdW1iZXIoaW51bWJlci5zdWJzdHJpbmcocGx1cyArIDEsIGludW1iZXIubGVuZ3RoIC0gMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKDAsIG1pbnVzKSkgfHwgaXNOYU4oaW51bWJlci5zdWJzdHJpbmcobWludXMgKyAxLCBpbnVtYmVyLmxlbmd0aCAtIDEpKSkgP1xuICAgICAgICBlcnJvck9iai5FUlJPUl9OVU0gOlxuICAgICAgICAtTnVtYmVyKGludW1iZXIuc3Vic3RyaW5nKG1pbnVzICsgMSwgaW51bWJlci5sZW5ndGggLSAxKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh1bml0KSB7XG4gICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKDAsIGludW1iZXIubGVuZ3RoIC0gMSkpKSA/IGVycm9yT2JqLkVSUk9SX05VTSA6IGludW1iZXIuc3Vic3RyaW5nKDAsIGludW1iZXIubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoaXNOYU4oaW51bWJlcikpID8gZXJyb3JPYmouRVJST1JfTlVNIDogMDtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuSU1BUkdVTUVOVCA9IGZ1bmN0aW9uIChpbnVtYmVyKSB7XG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgZXhwb3J0cy5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGxldCB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XG4gIGxldCB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBjb2VmZmljaWVudCBpcyBub3QgYSBudW1iZXJcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgaW51bWJlciBpcyBlcXVhbCB0byB6ZXJvXG4gIGlmICh4ID09PSAwICYmIHkgPT09IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfRElWMDtcbiAgfVxuXG4gIC8vIFJldHVybiBQSS8yIGlmIHggaXMgZXF1YWwgdG8gemVybyBhbmQgeSBpcyBwb3NpdGl2ZVxuICBpZiAoeCA9PT0gMCAmJiB5ID4gMCkge1xuICAgIHJldHVybiBNYXRoLlBJIC8gMjtcbiAgfVxuXG4gIC8vIFJldHVybiAtUEkvMiBpZiB4IGlzIGVxdWFsIHRvIHplcm8gYW5kIHkgaXMgbmVnYXRpdmVcbiAgaWYgKHggPT09IDAgJiYgeSA8IDApIHtcbiAgICByZXR1cm4gLU1hdGguUEkgLyAyO1xuICB9XG5cbiAgLy8gUmV0dXJuIHplcm8gaWYgeCBpcyBuZWdhdGl2ZSBhbmQgeSBpcyBlcXVhbCB0byB6ZXJvXG4gIGlmICh5ID09PSAwICYmIHggPiAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBSZXR1cm4gemVybyBpZiB4IGlzIG5lZ2F0aXZlIGFuZCB5IGlzIGVxdWFsIHRvIHplcm9cbiAgaWYgKHkgPT09IDAgJiYgeCA8IDApIHtcbiAgICByZXR1cm4gLU1hdGguUEk7XG4gIH1cblxuICAvLyBSZXR1cm4gYXJndW1lbnQgb2YgY29tcGxleCBudW1iZXJcbiAgaWYgKHggPiAwKSB7XG4gICAgcmV0dXJuIE1hdGguYXRhbih5IC8geCk7XG4gIH0gZWxzZSBpZiAoeCA8IDAgJiYgeSA+PSAwKSB7XG4gICAgcmV0dXJuIE1hdGguYXRhbih5IC8geCkgKyBNYXRoLlBJO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLmF0YW4oeSAvIHgpIC0gTWF0aC5QSTtcbiAgfVxufTtcblxuZXhwb3J0cy5JTUNPTkpVR0FURSA9IGZ1bmN0aW9uIChpbnVtYmVyKSB7XG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgZXhwb3J0cy5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGxldCB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XG4gIGxldCB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XG5cbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcbiAgbGV0IHVuaXQgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEpO1xuICB1bml0ID0gKHVuaXQgPT09ICdpJyB8fCB1bml0ID09PSAnaicpID8gdW5pdCA6ICdpJztcblxuICAvLyBSZXR1cm4gY29uanVnYXRlIG9mIGNvbXBsZXggbnVtYmVyXG4gIHJldHVybiAoeSAhPT0gMCkgPyBleHBvcnRzLkNPTVBMRVgoeCwgLXksIHVuaXQpIDogaW51bWJlcjtcbn07XG5cbmV4cG9ydHMuSU1DT1MgPSBmdW5jdGlvbiAoaW51bWJlcikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBleHBvcnRzLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBsZXQgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xuICBsZXQgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcbiAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XG5cbiAgLy8gUmV0dXJuIGNvc2luZSBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGguY29zKHgpICogKE1hdGguZXhwKHkpICsgTWF0aC5leHAoLXkpKSAvIDIsIC1NYXRoLnNpbih4KSAqIChNYXRoLmV4cCh5KSAtIE1hdGguZXhwKC15KSkgLyAyLCB1bml0KTtcbn07XG5cbmV4cG9ydHMuSU1DT1NIID0gZnVuY3Rpb24gKGludW1iZXIpIHtcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgZXhwb3J0cy5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxuICBsZXQgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XG4gIHVuaXQgPSAodW5pdCA9PT0gJ2knIHx8IHVuaXQgPT09ICdqJykgPyB1bml0IDogJ2knO1xuXG4gIC8vIFJldHVybiBoeXBlcmJvbGljIGNvc2luZSBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGguY29zKHkpICogKE1hdGguZXhwKHgpICsgTWF0aC5leHAoLXgpKSAvIDIsIE1hdGguc2luKHkpICogKE1hdGguZXhwKHgpIC0gTWF0aC5leHAoLXgpKSAvIDIsIHVuaXQpO1xufTtcblxuZXhwb3J0cy5JTUNPVCA9IGZ1bmN0aW9uIChpbnVtYmVyKSB7XG4gIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanMgW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxuICBpbnVtYmVyID0gdHJhbnNfbnVtKGludW1iZXIpXG4gIGxldCB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XG4gIGxldCB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XG5cbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gY290YW5nZW50IG9mIGNvbXBsZXggbnVtYmVyXG4gIHJldHVybiBleHBvcnRzLklNRElWKGV4cG9ydHMuSU1DT1MoaW51bWJlciksIGV4cG9ydHMuSU1TSU4oaW51bWJlcikpO1xufTtcblxuZXhwb3J0cy5JTURJViA9IGZ1bmN0aW9uKGludW1iZXIxLCBpbnVtYmVyMikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgbGV0IGEgPSBleHBvcnRzLklNUkVBTChpbnVtYmVyMSk7XG4gIGxldCBiID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcjEpO1xuICBsZXQgYyA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIyKTtcbiAgbGV0IGQgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyMik7XG5cbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYSwgYiwgYywgZCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcbiAgbGV0IHVuaXQxID0gaW51bWJlcjEuc3Vic3RyaW5nKGludW1iZXIxLmxlbmd0aCAtIDEpO1xuICBsZXQgdW5pdDIgPSBpbnVtYmVyMi5zdWJzdHJpbmcoaW51bWJlcjIubGVuZ3RoIC0gMSk7XG4gIGxldCB1bml0ID0gJ2knO1xuICBpZiAodW5pdDEgPT09ICdqJykge1xuICAgIHVuaXQgPSAnaic7XG4gIH0gZWxzZSBpZiAodW5pdDIgPT09ICdqJykge1xuICAgIHVuaXQgPSAnaic7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgaW51bWJlcjIgaXMgbnVsbFxuICBpZiAoYyA9PT0gMCAmJiBkID09PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBleHBvbmVudGlhbCBvZiBjb21wbGV4IG51bWJlclxuICBsZXQgZGVuID0gYyAqIGMgKyBkICogZDtcbiAgcmV0dXJuIGV4cG9ydHMuQ09NUExFWCgoYSAqIGMgKyBiICogZCkgLyBkZW4sIChiICogYyAtIGEgKiBkKSAvIGRlbiwgdW5pdCk7XG59O1xuXG5leHBvcnRzLklNRVhQID0gZnVuY3Rpb24oaW51bWJlcikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBsZXQgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xuICBsZXQgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcbiAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XG5cbiAgLy8gUmV0dXJuIGV4cG9uZW50aWFsIG9mIGNvbXBsZXggbnVtYmVyXG4gIGxldCBlID0gTWF0aC5leHAoeCk7XG4gIHJldHVybiBleHBvcnRzLkNPTVBMRVgoZSAqIE1hdGguY29zKHkpLCBlICogTWF0aC5zaW4oeSksIHVuaXQpO1xufTtcblxuZXhwb3J0cy5JTUxOID0gZnVuY3Rpb24oaW51bWJlcikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxuICBsZXQgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XG4gIHVuaXQgPSAodW5pdCA9PT0gJ2knIHx8IHVuaXQgPT09ICdqJykgPyB1bml0IDogJ2knO1xuXG4gIC8vIFJldHVybiBleHBvbmVudGlhbCBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGgubG9nKE1hdGguc3FydCh4ICogeCArIHkgKiB5KSksIE1hdGguYXRhbih5IC8geCksIHVuaXQpO1xufTtcblxuZXhwb3J0cy5JTUxPRzEwID0gZnVuY3Rpb24oaW51bWJlcikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBsZXQgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xuICBsZXQgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcbiAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XG5cbiAgLy8gUmV0dXJuIGV4cG9uZW50aWFsIG9mIGNvbXBsZXggbnVtYmVyXG4gIHJldHVybiBleHBvcnRzLkNPTVBMRVgoTWF0aC5sb2coTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpKSAvIE1hdGgubG9nKDEwKSwgTWF0aC5hdGFuKHkgLyB4KSAvIE1hdGgubG9nKDEwKSwgdW5pdCk7XG59O1xuXG5leHBvcnRzLklNTE9HMiA9IGZ1bmN0aW9uKGludW1iZXIpIHtcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxuICBsZXQgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XG4gIHVuaXQgPSAodW5pdCA9PT0gJ2knIHx8IHVuaXQgPT09ICdqJykgPyB1bml0IDogJ2knO1xuXG4gIC8vIFJldHVybiBleHBvbmVudGlhbCBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGgubG9nKE1hdGguc3FydCh4ICogeCArIHkgKiB5KSkgLyBNYXRoLmxvZygyKSwgTWF0aC5hdGFuKHkgLyB4KSAvIE1hdGgubG9nKDIpLCB1bml0KTtcbn07XG5cbmV4cG9ydHMuSU1QT1dFUiA9IGZ1bmN0aW9uKGludW1iZXIsIG51bWJlcikge1xuICBpbnVtYmVyID0gdHJhbnNfbnVtKGludW1iZXIpXG4gIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XG4gIGxldCB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XG4gIGxldCB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgeCwgeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcbiAgbGV0IHVuaXQgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEpO1xuICB1bml0ID0gKHVuaXQgPT09ICdpJyB8fCB1bml0ID09PSAnaicpID8gdW5pdCA6ICdpJztcblxuICAvLyBDYWxjdWxhdGUgcG93ZXIgb2YgbW9kdWx1c1xuICBsZXQgcCA9IE1hdGgucG93KGV4cG9ydHMuSU1BQlMoaW51bWJlciksIG51bWJlcik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFyZ3VtZW50XG4gIGxldCB0ID0gZXhwb3J0cy5JTUFSR1VNRU5UKGludW1iZXIpO1xuXG4gIC8vIFJldHVybiBleHBvbmVudGlhbCBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKHAgKiBNYXRoLmNvcyhudW1iZXIgKiB0KSwgcCAqIE1hdGguc2luKG51bWJlciAqIHQpLCB1bml0KTtcbn07XG5cbmV4cG9ydHMuSU1QUk9EVUNUID0gZnVuY3Rpb24oKSB7XG4gIC8vIEluaXRpYWxpemUgcmVzdWx0XG4gIGxldCByZXN1bHQgPSBhcmd1bWVudHNbMF07XG5cbiAgLy8gTG9vcCBvbiBhbGwgbnVtYmVyc1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIC8vIExvb2t1cCBjb2VmZmljaWVudHMgb2YgdHdvIGNvbXBsZXggbnVtYmVyc1xuICAgIGxldCBhID0gZXhwb3J0cy5JTVJFQUwocmVzdWx0KTtcbiAgICBsZXQgYiA9IGV4cG9ydHMuSU1BR0lOQVJZKHJlc3VsdCk7XG4gICAgbGV0IGMgPSBleHBvcnRzLklNUkVBTChhcmd1bWVudHNbaV0pO1xuICAgIGxldCBkID0gZXhwb3J0cy5JTUFHSU5BUlkoYXJndW1lbnRzW2ldKTtcblxuICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGEsIGIsIGMsIGQpKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gICAgfVxuXG4gICAgLy8gQ29tcGx1dGUgcHJvZHVjdCBvZiB0d28gY29tcGxleCBudW1iZXJzXG4gICAgcmVzdWx0ID0gZXhwb3J0cy5DT01QTEVYKGEgKiBjIC0gYiAqIGQsIGEgKiBkICsgYiAqIGMpO1xuICB9XG5cbiAgLy8gUmV0dXJuIHByb2R1Y3Qgb2YgY29tcGxleCBudW1iZXJzXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnRzLklNUkVBTCA9IGZ1bmN0aW9uKGludW1iZXIpIHtcbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBpZiAoaW51bWJlciA9PT0gdW5kZWZpbmVkIHx8IGludW1iZXIgPT09IHRydWUgfHwgaW51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gMCBpZiBpbnVtYmVyIGlzIGVxdWFsIHRvIDBcbiAgaWYgKGludW1iZXIgPT09IDAgfHwgaW51bWJlciA9PT0gJzAnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlc1xuICBpZiAoWydpJywgJytpJywgJzFpJywgJysxaScsICctaScsICctMWknLCAnaicsICcraicsICcxaicsICcrMWonLCAnLWonLCAnLTFqJ10uaW5kZXhPZihpbnVtYmVyKSA+PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBMb29rdXAgc2lnblxuICBsZXQgcGx1cyA9IGludW1iZXIuaW5kZXhPZignKycpO1xuICBsZXQgbWludXMgPSBpbnVtYmVyLmluZGV4T2YoJy0nKTtcbiAgaWYgKHBsdXMgPT09IDApIHtcbiAgICBwbHVzID0gaW51bWJlci5pbmRleE9mKCcrJywgMSk7XG4gIH1cbiAgaWYgKG1pbnVzID09PSAwKSB7XG4gICAgbWludXMgPSBpbnVtYmVyLmluZGV4T2YoJy0nLCAxKTtcbiAgfVxuXG4gIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxuICBsZXQgbGFzdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSwgaW51bWJlci5sZW5ndGgpO1xuICBsZXQgdW5pdCA9IChsYXN0ID09PSAnaScgfHwgbGFzdCA9PT0gJ2onKTtcblxuICBpZiAocGx1cyA+PSAwIHx8IG1pbnVzID49IDApIHtcbiAgICAvLyBSZXR1cm4gZXJyb3IgaWYgaW1hZ2luYXJ5IHVuaXQgaXMgbmVpdGhlciBpIG5vciBqXG4gICAgaWYgKCF1bml0KSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICAgIH1cblxuICAgIC8vIFJldHVybiByZWFsIGNvZWZmaWNpZW50IG9mIGNvbXBsZXggbnVtYmVyXG4gICAgaWYgKHBsdXMgPj0gMCkge1xuICAgICAgcmV0dXJuIChpc05hTihpbnVtYmVyLnN1YnN0cmluZygwLCBwbHVzKSkgfHwgaXNOYU4oaW51bWJlci5zdWJzdHJpbmcocGx1cyArIDEsIGludW1iZXIubGVuZ3RoIC0gMSkpKSA/XG4gICAgICAgIGVycm9yT2JqLkVSUk9SX05VTSA6XG4gICAgICAgIE51bWJlcihpbnVtYmVyLnN1YnN0cmluZygwLCBwbHVzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoaXNOYU4oaW51bWJlci5zdWJzdHJpbmcoMCwgbWludXMpKSB8fCBpc05hTihpbnVtYmVyLnN1YnN0cmluZyhtaW51cyArIDEsIGludW1iZXIubGVuZ3RoIC0gMSkpKSA/XG4gICAgICAgIGVycm9yT2JqLkVSUk9SX05VTSA6XG4gICAgICAgIE51bWJlcihpbnVtYmVyLnN1YnN0cmluZygwLCBtaW51cykpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodW5pdCkge1xuICAgICAgcmV0dXJuIChpc05hTihpbnVtYmVyLnN1YnN0cmluZygwLCBpbnVtYmVyLmxlbmd0aCAtIDEpKSkgPyBlcnJvck9iai5FUlJPUl9OVU0gOiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIpKSA/IGVycm9yT2JqLkVSUk9SX05VTSA6IGludW1iZXI7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzLklNU0VDID0gZnVuY3Rpb24oaW51bWJlcikge1xuICBpbnVtYmVyID0gdHJhbnNfbnVtKGludW1iZXIpXG4gIC8vIFJldHVybiBlcnJvciBpZiBpbnVtYmVyIGlzIGEgbG9naWNhbCB2YWx1ZVxuICBpZiAoaW51bWJlciA9PT0gdHJ1ZSB8fCBpbnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanMgW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxuICBsZXQgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xuICBsZXQgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIHNlY2FudCBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5JTURJVignMScsIGV4cG9ydHMuSU1DT1MoaW51bWJlcikpO1xufTtcblxuZXhwb3J0cy5JTVNFQ0ggPSBmdW5jdGlvbihpbnVtYmVyKSB7XG4gIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanMgW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxuICBpbnVtYmVyID0gdHJhbnNfbnVtKGludW1iZXIpXG4gIGxldCB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XG4gIGxldCB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XG5cbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gaHlwZXJib2xpYyBzZWNhbnQgb2YgY29tcGxleCBudW1iZXJcbiAgcmV0dXJuIGV4cG9ydHMuSU1ESVYoJzEnLCBleHBvcnRzLklNQ09TSChpbnVtYmVyKSk7XG59O1xuXG5leHBvcnRzLklNU0lOID0gZnVuY3Rpb24oaW51bWJlcikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBsZXQgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xuICBsZXQgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcbiAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XG5cbiAgLy8gUmV0dXJuIHNpbmUgb2YgY29tcGxleCBudW1iZXJcbiAgcmV0dXJuIGV4cG9ydHMuQ09NUExFWChNYXRoLnNpbih4KSAqIChNYXRoLmV4cCh5KSArIE1hdGguZXhwKC15KSkgLyAyLCBNYXRoLmNvcyh4KSAqIChNYXRoLmV4cCh5KSAtIE1hdGguZXhwKC15KSkgLyAyLCB1bml0KTtcbn07XG5cbmV4cG9ydHMuSU1TSU5IID0gZnVuY3Rpb24oaW51bWJlcikge1xuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBsZXQgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xuICBsZXQgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcbiAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XG5cbiAgLy8gUmV0dXJuIGh5cGVyYm9saWMgc2luZSBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGguY29zKHkpICogKE1hdGguZXhwKHgpIC0gTWF0aC5leHAoLXgpKSAvIDIsIE1hdGguc2luKHkpICogKE1hdGguZXhwKHgpICsgTWF0aC5leHAoLXgpKSAvIDIsIHVuaXQpO1xufTtcblxuZXhwb3J0cy5JTVNRUlQgPSBmdW5jdGlvbihpbnVtYmVyKSB7XG4gIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanMgW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxuICBpbnVtYmVyID0gdHJhbnNfbnVtKGludW1iZXIpXG4gIGxldCB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XG4gIGxldCB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XG5cbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcbiAgbGV0IHVuaXQgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEpO1xuICB1bml0ID0gKHVuaXQgPT09ICdpJyB8fCB1bml0ID09PSAnaicpID8gdW5pdCA6ICdpJztcblxuICAvLyBDYWxjdWxhdGUgcG93ZXIgb2YgbW9kdWx1c1xuICBsZXQgcyA9IE1hdGguc3FydChleHBvcnRzLklNQUJTKGludW1iZXIpKTtcblxuICAvLyBDYWxjdWxhdGUgYXJndW1lbnRcbiAgbGV0IHQgPSBleHBvcnRzLklNQVJHVU1FTlQoaW51bWJlcik7XG5cbiAgLy8gUmV0dXJuIGV4cG9uZW50aWFsIG9mIGNvbXBsZXggbnVtYmVyXG4gIHJldHVybiBleHBvcnRzLkNPTVBMRVgocyAqIE1hdGguY29zKHQgLyAyKSwgcyAqIE1hdGguc2luKHQgLyAyKSwgdW5pdCk7XG59O1xuXG5leHBvcnRzLklNQ1NDID0gZnVuY3Rpb24gKGludW1iZXIpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIGludW1iZXIgaXMgYSBsb2dpY2FsIHZhbHVlXG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgaWYgKGludW1iZXIgPT09IHRydWUgfHwgaW51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIGNvZWZmaWNpZW50IGlzIG5vdCBhIG51bWJlclxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gY29zZWNhbnQgb2YgY29tcGxleCBudW1iZXJcbiAgcmV0dXJuIGV4cG9ydHMuSU1ESVYoJzEnLCBleHBvcnRzLklNU0lOKGludW1iZXIpKTtcbn07XG5cbmV4cG9ydHMuSU1DU0NIID0gZnVuY3Rpb24gKGludW1iZXIpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIGludW1iZXIgaXMgYSBsb2dpY2FsIHZhbHVlXG4gIGludW1iZXIgPSB0cmFuc19udW0oaW51bWJlcilcbiAgaWYgKGludW1iZXIgPT09IHRydWUgfHwgaW51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIGNvZWZmaWNpZW50IGlzIG5vdCBhIG51bWJlclxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gaHlwZXJib2xpYyBjb3NlY2FudCBvZiBjb21wbGV4IG51bWJlclxuICByZXR1cm4gZXhwb3J0cy5JTURJVignMScsIGV4cG9ydHMuSU1TSU5IKGludW1iZXIpKTtcbn07XG5cbmV4cG9ydHMuSU1TVUIgPSBmdW5jdGlvbihpbnVtYmVyMSwgaW51bWJlcjIpIHtcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGludW1iZXIxID0gdHJhbnNfbnVtKGludW1iZXIxKVxuICBpbnVtYmVyMiA9IHRyYW5zX251bShpbnVtYmVyMilcbiAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qcyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXG4gIGxldCBhID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcjEpO1xuICBsZXQgYiA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIxKTtcbiAgbGV0IGMgPSBleHBvcnRzLklNUkVBTChpbnVtYmVyMik7XG4gIGxldCBkID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcjIpO1xuXG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGEsIGIsIGMsIGQpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XG4gIGxldCB1bml0MSA9IGludW1iZXIxLnN1YnN0cmluZyhpbnVtYmVyMS5sZW5ndGggLSAxKTtcbiAgbGV0IHVuaXQyID0gaW51bWJlcjIuc3Vic3RyaW5nKGludW1iZXIyLmxlbmd0aCAtIDEpO1xuICBsZXQgdW5pdCA9ICdpJztcbiAgaWYgKHVuaXQxID09PSAnaicpIHtcbiAgICB1bml0ID0gJ2onO1xuICB9IGVsc2UgaWYgKHVuaXQyID09PSAnaicpIHtcbiAgICB1bml0ID0gJ2onO1xuICB9XG5cbiAgLy8gUmV0dXJuIF8gb2YgdHdvIGNvbXBsZXggbnVtYmVyc1xuICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKGEgLSBjLCBiIC0gZCwgdW5pdCk7XG59O1xuXG5leHBvcnRzLklNU1VNID0gZnVuY3Rpb24gKGludW1iZXIpIHtcbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICBsZXQgYXJncyA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcblxuICAvLyBJbml0aWFsaXplIHJlc3VsdFxuICBsZXQgcmVzdWx0ID0gYXJnc1swXTtcblxuICAvLyBMb29wIG9uIGFsbCBudW1iZXJzXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIC8vIExvb2t1cCBjb2VmZmljaWVudHMgb2YgdHdvIGNvbXBsZXggbnVtYmVyc1xuICAgIGxldCBhID0gZXhwb3J0cy5JTVJFQUwocmVzdWx0KTtcbiAgICBsZXQgYiA9IGV4cG9ydHMuSU1BR0lOQVJZKHJlc3VsdCk7XG4gICAgbGV0IGMgPSBleHBvcnRzLklNUkVBTChhcmdzW2ldKTtcbiAgICBsZXQgZCA9IGV4cG9ydHMuSU1BR0lOQVJZKGFyZ3NbaV0pO1xuXG4gICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYSwgYiwgYywgZCkpIHtcbiAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgICB9XG5cbiAgICAvLyBDb21wbHV0ZSBwcm9kdWN0IG9mIHR3byBjb21wbGV4IG51bWJlcnNcbiAgICByZXN1bHQgPSBleHBvcnRzLkNPTVBMRVgoYSArIGMsIGIgKyBkKTtcbiAgfVxuXG4gIC8vIFJldHVybiBzdW0gb2YgY29tcGxleCBudW1iZXJzXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnRzLklNVEFOID0gZnVuY3Rpb24gKGludW1iZXIpIHtcbiAgaW51bWJlciA9IHRyYW5zX251bShpbnVtYmVyKVxuICAvLyBSZXR1cm4gZXJyb3IgaWYgaW51bWJlciBpcyBhIGxvZ2ljYWwgdmFsdWVcbiAgaWYgKGludW1iZXIgPT09IHRydWUgfHwgaW51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cbiAgbGV0IHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcbiAgbGV0IHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcblxuICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiB0YW5nZW50IG9mIGNvbXBsZXggbnVtYmVyXG4gIHJldHVybiBleHBvcnRzLklNRElWKGV4cG9ydHMuSU1TSU4oaW51bWJlciksIGV4cG9ydHMuSU1DT1MoaW51bWJlcikpO1xufTtcblxuZXhwb3J0cy5PQ1QyQklOID0gZnVuY3Rpb24gKG51bWJlciwgcGxhY2VzKSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGhleGFkZWNpbWFsIG9yIGNvbnRhaW5zIG1vcmUgdGhhbiB0ZW4gY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxuICBpZiAoIS9eWzAtN117MSwxMH0kLy50ZXN0KG51bWJlcikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgbnVtYmVyIGlzIG5lZ2F0aXZlXG4gIGxldCBuZWdhdGl2ZSA9IChudW1iZXIubGVuZ3RoID09PSAxMCAmJiBudW1iZXIuc3Vic3RyaW5nKDAsIDEpID09PSAnNycpID8gdHJ1ZSA6IGZhbHNlO1xuXG4gIC8vIENvbnZlcnQgb2N0YWwgbnVtYmVyIHRvIGRlY2ltYWxcbiAgbGV0IGRlY2ltYWwgPSAobmVnYXRpdmUpID8gcGFyc2VJbnQobnVtYmVyLCA4KSAtIDEwNzM3NDE4MjQgOiBwYXJzZUludChudW1iZXIsIDgpO1xuXG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbG93ZXIgdGhhbiAtNTEyIG9yIGdyZWF0ZXIgdGhhbiA1MTFcbiAgLy8gaWYgKGRlY2ltYWwgPCAtNTEyIHx8IGRlY2ltYWwgPiA1MTEpIHtcbiAgLy8gICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIC8vIH1cblxuICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgYmluYXJ5IG51bWJlciBpZiBudW1iZXIgaXMgbmVnYXRpdmVcbiAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgcmV0dXJuICcxJyArIHRleHQuUkVQVCgnMCcsIDkgLSAoNTEyICsgZGVjaW1hbCkudG9TdHJpbmcoMikubGVuZ3RoKSArICg1MTIgKyBkZWNpbWFsKS50b1N0cmluZygyKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgZGVjaW1hbCBudW1iZXIgdG8gYmluYXJ5XG4gIGxldCByZXN1bHQgPSBkZWNpbWFsLnRvU3RyaW5nKDIpO1xuICBpZiAocmVzdWx0Lmxlbmd0aCA+PTEwKXtcbiAgICByZXR1cm4gcmVzdWx0LnNsaWNlKHJlc3VsdC5sZW5ndGgtMTAsIHJlc3VsdC5sZW5ndGgpXG4gIH1cbiAgLy8gUmV0dXJuIGJpbmFyeSBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgbmVjZXNzYXJ5IGlmIHBsYWNlcyBpcyB1bmRlZmluZWRcbiAgaWYgKHR5cGVvZiBwbGFjZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5vbm51bWVyaWNcbiAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbmVnYXRpdmVcbiAgICBpZiAocGxhY2VzIDwgMCkge1xuICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgICB9XG5cbiAgICAvLyBUcnVuY2F0ZSBwbGFjZXMgaW4gY2FzZSBpdCBpcyBub3QgYW4gaW50ZWdlclxuICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcbiAgICAvLyBQYWQgcmV0dXJuIHZhbHVlIHdpdGggbGVhZGluZyAwcyAoemVyb3MpIGlmIG5lY2Vzc2FyeSAodXNpbmcgVW5kZXJzY29yZS5zdHJpbmcpXG4gICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyB0ZXh0LlJFUFQoJzAnLCBwbGFjZXMgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdCA6IGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxufTtcblxuZXhwb3J0cy5PQ1QyREVDID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IG9jdGFsIG9yIGNvbnRhaW5zIG1vcmUgdGhhbiB0ZW4gY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxuICBpZiAoIS9eWzAtN117MSwxMH0kLy50ZXN0KG51bWJlcikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gQ29udmVydCBvY3RhbCBudW1iZXIgdG8gZGVjaW1hbFxuICBsZXQgZGVjaW1hbCA9IHBhcnNlSW50KG51bWJlciwgOCk7XG5cbiAgLy8gUmV0dXJuIGRlY2ltYWwgbnVtYmVyXG4gIHJldHVybiAoZGVjaW1hbCA+PSA1MzY4NzA5MTIpID8gZGVjaW1hbCAtIDEwNzM3NDE4MjQgOiBkZWNpbWFsO1xufTtcblxuZXhwb3J0cy5PQ1QySEVYID0gZnVuY3Rpb24obnVtYmVyLCBwbGFjZXMpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3Qgb2N0YWwgb3IgY29udGFpbnMgbW9yZSB0aGFuIHRlbiBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXG4gIGlmICghL15bMC03XXsxLDEwfSQvLnRlc3QobnVtYmVyKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBDb252ZXJ0IG9jdGFsIG51bWJlciB0byBkZWNpbWFsXG4gIGxldCBkZWNpbWFsID0gcGFyc2VJbnQobnVtYmVyLCA4KTtcblxuICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgb2N0YWwgbnVtYmVyIGlmIG51bWJlciBpcyBuZWdhdGl2ZVxuICBpZiAoZGVjaW1hbCA+PSA1MzY4NzA5MTIpIHtcbiAgICByZXR1cm4gJ2ZmJyArIChkZWNpbWFsICsgMzIyMTIyNTQ3MikudG9TdHJpbmcoMTYpO1xuICB9XG5cbiAgLy8gQ29udmVydCBkZWNpbWFsIG51bWJlciB0byBoZXhhZGVjaW1hbFxuICBsZXQgcmVzdWx0ID0gZGVjaW1hbC50b1N0cmluZygxNik7XG5cbiAgLy8gUmV0dXJuIGhleGFkZWNpbWFsIG51bWJlciB1c2luZyB0aGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBuZWNlc3NhcnkgaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxuICBpZiAocGxhY2VzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xuICAgIGlmIChpc05hTihwbGFjZXMpKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxuICAgIGlmIChwbGFjZXMgPCAwKSB7XG4gICAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICAgIH1cblxuICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXG4gICAgcGxhY2VzID0gTWF0aC5mbG9vcihwbGFjZXMpO1xuXG4gICAgLy8gUGFkIHJldHVybiB2YWx1ZSB3aXRoIGxlYWRpbmcgMHMgKHplcm9zKSBpZiBuZWNlc3NhcnkgKHVzaW5nIFVuZGVyc2NvcmUuc3RyaW5nKVxuICAgIHJldHVybiAocGxhY2VzID49IHJlc3VsdC5sZW5ndGgpID8gdGV4dC5SRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNhbml0aXplZFNoZWV0TmFtZShzaGVldF9uYW1lKSB7XG4gICAgbGV0IHF1b3RlZE1hdGNoID0gc2hlZXRfbmFtZS5tYXRjaCgvXicoLiopJyQvKTtcbiAgICBpZiAocXVvdGVkTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHF1b3RlZE1hdGNoWzFdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNoZWV0X25hbWU7XG4gICAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgZ2V0U2FuaXRpemVkU2hlZXROYW1lIH0gZnJvbSAnLi4vY2FsY191dGlscy9nZXRfc2hlZXRuYW1lLmpzJztcbmltcG9ydCAqIGFzIGVycm9yX2NmIGZyb20gJy4uL2NhbGNfdXRpbHMvZXJyb3JfY29uZmlnLmpzJztcbmltcG9ydCB7IEZPUk1VTEFfU1RBVFVTIH0gZnJvbSAnLi4vY2FsY191dGlscy9jb25maWcnO1xuXG4vKipcbiAqQHByb3BlcnR5IHtDYWxjQ2VsbH0gY2FsY0NlbGxcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBzdHJfZXhwcmVzc2lvblxuICovXG5leHBvcnQgY2xhc3MgUmVmVmFsdWUge1xuICBjb25zdHJ1Y3RvcihzdHJfZXhwcmVzc2lvbiwgY2FsY0NlbGwpIHtcbiAgICB0aGlzLm5hbWUgPSAnUmVmVmFsdWUnO1xuICAgIHRoaXMuc3RyX2V4cHJlc3Npb24gPSBzdHJfZXhwcmVzc2lvbjtcbiAgICB0aGlzLmNhbGNDZWxsID0gY2FsY0NlbGw7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7Q2FsY0NlbGx9XG4gICAqL1xuXG4gIGdldFJlZkNhbGNDZWxsKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgY2FsY0NlbGwgPSB0aGlzLmNhbGNDZWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtDYWxjQ2VsbH0gY2FsY0NlbGxcbiAgICAgKi9cbiAgICBsZXQgc3RyX2V4cHJlc3Npb24gPSB0aGlzLnN0cl9leHByZXNzaW9uO1xuICAgIGxldCBjYWxjU2hlZXQsXG4gICAgICBzaGVldF9uYW1lLFxuICAgICAgY2VsbF9uYW1lLFxuICAgICAgY2VsbF9mdWxsX25hbWU7XG4gICAgaWYgKHN0cl9leHByZXNzaW9uLmluZGV4T2YoJyEnKSAhPT0gLTEpIHtcbiAgICAgIGxldCBhdXggPSBzdHJfZXhwcmVzc2lvbi5zcGxpdCgnIScpO1xuICAgICAgc2hlZXRfbmFtZSA9IGdldFNhbml0aXplZFNoZWV0TmFtZShhdXhbMF0pO1xuICAgICAgY2FsY1NoZWV0ID0gY2FsY0NlbGwud29ya2Jvb2tQcm94eS5nZXRTaGVldEJ5TmFtZShzaGVldF9uYW1lKTtcbiAgICAgIGNlbGxfbmFtZSA9IGF1eFsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsY1NoZWV0ID0gY2FsY0NlbGwuY2FsY1NoZWV0O1xuICAgICAgc2hlZXRfbmFtZSA9IGNhbGNDZWxsLmNhbGNTaGVldC5uYW1lO1xuICAgICAgY2VsbF9uYW1lID0gc3RyX2V4cHJlc3Npb247XG4gICAgfVxuICAgIGlmICghY2FsY1NoZWV0KSB7XG4gICAgICB0aHJvdyBFcnJvcignU2hlZXQgJyArIHNoZWV0X25hbWUgKyAnIG5vdCBmb3VuZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FsY0NlbGwud29ya2Jvb2tQcm94eS5nZXRDZWxsQnlOYW1lKHNoZWV0X25hbWUsIGNlbGxfbmFtZSk7XG4gIH07XG5cbiAgc29sdmVFeHByZXNzaW9uKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgY3VyQ2VsbEZvcm11bGFQcm94eSA9IHRoaXMuY2FsY0NlbGw7XG4gICAgbGV0IHJlZkNhbGNDZWxsID0gc2VsZi5nZXRSZWZDYWxjQ2VsbCgpO1xuICAgIGlmICghcmVmQ2FsY0NlbGwuY2VsbE9iaikgeyAvLyDojrflj5bov5nkuKpjZWxs77yM5aaC5p6c5Li656m655qE6K+d6L+U5ZueTnVsbFxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChyZWZDYWxjQ2VsbC5jZWxsU3RhdHVzID09PSBGT1JNVUxBX1NUQVRVUy5jcmVhdGVkKSB7IC8vIOWmguaenOWPkeeOsOi/meS4quWFrOW8j+i/mOayoeacieiiq+iuoeeul+WHuuadpe+8jOmCo+S5iOWOu+iuoeeul+i/meS4quWFrOW8j1xuICAgICAgcmVmQ2FsY0NlbGwuZXhlY0Zvcm11bGEoKTsgLy8g56Kw5Yiw5LqG6L+Y5rKh5pyJ6Kej5Ye65p2l55qE5YWs5byP44CC6L+Z6YeM5a2Y5Zyo552A6YCS5b2S44CCXG4gICAgICBpZiAocmVmQ2FsY0NlbGwuY2VsbE9iai50ID09PSAnZScpIHsgLy8gIOWmguaenHNlbGblr7nlupTnmoTljZXlhYPmoLzlvpfliLDnmoTnu5PmnpzmmK/plJnor6/jgIJ05bGe5oCn5Luj6KGo57G75Z6L77yM5aaC5p6c5Li6ZSDku6PooahlcnJvclxuICAgICAgICBjb25zb2xlLmxvZygncmVmIGlzIGFuIGVycm9yIGF0JywgcmVmQ2FsY0NlbGwpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVmQ2FsY0NlbGwuY2VsbE9iai53KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWZDYWxjQ2VsbC5jZWxsT2JqLnY7XG4gICAgfSBlbHNlIGlmIChyZWZDYWxjQ2VsbC5jZWxsU3RhdHVzID09PSBGT1JNVUxBX1NUQVRVUy53b3JraW5nKSB7Ly8g5b6q546v5L6d6LWWXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JfY2YuRVJST1JfQ0lSQ1VMQVIpO1xuICAgIH0gZWxzZSBpZiAocmVmQ2FsY0NlbGwuY2VsbFN0YXR1cyA9PT0gRk9STVVMQV9TVEFUVVMuc29sdmVkKSB7XG4gICAgICBpZiAocmVmQ2FsY0NlbGwuY2VsbE9iai50ID09PSAnZScpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlZiBpcyBhbiBlcnJvciBhZnRlciBjZWxsRm9ybXVsYVByb3h5IGV2YWwnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlZkNhbGNDZWxsLmNlbGxPYmoudyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVmQ2FsY0NlbGwuY2VsbE9iai52O1xuICAgIH1cbiAgfVxufVxuXG4iLCJjb25zdCByZWNhc3QgPSByZXF1aXJlKFwicmVjYXN0XCIpO1xuXG5jb25zdCBjb2xvbiA9IFwiJCQkXCI7XG5jb25zdCBmcW0gPSAnJztcbmNvbnN0IGV4Y2xhbWF0aW9uUG9pbnQgPSBcIlwiO1xuY29uc3QgYnJhY2VMZWZ0ID0gXCJcIjtcbmNvbnN0IGJyYWNlUmlnaHQgPSBcIlwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWNhc3Qge1xuICAgIGNvbnN0cnVjdG9yKGZvcm11bGEpIHtcbiAgICAgICAgdGhpcy5mb3JtdWxhID0gZm9ybXVsYTtcbiAgICAgICAgdGhpcy5hc3QgPSBcIlwiO1xuICAgIH1cbiAgICBwcmVQcm9jZXNzKCkge1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvPS9nLCAnJyk7XG4gICAgICAgIHRoaXMuZm9ybXVsYSA9IHRoaXMuZm9ybXVsYS5yZXBsYWNlKC86L2csIGNvbG9uKTtcbiAgICAgICAgdGhpcy5mb3JtdWxhID0gdGhpcy5mb3JtdWxhLnJlcGxhY2UoL1wiXCJcIlwiL2csIGZxbSk7XG4gICAgICAgIHRoaXMuZm9ybXVsYSA9IHRoaXMuZm9ybXVsYS5yZXBsYWNlKC8hL2csIGV4Y2xhbWF0aW9uUG9pbnQpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvey9nLCBicmFjZUxlZnQpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvfS9nLCBicmFjZVJpZ2h0KTtcbiAgICAgICAgdGhpcy5mb3JtdWxhID0gdGhpcy5mb3JtdWxhLnJlcGxhY2UoLyMvZywgJycpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvXFwuL2csICdhJyk7XG4gICAgICAgIHRoaXMuZm9ybXVsYSA9IHRoaXMuZm9ybXVsYS5yZXBsYWNlKC9bMC05XVswLTldKi9nLCAnYScpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvXFzigJwvZywgJ1wiJyk7XG4gICAgICAgIHRoaXMuZm9ybXVsYSA9IHRoaXMuZm9ybXVsYS5yZXBsYWNlKC9cXO+8iC9nLCAnKCcpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvXFzvvIkvZywgJyknKTtcbiAgICAgICAgdGhpcy5mb3JtdWxhID0gdGhpcy5mb3JtdWxhLnJlcGxhY2UoL1xc4oCdL2csICdcIicpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvXFwlL2csICcnKTtcbiAgICAgICAgdGhpcy5mb3JtdWxhID0gdGhpcy5mb3JtdWxhLnJlcGxhY2UoL1xcLC9nLCAnJyk7XG4gICAgICAgIHRoaXMuZm9ybXVsYSA9IHRoaXMuZm9ybXVsYS5yZXBsYWNlKC9cXO+8jC9nLCAnJyk7XG4gICAgICAgIC8vIHRoaXMuY2VsbEZvcm11bGFQcm94eSA9IHRoaXMuY2VsbEZvcm11bGFQcm94eS5yZXBsYWNlKC9cIihbXFxzXFxTXXsxLH0pXCJcIlwiL2csICcnKTtcbiAgICAgICAgdGhpcy5mb3JtdWxhID0gdGhpcy5mb3JtdWxhLnJlcGxhY2UoL1wiKFtcXHNcXFNdKylcIlwiXCIvZywgJycpO1xuICAgICAgICB0aGlzLmZvcm11bGEgPSB0aGlzLmZvcm11bGEucmVwbGFjZSgvXCJcIi8sIFwiXCIpXG4gICAgfVxuXG4gICAgcGFyc2UoKSB7XG4gICAgICAgIHRoaXMucHJlUHJvY2VzcygpO1xuICAgICAgICBsZXQge2Zvcm11bGF9ID0gdGhpcztcbiAgICAgICAgdGhpcy5hc3QgPSByZWNhc3QucGFyc2UoZm9ybXVsYSk7XG4gICAgfVxuXG4gICAgaWdub3JlU3BhY2UoKSB7XG5cbiAgICB9XG59XG4iLCJpbXBvcnQge2lzSGF2ZX0gZnJvbSBcIi4uL2hlbHBlci9jaGVja192YWx1ZVwiO1xuaW1wb3J0IHtpc0Zvcm11bGF9IGZyb20gXCIuL3Jvd1wiO1xuaW1wb3J0IHtkYXRlUGF0dGVybjIsIHN0cjJSZX0gZnJvbSBcIi4uL3V0aWxzL3JlZ19wYXR0ZXJuXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGxQcm94eSB7XG4gICAgY29uc3RydWN0b3IoY2VsbCkge1xuICAgICAgICB0aGlzLmNlbGwgPSBjZWxsO1xuICAgIH1cblxuICAgIHJlbmRlckZvcm1hdChzdHlsZSwgbnJpbmRleCwgY2luZGV4LCBkYXRhLCBmaWx0ZXIpIHtcbiAgICAgICAgaWYoaXNIYXZlKHN0eWxlKSA9PT0gZmFsc2UgfHwgaXNIYXZlKHN0eWxlLmZvcm1hdCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwiY2VsbFRleHRcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcInN0YXRlXCI6IGZhbHNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB7Y2VsbH0gPSB0aGlzO1xuICAgICAgICBsZXQgY2VsbFRleHQgPSBcIlwiO1xuICAgICAgICBpZiAoc3R5bGUuZm9ybWF0KSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhLmZvcm1hdG0sICc+PicsIGNlbGwuZm9ybWF0KTtcbiAgICAgICAgICAgIGxldCBmb3JtYXRJbmZvID0gZGF0YS50cnlQYXJzZVRvTnVtKGNlbGwsIG5yaW5kZXgsIGNpbmRleCk7XG4gICAgICAgICAgICBpZihmb3JtYXRJbmZvLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKChmb3JtYXRJbmZvLnN0eWxlID09PSAnZGF0ZScgfHwgZm9ybWF0SW5mby5zdHlsZSA9PT0gJ2RhdGV0aW1lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxUZXh0ID0gZm9ybWF0SW5mby50ZXh0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0SW5mby5zdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxUZXh0ID0gZm9ybWF0SW5mby50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYoIGlzSGF2ZShjZWxsLnRleHQpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZWxsVGV4dCA9IGNlbGwudGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJjZWxsVGV4dFwiOiBjZWxsVGV4dCxcbiAgICAgICAgICAgICAgICBcInN0YXRlXCI6IGZvcm1hdEluZm8uc3RhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImNlbGxUZXh0XCI6IGNlbGxUZXh0LFxuICAgICAgICAgICAgXCJzdGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRDZWxsRGF0YVR5cGUoc2Fyciwge2lzRGF0ZSwgaXNOdW1iZXJ9KSB7IC8vIHRvZG87IOS5i+WQjui/meWdl+mAu+i+keS8mue7n+S4gOaUvuWIsGNhbGPph4zpnaLlpITnkIZcbiAgICAgICAgbGV0IG5jZWxsID0gdGhpcy5jZWxsO1xuICAgICAgICAvLyBsZXQgZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgbGV0IG5BID0gdHJ1ZTtcblxuXG4gICAgICAgIGlmICghaXNIYXZlKG5jZWxsLmZvcm11bGFzKSkge1xuICAgICAgICAgICAgbmNlbGwuZm9ybXVsYXMgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNIYXZlKG5jZWxsLnRleHQpKSB7XG4gICAgICAgICAgICBuY2VsbC50ZXh0ID0gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2YWx1ZSA9IG5jZWxsLmZvcm11bGFzICE9PSBcIlwiID8gbmNlbGwuZm9ybXVsYXMgKyBcIlwiIDogbmNlbGwudGV4dCArIFwiXCI7XG4gICAgICAgIC8vIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvLC9nLCBcIlwiKS5yZXBsYWNlKFwiPVwiLCBcIlwiKTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8sL2csIFwiXCIpOyAgICAgICAgLy8gPTEyMyDkuI3opoHmioo95omU5o6JXG4gICAgICAgIGxldCBucyA9IHZhbHVlICogMTtcblxuICAgICAgICBpZiAoKG5zIHx8IG5zID09PSAwKSAmJiB0eXBlb2YgbnMgPT09ICdudW1iZXInICYmICFpc05hTihucykgJiYgL15cXGQrJC8udGVzdCh2YWx1ZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmKGlzTnVtYmVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaXNOdW1iZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG5BID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNEYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5BID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNOdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc0RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5jZWxsLnR5cGUgPSAnbnVtYmVyJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAmJiBuQSA9PT0gdHJ1ZSAmJiBpc0Zvcm11bGEodmFsdWUpKSB7XG4gICAgICAgICAgICBuQSA9IHRydWU7XG4gICAgICAgICAgICBpc051bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgaXNEYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBuY2VsbC50eXBlID0gJ25hJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAmJiB2YWx1ZS5zZWFyY2goc3RyMlJlKGRhdGVQYXR0ZXJuMiksICcnKSAhPT0gLTEpIHsgLy8gam9iczog5Yik5pat5piv5ZCm5piv5pel5pyfXG4gICAgICAgICAgICBpZiggaXNEYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbkEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc051bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzRGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5BID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNOdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc0RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5jZWxsLnR5cGUgPSAnZGF0ZSc7XG4gICAgICAgIH0gZWxzZSB7Ly9cbiAgICAgICAgICAgIG5BID0gZmFsc2U7XG4gICAgICAgICAgICBpc051bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgaXNEYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBuY2VsbC50eXBlID0gJ290aGVyJztcbiAgICAgICAgfVxuICAgICAgICBuY2VsbC50bXAgPSB2YWx1ZTtcbiAgICAgICAgc2Fyci5wdXNoKG5jZWxsKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbkEsIGlzRGF0ZTogaXNEYXRlLCBpc051bWJlcjogaXNOdW1iZXJcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnbW92ZSc7XG4gICAgfVxuXG4gICAgbW92ZShjZWxsUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICdtb3ZlJztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59IiwiaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge0NlbGxSYW5nZX0gZnJvbSAnLi4vY29yZS9jZWxsX3JhbmdlJztcbmltcG9ydCB7bW91c2VNb3ZlVXB9IGZyb20gXCIuLi9jb21wb25lbnQvZXZlbnRcIjtcbmltcG9ydCB7eHkyZXhwcn0gZnJvbSBcIi4uL3V0aWxzL2FscGhhYmV0XCI7XG5pbXBvcnQge2RlZXBDb3B5fSBmcm9tICcuLi9jb3JlL29wZXJhdG9yJztcbmltcG9ydCBTZWxlY3RvckNlbGwgZnJvbSBcIi4vc2VsZWN0b3JfY2VsbFwiO1xuaW1wb3J0IENlbGxQcm9wIGZyb20gXCIuLi9tb2RlbC9jZWxsX3Byb3BcIjtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGggPSAyICogMiAtIDE7XG5sZXQgc3RhcnRaSW5kZXggPSAxMDtcblxuY2xhc3MgU2VsZWN0b3JFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBzZWxlY3Rvciwgc2hlZXQpIHtcbiAgICAgICAgdGhpcy5jb3JuZXJFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItY29ybmVyYCk7XG4gICAgICAgIC8vIHRoaXMuYm94ID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3Rvci1ib3hgKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLmwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWJveC1sYClcbiAgICAgICAgICAgIC5vbignbW91c2Vkb3duLnN0b3AnLCBldnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldnQuZGV0YWlsID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUV2ZW50KDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuciA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LXJgKVxuICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24uc3RvcCcsIGV2dCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2dC5kZXRhaWwgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUV2ZW50KDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm9uKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmRldGFpbCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LXRgKVxuICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24uc3RvcCcsIGV2dCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2dC5kZXRhaWwgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRXZlbnQoMyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5iID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3Rvci1ib3gtYmApXG4gICAgICAgICAgICAub24oJ21vdXNlZG93bi5zdG9wJywgZXZ0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmRldGFpbCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlRXZlbnQoNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB0aGlzLmNvcm5lckVsLm9uKCdtb3VzZWRvd24nLCBldnQgPT4ge1xuICAgICAgICAgICAgbGV0IHtkZXRhaWx9ID0gZXZ0O1xuICAgICAgICAgICAgaWYgKGRldGFpbCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHNoZWV0LmNsaWNrQ29weVBhc3RlKCk7XG4gICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ib3hpbm5lciA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94aW5uZXJgKVxuICAgICAgICAgICAgLmNoaWxkcmVuKHRoaXMuYiwgdGhpcy50LCB0aGlzLnIsIHRoaXMubCk7XG4gICAgICAgIHRoaXMuYXJlYUVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3Rvci1hcmVhYClcbiAgICAgICAgICAgIC5jaGlsZHJlbih0aGlzLmNvcm5lckVsLCB0aGlzLmJveGlubmVyKS5oaWRlKCk7ICAgICAgICAgICAgLy8gdGhpcy5ib3hpbm5lclxuICAgICAgICB0aGlzLmNsaXBib2FyZEVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3Rvci1jbGlwYm9hcmRgKS5oaWRlKCk7XG4gICAgICAgIHRoaXMuYXV0b2ZpbGxFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYXV0b2ZpbGxgKS5oaWRlKCk7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yYClcbiAgICAgICAgICAgIC5jc3MoJ3otaW5kZXgnLCBgJHtzdGFydFpJbmRleH1gKVxuICAgICAgICAgICAgLmNoaWxkcmVuKHRoaXMuYXJlYUVsLCB0aGlzLmNsaXBib2FyZEVsLCB0aGlzLmF1dG9maWxsRWwpXG4gICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICBzdGFydFpJbmRleCArPSAxO1xuICAgIH1cblxuICAgIGJvcmRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLmFyZWFFbC5jc3MoJ2JvcmRlcicsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBsb25nVGltZUJlZm9yZSh0aW1lID0gNTAwKSB7XG4gICAgICAgIHRoaXMuYm94aW5uZXIuaGlkZSgpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ib3hpbm5lci5zaG93KCk7XG4gICAgICAgIH0sIHRpbWUpO1xuICAgIH1cblxuICAgIG1vdmVFdmVudChkaXJlY3Rpb24pIHtcbiAgICAgICAgY29uc29sZS5sb2coNjApO1xuICAgICAgICBsZXQge2RhdGEsIF9zZWxlY3Rvciwgc2hlZXQsfSA9IHRoaXM7XG4gICAgICAgIGxldCB7c2VsZWN0b3J9ID0gZGF0YTtcbiAgICAgICAgbGV0IHtzcmksIHNjaSwgZXJpLCBlY2ksIHcsIGh9ID0gX3NlbGVjdG9yLnJhbmdlO1xuICAgICAgICBsZXQgX2NlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBoKTtcbiAgICAgICAgbGV0IGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBoKTtcbiAgICAgICAgbGV0IHtzZWxlY3Rvck1vdmVFbH0gPSBzaGVldDtcbiAgICAgICAgc2VsZWN0b3JNb3ZlRWwuc2V0KC0xLCAtMSwgdHJ1ZSk7XG4gICAgICAgIHNlbGVjdG9yTW92ZUVsLmhpZGUoKTtcblxuICAgICAgICBtb3VzZU1vdmVVcCh3aW5kb3csIChlKSA9PiB7XG4gICAgICAgICAgICBzaGVldC5jb250YWluZXIuY3NzKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XG4gICAgICAgICAgICBfc2VsZWN0b3Iuc2V0Qm94aW5uZXIoXCJub25lXCIpO1xuXG4gICAgICAgICAgICBsZXQge3JpLCBjaX0gPSBkYXRhLmdldENlbGxSZWN0QnlYWShlLmxheWVyWCwgZS5sYXllclkpO1xuICAgICAgICAgICAgaWYgKHJpICE9PSAtMSAmJiBjaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjZWxsUmFuZ2UgPSBuZXcgQ2VsbFJhbmdlKHNyaSwgc2NpLCBlcmksIGVjaSwgdywgaCk7XG4gICAgICAgICAgICAgICAgY2VsbFJhbmdlLm1vdmUocmksIGNpKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgaWYoZGlyZWN0aW9uID09IDQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGNlbGxSYW5nZSA9IGNyZWF0ZWQgQ2VsbFJhbmdlKGVyaSwgZWNpLCBlcmksIGVjaSwgdywgaCk7XG4gICAgICAgICAgICAgICAgLy8gICAgIH0gZWxzZSBpZihkaXJlY3Rpb24gPT0gMikge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgY2VsbFJhbmdlID0gY3JlYXRlZCBDZWxsUmFuZ2Uoc3JpLCBlY2ksIGVyaSwgZWNpLCB3LCBoKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgfSBlbHNlIGlmKGRpcmVjdGlvbiA9PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBjZWxsUmFuZ2UgPSBjcmVhdGVkIENlbGxSYW5nZShzcmksIHNjaSwgZXJpLCBlY2ksIHcsIGgpO1xuICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBkYXRhLmdldE1vdmVSZWN0KGNlbGxSYW5nZSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JNb3ZlRWwucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JNb3ZlRWwuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rvck1vdmVFbC5lbC5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIC8vIOWmguaenOenu+WKqOeahOWGheWuueiiq+WNleWFg+agvOWMheWQq++8jOWImemcgOimgeWPmOWMllxuICAgICAgICAgICAgbGV0IHtyb3dzfSA9IGRhdGE7XG4gICAgICAgICAgICBsZXQgYXJyID0gW10sIGFycjIgPSBbXSwgYXJyMyA9IFtdO1xuXG4gICAgICAgICAgICBfY2VsbFJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyb3dzLmdldENlbGwoaSwgaiksIGksIGopO1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gcm93cy5nZXRDZWxsKGksIGopO1xuICAgICAgICAgICAgICAgIGxldCBtb3ZlZENlbGwgPSBuZXcgQ2VsbFByb3AoaSwgaiwgZGVlcENvcHkoY2VsbCB8fCB7fSksIGAke3h5MmV4cHIoaiwgaSl9OiR7eHkyZXhwcihqLCBpKX1gKTtcbiAgICAgICAgICAgICAgICBsZXQgbW92ZWRDZWxsMiA9IG5ldyBDZWxsUHJvcChpLCBqLCBkZWVwQ29weShjZWxsIHx8IHt9KSwgYCR7eHkyZXhwcihqLCBpKX1gKTtcbiAgICAgICAgICAgICAgICBhcnIucHVzaChtb3ZlZENlbGwpO1xuICAgICAgICAgICAgICAgIGFycjMucHVzaChtb3ZlZENlbGwyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2VsbFJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbW92ZWRDZWxsID0gbmV3IENlbGxQcm9wKGksIGosIGRlZXBDb3B5KHJvd3MuZ2V0Q2VsbChpLCBqKSB8fCB7fSksIHh5MmV4cHIoaiwgaSkpO1xuICAgICAgICAgICAgICAgIGFycjIucHVzaChtb3ZlZENlbGwpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRhdGEuY3V0UGFzdGUoX2NlbGxSYW5nZSwgY2VsbFJhbmdlLCBmYWxzZSk7XG4gICAgICAgICAgICBzaGVldC5jb250YWluZXIuY3NzKCdwb2ludGVyLWV2ZW50cycsICdhdXRvJyk7XG4gICAgICAgICAgICBfc2VsZWN0b3Iuc2V0Qm94aW5uZXIoXCJhdXRvXCIpO1xuICAgICAgICAgICAgc2VsZWN0b3JNb3ZlRWwuaGlkZSgpO1xuXG4gICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgc2VsZWN0b3IucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICBzZWxlY3Rvci5jaSA9IGNlbGxSYW5nZS5zY2k7XG4gICAgICAgICAgICBzZWxlY3Rvci5yaSA9IGNlbGxSYW5nZS5zcmk7XG5cbiAgICAgICAgICAgIF9zZWxlY3Rvci5pbmRleGVzID0gW3NlbGVjdG9yLnJpLCBzZWxlY3Rvci5jaV07XG4gICAgICAgICAgICBfc2VsZWN0b3IubW92ZUluZGV4ZXMgPSBbY2VsbFJhbmdlLnNyaSwgY2VsbFJhbmdlLnNjaV07XG4gICAgICAgICAgICBfc2VsZWN0b3IucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICBfc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcblxuICAgICAgICAgICAgc2hlZXQuc2VsZWN0b3Iuc2VsZWN0Q2VsbC5zZXREYXRhKGNlbGxSYW5nZS5zcmksIGNlbGxSYW5nZS5zY2kpO1xuICAgICAgICAgICAgLy8gYmVsb25nU2hlZXQuc2VsZWN0b3JNb3ZlUmVzZXQoKTtcblxuICAgICAgICAgICAgLy8g5aSa5Liq5Y2V5YWD5qC8XG4gICAgICAgICAgICAvLyBpZiAoX2NlbGxSYW5nZS5lcmkgIT0gX2NlbGxSYW5nZS5zcmkgfHwgX2NlbGxSYW5nZS5lY2kgIT0gX2NlbGxSYW5nZS5zY2kpIHtcbiAgICAgICAgICAgIC8vICAgICBsZXQgZXJweEFyciA9IFtdO1xuICAgICAgICAgICAgLy8gICAgIGxldCBlcnB4QXJyMiA9IFtdO1xuICAgICAgICAgICAgLy8gICAgIGxldCBlcnB4QXJyMyA9IFtdO1xuICAgICAgICAgICAgLy8gICAgIGZvciAobGV0IGkgPSBfY2VsbFJhbmdlLnNjaTsgaSA8PSBfY2VsbFJhbmdlLmVjaTsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IGogPSBfY2VsbFJhbmdlLnNyaTsgaiA8PSBfY2VsbFJhbmdlLmVyaTsgaisrKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBlcnB4QXJyLnB1c2goeHkyZXhwcihpLCBqKSk7XG4gICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXJweEFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVycHhBcnIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIGlmIChpIDw9IGopIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBlcnB4QXJyMi5wdXNoKFtpLCBqXSlcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnB4QXJyMi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgW2EsIGJdID0gZXJweEFycjJbaV07XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgYTIgPSBlcnB4QXJyW2FdO1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgYTEgPSBlcnB4QXJyW2JdO1xuICAgICAgICAgICAgLy8gICAgICAgICBhcnIucHVzaChgJHthMn06JHthMX1gKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgYXJyMy5wdXNoKGAke2EyfToke2ExfWApO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IGNlbGxSYW5nZS5zY2k7IGkgPD0gY2VsbFJhbmdlLmVjaTsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IGogPSBjZWxsUmFuZ2Uuc3JpOyBqIDw9IGNlbGxSYW5nZS5lcmk7IGorKykge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgZXJweEFycjMucHVzaCh4eTJleHByKGksIGopKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnB4QXJyMi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgW2EsIGJdID0gZXJweEFycjJbaV07XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgYTIgPSBlcnB4QXJyM1thXTtcbiAgICAgICAgICAgIC8vICAgICAgICAgbGV0IGExID0gZXJweEFycjNbYl07XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgICAgICBhcnIyLnB1c2goYCR7YTJ9OiR7YTF9YCk7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy9cblxuICAgICAgICAgICAgLy8gbGV0IHt3b3JrZXJ9ID0gdGhpcztcbiAgICAgICAgICAgIC8vIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIC8vIHdvcmtlciA9IGNyZWF0ZWQgV29ya2VyKCk7XG4gICAgICAgICAgICAvLyB3b3JrZXIucG9zdE1lc3NhZ2UoeyBhcnI6IGFyciwgYXJyMjogYXJyMiwgYXJyMzogYXJyMywgcm93czogcm93cyB9KTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyB9O1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vICAgICByb3dzLl8gPSBldmVudC5kYXRhLnJyb3dzO1xuICAgICAgICAgICAgLy8gICAgIGJlbG9uZ1NoZWV0LmVkaXRvci5kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vICAgICByb3dzLm1vdmVDaGFuZ2UoYXJyLCBhcnIyLCBhcnIzKTtcbiAgICAgICAgICAgIC8vICAgICBiZWxvbmdTaGVldC5zZWxlY3Rvck1vdmVSZXNldCgpO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICBjb25zb2xlLnRpbWUoXCJtb3ZlXCIpO1xuICAgICAgICAgICAgcm93cy5tb3ZlQ2hhbmdlKGFyciwgYXJyMiwgYXJyMyk7XG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoXCJtb3ZlXCIpO1xuXG4gICAgICAgICAgICBzaGVldC5zZWxlY3Rvck1vdmVSZXNldCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRDc3MoYikge1xuICAgICAgICB0aGlzLmFyZWFFbC5jc3MoJ2JvcmRlcicsIGAycHggZGFzaGVkICR7Yn1gKTtcbiAgICAgICAgdGhpcy5lbC5jc3MoXCJ6LWluZGV4XCIsIFwiLTFcIik7XG4gICAgfVxuXG4gICAgc2V0T2Zmc2V0KHYpIHtcbiAgICAgICAgdGhpcy5lbC5vZmZzZXQodikuc2hvdygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXRCb3hpbm5lcihwb2ludGVyKSB7XG4gICAgICAgIHRoaXMubC5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICAgICAgdGhpcy5yLmNzcyhcInBvaW50ZXItZXZlbnRzXCIsIHBvaW50ZXIpO1xuICAgICAgICB0aGlzLnQuY3NzKFwicG9pbnRlci1ldmVudHNcIiwgcG9pbnRlcik7XG4gICAgICAgIHRoaXMuYi5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcblxuICAgICAgICB0aGlzLmNvcm5lckVsLmNzcyhcInBvaW50ZXItZXZlbnRzXCIsIHBvaW50ZXIpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuZWwuaGlkZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIHNldEFyZWFPZmZzZXQodikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgIH0gPSB2O1xuICAgICAgICB0aGlzLmFyZWFFbC5vZmZzZXQoe1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoIC0gc2VsZWN0b3JIZWlnaHRCb3JkZXJXaWR0aCArIDAuOCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC0gc2VsZWN0b3JIZWlnaHRCb3JkZXJXaWR0aCArIDAuOCxcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQgLSAwLjgsXG4gICAgICAgICAgICB0b3A6IHRvcCAtIDAuOCxcbiAgICAgICAgfSkuc2hvdygpO1xuICAgIH1cblxuICAgIHNldENsaXBib2FyZE9mZnNldCh2KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgfSA9IHY7XG4gICAgICAgIHRoaXMuY2xpcGJvYXJkRWwub2Zmc2V0KHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGggLSA1LFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSA1LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG93QXV0b2ZpbGwodikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgIH0gPSB2O1xuICAgICAgICB0aGlzLmF1dG9maWxsRWwub2Zmc2V0KHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtIHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGgsXG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgdG9wLFxuICAgICAgICB9KS5zaG93KCk7XG4gICAgfVxuXG4gICAgaGlkZUF1dG9maWxsKCkge1xuICAgICAgICB0aGlzLmF1dG9maWxsRWwuaGlkZSgpO1xuICAgIH1cblxuICAgIHNob3dDbGlwYm9hcmQoKSB7XG4gICAgICAgIHRoaXMuY2xpcGJvYXJkRWwuc2hvdygpO1xuICAgIH1cblxuICAgIGhpZGVDbGlwYm9hcmQoKSB7XG4gICAgICAgIHRoaXMuY2xpcGJvYXJkRWwuaGlkZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FsQlJBcmVhT2Zmc2V0KG9mZnNldCkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgICBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIHNjcm9sbCwgbCwgdCxcbiAgICB9ID0gb2Zmc2V0O1xuICAgIGNvbnN0IGZ0d2lkdGggPSBkYXRhLmZyZWV6ZVRvdGFsV2lkdGgoKTtcbiAgICBjb25zdCBmdGhlaWdodCA9IGRhdGEuZnJlZXplVG90YWxIZWlnaHQoKTtcbiAgICBsZXQgbGVmdDAgPSBsZWZ0IC0gZnR3aWR0aDtcbiAgICBpZiAoZnR3aWR0aCA+IGwpIGxlZnQwIC09IHNjcm9sbC54O1xuICAgIGxldCB0b3AwID0gdG9wIC0gZnRoZWlnaHQ7XG4gICAgaWYgKGZ0aGVpZ2h0ID4gdCkgdG9wMCAtPSBzY3JvbGwueTtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBsZWZ0MCxcbiAgICAgICAgdG9wOiB0b3AwLFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNhbFRBcmVhT2Zmc2V0KG9mZnNldCkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgICBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBsLCB0LCBzY3JvbGwsXG4gICAgfSA9IG9mZnNldDtcbiAgICBjb25zdCBmdHdpZHRoID0gZGF0YS5mcmVlemVUb3RhbFdpZHRoKCk7XG4gICAgbGV0IGxlZnQwID0gbGVmdCAtIGZ0d2lkdGg7XG4gICAgaWYgKGZ0d2lkdGggPiBsKSBsZWZ0MCAtPSBzY3JvbGwueDtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBsZWZ0MCwgdG9wOiB0LCB3aWR0aCwgaGVpZ2h0LFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNhbExBcmVhT2Zmc2V0KG9mZnNldCkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgICB0b3AsIHdpZHRoLCBoZWlnaHQsIGwsIHQsIHNjcm9sbCxcbiAgICB9ID0gb2Zmc2V0O1xuICAgIGNvbnN0IGZ0aGVpZ2h0ID0gZGF0YS5mcmVlemVUb3RhbEhlaWdodCgpO1xuICAgIGxldCB0b3AwID0gdG9wIC0gZnRoZWlnaHQ7XG4gICAgLy8gY29uc29sZS5sb2coJ2Z0aGVpZ2h0OicsIGZ0aGVpZ2h0LCAnLCB0OicsIHQpO1xuICAgIGlmIChmdGhlaWdodCA+IHQpIHRvcDAgLT0gc2Nyb2xsLnk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogbCwgdG9wOiB0b3AwLCB3aWR0aCwgaGVpZ2h0LFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHNldEJSQXJlYU9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7YnJ9ID0gdGhpcztcbiAgICBici5zZXRBcmVhT2Zmc2V0KGNhbEJSQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xufVxuXG5mdW5jdGlvbiBzZXRUTEFyZWFPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge3RsfSA9IHRoaXM7XG4gICAgdGwuc2V0QXJlYU9mZnNldChvZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBzZXRUQXJlYU9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7dH0gPSB0aGlzO1xuICAgIHQuc2V0QXJlYU9mZnNldChjYWxUQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xufVxuXG5mdW5jdGlvbiBzZXRMQXJlYU9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7bH0gPSB0aGlzO1xuICAgIGwuc2V0QXJlYU9mZnNldChjYWxMQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xufVxuXG5mdW5jdGlvbiBzZXRMQ2xpcGJvYXJkT2Zmc2V0KG9mZnNldCkge1xuICAgIGNvbnN0IHtsfSA9IHRoaXM7XG4gICAgbC5zZXRDbGlwYm9hcmRPZmZzZXQoY2FsTEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbn1cblxuZnVuY3Rpb24gc2V0QlJDbGlwYm9hcmRPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge2JyfSA9IHRoaXM7XG4gICAgYnIuc2V0Q2xpcGJvYXJkT2Zmc2V0KGNhbEJSQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xufVxuXG5mdW5jdGlvbiBzZXRUTENsaXBib2FyZE9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7dGx9ID0gdGhpcztcbiAgICB0bC5zZXRDbGlwYm9hcmRPZmZzZXQob2Zmc2V0KTtcbn1cblxuZnVuY3Rpb24gc2V0VENsaXBib2FyZE9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7dH0gPSB0aGlzO1xuICAgIHQuc2V0Q2xpcGJvYXJkT2Zmc2V0KGNhbFRBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KSk7XG59XG5cbmZ1bmN0aW9uIHNldEFsbEFyZWFPZmZzZXQob2Zmc2V0KSB7XG4gICAgc2V0QlJBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICBzZXRUTEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgIHNldFRBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICBzZXRMQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIHNldEFsbENsaXBib2FyZE9mZnNldChvZmZzZXQpIHtcbiAgICBzZXRCUkNsaXBib2FyZE9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgc2V0VExDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgIHNldFRDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgIHNldExDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3RvciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgc2hlZXQsIHNjID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5iciA9IG5ldyBTZWxlY3RvckVsZW1lbnQoZGF0YSwgdGhpcywgc2hlZXQpO1xuICAgICAgICB0aGlzLnQgPSBuZXcgU2VsZWN0b3JFbGVtZW50KGRhdGEsIHRoaXMsIHNoZWV0KTtcbiAgICAgICAgdGhpcy5sID0gbmV3IFNlbGVjdG9yRWxlbWVudChkYXRhLCB0aGlzLCBzaGVldCk7XG4gICAgICAgIHRoaXMudGwgPSBuZXcgU2VsZWN0b3JFbGVtZW50KGRhdGEsIHRoaXMsIHNoZWV0KTtcbiAgICAgICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgICAgIC8vIHRoaXMuc2VsZWN0VCA9IGNyZWF0ZWQgU2VsZWN0b3JFbGVtZW50KGRhdGEsIHRoaXMsIGJlbG9uZ1NoZWV0KTtcbiAgICAgICAgLy8gdGhpcy5zZWxlY3RMID0gY3JlYXRlZCBTZWxlY3RvckVsZW1lbnQoZGF0YSwgdGhpcywgYmVsb25nU2hlZXQpO1xuICAgICAgICAvLyB0aGlzLnNlbGVjdFRsID0gY3JlYXRlZCBTZWxlY3RvckVsZW1lbnQoZGF0YSwgdGhpcywgYmVsb25nU2hlZXQpO1xuXG4gICAgICAgIHRoaXMuYnIuZWwuc2hvdygpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG51bGw7XG4gICAgICAgIHRoaXMuYXJlYU9mZnNldCA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5kZXhlcyA9IG51bGw7XG4gICAgICAgIHRoaXMucmFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLmFyYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yc2ApXG4gICAgICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgdGhpcy50bC5lbCxcbiAgICAgICAgICAgICAgICB0aGlzLnQuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5sLmVsLFxuICAgICAgICAgICAgICAgIHRoaXMuYnIuZWwsXG4gICAgICAgICAgICApLmhpZGUoKTtcblxuICAgICAgICBpZiAoc2MpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Q2VsbCA9IG5ldyBTZWxlY3RvckNlbGwoZGF0YSwgc2MpO1xuICAgICAgICAgICAgdGhpcy5lbC5jaGlsZCh0aGlzLnNlbGVjdENlbGwuZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RDZWxsID0gbmV3IFNlbGVjdG9yQ2VsbChkYXRhLCBzYyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHRoaXMubGFzdHJpID0gLTE7XG4gICAgICAgIHRoaXMubGFzdGNpID0gLTE7XG5cbiAgICAgICAgc3RhcnRaSW5kZXggKz0gMTtcbiAgICB9XG5cblxuICAgIGxvbmdUaW1lQmVmb3JlKCkge1xuICAgICAgICB0aGlzLnRsLmxvbmdUaW1lQmVmb3JlKCk7XG4gICAgICAgIHRoaXMuYnIubG9uZ1RpbWVCZWZvcmUoKTtcbiAgICAgICAgdGhpcy50LmxvbmdUaW1lQmVmb3JlKCk7XG4gICAgICAgIHRoaXMubC5sb25nVGltZUJlZm9yZSgpO1xuICAgIH1cblxuICAgIHNldENzcyhiKSB7XG4gICAgICAgIHRoaXMuYnIuc2V0Q3NzKGIpO1xuICAgICAgICB0aGlzLnQuc2V0Q3NzKGIpO1xuICAgICAgICB0aGlzLmwuc2V0Q3NzKGIpO1xuICAgICAgICB0aGlzLnRsLnNldENzcyhiKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmVsLmhpZGUoKTtcbiAgICB9XG5cbiAgICByZXNldE9mZnNldCgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZGF0YSwgdGwsIHQsIGwsIGJyLFxuICAgICAgICB9ID0gdGhpcztcblxuICAgICAgICB0aGlzLnNlbGVjdENlbGwucmVzZXRTZWxlY3RPZmZzZXQoKTtcblxuICAgICAgICBjb25zdCBmcmVlemVIZWlnaHQgPSBkYXRhLmZyZWV6ZVRvdGFsSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IGZyZWV6ZVdpZHRoID0gZGF0YS5mcmVlemVUb3RhbFdpZHRoKCk7XG4gICAgICAgIGlmIChmcmVlemVIZWlnaHQgPiAwIHx8IGZyZWV6ZVdpZHRoID4gMCkge1xuICAgICAgICAgICAgdGwuc2V0T2Zmc2V0KHt3aWR0aDogZnJlZXplV2lkdGgsIGhlaWdodDogZnJlZXplSGVpZ2h0fSk7XG4gICAgICAgICAgICB0LnNldE9mZnNldCh7bGVmdDogZnJlZXplV2lkdGgsIGhlaWdodDogZnJlZXplSGVpZ2h0fSk7XG4gICAgICAgICAgICBsLnNldE9mZnNldCh7dG9wOiBmcmVlemVIZWlnaHQsIHdpZHRoOiBmcmVlemVXaWR0aH0pO1xuICAgICAgICAgICAgYnIuc2V0T2Zmc2V0KHtsZWZ0OiBmcmVlemVXaWR0aCwgdG9wOiBmcmVlemVIZWlnaHR9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRsLmhpZGUoKTtcbiAgICAgICAgICAgIHQuaGlkZSgpO1xuICAgICAgICAgICAgbC5oaWRlKCk7XG4gICAgICAgICAgICBici5zZXRPZmZzZXQoe2xlZnQ6IDAsIHRvcDogMH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXRBcmVhT2Zmc2V0KCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnb2Zmc2V0OicsIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZGF0YS5nZXRTZWxlY3RlZFJlY3QoKTtcbiAgICAgICAgY29uc3QgY29mZnNldCA9IHRoaXMuZGF0YS5nZXRDbGlwYm9hcmRSZWN0KCk7XG4gICAgICAgIHNldEFsbEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgICAgICBzZXRBbGxDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcblxuICAgICAgICB0aGlzLnJlc2V0T2Zmc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXRCUlRBcmVhT2Zmc2V0KCkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0U2VsZWN0ZWRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGNvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0Q2xpcGJvYXJkUmVjdCgpO1xuICAgICAgICBzZXRCUkFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgICAgICBzZXRUQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgICAgIHNldEJSQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgY29mZnNldCk7XG4gICAgICAgIHNldFRDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcblxuXG4gICAgICAgIHRoaXMucmVzZXRPZmZzZXQoKTtcbiAgICB9XG5cbiAgICByZXNldEJSTEFyZWFPZmZzZXQoKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZGF0YS5nZXRTZWxlY3RlZFJlY3QoKTtcbiAgICAgICAgY29uc3QgY29mZnNldCA9IHRoaXMuZGF0YS5nZXRDbGlwYm9hcmRSZWN0KCk7XG4gICAgICAgIHNldEJSQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgICAgIHNldExBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICAgICAgc2V0QlJDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcbiAgICAgICAgc2V0TENsaXBib2FyZE9mZnNldC5jYWxsKHRoaXMsIGNvZmZzZXQpO1xuXG4gICAgICAgIHRoaXMucmVzZXRPZmZzZXQoKTtcbiAgICB9XG5cbiAgICByZXNldFNlbGVjdG9yQlJMQXJlYU9mZnNldChyYW5nZSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0TW92ZVJlY3QocmFuZ2UpO1xuICAgICAgICBjb25zdCBjb2Zmc2V0ID0gdGhpcy5kYXRhLmdldENsaXBib2FyZFJlY3QoKTtcbiAgICAgICAgc2V0QlJBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICAgICAgc2V0TEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgICAgICBzZXRCUkNsaXBib2FyZE9mZnNldC5jYWxsKHRoaXMsIGNvZmZzZXQpO1xuICAgICAgICBzZXRMQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgY29mZnNldCk7XG5cbiAgICAgICAgdGhpcy5yZXNldE9mZnNldCgpO1xuICAgIH1cblxuICAgIHNldChyaSwgY2ksIGluZGV4ZXNVcGRhdGVkID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuXG4gICAgICAgIGNvbnN0IGNlbGxSYW5nZSA9IGRhdGEuY2FsU2VsZWN0ZWRSYW5nZUJ5U3RhcnQocmksIGNpKTtcbiAgICAgICAgY29uc3Qge3NyaSwgc2NpfSA9IGNlbGxSYW5nZTtcbiAgICAgICAgaWYgKGluZGV4ZXNVcGRhdGVkKSB7XG4gICAgICAgICAgICBsZXQgW2NyaSwgY2NpXSA9IFtyaSwgY2ldO1xuICAgICAgICAgICAgaWYgKHJpIDwgMCkgY3JpID0gMDtcbiAgICAgICAgICAgIGlmIChjaSA8IDApIGNjaSA9IDA7XG4gICAgICAgICAgICBkYXRhLnNlbGVjdG9yLnNldEluZGV4ZXMoY3JpLCBjY2kpO1xuICAgICAgICAgICAgdGhpcy5pbmRleGVzID0gW2NyaSwgY2NpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW92ZUluZGV4ZXMgPSBbc3JpLCBzY2ldO1xuICAgICAgICAvLyB0aGlzLnNJbmRleGVzID0gc0luZGV4ZXM7XG4gICAgICAgIC8vIHRoaXMuZUluZGV4ZXMgPSBlSW5kZXhlcztcbiAgICAgICAgdGhpcy5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgLy8gdGhpcy5yZXNldFNlbGVjdE9mZnNldChjZWxsUmFuZ2UpO1xuXG4gICAgICAgIHRoaXMucmVzZXRBcmVhT2Zmc2V0KCk7XG4gICAgICAgIHRoaXMuZWwuc2hvdygpO1xuICAgIH1cblxuICAgIGF1dG9GaWx0ZXJSZWYoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucmFuZ2UpO1xuICAgIH1cblxuICAgIHNldEVuZChyaSwgY2ksIG1vdmluZyA9IHRydWUsIGVudGVyID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qge2RhdGEgfSA9IHRoaXM7XG4gICAgICAgIGlmIChtb3ZpbmcpIHtcbiAgICAgICAgICAgIC8vIGlmIChyaSA9PT0gbGFzdHJpICYmIGNpID09PSBsYXN0Y2kpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMubGFzdHJpID0gcmk7XG4gICAgICAgICAgICB0aGlzLmxhc3RjaSA9IGNpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmFuZ2UgPSBkYXRhLmNhbFNlbGVjdGVkUmFuZ2VCeUVuZChyaSwgY2kpO1xuXG4gICAgICAgIHNldEFsbEFyZWFPZmZzZXQuY2FsbCh0aGlzLCB0aGlzLmRhdGEuZ2V0U2VsZWN0ZWRSZWN0KCkpO1xuICAgIH1cblxuICAgIHNldEJveGlubmVyKHBvaW50ZXIpIHtcbiAgICAgICAgdGhpcy5ici5zZXRCb3hpbm5lcihwb2ludGVyKTtcbiAgICAgICAgdGhpcy50LnNldEJveGlubmVyKHBvaW50ZXIpO1xuICAgICAgICB0aGlzLmwuc2V0Qm94aW5uZXIocG9pbnRlcik7XG4gICAgICAgIHRoaXMudGwuc2V0Qm94aW5uZXIocG9pbnRlcik7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCc6Ojo6JywgdGhpcy5kYXRhKTtcbiAgICAgICAgY29uc3Qge2VyaSwgZWNpLCBzY2ksIHNyaX0gPSB0aGlzLmRhdGEuc2VsZWN0b3IucmFuZ2U7XG4gICAgICAgIC8vIOWOn+WboOaYryDku47lj7PkuIvop5LlvoDlt6bkuIrop5LpgInkuK3vvIznhLblkI5jdHJsICsgYyDkvJrmnIlidWcgIOWKoOS4i+mdouS4gOihjOeahOWOn+WboFxuICAgICAgICB0aGlzLnNldChzcmksIHNjaSk7XG5cbiAgICAgICAgdGhpcy5zZXRFbmQoZXJpLCBlY2ksIHRydWUsIHRydWUpO1xuICAgIH1cblxuICAgIHNldE1vdmUocmVjdCkge1xuICAgICAgICBzZXRBbGxBcmVhT2Zmc2V0LmNhbGwodGhpcywgcmVjdCk7XG4gICAgfVxuXG4gICAgLy9cbiAgICBzaG93QXV0b2ZpbGwocmksIGNpLCBwb3MpIHtcbiAgICAgICAgaWYgKHJpID09PSAtMSAmJiBjaSA9PT0gLTEpIHJldHVybjtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JpOicsIHJpLCAnLCBjaTonLCBjaSk7XG4gICAgICAgIC8vIGNvbnN0IFtzcmksIHNjaV0gPSB0aGlzLnNJbmRleGVzO1xuICAgICAgICAvLyBjb25zdCBbZXJpLCBlY2ldID0gdGhpcy5lSW5kZXhlcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgICAgICB9ID0gdGhpcy5yYW5nZTtcblxuICAgICAgICAvLyBwb3MgPT0gMSDlvoDkuIvvvIxwb3MgPT0gMyDlvoDlj7PvvIwgcG9zID09IDIg5b6A5bem77yMIHBvcyA9PSA0IOW+gOS4ilxuICAgICAgICBsZXQgZHJpc2MgPSAwO1xuICAgICAgICBjb25zdCBbbnJpLCBuY2ldID0gW3JpLCBjaV07XG4gICAgICAgIC8vIGNvbnN0IHJuID0gZXJpIC0gc3JpO1xuICAgICAgICAvLyBjb25zdCBjbiA9IGVjaSAtIHNjaTtcbiAgICAgICAgLy8gY29uc3Qgc3JuID0gc3JpIC0gcmk7XG4gICAgICAgIC8vIGNvbnN0IHNjbiA9IHNjaSAtIGNpO1xuICAgICAgICAvLyBjb25zdCBlcm4gPSBlcmkgLSByaTtcbiAgICAgICAgLy8gY29uc3QgZWNuID0gZWNpIC0gY2k7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNybiwgc2NuLCBlcm4sIGVjbiwgcmksIGNpKTtcbiAgICAgICAgaWYgKHBvcyA9PT0gMikge1xuICAgICAgICAgICAgZHJpc2MgPSAxMTtcbiAgICAgICAgICAgIC8vIGxlZnRcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWZ0Jyk7XG4gICAgICAgICAgICB0aGlzLmFyYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBuY2ksIGVyaSwgc2NpIC0gMSk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmFyYW5nZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNhSW5kZXhlcyA9IFtzcmksIG5jaV07XG4gICAgICAgICAgICAvLyB0aGlzLmVhSW5kZXhlcyA9IFtlcmksIHNjaSAtIDFdO1xuICAgICAgICAgICAgLy8gZGF0YS5jYWxSYW5nZUluZGV4ZXMyKFxuICAgICAgICB9IGVsc2UgaWYgKHBvcyA9PT0gNCkge1xuICAgICAgICAgICAgZHJpc2MgPSAyMjtcblxuICAgICAgICAgICAgLy8gdG9wXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndG9wJyk7XG4gICAgICAgICAgICAvLyBucmkgPSBzcmk7XG4gICAgICAgICAgICB0aGlzLmFyYW5nZSA9IG5ldyBDZWxsUmFuZ2UobnJpLCBzY2ksIHNyaSAtIDEsIGVjaSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNhSW5kZXhlcyA9IFtucmksIHNjaV07XG4gICAgICAgICAgICAvLyB0aGlzLmVhSW5kZXhlcyA9IFtzcmkgLSAxLCBlY2ldO1xuICAgICAgICB9IGVsc2UgaWYgKHBvcyA9PT0gMykge1xuICAgICAgICAgICAgZHJpc2MgPSAzMztcbiAgICAgICAgICAgIC8vIHJpZ2h0XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmlnaHQnKTtcbiAgICAgICAgICAgIC8vIG5jaSA9IGVjaTtcbiAgICAgICAgICAgIHRoaXMuYXJhbmdlID0gbmV3IENlbGxSYW5nZShzcmksIGVjaSArIDEsIGVyaSwgbmNpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2FJbmRleGVzID0gW3NyaSwgZWNpICsgMV07XG4gICAgICAgICAgICAvLyB0aGlzLmVhSW5kZXhlcyA9IFtlcmksIG5jaV07XG4gICAgICAgIH0gZWxzZSBpZiAocG9zID09PSAxKSB7XG4gICAgICAgICAgICBkcmlzYyA9IDQ0O1xuICAgICAgICAgICAgLy8gYm90dG9tXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYm90dG9tJyk7XG4gICAgICAgICAgICAvLyBucmkgPSBlcmk7XG4gICAgICAgICAgICB0aGlzLmFyYW5nZSA9IG5ldyBDZWxsUmFuZ2UoZXJpICsgMSwgc2NpLCBucmksIGVjaSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNhSW5kZXhlcyA9IFtlcmkgKyAxLCBzY2ldO1xuICAgICAgICAgICAgLy8gdGhpcy5lYUluZGV4ZXMgPSBbbnJpLCBlY2ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2Vsc2U6Jyk7XG4gICAgICAgICAgICB0aGlzLmFyYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAvLyB0aGlzLnNhSW5kZXhlcyA9IG51bGw7XG4gICAgICAgICAgICAvLyB0aGlzLmVhSW5kZXhlcyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZHJpc2M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXJhbmdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnNhSW5kZXhlcywgJzonLCB0aGlzLmVhSW5kZXhlcyk7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0UmVjdCh0aGlzLmFyYW5nZSk7XG4gICAgICAgICAgICBvZmZzZXQud2lkdGggKz0gMjtcbiAgICAgICAgICAgIG9mZnNldC5oZWlnaHQgKz0gMjtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBiciwgbCwgdCwgdGwsXG4gICAgICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgICAgIGJyLnNob3dBdXRvZmlsbChjYWxCUkFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbiAgICAgICAgICAgIGwuc2hvd0F1dG9maWxsKGNhbExBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KSk7XG4gICAgICAgICAgICB0LnNob3dBdXRvZmlsbChjYWxUQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xuICAgICAgICAgICAgdGwuc2hvd0F1dG9maWxsKG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRyaXNjO1xuICAgIH1cblxuICAgIGhpZGVBdXRvZmlsbCgpIHtcbiAgICAgICAgWydicicsICdsJywgJ3QnLCAndGwnXS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgICAgdGhpc1twcm9wZXJ0eV0uaGlkZUF1dG9maWxsKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNob3dDbGlwYm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IGNvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0Q2xpcGJvYXJkUmVjdCgpO1xuICAgICAgICBzZXRBbGxDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcbiAgICAgICAgWydicicsICdsJywgJ3QnLCAndGwnXS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgICAgdGhpc1twcm9wZXJ0eV0uc2hvd0NsaXBib2FyZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIGhpZGVDbGlwYm9hcmQoKSB7XG4gICAgICAgIFsnYnInLCAnbCcsICd0JywgJ3RsJ10uZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgIHRoaXNbcHJvcGVydHldLmhpZGVDbGlwYm9hcmQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHtiaW5kLCBiaW5kQ2xpY2tvdXRzaWRlLCBjcmVhdGVFdmVudCwgdW5iaW5kQ2xpY2tvdXRzaWRlfSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7Y3NzUHJlZml4fSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IENlbGxSYW5nZSBmcm9tIFwiLi4vY29yZS9jZWxsX3JhbmdlXCI7XG5cbmZ1bmN0aW9uIGlucHV0TW92ZVByZXYoZXZ0KSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IHtmaWx0ZXJJdGVtc30gPSB0aGlzO1xuICAgIGlmIChmaWx0ZXJJdGVtcy5sZW5ndGggPD0gMCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLml0ZW1JbmRleCA+PSAwKSBmaWx0ZXJJdGVtc1t0aGlzLml0ZW1JbmRleF0udG9nZ2xlKCk7XG4gICAgdGhpcy5pdGVtSW5kZXggLT0gMTtcbiAgICBpZiAodGhpcy5pdGVtSW5kZXggPCAwKSB7XG4gICAgICAgIHRoaXMuaXRlbUluZGV4ID0gZmlsdGVySXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgdGhpcy5lbC5lbC5zY3JvbGxUb3AgPSB0aGlzLmVsLmVsLnNjcm9sbEhlaWdodDtcbiAgICB9XG4gICAgdGhpcy5lbC5lbC5zY3JvbGxUb3AgPSAodGhpcy5pdGVtSW5kZXggLSA5KSAqIDMzO1xuXG4gICAgZmlsdGVySXRlbXNbdGhpcy5pdGVtSW5kZXhdLnRvZ2dsZSgpO1xufVxuXG5mdW5jdGlvbiBpbnB1dE1vdmVOZXh0KGV2dCkge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zdCB7ZmlsdGVySXRlbXN9ID0gdGhpcztcbiAgICBpZiAoZmlsdGVySXRlbXMubGVuZ3RoIDw9IDAgfHwgZmlsdGVySXRlbXMubGVuZ3RoIDwgdGhpcy5pdGVtSW5kZXgpIHJldHVybjtcbiAgICBpZiAodGhpcy5pdGVtSW5kZXggPj0gMCkgZmlsdGVySXRlbXNbdGhpcy5pdGVtSW5kZXhdLnRvZ2dsZSgpO1xuICAgIHRoaXMuaXRlbUluZGV4ICs9IDE7XG4gICAgaWYgKHRoaXMuaXRlbUluZGV4ID4gZmlsdGVySXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLml0ZW1JbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZWwuZWwuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gICAgdGhpcy5lbC5lbC5zY3JvbGxUb3AgPSAodGhpcy5pdGVtSW5kZXggLSA5KSAqIDMzO1xuICAgIGNvbnNvbGUubG9nKGZpbHRlckl0ZW1zLmxlbmd0aCk7XG4gICAgZmlsdGVySXRlbXNbdGhpcy5pdGVtSW5kZXhdLnRvZ2dsZSgpO1xufVxuXG5mdW5jdGlvbiBpbnB1dEVudGVyKGV2dCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHtmaWx0ZXJJdGVtc30gPSB0aGlzO1xuICAgIGlmIChmaWx0ZXJJdGVtcy5sZW5ndGggPD0gMCkgcmV0dXJuO1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5pdGVtSW5kZXggPCAwKSB7XG4gICAgICAgIHRoaXMuaXRlbUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgY3JlYXRlRXZlbnQuY2FsbCh0aGlzLCAxMywgZmFsc2UpO1xuXG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGZpbHRlckl0ZW1zW3RoaXMuaXRlbUluZGV4XS5lbC5jbGljaygpO1xuICAgIHRoaXMuaGlkZSgpO1xufVxuXG5mdW5jdGlvbiBpbnB1dEtleWRvd25IYW5kbGVyKGV2dCkge1xuICAgIGNvbnN0IHtrZXlDb2RlfSA9IGV2dDtcbiAgICBpZiAoZXZ0LmN0cmxLZXkpIHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzg6IC8vIHVwXG4gICAgICAgICAgICBpbnB1dE1vdmVQcmV2LmNhbGwodGhpcywgZXZ0KTtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM5OiAvLyByaWdodFxuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDA6IC8vIGRvd25cbiAgICAgICAgICAgIGlucHV0TW92ZU5leHQuY2FsbCh0aGlzLCBldnQpO1xuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTM6IC8vIGVudGVyXG4gICAgICAgICAgICBpbnB1dEVudGVyLmNhbGwodGhpcywgZXZ0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBpbnB1dEVudGVyLmNhbGwodGhpcywgZXZ0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdWdnZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihpdGVtcywgaXRlbUNsaWNrLCBkYXRhLCBlZGl0b3IsIHdpZHRoID0gJzIwMHB4Jykge1xuICAgICAgICB0aGlzLmZpbHRlckl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXN1Z2dlc3RgKVxuICAgICAgICAgICAgLmNzcygnd2lkdGgnLCB3aWR0aClcbiAgICAgICAgICAgIC5jc3MoJ292ZXJmbG93LXknLCAnYXV0bycpXG4gICAgICAgICAgICAuY3NzKCdtYXgtaGVpZ2h0JywgJzMwNnB4JykuaGlkZSgpO1xuICAgICAgICB0aGlzLmVsLmF0dHIoJ3RhYmluZGV4JywgMCk7XG5cblxuICAgICAgICB0aGlzLml0ZW1DbGljayA9IGl0ZW1DbGljaztcbiAgICAgICAgdGhpcy5pdGVtSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5zaG93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0T2Zmc2V0KHYpIHtcbiAgICAgICAgdGhpcy5lbC5jc3NSZW1vdmVLZXlzKCd0b3AnLCAnYm90dG9tJylcbiAgICAgICAgICAgIC5vZmZzZXQodik7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgY29uc3Qge2VsfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuZmlsdGVySXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5pdGVtSW5kZXggPSAtMTtcbiAgICAgICAgZWwuaGlkZSgpO1xuICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgdW5iaW5kQ2xpY2tvdXRzaWRlKHRoaXMuZWwucGFyZW50KCkpO1xuICAgIH1cblxuICAgIHNldEl0ZW1zKGl0ZW1zKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgLy8gdGhpcy5zZWFyY2goJycpO1xuICAgIH1cblxuICAgIHNlYXJjaCh3b3JkKSB7XG4gICAgICAgIGxldCB7aXRlbXMsIGRhdGEsIGVkaXRvcn0gPSB0aGlzO1xuICAgICAgICBpZiAoIS9eXFxzKiQvLnRlc3Qod29yZCkpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuZmlsdGVyKGl0ID0+IChpdC5rZXkudG9VcHBlckNhc2UoKSB8fCBpdC50b1VwcGVyQ2FzZSgpKS5zdGFydHNXaXRoKHdvcmQudG9VcHBlckNhc2UoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zID0gaXRlbXMubWFwKChpdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHt0aXRsZX0gPSBpdDtcbiAgICAgICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGl0bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSB0aXRsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0bGUgPSBpdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW1gKVxuICAgICAgICAgICAgICAgIC5jaGlsZCh0aXRsZSlcbiAgICAgICAgICAgICAgICAub24oJ2NsaWNrLnN0b3AnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbUNsaWNrKGl0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChpdC5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGQoaCgnZGl2JywgJ2xhYmVsJykuaHRtbChpdC5sYWJlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpbHRlckl0ZW1zID0gaXRlbXM7XG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7ZWx9ID0gdGhpcztcbiAgICAgICAgLy8gaXRlbXNbMF0udG9nZ2xlKCk7XG4gICAgICAgIGxldCByZWN0ID0gZGF0YS5nZXRSZWN0KG5ldyBDZWxsUmFuZ2UoZWRpdG9yLnJpLCBlZGl0b3IuY2ksIGVkaXRvci5yaSwgZWRpdG9yLmNpKSk7XG4gICAgICAgIGxldCBsZWZ0ID0gcmVjdC5sZWZ0ICsgNTU7XG4gICAgICAgIGxldCB0b3AgPSByZWN0LnRvcCArIDUwO1xuXG4gICAgICAgIGlmKCBpdGVtcy5sZW5ndGggPj0gOSAmJiByZWN0LnRvcCAtIDMwNiA+PSA1MCkge1xuICAgICAgICAgICAgdG9wIC09IDMwNjtcbiAgICAgICAgICAgIHRvcCAtPSByZWN0LmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbC5jc3MoJ2xlZnQnLCBgJHtsZWZ0fXB4YCk7XG4gICAgICAgIGVsLmNzcygndG9wJywgYCR7dG9wfXB4YCk7XG5cbiAgICAgICAgZWwuaHRtbCgnJykuY2hpbGRyZW4oLi4uaXRlbXMpLnNob3coKTtcbiAgICAgICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICAgICAgYmluZENsaWNrb3V0c2lkZShlbC5wYXJlbnQoKSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmluZElucHV0RXZlbnRzKGlucHV0KSB7XG4gICAgICAgIGlucHV0Lm9uKCdrZXlkb3duJywgZXZ0ID0+IGlucHV0S2V5ZG93bkhhbmRsZXIuY2FsbCh0aGlzLCBldnQpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2h9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgdGhlbWVDb2xvclBsYWNlSG9sZGVycyA9IFsnI2ZmZmZmZicsICcjMDAwMTAwJywgJyNlN2U1ZTYnLCAnIzQ0NTU2OScsICcjNWI5Y2Q2JywgJyNlZDdkMzEnLCAnI2E1YTVhNScsICcjZmZjMDAxJywgJyM0MzcxYzYnLCAnIzcxYWU0NyddO1xuXG5jb25zdCB0aGVtZUNvbG9ycyA9IFtcbiAgICBbJyNmMmYyZjInLCAnIzdmN2Y3ZicsICcjZDBjZWNmJywgJyNkNWRjZTQnLCAnI2RlZWFmNicsICcjZmNlNWQ1JywgJyNlZGVkZWQnLCAnI2ZmZjJjZCcsICcjZDllMmYzJywgJyNlM2VmZDknXSxcbiAgICBbJyNkOGQ4ZDgnLCAnIzU5NTk1OScsICcjYWZhYmFjJywgJyNhZGI4Y2EnLCAnI2JkZDdlZScsICcjZjdjY2FjJywgJyNkYmRiZGInLCAnI2ZmZTU5YScsICcjYjNjNmU3JywgJyNjNWUwYjMnXSxcbiAgICBbJyNiZmJmYmYnLCAnIzNmM2YzZicsICcjNzU2ZjZmJywgJyM4NTk2YjAnLCAnIzljYzJlNicsICcjZjRiMTg0JywgJyNjOWM5YzknLCAnI2ZlZDk2NCcsICcjOGVhYWRhJywgJyNhN2QwOGMnXSxcbiAgICBbJyNhNWE1YTUnLCAnIzI2MjYyNicsICcjM2EzODM5JywgJyMzMzNmNGYnLCAnIzJlNzViNScsICcjYzQ1YTEwJywgJyM3YjdiN2InLCAnI2JmOGUwMScsICcjMmY1NTk2JywgJyM1MzgxMzYnXSxcbiAgICBbJyM3ZjdmN2YnLCAnIzBjMGMwYycsICcjMTcxNTE2JywgJyMyMjJhMzUnLCAnIzFmNGU3YScsICcjODQzYzBhJywgJyM1MjUyNTInLCAnIzdlNjAwMCcsICcjMjAzODY0JywgJyMzNjU2MjQnXSxcbl07XG5cbmNvbnN0IHNlbGVjdENvbG9ycyA9IFtcIiNFRTAwMDBcIiwgXCIjOEEyQkUyXCIsIFwiI0ZGM0U5NlwiLCBcIiM4QjQ1MDBcIiwgXCIjM0E1RkNEXCIsIFwiI0ZGN0YyNFwiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdG9yQ29sb3IoaW5kZXgpIHtcbiAgICBpbmRleCA9IGluZGV4ICUgc2VsZWN0Q29sb3JzLmxlbmd0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb2xvcjogc2VsZWN0Q29sb3JzW2luZGV4XSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgIH07XG59XG5cbmNvbnN0IHN0YW5kYXJkQ29sb3JzID0gWycjYzAwMDAwJywgJyNmZTAwMDAnLCAnI2ZkYzEwMScsICcjZmZmZjAxJywgJyM5M2QwNTEnLCAnIzAwYjA0ZScsICcjMDFiMGYxJywgJyMwMTcwYzEnLCAnIzAxMjA2MCcsICcjNzAzMGEwJ107XG5cbmZ1bmN0aW9uIGJ1aWxkVGQoYmdjb2xvcikge1xuICAgIGxldCBpdGVtID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1jb2xvci1wYWxldHRlLWNlbGxgKVxuICAgICAgICAub24oJ2NsaWNrLnN0b3AnLCAoKSA9PiB0aGlzLmNoYW5nZShiZ2NvbG9yKSlcbiAgICAgICAgLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGJnY29sb3IpO1xuXG4gICAgdGhpcy5pdGVtcy5wdXNoKFxuICAgICAgICBpdGVtXG4gICAgKTtcbiAgICByZXR1cm4gaCgndGQnLCAnJykuY2hpbGQoaXRlbSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9yUGFsZXR0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWNvbG9yLXBhbGV0dGVgKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBoKCd0YWJsZScsICcnKS5jaGlsZHJlbihcbiAgICAgICAgICAgIGgoJ3Rib2R5JywgJycpLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgIGgoJ3RyJywgYCR7Y3NzUHJlZml4fS10aGVtZS1jb2xvci1wbGFjZWhvbGRlcnNgKS5jaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgLi4udGhlbWVDb2xvclBsYWNlSG9sZGVycy5tYXAoY29sb3IgPT4gYnVpbGRUZC5jYWxsKHRoaXMsIGNvbG9yKSksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAuLi50aGVtZUNvbG9ycy5tYXAoaXQgPT4gaCgndHInLCBgJHtjc3NQcmVmaXh9LXRoZW1lLWNvbG9yc2ApLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAuLi5pdC5tYXAoY29sb3IgPT4gYnVpbGRUZC5jYWxsKHRoaXMsIGNvbG9yKSksXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgaCgndHInLCBgJHtjc3NQcmVmaXh9LXN0YW5kYXJkLWNvbG9yc2ApLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAuLi5zdGFuZGFyZENvbG9ycy5tYXAoY29sb3IgPT4gYnVpbGRUZC5jYWxsKHRoaXMsIGNvbG9yKSksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZWwuY2hpbGQodGFibGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZURlZmF1bHRGbkNvbGxlY3Rpb24gfSBmcm9tICcuLi9jYWxjX2RhdGFfcHJveHkvY2FsY193b3JrYm9vayc7XG5cbmxldCBkZWZhdWx0Rm5Db2xsID0gY3JlYXRlRGVmYXVsdEZuQ29sbGVjdGlvbigpO1xuZXhwb3J0IGNvbnN0IGFsbEZuT2JqID0gZGVmYXVsdEZuQ29sbC5nZXRBbGxGbk9iaigpIC8vIHsgYWJzOiAuLi59IC0+IFt7a2V5OiBcImFic1wifSwge31dXG5leHBvcnQgY29uc3QgZW1wdHlXb3JrYm9vayA9IHtzaGVldHM6IHtzaGVldDE6IHtBMToge319fX1cbmV4cG9ydCBjb25zdCBmbk5hbWVBcnJheVdpdGhLZXkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhbGxGbk9iaikubWFwKGYgPT4ge3JldHVybiB7a2V5OiBmLCB0aXRsZTogZn19KSAvLyDlhazlvI/or7TmmI5cbiIsIi8qIGdsb2JhbCBkZXNjcmliZSwgaXQgKi9cbmltcG9ydCBEcm9wZG93biBmcm9tICcuL2Ryb3Bkb3duJztcbmltcG9ydCBJY29uIGZyb20gJy4vaWNvbic7XG5pbXBvcnQgQ29sb3JQYWxldHRlIGZyb20gJy4vY29sb3JfcGFsZXR0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyb3Bkb3duQ29sb3IgZXh0ZW5kcyBEcm9wZG93biB7XG4gIGNvbnN0cnVjdG9yKGljb25OYW1lLCBjb2xvcikge1xuICAgIGNvbnN0IGljb24gPSBuZXcgSWNvbihpY29uTmFtZSlcbiAgICAgIC5jc3MoJ2hlaWdodCcsICcxNnB4JylcbiAgICAgIC5jc3MoJ2JvcmRlci1ib3R0b20nLCBgM3B4IHNvbGlkICR7Y29sb3J9YCk7XG4gICAgY29uc3QgY29sb3JQYWxldHRlID0gbmV3IENvbG9yUGFsZXR0ZSgpO1xuICAgIGNvbG9yUGFsZXR0ZS5jaGFuZ2UgPSAodikgPT4ge1xuICAgICAgdGhpcy5zZXRUaXRsZSh2KTtcbiAgICAgIHRoaXMuY2hhbmdlKHYpO1xuICAgIH07XG4gICAgc3VwZXIoaWNvbiwgJ2F1dG8nLCBmYWxzZSwgJ2JvdHRvbS1sZWZ0Jywge3R5cGU6IGZhbHNlfSwgY29sb3JQYWxldHRlLmVsKTtcbiAgICB0aGlzLmNvbG9yUGFsZXR0ZSA9IGNvbG9yUGFsZXR0ZTsgIC8vIOa1i+ivleeUqOS+i+acieeUqOWIsFxuICB9XG5cbiAgc2V0VGl0bGUoY29sb3IpIHtcbiAgICB0aGlzLnRpdGxlLmNzcygnYm9yZGVyLWNvbG9yJywgY29sb3IpO1xuICAgIHRoaXMuaGlkZSgpO1xuICB9XG59XG4iLCIvKiBnbG9iYWwgZG9jdW1lbnQgKi9cbi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi9pY29uJztcbmltcG9ydCB7IGNzc1ByZWZpeCB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBiaW5kLCB1bmJpbmQgfSBmcm9tICcuL2V2ZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwge1xuICBjb25zdHJ1Y3Rvcih0aXRsZSwgY29udGVudCwgd2lkdGggPSAnNjAwcHgnKSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LW1vZGFsYCkuY3NzKCd3aWR0aCcsIHdpZHRoKS5jaGlsZHJlbihcbiAgICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tbW9kYWwtaGVhZGVyYCkuY2hpbGRyZW4oXG4gICAgICAgIG5ldyBJY29uKCdjbG9zZScpLm9uKCdjbGljay5zdG9wJywgKCkgPT4gdGhpcy5oaWRlKCkpLFxuICAgICAgICB0aGlzLnRpdGxlLFxuICAgICAgKSxcbiAgICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tbW9kYWwtY29udGVudGApLmNoaWxkcmVuKC4uLmNvbnRlbnQpLFxuICAgICkuaGlkZSgpO1xuICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gIH1cblxuICBzaG93KCkge1xuICAgIC8vIGRpbW1lclxuICAgIHRoaXMuZGltbWVyID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1kaW1tZXIgYWN0aXZlYCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmRpbW1lci5lbCk7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmVsLnNob3coKS5ib3goKTtcbiAgICBjb25zdCB7IGNsaWVudEhlaWdodCwgY2xpZW50V2lkdGggfSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB0aGlzLmVsLm9mZnNldCh7XG4gICAgICBsZWZ0OiAoY2xpZW50V2lkdGggLSB3aWR0aCkgLyAyLFxuICAgICAgdG9wOiAoY2xpZW50SGVpZ2h0IC0gaGVpZ2h0KSAvIDMsXG4gICAgfSk7XG4gICAgd2luZG93LnhrZXlkb3duRXNjID0gKGV2dCkgPT4ge1xuICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAyNykge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgIGJpbmQod2luZG93LCAna2V5ZG93bicsIHdpbmRvdy54a2V5ZG93bkVzYyk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuZWwuaGlkZSgpO1xuICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZGltbWVyLmVsKTtcbiAgICB1bmJpbmQod2luZG93LCAna2V5ZG93bicsIHdpbmRvdy54a2V5ZG93bkVzYyk7XG4gICAgZGVsZXRlIHdpbmRvdy54a2V5ZG93bkVzYztcbiAgfVxufVxuIiwiaW1wb3J0IHtofSBmcm9tIFwiLi4vY29tcG9uZW50L2VsZW1lbnRcIjtcbmltcG9ydCB7Y3V0U3RyfSBmcm9tIFwiLi4vY29yZS9vcGVyYXRvclwiO1xuXG5mdW5jdGlvbiBtb3VudENvcHkoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBjaG9vc2UgPSBnZXRDaG9vc2VJbWcuY2FsbCh0aGlzKTtcbiAgICBpZiAoY2hvb3NlKSB7XG4gICAgICAgIGlmIChldmVudC5jbGlwYm9hcmREYXRhKSB7XG4gICAgICAgICAgICBldmVudC5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L2h0bWxcIiwgcGFyc2VEb20oY2hvb3NlLmltZzIpKTtcbiAgICAgICAgICAgIGV2ZW50LmNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHQvcGxhaW5cIiwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhcmdzID0gc2hlZXRDb3B5LmNhbGwodGhpcyk7XG4gICAgaWYgKGV2ZW50LmNsaXBib2FyZERhdGEpIHtcbiAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dC9odG1sXCIsIHBhcnNlRG9tKGFyZ3MuaHRtbC5lbCkpO1xuICAgICAgICBldmVudC5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIGFyZ3MucGxhaW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q2hvb3NlSW1nKCkge1xuICAgIGxldCB7cGFzdGVEaXJlY3Rpb25zQXJyfSA9IHRoaXMuZGF0YTtcblxuICAgIHRoaXMuZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgaWYgKHBhc3RlRGlyZWN0aW9uc0Fyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFzdGVEaXJlY3Rpb25zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocGFzdGVEaXJlY3Rpb25zQXJyW2ldLnN0YXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKCdwb2ludGVyLWV2ZW50cycsICdhdXRvJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhc3RlRGlyZWN0aW9uc0FycltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2hlZXRDb3B5KCkge1xuICAgIGxldCBhcmdzID0ge1xuICAgICAgICBwbGFpbjogXCJcIixcbiAgICAgICAgaHRtbDogaChcInRhYmxlXCIsIFwiXCIpLFxuICAgIH07XG5cbiAgICBsZXQge3NlbGVjdG9yLCByb3dzLCBzdHlsZXN9ID0gdGhpcy5kYXRhO1xuICAgIGxldCB7c3JpLCBlcmksIHNjaSwgZWNpfSA9IHNlbGVjdG9yLnJhbmdlO1xuICAgIGxldCB0Ym9keSA9IGgoJ3Rib2R5JywgJycpO1xuICAgIGZvciAobGV0IGkgPSBzcmk7IGkgPD0gZXJpOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHRyID0gaCgndHInLCAnJyk7XG4gICAgICAgIGZvciAobGV0IGogPSBzY2k7IGogPD0gZWNpOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxldCB0ZCA9IGgoJ3RkJywgJycpO1xuICAgICAgICAgICAgaWYgKHJvd3MuX1tpXSAmJiByb3dzLl9baV0uY2VsbHMgJiYgcm93cy5fW2ldLmNlbGxzW2pdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJvd3MuX1tpXS5jZWxsc1tqXSAmJiBzdHlsZXNbcm93cy5fW2ldLmNlbGxzW2pdLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICB0ZC5jc3MoJ2NvbG9yJywgc3R5bGVzW3Jvd3MuX1tpXS5jZWxsc1tqXS5zdHlsZV0uY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVzW3Jvd3MuX1tpXS5jZWxsc1tqXS5zdHlsZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHN0eWxlc1tyb3dzLl9baV0uY2VsbHNbal0uc3R5bGVdLmZvbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHN0eWxlc1tyb3dzLl9baV0uY2VsbHNbal0uc3R5bGVdLmZvbnQuYm9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvbGQgPSBzdHlsZXNbcm93cy5fW2ldLmNlbGxzW2pdLnN0eWxlXS5mb250LmJvbGQgPyAnOTAwJyA6ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGQuY3NzKCdmb250LXdlaWdodCcsIGJvbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRkLmNzcygnYmFja2dyb3VuZCcsIHN0eWxlc1tyb3dzLl9baV0uY2VsbHNbal0uc3R5bGVdLmJnY29sb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCFyb3dzLl9baV0uY2VsbHNbal0udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByb3dzLl9baV0uY2VsbHNbal0udGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCFyb3dzLl9baV0uY2VsbHNbal0uZm9ybXVsYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93cy5fW2ldLmNlbGxzW2pdLmZvcm11bGFzID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHJvd3MuX1tpXS5jZWxsc1tqXS5mb3JtdWxhcyAhPT0gXCJcIiA/IHJvd3MuX1tpXS5jZWxsc1tqXS5mb3JtdWxhcyA6IHJvd3MuX1tpXS5jZWxsc1tqXS50ZXh0O1xuICAgICAgICAgICAgICAgIGlmKHJvd3MuX1tpXS5jZWxsc1tqXS5mb3JtdWxhcyAmJiBjdXRTdHIocm93cy5fW2ldLmNlbGxzW2pdLmZvcm11bGFzLCBmYWxzZSwgdHJ1ZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGlkZGVuID0gaCgncmVmZXJlbmNlJywgJycpO1xuICAgICAgICAgICAgICAgICAgICBoaWRkZW4uaHRtbCh0ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuLmF0dHIoJ3JpJywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbi5hdHRyKCdjaScsIGopO1xuICAgICAgICAgICAgICAgICAgICB0ZC5jaGlsZChoaWRkZW4uZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICB0ZC5odG1sKHRleHQpO1xuICAgICAgICAgICAgICAgIGFyZ3MucGxhaW4gKz0gdGV4dDtcbiAgICAgICAgICAgICAgICBhcmdzLnBsYWluICs9IFwiXFx0XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3MucGxhaW4gKz0gXCJcXHRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyLmNoaWxkKHRkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRib2R5LmNoaWxkKHRyKTtcbiAgICAgICAgYXJncy5wbGFpbiArPSBcIlxcblwiO1xuICAgIH1cbiAgICBhcmdzLmh0bWwuY2hpbGQodGJvZHkpO1xuXG4gICAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRG9tKG5vZGUpIHtcbiAgICBsZXQgdG1wTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdG1wTm9kZS5hcHBlbmRDaGlsZChub2RlLmNsb25lTm9kZSh0cnVlKSk7XG5cbiAgICByZXR1cm4gIHRtcE5vZGUuaW5uZXJIVE1MO1xufVxuXG5leHBvcnQge1xuICAgIG1vdW50Q29weSxcbiAgICBnZXRDaG9vc2VJbWcsXG4gICAgc2hlZXRDb3B5XG59IiwiaW1wb3J0IHtkZWVwQ29weSwgZGlzdGluY3R9IGZyb20gXCIuLi9jb3JlL29wZXJhdG9yXCI7XG5pbXBvcnQge2lzSGF2ZX0gZnJvbSAnLi4vaGVscGVyL2NoZWNrX3ZhbHVlJztcbmltcG9ydCB7ZXhwcjJ4eSwgeHkyZXhwcn0gZnJvbSBcIi4uL3V0aWxzL2FscGhhYmV0XCI7XG5cbmZ1bmN0aW9uIGdldENlbGxEZXBlbmQoY2VsbHMpIHtcbiAgICBsZXQgYXJyID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZihpc0hhdmUoY2VsbHNbaV0pICYmIGlzSGF2ZShjZWxsc1tpXS5leHByKSkge1xuICAgICAgICAgICAgYXJyLnB1c2goY2VsbHNbaV0uZXhwcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIYXZlKGNlbGxzW2ldKSAmJiBpc0hhdmUoY2VsbHNbaV0uY2VsbCkgJiYgaXNIYXZlKGNlbGxzW2ldLmNlbGwuZGVwZW5kKSkge1xuICAgICAgICAgICAgYXJyLnB1c2goLi4uY2VsbHNbaV0uY2VsbC5kZXBlbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoaXNIYXZlKGNlbGxzW2ldKSAmJiBpc0hhdmUoY2VsbHNbaV0uY2VsbCkgJiYgaXNIYXZlKGNlbGxzW2ldLmNlbGwubXVsdGl2YWx1ZVJlZnNDZWxsKSkge1xuICAgICAgICAgICAgYXJyLnB1c2goY2VsbHNbaV0uY2VsbC5tdWx0aXZhbHVlUmVmc0NlbGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih7dHlwZSA9IC0xLCBhY3Rpb24gPSBcIlwiLCAgcmkgPSAtMSwgY2kgPSAtMSwgb2xkRGF0YSA9IFwiXCIsIG5ld0RhdGEgPSBcIlwiLCBleHByID0gXCJcIiwgb2xkU3RlcCA9IFwiXCIsIGNlbGxSYW5nZSA9IFwiXCIsIGNlbGxzID0ge30sIGhlaWdodCA9IC0xLCB3aWR0aCA9IC0xLCBvbGRDZWxsID0ge30sIG5ld0NlbGwgPSB7fSwgbmV3TWVyZ2VzRGF0YSA9IFwiXCIsIG9sZE1lcmdlc0RhdGEgPSBcIlwiLCBwcm9wZXJ0eSA9IFwiXCIsIHZhbHVlID0gXCJcIn0sIGRhdGEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHRoaXMucmkgPSByaTtcbiAgICAgICAgdGhpcy5jaSA9IGNpO1xuICAgICAgICB0aGlzLmV4cHIgPSBleHByO1xuICAgICAgICB0aGlzLmNlbGxSYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgdGhpcy5jZWxscyA9IGNlbGxzO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLm9sZENlbGwgPSBvbGRDZWxsO1xuICAgICAgICB0aGlzLm5ld0NlbGwgPSBuZXdDZWxsO1xuICAgICAgICB0aGlzLm9sZE1lcmdlc0RhdGEgPSBvbGRNZXJnZXNEYXRhO1xuICAgICAgICB0aGlzLm5ld01lcmdlc0RhdGEgPSBuZXdNZXJnZXNEYXRhO1xuICAgICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vbGRTdGVwID0gb2xkU3RlcDtcblxuICAgICAgICB0aGlzLm9sZERhdGEgPSBvbGREYXRhO1xuICAgICAgICB0aGlzLm5ld0RhdGEgPSBuZXdEYXRhO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluaJgOaciemcgOimgeiuoeeul+eahOWNleWFg+agvOWIl+ihqFxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBpc1JlZnJlc2goKXsgLy8gam9iczsg5oiR5Yqg55qE77yM5Yik5a6a5piv5ZCm5piv5YWo6YeP5pu05pawXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IDk5OTtcbiAgICB9XG5cbiAgICBmaW5kQWxsTmVlZENhbGNDZWxsKCkge1xuICAgICAgICBsZXQgY2hhbmdlQXJyID0gW107XG4gICAgICAgIGxldCB7b2xkQ2VsbCwgbmV3Q2VsbCwgcmksIGNpfSA9IHRoaXM7IC8vIOW6lOivpeW+l+WIsOWkmuS4qnNoZWV055qE5Y+Y5pu057uT5p6cXG4gICAgICAgIGNoYW5nZUFyci5wdXNoKC4uLmdldENlbGxEZXBlbmQob2xkQ2VsbCkpO1xuICAgICAgICBjaGFuZ2VBcnIucHVzaCguLi5nZXRDZWxsRGVwZW5kKG5ld0NlbGwpKTtcbiAgICAgICAgaWYgKHJpICE9PSAtMSAmJiBjaSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNoYW5nZUFyci5wdXNoKHh5MmV4cHIoY2ksIHJpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hhbmdlQXJyID0gZGlzdGluY3QoY2hhbmdlQXJyKTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZUFycjtcbiAgICB9XG5cbiAgICByZXN0b3JlKGRhdGEsIHNoZWV0LCBpc1JlZG8pIHtcbiAgICAgICAgbGV0IHt0eXBlfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IDEpIHsgLy8gc2h1cnVcbiAgICAgICAgICAgIGxldCB7b2xkQ2VsbCwgbmV3Q2VsbH0gPSB0aGlzO1xuICAgICAgICAgICAgbGV0IF9jZWxsID0gXCJcIjtcbiAgICAgICAgICAgIC8vIHJlZG8gMSAgdW5kbyAyXG4gICAgICAgICAgICBpZiAoaXNSZWRvID09PSAxKSB7XG4gICAgICAgICAgICAgICAgX2NlbGwgPSBkZWVwQ29weShvbGRDZWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2NlbGwgPSBkZWVwQ29weShuZXdDZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX2NlbGwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQge2NlbGwsIHJpLCBjaX0gPSBfY2VsbFtpXTtcbiAgICAgICAgICAgICAgICBkYXRhLnJvd3Muc2V0Q2VsbFRleHQocmksIGNpLCBjZWxsLCAnY2VsbCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSAxMykge1xuICAgICAgICAgICAgbGV0IHtvbGREYXRhLCBuZXdEYXRhfSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgX2RhdGEgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKGlzUmVkbyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIF9kYXRhID0gZGVlcENvcHkobmV3RGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9kYXRhID0gZGVlcENvcHkob2xkRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuc2V0RGF0YShfZGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMiB8fCB0eXBlID09PSA1IHx8IHR5cGUgPT09IDYgfHwgdHlwZSA9PT0gMTEgfHwgdHlwZSA9PT0gMTIpIHtcbiAgICAgICAgICAgIGxldCB7bmV3Q2VsbCwgb2xkQ2VsbCwgb2xkTWVyZ2VzRGF0YSwgbmV3TWVyZ2VzRGF0YSwgY2VsbFJhbmdlLCBwcm9wZXJ0eSwgdmFsdWV9ID0gdGhpcztcbiAgICAgICAgICAgIGxldCBfY2VsbHMgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKGlzUmVkbyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIF9jZWxscyA9IGRlZXBDb3B5KG9sZENlbGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfY2VsbHMgPSBkZWVwQ29weShuZXdDZWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSAnbWVyZ2UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVkbyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEubWVyZ2VzLnNldERhdGEob2xkTWVyZ2VzRGF0YSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLm1lcmdlcy5zZXREYXRhKG5ld01lcmdlc0RhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQge2NlbGwsIHJpLCBjaX0gPSBfY2VsbHNbaV07XG5cbiAgICAgICAgICAgICAgICBkYXRhLnJvd3Muc2V0Q2VsbFRleHQocmksIGNpLCBjZWxsLCAnY2VsbCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIGxldCB7cmksIGhlaWdodCwgb2xkU3RlcH0gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGlzUmVkbyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGRhdGEucm93cy5zZXRIZWlnaHQocmksIG9sZFN0ZXAuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YS5yb3dzLnNldEhlaWdodChyaSwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA0KSB7XG4gICAgICAgICAgICBsZXQge2NpLCB3aWR0aCwgb2xkU3RlcH0gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGlzUmVkbyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGRhdGEuY29scy5zZXRXaWR0aChjaSwgb2xkU3RlcC53aWR0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEuY29scy5zZXRXaWR0aChjaSwgd2lkdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJmdW5jdGlvbiBEcmFnKG9wdGlvbnMsIHNlbGYpIHtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsIOiKgueCuVxuICAgICAqL1xuICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgIC8v5bGP6JS95bem6ZSu5Lul5aSW55qE5oyJ6ZSuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8v6I635Y+WeOWdkOagh+WSjHnlnZDmoIdcbiAgICAgICAgICAgIGxldCB4ID0gZS5jbGllbnRYO1xuICAgICAgICAgICAgbGV0IHkgPSBlLmNsaWVudFk7XG5cbiAgICAgICAgICAgIC8v6I635Y+W5bem6YOo5ZKM6aG26YOo55qE5YGP56e76YePXG4gICAgICAgICAgICBsZXQgbCA9IGVsLm9mZnNldExlZnQ7XG4gICAgICAgICAgICBsZXQgdCA9IGVsLm9mZnNldFRvcDtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vbkJlZ2luKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vbkJlZ2luLmNhbGwoZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogeCAtIGwsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeSAtIHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvL+W8gOWFs+aJk+W8gFxuICAgICAgICAgICAgbGV0IGlzRG93biA9IHRydWU7XG4gICAgICAgICAgICAvL+iuvue9ruagt+W8j1xuICAgICAgICAgICAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuXG4gICAgICAgICAgICBsZXQgbmwgPSB4LCBudCA9IHk7XG5cblxuICAgICAgICAgICAgd2luZG93Lm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRG93bikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8v6I635Y+WeOWSjHlcbiAgICAgICAgICAgICAgICBsZXQgbnggPSBlLmNsaWVudFg7XG4gICAgICAgICAgICAgICAgbGV0IG55ID0gZS5jbGllbnRZO1xuXG5cbiAgICAgICAgICAgICAgICAvL+iuoeeul+enu+WKqOWQjueahOW3puWBj+enu+mHj+WSjOmhtumDqOeahOWBj+enu+mHj1xuICAgICAgICAgICAgICAgIG5sID0gbnggLSAoeCAtIGwpO1xuICAgICAgICAgICAgICAgIG50ID0gbnkgLSAoeSAtIHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIG5sLCBudCk7XG4gICAgICAgICAgICAgICAgLy8gbGV0IGRyYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAobmwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IG5sICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkcmFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IDAgKyAncHgnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUudG9wID0gbnQgKyAncHgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS50b3AgPSAwICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZWwuc3R5bGUubGVmdCA9IG5sICsgJ3B4JztcbiAgICAgICAgICAgICAgICAvLyBlbC5zdHlsZS50b3AgPSBudCArICdweCc7XG5cblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub25EcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25EcmFnLmNhbGwoZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IG5sLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG54IC0geCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG55IC0geSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRG93bjogaXNEb3duXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdpbmRvdy5vbm1vdXNldXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy/lvIDlhbPlhbPpl61cbiAgICAgICAgICAgICAgICBpc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jdXJzb3IgPSAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9uRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25FbmQuY2FsbChlbCwge2xlZnQ6IHBhcnNlSW50KGVsLnN0eWxlLmxlZnQpLCB0b3A6IHBhcnNlSW50KGVsLnN0eWxlLnRvcCl9LCBzZWxmKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGlmIChlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHdpbmRvdy5ldmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRHJhZzsiLCIvKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCAqL1xuaW1wb3J0IHtofSBmcm9tICcuL2NvbXBvbmVudC9lbGVtZW50JztcbmltcG9ydCBEYXRhUHJveHkgZnJvbSAnLi9jb3JlL2RhdGFfcHJveHknO1xuaW1wb3J0IFNoZWV0IGZyb20gJy4vY29tcG9uZW50L3NoZWV0JztcbmltcG9ydCB7Y3NzUHJlZml4fSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQge2xvY2FsZX0gZnJvbSAnLi9sb2NhbGUvbG9jYWxlJztcbmltcG9ydCAnLi9pbmRleC5sZXNzJztcbmltcG9ydCB6aENOIGZyb20gJy4vbG9jYWxlL3poLWNuJztcbmltcG9ydCB7YnVnb3V0fSBmcm9tIFwiLi9sb2cvbG9nX3Byb3h5XCI7XG5pbXBvcnQgRHJhZyBmcm9tIFwiLi9leHRlcm5hbC9kcmFnXCI7XG5cbmNsYXNzIFNwcmVhZHNoZWV0IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvcnMsIG9wdGlvbnMgPSB7fSwgbWV0aG9kcyA9IHt9LCBhbGlhcyA9ICdzaGVldDEnKSB7XG4gICAgICAgIGxldCB0YXJnZXRFbCA9IHNlbGVjdG9ycztcbiAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9ycyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRhcmdldEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9jYWxlKCd6aC1jbicsIHpoQ04pO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgRGF0YVByb3h5KGFsaWFzLCBvcHRpb25zLCBtZXRob2RzKTtcbiAgICAgICAgY29uc3Qgcm9vdEVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fWApXG4gICAgICAgICAgICAub24oJ2NvbnRleHRtZW51JywgZXZ0ID0+IGV2dC5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgLy8gY3JlYXRlIGNhbnZhcyBlbGVtZW50XG4gICAgICAgIHRhcmdldEVsLmFwcGVuZENoaWxkKHJvb3RFbC5lbCk7XG5cbiAgICAgICAgdGhpcy5zaGVldCA9IG5ldyBTaGVldChyb290RWwsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuZGF0YS5iZWxvbmdTaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgfVxuXG4gICAgc2V0RGF0YVNldHRpbmdzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zZXR0aW5ncy5zaG93RWRpdG9yID0gdmFsdWU7XG4gICAgfVxuXG4gICAgbG9hZERhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLnNoZWV0LmxvYWREYXRhKGRhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldERhdGEoKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgY29uc3Qge3ZhbGlkYXRpb25zfSA9IHRoaXMuZGF0YTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25zLmVycm9ycy5zaXplIDw9IDA7XG4gICAgfVxuXG4gICAgY2hhbmdlKGNiKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jaGFuZ2UgPSBjYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGxvY2FsZShsYW5nLCBtZXNzYWdlKSB7XG4gICAgICAgIGxvY2FsZShsYW5nLCBtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBsb2NhbGUobGFuZywgbWVzc2FnZSkge1xuICAgICAgICBsb2NhbGUobGFuZywgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLy8gZ2V0RWRpdG9yU3RhdHVzKCkge1xuICAgIC8vICAgICBsZXQge2VkaXRvcn0gPSB0aGlzLmJlbG9uZ1NoZWV0O1xuICAgIC8vICAgICBsZXQgeyByaSwgY2ksIHBvc30gPSBlZGl0b3I7XG4gICAgLy8gICAgIGxldCBpbnB1dFRleHQgPSBlZGl0b3IuZWRpdG9yVGV4dC5nZXRUZXh0KCk7XG4gICAgLy9cbiAgICAvLyAgICAgcmV0dXJuICB7XG4gICAgLy8gICAgICAgICBcImNlbGxTdGF0dXNcIjogZWRpdG9yLmlzRGlzcGxheSgpLFxuICAgIC8vICAgICAgICAgXCJpbnB1dFRleHRcIjogaW5wdXRUZXh0LFxuICAgIC8vICAgICAgICAgXCJyaVwiOiByaSxcbiAgICAvLyAgICAgICAgIFwiY2lcIjogY2ksXG4gICAgLy8gICAgICAgICBcInBvc1wiOiBwb3MsXG4gICAgLy8gICAgIH07XG4gICAgLy8gfVxuXG4gICAgLy8gc2V0RWRpdG9yVGV4dCh0ZXh0ID0gJycsIHBvcyA9IDEpIHtcbiAgICAvLyAgICAgbGV0IHtlZGl0b3J9ID0gdGhpcy5iZWxvbmdTaGVldDtcbiAgICAvLyAgICAgdGV4dCA9IHRleHQgIT09ICcnID8gdGV4dCA6ICc9JztcbiAgICAvLyAgICAgZWRpdG9yLmlucHV0RXZlbnRIYW5kbGVyKHRleHQsIHBvcywgdHJ1ZSk7XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gc2V0VGV4dEVuZChjZWxsLCByaSwgY2kpIHtcbiAgICAvLyAgICAgbGV0IHtlZGl0b3IsIGRhdGF9ID0gdGhpcy5iZWxvbmdTaGVldDtcbiAgICAvLyAgICAgZWRpdG9yLnNldENlbGxFbmQoe1xuICAgIC8vICAgICAgICAgdGV4dDogY2VsbC50ZXh0LFxuICAgIC8vICAgICAgICAgZm9ybXVsYXM6IGNlbGwuZm9ybXVsYXNcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gICAgIGRhdGEuc2V0Q2VsbEFsbChyaSwgY2ksIGNlbGwuZm9ybXVsYXMgKyBcIlwiLCBjZWxsLmZvcm11bGFzICsgXCJcIiwgJycpO1xuICAgIC8vXG4gICAgLy8gICAgIHRoaXMuYmVsb25nU2hlZXQuc2VsZWN0b3JFZGl0b3JSZXNldChyaSwgY2kpO1xuICAgIC8vXG4gICAgLy8gICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vICAgICAgICAgZWRpdG9yLnNldEN1cnNvclBvcyhjZWxsLmZvcm11bGFzLmxlbmd0aCk7XG4gICAgLy8gICAgIH0sIDEwMClcbiAgICAvLyB9XG5cbiAgICBnZXRUZXh0KGFsaWFzLCBpbnB1dFRleHQsIHBvcykge1xuICAgICAgICBsZXQge3NlbGVjdG9ycywgZGF0YSwgdGFibGV9ID0gdGhpcy5zaGVldDtcbiAgICAgICAgbGV0IHRleHQgPSBcIlwiO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQge2VycHh9ID0gc2VsZWN0b3JzW2ldO1xuICAgICAgICAgICAgdGV4dCArPSBlcnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGEuZ2V0Q2VsbEJ5RXhwcih0ZXh0LCB0YWJsZSwgYWxpYXMsIGlucHV0VGV4dCwgcG9zKTtcbiAgICB9XG5cbiAgICByZW1vdmVFdmVudCgpIHtcbiAgICAgICAgdGhpcy5zaGVldC5yZW1vdmVFdmVudCgpO1xuICAgIH1cbn1cblxuXG5jb25zdCBzcHJlYWRzaGVldCA9IChlbCwgb3B0aW9ucyA9IHt9KSA9PiBuZXcgU3ByZWFkc2hlZXQoZWwsIG9wdGlvbnMpO1xuXG5pZiAod2luZG93KSB7XG4gICAgd2luZG93LmRyYWcgPSBEcmFnO1xuICAgIHdpbmRvdy54ID0gd2luZG93LnggfHwge307XG4gICAgd2luZG93LmJ1Z291dCA9IGJ1Z291dDtcbiAgICB3aW5kb3cueC5zcHJlYWRzaGVldCA9IHNwcmVhZHNoZWV0O1xuICAgIHdpbmRvdy54LnNwcmVhZHNoZWV0LmxvY2FsZSA9IChsYW5nLCBtZXNzYWdlKSA9PiBsb2NhbGUobGFuZywgbWVzc2FnZSk7XG59XG5cbi8vIGV4cG9ydCBkZWZhdWx0IFNwcmVhZHNoZWV0O1xuZXhwb3J0IHtcbiAgICBzcHJlYWRzaGVldCxcbn07XG4iLCIvKiBnbG9iYWwgZG9jdW1lbnQgKi9cblxuaW1wb3J0IHsgQ2FsYyB9IGZyb20gJy4uLy4uL3NyYy9jYWxjL2NhbGNfY21kL2NhbGMnO1xuaW1wb3J0IFNlbGVjdG9yIGZyb20gJy4vc2VsZWN0b3InO1xuaW1wb3J0IFNjcm9sbCBmcm9tICcuL3Njcm9sbCc7XG5pbXBvcnQgQ2xpcGJvYXJkIGZyb20gJy4vY2xpcGJvYXJkJztcbmltcG9ydCBBdXRvRmlsdGVyIGZyb20gJy4vYXV0b19maWx0ZXInO1xuaW1wb3J0IHtNZXJnZXN9IGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IHtpc051bWJlcn0gZnJvbSAnLi4vaGVscGVyL2RhdGFwcm94eV9oZWxwZXInO1xuaW1wb3J0IHtpc0hhdmV9IGZyb20gJy4uL2hlbHBlci9jaGVja192YWx1ZSc7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSAnLi4vaGVscGVyL2RhdGFwcm94eV9oZWxwZXInO1xuaW1wb3J0IHtpc0Zvcm11bGEsIFJvd3N9IGZyb20gJy4vcm93JztcbmltcG9ydCB7Q29sc30gZnJvbSAnLi9jb2wnO1xuaW1wb3J0IHtWYWxpZGF0aW9uc30gZnJvbSAnLi92YWxpZGF0aW9uJztcbmltcG9ydCB7Q2VsbFJhbmdlfSBmcm9tICcuL2NlbGxfcmFuZ2UnO1xuaW1wb3J0IHtleHByMnh5LCB4eTJleHByfSBmcm9tICcuLi91dGlscy9hbHBoYWJldCc7XG5pbXBvcnQge3R9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGUnO1xuaW1wb3J0IE1vdmVkIGZyb20gJy4uL2V2ZW50L21vdmUnO1xuaW1wb3J0IHtofSBmcm9tIFwiLi4vY29tcG9uZW50L2VsZW1lbnRcIjtcbmltcG9ydCB7bW91bnRJbWd9IGZyb20gXCIuLi9ldmVudC9wYXN0ZVwiO1xuaW1wb3J0IHtwYXJzZUNlbGwyfSBmcm9tIFwiLi4vY29tcG9uZW50L3RhYmxlXCI7XG5pbXBvcnQge2lzTGVnYWx9IGZyb20gXCIuL29wZXJhdG9yXCI7XG5pbXBvcnQgUmVjYXN0IGZyb20gXCIuL3JlY2FzdFwiO1xuaW1wb3J0IHtjaGFuZ2VGb3JtYXQsIGRhdGVEaWZmLCBmb3JtYXREYXRlfSBmcm9tICcuLi91dGlscy9kYXRlJztcbmltcG9ydCB7Zm9ybWF0TnVtYmVyUmVuZGVyfSBmcm9tIFwiLi9mb3JtYXRcIjtcbmltcG9ydCBNdWx0aVByZUFjdGlvbiBmcm9tIFwiLi4vY29yZS9tdWx0aV9wcmVfYWN0aW9uXCI7XG5pbXBvcnQgQ2VsbFByb3h5IGZyb20gXCIuL2NlbGxfcHJveHlcIjtcbmltcG9ydCBDZWxsUHJvcCBmcm9tIFwiLi4vbW9kZWwvY2VsbF9wcm9wXCI7XG5pbXBvcnQgUGFpbnRGb3JtYXQgZnJvbSBcIi4uL21vZGVsL3BhaW50X2Zvcm1hdFwiO1xuLy8gcHJpdmF0ZSBtZXRob2RzXG4vKlxuICoge1xuICogIG5hbWU6ICcnXG4gKiAgZnJlZXplOiBbMCwgMF0sXG4gKiAgZm9ybWF0czogW10sXG4gKiAgc3R5bGVzOiBbXG4gKiAgICB7XG4gKiAgICAgIGJnY29sb3I6ICcnLFxuICogICAgICBhbGlnbjogJycsXG4gKiAgICAgIHZhbGlnbjogJycsXG4gKiAgICAgIHRleHR3cmFwOiBmYWxzZSxcbiAqICAgICAgc3RyaWtlOiBmYWxzZSxcbiAqICAgICAgdW5kZXJsaW5lOiBmYWxzZSxcbiAqICAgICAgY29sb3I6ICcnLFxuICogICAgICBmb3JtYXQ6IDEsXG4gKiAgICAgIGJvcmRlcjoge1xuICogICAgICAgIGxlZnQ6IFtzdHlsZSwgY29sb3JdLFxuICogICAgICAgIHJpZ2h0OiBbc3R5bGUsIGNvbG9yXSxcbiAqICAgICAgICB0b3A6IFtzdHlsZSwgY29sb3JdLFxuICogICAgICAgIGJvdHRvbTogW3N0eWxlLCBjb2xvcl0sXG4gKiAgICAgIH0sXG4gKiAgICAgIGZvbnQ6IHtcbiAqICAgICAgICBmYW1pbHk6ICdIZWx2ZXRpY2EnLFxuICogICAgICAgIHNpemU6IDEwLFxuICogICAgICAgIGJvbGQ6IGZhbHNlLFxuICogICAgICAgIGl0YWxpYzogZmFsc2UsXG4gKiAgICAgIH1cbiAqICAgIH1cbiAqICBdLFxuICogIG1lcmdlczogW1xuICogICAgJ0ExOkYxMScsXG4gKiAgICAuLi5cbiAqICBdLFxuICogIHJvd3M6IHtcbiAqICAgIDE6IHtcbiAqICAgICAgaGVpZ2h0OiA1MCxcbiAqICAgICAgc3R5bGU6IDEsXG4gKiAgICAgIGNlbGxzOiB7XG4gKiAgICAgICAgMToge1xuICogICAgICAgICAgc3R5bGU6IDIsXG4gKiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAqICAgICAgICAgIHRleHQ6ICcnLFxuICogICAgICAgICAgdmFsdWU6ICcnLCAvLyBjYWwgcmVzdWx0XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgLi4uXG4gKiAgfSxcbiAqICBjb2xzOiB7XG4gKiAgICAyOiB7IHdpZHRoOiAxMDAsIHN0eWxlOiAxIH1cbiAqICB9XG4gKiB9XG4gKi9cbmNvbnN0IGRlZmF1bHRTZXR0aW5ncyA9IHtcbiAgICB2aWV3OiB7XG4gICAgICAgIGhlaWdodDogKCkgPT4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgd2lkdGg6ICgpID0+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICB9LFxuICAgIGZvcm11bGE6IHt9LFxuICAgIHNob3dHcmlkOiB0cnVlLFxuICAgIHNob3dUb29sYmFyOiB0cnVlLFxuICAgIHNob3dDb250ZXh0bWVudTogdHJ1ZSxcbiAgICBzaG93RWRpdG9yOiB0cnVlLFxuICAgIGF1dG9Mb2FkOiB0cnVlLFxuICAgIGlnbm9yZTogW10sXG4gICAgY2VsbFdpZHRoOiAwLFxuICAgIGlnbm9yZVJpOiAwLFxuICAgIG1pbnVzOiBmYWxzZSxcbiAgICByb3c6IHtcbiAgICAgICAgbGVuOiAxMDAsXG4gICAgICAgIGhlaWdodDogMjUsXG4gICAgfSxcbiAgICBjb2w6IHtcbiAgICAgICAgbGVuOiAyNixcbiAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgaW5kZXhXaWR0aDogNjAsXG4gICAgICAgIG1pbldpZHRoOiAxMCxcbiAgICB9LFxuICAgIHJvd3NJbml0OiBmYWxzZSxcbiAgICBzdHlsZToge1xuICAgICAgICBiZ2NvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgIHZhbGlnbjogJ21pZGRsZScsXG4gICAgICAgIHRleHR3cmFwOiBmYWxzZSxcbiAgICAgICAgc3RyaWtlOiBmYWxzZSxcbiAgICAgICAgZmxleGlibGU6IGZhbHNlLFxuICAgICAgICB1bmRlcmxpbmU6IGZhbHNlLFxuICAgICAgICBhdXRvQWRhcHQ6IGZhbHNlLFxuICAgICAgICBjb2xvcjogJyMwYTBhMGEnLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgICBuYW1lOiAnQXJpYWwnLFxuICAgICAgICAgICAgc2l6ZTogMTAsXG4gICAgICAgICAgICBib2xkOiBmYWxzZSxcbiAgICAgICAgICAgIGl0YWxpYzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbmNvbnN0IHRvb2xiYXJIZWlnaHQgPSA0MTtcblxuXG4vLyBzcmM6IGNlbGxSYW5nZVxuLy8gZHN0OiBjZWxsUmFuZ2VcbmZ1bmN0aW9uIGNhblBhc3RlKHNyYywgZHN0LCBlcnJvciA9ICgpID0+IHtcbn0pIHtcbiAgICBpZiAoIWRzdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHttZXJnZXN9ID0gdGhpcztcbiAgICBjb25zdCBjZWxsUmFuZ2UgPSBkc3QuY2xvbmUoKTtcbiAgICBjb25zdCBbc3JuLCBzY25dID0gc3JjLnNpemUoKTtcbiAgICBjb25zdCBbZHJuLCBkY25dID0gZHN0LnNpemUoKTtcbiAgICBpZiAoc3JuID4gZHJuKSB7XG4gICAgICAgIGNlbGxSYW5nZS5lcmkgPSBkc3Quc3JpICsgc3JuIC0gMTtcbiAgICB9XG4gICAgaWYgKHNjbiA+IGRjbikge1xuICAgICAgICBjZWxsUmFuZ2UuZWNpID0gZHN0LnNjaSArIHNjbiAtIDE7XG4gICAgfVxuICAgIGlmIChtZXJnZXMuaW50ZXJzZWN0cyhjZWxsUmFuZ2UpKSB7XG4gICAgICAgIGVycm9yKHQoJ2Vycm9yLnBhc3RlRm9yTWVyZ2VkQ2VsbCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29weVBhc3RlKHNyY0NlbGxSYW5nZSwgZHN0Q2VsbFJhbmdlLCB3aGF0LCBhdXRvZmlsbCA9IGZhbHNlKSB7XG4gICAgY29uc3Qge3Jvd3MsIG1lcmdlc30gPSB0aGlzO1xuICAgIC8vIGRlbGV0ZSBkZXN0IG1lcmdlXG4gICAgaWYgKHdoYXQgPT09ICdhbGwnIHx8IHdoYXQgPT09ICdmb3JtYXQnKSB7XG4gICAgICAgIHJvd3MuZGVsZXRlQ2VsbHMoZHN0Q2VsbFJhbmdlLCB3aGF0KTtcbiAgICAgICAgbWVyZ2VzLmRlbGV0ZVdpdGhpbihkc3RDZWxsUmFuZ2UpO1xuICAgIH1cbiAgICByb3dzLmNvcHlQYXN0ZShzcmNDZWxsUmFuZ2UsIGRzdENlbGxSYW5nZSwgd2hhdCwgYXV0b2ZpbGwsIChyaSwgY2ksIGNlbGwpID0+IHtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5tZXJnZSkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NlbGw6JywgcmksIGNpLCBjZWxsKTtcbiAgICAgICAgICAgIGNvbnN0IFtybiwgY25dID0gY2VsbC5tZXJnZTtcbiAgICAgICAgICAgIGlmIChybiA8PSAwICYmIGNuIDw9IDApIHJldHVybjtcbiAgICAgICAgICAgIG1lcmdlcy5hZGQobmV3IENlbGxSYW5nZShyaSwgY2ksIHJpICsgcm4sIGNpICsgY24pKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjdXRQYXN0ZShzcmNDZWxsUmFuZ2UsIGRzdENlbGxSYW5nZSwgY2xlYXJkKSB7XG4gICAgY29uc3Qge2NsaXBib2FyZCwgcm93cywgbWVyZ2VzfSA9IHRoaXM7XG4gICAgcm93cy5jdXRQYXN0ZShzcmNDZWxsUmFuZ2UsIGRzdENlbGxSYW5nZSk7XG4gICAgbWVyZ2VzLm1vdmUoc3JjQ2VsbFJhbmdlLFxuICAgICAgICBkc3RDZWxsUmFuZ2Uuc3JpIC0gc3JjQ2VsbFJhbmdlLnNyaSxcbiAgICAgICAgZHN0Q2VsbFJhbmdlLnNjaSAtIHNyY0NlbGxSYW5nZS5zY2kpO1xuICAgIGlmIChjbGVhcmQpXG4gICAgICAgIGNsaXBib2FyZC5jbGVhcigpO1xufVxuXG4vLyBic3M6IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH1cbmZ1bmN0aW9uIHNldFN0eWxlQm9yZGVyKHJpLCBjaSwgYnNzKSB7XG4gICAgY29uc3Qge3N0eWxlcywgcm93c30gPSB0aGlzO1xuICAgIGNvbnN0IGNlbGwgPSByb3dzLmdldENlbGxPck5ldyhyaSwgY2kpO1xuICAgIGxldCBjc3R5bGUgPSB7fTtcbiAgICBpZiAoaXNIYXZlKGNlbGwuc3R5bGUpKSB7XG4gICAgICAgIGNzdHlsZSA9IGhlbHBlci5jbG9uZURlZXAoc3R5bGVzW2NlbGwuc3R5bGVdKTtcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKGNzdHlsZSwge2JvcmRlcjogYnNzfSk7XG4gICAgY2VsbC5zdHlsZSA9IHRoaXMuYWRkU3R5bGUoY3N0eWxlKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JDZWxsVGV4dChyaSwgY2ksIHRleHQsIGV2ZW50X3R5cGUpIHtcbiAgICBpZiAocmkgPT09IC0xIHx8IGNpID09PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCLljZXlhYPmoLzlnZDmoIfmnInor69cIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoZXZlbnRfdHlwZSAhPT0gJ3N0eWxlJyAmJiAoIXRleHQgfHwgdGV4dFswXSAhPT0gJz0nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwi5q2j56GuXCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBzdGF0ZVxuICAgIGxldCBhcmdzID0gZXJyb3JQb3AuY2FsbCh0aGlzLCB0ZXh0KTtcbiAgICBpZiAoZXZlbnRfdHlwZSAhPT0gJ3N0eWxlJyAmJiBhcmdzLnN0YXRlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcIm1zZ1wiOiBhcmdzLm1zZyxcbiAgICAgICAgICAgIFwic3RhdGVcIjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJtc2dcIjogYXJncy5tc2csXG4gICAgICAgIFwic3RhdGVcIjogZmFsc2UsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXJyb3JQb3AodGV4dCkge1xuICAgIGxldCBlbnRlciA9IGZhbHNlO1xuICAgIGxldCBtc2cgPSBcIlwiO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCByZWNhc3QgPSBuZXcgUmVjYXN0KHRleHQpO1xuICAgICAgICByZWNhc3QucGFyc2UoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIG1zZyA9ICfmgqjovpPlhaXnmoTlhazlvI/lrZjlnKjpl67popjvvIzor7fmm7TmraMsIOmUmeivr+WOn+WboDogJyArIGUuZGVzY3JpcHRpb247XG4gICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZW50ZXIgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGlzTGVnYWwodGV4dCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtc2cgPSAn57y65bCR5bem5ous5Y+35oiW5Y+z5ous5Y+3JztcbiAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogbXNnXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwic3RhdGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcIm1zZ1wiOiBtc2dcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQYXN0ZURpcmVjdGlvbnNBcnIocGFzdGVEaXJlY3Rpb25zQXJyLCB0eXBlID0gJ3RvJywgc2hlZXQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ3RvJykge1xuICAgICAgICBsZXQgYXJyID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFzdGVEaXJlY3Rpb25zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IHBhc3RlRGlyZWN0aW9uc0FycltpXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7XG4gICAgICAgICAgICAgICAgc3JjOiBpdGVtLmltZzIuc3JjLFxuICAgICAgICAgICAgICAgIHJpOiBpdGVtLnJpLFxuICAgICAgICAgICAgICAgIGNpOiBpdGVtLmNpLFxuICAgICAgICAgICAgICAgIHRvcDogaXRlbS50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogaXRlbS5sZWZ0LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBpdGVtLnJhbmdlLFxuICAgICAgICAgICAgICAgIG9mZnNldExlZnQ6IGl0ZW0ub2Zmc2V0TGVmdCxcbiAgICAgICAgICAgICAgICBvZmZzZXRUb3A6IGl0ZW0ub2Zmc2V0VG9wLFxuICAgICAgICAgICAgICAgIG5leHRMZWZ0OiBpdGVtLm5leHRMZWZ0LFxuICAgICAgICAgICAgICAgIG5leHRUb3A6IGl0ZW0ubmV4dFRvcCxcbiAgICAgICAgICAgICAgICBpbWc6IGl0ZW0uaW1nLFxuICAgICAgICAgICAgICAgIGFycjogaXRlbS5hcnIsXG4gICAgICAgICAgICAgICAgaW1nMjogaXRlbS5pbWcyXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBhcnIucHVzaChuZXdJdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZnJvbScpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzaGVldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3RlRGlyZWN0aW9uc0Fyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBwYXN0ZURpcmVjdGlvbnNBcnJbaV07XG4gICAgICAgICAgICBsZXQgaW1nID0gaCgnaW1nJywgJycpO1xuICAgICAgICAgICAgaW1nLmVsLnNyYyA9IGl0ZW0uc3JjO1xuICAgICAgICAgICAgbW91bnRJbWcuY2FsbChzaGVldCwgaW1nLmVsLCB0cnVlLCBpdGVtLnJpLCBpdGVtLmNpLCBpdGVtLnJhbmdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xpY2tDb3B5UGFzdGVIZWxwKHJpLCBsY2kpIHtcbiAgICBsZXQge3Jvd3N9ID0gdGhpcztcbiAgICBsZXQgbHJpID0gcmkgKyAxO1xuICAgIGxldCBlbnRlciA9IHRydWU7XG4gICAgd2hpbGUgKGVudGVyKSB7XG4gICAgICAgIGxldCBsY2VsbCA9IHJvd3MuZ2V0Q2VsbE9yTmV3KGxyaSwgbGNpKTtcbiAgICAgICAgaWYgKCFsY2VsbCB8fCAhbGNlbGwudGV4dCkge1xuICAgICAgICAgICAgZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxyaSA9IGxyaSArIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbHJpO1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZUJvcmRlcnMoe21vZGUsIHN0eWxlLCBjb2xvcn0pIHtcbiAgICBjb25zdCB7c3R5bGVzLCBzZWxlY3Rvciwgcm93c30gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgIH0gPSBzZWxlY3Rvci5yYW5nZTtcbiAgICBjb25zdCBtdWx0aXBsZSA9ICF0aGlzLmlzU2lnbmxlU2VsZWN0ZWQoKTtcbiAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICAgIGlmIChtb2RlID09PSAnaW5zaWRlJyB8fCBtb2RlID09PSAnaG9yaXpvbnRhbCcgfHwgbW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgcmkgPSBzcmk7IHJpIDw9IGVyaTsgcmkgKz0gMSkge1xuICAgICAgICBmb3IgKGxldCBjaSA9IHNjaTsgY2kgPD0gZWNpOyBjaSArPSAxKSB7XG4gICAgICAgICAgICBzZXRTdHlsZUJvcmRlci5jYWxsKHRoaXMsIHJpLCBjaSwge30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZGUgPT09ICdvdXRzaWRlJyAmJiAhbXVsdGlwbGUpIHtcbiAgICAgICAgc2V0U3R5bGVCb3JkZXIuY2FsbCh0aGlzLCBzcmksIHNjaSwge1xuICAgICAgICAgICAgdG9wOiBbc3R5bGUsIGNvbG9yXSwgYm90dG9tOiBbc3R5bGUsIGNvbG9yXSwgbGVmdDogW3N0eWxlLCBjb2xvcl0sIHJpZ2h0OiBbc3R5bGUsIGNvbG9yXSxcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSAnbm9uZScpIHtcbiAgICAgICAgc2VsZWN0b3IucmFuZ2UuZWFjaCgocmksIGNpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gcm93cy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBucyA9IGhlbHBlci5jbG9uZURlZXAoc3R5bGVzW2NlbGwuc3R5bGVdKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbnMuYm9yZGVyO1xuICAgICAgICAgICAgICAgIC8vIFsnYm90dG9tJywgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0J10uZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vICAgaWYgKG5zW3Byb3BdKSBkZWxldGUgbnNbcHJvcF07XG4gICAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgICAgY2VsbC5zdHlsZSA9IHRoaXMuYWRkU3R5bGUobnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdhbGwnIHx8IG1vZGUgPT09ICdpbnNpZGUnIHx8IG1vZGUgPT09ICdvdXRzaWRlJ1xuICAgICAgICB8fCBtb2RlID09PSAnaG9yaXpvbnRhbCcgfHwgbW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBjb25zdCBtZXJnZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcmkgPSBzcmk7IHJpIDw9IGVyaTsgcmkgKz0gMSkge1xuICAgICAgICAgICAgZm9yIChsZXQgY2kgPSBzY2k7IGNpIDw9IGVjaTsgY2kgKz0gMSkge1xuICAgICAgICAgICAgICAgIC8vIGp1bXAgbWVyZ2VzIC0tIGRlYWwxQ2hhclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlSW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBtZXJnZXMubGVuZ3RoOyBpaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFttcmksIG1jaSwgcm4sIGNuXSA9IG1lcmdlc1tpaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChyaSA9PT0gbXJpICsgcm4gKyAxKSBtZXJnZUluZGV4ZXMucHVzaChpaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtcmkgPD0gcmkgJiYgcmkgPD0gbXJpICsgcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaSA9PT0gbWNpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2kgKz0gY24gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lcmdlSW5kZXhlcy5mb3JFYWNoKGl0ID0+IG1lcmdlcy5zcGxpY2UoaXQsIDEpKTtcbiAgICAgICAgICAgICAgICBpZiAoY2kgPiBlY2kpIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8vIGp1bXAgbWVyZ2VzIC0tIGVuZFxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSByb3dzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgICAgICAgICBsZXQgW3JuLCBjbl0gPSBbMCwgMF07XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5tZXJnZSkge1xuICAgICAgICAgICAgICAgICAgICBbcm4sIGNuXSA9IGNlbGwubWVyZ2U7XG4gICAgICAgICAgICAgICAgICAgIG1lcmdlcy5wdXNoKFtyaSwgY2ksIHJuLCBjbl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBtcmwgPSBybiA+IDAgJiYgcmkgKyBybiA9PT0gZXJpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1jbCA9IGNuID4gMCAmJiBjaSArIGNuID09PSBlY2k7XG4gICAgICAgICAgICAgICAgbGV0IGJzcyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgICAgICBic3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IFtzdHlsZSwgY29sb3JdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBbc3R5bGUsIGNvbG9yXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IFtzdHlsZSwgY29sb3JdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IFtzdHlsZSwgY29sb3JdLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luc2lkZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtY2wgJiYgY2kgPCBlY2kpIGJzcy5yaWdodCA9IFtzdHlsZSwgY29sb3JdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1ybCAmJiByaSA8IGVyaSkgYnNzLmJvdHRvbSA9IFtzdHlsZSwgY29sb3JdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbXJsICYmIHJpIDwgZXJpKSBic3MuYm90dG9tID0gW3N0eWxlLCBjb2xvcl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWNsICYmIGNpIDw9IGVjaSkgYnNzLnJpZ2h0ID0gW3N0eWxlLCBjb2xvcl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnb3V0c2lkZScgJiYgbXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNyaSA9PT0gcmkpIGJzcy50b3AgPSBbc3R5bGUsIGNvbG9yXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ybCB8fCBlcmkgPT09IHJpKSBic3MuYm90dG9tID0gW3N0eWxlLCBjb2xvcl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2kgPT09IGNpKSBic3MubGVmdCA9IFtzdHlsZSwgY29sb3JdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWNsIHx8IGVjaSA9PT0gY2kpIGJzcy5yaWdodCA9IFtzdHlsZSwgY29sb3JdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoYnNzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFN0eWxlQm9yZGVyLmNhbGwodGhpcywgcmksIGNpLCBic3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaSArPSBjbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ3RvcCcgfHwgbW9kZSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgZm9yIChsZXQgY2kgPSBzY2k7IGNpIDw9IGVjaTsgY2kgKz0gMSkge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgc2V0U3R5bGVCb3JkZXIuY2FsbCh0aGlzLCBzcmksIGNpLCB7dG9wOiBbc3R5bGUsIGNvbG9yXX0pO1xuICAgICAgICAgICAgICAgIGNpICs9IHJvd3MuZ2V0Q2VsbE1lcmdlKHNyaSwgY2kpWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICAgICAgc2V0U3R5bGVCb3JkZXIuY2FsbCh0aGlzLCBlcmksIGNpLCB7Ym90dG9tOiBbc3R5bGUsIGNvbG9yXX0pO1xuICAgICAgICAgICAgICAgIGNpICs9IHJvd3MuZ2V0Q2VsbE1lcmdlKGVyaSwgY2kpWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSAnbGVmdCcgfHwgbW9kZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICBmb3IgKGxldCByaSA9IHNyaTsgcmkgPD0gZXJpOyByaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgc2V0U3R5bGVCb3JkZXIuY2FsbCh0aGlzLCByaSwgc2NpLCB7bGVmdDogW3N0eWxlLCBjb2xvcl19KTtcbiAgICAgICAgICAgICAgICByaSArPSByb3dzLmdldENlbGxNZXJnZShyaSwgc2NpKVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RlID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgc2V0U3R5bGVCb3JkZXIuY2FsbCh0aGlzLCByaSwgZWNpLCB7cmlnaHQ6IFtzdHlsZSwgY29sb3JdfSk7XG4gICAgICAgICAgICAgICAgcmkgKz0gcm93cy5nZXRDZWxsTWVyZ2UocmksIGVjaSlbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIGZ1bmN0aW9uIGdldENlbGxSb3dCeUFic1goc2Nyb2xsT2Zmc2V0eCkge1xuLy8gICAgIGxldCB4ID0gc2Nyb2xsT2Zmc2V0eDtcbi8vICAgICBjb25zdCB7Y29sc30gPSB0aGlzO1xuLy8gICAgIGNvbnN0IGZzdyA9IHRoaXMuZnJlZXplVG90YWxXaWR0aCgpO1xuLy8gICAgIGxldCBpbml0cyA9IGNvbHMuaW5kZXhXaWR0aDtcbi8vICAgICBpZiAoZnN3ICsgY29scy5pbmRleFdpZHRoIDw9IHgpIGluaXRzIC09IHNjcm9sbE9mZnNldHg7XG4vLyAgICAgY29uc3QgW2NpLCBsZWZ0LCB3aWR0aF0gPSBjYWxjX3V0aWxzLnJhbmdlUmVkdWNlSWYoXG4vLyAgICAgICAgIDAsXG4vLyAgICAgICAgIGNvbHMubGVuLFxuLy8gICAgICAgICBpbml0cyxcbi8vICAgICAgICAgY29scy5pbmRleFdpZHRoLFxuLy8gICAgICAgICB4LFxuLy8gICAgICAgICBpID0+IGNvbHMuZ2V0V2lkdGgoaSksXG4vLyAgICAgKTtcbi8vICAgICBpZiAobGVmdCA8PSAwKSB7XG4vLyAgICAgICAgIHJldHVybiB7Y2k6IDAsIGxlZnQ6IDAsIHdpZHRoOiBjb2xzLmluZGV4V2lkdGh9O1xuLy8gICAgIH1cbi8vICAgICByZXR1cm4ge2NpOiBjaSAtIDEsIGxlZnQsIHdpZHRofTtcbi8vIH1cblxuLy8gZnVuY3Rpb24gZ2V0Q2VsbFJvd0J5QWJzWShzY3JvbGxPZmZzZXR5KSB7XG4vLyAgICAgbGV0IHkgPSBzY3JvbGxPZmZzZXR5O1xuLy8gICAgIGxldCB7cm93c30gPSB0aGlzO1xuLy8gICAgIGxldCByaSA9IDA7XG4vLyAgICAgbGV0IHRvcCA9IHJvd3MuaGVpZ2h0O1xuLy8gICAgIGNvbnN0IGZyc2V0ID0gdGhpcy5leGNlcHRSb3dTZXQ7XG4vLyAgICAgbGV0IHtoZWlnaHR9ID0gcm93cztcbi8vXG4vLyAgICAgZm9yICg7IHJpIDwgcm93cy5sZW47IHJpICs9IDEpIHtcbi8vICAgICAgICAgaWYgKHRvcCA+IHkpIGJyZWFrO1xuLy8gICAgICAgICBpZiAoIWZyc2V0LmhhcyhyaSkpIHtcbi8vICAgICAgICAgICAgIGhlaWdodCA9IHJvd3MuZ2V0SGVpZ2h0KHJpKTtcbi8vICAgICAgICAgICAgIHRvcCArPSBoZWlnaHQ7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vL1xuLy8gICAgIGlmIChyaSA8PSAwKSB7XG4vLyAgICAgICAgIHJpID0gMDtcbi8vICAgICB9XG4vLyAgICAgaWYgKGhlaWdodCA8PSAwKSB7XG4vLyAgICAgICAgIGhlaWdodCA9IDA7XG4vLyAgICAgfVxuLy9cbi8vICAgICByZXR1cm4ge3JpOiByaSwgdG9wLCBoZWlnaHR9O1xuLy8gfVxuXG5mdW5jdGlvbiBnZXRDZWxsUm93QnlZKHksIHNjcm9sbE9mZnNldHkpIHtcbiAgICBjb25zdCB7cm93c30gPSB0aGlzO1xuICAgIGNvbnN0IGZzaCA9IHRoaXMuZnJlZXplVG90YWxIZWlnaHQoKTtcbiAgICAvLyBjb25zb2xlLmxvZygneTonLCB5LCAnLCBmc2g6JywgZnNoKTtcbiAgICBsZXQgaW5pdHMgPSByb3dzLmhlaWdodDtcbiAgICBpZiAoZnNoICsgcm93cy5oZWlnaHQgPCB5KSBpbml0cyAtPSBzY3JvbGxPZmZzZXR5O1xuXG4gICAgLy8gaGFuZGxlIHJpIGluIGF1dG9maWx0ZXJcbiAgICBjb25zdCBmcnNldCA9IHRoaXMuZXhjZXB0Um93U2V0O1xuXG4gICAgbGV0IHJpID0gMDtcbiAgICBsZXQgdG9wID0gaW5pdHM7XG4gICAgbGV0IHtoZWlnaHR9ID0gcm93cztcbiAgICBmb3IgKDsgcmkgPCByb3dzLmxlbjsgcmkgKz0gMSkge1xuICAgICAgICBpZiAodG9wID4geSkgYnJlYWs7XG4gICAgICAgIGlmICghZnJzZXQuaGFzKHJpKSkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gcm93cy5nZXRIZWlnaHQocmkpO1xuICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b3AgLT0gaGVpZ2h0O1xuICAgIC8vIGNvbnNvbGUubG9nKCdyaTonLCByaSwgJywgdG9wOicsIHRvcCwgJywgaGVpZ2h0OicsIGhlaWdodCk7XG5cbiAgICBpZiAodG9wIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIHtyaTogLTEsIHRvcDogMCwgaGVpZ2h0fTtcbiAgICB9XG5cbiAgICByZXR1cm4ge3JpOiByaSAtIDEsIHRvcCwgaGVpZ2h0fTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2VsbENvbEJ5WCh4LCBzY3JvbGxPZmZzZXR4KSB7XG4gICAgY29uc3Qge2NvbHN9ID0gdGhpcztcbiAgICBjb25zdCBmc3cgPSB0aGlzLmZyZWV6ZVRvdGFsV2lkdGgoKTtcbiAgICBsZXQgaW5pdHMgPSBjb2xzLmluZGV4V2lkdGg7XG4gICAgaWYgKGZzdyArIGNvbHMuaW5kZXhXaWR0aCA8PSB4KSBpbml0cyAtPSBzY3JvbGxPZmZzZXR4O1xuICAgIGNvbnN0IFtjaSwgbGVmdCwgd2lkdGhdID0gaGVscGVyLnJhbmdlUmVkdWNlSWYoXG4gICAgICAgIDAsXG4gICAgICAgIGNvbHMubGVuLFxuICAgICAgICBpbml0cyxcbiAgICAgICAgY29scy5pbmRleFdpZHRoLFxuICAgICAgICB4LFxuICAgICAgICBpID0+IGNvbHMuZ2V0V2lkdGgoaSksXG4gICAgKTtcbiAgICBpZiAobGVmdCA8PSAwKSB7XG4gICAgICAgIHJldHVybiB7Y2k6IC0xLCBsZWZ0OiAwLCB3aWR0aDogY29scy5pbmRleFdpZHRofTtcbiAgICB9XG4gICAgcmV0dXJuIHtjaTogY2kgLSAxLCBsZWZ0LCB3aWR0aH07XG59XG5cbmZ1bmN0aW9uIG1ha2VGb3JtYXRDZWxsKHt0ZXh0LCBmb3JtdWxhfSwge3N5bWJvbCwgcG9zaXRpb259LCBjYikge1xuICAgIGlmICghaXNIYXZlKHRleHQpIHx8ICFpc051bWJlcih0ZXh0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgY1RleHQgPSBjYihmb3JtYXROdW1iZXJSZW5kZXIodGV4dCwgLTEpKTtcbiAgICBmb3JtdWxhID0gaXNGb3JtdWxhKGZvcm11bGEpID8gZm9ybXVsYSA6IGNUZXh0O1xuICAgIGlmICghaXNOYU4oY1RleHQpKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwidGV4dFwiOiBwb3NpdGlvbiA9PT0gJ2JlZ2luJyA/IHN5bWJvbCArIGNUZXh0IDogY1RleHQgKyBzeW1ib2wsXG4gICAgICAgICAgICBcInZhbHVlXCI6IHRleHQsXG4gICAgICAgICAgICBcImZvcm11bGFzXCI6IGZvcm11bGEsXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG4vLyB3aGF0ID0gJ2lucHV0JyB8fCAnY2hhbmdlJ1xuZnVuY3Rpb24gdHJ5UGFyc2VUb051bShjZWxsLCByaSwgY2kpIHtcbiAgICByZXR1cm4gZ2V0VHlwZS5jYWxsKHRoaXMsIHJpLCBjaSwgY2VsbCk7XG59XG5cbmZ1bmN0aW9uIGdldFR5cGUocmksIGNpLCBjZWxsKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzO1xuICAgIGxldCB7cm93c30gPSB0aGlzO1xuICAgIGxldCBjZWxsU3R5bGUgPSBkYXRhLmdldENlbGxTdHlsZShyaSwgY2kpO1xuICAgIGxldCB7aXNWYWxpZCwgZGlmZn0gPSBkYXRlRGlmZihjZWxsLnRleHQpO1xuXG4gICAgbGV0IGZvcm1hdCA9IHJvd3MuZ2V0Q2VsbFN0eWxlQ29udmVydChjZWxsU3R5bGUsIGlzVmFsaWQpO1xuICAgIGlmIChmb3JtYXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gY2VsbC50ZXh0LCBmb3JtdWxhID0gY2VsbC5mb3JtdWxhcztcbiAgICAgICAgbGV0IF9jZWxsID0ge307XG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICBfY2VsbCA9IHtcbiAgICAgICAgICAgICAgICBcInRleHRcIjogZGlmZi50b0ZpeGVkKDIpLFxuICAgICAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogZm9ybXVsYSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0ID0gZm9ybWF0TnVtYmVyUmVuZGVyKHRleHQsIDIpO1xuICAgICAgICAgICAgX2NlbGwgPSB7XG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IHRleHQsXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBjZWxsLnRleHQsXG4gICAgICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiBmb3JtdWxhLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hhdmUoX2NlbGwudGV4dCkgJiYgaXNOdW1iZXIoX2NlbGwudGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwic3R5bGVcIjogZm9ybWF0LFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBfY2VsbC50ZXh0LFxuICAgICAgICAgICAgICAgIFwiY2VsbFwiOiBfY2VsbCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJzdGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcInN0eWxlXCI6IGZvcm1hdCxcbiAgICAgICAgICAgICAgICBcInRleHRcIjogX2NlbGwudGV4dCxcbiAgICAgICAgICAgICAgICBcImNlbGxcIjogX2NlbGwsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RhdGUnIHx8IGZvcm1hdCA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICBsZXQgdGV4dCA9IGNlbGwudGV4dDtcblxuICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgIGxldCBhcmdzID0gZm9ybWF0RGF0ZSh0ZXh0KTtcbiAgICAgICAgICAgIGxldCB7c3RhdGUsIGRhdGV9ID0gYXJncztcbiAgICAgICAgICAgIC8vIG1pbnV0ZSA9IGFyZ3MubWludXRlO1xuICAgICAgICAgICAgaXNWYWxpZCA9IHN0YXRlO1xuICAgICAgICAgICAgZGlmZiA9IGNlbGwudGV4dDtcbiAgICAgICAgICAgIHRleHQgPSBkYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkYXRldGltZScpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gY2hhbmdlRm9ybWF0KGZvcm1hdERhdGUoZGF0ZURpZmYodGV4dCkuZGlmZikuZGF0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IGlzVmFsaWQsXG4gICAgICAgICAgICBcInN0eWxlXCI6IGZvcm1hdCxcbiAgICAgICAgICAgIFwidGV4dFwiOiAhaXNIYXZlKGNlbGxTdHlsZSkgPyBkaWZmIDogdGV4dCxcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gZGlmZiwgZm9ybXVsYSA9IGNlbGwuZm9ybXVsYXM7XG4gICAgICAgICAgICBsZXQgX2NlbGwgPSB7XG4gICAgICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiByb3dzLnRvU3RyaW5nKGZvcm11bGEpLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiByb3dzLnRvU3RyaW5nKHRleHQpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IF9jZWxsLnRleHQsXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiOiBmb3JtYXQsXG4gICAgICAgICAgICAgICAgXCJjZWxsXCI6IF9jZWxsLFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRleHQgPSBjZWxsLnRleHQsIGZvcm11bGEgPSBjZWxsLmZvcm11bGFzO1xuICAgICAgICAgICAgbGV0IF9jZWxsID0ge1xuICAgICAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogZm9ybXVsYSxcbiAgICAgICAgICAgICAgICBcInRleHRcIjogdGV4dCxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJzdGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwic3R5bGVcIjogZm9ybWF0LFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBfY2VsbC50ZXh0LFxuICAgICAgICAgICAgICAgIFwiY2VsbFwiOiBfY2VsbCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAncm1iJykge1xuICAgICAgICBsZXQgdGV4dCA9IFwiXCIsIGZvcm11bGEgPSBcIlwiO1xuICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgdGV4dCA9IGRpZmY7XG4gICAgICAgICAgICBmb3JtdWxhID0gaXNGb3JtdWxhKGNlbGwuZm9ybXVsYXMpID8gY2VsbC5mb3JtdWxhcyA6IGRpZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0ID0gZm9ybWF0TnVtYmVyUmVuZGVyKGNlbGwudGV4dCwgMCk7XG4gICAgICAgICAgICBmb3JtdWxhID0gY2VsbC5mb3JtdWxhcztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBfY2VsbCA9IG1ha2VGb3JtYXRDZWxsKHt0ZXh0LCBmb3JtdWxhfSwge3N5bWJvbDogXCLvv6VcIiwgcG9zaXRpb246IFwiYmVnaW5cIn0sIChzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfY2VsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiOiBmb3JtYXQsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IF9jZWxsLnRleHQsXG4gICAgICAgICAgICAgICAgXCJjZWxsXCI6IF9jZWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAncGVyY2VudCcpIHtcbiAgICAgICAgbGV0IHRleHQgPSBcIlwiLCBmb3JtdWxhID0gXCJcIjtcblxuICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgdGV4dCA9IGRpZmY7XG4gICAgICAgICAgICBmb3JtdWxhID0gaXNGb3JtdWxhKGNlbGwuZm9ybXVsYXMpID8gY2VsbC5mb3JtdWxhcyA6IGRpZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0ID0gcm93cy51c2VPbmUoY2VsbC52YWx1ZSwgY2VsbC50ZXh0KTtcbiAgICAgICAgICAgIGZvcm11bGEgPSBjZWxsLmZvcm11bGFzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBfY2VsbCA9IG1ha2VGb3JtYXRDZWxsKHt0ZXh0LCBmb3JtdWxhfSwge3N5bWJvbDogXCIlXCIsIHBvc2l0aW9uOiBcImVuZFwifSwgKHMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIocyAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfY2VsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiOiBmb3JtYXQsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IF9jZWxsLnRleHQsXG4gICAgICAgICAgICAgICAgXCJjZWxsXCI6IF9jZWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIFwic3RhdGVcIjogZmFsc2UsXG4gICAgICAgIFwic3R5bGVcIjogZm9ybWF0LFxuICAgICAgICBcInRleHRcIjogY2VsbC50ZXh0LFxuICAgICAgICBcImNlbGxcIjoge30sXG4gICAgfTtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhUHJveHkge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHNldHRpbmdzLCBtZXRob2RzKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBoZWxwZXIubWVyZ2UoZGVmYXVsdFNldHRpbmdzLCBzZXR0aW5ncyB8fCB7fSk7XG4gICAgICAgIC8vIHNhdmUgZGF0YSBiZWdpblxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lIHx8ICdiZWxvbmdTaGVldCc7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IG1ldGhvZHM7XG4gICAgICAgIHRoaXMuZnJlZXplID0gWzAsIDBdO1xuICAgICAgICB0aGlzLnN0eWxlcyA9IFtdOyAvLyBBcnJheTxTdHlsZT5cbiAgICAgICAgdGhpcy5tZXJnZXMgPSBuZXcgTWVyZ2VzKCk7IC8vIFtDZWxsUmFuZ2UsIC4uLl1cbiAgICAgICAgdGhpcy5yb3dzID0gbmV3IFJvd3ModGhpcy5zZXR0aW5ncy5yb3csIHRoaXMpO1xuICAgICAgICB0aGlzLmNvbHMgPSBuZXcgQ29scyh0aGlzLnNldHRpbmdzLmNvbCk7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbnMgPSBuZXcgVmFsaWRhdGlvbnMoKTtcbiAgICAgICAgdGhpcy5oeXBlcmxpbmtzID0ge307XG4gICAgICAgIHRoaXMuY29tbWVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5zaG93RXF1YXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYWxjID0gbmV3IENhbGMoKTtcbiAgICAgICAgdGhpcy5wYXN0ZURpcmVjdGlvbnNBcnIgPSBbXTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhRm9yQ2FsYyA9IG51bGw7XG5cbiAgICAgICAgLy8gc2F2ZSBkYXRhIGVuZFxuXG4gICAgICAgIC8vIGRvbid0IHNhdmUgb2JqZWN0XG4gICAgICAgIHRoaXMubXVsdGlQcmVBY3Rpb24gPSBuZXcgTXVsdGlQcmVBY3Rpb24odGhpcyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBuZXcgU2VsZWN0b3IoKTtcbiAgICAgICAgdGhpcy5zY3JvbGwgPSBuZXcgU2Nyb2xsKCk7XG4gICAgICAgIC8vIHRoaXMuaGlzdG9yeSA9IGNyZWF0ZWQgSGlzdG9yeSh0aGlzKTtcbiAgICAgICAgdGhpcy5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCk7XG4gICAgICAgIHRoaXMubW92ZWQgPSBuZXcgTW92ZWQoKTtcbiAgICAgICAgdGhpcy5hdXRvRmlsdGVyID0gbmV3IEF1dG9GaWx0ZXIoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZXhjZXB0Um93U2V0ID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnNvcnRlZFJvd01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy51bnNvcnRlZFJvd01hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG5cbiAgICBhZGRWYWxpZGF0aW9uKG1vZGUsIHJlZiwgdmFsaWRhdG9yKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb2RlOicsIG1vZGUsICcsIHJlZjonLCByZWYsICcsIHZhbGlkYXRvcjonLCB2YWxpZGF0b3IpO1xuICAgICAgICB0aGlzLmNoYW5nZURhdGEoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9ucy5hZGQobW9kZSwgcmVmLCB2YWxpZGF0b3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW1vdmVWYWxpZGF0aW9uKCkge1xuICAgICAgICBjb25zdCB7cmFuZ2V9ID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbnMucmVtb3ZlKHJhbmdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdHJ5UGFyc2VUb051bShjZWxsLCByaSwgY2kpIHtcbiAgICAgICAgcmV0dXJuIHRyeVBhcnNlVG9OdW0uY2FsbCh0aGlzLCBjZWxsLCByaSwgY2kpO1xuICAgIH1cblxuICAgIGNsaWNrQ29weVBhc3RlKCkge1xuICAgICAgICBsZXQgcmkgPSB0aGlzLnNlbGVjdG9yLnJhbmdlLmVyaTtcbiAgICAgICAgbGV0IGNpID0gdGhpcy5zZWxlY3Rvci5yYW5nZS5lY2k7XG4gICAgICAgIGxldCB7cm93c30gPSB0aGlzO1xuICAgICAgICBjb25zdCBjZWxsID0gcm93cy5nZXRDZWxsT3JOZXcocmksIGNpKTtcbiAgICAgICAgY29uc3QgY2VsbDIgPSByb3dzLmdldENlbGxPck5ldyhyaSArIDEsIGNpKTtcbiAgICAgICAgaWYgKCFjZWxsIHx8ICFjZWxsLnRleHQgfHwgKGNlbGwyICYmIGNlbGwyLnRleHQpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVudGVyOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsZWZ0ID0gY2xpY2tDb3B5UGFzdGVIZWxwLmNhbGwodGhpcywgcmksIGNpIC0gMSk7XG4gICAgICAgIGxldCByaWdodCA9IGNsaWNrQ29weVBhc3RlSGVscC5jYWxsKHRoaXMsIHJpLCBjaSArIDEpO1xuICAgICAgICBsZXQgZXJpID0gbGVmdCA8IHJpZ2h0ID8gcmlnaHQgOiBsZWZ0O1xuXG4gICAgICAgIGxldCBlbnRlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGVyaSAmJiBlbnRlciA9PT0gZmFsc2U7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNlbGwzID0gcm93cy5nZXRDZWxsT3JOZXcocmkgKyBpLCBjaSk7XG5cbiAgICAgICAgICAgIGlmIChjZWxsMyAmJiBjZWxsMy50ZXh0KSB7XG4gICAgICAgICAgICAgICAgZXJpID0gcmkgKyBpO1xuICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGRzdENlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2UocmkgKyAxLCBjaSwgZXJpIC0gMSwgY2kpO1xuICAgICAgICBsZXQgc3JjQ2VsbFJhbmdlID0gbmV3IENlbGxSYW5nZShyaSwgY2ksIHJpLCBjaSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVudGVyOiB0cnVlLFxuICAgICAgICAgICAgZHN0Q2VsbFJhbmdlOiBkc3RDZWxsUmFuZ2UsXG4gICAgICAgICAgICBzcmNDZWxsUmFuZ2U6IHNyY0NlbGxSYW5nZVxuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgLy8gZ2V0U2VsZWN0ZWRWYWxpZGF0b3IoKSB7XG4gICAgLy8gICAgIGNvbnN0IHtyaSwgY2l9ID0gdGhpcy5zZWxlY3RvcjtcbiAgICAvLyAgICAgY29uc3QgdiA9IHRoaXMudmFsaWRhdGlvbnMuZ2V0KHJpLCBjaSk7XG4gICAgLy8gICAgIHJldHVybiB2ID8gdi52YWxpZGF0b3IgOiBudWxsO1xuICAgIC8vIH1cblxuICAgIGdldFNlbGVjdGVkVmFsaWRhdGlvbigpIHtcbiAgICAgICAgY29uc3Qge3JpLCBjaSwgcmFuZ2V9ID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgY29uc3QgdiA9IHRoaXMudmFsaWRhdGlvbnMuZ2V0KHJpLCBjaSk7XG4gICAgICAgIGNvbnN0IHJldCA9IHtyZWY6IHJhbmdlLnRvU3RyaW5nKCl9O1xuICAgICAgICBpZiAodiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0Lm1vZGUgPSB2Lm1vZGU7XG4gICAgICAgICAgICByZXQudmFsaWRhdG9yID0gdi52YWxpZGF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjYW5VbmRvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aVByZUFjdGlvbi5nZXRJdGVtcygxKS5sZW5ndGggPiAwO1xuICAgICAgICAvLyByZXR1cm4gdGhpcy5oaXN0b3J5LmNhblVuZG8oKTtcbiAgICB9XG5cbiAgICBjYW5SZWRvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aVByZUFjdGlvbi5nZXRJdGVtcygyKS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIHVuZG8oKSB7XG4gICAgICAgIHRoaXMubXVsdGlQcmVBY3Rpb24udW5kbygpO1xuICAgICAgICB0aGlzLmNoYW5nZURhdGFGb3JDYWxjID0gdGhpcy5nZXRDaGFuZ2VEYXRhVG9DYWxjKCk7XG4gICAgICAgIC8vIHRoaXMuaGlzdG9yeS51bmRvKHRoaXMuZ2V0RGF0YSgpLCAoZCkgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy5zZXREYXRhKGQpO1xuICAgICAgICAvLyB9LCBiZWxvbmdTaGVldCk7XG4gICAgfVxuXG4gICAgaGlzdG9yeUxpc3QoaXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aVByZUFjdGlvbi5nZXRJdGVtcyhpdGVtKTtcbiAgICB9XG5cbiAgICByZWRvKCkge1xuICAgICAgICB0aGlzLm11bHRpUHJlQWN0aW9uLnJlZG8oKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhRm9yQ2FsYyA9IHRoaXMuZ2V0Q2hhbmdlRGF0YVRvQ2FsYygpO1xuICAgICAgICAvLyB0aGlzLmhpc3RvcnkucmVkbyh0aGlzLmdldERhdGEoKSwgKGQpID0+IHtcbiAgICAgICAgLy8gICAgIHRoaXMuc2V0RGF0YShkKTtcbiAgICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgY29weSgpIHtcbiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jbGlwYm9hcmQuY29weSh0aGlzLnNlbGVjdG9yLnJhbmdlKTtcbiAgICB9XG5cbiAgICBtYWtlQ2VsbFByb3BBcnIocmFuZ2UsIGRzcmksIGRzY2kpIHtcbiAgICAgICAgbGV0IHtyb3dzfSA9IHRoaXM7XG4gICAgICAgIGxldCBkYXJyID0gW107XG4gICAgICAgIGxldCBjZWxscyA9IHJvd3MuZWFjaFJhbmdlKHJhbmdlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHtyaSwgY2ksIGNlbGx9ID0gY2VsbHNbaV07XG5cbiAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbCkgJiYgaXNIYXZlKGNlbGwuc3R5bGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGxldCBjc3R5bGUgPSB0aGlzLmRlZmF1bHRTdHlsZSgpO1xuICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUgPSB0aGlzLmFkZFN0eWxlKGNzdHlsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjZWxsUHJvcCA9IG5ldyBDZWxsUHJvcChyaSArIGRzcmksIGNpICsgZHNjaSwgY2VsbCwgeHkyZXhwcihyaSArIGRzcmksIGNpICsgZHNjaSkpO1xuICAgICAgICAgICAgZGFyci5wdXNoKGNlbGxQcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXJyO1xuICAgIH1cblxuICAgIHNldENlbGxCeUNlbGxQcm9wKHBBcnIsIGNiKSB7XG4gICAgICAgIGxldCB7cm93c30gPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7cmksIGNpLCBjZWxsfSA9IHBBcnJbaV07XG4gICAgICAgICAgICBpZiAoaXNIYXZlKGNlbGwpICYmIGlzSGF2ZShjZWxsLnN0eWxlKSkge1xuICAgICAgICAgICAgICAgIHJvd3Muc2V0Q2VsbChyaSwgY2ksIGNlbGwsICdzdHlsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2IocmksIGNpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhaW50Rm9ybWF0Q2hhbmdlKGNiKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlRGF0YSgoKSA9PiB7XG4gICAgICAgICAgICBsZXQge2NsaXBib2FyZCwgICBzZWxlY3Rvcn0gPSB0aGlzO1xuICAgICAgICAgICAgbGV0IHtyYW5nZX0gPSBjbGlwYm9hcmQ7XG4gICAgICAgICAgICBsZXQgc3JpID0gc2VsZWN0b3Iucmk7XG4gICAgICAgICAgICBsZXQgc2NpID0gc2VsZWN0b3IuY2k7XG5cbiAgICAgICAgICAgIGxldCBkc3JpID0gc3JpIC0gcmFuZ2Uuc3JpO1xuICAgICAgICAgICAgbGV0IGRzY2kgPSBzY2kgLSByYW5nZS5zY2k7XG4gICAgICAgICAgICBsZXQgZGFyciA9IHRoaXMubWFrZUNlbGxQcm9wQXJyKHJhbmdlLCBkc3JpLCBkc2NpKTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLnJhbmdlLmVyaSAtIHNlbGVjdG9yLnJhbmdlLnNyaSA9PT0gMCAmJiBzZWxlY3Rvci5yYW5nZS5lY2kgLSBzZWxlY3Rvci5yYW5nZS5zY2kgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENlbGxCeUNlbGxQcm9wKGRhcnIsIGNiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhaW50Rm9ybWF0ID0gbmV3IFBhaW50Rm9ybWF0KHJhbmdlLCBzZWxlY3Rvci5yYW5nZSk7XG4gICAgICAgICAgICAgICAgbGV0IHBhaW50VHlwZSA9IHBhaW50Rm9ybWF0LmdldFBhaW50VHlwZSgpO1xuICAgICAgICAgICAgICAgIGxldCBwQXJyID0gcGFpbnRGb3JtYXQubWFrZVBhaW50QXJyKHBhaW50VHlwZSwgZGFycik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldENlbGxCeUNlbGxQcm9wKHBBcnIsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge3R5cGU6IDEyLCBjZWxsUmFuZ2U6IHRoaXMuc2VsZWN0b3IucmFuZ2V9KTtcbiAgICB9XG5cbiAgICBtb3ZlKCkge1xuICAgICAgICB0aGlzLm1vdmVkLm1vdmUoKTtcbiAgICB9XG5cbiAgICBjdXQoKSB7XG4gICAgICAgIHRoaXMuY2xpcGJvYXJkLmN1dCh0aGlzLnNlbGVjdG9yLnJhbmdlKTtcbiAgICB9XG5cbiAgICBwYXN0ZShjZWxsUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcblxuICAgICAgICB9LCB7dHlwZTogNiwgY2VsbFJhbmdlOiBjZWxsUmFuZ2V9KTtcbiAgICB9XG5cbiAgICAvLyB3aGF0OiBhbGwgfCB0ZXh0IHwgZm9ybWF0XG4gICAgLy8gcGFzdGUod2hhdCA9ICdhbGwnLCBlcnJvciA9ICgpID0+IHtcbiAgICAvLyB9KSB7XG4gICAgLy9cbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ3NJbmRleGVzOicsIHNJbmRleGVzKTtcbiAgICAvLyAgICAgLy8gY29uc3Qge2NsaXBib2FyZCwgc2VsZWN0b3J9ID0gdGhpcztcbiAgICAvLyAgICAgLy8gaWYgKGNsaXBib2FyZC5pc0NsZWFyKCkpIHJldHVybiBmYWxzZTtcbiAgICAvLyAgICAgLy8gaWYgKCFjYW5QYXN0ZS5jYWxsKHRoaXMsIGNsaXBib2FyZC5yYW5nZSwgc2VsZWN0b3IucmFuZ2UsIGVycm9yKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgICAvL1xuICAgIC8vICAgICAvLyB0aGlzLmNoYW5nZURhdGEoKCkgPT4ge1xuICAgIC8vICAgICAvLyAgICAgaWYgKGNsaXBib2FyZC5pc0NvcHkoKSkge1xuICAgIC8vICAgICAvLyAgICAgICAgIGNvcHlQYXN0ZS5jYWxsKHRoaXMsIGNsaXBib2FyZC5yYW5nZSwgc2VsZWN0b3IucmFuZ2UsIHdoYXQpO1xuICAgIC8vICAgICAvLyAgICAgfSBlbHNlIGlmIChjbGlwYm9hcmQuaXNDdXQoKSkge1xuICAgIC8vICAgICAvLyAgICAgICAgIGN1dFBhc3RlLmNhbGwodGhpcywgY2xpcGJvYXJkLnJhbmdlLCBzZWxlY3Rvci5yYW5nZSk7XG4gICAgLy8gICAgIC8vICAgICB9XG4gICAgLy8gICAgIC8vIH0pO1xuICAgIC8vICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyB9XG5cbiAgICBhdXRvZmlsbChjZWxsUmFuZ2UsIHdoYXQsIGVycm9yID0gKCkgPT4ge1xuICAgIH0pIHtcbiAgICAgICAgY29uc3Qgc3JjUmFuZ2UgPSB0aGlzLnNlbGVjdG9yLnJhbmdlO1xuICAgICAgICBpZiAoIWNhblBhc3RlLmNhbGwodGhpcywgc3JjUmFuZ2UsIGNlbGxSYW5nZSwgZXJyb3IpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhbmdlRGF0YSgoKSA9PiB7XG4gICAgICAgICAgICBjb3B5UGFzdGUuY2FsbCh0aGlzLCBzcmNSYW5nZSwgY2VsbFJhbmdlLCB3aGF0LCB0cnVlKTtcbiAgICAgICAgfSwge3R5cGU6IDUsIGNlbGxSYW5nZTogY2VsbFJhbmdlfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG5cbiAgICBjbGlja0F1dG9maWxsKHNyY1JhbmdlLCBjZWxsUmFuZ2UsIHdoYXQsIGVycm9yID0gKCkgPT4ge1xuICAgIH0pIHtcbiAgICAgICAgaWYgKCFjYW5QYXN0ZS5jYWxsKHRoaXMsIHNyY1JhbmdlLCBjZWxsUmFuZ2UsIGVycm9yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLmNoYW5nZURhdGEoKCkgPT4ge1xuICAgICAgICAgICAgY29weVBhc3RlLmNhbGwodGhpcywgc3JjUmFuZ2UsIGNlbGxSYW5nZSwgd2hhdCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjbGVhckNsaXBib2FyZCgpIHtcbiAgICAgICAgdGhpcy5jbGlwYm9hcmQuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBjYWxTZWxlY3RlZFJhbmdlQnlFbmQocmksIGNpKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNlbGVjdG9yLCByb3dzLCBjb2xzLCBtZXJnZXMsXG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICBsZXQge1xuICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgICAgICB9ID0gc2VsZWN0b3IucmFuZ2U7XG4gICAgICAgIGNvbnN0IGNyaSA9IHNlbGVjdG9yLnJpO1xuICAgICAgICBjb25zdCBjY2kgPSBzZWxlY3Rvci5jaTtcbiAgICAgICAgbGV0IFtucmksIG5jaV0gPSBbcmksIGNpXTtcbiAgICAgICAgaWYgKHJpIDwgMCkgbnJpID0gcm93cy5sZW4gLSAxO1xuICAgICAgICBpZiAoY2kgPCAwKSBuY2kgPSBjb2xzLmxlbiAtIDE7XG4gICAgICAgIC8vIHJvdyBpbmRleFxuICAgICAgICBpZiAobnJpIDw9IGNyaSkgW3NyaSwgZXJpXSA9IFtucmksIGNyaV07XG4gICAgICAgIGVsc2UgZXJpID0gbnJpO1xuICAgICAgICAvLyBjb2wgaW5kZXhcbiAgICAgICAgaWYgKG5jaSA8PSBjY2kpIFtzY2ksIGVjaV0gPSBbbmNpLCBjY2ldO1xuICAgICAgICBlbHNlIGVjaSA9IG5jaTtcbiAgICAgICAgc2VsZWN0b3IucmFuZ2UgPSBtZXJnZXMudW5pb24obmV3IENlbGxSYW5nZShcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgKSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzZWxlY3Rvci5yYW5nZTonLCBzZWxlY3Rvci5yYW5nZSk7XG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5yYW5nZTtcbiAgICB9XG5cblxuICAgIGNhbFNlbGVjdGVkUmFuZ2VCeVN0YXJ0KHJpLCBjaSkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzZWxlY3Rvciwgcm93cywgY29scywgbWVyZ2VzLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgbGV0IGNlbGxSYW5nZSA9IG1lcmdlcy5nZXRGaXJzdEluY2x1ZGVzKHJpLCBjaSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjZWxsUmFuZ2U6JywgY2VsbFJhbmdlLCByaSwgY2ksIG1lcmdlcyk7XG4gICAgICAgIGlmIChjZWxsUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2UocmksIGNpLCByaSwgY2kpO1xuICAgICAgICAgICAgaWYgKHJpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGNlbGxSYW5nZS5zcmkgPSAwO1xuICAgICAgICAgICAgICAgIGNlbGxSYW5nZS5lcmkgPSByb3dzLmxlbiAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2kgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2VsbFJhbmdlLnNjaSA9IDA7XG4gICAgICAgICAgICAgICAgY2VsbFJhbmdlLmVjaSA9IGNvbHMubGVuIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgcmV0dXJuIGNlbGxSYW5nZTtcbiAgICB9XG5cblxuICAgIHNldFNlbGVjdGVkQ2VsbEF0dHIocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlRGF0YSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7c2VsZWN0b3IsIHN0eWxlcywgcm93c30gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSAnbWVyZ2UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB0aGlzLm1lcmdlKCk7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLnVubWVyZ2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICdib3JkZXInKSB7XG4gICAgICAgICAgICAgICAgc2V0U3R5bGVCb3JkZXJzLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJ2NlbGxGb3JtdWxhUHJveHknKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IHJvd3MuZ2V0Q2VsbE9yTmV3KHNlbGVjdG9yLnJpLCBzZWxlY3Rvci5jaSk7XG4gICAgICAgICAgICAgICAgY2VsbC50ZXh0ID0gYD0ke3ZhbHVlfSgpYDtcbiAgICAgICAgICAgICAgICBjZWxsLmZvcm11bGFzID0gYD0ke3ZhbHVlfSgpYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IucmFuZ2UuZWFjaCgocmksIGNpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxsID0gcm93cy5nZXRDZWxsT3JOZXcocmksIGNpKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgY3N0eWxlID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbC5zdHlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzdHlsZSA9IGhlbHBlci5jbG9uZURlZXAoc3R5bGVzW2NlbGwuc3R5bGVdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkgPT09ICdmb3JtYXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3R5bGUuZm9ybWF0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjZWxsLnRleHQgPSBjZWxsLnRleHQucmVwbGFjZShcIsKlXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2VsbC5mb3JtdWxhcyA9IGNlbGwuZm9ybXVsYXMucmVwbGFjZShcIsKlXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5zZXRDZWxsVGV4dChyaSwgY2ksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjZWxsLnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHRoaXMuYWRkU3R5bGUoY3N0eWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ2Zvcm1hdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5yb3dzLm5hbWUyU2hlZXRQcm94eS5jaGFuZ2UocmksIGNpLCBjZWxsLCBkZWVwQ29weShjZWxsKSwgJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAnZm9udC1ib2xkJyB8fCBwcm9wZXJ0eSA9PT0gJ2ZvbnQtaXRhbGljJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfHwgcHJvcGVydHkgPT09ICdmb250LW5hbWUnIHx8IHByb3BlcnR5ID09PSAnZm9udC1zaXplJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmZvbnQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5mb250W3Byb3BlcnR5LnNwbGl0KCctJylbMV1dID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3R5bGUuZm9udCA9IE9iamVjdC5hc3NpZ24oY3N0eWxlLmZvbnQgfHwge30sIG5mb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUgPSB0aGlzLmFkZFN0eWxlKGNzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICdmbGV4aWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmV4Y2VwdFJvd1NldC5oYXMocmkgKyAxKSAmJiB0aGlzLmV4Y2VwdFJvd1NldC5oYXMocmkgKyAyKSAmJiAhdGhpcy5leGNlcHRSb3dTZXQuaGFzKHJpICsgMykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4Y2VwdFJvd1NldC5kZWxldGUocmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjZXB0Um93U2V0LmRlbGV0ZShyaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjZXB0Um93U2V0LmRlbGV0ZShyaSArIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4Y2VwdFJvd1NldC5hZGQocmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjZXB0Um93U2V0LmFkZChyaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjZXB0Um93U2V0LmFkZChyaSArIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3N0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZSA9IHRoaXMuYWRkU3R5bGUoY3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJ3N0cmlrZScgfHwgcHJvcGVydHkgPT09ICd0ZXh0d3JhcCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHByb3BlcnR5ID09PSAndW5kZXJsaW5lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfHwgcHJvcGVydHkgPT09ICdhbGlnbicgfHwgcHJvcGVydHkgPT09ICd2YWxpZ24nXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBwcm9wZXJ0eSA9PT0gJ2NvbG9yJyB8fCBwcm9wZXJ0eSA9PT0gJ2JnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlID0gdGhpcy5hZGRTdHlsZShjc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHt0eXBlOiAxMSwgY2VsbFJhbmdlOiB0aGlzLnNlbGVjdG9yLnJhbmdlLCBwcm9wZXJ0eSwgdmFsdWV9KTtcbiAgICB9XG5cbiAgICAvLyBzdGF0ZTogaW5wdXQgfCBmaW5pc2hlZFxuICAgIHNldFNlbGVjdGVkQ2VsbFRleHQodGV4dCwgc3RhdGUgPSAnaW5wdXQnKSB7XG4gICAgICAgIGNvbnN0IHtyaSwgY2l9ID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgbGV0IG5yaSA9IHJpO1xuICAgICAgICBpZiAodGhpcy51bnNvcnRlZFJvd01hcC5oYXMocmkpKSB7XG4gICAgICAgICAgICBucmkgPSB0aGlzLnVuc29ydGVkUm93TWFwLmdldChyaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRDZWxsVGV4dChucmksIGNpLCB7dGV4dH0sIHN0YXRlKTtcbiAgICAgICAgdGhpcy5yZXNldEF1dG9GaWx0ZXIoKTtcbiAgICB9XG5cbiAgICAvLyBzdGF0ZTogaW5wdXQgfCBmaW5pc2hlZFxuICAgIHNldFNlbGVjdGVkQ2VsbCh0ZXh0LCBzdGF0ZSA9ICdpbnB1dCcsIGZvcm11bGFzLCByaSwgY2kpIHtcbiAgICAgICAgdGhpcy5zZXRDZWxsQWxsKHJpLCBjaSwgdGV4dCwgZm9ybXVsYXMsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5yZXNldEF1dG9GaWx0ZXIoKTtcbiAgICB9XG5cbiAgICBnZXRTZWxlY3RlZENlbGwoKSB7XG4gICAgICAgIGNvbnN0IHtyaSwgY2l9ID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgbGV0IG5yaSA9IHJpO1xuICAgICAgICBpZiAodGhpcy51bnNvcnRlZFJvd01hcC5oYXMocmkpKSB7XG4gICAgICAgICAgICBucmkgPSB0aGlzLnVuc29ydGVkUm93TWFwLmdldChyaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucm93cy5nZXRDZWxsKG5yaSwgY2kpO1xuICAgIH1cblxuICAgIGVkaXRvckNoYW5nZVRvSGlzdG9yeShvbGRDZWxsLCB7cmksIGNpfSwgdHlwZSkge1xuICAgICAgICBpZiAocmkgPT09IC0xIHx8IGNpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcInN0YXRlXCI6IGZhbHNlfVxuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdDZWxsID0gdGhpcy5yb3dzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgLy8gaWYgKG9sZENlbGwudGV4dCA9PT0gbmV3Q2VsbC50ZXh0IHx8IG9sZENlbGwuZm9ybXVsYXMgPT09IG5ld0NlbGwudGV4dCkge1xuICAgICAgICAvLyAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgICAgICBcInN0YXRlXCI6IGZhbHNlLFxuICAgICAgICAvLyAgICAgfTtcbiAgICAgICAgLy8gfVxuICAgICAgICBsZXQge211bHRpUHJlQWN0aW9ufSA9IHRoaXM7XG4gICAgICAgIGxldCBleHByID0geHkyZXhwcihjaSwgcmkpO1xuICAgICAgICBsZXQgc3RlcCA9IG11bHRpUHJlQWN0aW9uLmdldFN0ZXBUeXBlKHR5cGUsIHtyaSwgY2ksIGV4cHIsIHRleHQ6IG5ld0NlbGwudGV4dH0pO1xuXG4gICAgICAgIGxldCBvYyA9IG5ldyBDZWxsUHJvcChyaSwgY2ksIG9sZENlbGwsIGV4cHIpO1xuICAgICAgICBsZXQgbmMgPSBuZXcgQ2VsbFByb3AocmksIGNpLCBuZXdDZWxsLCBleHByKTtcbiAgICAgICAgbXVsdGlQcmVBY3Rpb24uYWRkU3RlcChzdGVwLCB7b2xkQ2VsbDogW29jXSwgbmV3Q2VsbDogW25jXX0pO1xuICAgICAgICB0aGlzLmNoYW5nZURhdGFGb3JDYWxjID0gdGhpcy5nZXRDaGFuZ2VEYXRhVG9DYWxjKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IHRydWVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZVRvSGlzdG9yeSh7cmksIHR5cGUsIGNpLCBjZWxsUmFuZ2UsIHByb3BlcnR5LCB2YWx1ZSwgb2xkQ2VsbCwgb2xkTWVyZ2VzRGF0YX0sIG9sZFN0ZXApIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4ge1wic3RhdGVcIjogZmFsc2UsfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHttdWx0aVByZUFjdGlvbn0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7c2VsZWN0b3J9ID0gdGhpcztcblxuICAgICAgICBsZXQgc3RlcCA9IG11bHRpUHJlQWN0aW9uLmdldFN0ZXBUeXBlKHR5cGUsIHtcbiAgICAgICAgICAgIGV4cHI6ICcnLFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG9sZENlbGwsXG4gICAgICAgICAgICByYW5nZTogc2VsZWN0b3IucmFuZ2UsXG4gICAgICAgICAgICByaSxcbiAgICAgICAgICAgIGNpLFxuICAgICAgICAgICAgY2VsbFJhbmdlOiBjZWxsUmFuZ2UsXG4gICAgICAgIH0pO1xuICAgICAgICBtdWx0aVByZUFjdGlvbi5hZGRTdGVwKHN0ZXAsIHtvbGRDZWxsLCBvbGRNZXJnZXNEYXRhLCBuZXdNZXJnZXNEYXRhOiB0aGlzLm1lcmdlcy5nZXREYXRhKCksIG9sZFN0ZXAsfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IHRydWVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFNlbGVjdGVkQ2VsbFJpQ2kocmksIGNpKSB7XG4gICAgICAgIGxldCBucmkgPSByaTtcbiAgICAgICAgaWYgKHRoaXMudW5zb3J0ZWRSb3dNYXAuaGFzKHJpKSkge1xuICAgICAgICAgICAgbnJpID0gdGhpcy51bnNvcnRlZFJvd01hcC5nZXQocmkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3MuZ2V0Q2VsbChucmksIGNpKTtcbiAgICB9XG5cbiAgICB4eUluU2VsZWN0ZWRSZWN0KHgsIHkpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gdGhpcy5nZXRTZWxlY3RlZFJlY3QoKTtcbiAgICAgICAgY29uc3QgeDEgPSB4IC0gdGhpcy5jb2xzLmluZGV4V2lkdGg7XG4gICAgICAgIGNvbnN0IHkxID0geSAtIHRoaXMucm93cy5oZWlnaHQ7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd4OicsIHgsICcseTonLCB5LCAnbGVmdDonLCBsZWZ0LCAndG9wOicsIHRvcCk7XG4gICAgICAgIHJldHVybiB4MSA+IGxlZnQgJiYgeDEgPCAobGVmdCArIHdpZHRoKVxuICAgICAgICAgICAgJiYgeTEgPiB0b3AgJiYgeTEgPCAodG9wICsgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBnZXRTZWxlY3RlZFJlY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlY3QodGhpcy5zZWxlY3Rvci5yYW5nZSk7XG4gICAgfVxuXG4gICAgZ2V0Q2xpcGJvYXJkUmVjdCgpIHtcbiAgICAgICAgY29uc3Qge2NsaXBib2FyZH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWNsaXBib2FyZC5pc0NsZWFyKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJlY3QoY2xpcGJvYXJkLnJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge2xlZnQ6IC0xMDAsIHRvcDogLTEwMH07XG4gICAgfVxuXG5cbiAgICBnZXRNb3ZlUmVjdChyYW5nZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWN0KHJhbmdlKTtcbiAgICB9XG5cbiAgICBnZXRSZWN0KGNlbGxSYW5nZSkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzY3JvbGwsIHJvd3MsIGNvbHMsIGV4Y2VwdFJvd1NldCxcbiAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgfSA9IGNlbGxSYW5nZTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3NyaTonLCBzcmksICcsc2NpOicsIHNjaSwgJywgZXJpOicsIGVyaSwgJywgZWNpOicsIGVjaSk7XG4gICAgICAgIC8vIG5vIHNlbGVjdG9yXG4gICAgICAgIGlmIChzcmkgPCAwICYmIHNjaSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbGVmdDogMCwgbDogMCwgdG9wOiAwLCB0OiAwLCBzY3JvbGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlZnQgPSBjb2xzLnN1bVdpZHRoKDAsIHNjaSk7XG4gICAgICAgIGNvbnN0IHRvcCA9IHJvd3Muc3VtSGVpZ2h0KDAsIHNyaSwgZXhjZXB0Um93U2V0KTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcm93cy5zdW1IZWlnaHQoc3JpLCBlcmkgKyAxLCBleGNlcHRSb3dTZXQpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGNvbHMuc3VtV2lkdGgoc2NpLCBlY2kgKyAxKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3NyaTonLCBzcmksICcsIHNjaTonLCBzY2ksICcsIGVyaTonLCBlcmksICcsIGVjaTonLCBlY2kpO1xuICAgICAgICBsZXQgbGVmdDAgPSBsZWZ0IC0gc2Nyb2xsLng7XG4gICAgICAgIGxldCB0b3AwID0gdG9wIC0gc2Nyb2xsLnk7XG4gICAgICAgIGNvbnN0IGZzaCA9IHRoaXMuZnJlZXplVG90YWxIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgZnN3ID0gdGhpcy5mcmVlemVUb3RhbFdpZHRoKCk7XG4gICAgICAgIGlmIChmc3cgPiAwICYmIGZzdyA+IGxlZnQpIHtcbiAgICAgICAgICAgIGxlZnQwID0gbGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnNoID4gMCAmJiBmc2ggPiB0b3ApIHtcbiAgICAgICAgICAgIHRvcDAgPSB0b3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGw6IGxlZnQsXG4gICAgICAgICAgICB0OiB0b3AsXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0MCxcbiAgICAgICAgICAgIHRvcDogdG9wMCxcbiAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgc2Nyb2xsLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldENlbGxSZWN0QnlYWSh4LCB5KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNjcm9sbCwgbWVyZ2VzLCByb3dzLCBjb2xzLFxuICAgICAgICB9ID0gdGhpcztcblxuICAgICAgICBsZXQge3JpLCB0b3AsIGhlaWdodH0gPSBnZXRDZWxsUm93QnlZLmNhbGwodGhpcywgeSwgc2Nyb2xsLnkpO1xuICAgICAgICBsZXQge2NpLCBsZWZ0LCB3aWR0aH0gPSBnZXRDZWxsQ29sQnlYLmNhbGwodGhpcywgeCwgc2Nyb2xsLngpO1xuXG4gICAgICAgIGlmIChjaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHdpZHRoID0gY29scy50b3RhbFdpZHRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJpID09PSAtMSkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gcm93cy50b3RhbEhlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaSA+PSAwIHx8IGNpID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VzLmdldEZpcnN0SW5jbHVkZXMocmksIGNpKTtcbiAgICAgICAgICAgIGlmIChtZXJnZSkge1xuICAgICAgICAgICAgICAgIHJpID0gbWVyZ2Uuc3JpO1xuICAgICAgICAgICAgICAgIGNpID0gbWVyZ2Uuc2NpO1xuICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICB9ID0gdGhpcy5jZWxsUmVjdChyaSwgY2kpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmksIGNpLCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgIH07XG4gICAgfVxuXG5cbiAgICBnZXRDZWxsUmVjdEJ5WFlXaXRoTm90VG90YWxSZXN1bHQoeCwgeSkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzY3JvbGwsIG1lcmdlcyxcbiAgICAgICAgfSA9IHRoaXM7XG5cbiAgICAgICAgbGV0IHtyaSwgdG9wLCBoZWlnaHR9ID0gZ2V0Q2VsbFJvd0J5WS5jYWxsKHRoaXMsIHksIHNjcm9sbC55KTtcbiAgICAgICAgbGV0IHtjaSwgbGVmdCwgd2lkdGh9ID0gZ2V0Q2VsbENvbEJ5WC5jYWxsKHRoaXMsIHgsIHNjcm9sbC54KTtcblxuXG4gICAgICAgIGlmIChjaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIC8vIHdpZHRoID0gY29scy50b3RhbFdpZHRoKCk7XG4gICAgICAgICAgICAvLyBsZXQgYXJncyA9IGdldENlbGxSb3dCeUFic1guY2FsbCh0aGlzLCBzY3JvbGwueCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhhcmdzKTtcbiAgICAgICAgICAgIC8vIC8vIGNpID0gYXJncy5jaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmkgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBsZXQgYXJncyA9IGdldENlbGxSb3dCeUFic1kuY2FsbCh0aGlzLCBzY3JvbGwueSk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIjExNzk6IFwiLCBhcmdzLnJpKTtcbiAgICAgICAgICAgIC8vIHJpID0gYXJncy5yaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmkgPj0gMCB8fCBjaSA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZSA9IG1lcmdlcy5nZXRGaXJzdEluY2x1ZGVzKHJpLCBjaSk7XG4gICAgICAgICAgICBpZiAobWVyZ2UpIHtcbiAgICAgICAgICAgICAgICByaSA9IG1lcmdlLnNyaTtcbiAgICAgICAgICAgICAgICBjaSA9IG1lcmdlLnNjaTtcbiAgICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgICAgICAgICAgfSA9IHRoaXMuY2VsbFJlY3QocmksIGNpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJpLCBjaSwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgaXNTaWdubGVTZWxlY3RlZCgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3JpLCBzY2ksIGVyaSwgZWNpLFxuICAgICAgICB9ID0gdGhpcy5zZWxlY3Rvci5yYW5nZTtcbiAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuZ2V0Q2VsbChzcmksIHNjaSk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwubWVyZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IFtybiwgY25dID0gY2VsbC5tZXJnZTtcbiAgICAgICAgICAgIGlmIChzcmkgKyBybiA9PT0gZXJpICYmIHNjaSArIGNuID09PSBlY2kpIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhdGhpcy5zZWxlY3Rvci5tdWx0aXBsZSgpO1xuICAgIH1cblxuICAgIGNhblVubWVyZ2UoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgfSA9IHRoaXMuc2VsZWN0b3IucmFuZ2U7XG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldENlbGwoc3JpLCBzY2kpO1xuICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLm1lcmdlKSB7XG4gICAgICAgICAgICBjb25zdCBbcm4sIGNuXSA9IGNlbGwubWVyZ2U7XG4gICAgICAgICAgICBpZiAoc3JpICsgcm4gPT09IGVyaSAmJiBzY2kgKyBjbiA9PT0gZWNpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cbiAgICBtZXJnZSgpIHtcbiAgICAgICAgY29uc3Qge3NlbGVjdG9yLCByb3dzfSA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmlzU2lnbmxlU2VsZWN0ZWQoKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBbcm4sIGNuXSA9IHNlbGVjdG9yLnNpemUoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21lcmdlOicsIHJuLCBjbik7XG4gICAgICAgIGlmIChybiA+IDEgfHwgY24gPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB7c3JpLCBzY2l9ID0gc2VsZWN0b3IucmFuZ2U7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gcm93cy5nZXRDZWxsT3JOZXcoc3JpLCBzY2kpO1xuICAgICAgICAgICAgY2VsbC5tZXJnZSA9IFtybiAtIDEsIGNuIC0gMV07XG4gICAgICAgICAgICB0aGlzLm1lcmdlcy5hZGQoc2VsZWN0b3IucmFuZ2UpO1xuICAgICAgICAgICAgLy8gZGVsZXRlIG1lcmdlIGNlbGxzXG4gICAgICAgICAgICB0aGlzLnJvd3MuZGVsZXRlQ2VsbHMoc2VsZWN0b3IucmFuZ2UpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NlbGw6JywgY2VsbCwgdGhpcy5kKTtcbiAgICAgICAgICAgIHRoaXMucm93cy5zZXRDZWxsKHNyaSwgc2NpLCBjZWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVubWVyZ2UoKSB7XG4gICAgICAgIGNvbnN0IHtzZWxlY3Rvcn0gPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNTaWdubGVTZWxlY3RlZCgpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHtzcmksIHNjaX0gPSBzZWxlY3Rvci5yYW5nZTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucm93cy5kZWxldGVDZWxsKHNyaSwgc2NpLCAnbWVyZ2UnKTtcbiAgICAgICAgICAgIHRoaXMubWVyZ2VzLmRlbGV0ZVdpdGhpbihzZWxlY3Rvci5yYW5nZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNhbkF1dG9maWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5hdXRvRmlsdGVyLmFjdGl2ZSgpO1xuICAgIH1cblxuICAgIGF1dG9maWx0ZXIoKSB7XG4gICAgICAgIGNvbnN0IHthdXRvRmlsdGVyLCBzZWxlY3Rvcn0gPSB0aGlzO1xuICAgICAgICB0aGlzLmNoYW5nZURhdGEoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGF1dG9GaWx0ZXIuYWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICBhdXRvRmlsdGVyLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5leGNlcHRSb3dTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0ZWRSb3dNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51bnNvcnRlZFJvd01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHYgPSBzZWxlY3Rvci5yYW5nZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGxldCBlcmkgPSBzZWxlY3Rvci5yYW5nZS5lcmk7XG4gICAgICAgICAgICAgICAgY29uc3Qge3Jvd3N9ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBzZWxlY3Rvci5yYW5nZS5zY2k7IGkgPD0gc2VsZWN0b3IucmFuZ2UuZWNpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlID0gbmV3IENlbGxSYW5nZShzZWxlY3Rvci5yYW5nZS5zcmksIGksIHNlbGVjdG9yLnJhbmdlLnNyaSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gcm93cy5hdXRvRmlsdGVyUmVmKHYsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyaSA8IHJhbmdlLmVyaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJpID0gcmFuZ2UuZXJpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc2VsZWN0b3IucmFuZ2Uuc3JpLCBzZWxlY3Rvci5yYW5nZS5zY2ksIGVyaSwgc2VsZWN0b3IucmFuZ2UuZWNpKTtcbiAgICAgICAgICAgICAgICBhdXRvRmlsdGVyLnJlZiA9IHJhbmdlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRocm93Rm9ybXVsYSgpIHtcbiAgICAgICAgY29uc3Qge3NlbGVjdG9yLCByb3dzfSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdG9yLnJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gcm93cy5nZXRDZWxsT3JOZXcoaSwgaik7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50ZXh0ICYmIGNlbGwuZm9ybXVsYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93cy5zZXRDZWxsQWxsKGksIGosIGNlbGwudGV4dCwgY2VsbC50ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0QXV0b0ZpbHRlcihjaSwgb3JkZXIsIG9wZXJhdG9yLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCB7YXV0b0ZpbHRlcn0gPSB0aGlzO1xuICAgICAgICBhdXRvRmlsdGVyLmFkZEZpbHRlcihjaSwgb3BlcmF0b3IsIHZhbHVlKTtcbiAgICAgICAgYXV0b0ZpbHRlci5zZXRTb3J0KGNpLCBvcmRlcik7XG4gICAgICAgIHRoaXMucmVzZXRBdXRvRmlsdGVyKCk7XG4gICAgfVxuXG4gICAgcmVzZXRBdXRvRmlsdGVyKCkge1xuICAgICAgICBjb25zdCB7YXV0b0ZpbHRlciwgcm93c30gPSB0aGlzO1xuICAgICAgICBpZiAoIWF1dG9GaWx0ZXIuYWN0aXZlKCkpIHJldHVybjtcbiAgICAgICAgY29uc3Qge3NvcnR9ID0gYXV0b0ZpbHRlcjtcblxuICAgICAgICBjb25zdCB7cnNldCwgZnNldH0gPSBhdXRvRmlsdGVyLmZpbHRlcmVkUm93cygociwgYykgPT4gcm93cy5nZXRDZWxsKHIsIGMpKTtcbiAgICAgICAgY29uc3QgZmFyeSA9IEFycmF5LmZyb20oZnNldCk7XG4gICAgICAgIGNvbnN0IG9sZEFyeSA9IEFycmF5LmZyb20oZnNldCk7XG4gICAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgICAgICBmYXJ5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc29ydC5vcmRlciA9PT0gJ2FzYycpIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICBpZiAoc29ydC5vcmRlciA9PT0gJ2Rlc2MnKSByZXR1cm4gYiAtIGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV4Y2VwdFJvd1NldCA9IHJzZXQ7XG4gICAgICAgIHRoaXMuc29ydGVkUm93TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnVuc29ydGVkUm93TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBmYXJ5LmZvckVhY2goKGl0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb3J0ZWRSb3dNYXAuc2V0KG9sZEFyeVtpbmRleF0sIGl0KTtcbiAgICAgICAgICAgIHRoaXMudW5zb3J0ZWRSb3dNYXAuc2V0KGl0LCBvbGRBcnlbaW5kZXhdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlQ2VsbCh3aGF0ID0gJ2FsbCcpIHtcbiAgICAgICAgY29uc3Qge3NlbGVjdG9yfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2hhbmdlRGF0YSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJvd3MuZGVsZXRlQ2VsbHMoc2VsZWN0b3IucmFuZ2UsIHdoYXQpO1xuICAgICAgICAgICAgaWYgKHdoYXQgPT09ICdhbGwnIHx8IHdoYXQgPT09ICdmb3JtYXQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXJnZXMuZGVsZXRlV2l0aGluKHNlbGVjdG9yLnJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge3R5cGU6IDJ9KTtcbiAgICB9XG5cbiAgICAvLyB0eXBlOiByb3cgfCBjb2x1bW5cbiAgICBpbnNlcnQodHlwZSwgbiA9IDEsIGJlZ2luID0gLTEpIHtcbiAgICAgICAgY29uc3Qge3NyaSwgc2NpfSA9IHRoaXMuc2VsZWN0b3IucmFuZ2U7XG4gICAgICAgIGNvbnN0IHtyb3dzLCBtZXJnZXMsIGNvbHN9ID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGUgPT09ICdyb3cnKSB7XG4gICAgICAgICAgICBiZWdpbiA9IGJlZ2luICE9PSAtMSA/IGJlZ2luIDogc3JpO1xuICAgICAgICB9IGVsc2UgaWYgKCdjb2x1bW4nKSB7XG4gICAgICAgICAgICBiZWdpbiA9IGJlZ2luICE9PSAtMSA/IGJlZ2luIDogc2NpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBzaSA9IGJlZ2luO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdyb3cnKSB7XG4gICAgICAgICAgICAgICAgcm93cy5pbnNlcnQoYmVnaW4sIG4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY29sdW1uJykge1xuICAgICAgICAgICAgICAgIHJvd3MuaW5zZXJ0Q29sdW1uKGJlZ2luLCBuKTtcbiAgICAgICAgICAgICAgICBzaSA9IGJlZ2luO1xuICAgICAgICAgICAgICAgIGNvbHMubGVuICs9IG47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXJnZXMuc2hpZnQodHlwZSwgc2ksIG4sIChyaSwgY2ksIHJuLCBjbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSByb3dzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgICAgICAgICBjZWxsLm1lcmdlWzBdICs9IHJuO1xuICAgICAgICAgICAgICAgIGNlbGwubWVyZ2VbMV0gKz0gY247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwge3R5cGU6IDEzLCBkYXRhOiB0aGlzLmdldERhdGEoKSwgcHJvcGVydHk6IFwiaW5zZXJ0XCJ9KTtcbiAgICB9XG5cbiAgICAvLyB0eXBlOiByb3cgfCBjb2x1bW5cbiAgICBkZWxldGUodHlwZSkge1xuICAgICAgICB0aGlzLmNoYW5nZURhdGEoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHJvd3MsIG1lcmdlcywgc2VsZWN0b3IsIGNvbHMsXG4gICAgICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHtyYW5nZX0gPSBzZWxlY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgICAgICAgICB9ID0gc2VsZWN0b3IucmFuZ2U7XG4gICAgICAgICAgICBjb25zdCBbcnNpemUsIGNzaXplXSA9IHNlbGVjdG9yLnJhbmdlLnNpemUoKTtcbiAgICAgICAgICAgIGxldCBzaSA9IHNyaTtcbiAgICAgICAgICAgIGxldCBzaXplID0gcnNpemU7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3JvdycpIHtcbiAgICAgICAgICAgICAgICByb3dzLmRlbGV0ZShzcmksIGVyaSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICAgICAgICAgcm93cy5kZWxldGVDb2x1bW4oc2NpLCBlY2kpO1xuICAgICAgICAgICAgICAgIHNpID0gcmFuZ2Uuc2NpO1xuICAgICAgICAgICAgICAgIHNpemUgPSBjc2l6ZTtcbiAgICAgICAgICAgICAgICBjb2xzLmxlbiAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3R5cGU6JywgdHlwZSwgJywgc2k6Jywgc2ksICcsIHNpemU6Jywgc2l6ZSk7XG4gICAgICAgICAgICBtZXJnZXMuc2hpZnQodHlwZSwgc2ksIC1zaXplLCAocmksIGNpLCBybiwgY24pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmk6JywgcmksICcsIGNpOicsIGNpLCAnLCBybjonLCBybiwgJywgY246JywgY24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSByb3dzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgICAgICAgICBjZWxsLm1lcmdlWzBdICs9IHJuO1xuICAgICAgICAgICAgICAgIGNlbGwubWVyZ2VbMV0gKz0gY247XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwubWVyZ2VbMF0gPT09IDAgJiYgY2VsbC5tZXJnZVsxXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2VsbC5tZXJnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2Nyb2xseCh4LCBjYikge1xuICAgICAgICBjb25zdCB7c2Nyb2xsLCBmcmVlemUsIGNvbHN9ID0gdGhpcztcbiAgICAgICAgY29uc3QgWywgZmNpXSA9IGZyZWV6ZTtcbiAgICAgICAgY29uc3QgW1xuICAgICAgICAgICAgY2ksIGxlZnQsIHdpZHRoLFxuICAgICAgICBdID0gaGVscGVyLnJhbmdlUmVkdWNlSWYoZmNpLCBjb2xzLmxlbiwgMCwgMCwgeCwgaSA9PiBjb2xzLmdldFdpZHRoKGkpKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZjaTonLCBmY2ksICcsIGNpOicsIGNpKTtcbiAgICAgICAgbGV0IHgxID0gbGVmdDtcbiAgICAgICAgaWYgKHggPiAwKSB4MSArPSB3aWR0aDtcbiAgICAgICAgaWYgKHNjcm9sbC54ICE9PSB4MSkge1xuICAgICAgICAgICAgc2Nyb2xsLmNpID0geCA+IDAgPyBjaSA6IDA7XG4gICAgICAgICAgICBzY3JvbGwueCA9IHgxO1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjcm9sbHkoeSwgY2IpIHtcbiAgICAgICAgY29uc3Qge3Njcm9sbCwgZnJlZXplLCByb3dzfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IFtmcmldID0gZnJlZXplO1xuICAgICAgICBjb25zdCBbXG4gICAgICAgICAgICByaSwgdG9wLCBoZWlnaHQsXG4gICAgICAgIF0gPSBoZWxwZXIucmFuZ2VSZWR1Y2VJZihmcmksIHJvd3MubGVuLCAwLCAwLCB5LCBpID0+IHJvd3MuZ2V0SGVpZ2h0KGkpKTtcbiAgICAgICAgbGV0IHkxID0gdG9wO1xuICAgICAgICBpZiAoeSA+IDApIHkxICs9IGhlaWdodDtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JpOicsIHJpLCAnICx5OicsIHkxKTtcbiAgICAgICAgaWYgKHNjcm9sbC55ICE9PSB5MSkge1xuICAgICAgICAgICAgc2Nyb2xsLnJpID0geSA+IDAgPyByaSA6IDA7XG4gICAgICAgICAgICBzY3JvbGwueSA9IHkxO1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNlbGxSZWN0KHJpLCBjaSkge1xuICAgICAgICBjb25zdCB7cm93cywgY29sc30gPSB0aGlzO1xuICAgICAgICBjb25zdCBsZWZ0ID0gY29scy5zdW1XaWR0aCgwLCBjaSk7XG4gICAgICAgIGNvbnN0IHRvcCA9IHJvd3Muc3VtSGVpZ2h0KDAsIHJpKTtcbiAgICAgICAgY29uc3QgY2VsbCA9IHJvd3MuZ2V0Q2VsbChyaSwgY2kpO1xuICAgICAgICBsZXQgd2lkdGggPSBjb2xzLmdldFdpZHRoKGNpKTtcbiAgICAgICAgbGV0IGhlaWdodCA9IHJvd3MuZ2V0SGVpZ2h0KHJpKTtcbiAgICAgICAgaWYgKGNlbGwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjZWxsLm1lcmdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3JuLCBjbl0gPSBjZWxsLm1lcmdlO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjZWxsLm1lcmdlOicsIGNlbGwubWVyZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChybiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcm47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICs9IHJvd3MuZ2V0SGVpZ2h0KHJpICsgaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNuID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBjbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBjb2xzLmdldFdpZHRoKGNpICsgaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2RhdGE6JywgdGhpcy5kKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCwgY2VsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRDZWxsKHJpLCBjaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3dzLmdldENlbGwocmksIGNpKTtcbiAgICB9XG5cbiAgICBnZXRNYXgoKSB7XG4gICAgICAgIGxldCBtY2kgPSB0aGlzLmNvbHMubGVuO1xuICAgICAgICBsZXQgbXJpID0gdGhpcy5yb3dzLmxlbjtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbXJpLFxuICAgICAgICAgICAgbWNpXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIGlzRW1wdHkoY2VsbCkge1xuICAgIC8vICAgICByZXR1cm4gdGhpcy5yb3dzLmlzRW1wdHkoY2VsbCk7XG4gICAgLy8gfVxuXG4gICAgcmVuZGVyRm9ybWF0KHN0eWxlLCBjZWxsLCBucmluZGV4LCBjaW5kZXgsIGZpbHRlcikge1xuICAgICAgICBsZXQgY2VsbFByb3h5ID0gbmV3IENlbGxQcm94eShjZWxsKTtcbiAgICAgICAgcmV0dXJuIGNlbGxQcm94eS5yZW5kZXJGb3JtYXQoc3R5bGUsIG5yaW5kZXgsIGNpbmRleCwgdGhpcywgZmlsdGVyKTtcbiAgICB9XG5cbiAgICBpc0Zvcm11bGEodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3dzLmlzRm9ybXVsYSh0ZXh0KTtcbiAgICB9XG5cbiAgICB0b1N0cmluZyh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3MudG9TdHJpbmcodGV4dCk7XG4gICAgfVxuXG4gICAgLy8gaXNCYWNrRW5kRnVuYyh0ZXh0KSB7XG4gICAgLy8gICAgIHJldHVybiB0aGlzLnJvd3MuaXNCYWNrRW5kRnVuYyh0ZXh0KTtcbiAgICAvLyB9XG5cbiAgICAvLyBpc1JlZmVyT3RoZXJTaGVldChjZWxsKSB7XG4gICAgLy8gICAgIHJldHVybiB0aGlzLnJvd3MuaXNSZWZlck90aGVyU2hlZXQoY2VsbCk7XG4gICAgLy8gfVxuXG4gICAgZ2V0Q2VsbFRleHRPckRlZmF1bHQocmksIGNpKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgcmV0dXJuIChjZWxsICYmIGNlbGwudGV4dCkgPyBjZWxsLnRleHQgOiAnJztcbiAgICB9XG5cbiAgICBnZXRDZWxsU3R5bGUocmksIGNpKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldENlbGwocmksIGNpKTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5zdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZXNbY2VsbC5zdHlsZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gZ2V0Q2VsbFN0eWxlSGFuZGxlKGluZGV4LCB0eXBlLCBjZWxsLCByaSwgY2kpIHtcbiAgICAvLyAgICAgbGV0IHN0eWxlID0gdGhpcy5zdHlsZXNbaW5kZXhdO1xuICAgIC8vXG4gICAgLy8gICAgIGlmIChzdHlsZSAmJiBzdHlsZS5mb3JtYXQgPT09IHR5cGUpIHtcbiAgICAvLyAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyB9XG5cbiAgICBnZXRDZWxsU3R5bGVPckRlZmF1bHQocmksIGNpKSB7XG4gICAgICAgIGNvbnN0IHtzdHlsZXMsIHJvd3N9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2VsbCA9IHJvd3MuZ2V0Q2VsbChyaSwgY2kpO1xuICAgICAgICBjb25zdCBjZWxsU3R5bGUgPSAoY2VsbCAmJiBjZWxsLnN0eWxlICE9PSB1bmRlZmluZWQpID8gc3R5bGVzW2NlbGwuc3R5bGVdIDoge307XG4gICAgICAgIHJldHVybiBoZWxwZXIubWVyZ2UodGhpcy5kZWZhdWx0U3R5bGUoKSwgY2VsbFN0eWxlKTtcbiAgICB9XG5cbiAgICBnZXRTZWxlY3RlZENlbGxTdHlsZSgpIHtcbiAgICAgICAgY29uc3Qge3JpLCBjaX0gPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDZWxsU3R5bGVPckRlZmF1bHQocmksIGNpKTtcbiAgICB9XG5cbiAgICBnZXRDZWxsQnlFeHByKHNyYywgdGFibGUsIG5hbWUsIGlucHV0VGV4dCwgcG9zKSB7XG4gICAgICAgIC8vIGxldCBwMSA9IGlucHV0VGV4dC5zdWJzdHJpbmcoMCwgcG9zKTtcbiAgICAgICAgLy8gbGV0IHAyID0gaW5wdXRUZXh0LnN1YnN0cmluZyhwb3MsIGlucHV0VGV4dC5sZW5ndGgpO1xuICAgICAgICAvLyBpbnB1dFRleHQgPSBwMSArIHNyYyArIHAyO1xuICAgICAgICAvLyBsZXQgbmFtZTJTaGVldFByb3h5ID0gcGFyc2VDZWxsMi5jYWxsKHRhYmxlLCB0aGlzLnZpZXdSYW5nZSgpLCB0cnVlLCBpbnB1dFRleHQpO1xuICAgICAgICAvLyByZXR1cm4ge1xuICAgICAgICAvLyAgICAgXCJ0ZXh0XCI6IG5hbWUyU2hlZXRQcm94eVsnU2hlZXRzJ11bbmFtZV0uQTEudyA/IG5hbWUyU2hlZXRQcm94eVsnU2hlZXRzJ11bbmFtZV0uQTEudyA6IG5hbWUyU2hlZXRQcm94eVsnU2hlZXRzJ11bbmFtZV0uQTEudixcbiAgICAgICAgLy8gICAgIFwiZm9ybXVsYXNcIjogcDEgKyBgJHtuYW1lfSFgICsgc3JjICsgcDJcbiAgICAgICAgLy8gfTtcbiAgICB9XG5cbiAgICAvLyBzdGF0ZTogaW5wdXQgfCBmaW5pc2hlZFxuICAgIHNldENlbGxUZXh0KHJpLCBjaSwge3RleHQsIHN0eWxlfSwgc3RhdGUpIHtcbiAgICAgICAgLy8gdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcIi9nKVxuICAgICAgICBjb25zdCB7cm93cywgaGlzdG9yeSwgdmFsaWRhdGlvbnN9ID0gdGhpcztcbiAgICAgICAgaWYgKHN0YXRlID09PSAnZmluaXNoZWQnKSB7XG4gICAgICAgICAgICByb3dzLnNldENlbGxUZXh0KHJpLCBjaSwge3RleHQ6ICcnfSk7XG4gICAgICAgICAgICBoaXN0b3J5LmFkZCh0aGlzLmdldERhdGEoKSk7XG4gICAgICAgICAgICByb3dzLnNldENlbGxUZXh0KHJpLCBjaSwge3RleHR9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICByb3dzLnNldENlbGxBbGwocmksIGNpLCB0ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdmb3JtdWxhcycpIHtcbiAgICAgICAgICAgICAgICByb3dzLnNldENlbGxBbGwocmksIGNpLCB0ZXh0LCBcIi1cIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICAgICAgcm93cy5zZXRDZWxsVGV4dChyaSwgY2ksIHt0ZXh0LCBzdHlsZX0sICdzdHlsZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByb3dzLnNldENlbGxUZXh0KHJpLCBjaSwge3RleHR9KTtcbiAgICAgICAgICAgICAgICAvLyByb3dzLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5LiN5bqU6K+l5rKh5omT5byA5LiA5Liq5Y2V5YWD5qC85bCxIGNoYW5nZeS4gOasoVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2UodGhpcy5nZXREYXRhKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHZhbGlkYXRvclxuICAgICAgICB2YWxpZGF0aW9ucy52YWxpZGF0ZShyaSwgY2ksIHRleHQpO1xuICAgIH1cblxuICAgIC8vIHNldENlbGxXaXRoRm9ybXVsYXMocmksIGNpLCB0ZXh0LCBmb3JtdWxhcywgd2hhdCA9ICdhbGwnKSB7XG4gICAgLy8gICAgIGNvbnN0IHtyb3dzfSA9IHRoaXM7XG4gICAgLy8gICAgIHJvd3Muc2V0Q2VsbEFsbChyaSwgY2ksIHRleHQsIGZvcm11bGFzLCB3aGF0KTtcbiAgICAvLyB9XG5cblxuICAgIC8vIHN0YXRlOiBpbnB1dCB8IGZpbmlzaGVkXG4gICAgc2V0Q2VsbEFsbChyaSwgY2ksIHRleHQsIGZvcm11bGFzLCBzdGF0ZSkge1xuICAgICAgICBjb25zdCB7cm93cywgaGlzdG9yeSwgdmFsaWRhdGlvbnN9ID0gdGhpcztcbiAgICAgICAgaWYgKHN0YXRlID09PSAnZmluaXNoZWQnKSB7XG4gICAgICAgICAgICByb3dzLnNldENlbGxBbGwocmksIGNpLCAnJywgJycpO1xuICAgICAgICAgICAgaGlzdG9yeS5hZGQodGhpcy5nZXREYXRhKCkpO1xuICAgICAgICAgICAgcm93cy5zZXRDZWxsQWxsKHJpLCBjaSwgdGV4dCwgZm9ybXVsYXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93cy5zZXRDZWxsQWxsKHJpLCBjaSwgdGV4dCwgZm9ybXVsYXMpO1xuICAgICAgICAgICAgLy8gdGhpcy5jaGFuZ2UodGhpcy5nZXREYXRhKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHZhbGlkYXRvclxuICAgICAgICB2YWxpZGF0aW9ucy52YWxpZGF0ZShyaSwgY2ksIHRleHQsIGZvcm11bGFzKTtcbiAgICB9XG5cbiAgICBlcXVhdGlvbklzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaG93RXF1YXRpb247XG4gICAgfVxuXG4gICAgZnJlZXplSXNBY3RpdmUoKSB7XG4gICAgICAgIGNvbnN0IFtyaSwgY2ldID0gdGhpcy5mcmVlemU7XG4gICAgICAgIHJldHVybiByaSA+IDAgfHwgY2kgPiAwO1xuICAgIH1cblxuICAgIHNldEZyZWV6ZShyaSwgY2kpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZnJlZXplID0gW3JpLCBjaV07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZyZWV6ZVRvdGFsV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHMuc3VtV2lkdGgoMCwgdGhpcy5mcmVlemVbMV0pO1xuICAgIH1cblxuICAgIGZyZWV6ZVRvdGFsSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3dzLnN1bUhlaWdodCgwLCB0aGlzLmZyZWV6ZVswXSk7XG4gICAgfVxuXG4gICAgc2V0Um93SGVpZ2h0KHJpLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucm93cy5zZXRIZWlnaHQocmksIGhlaWdodCk7XG4gICAgICAgIH0sIHt0eXBlOiAzLCByaTogcml9KTtcbiAgICB9XG5cbiAgICBzZXRDb2xXaWR0aChjaSwgd2lkdGgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRhKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29scy5zZXRXaWR0aChjaSwgd2lkdGgpO1xuICAgICAgICB9LCB7dHlwZTogNCwgY2k6IGNpfSk7XG4gICAgfVxuXG4gICAgdmlld0hlaWdodCgpIHtcbiAgICAgICAgY29uc3Qge3ZpZXcsIHNob3dUb29sYmFyfSA9IHRoaXMuc2V0dGluZ3M7XG4gICAgICAgIGxldCBoID0gdmlldy5oZWlnaHQoKTtcbiAgICAgICAgaWYgKHNob3dUb29sYmFyKSB7XG4gICAgICAgICAgICBoIC09IHRvb2xiYXJIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGg7XG4gICAgfVxuXG4gICAgdmlld1dpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy52aWV3LndpZHRoKCk7XG4gICAgfVxuXG4gICAgZnJlZXplVmlld1JhbmdlKCkge1xuICAgICAgICBjb25zdCBbcmksIGNpXSA9IHRoaXMuZnJlZXplO1xuICAgICAgICByZXR1cm4gbmV3IENlbGxSYW5nZSgwLCAwLCByaSAtIDEsIGNpIC0gMSwgdGhpcy5mcmVlemVUb3RhbFdpZHRoKCksIHRoaXMuZnJlZXplVG90YWxIZWlnaHQoKSk7XG4gICAgfVxuXG4gICAgdmlld1JhbmdlKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzY3JvbGwsIHJvd3MsIGNvbHMsIGZyZWV6ZSxcbiAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7cmksIGNpfSA9IHNjcm9sbDtcbiAgICAgICAgaWYgKHJpIDw9IDApIFtyaV0gPSBmcmVlemU7XG4gICAgICAgIGlmIChjaSA8PSAwKSBbLCBjaV0gPSBmcmVlemU7XG5cbiAgICAgICAgbGV0IFt4LCB5XSA9IFswLCAwXTtcbiAgICAgICAgbGV0IFtlcmksIGVjaV0gPSBbcm93cy5sZW4sIGNvbHMubGVuXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJpOyBpIDwgcm93cy5sZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgeSArPSByb3dzLmdldEhlaWdodChpKTtcbiAgICAgICAgICAgIGVyaSA9IGk7XG4gICAgICAgICAgICBpZiAoeSA+IHRoaXMudmlld0hlaWdodCgpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBqID0gY2k7IGogPCBjb2xzLmxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICB4ICs9IGNvbHMuZ2V0V2lkdGgoaik7XG4gICAgICAgICAgICBlY2kgPSBqO1xuICAgICAgICAgICAgaWYgKHggPiB0aGlzLnZpZXdXaWR0aCgpKSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJpLCBjaSwgZXJpLCBlY2ksIHgsIHkpO1xuICAgICAgICByZXR1cm4gbmV3IENlbGxSYW5nZShyaSwgY2ksIGVyaSwgZWNpLCB4LCB5KTtcbiAgICB9XG5cbiAgICB2aWV3UmFuZ2UyKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzY3JvbGwsIHJvd3MsIGNvbHMsIGZyZWV6ZSxcbiAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7cmksIGNpfSA9IHNjcm9sbDtcbiAgICAgICAgaWYgKHJpIDw9IDApIFtyaV0gPSBmcmVlemU7XG4gICAgICAgIGlmIChjaSA8PSAwKSBbLCBjaV0gPSBmcmVlemU7XG5cbiAgICAgICAgbGV0IFt4LCB5XSA9IFswLCAwXTtcbiAgICAgICAgbGV0IFtlcmksIGVjaV0gPSBbcm93cy5sZW4sIGNvbHMubGVuXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJpOyBpIDwgcm93cy5sZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgeSArPSByb3dzLmdldEhlaWdodChpKTtcbiAgICAgICAgICAgIGVyaSA9IGk7XG4gICAgICAgICAgICBpZiAoeSA+IHRoaXMudmlld0hlaWdodCgpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBqID0gY2k7IGogPCBjb2xzLmxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICB4ICs9IGNvbHMuZ2V0V2lkdGgoaik7XG4gICAgICAgICAgICBlY2kgPSBqO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2cocmksIGNpLCBlcmksIGVjaSwgeCwgeSk7XG4gICAgICAgIHJldHVybiBuZXcgQ2VsbFJhbmdlKHJpLCBjaSwgZXJpLCBlY2ksIHgsIHkpO1xuICAgIH1cblxuICAgIGVhY2hNZXJnZXNJblZpZXcodmlld1JhbmdlLCBjYikge1xuICAgICAgICB0aGlzLm1lcmdlcy5maWx0ZXJJbnRlcnNlY3RzKHZpZXdSYW5nZSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGl0ID0+IGNiKGl0KSk7XG4gICAgfVxuXG4gICAgcm93RWFjaChtaW4sIG1heCwgY2IpIHtcbiAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICBjb25zdCB7cm93c30gPSB0aGlzO1xuICAgICAgICBjb25zdCBmcnNldCA9IHRoaXMuZXhjZXB0Um93U2V0O1xuICAgICAgICBjb25zdCBmcmFyeSA9IFsuLi5mcnNldF07XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYXJ5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoZnJhcnlbaV0gPCBtaW4pIG9mZnNldCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtaW46JywgbWluLCAnLCBtYXg6JywgbWF4LCAnLCBzY3JvbGw6Jywgc2Nyb2xsKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IG1pbiArIG9mZnNldDsgaSA8PSBtYXggKyBvZmZzZXQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGZyc2V0LmhhcyhpKSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSByb3dzLmdldEhlaWdodChpKTtcbiAgICAgICAgICAgICAgICBjYihpLCB5LCByb3dIZWlnaHQpO1xuICAgICAgICAgICAgICAgIHkgKz0gcm93SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmICh5ID4gdGhpcy52aWV3SGVpZ2h0KCkpIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29sRWFjaChtaW4sIG1heCwgY2IpIHtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBjb25zdCB7Y29sc30gPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCBpID0gbWluOyBpIDw9IG1heDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xXaWR0aCA9IGNvbHMuZ2V0V2lkdGgoaSk7XG4gICAgICAgICAgICBjYihpLCB4LCBjb2xXaWR0aCk7XG4gICAgICAgICAgICB4ICs9IGNvbFdpZHRoO1xuICAgICAgICAgICAgaWYgKHggPiB0aGlzLnZpZXdXaWR0aCgpKSBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlZmF1bHRTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muc3R5bGU7XG4gICAgfVxuXG4gICAgYWRkU3R5bGUobnN0eWxlKSB7XG4gICAgICAgIGNvbnN0IHtzdHlsZXN9ID0gdGhpcztcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29sZC5zdHlsZXM6Jywgc3R5bGVzLCBuc3R5bGUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzdHlsZXNbaV07XG4gICAgICAgICAgICBpZiAoaGVscGVyLmVxdWFscyhzdHlsZSwgbnN0eWxlKSkgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGVzLnB1c2gobnN0eWxlKTtcbiAgICAgICAgcmV0dXJuIHN0eWxlcy5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIC8vIGFkZFBpY3R1cmUocGljKSB7XG4gICAgLy8gICAgIGNvbnN0IHtwaWN0dXJlc30gPSB0aGlzO1xuICAgIC8vXG4gICAgLy8gfVxuXG4gICAgZ2V0Q2hhbmdlRGF0YVRvQ2FsYygpIHtcbiAgICAgICAgbGV0IHttdWx0aVByZUFjdGlvbn0gPSB0aGlzO1xuICAgICAgICBpZiAobXVsdGlQcmVBY3Rpb24udW5kb0l0ZW1zLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFzdFN0ZXAgPSBtdWx0aVByZUFjdGlvbi51bmRvSXRlbXNbbXVsdGlQcmVBY3Rpb24udW5kb0l0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoIWlzSGF2ZShsYXN0U3RlcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RTdGVwO1xuICAgIH1cblxuICAgIGNoYW5nZURhdGEoY2IsIHt0eXBlID0gLTEsIHJpID0gLTEsIGNpID0gLTEsIGNlbGxSYW5nZSA9IFwiXCIsIHByb3BlcnR5ID0gXCJcIiwgdmFsdWUgPSBcIlwifSA9IC0xKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dFZGl0b3IgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb2xkQ2VsbCA9IHt9O1xuICAgICAgICBsZXQgb2xkTWVyZ2VzRGF0YSA9IHRoaXMubWVyZ2VzLmdldERhdGEoKTtcbiAgICAgICAgbGV0IHttdWx0aVByZUFjdGlvbn0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7c2VsZWN0b3J9ID0gdGhpcztcblxuICAgICAgICBsZXQgc3RlcCA9IG11bHRpUHJlQWN0aW9uLmdldFN0ZXBUeXBlKHR5cGUsIHtcbiAgICAgICAgICAgIGV4cHI6ICcnLFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG9sZENlbGwsXG4gICAgICAgICAgICByYW5nZTogc2VsZWN0b3IucmFuZ2UsXG4gICAgICAgICAgICByaSxcbiAgICAgICAgICAgIGNpLFxuICAgICAgICAgICAgY2VsbFJhbmdlOiBjZWxsUmFuZ2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjZWxsUmFuZ2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIGxldCB7bXVsdGlQcmVBY3Rpb259ID0gdGhpcztcbiAgICAgICAgICAgIG9sZENlbGwgPSBtdWx0aVByZUFjdGlvbi5lYWNoUmFuZ2UoY2VsbFJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICB0aGlzLmNoYW5nZVRvSGlzdG9yeSh7dHlwZSwgcmksIGNpLCBjZWxsUmFuZ2UsIHByb3BlcnR5LCB2YWx1ZSwgb2xkQ2VsbCwgb2xkTWVyZ2VzRGF0YSwgbmV3RGF0YTogdGhpcy5nZXREYXRhKCksIH0sIHN0ZXApO1xuICAgICAgICB0aGlzLmNoYW5nZURhdGFGb3JDYWxjID0gdGhpcy5nZXRDaGFuZ2VEYXRhVG9DYWxjKCk7XG5cbiAgICAgICAgdGhpcy5jaGFuZ2UodGhpcy5nZXREYXRhKCkpO1xuICAgIH1cblxuICAgIGN1dFBhc3RlKHNyY0NlbGxSYW5nZSwgZHN0Q2VsbFJhbmdlLCBjbGVhcmQgPSB0cnVlKSB7XG4gICAgICAgIGN1dFBhc3RlLmNhbGwodGhpcywgc3JjQ2VsbFJhbmdlLCBkc3RDZWxsUmFuZ2UsIGNsZWFyZCk7XG4gICAgfVxuXG4gICAgc2V0RGF0YShkLCBzaGVldCA9IFwiXCIsIG91dCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHthdXRvRmlsdGVyfSA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKGQpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzLmp1ZGdlQXV0b1dpZHRoKGQucm93cyk7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09ICdtZXJnZXMnXG4gICAgICAgICAgICAgICAgfHwgcHJvcGVydHkgPT09ICdjb2xzJyB8fCBwcm9wZXJ0eSA9PT0gJ3ZhbGlkYXRpb25zJykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydHldLnNldERhdGEoZFtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXgnKSB7XG4gICAgICAgICAgICAgICAgYXV0b0ZpbHRlci5hZGRGaWV4Um93cyhkW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAncm93cycpIHtcbiAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5XS5zZXREYXRhKGRbcHJvcGVydHldLCBzaGVldCwgb3V0LCB0aGlzLnNldHRpbmdzLnJvd3NJbml0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICdmcmVlemUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gZXhwcjJ4eShkW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmVlemUgPSBbeSwgeF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAncGljdHVyZXMnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRbcHJvcGVydHldKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NQYXN0ZURpcmVjdGlvbnNBcnIuY2FsbCh0aGlzLCBkW3Byb3BlcnR5XSwgJ2Zyb20nLCBzaGVldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJ2F1dG9maWx0ZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRbcHJvcGVydHldICYmIGRbcHJvcGVydHldLnJlZikge1xuICAgICAgICAgICAgICAgICAgICBhdXRvRmlsdGVyLnJlZiA9IGRbcHJvcGVydHldLnJlZjtcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZpbHRlci5maWx0ZXJzID0gZFtwcm9wZXJ0eV0uZmlsdGVycztcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZpbHRlci5zb3J0ID0gZFtwcm9wZXJ0eV0uc29ydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IGRbcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2VsZWN0b3JDZWxsVGV4dChyaSwgY2ksIHRleHQsIGV2ZW50X3R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yQ2VsbFRleHQuY2FsbCh0aGlzLCByaSwgY2ksIHRleHQsIGV2ZW50X3R5cGUpO1xuICAgIH1cblxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG5hbWUsIGZyZWV6ZSwgc3R5bGVzLCBtZXJnZXMsIHJvd3MsIGNvbHMsIHZhbGlkYXRpb25zLCBhdXRvRmlsdGVyLCBwYXN0ZURpcmVjdGlvbnNBcnIsXG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWRpdG9yOiB0aGlzLnNldHRpbmdzLnNob3dFZGl0b3IsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZnJlZXplOiB4eTJleHByKGZyZWV6ZVsxXSwgZnJlZXplWzBdKSxcbiAgICAgICAgICAgIHN0eWxlcyxcbiAgICAgICAgICAgIHBpY3R1cmVzOiBwcm9jZXNzUGFzdGVEaXJlY3Rpb25zQXJyKHBhc3RlRGlyZWN0aW9uc0FyciwgJ3RvJyksXG4gICAgICAgICAgICBtZXJnZXM6IG1lcmdlcy5nZXREYXRhKCksXG4gICAgICAgICAgICByb3dzOiByb3dzLmdldERhdGEoKSxcbiAgICAgICAgICAgIGNvbHM6IGNvbHMuZ2V0RGF0YSgpLFxuICAgICAgICAgICAgdmFsaWRhdGlvbnM6IHZhbGlkYXRpb25zLmdldERhdGEoKSxcbiAgICAgICAgICAgIGF1dG9maWx0ZXI6IGF1dG9GaWx0ZXIuZ2V0RGF0YSgpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzVmFsdWVWYWxpZCB9IGZyb20gJy4uLy4uL2hlbHBlci9kYXRhcHJveHlfaGVscGVyJztcbmltcG9ydCB7IENhbGNSb3dzUHJveHkgfSBmcm9tICcuLi9jYWxjX2RhdGFfcHJveHkvY2FsY19yb3dzJztcbmltcG9ydCB7IENhbGNXb3JrYm9va1Byb3h5IH0gZnJvbSAnLi4vY2FsY19kYXRhX3Byb3h5L2NhbGNfd29ya2Jvb2snO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7Q2FsY1dvcmtib29rUHJveHl9IGNhbGNXb3JrYm9va1Byb3h5XG4gKi9cbmV4cG9ydCBjbGFzcyBDYWxjIHsgLy8g5pW05Liq5qih5Z2X5a+55aSW5pyN5Yqh55qE57G7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2FsY1dvcmtib29rUHJveHkgID0gIG5ldyBDYWxjV29ya2Jvb2tQcm94eSh7fSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jvd3N9IHJvd3NcbiAgICogQHBhcmFtIHtQcmVBY3Rpb259IHByZUFjdGlvblxuICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAqL1xuICBjYWxjdWxhdGVSb3dzKHJvd3MsIHByZUFjdGlvbikgeyAvLyDorqHnrpfpmbbmtpvpgqPovrnnu5nliLDnmoRyb3dzXG4gICAgbGV0IGNhbGNSb3dzUHJveHkgPSBuZXcgQ2FsY1Jvd3NQcm94eShyb3dzLCBwcmVBY3Rpb24pO1xuICAgIGlmIChwcmVBY3Rpb24uaXNSZWZyZXNoKCkgPT09IHRydWUpIHsgLy8g6YeN5paw6K6h566XXG4gICAgICByb3dzLndvcmtib29rID0gY2FsY1Jvd3NQcm94eS5yb3dzMndvcmtib29rKCk7IC8vIOi9rOWMluS4gOasoVxuICAgIH1cblxuICAgIGxldCB3b3JrYm9vayA9IHJvd3Mud29ya2Jvb2s7XG4gICAgbGV0IHVwZGF0ZWRDZWxsQXJyYXkgPSB0aGlzLmNhbGN1bGF0ZVdvcmtib29rKHdvcmtib29rKVxuICAgIGNhbGNSb3dzUHJveHkuY2FsY0RvbmVUb1NldENlbGxzKHdvcmtib29rLCByb3dzKTsgLy8gdG9kbzog5oqKd29ya2Jvb2vnmoTlgLzlho3ovazljJbkuLpyb3dz55qE5b2i5byP77ybIOaKiumcgOimgeiuoeeul+eahOmCo+S6m+WNleWFg+agvOeahOeKtuaAgeWPmOS4umVkaXRlZFxuICAgIHJldHVybiB1cGRhdGVkQ2VsbEFycmF5XG4gIH1cblxuICBjYWxjdWxhdGVXb3JrYm9vayh3b3JrYm9vayl7IC8vIOiuoeeul+a1i+ivleeUqOS+i+S4reebtOaOpee7meWIsOeahHdvcmtib29rXG4gICAgdGhpcy5jYWxjV29ya2Jvb2tQcm94eS51cGRhdGVCeVdvcmtib29rT2JqKHdvcmtib29rKVxuICAgIGxldCBjYWxjQ2VsbEFycmF5ID0gdGhpcy5jYWxjV29ya2Jvb2tQcm94eS5maW5kX2FsbF9jZWxsc193aXRoX2Zvcm11bGFzKCk7Ly/mib7liLDmiYDmnInpnIDopoHorqHnrpfnmoTljZXlhYPmoLxcbiAgICB0aGlzLmNhbGNXb3JrYm9va1Byb3h5LmNhbGN1bGF0ZUZvcm11bGFzKGNhbGNDZWxsQXJyYXkpO1xuICAgIHJldHVybiBjYWxjQ2VsbEFycmF5IC8vIOWPkeeUn+abtOaWsOeahOWNleWFg+agvOWIl+ihqFxuICB9XG59XG4iLCJpbXBvcnQgZXhwIGZyb20gJy4uLy4uL3V0aWxzL2FscGhhYmV0JztcbmltcG9ydCB7IGlzSGF2ZSB9IGZyb20gJy4uLy4uL2hlbHBlci9jaGVja192YWx1ZSc7XG5cbi8qKlxuICogQHByb3BlcnR5IHtQcmVBY3Rpb259IHByZUFjdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ2FsY1Jvd3NQcm94eSB7IC8vIOS7o+eQhuWvueS6jnJvd3PnmoTmlbDmja7ojrflj5bkuI7mlbDmja7mm7TmlrBcbiAgY29uc3RydWN0b3Iocm93cywgcHJlQWN0aW9uKSB7XG4gICAgdGhpcy5yb3dzID0gcm93cztcbiAgICB0aGlzLnByZUFjdGlvbiA9IHByZUFjdGlvbjtcbiAgfVxuXG4gIC8vIOWPmOWKqOaVsOaNruS8oOWFpXdvcmtib29rXG4gIHVwZGF0ZVdvcmtib29rKHdvcmtib29rKSB7XG4gICAgbGV0IHsgZGF0YSB9ID0gdGhpcy5yb3dzO1xuICAgIGxldCBuYW1lID0gZGF0YVsnbmFtZSddO1xuICAgIGxldCBuZWVkX2NhbGNfY2VsbHMgPSB0aGlzLnByZUFjdGlvbi5maW5kQWxsTmVlZENhbGNDZWxsKCk7Ly/mib7liLDpnIDopoHlj5jmm7TnmoTljZXlhYPmoLxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRfY2FsY19jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNlbGxfbmFtZSA9IG5lZWRfY2FsY19jZWxsc1tpXTtcbiAgICAgIGxldCB6YiA9IGV4cC5leHByMnh5KGNlbGxfbmFtZSk7XG4gICAgICBsZXQgY2VsbCA9IHRoaXMucm93cy5nZXRDZWxsKHpiWzFdLCB6YlswXSk7XG4gICAgICBpZiAoaXNIYXZlKGNlbGwpKSB7XG4gICAgICAgIHdvcmtib29rLlNoZWV0c1tuYW1lXVtjZWxsX25hbWVdID0ge1xuICAgICAgICAgIHY6IGNlbGwudGV4dCxcbiAgICAgICAgICBmOiBjZWxsLmZvcm11bGFzXG4gICAgICAgIH07Ly/lsIbljp/lp4vmlbDmja7otYvnu5l3b3JrYm9va1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gd29ya2Jvb2s7XG4gIH1cblxuICByb3dzMndvcmtib29rKCkgeyAvLyDmiopyb3dz5Lit55qE5pWw5o2u6L2s5YyW5Li6d29ya2Jvb2vnmoTlvaLlvI9cbiAgICBsZXQgcm93cyA9IHRoaXMucm93c1xuICAgIGxldCBjZWxscyA9IHJvd3MuXztcbiAgICBsZXQgd29ya2Jvb2sgPSBudWxsO1xuICAgIGxldCB7IGRhdGEgfSA9IHJvd3M7XG4gICAgbGV0IG5hbWUgPSBkYXRhWyduYW1lJ107XG4gICAgaWYgKGlzSGF2ZShyb3dzLm5hbWUyU2hlZXRQcm94eSkpIHsvL+WmguaenOaYr+esrOS4gOasoeWKoOi9ve+8iHJvd3PkuK3msqHmnIl3b3JrYm9va++8ie+8jOWImeWIneWni+WMlndvcmtib29r77yM5ZCm5YiZ5pu05pawd29ya2Jvb2tcbiAgICAgIHdvcmtib29rID0gcm93cy5uYW1lMlNoZWV0UHJveHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdvcmtib29rID0ge1xuICAgICAgICBTaGVldHM6IHt9XG4gICAgICB9O1xuICAgICAgd29ya2Jvb2suU2hlZXRzW25hbWVdID0ge307XG4gICAgfVxuICAgIC8v6YGN5Y6G5Y6f5aeL5pWw5o2u5Yqg5YWld29ya2Jvb2tcbiAgICBPYmplY3Qua2V5cyhjZWxscylcbiAgICAgIC5mb3JFYWNoKHJpID0+IHtcbiAgICAgICAgT2JqZWN0LmtleXMoY2VsbHNbcmldLmNlbGxzKVxuICAgICAgICAgIC5mb3JFYWNoKGNpID0+IHtcbiAgICAgICAgICAgIGxldCBjZWxsID0gcm93cy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgICAgICBsZXQgY2VsbF9uYW1lID0gZXhwLnh5MmV4cHIoY2ksIHJpKTtcbiAgICAgICAgICAgIGlmIChpc0hhdmUoY2VsbCkpIHtcbiAgICAgICAgICAgICAgd29ya2Jvb2suU2hlZXRzW25hbWVdW2NlbGxfbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgdjogY2VsbC50ZXh0LCAvLyB0b2RvOiBjZWxsLnRleHTkuI3lupTor6Xnm7TmjqXotYvlgLznu5l277yM5Zug5Li6dGV4dOWPquaYr+Wtl+espuS4suOAglxuICAgICAgICAgICAgICAgIGY6IGNlbGwuZm9ybXVsYXNcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIHJldHVybiB3b3JrYm9vaztcbiAgfVxuXG5cbiAgLy93b3JrYm9va+Whq+WFpXJvd3NcbiAgY2FsY0RvbmVUb1NldENlbGxzKHdvcmtib29rLCByb3dzKSB7XG4gICAgbGV0IHsgZGF0YSB9ID0gcm93cztcbiAgICBsZXQgbmFtZSA9IGRhdGFbJ25hbWUnXTtcbiAgICBsZXQgc2hlZXQgPSB3b3JrYm9vay5TaGVldHNbbmFtZV07XG4gICAgT2JqZWN0LmtleXMoc2hlZXQpXG4gICAgICAuZm9yRWFjaChpID0+IHtcbiAgICAgICAgbGV0IGFyZyA9IGV4cC5leHByMnh5KGkpOy8v5Y2V5YWD5qC85Z2Q5qCHXG4gICAgICAgIGlmIChpc0hhdmUoc2hlZXRbaV0pICYmIGlzSGF2ZShzaGVldFtpXS52KSAmJiBpc0hhdmUoc2hlZXRbaV0uZikpIHsvL+WmguaenOWNleWFg+agvOS4jeS4uuepuu+8jHdvcmtib29r5pWw5o2u5aGr5Zuecm93c+WOn+Wni+aVsOaNrlxuICAgICAgICAgIGxldCBjZWxsID0gcm93cy5nZXRDZWxsKGFyZ1sxXSwgYXJnWzBdKTsvL+iOt+WPluWOn+Wni+WNleWFg+agvFxuICAgICAgICAgIGlmICghaXNIYXZlKGNlbGwpKSB7XG4gICAgICAgICAgICBjZWxsID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGNlbGwudGV4dCA9IHNoZWV0W2ldLnY7XG4gICAgICAgICAgY2VsbC5mb3JtdWxhcyA9IHNoZWV0W2ldLmY7XG4gICAgICAgICAgaWYgKGNlbGwuZm9ybXVsYXMgPT09ICcnICYmIGNlbGwudGV4dCA9PT0gMCkgey8v5pyq5a6a5LmJ5Y2V5YWD5qC8572u5Li656m6XG4gICAgICAgICAgICBjZWxsLnRleHQgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcm93cy5zZXRDZWxsKGFyZ1sxXSwgYXJnWzBdLCBjZWxsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgcm93cy53b3JrYm9vayA9IHdvcmtib29rO1xuICB9XG59XG4iLCJpbXBvcnQgY2hlY2tlciBmcm9tICcuLi9jYWxjX3V0aWxzL2Zvcm11bGFfY2hlY2suanMnO1xuaW1wb3J0IHsgZXJyb3JPYmogfSBmcm9tICcuLi9jYWxjX3V0aWxzL2Vycm9yX2NvbmZpZyc7XG5pbXBvcnQgZXhwIGZyb20gJy4uLy4uL3V0aWxzL2FscGhhYmV0JztcbmltcG9ydCB7IEZPUk1VTEFfU1RBVFVTIH0gZnJvbSAnLi4vY2FsY191dGlscy9jb25maWcnO1xuaW1wb3J0IHsgaXNIYXZlIH0gZnJvbSAnLi4vLi4vaGVscGVyL2NoZWNrX3ZhbHVlJztcblxuLyoqXG4gKlxuICogQHByb3BlcnR5IHtDYWxjV29ya2Jvb2tQcm94eX0gd29ya2Jvb2tQcm94eSDmnKx3b3JrYm9va1xuICogQHByb3BlcnR5IHtDYWxjU2hlZXR9ICBjYWxjU2hlZXRcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjZWxsT2JqXG4gKiBAcHJvcGVydHkge1N0cmluZ31jZWxOYW1lIOacrGNlbGznmoTlkI3lrZfvvIzkvovlpoJBMVxuICogQHByb3BlcnR5IHtTdHJpbmd9Y2VsbFN0YXR1cyDnirbmgIFcbiAqL1xuZXhwb3J0IGNsYXNzIENhbGNDZWxse1xuICBjb25zdHJ1Y3Rvcih3b3JrYm9va1Byb3h5LCBjYWxjU2hlZXQgLCBjZWxsT2JqLCBjZWxOYW1lLCBjZWxsU3RhdHVzKXtcbiAgICB0aGlzLndvcmtib29rUHJveHkgPSB3b3JrYm9va1Byb3h5O1xuICAgIHRoaXMuY2FsY1NoZWV0ID0gY2FsY1NoZWV0O1xuICAgIHRoaXMuY2VsbE9iaiA9IGNlbGxPYmo7XG4gICAgdGhpcy5jZWxOYW1lID0gY2VsTmFtZTtcbiAgICB0aGlzLmNlbGxTdGF0dXMgPSBjZWxsU3RhdHVzO1xuICAgIHRoaXMuZm9ybXVsYVN0cmluZyA9IHRoaXMuY2VsbE9iai5mIHx8IFwiXCIvLyDlhazlvI/lrZfnrKbkuLIs5Y+v6IO95Li656m6XG5cbiAgfVxuICBnZXRDZWxsUHJvcGVydHkocHJvcGVydHlOYW1lKXtcbiAgICByZXR1cm4gdGhpcy5jZWxsT2JqW3Byb3BlcnR5TmFtZV1cbiAgfVxuICBpc1N0cnVjdHVyYWxGb3JtdWxhKCl7XG4gICAgLy8g5qC55o2u56ys5LiA5Liq5a2X56ym5piv5ZCm5piv562J5Y+35p2l5Yik5a6a5piv5piv5ZCm5pivc2ltcGxl57G75Z6L6L+Y5pivbm9ybWFs57G75Z6LXG4gICAgcmV0dXJuIHRoaXMuZm9ybXVsYVN0cmluZy5zdGFydHNXaXRoKFwiPVwiKVxuICB9XG5cbiAgaXNGb3JtdWxhVmFsaWQoKXtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuZm9ybXVsYVN0cmluZyAhPT0gXCJ1bmRlZmluZWRcIlxuICB9XG5cbiAgaXNFbXB0eSgpIHsgLy8gY2VsbCDmmK/lkKbkuLrnqbpcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuY2VsbE9iaiA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0aGlzLmNlbGxPYmogPT09IG51bGxcbiAgfVxuICBjaGVja192YWxpZCgpe1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5mb3JtdWxhU3RyaW5nID09PSBcInN0cmluZ1wiXG4gIH1cblxuICBleGVjRm9ybXVsYSgpIHtcbiAgICBpZih0aGlzLmNlbGxTdGF0dXMgPT09IEZPUk1VTEFfU1RBVFVTLnNvbHZlZCl7XG4gICAgICByZXR1cm4gdGhpcy5jZWxsT2JqLnZcbiAgICB9XG4gICAgdGhpcy5jZWxsU3RhdHVzID0gRk9STVVMQV9TVEFUVVMud29ya2luZzsgLy8g5b2T5YmN55qE54q25oCB5pivd29ya2luZ1xuICAgIGxldCByb290X2V4cCA9IHRoaXMud29ya2Jvb2tQcm94eS5wYXJzZUNhbGNDZWxsKHRoaXMpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTdHJ1Y3R1cmFsRXhwfSByb290X2V4cFxuICAgICAqL1xuICAgIHJvb3RfZXhwLnVwZGF0ZV9jZWxsX3ZhbHVlKCk7XG4gICAgdGhpcy5jZWxsU3RhdHVzID0gRk9STVVMQV9TVEFUVVMuc29sdmVkOyAvLyDmm7TmlrDkuobkuYvlkI7vvIznirbmgIHlj5jkuLpkb25lXG4gIH1cbn1cblxuXG4iLCIvLyB0b2RvOiDpnIDopoHmiopGTE9PUi5NQVRI6L+Z5qC355qE5YWs5byP6Kej5p6Q5Li6RkxPT1JfTUFUSOi/meagt+eahOWHveaVsFxuXG5pbXBvcnQgeyBVc2VyUmF3Rm5FeGVjdXRvciB9IGZyb20gJy4vZXhwX3Jhd19mbl9leGVjdXRvcic7XG5pbXBvcnQgeyBVc2VyRm5FeGVjdXRvciB9IGZyb20gJy4vZXhwX2ZuX2V4ZWN1dG9yJztcblxuZXhwb3J0IGNsYXNzIEZuQ29sbGVjdGlvbiB7IC8vIOWwgeijheeahOe7n+S4gOeuoeeQhmV4cF9mbueahOWHveaVsOOAglxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZuT2JqID0ge307XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHRvQWRkRm5PYmpcbiAgICogQHBhcmFtIGlnbm9yZUR1cGxpY2F0ZSDmmK/lkKblhYHorrjph43lpI3lrprkuYnpgJrnlKjnmoRmbl9uYW1lXG4gICAqIEBwYXJhbSBwcmVmaXg6IGV4cF9mbueahGtleeWAvOS4iumcgOimgeWKoOWFpeeahOWJjee8gFxuICAgKi9cbiAgYWRkRm5PYmoodG9BZGRGbk9iaiwgaWdub3JlRHVwbGljYXRlID0gdHJ1ZSwgcHJlZml4ID0gXCJcIikge1xuICAgIGxldCBmbk5hbWU7XG4gICAgZm9yIChmbk5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModG9BZGRGbk9iaikpIHtcbiAgICAgIGxldCB0b0FkZEZuTmFtZSA9IHByZWZpeCArIGZuTmFtZVxuICAgICAgaWYgKHRvQWRkRm5OYW1lIGluIHRoaXMuZm5PYmopIHsgLy8g6YeN5aSN55qEZm7lkI3lrZdcbiAgICAgICAgaWYgKGlnbm9yZUR1cGxpY2F0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGVmaW5lIGZuIGFnYWluOicsIGZuTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBjdXJGdW5jID0gdG9BZGRGbk9ialtmbk5hbWVdO1xuICAgICAgaWYodHlwZW9mIGN1ckZ1bmMgPT09IFwiZnVuY3Rpb25cIil7XG4gICAgICAgIHRoaXMuZm5PYmpbdG9BZGRGbk5hbWVdID0gdG9BZGRGbk9ialtmbk5hbWVdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkRm5PYmoodG9BZGRGbk9ialtmbk5hbWVdLCBpZ25vcmVEdXBsaWNhdGUsIGZuTmFtZSArIFwiLlwiKTsgLy8gZm5OYW1l5Yqg5LiA5Liq54K55L2c5Li65YmN57yAXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRm5PYmoodG9BZGRGbk9iaikgeyAvLyDlhYHorrjph43lpI3lrprkuYnvvIzlkI7pnaLnmoTlrprkuYnkvJropobnm5bkuYvliY3nmoTlrprkuYlcbiAgICBsZXQgZm5OYW1lO1xuICAgIGZvciAoZm5OYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRvQWRkRm5PYmopKSB7XG4gICAgICB0aGlzLmZuT2JqW2ZuTmFtZV0gPSB0b0FkZEZuT2JqW2ZuTmFtZV07XG4gICAgfVxuICB9XG5cbiAgYWRkRm5PYmpBcnJheShmbk9iakFycmF5KSB7XG4gICAgZm9yIChsZXQgZm5PYmogb2YgZm5PYmpBcnJheSkge1xuICAgICAgdGhpcy5hZGRGbk9iaihmbk9iaik7XG4gICAgfVxuICB9XG5cbiAgZ2V0RXhwRnVuY3Rpb24oZm5OYW1lKSB7IC8vIOWmguaenOaJvuS4jeWIsOi/meS4qmZuTmFtZei/lOWbnm9iau+8jOiDveaJvuWIsOeahOivnei/lOWbnuS4gOS4quWHveaVsFxuICAgIGlmKGZuTmFtZSBpbiB0aGlzLmZuT2JqID09PSBmYWxzZSl7XG4gICAgICByZXR1cm4geydpc0VtcHR5JzogdHJ1ZX1cbiAgICB9XG4gICAgbGV0IGV4cEZ1bmN0aW9uID0gdGhpcy5mbk9ialtmbk5hbWVdO1xuICAgIGNvbnNvbGUuYXNzZXJ0KHR5cGVvZiBleHBGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyk7XG4gICAgcmV0dXJuIGV4cEZ1bmN0aW9uXG4gIH1cblxufVxuXG4vKipcbiAqIOiuv+mXruWkmuS4qmZu6ZuG5ZCI55qE5Luj55CG5Y+Y6YePXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aUNvbGxFeHBGbiB7XG4gIGNvbnN0cnVjdG9yKG5vcm1hbF9mbl9jb2xsLCByYXdfZm5fY29sbCkge1xuICAgIHRoaXMubm9ybWFsX2ZuX2NvbGwgPSBub3JtYWxfZm5fY29sbDsgLy8g5bGe5LqORm5Db2xsZWN0aW9u57G7XG4gICAgdGhpcy5yYXdfZm5fY29sbCA9IHJhd19mbl9jb2xsO1xuICAgIHRoaXMucmF3Rm5FeGVjdXRvciA9IFVzZXJSYXdGbkV4ZWN1dG9yO1xuICAgIHRoaXMubm9ybWFsRm5FeGVjdXRvciA9IFVzZXJGbkV4ZWN1dG9yO1xuICB9XG4gIGdldEZuRXhlY3V0b3JCeU5hbWUoZm5OYW1lKXtcbiAgICBsZXQgZm5UeXBlXG4gICAgbGV0IGZvdW5kRXhwRm4gPSB0aGlzLnJhd19mbl9jb2xsLmdldEV4cEZ1bmN0aW9uKGZuTmFtZSk7IC8vIHRoaXMueGxzeF9yYXdfRnggPSB7T0ZGU0VUOyBJRkVSUk9SOyBJRjsgQU5EfVxuICAgIGlmICh0eXBlb2YgZm91bmRFeHBGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLnJhd0ZuRXhlY3V0b3IoZm91bmRFeHBGbilcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIGZvdW5kRXhwRm4gPSB0aGlzLm5vcm1hbF9mbl9jb2xsLmdldEV4cEZ1bmN0aW9uKGZuTmFtZSk7XG4gICAgICBpZiAodHlwZW9mIGZvdW5kRXhwRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLm5vcm1hbEZuRXhlY3V0b3IoZm91bmRFeHBGbilcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIC8vIOWIsOi/meS4gOatpeaYr2V4cF9mbuayoeacieaJvuWIsFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyBleHByZXNzaW9uIGZ1bmN0aW9uICcgKyBmbk5hbWUgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEFsbEZuT2JqKCl7XG4gICAgbGV0IGFsbEZuT2JqID0ge31cbiAgICBPYmplY3QuYXNzaWduKGFsbEZuT2JqLCB0aGlzLnJhd19mbl9jb2xsLmZuT2JqKVxuICAgIE9iamVjdC5hc3NpZ24oYWxsRm5PYmosIHRoaXMubm9ybWFsX2ZuX2NvbGwuZm5PYmopXG4gICAgcmV0dXJuIGFsbEZuT2JqXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgY2xhc3MgVXNlclJhd0ZuRXhlY3V0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHVzZXJfZnVuY3Rpb24pe1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYubmFtZSA9ICdVc2VyUmF3Rm4nO1xuICAgICAgICBzZWxmLmFyZ3MgPSBbXTtcbiAgICAgICAgc2VsZi51c2VyX2Z1bmN0aW9uID0gdXNlcl9mdW5jdGlvbjtcblxuICAgIH1cbiAgICBzb2x2ZUV4cHJlc3Npb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlcl9mdW5jdGlvbi5hcHBseSh0aGlzLCB0aGlzLmFyZ3MpO1xuICAgIH07XG4gICAgcHVzaChidWZmZXIpIHtcbiAgICAgICAgdGhpcy5hcmdzLnB1c2goYnVmZmVyKTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgKiBhcyBlcnJDZiBmcm9tIFwiLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcuanNcIlxuY29uc3QgVE9fUEFSQV9UWVBFID0geyAvLyDlj6/ku6XovazmjaLmiJDnmoTmlbDmja7nsbvlnotcbiAgICBkYXRlOiBcImRhdGVcIixcbiAgICBzdHJpbmc6IFwic3RyaW5nXCIsXG4gICAgbnVtYmVyOiBcIm51bWJlclwiXG59XG5cbi8qKiDlr7nkuo7ooajovr7lvI/lh73mlbDnmoTorr/pl67ku6PnkIZcbiAqQHByb3BlcnR5IHtBcnJheX0gYXJnc1xuICpAcHJvcGVydHkge2Z1bmN0aW9ufSBleHBfZm5cbiAqQHByb3BlcnR5IHtTdHJpbmd9IG5hbWVcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJGbkV4ZWN1dG9ye1xuICAgIGNvbnN0cnVjdG9yKHVzZXJfZnVuY3Rpb24pey8vIOi/meS4quWwseexu+S8vOS6juS4gOS4quijhemlsOWZqFxuICAgICAgICB0aGlzLm5hbWUgPSAnVXNlckZuJztcbiAgICAgICAgdGhpcy5hcmdzID0gW107IC8vIOi/meS4quaYr+ihqOi+vuW8j+WHveaVsOeahOWPguaVsO+8jOWcqOWIm+W7uuS7peWQjuS8mui1i+WAvOi/h+adpVxuICAgICAgICB0aGlzLmV4cF9mbiA9IHVzZXJfZnVuY3Rpb247XG4gICAgICAgIHRoaXMuZXhwRm5QYXJhQ29uZmlnID0gdGhpcy5leHBfZm4ucGFyYUNvbmZpZyAvLyAvLyDov5nkuKrmmK/nibnmhI/liqDliLDlh73mlbDkuIrnmoTphY3nva7vvIzov5nkuKrorablkYrlj6/ku6Xlv73nlaUgW3tcImNlbGxWU3RyaW5nXCI6IFwic3RyaW5nXCIsIFwiY2VsbFZOdW1iZXJcIjogXCJudW1iZXJcIn1dIOi/meagt+eahOmFjee9rlxuICAgIH1cblxuICAgIGdldFBhcmFBcnJheSgpe1xuICAgICAgICBsZXQgY3VyQXJnLCB0b1R5cGVOYW1lLCBuZXdQYXJhcyA9IFtdXG4gICAgICAgIGxldCBzb2x2ZWRBcmdzID0gc2VsZi5hcmdzLm1hcChmPT5mLnNvbHZlRXhwcmVzc2lvbigpKSAvLyDmsYLop6Plj4LmlbBcbiAgICAgICAgaWYodHlwZW9mIHRoaXMuZXhwRm5QYXJhQ29uZmlnID09PSBcInVuZGVmaW5lZFwiKXsgLy8g5rKh5pyJ5YGa5a6a5LmJXG4gICAgICAgICAgICBuZXdQYXJhcyA9IHNvbHZlZEFyZ3MubWFwKGY9PmYudG9OdW1iZXIoKSkgLy8g6buY6K6k5piv5oqK5omA5pyJ55qEYXJn6L2s5YyW5Li65pWw5a2XXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZih0aGlzLmV4cEZuUGFyYUNvbmZpZyBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgIGxldCBpID0wLCBjdXJQYXJhQ29uZmlnXG4gICAgICAgICAgICBmb3IoOyBpKys7IGkgPCB0aGlzLmV4cEZuUGFyYUNvbmZpZy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGN1ckFyZyA9IHNvbHZlZEFyZ3NbaV1cbiAgICAgICAgICAgICAgICBjdXJQYXJhQ29uZmlnID0gdGhpcy5leHBGblBhcmFDb25maWdbaV1cbiAgICAgICAgICAgICAgICBuZXdQYXJhcy5wdXNoKHRoaXMuY29udmVydENlbGxWYWx1ZVR5cGUoY3VyUGFyYUNvbmZpZywgY3VyQXJnLmNlbGxWVHlwZU5hbWUsIGN1ckFyZykpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IoO2krKzsgaTxzZWxmLmFyZ3MubGVuZ3RoKXsgLy8g5YW25LuW5rKh5pyJ6YWN572u55qE5Y+C5pWw5LiN5YGa6L2s5o2iXG4gICAgICAgICAgICAgICAgbmV3UGFyYXMucHVzaChzZWxmLmFyZ3NbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1BhcmFzXG4gICAgfVxuXG4gICAgY29udmVydENlbGxWYWx1ZVR5cGUoY3VyUGFyYUNvbmZpZywgY2VsbFZUeXBlTmFtZSwgY3VyQXJnKSB7XG4gICAgICAgIGxldCBuZXdQYXJhLCB0b1R5cGVOYW1lXG4gICAgICAgIGlmKHR5cGVvZiBjdXJQYXJhQ29uZmlnID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgICAgIHRvVHlwZU5hbWUgPSBjdXJQYXJhQ29uZmlnW2N1ckFyZy5jZWxsVlR5cGVOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgodHlwZW9mIGN1clBhcmFDb25maWcgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICB0b1R5cGVOYW1lID0gY3VyUGFyYUNvbmZpZ1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXJhX2NvbmZpZyBoYXMgd3JvbmcgdHlwZSFcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9UeXBlTmFtZSA9PT0gVE9fUEFSQV9UWVBFLmRhdGUpIHtcbiAgICAgICAgICAgIG5ld1BhcmEgPSBjdXJBcmcudG9EYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9UeXBlTmFtZSA9PT0gVE9fUEFSQV9UWVBFLm51bWJlcikge1xuICAgICAgICAgICAgbmV3UGFyYSA9IGN1ckFyZy50b051bWJlcigpO1xuICAgICAgICB9IGVsc2UgaWYgKHRvVHlwZU5hbWUgPT09IFRPX1BBUkFfVFlQRS5zdHJpbmcpIHtcbiAgICAgICAgICAgIG5ld1BhcmEgPSBjdXJBcmcudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1BhcmEgPSBjdXJBcmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1BhcmFcbiAgICB9XG5cbiAgICBzb2x2ZUV4cHJlc3Npb24oKXtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgdXNlcl9mdW5jdGlvbiA9IHRoaXMuZXhwX2ZuO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdXNlcl9mdW5jdGlvbi5hcHBseShzZWxmLCBzZWxmLmdldFBhcmFBcnJheSgpKTsgLy8g5q+P5LiqYXJn5YWD57Sg6ZyA6KaB6LCD55So5LuW55qEc29sdmVFeHByZXNzaW9u5pa55rOVXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICh1c2VyX2Z1bmN0aW9uLm5hbWUgPT09ICdpc19ibGFuaycgLy8g5aSE55CGZXJyb3LnmoTnibnkvovvvIzkuIDoiKzmg4XlhrXkuIvnm7TmjqXov5Tlm57miYDnorDliLDnmoTplJnor69cbiAgICAgICAgICAgICAgJiYgZXJyQ2YuZXJyb3JPYmpbZS5tZXNzYWdlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gaXNfYmxhbmsgYXBwbGllZCB0byBhbiBlcnJvciBjZWxsIGRvZXNuJ3QgcHJvcGFnYXRlIHRoZSBlcnJvclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1c2VyX2Z1bmN0aW9uLm5hbWUgPT09ICdpc2Vycm9yJ1xuICAgICAgICAgICAgICAmJiBlcnJDZi5lcnJvck9ialtlLm1lc3NhZ2VdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBpc2Vycm9yIGFwcGxpZWQgdG8gYW4gZXJyb3IgZG9lc24ndCBwcm9wYWdhdGUgdGhlIGVycm9yIGFuZCByZXR1cm5zIHRydWVcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBwdXNoKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLmFyZ3MucHVzaChidWZmZXIpO1xuICAgIH07XG5cbn1cbiIsImltcG9ydCAqIGFzIGNvbXBhdGliaWxpdHkgZnJvbSAnLi9saWIvY29tcGF0aWJpbGl0eSdcbmltcG9ydCAqIGFzIGRhdGFiYXNlIGZyb20gJy4vbGliL2RhdGFiYXNlJ1xuaW1wb3J0ICogYXMgZW5naW5lZXJpbmcgZnJvbSAnLi9saWIvZW5naW5lZXJpbmcnXG5pbXBvcnQgKiBhcyBsb2dpY2FsIGZyb20gJy4vbGliL2xvZ2ljYWwnXG5pbXBvcnQgKiBhcyBtYXRoX3RyaWcgZnJvbSAnLi9saWIvbWF0aC10cmlnJ1xuaW1wb3J0ICogYXMgdGV4dCBmcm9tICcuL2xpYi90ZXh0J1xuaW1wb3J0ICogYXMgZGF0ZV90aW1lIGZyb20gJy4vbGliL2RhdGVfdGltZSdcbmltcG9ydCAqIGFzIGZpbmFuY2lhbCBmcm9tICcuL2xpYi9maW5hbmNpYWwnXG5pbXBvcnQgKiBhcyBpbmZvcm1hdGlvbiBmcm9tICcuL2xpYi9pbmZvcm1hdGlvbidcbmltcG9ydCAqIGFzIGxvb2t1cF9yZWZlcmVuY2UgZnJvbSAnLi9saWIvbG9va3VwX3JlZmVyZW5jZSdcbmltcG9ydCAqIGFzIHN0YXRpc3RpY2FsIGZyb20gJy4vbGliL3N0YXRpc3RpY2FsJ1xuaW1wb3J0ICogYXMgbWlzY2VsbGFuZW91cyBmcm9tICcuL2xpYi9taXNjZWxsYW5lb3VzJ1xuaW1wb3J0ICogYXMgY3VzdG9tIGZyb20gJy4vbGliL2N1c3RvbSdcbmV4cG9ydCBsZXQgZm5PYmpBcnJheSA9IFtcbiAgY29tcGF0aWJpbGl0eSxcbiAgZGF0YWJhc2UsXG4gIGVuZ2luZWVyaW5nLFxuICBsb2dpY2FsLFxuICBtYXRoX3RyaWcsXG4gIHRleHQsXG4gIGRhdGVfdGltZSxcbiAgZmluYW5jaWFsLFxuICBpbmZvcm1hdGlvbixcbiAgbG9va3VwX3JlZmVyZW5jZSxcbiAgc3RhdGlzdGljYWwsXG4gIG1pc2NlbGxhbmVvdXMsXG4gIGN1c3RvbSxcbl07XG5cbiIsImltcG9ydCBtYXRoVHJpZyBmcm9tICcuL21hdGgtdHJpZydcbmltcG9ydCBzdGF0aXN0aWNhbCBmcm9tICcuL3N0YXRpc3RpY2FsJ1xuaW1wb3J0IGVuZ2luZWVyaW5nIGZyb20gJy4vZW5naW5lZXJpbmcnXG5pbXBvcnQgZGF0ZVRpbWUgZnJvbSAnLi9kYXRlX3RpbWUnXG5cbmZ1bmN0aW9uIHNldChmbiwgcm9vdCkge1xuICBpZiAocm9vdCkge1xuICAgIGZvciAobGV0IGkgaW4gcm9vdCkge1xuICAgICAgZm5baV0gPSByb290W2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydHMuQkVUQURJU1QgPSBzdGF0aXN0aWNhbC5CRVRBLkRJU1Q7XG5leHBvcnRzLkJFVEFJTlYgPSBzdGF0aXN0aWNhbC5CRVRBLklOVjtcbmV4cG9ydHMuQklOT01ESVNUID0gc3RhdGlzdGljYWwuQklOT00uRElTVDtcbmV4cG9ydHMuQ0VJTElORyA9IGV4cG9ydHMuSVNPQ0VJTElORyA9IHNldChtYXRoVHJpZy5DRUlMSU5HLk1BVEgsIG1hdGhUcmlnLkNFSUxJTkcpO1xuZXhwb3J0cy5DRUlMSU5HTUFUSCA9IG1hdGhUcmlnLkNFSUxJTkcuTUFUSDtcbmV4cG9ydHMuQ0VJTElOR1BSRUNJU0UgPSBtYXRoVHJpZy5DRUlMSU5HLlBSRUNJU0U7XG5leHBvcnRzLkNISURJU1QgPSBzdGF0aXN0aWNhbC5DSElTUS5ESVNUO1xuZXhwb3J0cy5DSElESVNUUlQgPSBzdGF0aXN0aWNhbC5DSElTUS5ESVNULlJUO1xuZXhwb3J0cy5DSElJTlYgPSBzdGF0aXN0aWNhbC5DSElTUS5JTlY7XG5leHBvcnRzLkNISUlOVlJUID0gc3RhdGlzdGljYWwuQ0hJU1EuSU5WLlJUO1xuZXhwb3J0cy5DSElURVNUID0gc3RhdGlzdGljYWwuQ0hJU1EuVEVTVDtcbmV4cG9ydHMuQ09ORklERU5DRSA9IHNldChzdGF0aXN0aWNhbC5DT05GSURFTkNFLk5PUk0sIHN0YXRpc3RpY2FsLkNPTkZJREVOQ0UpO1xuZXhwb3J0cy5DT1ZBUiA9IHN0YXRpc3RpY2FsLkNPVkFSSUFOQ0UuUDtcbmV4cG9ydHMuQ09WQVJJQU5DRVAgPSBzdGF0aXN0aWNhbC5DT1ZBUklBTkNFLlA7XG5leHBvcnRzLkNPVkFSSUFOQ0VTID0gc3RhdGlzdGljYWwuQ09WQVJJQU5DRS5TO1xuZXhwb3J0cy5DUklUQklOT00gPSBzdGF0aXN0aWNhbC5CSU5PTS5JTlY7XG5leHBvcnRzLkVYUE9ORElTVCA9IHN0YXRpc3RpY2FsLkVYUE9OLkRJU1Q7XG5leHBvcnRzLkVSRkNQUkVDSVNFID0gZW5naW5lZXJpbmcuRVJGQy5QUkVDSVNFO1xuZXhwb3J0cy5FUkZQUkVDSVNFID0gZW5naW5lZXJpbmcuRVJGLlBSRUNJU0U7XG5leHBvcnRzLkZESVNUID0gc3RhdGlzdGljYWwuRi5ESVNUO1xuZXhwb3J0cy5GRElTVFJUID0gc3RhdGlzdGljYWwuRi5ESVNULlJUO1xuZXhwb3J0cy5GSU5WUlQgPSBzdGF0aXN0aWNhbC5GLklOVi5SVDtcbmV4cG9ydHMuRklOViA9IHN0YXRpc3RpY2FsLkYuSU5WO1xuLy8gWFfvvJpGTE9PUuWHveaVsOS/ruaUuVxuLy8gZXhwb3J0cy5GTE9PUiA9IHNldChtYXRoVHJpZy5GTE9PUk1BVEgsIG1hdGhUcmlnLkZMT09SKTsvLzExLjUt6LCD55So55+b55u+XG5leHBvcnRzLkZMT09STUFUSCA9IG1hdGhUcmlnLkZMT09STUFUSDtcbmV4cG9ydHMuRkxPT1JQUkVDSVNFID0gbWF0aFRyaWcuRkxPT1JQUkFDRTtcbi8vWFfvvJplbmRcbmV4cG9ydHMuRlRFU1QgPSBzdGF0aXN0aWNhbC5GLlRFU1Q7XG5leHBvcnRzLkdBTU1BRElTVCA9IHN0YXRpc3RpY2FsLkdBTU1BLkRJU1Q7XG5leHBvcnRzLkdBTU1BSU5WID0gc3RhdGlzdGljYWwuR0FNTUEuSU5WO1xuZXhwb3J0cy5HQU1NQUxOUFJFQ0lTRSA9IHN0YXRpc3RpY2FsLkdBTU1BTE4uUFJFQ0lTRTtcbmV4cG9ydHMuSFlQR0VPTURJU1QgPSBzdGF0aXN0aWNhbC5IWVBHRU9NLkRJU1Q7XG5leHBvcnRzLkxPR0lOViA9IHN0YXRpc3RpY2FsLkxPR05PUk0uSU5WO1xuZXhwb3J0cy5MT0dOT1JNSU5WID0gc3RhdGlzdGljYWwuTE9HTk9STS5JTlY7XG5leHBvcnRzLkxPR05PUk1ESVNUID0gc3RhdGlzdGljYWwuTE9HTk9STS5ESVNUO1xuZXhwb3J0cy5NT0RFID0gc2V0KHN0YXRpc3RpY2FsLk1PREUuU05HTCwgc3RhdGlzdGljYWwuTU9ERSk7XG5leHBvcnRzLk1PREVNVUxUID0gc3RhdGlzdGljYWwuTU9ERS5NVUxUO1xuZXhwb3J0cy5NT0RFU05HTCA9IHN0YXRpc3RpY2FsLk1PREUuU05HTDtcbmV4cG9ydHMuTkVHQklOT01ESVNUID0gc3RhdGlzdGljYWwuTkVHQklOT00uRElTVDtcbmV4cG9ydHMuTkVUV09SS0RBWVNJTlRMID0gZGF0ZVRpbWUuTkVUV09SS0RBWVNJTlRMO1xuZXhwb3J0cy5OT1JNRElTVCA9IHN0YXRpc3RpY2FsLk5PUk0uRElTVDtcbmV4cG9ydHMuTk9STUlOViA9IHN0YXRpc3RpY2FsLk5PUk0uSU5WO1xuZXhwb3J0cy5OT1JNU0RJU1QgPSBzdGF0aXN0aWNhbC5OT1JNLlMuRElTVDtcbmV4cG9ydHMuTk9STVNJTlYgPSBzdGF0aXN0aWNhbC5OT1JNLlMuSU5WO1xuZXhwb3J0cy5QRVJDRU5USUxFID0gc2V0KHN0YXRpc3RpY2FsLlBFUkNFTlRJTEUuRVhDLCBzdGF0aXN0aWNhbC5QRVJDRU5USUxFKTtcbmV4cG9ydHMuUEVSQ0VOVElMRUVYQyA9IHN0YXRpc3RpY2FsLlBFUkNFTlRJTEUuRVhDO1xuZXhwb3J0cy5QRVJDRU5USUxFSU5DID0gc3RhdGlzdGljYWwuUEVSQ0VOVElMRS5JTkM7XG5leHBvcnRzLlBFUkNFTlRSQU5LID0gc2V0KHN0YXRpc3RpY2FsLlBFUkNFTlRSQU5LLklOQywgc3RhdGlzdGljYWwuUEVSQ0VOVFJBTkspO1xuZXhwb3J0cy5QRVJDRU5UUkFOS0VYQyA9IHN0YXRpc3RpY2FsLlBFUkNFTlRSQU5LLkVYQztcbmV4cG9ydHMuUEVSQ0VOVFJBTktJTkMgPSBzdGF0aXN0aWNhbC5QRVJDRU5UUkFOSy5JTkM7XG5leHBvcnRzLlBPSVNTT04gPSBzZXQoc3RhdGlzdGljYWwuUE9JU1NPTi5ESVNULCBzdGF0aXN0aWNhbC5QT0lTU09OKTtcbmV4cG9ydHMuUE9JU1NPTkRJU1QgPSBzdGF0aXN0aWNhbC5QT0lTU09OLkRJU1Q7XG5leHBvcnRzLlFVQVJUSUxFID0gc2V0KHN0YXRpc3RpY2FsLlFVQVJUSUxFLklOQywgc3RhdGlzdGljYWwuUVVBUlRJTEUpO1xuZXhwb3J0cy5RVUFSVElMRUVYQyA9IHN0YXRpc3RpY2FsLlFVQVJUSUxFLkVYQztcbmV4cG9ydHMuUVVBUlRJTEVJTkMgPSBzdGF0aXN0aWNhbC5RVUFSVElMRS5JTkM7XG5leHBvcnRzLlJBTksgPSBzZXQoc3RhdGlzdGljYWwuUkFOSy5FUSwgc3RhdGlzdGljYWwuUkFOSyk7XG5leHBvcnRzLlJBTktBVkcgPSBzdGF0aXN0aWNhbC5SQU5LLkFWRztcbmV4cG9ydHMuUkFOS0VRID0gc3RhdGlzdGljYWwuUkFOSy5FUTtcbmV4cG9ydHMuU0tFV1AgPSBzdGF0aXN0aWNhbC5TS0VXLlA7XG5leHBvcnRzLlNUREVWID0gc2V0KHN0YXRpc3RpY2FsLlNUREVWLlMsIHN0YXRpc3RpY2FsLlNUREVWKTtcbmV4cG9ydHMuU1RERVZQID0gc3RhdGlzdGljYWwuU1RERVYuUDtcbmV4cG9ydHMuU1RERVZTID0gc3RhdGlzdGljYWwuU1RERVYuUztcbmV4cG9ydHMuVERJU1QgPSBzdGF0aXN0aWNhbC5ULkRJU1Q7XG5leHBvcnRzLlRESVNUUlQgPSBzdGF0aXN0aWNhbC5ULkRJU1QuUlQ7XG5leHBvcnRzLlRJTlYgPSBzdGF0aXN0aWNhbC5ULklOVjtcbmV4cG9ydHMuVFRFU1QgPSBzdGF0aXN0aWNhbC5ULlRFU1Q7XG4vLyBleHBvcnRzLlZBUiA9IHNldChzdGF0aXN0aWNhbC5WQVIuUywgc3RhdGlzdGljYWwuVkFSKTtcbmV4cG9ydHMuVkFSUCA9IHN0YXRpc3RpY2FsLlZBUi5QO1xuZXhwb3J0cy5WQVJTID0gc3RhdGlzdGljYWwuVkFSLlM7XG5leHBvcnRzLldFSUJVTEwgPSBzZXQoc3RhdGlzdGljYWwuV0VJQlVMTC5ESVNULCBzdGF0aXN0aWNhbC5XRUlCVUxMKTtcbmV4cG9ydHMuV0VJQlVMTERJU1QgPSBzdGF0aXN0aWNhbC5XRUlCVUxMLkRJU1Q7XG5leHBvcnRzLldPUktEQVlJTlRMID0gZGF0ZVRpbWUuV09SS0RBWUlOVEw7XG5leHBvcnRzLlpURVNUID0gc3RhdGlzdGljYWwuWi5URVNUO1xuLy9YVzogX1hMRk7lvIDlpLTlh73mlbDlpITnkIZcbmV4cG9ydHMuX1hMRk4gPSBzZXQobWF0aFRyaWcuRkxPT1IuTUFUSCwgc3RhdGlzdGljYWwuQ09WQVJJQU5DRS5QLCBzdGF0aXN0aWNhbC5OT1JNLklOViwgc3RhdGlzdGljYWwuVkFSLlApXG4vLyBleHBvcnRzLl9YTEZOLkZMT09SID0gbWF0aFRyaWcuRkxPT1Jcbi8vIGV4cG9ydHMuX1hMRk4uQ09WQVJJQU5DRSA9IHN0YXRpc3RpY2FsLkNPVkFSSUFOQ0Vcbi8vIGV4cG9ydHMuX1hMRk4uTk9STSA9IHN0YXRpc3RpY2FsLk5PUk1cbi8vIGV4cG9ydHMuX1hMRk4uVkFSID0gc3RhdGlzdGljYWwuVkFSXG4vL1hX77yaZW5kXG4iLCJsZXQgZGVmYXVsdE9wZXJhdG9yID0gJz0nO1xubGV0IHZhbGlkU3ltYm9scyA9IFsnPicsICc+PScsICc8JywgJzw9JywgJz0nLCAnPD4nXTtcbmxldCBUT0tFTl9UWVBFX09QRVJBVE9SID0gJ29wZXJhdG9yJztcbmxldCBUT0tFTl9UWVBFX0xJVEVSQUwgPSAnbGl0ZXJhbCc7XG5sZXQgU1VQUE9SVEVEX1RPS0VOUyA9IFtUT0tFTl9UWVBFX09QRVJBVE9SLCBUT0tFTl9UWVBFX0xJVEVSQUxdO1xuXG5leHBvcnRzLlRPS0VOX1RZUEVfT1BFUkFUT1IgPSBUT0tFTl9UWVBFX09QRVJBVE9SO1xuZXhwb3J0cy5UT0tFTl9UWVBFX0xJVEVSQUwgPSBUT0tFTl9UWVBFX0xJVEVSQUw7XG5cbi8qKlxuICogQ3JlYXRlIHRva2VuIHdoaWNoIGRlc2NyaWJlIHBhc3NlZCBzeW1ib2wvdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIFZhbHVlL1N5bWJvbCB0byBkZXNjcmliZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgb2YgdGhlIHRva2VuICdvcGVyYXRvcicgb3IgJ2xpdGVyYWwnLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVUb2tlbih2YWx1ZSwgdHlwZSkge1xuICBpZiAoU1VQUE9SVEVEX1RPS0VOUy5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdG9rZW4gdHlwZTogJyArIHR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgdHlwZTogdHlwZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBUcmllcyB0byBjYXN0IG51bWVyaWMgdmFsdWVzIHRvIHRoZWlyIHR5cGUgcGFzc2VkIGFzIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIGNhc3RWYWx1ZVRvQ29ycmVjdFR5cGUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAoL15cXGQrKFxcLlxcZCspPyQvLnRlc3QodmFsdWUpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5pbmRleE9mKCcuJykgPT09IC0xID8gcGFyc2VJbnQodmFsdWUsIDEwKSA6IHBhcnNlRmxvYXQodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIHN0cmVhbSBvZiB0b2tlbnMgZnJvbSBwYXNzZWQgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhwcmVzc2lvblxuICogQHJldHVybiB7U3RyaW5nW119XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gIGxldCBleHByZXNzaW9uTGVuZ3RoID0gZXhwcmVzc2lvbi5sZW5ndGg7XG4gIGxldCB0b2tlbnMgPSBbXTtcbiAgbGV0IGN1cnNvckluZGV4ID0gMDtcbiAgbGV0IHByb2Nlc3NlZFZhbHVlID0gJyc7XG4gIGxldCBwcm9jZXNzZWRTeW1ib2wgPSAnJztcblxuICB3aGlsZSAoY3Vyc29ySW5kZXggPCBleHByZXNzaW9uTGVuZ3RoKSB7XG4gICAgbGV0IGNoYXIgPSBleHByZXNzaW9uLmNoYXJBdChjdXJzb3JJbmRleCk7XG5cbiAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgIGNhc2UgJz4nOlxuICAgICAgY2FzZSAnPCc6XG4gICAgICBjYXNlICc9JzpcbiAgICAgICAgcHJvY2Vzc2VkU3ltYm9sID0gcHJvY2Vzc2VkU3ltYm9sICsgY2hhcjtcblxuICAgICAgICBpZiAocHJvY2Vzc2VkVmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHByb2Nlc3NlZFZhbHVlKTtcbiAgICAgICAgICBwcm9jZXNzZWRWYWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHByb2Nlc3NlZFN5bWJvbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2gocHJvY2Vzc2VkU3ltYm9sKTtcbiAgICAgICAgICBwcm9jZXNzZWRTeW1ib2wgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3NlZFZhbHVlID0gcHJvY2Vzc2VkVmFsdWUgKyBjaGFyO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY3Vyc29ySW5kZXgrKztcbiAgfVxuXG4gIGlmIChwcm9jZXNzZWRWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgdG9rZW5zLnB1c2gocHJvY2Vzc2VkVmFsdWUpO1xuICB9XG4gIGlmIChwcm9jZXNzZWRTeW1ib2wubGVuZ3RoID4gMCkge1xuICAgIHRva2Vucy5wdXNoKHByb2Nlc3NlZFN5bWJvbCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufTtcblxuLyoqXG4gKiBBbmFseXplIGFuZCBjb252ZXJ0IHRva2VucyB0byBhbiBvYmplY3Qgd2hpY2ggZGVzY3JpYmVzIHRoZWlyIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmdbXX0gdG9rZW5zXG4gKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAqL1xuZnVuY3Rpb24gYW5hbHl6ZVRva2Vucyh0b2tlbnMpIHtcbiAgbGV0IGxpdGVyYWxWYWx1ZSA9ICcnO1xuICBsZXQgYW5hbHl6ZWRUb2tlbnMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGxldCB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmIChpID09PSAwICYmIHZhbGlkU3ltYm9scy5pbmRleE9mKHRva2VuKSA+PSAwKSB7XG4gICAgICBhbmFseXplZFRva2Vucy5wdXNoKGNyZWF0ZVRva2VuKHRva2VuLCBUT0tFTl9UWVBFX09QRVJBVE9SKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpdGVyYWxWYWx1ZSArPSB0b2tlbjtcbiAgICB9XG4gIH1cblxuICBpZiAobGl0ZXJhbFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICBhbmFseXplZFRva2Vucy5wdXNoKGNyZWF0ZVRva2VuKGNhc3RWYWx1ZVRvQ29ycmVjdFR5cGUobGl0ZXJhbFZhbHVlKSwgVE9LRU5fVFlQRV9MSVRFUkFMKSk7XG4gIH1cblxuICBpZiAoYW5hbHl6ZWRUb2tlbnMubGVuZ3RoID4gMCAmJiBhbmFseXplZFRva2Vuc1swXS50eXBlICE9PSBUT0tFTl9UWVBFX09QRVJBVE9SKSB7XG4gICAgYW5hbHl6ZWRUb2tlbnMudW5zaGlmdChjcmVhdGVUb2tlbihkZWZhdWx0T3BlcmF0b3IsIFRPS0VOX1RZUEVfT1BFUkFUT1IpKTtcbiAgfVxuXG4gIHJldHVybiBhbmFseXplZFRva2Vucztcbn07XG5cbi8qKlxuICogQ29tcHV0ZS9FdmFsdWF0ZSBhbiBleHByZXNzaW9uIHBhc3NlZCBhcyBhbiBhcnJheSBvZiB0b2tlbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3RbXX0gdG9rZW5zXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBjb21wdXRlRXhwcmVzc2lvbih0b2tlbnMpIHtcbiAgbGV0IHZhbHVlcyA9IFtdO1xuICBsZXQgb3BlcmF0b3I7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgVE9LRU5fVFlQRV9PUEVSQVRPUjpcbiAgICAgICAgb3BlcmF0b3IgPSB0b2tlbi52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPS0VOX1RZUEVfTElURVJBTDpcbiAgICAgICAgdmFsdWVzLnB1c2godG9rZW4udmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZhbHVhdGUodmFsdWVzLCBvcGVyYXRvcik7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHZhbHVlcyBiYXNlZCBvbiBwYXNzZWQgbWF0aCBvcGVyYXRvci5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBldmFsdWF0ZSh2YWx1ZXMsIG9wZXJhdG9yKSB7XG4gIGxldCByZXN1bHQgPSBmYWxzZTtcblxuICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgY2FzZSAnPic6XG4gICAgICByZXN1bHQgPSB2YWx1ZXNbMF0gPiB2YWx1ZXNbMV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICc+PSc6XG4gICAgICByZXN1bHQgPSB2YWx1ZXNbMF0gPj0gdmFsdWVzWzFdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnPCc6XG4gICAgICByZXN1bHQgPSB2YWx1ZXNbMF0gPCB2YWx1ZXNbMV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICc8PSc6XG4gICAgICByZXN1bHQgPSB2YWx1ZXNbMF0gPD0gdmFsdWVzWzFdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnPSc6XG4gICAgICByZXN1bHQgPSB2YWx1ZXNbMF0gPT09IHZhbHVlc1sxXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzw+JzpcbiAgICAgIHJlc3VsdCA9IHZhbHVlc1swXSAhPT0gdmFsdWVzWzFdO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICByZXR1cm4gYW5hbHl6ZVRva2Vucyh0b2tlbml6ZUV4cHJlc3Npb24oZXhwcmVzc2lvbikpO1xufTtcbmV4cG9ydHMuY3JlYXRlVG9rZW4gPSBjcmVhdGVUb2tlbjtcbmV4cG9ydHMuY29tcHV0ZSA9IGNvbXB1dGVFeHByZXNzaW9uO1xuIiwiaW1wb3J0IGVycm9yT2JqIGZyb20gJy4uLy4uL2NhbGNfdXRpbHMvZXJyb3JfY29uZmlnJ1xuaW1wb3J0IHN0YXRzIGZyb20gICcuL3N0YXRpc3RpY2FsJ1xuaW1wb3J0IG1hdGhzIGZyb20gICcuL21hdGgtdHJpZydcbmltcG9ydCB1dGlscyBmcm9tICAnLi91dGlscydcblxuZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICBpZiAoIWFycmF5KSB7IHJldHVybiBhcnJheTsgfVxuICBsZXQgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWFycmF5W2ldKSB7IGNvbnRpbnVlOyB9XG4gICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydHMuRklOREZJRUxEID0gZnVuY3Rpb24oZGF0YWJhc2UsIHRpdGxlKSB7XG4gIGxldCBpbmRleCA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YWJhc2UubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZGF0YWJhc2VbaV1bMF0gPT09IHRpdGxlKSB7XG4gICAgICBpbmRleCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgdGhlIGlucHV0IGZpZWxkIHRpdGxlIGlzIGluY29ycmVjdFxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59O1xuXG4vL1hXOiDph43lhpnlh73mlbBcbmZ1bmN0aW9uIGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSwgY3JpdGVyaWEpe1xuICBsZXQgdmFsaWRfYXJyID0gW11cbiAgbGV0IGZpbHRlcl9hcnIgPSBbXVxuICBmb3IgKGxldCBpPTA7IGkgPCBjcml0ZXJpYVswXS5sZW5ndGg7IGkrKykge1xuICAgIGZpbHRlcl9hcnIucHVzaChjcml0ZXJpYVswXVtpXSlcbiAgfVxuICBmb3IgKGxldCBpPTE7IGkgPCBjcml0ZXJpYS5sZW5ndGg7IGkrKyl7XG4gICAgbGV0IGFyciA9IGNyaXRlcmlhW2ldXG4gICAgbGV0IHZhbGlkX3N0ciA9IFtdXG4gICAgZm9yIChsZXQgaj0wOyBqIDwgZmlsdGVyX2Fyci5sZW5ndGg7IGorKyl7XG4gICAgICBpZiAoYXJyW2pdICE9PSBudWxsKXtcbiAgICAgICAgdmFsaWRfc3RyLnB1c2goZGF0YWJhc2VbMF0uaW5kZXhPZihjcml0ZXJpYVswXVtqXSkgKyAnLScgKyBhcnJbal0pXG4gICAgICB9XG4gICAgfVxuICAgIHZhbGlkX2Fyci5wdXNoKHZhbGlkX3N0cilcbiAgfVxuICBsZXQgcmVzdWx0X2lkeCA9IFtdXG4gIGZvciAobGV0IGk9MTsgaSA8IGRhdGFiYXNlLmxlbmd0aDsgaSsrKXtcbiAgICBsZXQgZGF0YSA9IGRhdGFiYXNlW2ldXG4gICAgZm9yKGxldCBqPTA7ajx2YWxpZF9hcnIubGVuZ3RoO2orKyl7XG4gICAgICBsZXQgaXNfdmFsaWQgPSB0cnVlXG4gICAgICBmb3IobGV0IGs9MDtrPHZhbGlkX2FycltqXS5sZW5ndGg7aysrKXtcbiAgICAgICAgbGV0IGEgPSBkYXRhW3BhcnNlSW50KHZhbGlkX2FycltqXVtrXS5zcGxpdCgnLScpWzBdKV1cbiAgICAgICAgbGV0IGIgPSB2YWxpZF9hcnJbal1ba10uc3BsaXQoJy0nKVsxXVxuICAgICAgICBpZiAoYi5pbmRleE9mKCc9JykgPj0gMCl7XG4gICAgICAgICAgaXNfdmFsaWQgPSAoYSA9PSBiLnJlcGxhY2UoJz0nLCAnJykpXG4gICAgICAgIH1lbHNlIGlmKCFldmFsKGErYikpe1xuICAgICAgICAgIGlzX3ZhbGlkID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYoaXNfdmFsaWQpe1xuICAgICAgICByZXN1bHRfaWR4LnB1c2goaSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdF9pZHhcbn1cbmZ1bmN0aW9uIGdldF92YWx1ZXMocmVzdWx0SW5kZXhlcywgZGF0YWJhc2UsIGZpZWxkKXtcbiAgaWYgKHR5cGVvZiBmaWVsZCA9PSAnbnVtYmVyJyl7XG4gICAgbGV0IGZpZWxkX2lkeCA9IGZpZWxkIC0gMVxuICB9ZWxzZXtcbiAgICBsZXQgZmllbGRfaWR4ID0gZGF0YWJhc2VbMF0uaW5kZXhPZihmaWVsZClcbiAgfVxuICBsZXQgdmFsdWVzPSBbXVxuICBmb3IgKGxldCBpPTA7IGk8IHJlc3VsdEluZGV4ZXMubGVuZ3RoOyBpKyspe1xuICAgIHZhbHVlcy5wdXNoKGRhdGFiYXNlW3Jlc3VsdEluZGV4ZXNbaV1dW2ZpZWxkX2lkeF0pXG4gIH1cbiAgcmV0dXJuIHZhbHVlc1xufVxuLy8gRGF0YWJhc2UgZnVuY3Rpb25zXG5leHBvcnRzLkRBVkVSQUdFID0gZnVuY3Rpb24gKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIGZpZWxkIGlzIG5vdCBhIG51bWJlciBhbmQgbm90IGEgc3RyaW5nXG4gIGlmIChpc05hTihmaWVsZCkgJiYgKHR5cGVvZiBmaWVsZCAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgaWYgKHR5cGVvZiBmaWVsZCA9PSAnbnVtYmVyJyl7XG4gICAgbGV0IHJlc3VsdEluZGV4ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpPTE7aTxkYXRhYmFzZS5sZW5ndGg7aSsrKXtcbiAgICAgIHJlc3VsdEluZGV4ZXMucHVzaChpKVxuICAgIH1cbiAgfWVsc2V7XG4gICAgbGV0IHJlc3VsdEluZGV4ZXMgPSBmaW5kX3Jlc3VsdF9pZHgoZGF0YWJhc2UsY3JpdGVyaWEpLy9maW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhKTtcbiAgfVxuICBsZXQgdGFyZ2V0VmFsdWVzID0gZ2V0X3ZhbHVlcyhyZXN1bHRJbmRleGVzLCBkYXRhYmFzZSwgZmllbGQpO1xuICBsZXQgc3VtID0gMFxuICBmb3IgKGxldCBpPTA7IGkgPCB0YXJnZXRWYWx1ZXMubGVuZ3RoOyBpKyspe1xuICAgIHN1bSArPSB0YXJnZXRWYWx1ZXNbaV1cbiAgfVxuICByZXR1cm4gcmVzdWx0SW5kZXhlcy5sZW5ndGggPT09IDAgPyBlcnJvck9iai5FUlJPUl9ESVYwIDogc3VtIC8gdGFyZ2V0VmFsdWVzLmxlbmd0aDtcbn07XG5leHBvcnRzLkRDT1VOVCA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0SW5kZXhlcyA9IGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSxjcml0ZXJpYSkvL2ZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xuICBsZXQgdGFyZ2V0VmFsdWVzID0gZ2V0X3ZhbHVlcyhyZXN1bHRJbmRleGVzLCBkYXRhYmFzZSwgZmllbGQpO1xuICByZXR1cm4gc3RhdHMuQ09VTlQodGFyZ2V0VmFsdWVzKTtcbn07XG5cbmV4cG9ydHMuRENPVU5UQSA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIGZpZWxkIGlzIG5vdCBhIG51bWJlciBhbmQgbm90IGEgc3RyaW5nXG4gIGlmIChpc05hTihmaWVsZCkgJiYgKHR5cGVvZiBmaWVsZCAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHJlc3VsdEluZGV4ZXMgPSBmaW5kX3Jlc3VsdF9pZHgoZGF0YWJhc2UsY3JpdGVyaWEpLy9maW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhKTtcbiAgbGV0IHRhcmdldFZhbHVlcyA9IGdldF92YWx1ZXMocmVzdWx0SW5kZXhlcywgZGF0YWJhc2UsIGZpZWxkKTtcbiAgcmV0dXJuIHN0YXRzLkNPVU5UQSh0YXJnZXRWYWx1ZXMpO1xufTtcblxuZXhwb3J0cy5ER0VUID0gZnVuY3Rpb24oZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0SW5kZXhlcyA9IGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSxjcml0ZXJpYSkvL2ZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xuICBpZiAocmVzdWx0SW5kZXhlcy5sZW5ndGggPiAxKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbiAgbGV0IHRhcmdldFZhbHVlcyA9IGdldF92YWx1ZXMocmVzdWx0SW5kZXhlcywgZGF0YWJhc2UsIGZpZWxkKTtcbiAgcmV0dXJuIHRhcmdldFZhbHVlc1swXTtcbn07XG5cbmV4cG9ydHMuRE1BWCA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIGZpZWxkIGlzIG5vdCBhIG51bWJlciBhbmQgbm90IGEgc3RyaW5nXG4gIGlmIChpc05hTihmaWVsZCkgJiYgKHR5cGVvZiBmaWVsZCAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHJlc3VsdEluZGV4ZXMgPSBmaW5kX3Jlc3VsdF9pZHgoZGF0YWJhc2UsY3JpdGVyaWEpLy9maW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhKTtcbiAgbGV0IHRhcmdldFZhbHVlcyA9IGdldF92YWx1ZXMocmVzdWx0SW5kZXhlcywgZGF0YWJhc2UsIGZpZWxkKTtcbiAgbGV0IG1heCA9IHRhcmdldFZhbHVlc1swXVxuICBmb3IgKGxldCBpPTA7aTx0YXJnZXRWYWx1ZXMubGVuZ3RoO2krKyl7XG4gICAgaWYgKHRhcmdldFZhbHVlc1tpXSA+IG1heCl7XG4gICAgICBtYXggPSB0YXJnZXRWYWx1ZXNbaV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heFxufTtcblxuZXhwb3J0cy5ETUlOID0gZnVuY3Rpb24oZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0SW5kZXhlcyA9IGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSxjcml0ZXJpYSkvL2ZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xuICBsZXQgdGFyZ2V0VmFsdWVzID0gZ2V0X3ZhbHVlcyhyZXN1bHRJbmRleGVzLCBkYXRhYmFzZSwgZmllbGQpO1xuICBsZXQgbWluID0gdGFyZ2V0VmFsdWVzWzBdXG4gIGZvciAobGV0IGk9MDtpPHRhcmdldFZhbHVlcy5sZW5ndGg7aSsrKXtcbiAgICBpZiAodGFyZ2V0VmFsdWVzW2ldIDwgbWluKXtcbiAgICAgIG1pbiA9IHRhcmdldFZhbHVlc1tpXVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWluXG59O1xuXG5leHBvcnRzLkRQUk9EVUNUID0gZnVuY3Rpb24oZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIGxldCByZXN1bHRJbmRleGVzID0gZmluZF9yZXN1bHRfaWR4KGRhdGFiYXNlLGNyaXRlcmlhKS8vZmluZFJlc3VsdEluZGV4KGRhdGFiYXNlLCBjcml0ZXJpYSk7XG4gIGxldCB0YXJnZXRWYWx1ZXMgPSBnZXRfdmFsdWVzKHJlc3VsdEluZGV4ZXMsIGRhdGFiYXNlLCBmaWVsZCk7XG4gIGxldCByZXN1bHQgPSAxO1xuICBmb3IgKGxldCBpPTA7IGkgPCB0YXJnZXRWYWx1ZXMubGVuZ3RoOyBpKyspe1xuICAgIHJlc3VsdCAqPSB0YXJnZXRWYWx1ZXNbaV1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5EU1RERVYgPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiBmaWVsZCBpcyBub3QgYSBudW1iZXIgYW5kIG5vdCBhIHN0cmluZ1xuICBpZiAoaXNOYU4oZmllbGQpICYmICh0eXBlb2YgZmllbGQgIT09IFwic3RyaW5nXCIpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGxldCByZXN1bHRJbmRleGVzID0gZmluZF9yZXN1bHRfaWR4KGRhdGFiYXNlLGNyaXRlcmlhKS8vZmluZFJlc3VsdEluZGV4KGRhdGFiYXNlLCBjcml0ZXJpYSk7XG4gIGxldCB0YXJnZXRWYWx1ZXMgPSBnZXRfdmFsdWVzKHJlc3VsdEluZGV4ZXMsIGRhdGFiYXNlLCBmaWVsZCk7XG4gIHRhcmdldFZhbHVlcyA9IGNvbXBhY3QodGFyZ2V0VmFsdWVzKTtcbiAgcmV0dXJuIHN0YXRzLlNUREVWLlModGFyZ2V0VmFsdWVzKTtcbn07XG5cbmV4cG9ydHMuRFNUREVWUCA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcbiAgLy8gUmV0dXJuIGVycm9yIGlmIGZpZWxkIGlzIG5vdCBhIG51bWJlciBhbmQgbm90IGEgc3RyaW5nXG4gIGlmIChpc05hTihmaWVsZCkgJiYgKHR5cGVvZiBmaWVsZCAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgbGV0IHJlc3VsdEluZGV4ZXMgPSBmaW5kX3Jlc3VsdF9pZHgoZGF0YWJhc2UsY3JpdGVyaWEpLy9maW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhKTtcbiAgbGV0IHRhcmdldFZhbHVlcyA9IGdldF92YWx1ZXMocmVzdWx0SW5kZXhlcywgZGF0YWJhc2UsIGZpZWxkKTtcbiAgdGFyZ2V0VmFsdWVzID0gY29tcGFjdCh0YXJnZXRWYWx1ZXMpO1xuICByZXR1cm4gc3RhdHMuU1RERVYuUCh0YXJnZXRWYWx1ZXMpO1xufTtcblxuZXhwb3J0cy5EU1VNID0gZnVuY3Rpb24oZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0SW5kZXhlcyA9IGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSxjcml0ZXJpYSkvL2ZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xuICBsZXQgdGFyZ2V0VmFsdWVzID0gZ2V0X3ZhbHVlcyhyZXN1bHRJbmRleGVzLCBkYXRhYmFzZSwgZmllbGQpO1xuICByZXR1cm4gbWF0aHMuU1VNKHRhcmdldFZhbHVlcyk7XG59O1xuXG5leHBvcnRzLkRWQVIgPSBmdW5jdGlvbiAoZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0SW5kZXhlcyA9IGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSxjcml0ZXJpYSkvL2ZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xuICBsZXQgdGFyZ2V0VmFsdWVzID0gZ2V0X3ZhbHVlcyhyZXN1bHRJbmRleGVzLCBkYXRhYmFzZSwgZmllbGQpO1xuICByZXR1cm4gc3RhdHMuVkFSLlModGFyZ2V0VmFsdWVzKTtcbn07XG5cbmV4cG9ydHMuRFZBUlAgPSBmdW5jdGlvbiAoZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xuICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcbiAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBsZXQgcmVzdWx0SW5kZXhlcyA9IGZpbmRfcmVzdWx0X2lkeChkYXRhYmFzZSxjcml0ZXJpYSkvL2ZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xuICBsZXQgdGFyZ2V0VmFsdWVzID0gZ2V0X3ZhbHVlcyhyZXN1bHRJbmRleGVzLCBkYXRhYmFzZSwgZmllbGQpO1xuICByZXR1cm4gc3RhdHMuVkFSLlAodGFyZ2V0VmFsdWVzKTtcbn07XG4vL1hX77yaZW5kXG4iLCJpbXBvcnQge2Vycm9yT2JqfSBmcm9tICcuLi8uLi9jYWxjX3V0aWxzL2Vycm9yX2NvbmZpZydcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IGluZm9ybWF0aW9uIGZyb20gJy4vaW5mb3JtYXRpb24nXG5cbmV4cG9ydHMuQU5EID0gZnVuY3Rpb24oKSB7XG4gIGxldCBhcmdzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xuICBsZXQgcmVzdWx0ID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFhcmdzW2ldKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuQ0hPT1NFID0gZnVuY3Rpb24oKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGxldCBpbmRleCA9IGFyZ3VtZW50c1swXTtcbiAgaWYgKGluZGV4IDwgMSB8fCBpbmRleCA+IDI1NCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgaW5kZXggKyAxKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuIGFyZ3VtZW50c1tpbmRleF07XG59O1xuXG5leHBvcnRzLkZBTFNFID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydHMuSUYgPSBmdW5jdGlvbih0ZXN0LCB0aGVuX3ZhbHVlLCBvdGhlcndpc2VfdmFsdWUpIHtcbiAgcmV0dXJuIHRlc3QgPyB0aGVuX3ZhbHVlIDogb3RoZXJ3aXNlX3ZhbHVlO1xufTtcblxuZXhwb3J0cy5JRkVSUk9SID0gZnVuY3Rpb24odmFsdWUsIHZhbHVlSWZFcnJvcikge1xuICBpZiAoaW5mb3JtYXRpb24uSVNFUlJPUih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVJZkVycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydHMuSUZOQSA9IGZ1bmN0aW9uKHZhbHVlLCB2YWx1ZV9pZl9uYSkge1xuICByZXR1cm4gdmFsdWUgPT09IGVycm9yT2JqLkVSUk9SX05BID8gdmFsdWVfaWZfbmEgOiB2YWx1ZTtcbn07XG5cbmV4cG9ydHMuTk9UID0gZnVuY3Rpb24obG9naWNhbCkge1xuICByZXR1cm4gIWxvZ2ljYWw7XG59O1xuXG5leHBvcnRzLk9SID0gZnVuY3Rpb24oKSB7XG4gIGxldCBhcmdzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xuICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcmdzW2ldKSB7XG4gICAgICByZXN1bHQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5UUlVFID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0cy5YT1IgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGFyZ3MgPSB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cyk7XG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJnc1tpXSkge1xuICAgICAgcmVzdWx0Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiAoTWF0aC5mbG9vcihNYXRoLmFicyhyZXN1bHQpKSAmIDEpID8gdHJ1ZSA6IGZhbHNlO1xufTtcblxuZXhwb3J0cy5TV0lUQ0ggPSBmdW5jdGlvbiAoKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgIGxldCB0YXJnZXRWYWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICBsZXQgYXJnYyA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIGxldCBzd2l0Y2hDb3VudCA9IE1hdGguZmxvb3IoYXJnYyAvIDIpO1xuICAgIGxldCBzd2l0Y2hTYXRpc2ZpZWQgPSBmYWxzZTtcbiAgICBsZXQgZGVmYXVsdENsYXVzZSA9IGFyZ2MgJSAyID09PSAwID8gbnVsbCA6IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAoc3dpdGNoQ291bnQpIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzd2l0Y2hDb3VudDsgaW5kZXgrKykge1xuICAgICAgICBpZiAodGFyZ2V0VmFsdWUgPT09IGFyZ3VtZW50c1tpbmRleCAqIDIgKyAxXSkge1xuICAgICAgICAgIHJlc3VsdCA9IGFyZ3VtZW50c1tpbmRleCAqIDIgKyAyXTtcbiAgICAgICAgICBzd2l0Y2hTYXRpc2ZpZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzd2l0Y2hTYXRpc2ZpZWQgJiYgZGVmYXVsdENsYXVzZSkge1xuICAgICAgcmVzdWx0ID0gZGVmYXVsdENsYXVzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHJlc3VsdCA9PSB1bmRlZmluZWQpe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHtlcnJvck9ian0gZnJvbSAnLi4vLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcnXG5pbXBvcnQgZGF0ZVRpbWUgZnJvbSAnLi9kYXRlX3RpbWUnXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscydcblxuLy8gZXhwb3J0cy52YWxpZERhdGUgPSBmdW5jdGlvbiAoZClcbmZ1bmN0aW9uIHZhbGlkRGF0ZShkKXtcbiAgcmV0dXJuIGQgJiYgZC5nZXRUaW1lICYmICFpc05hTihkLmdldFRpbWUoKSk7XG59XG5cbi8vIGZ1bmN0aW9uIGVuc3VyZURhdGUoZCkge1xuLy8gICByZXR1cm4gKGQgaW5zdGFuY2VvZiBEYXRlKT9kOmNyZWF0ZWQgRGF0ZShkKTtcbi8vIH1cblxuZXhwb3J0cy5BQ0NSSU5UID0gZnVuY3Rpb24oaXNzdWUsIGZpcnN0LCBzZXR0bGVtZW50LCByYXRlLCBwYXIsIGZyZXF1ZW5jeSwgYmFzaXMpIHtcbiAgaWYgKHR5cGVvZiBpc3N1ZT09J3N0cmluZycpe1xuICAgIGlzc3VlID0gdXRpbHMucGFyc2VEYXRlKGlzc3VlKVxuICB9XG4gIC8vWFc6IOWPguaVsOmUmeivr+aKpemUmVxuICB0cnl7XG4gICAgaXNzdWUgPSB1dGlscy5FeGNlbERhdGVUb0pTRGF0ZShpc3N1ZSk7XG4gICAgZmlyc3QgPSB1dGlscy5FeGNlbERhdGVUb0pTRGF0ZShmaXJzdCk7XG4gICAgc2V0dGxlbWVudCA9IHV0aWxzLkV4Y2VsRGF0ZVRvSlNEYXRlKHNldHRsZW1lbnQpO1xuICB9Y2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgLy9YV++8mmVuZFxuICBpZiAoIXZhbGlkRGF0ZShpc3N1ZSkgfHwgIXZhbGlkRGF0ZShmaXJzdCkgfHwgIXZhbGlkRGF0ZShzZXR0bGVtZW50KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgcmF0ZSBvciBwYXIgYXJlIGxvd2VyIHRoYW4gb3IgZXF1YWwgdG8gemVyb1xuICBpZiAocmF0ZSA8PSAwIHx8IHBhciA8PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBmcmVxdWVuY3kgaXMgbmVpdGhlciAxLCAyLCBvciA0XG4gIGlmIChbMSwgMiwgNF0uaW5kZXhPZihmcmVxdWVuY3kpID09PSAtMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgYmFzaXMgaXMgbmVpdGhlciAwLCAxLCAyLCAzLCBvciA0XG4gIGlmIChbMCwgMSwgMiwgMywgNF0uaW5kZXhPZihiYXNpcykgPT09IC0xKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBzZXR0bGVtZW50IGlzIGJlZm9yZSBvciBlcXVhbCB0byBpc3N1ZVxuICBpZiAoc2V0dGxlbWVudCA8PSBpc3N1ZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXNcbiAgcGFyID0gcGFyIHx8IDA7XG4gIGJhc2lzID0gYmFzaXMgfHwgMDtcbiAgLy8gQ29tcHV0ZSBhY2NydWVkIGludGVyZXN0XG4gIHJldHVybiBwYXIgKiByYXRlICogZGF0ZVRpbWUuWUVBUkZSQUMoaXNzdWUsIHNldHRsZW1lbnQsIGJhc2lzKTtcbn07XG5cbi8vIFhXOiBBQ0NSSU5UTeWHveaVsFxuZXhwb3J0cy5BQ0NSSU5UTSA9IGZ1bmN0aW9uKGlzc3VlLCBzZXR0bGVtZW50LCByYXRlLCBwYXIsIGJhc2lzKSB7XG4gIC8vWFc6IOWPguaVsOmUmeivr+aKpemUmVxuICB0cnl7XG4gICAgaXNzdWUgPSB1dGlscy5FeGNlbERhdGVUb0pTRGF0ZShpc3N1ZSk7XG4gICAgc2V0dGxlbWVudCA9IHV0aWxzLkV4Y2VsRGF0ZVRvSlNEYXRlKHNldHRsZW1lbnQpO1xuICB9Y2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgLy9YV++8mmVuZFxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIHJhdGUgb3IgcGFyIGFyZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cbiAgaWYgKHJhdGUgPD0gMCB8fCBwYXIgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuXG4gIGlmIChiYXNpcyA8IDAgfHwgYmFzaXMgPiA0KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBzZXR0bGVtZW50IGlzIGJlZm9yZSBvciBlcXVhbCB0byBpc3N1ZVxuICBpZiAoc2V0dGxlbWVudCA8PSBpc3N1ZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXNcbiAgcGFyID0gcGFyIHx8IDA7XG4gIGJhc2lzID0gYmFzaXMgfHwgMDtcbiAgLy8gQ29tcHV0ZSBhY2NydWVkIGludGVyZXN0XG4gIGxldCByZXN1bHQgPSBwYXIgKiByYXRlICogZGF0ZVRpbWUuWUVBUkZSQUMoaXNzdWUsIHNldHRsZW1lbnQsIGJhc2lzKTtcbiAgaWYgKGlzTmFOKHJlc3VsdCkpe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfWVsc2V7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59O1xuLy9YVzogZW5kXG5cbi8vIFRPRE9cbi8vWFc6IOW+heWunueOsFxuZXhwb3J0cy5BTU9SREVHUkMgPSBmdW5jdGlvbiAoY29zdCwgZGF0ZV9wdXJjaGFzZWQsIGZpcnN0X3BlcmlvZCwgc2FsdmFnZSwgcGVyaW9kLCByYXRlLCBiYXNpcykge1xuICBpZiAoIXZhbGlkRGF0ZShpc3N1ZSkgfHwgIXZhbGlkRGF0ZShzZXR0bGVtZW50KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIHJhdGUgb3IgcGFyIGFyZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cbiAgaWYgKHJhdGUgPD0gMCB8fCBwYXIgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgaWYgKGJhc2lzIDwgMCB8fCBiYXNpcyA+IDQpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIC8vIFJldHVybiBlcnJvciBpZiBzZXR0bGVtZW50IGlzIGJlZm9yZSBvciBlcXVhbCB0byBpc3N1ZVxuICBpZiAoc2V0dGxlbWVudCA8PSBpc3N1ZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbn07XG5cbi8vIFRPRE9cbmV4cG9ydHMuQU1PUkxJTkMgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdBTU9STElOQyBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbi8vIGV4cG9ydHMuZ2V0X2RheXMgPSBmdW5jdGlvbihzZXR0bGVtZW50LG1hdHVyaXR5LGZyZXF1ZW5jeSnmtYvor5Xml7bkvb/nlKhcbi8v6I635Y+W5YC65Yi457uT5oGv5pelKOi0reS5sOaXpSnmiYDlnKjku5jmga/mnJ/pl7TnmoTotbflp4vml7bpl7RcbmZ1bmN0aW9uIGdldF9kYXlzKHNldHRsZW1lbnQsbWF0dXJpdHksZnJlcXVlbmN5KXtcbiAgbGV0IHNldHRsZW1lbnREYXRlID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpXG4gIGxldCBtYXR1cml0eURhdGUgPSB1dGlscy5wYXJzZURhdGUobWF0dXJpdHkpXG4gIC8qKlxuICAgKiBAdHlwZSB7Q2VsbFZEYXRlVGltZX0gc2V0dGxlbWVudERhdGVcbiAgICogQHR5cGUge0NlbGxWRGF0ZVRpbWV9IG1hdHVyaXR5RGF0ZVxuICAgKi9cblxuICBsZXQgbW9udGhfU009bWF0dXJpdHlEYXRlLmdldEZ1bGxZZWFyKCkqMTIrbWF0dXJpdHlEYXRlLmdldE1vbnRoKCktc2V0dGxlbWVudERhdGUuZ2V0RnVsbFllYXIoKSoxMi1zZXR0bGVtZW50RGF0ZS5nZXRNb250aCgpXG4gIGxldCB0aW1lcz1wYXJzZUludChtb250aF9TTS8oMTIvZnJlcXVlbmN5KSlcbiAgbGV0IGVuZGRheSA9IHV0aWxzLkNvcHkobWF0dXJpdHlEYXRlKVxuICBlbmRkYXkuc2V0TW9udGgoZW5kZGF5LmdldE1vbnRoKCktdGltZXMqMTIvZnJlcXVlbmN5KVxuICBsZXQgc3RhcnRkYXk9IHV0aWxzLkNvcHkoZW5kZGF5KVxuICBlbmRkYXkuc2V0TW9udGgoZW5kZGF5LmdldE1vbnRoKCktMTIvZnJlcXVlbmN5KVxuICByZXR1cm4ge1wic3RhcnRkYXlcIjogc3RhcnRkYXksIFwiZW5kZGF5XCI6ZW5kZGF5fVxufVxuLy9UT0RPICBDT1VQ57O75YiX5Ye95pWw55uu5YmN5Z2H5pyq6ICD6JmR5Y+C5pWw6L6T5YWl5LiN6KeE6IyD55qE5oql6ZSZ5oOF5Ya1XG5cbi8vIENPVVBEQVlCU+iuoeeul+eahOaYr+WAuuWIuOWcqOe7k+eul+aXpSjljbPotK3kubDml6Up5YmN5pyA5ZCO5LiA5qyh5LuY5oGv5pel6Iez57uT566X5pel5LmL6Ze055qE5aSp5pWwICAgIGJ55pe65pe6IDIwMTkvMTEvMTRcbmV4cG9ydHMuQ09VUERBWUJTID0gZnVuY3Rpb24gKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmcmVxdWVuY3ksIGJhc2lzKSB7XG4gIC8vIGlmICghdmFsaWREYXRlKG1hdHVyaXR5KSB8fCAhdmFsaWREYXRlKHNldHRsZW1lbnQpKSB7XG4gIC8vICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAvLyB9XG4gIGlmIChbMCwxLDIsMyw0XS5pbmRleE9mKGJhc2lzKT09PS0xKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoWzEsMiw0XS5pbmRleE9mKGZyZXF1ZW5jeSk9PT0tMSl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoc2V0dGxlbWVudCA+PSBtYXR1cml0eSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgbGV0IHNldHRsZW1lbnREYXRlID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpXG4gIGxldCByZXN1bHQgPSBzZXR0bGVtZW50RGF0ZSAtIGdldF9kYXlzKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmcmVxdWVuY3kpLnN0YXJ0ZGF5XG4gIHJldHVybiByZXN1bHQgLyAoMTAwMCAqIDYwICogNjAgKiAyNClcbn07XG4vL+WOn+S7o+eggVxuLy8gbGV0IG1hdHVyaXR5RGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSlcbi8vIGxldCBzdGFydGRheSA9IHV0aWxzLkNvcHkobWF0dXJpdHlEYXRlKVxuLy8gc3RhcnRkYXkuc2V0TW9udGgoc3RhcnRkYXkuZ2V0TW9udGgoKS0xMi9mcmVxdWVuY3kpIC8vIHRvZG8g5L2Z5pWw566X5rOV5pu05aW9XG4vLyB3aGlsZShzdGFydGRheSA+PSBzZXR0bGVtZW50RGF0ZSl7XG4vLyAgIHN0YXJ0ZGF5LnNldE1vbnRoKHN0YXJ0ZGF5LmdldE1vbnRoKCktMTIvZnJlcXVlbmN5KVxuLy8gfVxuLy8gbGV0IGVuZGRheSA9IHV0aWxzLkNvcHkoc3RhcnRkYXkpXG4vLyBlbmRkYXkuc2V0TW9udGgoZW5kZGF5LmdldE1vbnRoKCkrMTIvZnJlcXVlbmN5KVxuXG4vL0NPVVBEQVlT6K6h566X55qE5piv5piv57uT566X5pelKOWNs+i0reS5sOaXpSnmiYDlpITnmoTorqHmga/lkajmnJ/nmoTlpKnmlbAs5aaCOuWIsOacn+aXpeS4ujIwMTkvMTEvMSznu5Pnrpfml6XkuLoyMDE5LzIvMSzpgqPkuYjorqHnrpfmmK8yMDE5LzExLzEx6IezMjAxOS81LzHnmoTlpKnmlbAuYnnml7rml7ogMjAxOS8xMS8xNVxuZXhwb3J0cy5DT1VQREFZUyA9IGZ1bmN0aW9uIChzZXR0bGVtZW50LCBtYXR1cml0eSwgZnJlcXVlbmN5LCBiYXNpcykge1xuICAvLyAvLyBpZiAoIXZhbGlkRGF0ZShtYXR1cml0eSkgfHwgIXZhbGlkRGF0ZShzZXR0bGVtZW50KSkge1xuICAvLyAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgLy8gfVxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIHJhdGUgb3IgcGFyIGFyZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cbiAgaWYgKFswLDEsMiwzLDRdLmluZGV4T2YoYmFzaXMpPT09LTEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGlmIChbMSwyLDRdLmluZGV4T2YoZnJlcXVlbmN5KT09PS0xKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGlmIChzZXR0bGVtZW50ID49IG1hdHVyaXR5KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoWzAsMiw0XS5pbmRleE9mKGJhc2lzKT49MCkge1xuICAgIGxldCByZXN1bHQgPSAzNjAvZnJlcXVlbmN5XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoYmFzaXM9PT0zICkge1xuICAgIGxldCByZXN1bHQgPSAzNjUvZnJlcXVlbmN5XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoYmFzaXM9PT0xKSB7XG4gICAgbGV0IHJlc3VsdCA9IGdldF9kYXlzKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmcmVxdWVuY3kpLmVuZGRheSAtIGdldF9kYXlzKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmcmVxdWVuY3kpLnN0YXJ0ZGF5XG4gICAgcmV0dXJuIHJlc3VsdCAvICgxMDAwICogNjAgKiA2MCAqIDI0KVxuICB9XG59O1xuXG4vLyBDT1VQREFZU05D6K6h566X55qE5piv57uT566X5pel5Yiw5LiL5LiA5LuY5oGv5pel55qE5aSp5pWwXG5leHBvcnRzLkNPVVBEQVlTTkMgPSBmdW5jdGlvbiAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGZyZXF1ZW5jeSwgYmFzaXMpIHtcbiAgLy8gaWYgKCF2YWxpZERhdGUobWF0dXJpdHkpIHx8ICF2YWxpZERhdGUoc2V0dGxlbWVudCkpIHtcbiAgLy8gICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIC8vIH1cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciByYXRlIG9yIHBhciBhcmUgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvXG4gIGlmIChbMCwxLDIsMyw0XS5pbmRleE9mKGJhc2lzKT09PS0xKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoWzEsMiw0XS5pbmRleE9mKGZyZXF1ZW5jeSk9PT0tMSl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoc2V0dGxlbWVudCA+PSBtYXR1cml0eSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgbGV0IHNldHRsZW1lbnREYXRlID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpXG4gIGxldCByZXN1bHQgPSBnZXRfZGF5cyhzZXR0bGVtZW50LCBtYXR1cml0eSwgZnJlcXVlbmN5KS5lbmRkYXkgLSBzZXR0bGVtZW50RGF0ZVxuICByZXR1cm4gcmVzdWx0IC8gKDEwMDAgKiA2MCAqIDYwICogMjQpXG59O1xuXG4vL0NPVVBOQ0TorqHnrpfnmoTmmK/kuIvkuIDku5jmga/ml6Us55uu5YmN57uT5p6c57K+56Gu5Yiw5aSpIGJ5IOaXuuaXuiAyMDE5LzExLzE1XG5leHBvcnRzLkNPVVBOQ0QgPSBmdW5jdGlvbiAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGZyZXF1ZW5jeSwgYmFzaXMpIHtcbiAgLy8gaWYgKCF2YWxpZERhdGUobWF0dXJpdHkpIHx8ICF2YWxpZERhdGUoc2V0dGxlbWVudCkpIHtcbiAgLy8gICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIC8vIH1cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciByYXRlIG9yIHBhciBhcmUgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvXG4gIGlmIChbMCwxLDIsMyw0XS5pbmRleE9mKGJhc2lzKT09PS0xKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoWzEsMiw0XS5pbmRleE9mKGZyZXF1ZW5jeSk9PT0tMSl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoc2V0dGxlbWVudCA+PSBtYXR1cml0eSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgcmV0dXJuIGdldF9kYXlzKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmcmVxdWVuY3kpLmVuZGRheVxufTtcblxuLy9DT1VQTlVN6K6h566X55qE5piv57uT566X5pel5ZCO5LuY5oGv5qyh5pWwXG5leHBvcnRzLkNPVVBOVU0gPSBmdW5jdGlvbiAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGZyZXF1ZW5jeSwgYmFzaXMpIHtcbiAgLy8gaWYgKCF2YWxpZERhdGUobWF0dXJpdHkpIHx8ICF2YWxpZERhdGUoc2V0dGxlbWVudCkpIHtcbiAgLy8gICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIC8vIH1cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciByYXRlIG9yIHBhciBhcmUgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvXG4gIGlmIChbMCwxLDIsMyw0XS5pbmRleE9mKGJhc2lzKT09PS0xKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoWzEsMiw0XS5pbmRleE9mKGZyZXF1ZW5jeSk9PT0tMSl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoc2V0dGxlbWVudCA+PSBtYXR1cml0eSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgbGV0IHNldHRsZW1lbnREYXRlID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpXG4gIGxldCBtYXR1cml0eURhdGUgPSB1dGlscy5wYXJzZURhdGUobWF0dXJpdHkpXG4gIGxldCBtb250aF9TTT1tYXR1cml0eURhdGUuZ2V0RnVsbFllYXIoKSoxMittYXR1cml0eURhdGUuZ2V0TW9udGgoKS1zZXR0bGVtZW50RGF0ZS5nZXRGdWxsWWVhcigpKjEyLXNldHRsZW1lbnREYXRlLmdldE1vbnRoKClcbiAgbGV0IHRpbWVzPXBhcnNlSW50KG1vbnRoX1NNLygxMi9mcmVxdWVuY3kpKVxuICByZXR1cm4gdGltZXMrMVxufTtcblxuLy9DT1VQUENE6K6h566X55qE5piv57uT566X5pel5YmN5pyA5ZCO5LiA5qyh5LuY5oGv5pelLOebruWJjee7k+aenOeyvuehruWIsOWkqSBieSDml7rml7ogMjAxOS8xMS8xNVxuZXhwb3J0cy5DT1VQUENEID0gZnVuY3Rpb24gKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmcmVxdWVuY3ksIGJhc2lzKSB7XG4gIC8vIGlmICghdmFsaWREYXRlKG1hdHVyaXR5KSB8fCAhdmFsaWREYXRlKHNldHRsZW1lbnQpKSB7XG4gIC8vICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICAvLyB9XG4gIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgcmF0ZSBvciBwYXIgYXJlIGxvd2VyIHRoYW4gb3IgZXF1YWwgdG8gemVyb1xuICBpZiAoWzAsMSwyLDMsNF0uaW5kZXhPZihiYXNpcyk9PT0tMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgaWYgKFsxLDIsNF0uaW5kZXhPZihmcmVxdWVuY3kpPT09LTEpe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgaWYgKHNldHRsZW1lbnQgPj0gbWF0dXJpdHkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIHJldHVybiBnZXRfZGF5cyhzZXR0bGVtZW50LCBtYXR1cml0eSwgZnJlcXVlbmN5KS5zdGFydGRheVxufTtcblxuXG5leHBvcnRzLkNVTUlQTVQgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2RzLCB2YWx1ZSwgc3RhcnQsIGVuZCwgdHlwZSkge1xuICAvLyBDcmVkaXRzOiBhbGdvcml0aG0gaW5zcGlyZWQgYnkgQXBhY2hlIE9wZW5PZmZpY2VcbiAgLy8gQ3JlZGl0czogSGFubmVzIFN0aWViaXR6aG9mZXIgZm9yIHRoZSB0cmFuc2xhdGlvbnMgb2YgZnVuY3Rpb24gYW5kIHZhcmlhYmxlIG5hbWVzXG4gIC8vIFJlcXVpcmVzIGV4cG9ydHMuRlYoKSBhbmQgZXhwb3J0cy5QTVQoKSBmcm9tIGV4cG9ydHMuanMgW2h0dHA6Ly9zdG9pYy5jb20vZXhwb3J0cy9dXG5cbiAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xuICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XG4gIHZhbHVlID0gdXRpbHMucGFyc2VOdW1iZXIodmFsdWUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzLCB2YWx1ZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIHJhdGUsIHBlcmlvZHMsIG9yIHZhbHVlIGFyZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cbiAgaWYgKHJhdGUgPD0gMCB8fCBwZXJpb2RzIDw9IDAgfHwgdmFsdWUgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZGVhbDFDaGFyIDwgMSwgZW5kIDwgMSwgb3IgZGVhbDFDaGFyID4gZW5kXG4gIGlmIChzdGFydCA8IDEgfHwgZW5kIDwgMSB8fCBzdGFydCA+IGVuZCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgdHlwZSBpcyBuZWl0aGVyIDAgbm9yIDFcbiAgaWYgKHR5cGUgIT09IDAgJiYgdHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBDb21wdXRlIGN1bXVsYXRpdmUgaW50ZXJlc3RcbiAgbGV0IHBheW1lbnQgPSBleHBvcnRzLlBNVChyYXRlLCBwZXJpb2RzLCB2YWx1ZSwgMCwgdHlwZSk7XG4gIGxldCBpbnRlcmVzdCA9IDA7XG5cbiAgaWYgKHN0YXJ0ID09PSAxKSB7XG4gICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgIGludGVyZXN0ID0gLXZhbHVlO1xuICAgICAgc3RhcnQrKztcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgaW50ZXJlc3QgKz0gZXhwb3J0cy5GVihyYXRlLCBpIC0gMiwgcGF5bWVudCwgdmFsdWUsIDEpIC0gcGF5bWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZXJlc3QgKz0gZXhwb3J0cy5GVihyYXRlLCBpIC0gMSwgcGF5bWVudCwgdmFsdWUsIDApO1xuICAgIH1cbiAgfVxuICBpbnRlcmVzdCAqPSByYXRlO1xuXG4gIC8vIFJldHVybiBjdW11bGF0aXZlIGludGVyZXN0XG4gIHJldHVybiBpbnRlcmVzdDtcbn07XG5cbmV4cG9ydHMuQ1VNUFJJTkMgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2RzLCB2YWx1ZSwgc3RhcnQsIGVuZCwgdHlwZSkge1xuICAvLyBDcmVkaXRzOiBhbGdvcml0aG0gaW5zcGlyZWQgYnkgQXBhY2hlIE9wZW5PZmZpY2VcbiAgLy8gQ3JlZGl0czogSGFubmVzIFN0aWViaXR6aG9mZXIgZm9yIHRoZSB0cmFuc2xhdGlvbnMgb2YgZnVuY3Rpb24gYW5kIHZhcmlhYmxlIG5hbWVzXG5cbiAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xuICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XG4gIHZhbHVlID0gdXRpbHMucGFyc2VOdW1iZXIodmFsdWUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzLCB2YWx1ZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIHJhdGUsIHBlcmlvZHMsIG9yIHZhbHVlIGFyZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cbiAgaWYgKHJhdGUgPD0gMCB8fCBwZXJpb2RzIDw9IDAgfHwgdmFsdWUgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZGVhbDFDaGFyIDwgMSwgZW5kIDwgMSwgb3IgZGVhbDFDaGFyID4gZW5kXG4gIGlmIChzdGFydCA8IDEgfHwgZW5kIDwgMSB8fCBzdGFydCA+IGVuZCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgdHlwZSBpcyBuZWl0aGVyIDAgbm9yIDFcbiAgaWYgKHR5cGUgIT09IDAgJiYgdHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBDb21wdXRlIGN1bXVsYXRpdmUgcHJpbmNpcGFsXG4gIGxldCBwYXltZW50ID0gZXhwb3J0cy5QTVQocmF0ZSwgcGVyaW9kcywgdmFsdWUsIDAsIHR5cGUpO1xuICBsZXQgcHJpbmNpcGFsID0gMDtcbiAgaWYgKHN0YXJ0ID09PSAxKSB7XG4gICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgIHByaW5jaXBhbCA9IHBheW1lbnQgKyB2YWx1ZSAqIHJhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW5jaXBhbCA9IHBheW1lbnQ7XG4gICAgfVxuICAgIHN0YXJ0Kys7XG4gIH1cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgaWYgKHR5cGUgPiAwKSB7XG4gICAgICBwcmluY2lwYWwgKz0gcGF5bWVudCAtIChleHBvcnRzLkZWKHJhdGUsIGkgLSAyLCBwYXltZW50LCB2YWx1ZSwgMSkgLSBwYXltZW50KSAqIHJhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW5jaXBhbCArPSBwYXltZW50IC0gZXhwb3J0cy5GVihyYXRlLCBpIC0gMSwgcGF5bWVudCwgdmFsdWUsIDApICogcmF0ZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gY3VtdWxhdGl2ZSBwcmluY2lwYWxcbiAgcmV0dXJuIHByaW5jaXBhbDtcbn07XG5cbmV4cG9ydHMuREIgPSBmdW5jdGlvbihjb3N0LCBzYWx2YWdlLCBsaWZlLCBwZXJpb2QsIG1vbnRoKSB7XG4gIC8vIEluaXRpYWxpemUgbW9udGhcbiAgbW9udGggPSAobW9udGggPT09IHVuZGVmaW5lZCkgPyAxMiA6IG1vbnRoO1xuXG4gIGNvc3QgPSB1dGlscy5wYXJzZU51bWJlcihjb3N0KTtcbiAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xuICBsaWZlID0gdXRpbHMucGFyc2VOdW1iZXIobGlmZSk7XG4gIHBlcmlvZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZCk7XG4gIG1vbnRoID0gdXRpbHMucGFyc2VOdW1iZXIobW9udGgpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihjb3N0LCBzYWx2YWdlLCBsaWZlLCBwZXJpb2QsIG1vbnRoKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgaXMgbmVnYXRpdmVcbiAgaWYgKGNvc3QgPCAwIHx8IHNhbHZhZ2UgPCAwIHx8IGxpZmUgPCAwIHx8IHBlcmlvZCA8IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIG1vbnRoIGlzIG5vdCBhbiBpbnRlZ2VyIGJldHdlZW4gMSBhbmQgMTJcbiAgaWYgKFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXS5pbmRleE9mKG1vbnRoKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIHBlcmlvZCBpcyBncmVhdGVyIHRoYW4gbGlmZVxuICBpZiAocGVyaW9kID4gbGlmZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gMCAoemVybykgaWYgc2FsdmFnZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gY29zdFxuICBpZiAoc2FsdmFnZSA+PSBjb3N0KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBSYXRlIGlzIHJvdW5kZWQgdG8gdGhyZWUgZGVjaW1hbHMgcGxhY2VzXG4gIGxldCByYXRlID0gKDEgLSBNYXRoLnBvdyhzYWx2YWdlIC8gY29zdCwgMSAvIGxpZmUpKS50b0ZpeGVkKDMpO1xuXG4gIC8vIENvbXB1dGUgaW5pdGlhbCBkZXByZWNpYXRpb25cbiAgbGV0IGluaXRpYWwgPSBjb3N0ICogcmF0ZSAqIG1vbnRoIC8gMTI7XG5cbiAgLy8gQ29tcHV0ZSB0b3RhbCBkZXByZWNpYXRpb25cbiAgbGV0IHRvdGFsID0gaW5pdGlhbDtcbiAgbGV0IGN1cnJlbnQgPSAwO1xuICBsZXQgY2VpbGluZyA9IChwZXJpb2QgPT09IGxpZmUpID8gbGlmZSAtIDEgOiBwZXJpb2Q7XG4gIGZvciAobGV0IGkgPSAyOyBpIDw9IGNlaWxpbmc7IGkrKykge1xuICAgIGN1cnJlbnQgPSAoY29zdCAtIHRvdGFsKSAqIHJhdGU7XG4gICAgdG90YWwgKz0gY3VycmVudDtcbiAgfVxuXG4gIC8vIERlcHJlY2lhdGlvbiBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IHBlcmlvZHMgYXJlIHNwZWNpYWwgY2FzZXNcbiAgaWYgKHBlcmlvZCA9PT0gMSkge1xuICAgIC8vIEZpcnN0IHBlcmlvZFxuICAgIHJldHVybiBpbml0aWFsO1xuICB9IGVsc2UgaWYgKHBlcmlvZCA9PT0gbGlmZSkge1xuICAgIC8vIExhc3QgcGVyaW9kXG4gICAgcmV0dXJuIChjb3N0IC0gdG90YWwpICogcmF0ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxufTtcblxuZXhwb3J0cy5EREIgPSBmdW5jdGlvbihjb3N0LCBzYWx2YWdlLCBsaWZlLCBwZXJpb2QsIGZhY3Rvcikge1xuICAvLyBJbml0aWFsaXplIGZhY3RvclxuICBmYWN0b3IgPSAoZmFjdG9yID09PSB1bmRlZmluZWQpID8gMiA6IGZhY3RvcjtcblxuICBjb3N0ID0gdXRpbHMucGFyc2VOdW1iZXIoY29zdCk7XG4gIHNhbHZhZ2UgPSB1dGlscy5wYXJzZU51bWJlcihzYWx2YWdlKTtcbiAgbGlmZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGxpZmUpO1xuICBwZXJpb2QgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2QpO1xuICBmYWN0b3IgPSB1dGlscy5wYXJzZU51bWJlcihmYWN0b3IpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihjb3N0LCBzYWx2YWdlLCBsaWZlLCBwZXJpb2QsIGZhY3RvcikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgYW55IG9mIHRoZSBwYXJhbWV0ZXJzIGlzIG5lZ2F0aXZlIG9yIGlmIGZhY3RvciBpcyBudWxsXG4gIGlmIChjb3N0IDwgMCB8fCBzYWx2YWdlIDwgMCB8fCBsaWZlIDwgMCB8fCBwZXJpb2QgPCAwIHx8IGZhY3RvciA8PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBwZXJpb2QgaXMgZ3JlYXRlciB0aGFuIGxpZmVcbiAgaWYgKHBlcmlvZCA+IGxpZmUpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIDAgKHplcm8pIGlmIHNhbHZhZ2UgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGNvc3RcbiAgaWYgKHNhbHZhZ2UgPj0gY29zdCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gQ29tcHV0ZSBkZXByZWNpYXRpb25cbiAgbGV0IHRvdGFsID0gMDtcbiAgbGV0IGN1cnJlbnQgPSAwO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSBwZXJpb2Q7IGkrKykge1xuICAgIGN1cnJlbnQgPSBNYXRoLm1pbigoY29zdCAtIHRvdGFsKSAqIChmYWN0b3IgLyBsaWZlKSwgKGNvc3QgLSBzYWx2YWdlIC0gdG90YWwpKTtcbiAgICB0b3RhbCArPSBjdXJyZW50O1xuICB9XG5cbiAgLy8gUmV0dXJuIGRlcHJlY2lhdGlvblxuICByZXR1cm4gY3VycmVudDtcbn07XG5cbi8vIFRPRE9cbmV4cG9ydHMuRElTQyA9IGZ1bmN0aW9uIChzZXR0bGVtZW50LG1hdHVyaXR5LHByLHJlZGVtcHRpb24sYmFzaXMpIHtcbiAgaWYgKHByPD0wIHx8IHJlZGVtcHRpb248PTApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU1cbiAgfVxuICBpZiAoYmFzaXM8MCB8fCBiYXNpcyA+NCl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTVxuICB9XG4gIGlmIChzZXR0bGVtZW50ID49IG1hdHVyaXR5KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbiAgbGV0IEIgPSAzNjBcbiAgbGV0IERTTSA9IE1hdGguYWJzKGRhdGVUaW1lLkRBWVMobWF0dXJpdHksIHNldHRsZW1lbnQsIGZhbHNlKSlcbiAgcmV0dXJuIChyZWRlbXB0aW9uLXByKS9wciAqIEIgL0RTTVxufTtcblxuZXhwb3J0cy5ET0xMQVJERSA9IGZ1bmN0aW9uKGRvbGxhciwgZnJhY3Rpb24pIHtcbiAgLy8gQ3JlZGl0czogYWxnb3JpdGhtIGluc3BpcmVkIGJ5IEFwYWNoZSBPcGVuT2ZmaWNlXG5cbiAgZG9sbGFyID0gdXRpbHMucGFyc2VOdW1iZXIoZG9sbGFyKTtcbiAgZnJhY3Rpb24gPSB1dGlscy5wYXJzZU51bWJlcihmcmFjdGlvbik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGRvbGxhciwgZnJhY3Rpb24pKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGZyYWN0aW9uIGlzIG5lZ2F0aXZlXG4gIGlmIChmcmFjdGlvbiA8IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGZyYWN0aW9uIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwIGFuZCBsZXNzIHRoYW4gMVxuICBpZiAoZnJhY3Rpb24gPj0gMCAmJiBmcmFjdGlvbiA8IDEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfRElWMDtcbiAgfVxuXG4gIC8vIFRydW5jYXRlIGZyYWN0aW9uIGlmIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXG4gIGZyYWN0aW9uID0gcGFyc2VJbnQoZnJhY3Rpb24sIDEwKTtcblxuICAvLyBDb21wdXRlIGludGVnZXIgcGFydFxuICBsZXQgcmVzdWx0ID0gcGFyc2VJbnQoZG9sbGFyLCAxMCk7XG5cbiAgLy8gQWRkIGRlY2ltYWwgcGFydFxuICByZXN1bHQgKz0gKGRvbGxhciAlIDEpICogTWF0aC5wb3coMTAsIE1hdGguY2VpbChNYXRoLmxvZyhmcmFjdGlvbikgLyBNYXRoLkxOMTApKSAvIGZyYWN0aW9uO1xuXG4gIC8vIFJvdW5kIHJlc3VsdFxuICBsZXQgcG93ZXIgPSBNYXRoLnBvdygxMCwgTWF0aC5jZWlsKE1hdGgubG9nKGZyYWN0aW9uKSAvIE1hdGguTE4yKSArIDEpO1xuICByZXN1bHQgPSBNYXRoLnJvdW5kKHJlc3VsdCAqIHBvd2VyKSAvIHBvd2VyO1xuXG4gIC8vIFJldHVybiBjb252ZXJ0ZWQgZG9sbGFyIHByaWNlXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnRzLkRPTExBUkZSID0gZnVuY3Rpb24oZG9sbGFyLCBmcmFjdGlvbikge1xuICAvLyBDcmVkaXRzOiBhbGdvcml0aG0gaW5zcGlyZWQgYnkgQXBhY2hlIE9wZW5PZmZpY2VcblxuICBkb2xsYXIgPSB1dGlscy5wYXJzZU51bWJlcihkb2xsYXIpO1xuICBmcmFjdGlvbiA9IHV0aWxzLnBhcnNlTnVtYmVyKGZyYWN0aW9uKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZG9sbGFyLCBmcmFjdGlvbikpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZnJhY3Rpb24gaXMgbmVnYXRpdmVcbiAgaWYgKGZyYWN0aW9uIDwgMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgZnJhY3Rpb24gaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAgYW5kIGxlc3MgdGhhbiAxXG4gIGlmIChmcmFjdGlvbiA+PSAwICYmIGZyYWN0aW9uIDwgMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9ESVYwO1xuICB9XG5cbiAgLy8gVHJ1bmNhdGUgZnJhY3Rpb24gaWYgaXQgaXMgbm90IGFuIGludGVnZXJcbiAgZnJhY3Rpb24gPSBwYXJzZUludChmcmFjdGlvbiwgMTApO1xuXG4gIC8vIENvbXB1dGUgaW50ZWdlciBwYXJ0XG4gIGxldCByZXN1bHQgPSBwYXJzZUludChkb2xsYXIsIDEwKTtcblxuICAvLyBBZGQgZGVjaW1hbCBwYXJ0XG4gIHJlc3VsdCArPSAoZG9sbGFyICUgMSkgKiBNYXRoLnBvdygxMCwgLU1hdGguY2VpbChNYXRoLmxvZyhmcmFjdGlvbikgLyBNYXRoLkxOMTApKSAqIGZyYWN0aW9uO1xuXG4gIC8vIFJldHVybiBjb252ZXJ0ZWQgZG9sbGFyIHByaWNlXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBUT0RPXG4vL1hX77ya5b6F5a6e546wXG5leHBvcnRzLkRVUkFUSU9OID0gZnVuY3Rpb24gKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBjb3Vwb24sIHlsZCwgZnJlcXVlbmN5LCBiYXNpcykge1xuICBzZXR0bGVtZW50ID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpO1xuICBtYXR1cml0eSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSk7XG4gIGlmICghdmFsaWREYXRlKG1hdHVyaXR5KSB8fCAhdmFsaWREYXRlKHNldHRsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChiYXNpczwwIHx8IGJhc2lzID4gNCl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTVxuICB9XG4gIGlmIChzZXR0bGVtZW50ID49IG1hdHVyaXR5KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbn07XG4vL1hX77yaZW5kXG5cbmV4cG9ydHMuRUZGRUNUID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kcykge1xuICByYXRlID0gdXRpbHMucGFyc2VOdW1iZXIocmF0ZSk7XG4gIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kcykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgcmF0ZSA8PTAgb3IgcGVyaW9kcyA8IDFcbiAgaWYgKHJhdGUgPD0gMCB8fCBwZXJpb2RzIDwgMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBUcnVuY2F0ZSBwZXJpb2RzIGlmIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXG4gIHBlcmlvZHMgPSBwYXJzZUludChwZXJpb2RzLCAxMCk7XG5cbiAgLy8gUmV0dXJuIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZVxuICByZXR1cm4gTWF0aC5wb3coMSArIHJhdGUgLyBwZXJpb2RzLCBwZXJpb2RzKSAtIDE7XG59O1xuXG5leHBvcnRzLkZWID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kcywgcGF5bWVudCwgdmFsdWUsIHR5cGUpIHtcbiAgLy8gQ3JlZGl0czogYWxnb3JpdGhtIGluc3BpcmVkIGJ5IEFwYWNoZSBPcGVuT2ZmaWNlXG5cbiAgdmFsdWUgPSB2YWx1ZSB8fCAwO1xuICB0eXBlID0gdHlwZSB8fCAwO1xuXG4gIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcbiAgcGVyaW9kcyA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZHMpO1xuICBwYXltZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocGF5bWVudCk7XG4gIHZhbHVlID0gdXRpbHMucGFyc2VOdW1iZXIodmFsdWUpO1xuICB0eXBlID0gdXRpbHMucGFyc2VOdW1iZXIodHlwZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhdGUsIHBlcmlvZHMsIHBheW1lbnQsIHZhbHVlLCB0eXBlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBmdXR1cmUgdmFsdWVcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKHJhdGUgPT09IDApIHtcbiAgICByZXN1bHQgPSB2YWx1ZSArIHBheW1lbnQgKiBwZXJpb2RzO1xuICB9IGVsc2Uge1xuICAgIGxldCB0ZXJtID0gTWF0aC5wb3coMSArIHJhdGUsIHBlcmlvZHMpO1xuICAgIGlmICh0eXBlID09PSAxKSB7XG4gICAgICByZXN1bHQgPSB2YWx1ZSAqIHRlcm0gKyBwYXltZW50ICogKDEgKyByYXRlKSAqICh0ZXJtIC0gMSkgLyByYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB2YWx1ZSAqIHRlcm0gKyBwYXltZW50ICogKHRlcm0gLSAxKSAvIHJhdGU7XG4gICAgfVxuICB9XG4gIHJldHVybiAtcmVzdWx0O1xufTtcblxuZXhwb3J0cy5GVlNDSEVEVUxFID0gZnVuY3Rpb24gKHByaW5jaXBhbCwgc2NoZWR1bGUpIHtcbiAgcHJpbmNpcGFsID0gdXRpbHMucGFyc2VOdW1iZXIocHJpbmNpcGFsKTtcbiAgaWYgKHR5cGVvZiBzY2hlZHVsZSA9PT0gJ3N0cmluZycpe1xuICAgIHNjaGVkdWxlID0gdXRpbHMuc3RyVG9NYXRyaXgoc2NoZWR1bGUpXG4gIH1cbiAgc2NoZWR1bGUgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oc2NoZWR1bGUpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocHJpbmNpcGFsLCBzY2hlZHVsZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICBsZXQgbiA9IHNjaGVkdWxlLmxlbmd0aDtcbiAgbGV0IGZ1dHVyZSA9IHByaW5jaXBhbDtcblxuICAvLyBBcHBseSBhbGwgaW50ZXJlc3RzIGluIHNjaGVkdWxlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgLy8gQXBwbHkgc2NoZWR1bGVkIGludGVyZXN0XG4gICAgZnV0dXJlICo9IDEgKyBzY2hlZHVsZVtpXTtcbiAgfVxuXG4gIC8vIFJldHVybiBmdXR1cmUgdmFsdWVcbiAgcmV0dXJuIGZ1dHVyZTtcbn07XG5cbi8vIFhX77yaSU5UUkFUReWunueOsFxuZXhwb3J0cy5JTlRSQVRFID0gZnVuY3Rpb24gKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBpbnZlc3RtZW50LCByZWRlbXB0aW9uLCBiYXNpcykge1xuICAvL2h0dHBzOi8vc3VwcG9ydC5vZmZpY2UuY29tL3poLWNuL2FydGljbGUvaW50cmF0ZS0lRTUlODclQkQlRTYlOTUlQjAtNWNiMzRkZGUtYTIyMS00Y2I2LWIzZWItMGI5ZTU1ZTEzMTZmXG4gIGlmIChpbnZlc3RtZW50PD0wIHx8IHJlZGVtcHRpb248PTApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRVxuICB9XG4gIGlmIChiYXNpczwwIHx8IGJhc2lzID4gNCl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTVxuICB9XG4gIGlmIChzZXR0bGVtZW50ID49IG1hdHVyaXR5KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNXG4gIH1cbiAgbGV0IEIgPSAxLy/kuIDlubTkuYvkuK3nmoTlpKnmlbDvvIzlj5blhrPkuo7lubTln7rlh4bmlbDjgIJcbiAgbGV0IERJTSA9IDIvLyDnu5Pnrpfml6XkuI7liLDmnJ/ml6XkuYvpl7TnmoTlpKnmlbDjgIJcbiAgcmV0dXJuIChyZWRlbXB0aW9uLWludmVzdG1lbnQpL2ludmVzdG1lbnQgKihCL0RJTSlcbn07XG4vL1hX77yaZW5kXG5cbmV4cG9ydHMuSVBNVCA9IGZ1bmN0aW9uKHJhdGUsIHBlcmlvZCwgcGVyaW9kcywgcHJlc2VudCwgZnV0dXJlLCB0eXBlKSB7XG4gIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxuXG4gIGZ1dHVyZSA9IGZ1dHVyZSB8fCAwO1xuICB0eXBlID0gdHlwZSB8fCAwO1xuXG4gIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcbiAgcGVyaW9kID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kKTtcbiAgcGVyaW9kcyA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZHMpO1xuICBwcmVzZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocHJlc2VudCk7XG4gIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XG4gIHR5cGUgPSB1dGlscy5wYXJzZU51bWJlcih0eXBlKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gQ29tcHV0ZSBwYXltZW50XG4gIGxldCBwYXltZW50ID0gZXhwb3J0cy5QTVQocmF0ZSwgcGVyaW9kcywgcHJlc2VudCwgZnV0dXJlLCB0eXBlKTtcblxuICAvLyBDb21wdXRlIGludGVyZXN0XG4gIGxldCBpbnRlcmVzdDtcbiAgaWYgKHBlcmlvZCA9PT0gMSkge1xuICAgIGlmICh0eXBlID09PSAxKSB7XG4gICAgICBpbnRlcmVzdCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludGVyZXN0ID0gLXByZXNlbnQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlID09PSAxKSB7XG4gICAgICBpbnRlcmVzdCA9IGV4cG9ydHMuRlYocmF0ZSwgcGVyaW9kIC0gMiwgcGF5bWVudCwgcHJlc2VudCwgMSkgLSBwYXltZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcmVzdCA9IGV4cG9ydHMuRlYocmF0ZSwgcGVyaW9kIC0gMSwgcGF5bWVudCwgcHJlc2VudCwgMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIGludGVyZXN0XG4gIHJldHVybiBpbnRlcmVzdCAqIHJhdGU7XG59O1xuXG5leHBvcnRzLklSUiA9IGZ1bmN0aW9uKHZhbHVlcywgZ3Vlc3MpIHtcbiAgLy8gQ3JlZGl0czogYWxnb3JpdGhtIGluc3BpcmVkIGJ5IEFwYWNoZSBPcGVuT2ZmaWNlXG5cbiAgZ3Vlc3MgPSBndWVzcyB8fCAwO1xuXG4gIHZhbHVlcyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbih2YWx1ZXMpKTtcbiAgZ3Vlc3MgPSB1dGlscy5wYXJzZU51bWJlcihndWVzcyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHZhbHVlcywgZ3Vlc3MpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlcyB0aGUgcmVzdWx0aW5nIGFtb3VudFxuICBsZXQgaXJyUmVzdWx0ID0gZnVuY3Rpb24odmFsdWVzLCBkYXRlcywgcmF0ZSkge1xuICAgIGxldCByID0gcmF0ZSArIDE7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlc1swXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHZhbHVlc1tpXSAvIE1hdGgucG93KHIsIChkYXRlc1tpXSAtIGRhdGVzWzBdKSAvIDM2NSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gQ2FsY3VsYXRlcyB0aGUgZmlyc3QgZGVyaXZhdGlvblxuICBsZXQgaXJyUmVzdWx0RGVyaXYgPSBmdW5jdGlvbih2YWx1ZXMsIGRhdGVzLCByYXRlKSB7XG4gICAgbGV0IHIgPSByYXRlICsgMTtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGZyYWMgPSAoZGF0ZXNbaV0gLSBkYXRlc1swXSkgLyAzNjU7XG4gICAgICByZXN1bHQgLT0gZnJhYyAqIHZhbHVlc1tpXSAvIE1hdGgucG93KHIsIGZyYWMgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBJbml0aWFsaXplIGRhdGVzIGFuZCBjaGVjayB0aGF0IHZhbHVlcyBjb250YWlucyBhdCBsZWFzdCBvbmUgcG9zaXRpdmUgdmFsdWUgYW5kIG9uZSBuZWdhdGl2ZSB2YWx1ZVxuICBsZXQgZGF0ZXMgPSBbXTtcbiAgbGV0IHBvc2l0aXZlID0gZmFsc2U7XG4gIGxldCBuZWdhdGl2ZSA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIGRhdGVzW2ldID0gKGkgPT09IDApID8gMCA6IGRhdGVzW2kgLSAxXSArIDM2NTtcbiAgICBpZiAodmFsdWVzW2ldID4gMCkge1xuICAgICAgcG9zaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodmFsdWVzW2ldIDwgMCkge1xuICAgICAgbmVnYXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiB2YWx1ZXMgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgcG9zaXRpdmUgdmFsdWUgYW5kIG9uZSBuZWdhdGl2ZSB2YWx1ZVxuICBpZiAoIXBvc2l0aXZlIHx8ICFuZWdhdGl2ZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBJbml0aWFsaXplIGd1ZXNzIGFuZCByZXN1bHRSYXRlXG4gIGd1ZXNzID0gKGd1ZXNzID09PSB1bmRlZmluZWQpID8gMC4xIDogZ3Vlc3M7XG4gIGxldCByZXN1bHRSYXRlID0gZ3Vlc3M7XG5cbiAgLy8gU2V0IG1heGltdW0gZXBzaWxvbiBmb3IgZW5kIG9mIGl0ZXJhdGlvblxuICBsZXQgZXBzTWF4ID0gMWUtMTA7XG5cbiAgLy8gSW1wbGVtZW50IE5ld3RvbidzIG1ldGhvZFxuICBsZXQgbmV3UmF0ZSwgZXBzUmF0ZSwgcmVzdWx0VmFsdWU7XG4gIGxldCBjb250TG9vcCA9IHRydWU7XG4gIGRvIHtcbiAgICByZXN1bHRWYWx1ZSA9IGlyclJlc3VsdCh2YWx1ZXMsIGRhdGVzLCByZXN1bHRSYXRlKTtcbiAgICBuZXdSYXRlID0gcmVzdWx0UmF0ZSAtIHJlc3VsdFZhbHVlIC8gaXJyUmVzdWx0RGVyaXYodmFsdWVzLCBkYXRlcywgcmVzdWx0UmF0ZSk7XG4gICAgZXBzUmF0ZSA9IE1hdGguYWJzKG5ld1JhdGUgLSByZXN1bHRSYXRlKTtcbiAgICByZXN1bHRSYXRlID0gbmV3UmF0ZTtcbiAgICBjb250TG9vcCA9IChlcHNSYXRlID4gZXBzTWF4KSAmJiAoTWF0aC5hYnMocmVzdWx0VmFsdWUpID4gZXBzTWF4KTtcbiAgfSB3aGlsZSAoY29udExvb3ApO1xuXG4gIC8vIFJldHVybiBpbnRlcm5hbCByYXRlIG9mIHJldHVyblxuICByZXR1cm4gcmVzdWx0UmF0ZTtcbn07XG5cbmV4cG9ydHMuSVNQTVQgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2QsIHBlcmlvZHMsIHZhbHVlKSB7XG4gIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcbiAgcGVyaW9kID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kKTtcbiAgcGVyaW9kcyA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZHMpO1xuICB2YWx1ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCB2YWx1ZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gaW50ZXJlc3RcbiAgcmV0dXJuIHZhbHVlICogcmF0ZSAqIChwZXJpb2QgLyBwZXJpb2RzIC0gMSk7XG59O1xuXG4vLyBYV++8muW+heWunueOsFxuZXhwb3J0cy5NRFVSQVRJT04gPSBmdW5jdGlvbiAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGNvdXBvbiwgeWxkLCBmcmVxdWVuY3ksIGJhc2lzKSB7XG4gIGlmIChjb3Vwb24gPCAwIHx8IHlsZCA8IDApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU1cbiAgfVxuICBpZiAoYmFzaXMgPCAwIHx8IGJhc2lzID4gNCl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTVxuICB9XG4gIGlmIChbMSwgMiwgNF0uaW5kZXhPZihmcmVxdWVuY3kpID09PSAtMSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxufTtcbi8veFc6ZW5kXG5cbmV4cG9ydHMuTUlSUiA9IGZ1bmN0aW9uKHZhbHVlcywgZmluYW5jZV9yYXRlLCByZWludmVzdF9yYXRlKSB7XG4gIHZhbHVlcyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbih2YWx1ZXMpKTtcbiAgZmluYW5jZV9yYXRlID0gdXRpbHMucGFyc2VOdW1iZXIoZmluYW5jZV9yYXRlKTtcbiAgcmVpbnZlc3RfcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJlaW52ZXN0X3JhdGUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih2YWx1ZXMsIGZpbmFuY2VfcmF0ZSwgcmVpbnZlc3RfcmF0ZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBJbml0aWFsaXplIG51bWJlciBvZiB2YWx1ZXNcbiAgbGV0IG4gPSB2YWx1ZXMubGVuZ3RoO1xuXG4gIC8vIExvb2t1cCBwYXltZW50cyAobmVnYXRpdmUgdmFsdWVzKSBhbmQgaW5jb21lcyAocG9zaXRpdmUgdmFsdWVzKVxuICBsZXQgcGF5bWVudHMgPSBbXTtcbiAgbGV0IGluY29tZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBpZiAodmFsdWVzW2ldIDwgMCkge1xuICAgICAgcGF5bWVudHMucHVzaCh2YWx1ZXNbaV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmNvbWVzLnB1c2godmFsdWVzW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gbW9kaWZpZWQgaW50ZXJuYWwgcmF0ZSBvZiByZXR1cm5cbiAgbGV0IG51bSA9IC1leHBvcnRzLk5QVihyZWludmVzdF9yYXRlLCBpbmNvbWVzKSAqIE1hdGgucG93KDEgKyByZWludmVzdF9yYXRlLCBuIC0gMSk7XG4gIGxldCBkZW4gPSBleHBvcnRzLk5QVihmaW5hbmNlX3JhdGUsIHBheW1lbnRzKSAqICgxICsgZmluYW5jZV9yYXRlKTtcbiAgcmV0dXJuIE1hdGgucG93KG51bSAvIGRlbiwgMSAvIChuIC0gMSkpIC0gMTtcbn07XG5cbmV4cG9ydHMuTk9NSU5BTCA9IGZ1bmN0aW9uKHJhdGUsIHBlcmlvZHMpIHtcbiAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xuICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhdGUsIHBlcmlvZHMpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIHJhdGUgPD0wIG9yIHBlcmlvZHMgPCAxXG4gIGlmIChyYXRlIDw9IDAgfHwgcGVyaW9kcyA8IDEpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gVHJ1bmNhdGUgcGVyaW9kcyBpZiBpdCBpcyBub3QgYW4gaW50ZWdlclxuICBwZXJpb2RzID0gcGFyc2VJbnQocGVyaW9kcywgMTApO1xuXG4gIC8vIFJldHVybiBub21pbmFsIGFubnVhbCBpbnRlcmVzdCByYXRlXG4gIHJldHVybiAoTWF0aC5wb3cocmF0ZSArIDEsIDEgLyBwZXJpb2RzKSAtIDEpICogcGVyaW9kcztcbn07XG5cbmV4cG9ydHMuTlBFUiA9IGZ1bmN0aW9uKHJhdGUsIHBheW1lbnQsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSkge1xuICB0eXBlID0gKHR5cGUgPT09IHVuZGVmaW5lZCkgPyAwIDogdHlwZTtcbiAgZnV0dXJlID0gKGZ1dHVyZSA9PT0gdW5kZWZpbmVkKSA/IDAgOiBmdXR1cmU7XG5cbiAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xuICBwYXltZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocGF5bWVudCk7XG4gIHByZXNlbnQgPSB1dGlscy5wYXJzZU51bWJlcihwcmVzZW50KTtcbiAgZnV0dXJlID0gdXRpbHMucGFyc2VOdW1iZXIoZnV0dXJlKTtcbiAgdHlwZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHR5cGUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwYXltZW50LCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiBwZXJpb2RzXG4gIGxldCBudW0gPSBwYXltZW50ICogKDEgKyByYXRlICogdHlwZSkgLSBmdXR1cmUgKiByYXRlO1xuICBsZXQgZGVuID0gKHByZXNlbnQgKiByYXRlICsgcGF5bWVudCAqICgxICsgcmF0ZSAqIHR5cGUpKTtcbiAgcmV0dXJuIE1hdGgubG9nKG51bSAvIGRlbikgLyBNYXRoLmxvZygxICsgcmF0ZSk7XG59O1xuXG5leHBvcnRzLk5QViA9IGZ1bmN0aW9uKCkge1xuICBsZXQgYXJncyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcbiAgaWYgKGFyZ3MgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBhcmdzO1xuICB9XG5cbiAgLy8gTG9va3VwIHJhdGVcbiAgbGV0IHJhdGUgPSBhcmdzWzBdO1xuXG4gIC8vIEluaXRpYWxpemUgbmV0IHByZXNlbnQgdmFsdWVcbiAgbGV0IHZhbHVlID0gMDtcblxuICAvLyBMb29wIG9uIGFsbCB2YWx1ZXNcbiAgZm9yIChsZXQgaiA9IDE7IGogPCBhcmdzLmxlbmd0aDsgaisrKSB7XG4gICAgdmFsdWUgKz0gYXJnc1tqXSAvIE1hdGgucG93KDEgKyByYXRlLCBqKTtcbiAgfVxuXG4gIC8vIFJldHVybiBuZXQgcHJlc2VudCB2YWx1ZVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyBYVzrlvoXlrp7njrBcbmV4cG9ydHMuT0RERlBSSUNFID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcignT0RERlBSSUNFIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuLy8gVE9ET1xuZXhwb3J0cy5PRERGWUlFTEQgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdPRERGWUlFTEQgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG4vLyBUT0RPXG5leHBvcnRzLk9ERExQUklDRSA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ09ERExQUklDRSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbi8vIFRPRE9cbmV4cG9ydHMuT0RETFlJRUxEID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcignT0RETFlJRUxEIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcbi8vWFfvvJplbmRcbmV4cG9ydHMuUERVUkFUSU9OID0gZnVuY3Rpb24ocmF0ZSwgcHJlc2VudCwgZnV0dXJlKSB7XG4gIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcbiAgcHJlc2VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHByZXNlbnQpO1xuICBmdXR1cmUgPSB1dGlscy5wYXJzZU51bWJlcihmdXR1cmUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwcmVzZW50LCBmdXR1cmUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIHJhdGUgPD0wXG4gIGlmIChyYXRlIDw9IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiBwZXJpb2RzXG4gIHJldHVybiAoTWF0aC5sb2coZnV0dXJlKSAtIE1hdGgubG9nKHByZXNlbnQpKSAvIE1hdGgubG9nKDEgKyByYXRlKTtcbn07XG5cbmV4cG9ydHMuUE1UID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kcywgcHJlc2VudCwgZnV0dXJlLCB0eXBlKSB7XG4gIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxuXG4gIGZ1dHVyZSA9IGZ1dHVyZSB8fCAwO1xuICB0eXBlID0gdHlwZSB8fCAwO1xuXG4gIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcbiAgcGVyaW9kcyA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZHMpO1xuICBwcmVzZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocHJlc2VudCk7XG4gIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XG4gIHR5cGUgPSB1dGlscy5wYXJzZU51bWJlcih0eXBlKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kcywgcHJlc2VudCwgZnV0dXJlLCB0eXBlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBwYXltZW50XG4gIGxldCByZXN1bHQ7XG4gIGlmIChyYXRlID09PSAwKSB7XG4gICAgcmVzdWx0ID0gKHByZXNlbnQgKyBmdXR1cmUpIC8gcGVyaW9kcztcbiAgfSBlbHNlIHtcbiAgICBsZXQgdGVybSA9IE1hdGgucG93KDEgKyByYXRlLCBwZXJpb2RzKTtcbiAgICBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgcmVzdWx0ID0gKGZ1dHVyZSAqIHJhdGUgLyAodGVybSAtIDEpICsgcHJlc2VudCAqIHJhdGUgLyAoMSAtIDEgLyB0ZXJtKSkgLyAoMSArIHJhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBmdXR1cmUgKiByYXRlIC8gKHRlcm0gLSAxKSArIHByZXNlbnQgKiByYXRlIC8gKDEgLSAxIC8gdGVybSk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtcmVzdWx0O1xufTtcblxuZXhwb3J0cy5QUE1UID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpIHtcbiAgZnV0dXJlID0gZnV0dXJlIHx8IDA7XG4gIHR5cGUgPSB0eXBlIHx8IDA7XG5cbiAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xuICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XG4gIHByZXNlbnQgPSB1dGlscy5wYXJzZU51bWJlcihwcmVzZW50KTtcbiAgZnV0dXJlID0gdXRpbHMucGFyc2VOdW1iZXIoZnV0dXJlKTtcbiAgdHlwZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHR5cGUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuUE1UKHJhdGUsIHBlcmlvZHMsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSkgLSBleHBvcnRzLklQTVQocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpO1xufTtcbi8vWFfvvJrlh73mlbDlrp7njrBcbmV4cG9ydHMuUFJJQ0UgPSBmdW5jdGlvbiAoc2V0dGxlbWVudCwgbWF0dXJpdHksIHJhdGUsIHlsZCwgcmVkZW1wdGlvbiwgZnJlcXVlbmN5LCBiYXNpcykge1xuICBsZXQgc2V0dGxlbWVudERhdGUgPSB1dGlscy5wYXJzZURhdGUoc2V0dGxlbWVudClcbiAgbGV0IG1hdHVyaXR5RGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSlcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3Ioc2V0dGxlbWVudERhdGUsIG1hdHVyaXR5RGF0ZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgaWYgKGJhc2lzPDAgfHwgYmFzaXM+NCl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BXG4gIH1cbiAgaWYoc2V0dGxlbWVudERhdGUgPj0gbWF0dXJpdHlEYXRlKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBsZXQgbW9udGhfU009bWF0dXJpdHlEYXRlLmdldEZ1bGxZZWFyKCkqMTIrbWF0dXJpdHlEYXRlLmdldE1vbnRoKCktc2V0dGxlbWVudERhdGUuZ2V0RnVsbFllYXIoKSoxMi1zZXR0bGVtZW50RGF0ZS5nZXRNb250aCgpXG4gIGxldCBOID1wYXJzZUludChtb250aF9TTS8oMTIvZnJlcXVlbmN5KSlcbiAgbGV0IGVuZGRheT11dGlscy5Db3B5KG1hdHVyaXR5RGF0ZSlcbiAgZW5kZGF5LnNldE1vbnRoKGVuZGRheS5nZXRNb250aCgpLU4qMTIvZnJlcXVlbmN5KVxuICBsZXQgc3RhcnRkYXk9IHV0aWxzLkNvcHkoZW5kZGF5KVxuICBzdGFydGRheS5zZXRNb250aChzdGFydGRheS5nZXRNb250aCgpLTEyL2ZyZXF1ZW5jeSlcbiAgbGV0IERTQyA9IChlbmRkYXktc2V0dGxlbWVudERhdGUpLyAoMTAwMCAqIDYwICogNjAgKiAyNClcbiAgbGV0IEUgPSAoZW5kZGF5LXN0YXJ0ZGF5KS8gKDEwMDAgKiA2MCAqIDYwICogMjQpXG4gIGxldCBBID0gKHNldHRsZW1lbnREYXRlLXN0YXJ0ZGF5KS8gKDEwMDAgKiA2MCAqIDYwICogMjQpXG4gIGlmKE4gPiAxKXtcbiAgICBsZXQgUFBBUlQxPXJlZGVtcHRpb24vKCgxK3lsZC9mcmVxdWVuY3kpXihOLTErRFNDL0UpKS0oKDEwMCpyYXRlKkEpLyhmcmVxdWVuY3kqRSkpXG4gICAgbGV0IFBQQVJUMiA9ICgxMDAqcmF0ZSkvKGZyZXF1ZW5jeSooKDEreWxkL2ZyZXF1ZW5jeSleKERTQy9FKSkpXG4gICAgZm9yKGxldCBrID0gMjtrPD1OO2srKyl7XG4gICAgICBQUEFSVDIgPSBQUEFSVDIrKDEwMCpyYXRlKS8oZnJlcXVlbmN5KigoMSt5bGQvZnJlcXVlbmN5KV4oay0xK0RTQy9FKSkpXG4gICAgfVxuICAgIGxldCBQID0gUFBBUlQxK1BQQVJUMlxuICAgIHJldHVybiBQXG4gIH1cbiAgaWYoTiA9PSAxKXtcbiAgICBsZXQgVDEgPSAxMDAqcmF0ZS9mcmVxdWVuY3kgK3JlZGVtcHRpb25cbiAgICBsZXQgVDIgPSB5bGQqKEUtQSkvZnJlcXVlbmN5L0UrMVxuICAgIGxldCBUMyA9IDEwMCpyYXRlKkEvZnJlcXVlbmN5L0VcbiAgICBsZXQgUCA9IFQxL1QyLVQzXG4gICAgcmV0dXJuIFBcbiAgfVxufTtcblxuLy8gVE9ET1xuZXhwb3J0cy5QUklDRURJU0MgPSBmdW5jdGlvbiAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGRpc2NvdW50LCByZWRlbXB0aW9uLCBiYXNpcykge1xuICBzZXR0bGVtZW50ID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpO1xuICBtYXR1cml0eSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHNldHRsZW1lbnQsIG1hdHVyaXR5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoYmFzaXM8MCB8fCBiYXNpcz40KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBpZihzZXR0bGVtZW50ID49IG1hdHVyaXR5KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBsZXQgZGF5ID0gTWF0aC5hYnMoZGF0ZVRpbWUuREFZUyhzZXR0bGVtZW50LCBtYXR1cml0eSwgZmFsc2UpKVxuICByZXR1cm4gcmVkZW1wdGlvbiAtIGRpc2NvdW50KnJlZGVtcHRpb24qZGF5LzM2MFxufTtcblxuLy8gVE9ET1xuZXhwb3J0cy5QUklDRU1BVCA9IGZ1bmN0aW9uIChzZXR0bGVtZW50LCBtYXR1cml0eSwgaXNzdWUsIHJhdGUsIHlsZCwgYmFzaXMpIHtcbiAgc2V0dGxlbWVudCA9IHV0aWxzLnBhcnNlRGF0ZShzZXR0bGVtZW50KTtcbiAgbWF0dXJpdHkgPSB1dGlscy5wYXJzZURhdGUobWF0dXJpdHkpO1xuICBpc3N1ZSA9IHV0aWxzLnBhcnNlRGF0ZShpc3N1ZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHNldHRsZW1lbnQsIG1hdHVyaXR5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZiAoYmFzaXM8MCB8fCBiYXNpcz40KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBpZihzZXR0bGVtZW50ID49IG1hdHVyaXR5KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBsZXQgZHNtID0gTWF0aC5hYnMoZGF0ZVRpbWUuREFZUyhzZXR0bGVtZW50LCBtYXR1cml0eSwgZmFsc2UpKVxuICBsZXQgZGltID0gTWF0aC5hYnMoZGF0ZVRpbWUuREFZUyhtYXR1cml0eSwgaXNzdWUsIGZhbHNlKSlcbiAgbGV0IEIgPSAzNjBcbiAgbGV0IEEgPSBNYXRoLmFicyhkYXRlVGltZS5EQVlTKGlzc3VlLCBzZXR0bGVtZW50LCBmYWxzZSkpXG4gIGxldCByZXN1bHQgPSAoMTAwICsgKChkaW0vQikqcmF0ZSoxMDApKS8oMSsoZHNtL0IpKnlsZCktKEEvQikqcmF0ZSoxMDBcbiAgcmV0dXJuIHJlc3VsdFxufTtcbi8vWFfvvJplbmRcbmV4cG9ydHMuUFYgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2RzLCBwYXltZW50LCBmdXR1cmUsIHR5cGUpIHtcbiAgZnV0dXJlID0gZnV0dXJlIHx8IDA7XG4gIHR5cGUgPSB0eXBlIHx8IDA7XG5cbiAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xuICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XG4gIHBheW1lbnQgPSB1dGlscy5wYXJzZU51bWJlcihwYXltZW50KTtcbiAgZnV0dXJlID0gdXRpbHMucGFyc2VOdW1iZXIoZnV0dXJlKTtcbiAgdHlwZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHR5cGUpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzLCBwYXltZW50LCBmdXR1cmUsIHR5cGUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIHByZXNlbnQgdmFsdWVcbiAgaWYgKHJhdGUgPT09IDApIHtcbiAgICByZXR1cm4gLXBheW1lbnQgKiBwZXJpb2RzIC0gZnV0dXJlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoKCgxIC0gTWF0aC5wb3coMSArIHJhdGUsIHBlcmlvZHMpKSAvIHJhdGUpICogcGF5bWVudCAqICgxICsgcmF0ZSAqIHR5cGUpIC0gZnV0dXJlKSAvIE1hdGgucG93KDEgKyByYXRlLCBwZXJpb2RzKTtcbiAgfVxufTtcblxuZXhwb3J0cy5SQVRFID0gZnVuY3Rpb24ocGVyaW9kcywgcGF5bWVudCwgcHJlc2VudCwgZnV0dXJlLCB0eXBlLCBndWVzcykge1xuICAvLyBDcmVkaXRzOiByYWJ1Z2VudG9cblxuICBndWVzcyA9IChndWVzcyA9PT0gdW5kZWZpbmVkKSA/IDAuMDEgOiBndWVzcztcbiAgZnV0dXJlID0gKGZ1dHVyZSA9PT0gdW5kZWZpbmVkKSA/IDAgOiBmdXR1cmU7XG4gIHR5cGUgPSAodHlwZSA9PT0gdW5kZWZpbmVkKSA/IDAgOiB0eXBlO1xuXG4gIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcbiAgcGF5bWVudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHBheW1lbnQpO1xuICBwcmVzZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocHJlc2VudCk7XG4gIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XG4gIHR5cGUgPSB1dGlscy5wYXJzZU51bWJlcih0eXBlKTtcbiAgZ3Vlc3MgPSB1dGlscy5wYXJzZU51bWJlcihndWVzcyk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHBlcmlvZHMsIHBheW1lbnQsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSwgZ3Vlc3MpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gU2V0IG1heGltdW0gZXBzaWxvbiBmb3IgZW5kIG9mIGl0ZXJhdGlvblxuICBsZXQgZXBzTWF4ID0gMWUtNjtcblxuICAvLyBTZXQgbWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9uc1xuICBsZXQgaXRlck1heCA9IDEwMDtcbiAgbGV0IGl0ZXIgPSAwO1xuICBsZXQgY2xvc2UgPSBmYWxzZTtcbiAgbGV0IHJhdGUgPSBndWVzcztcblxuICB3aGlsZSAoaXRlciA8IGl0ZXJNYXggJiYgIWNsb3NlKSB7XG4gICAgbGV0IHQxID0gTWF0aC5wb3cocmF0ZSArIDEsIHBlcmlvZHMpO1xuICAgIGxldCB0MiA9IE1hdGgucG93KHJhdGUgKyAxLCBwZXJpb2RzIC0gMSk7XG5cbiAgICBsZXQgZjEgPSBmdXR1cmUgKyB0MSAqIHByZXNlbnQgKyBwYXltZW50ICogKHQxIC0gMSkgKiAocmF0ZSAqIHR5cGUgKyAxKSAvIHJhdGU7XG4gICAgbGV0IGYyID0gcGVyaW9kcyAqIHQyICogcHJlc2VudCAtIHBheW1lbnQgKiAodDEgLSAxKSAqKHJhdGUgKiB0eXBlICsgMSkgLyBNYXRoLnBvdyhyYXRlLDIpO1xuICAgIGxldCBmMyA9IHBlcmlvZHMgKiBwYXltZW50ICogdDIgKiAocmF0ZSAqIHR5cGUgKyAxKSAvIHJhdGUgKyBwYXltZW50ICogKHQxIC0gMSkgKiB0eXBlIC8gcmF0ZTtcblxuICAgIGxldCBuZXdSYXRlID0gcmF0ZSAtIGYxIC8gKGYyICsgZjMpO1xuXG4gICAgaWYgKE1hdGguYWJzKG5ld1JhdGUgLSByYXRlKSA8IGVwc01heCkgY2xvc2UgPSB0cnVlO1xuICAgIGl0ZXIrK1xuICAgIHJhdGUgPSBuZXdSYXRlO1xuICB9XG5cbiAgaWYgKCFjbG9zZSkgcmV0dXJuIE51bWJlci5OYU4gKyByYXRlO1xuICByZXR1cm4gcmF0ZTtcbn07XG4vL1hX77ya5Ye95pWw5a6e546wXG5leHBvcnRzLlJFQ0VJVkVEID0gZnVuY3Rpb24gKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBpbnZlc3RtZW50LCBkaXNjb3VudCwgYmFzaXMpIHtcbiAgc2V0dGxlbWVudCA9IHV0aWxzLnBhcnNlRGF0ZShzZXR0bGVtZW50KTtcbiAgbWF0dXJpdHkgPSB1dGlscy5wYXJzZURhdGUobWF0dXJpdHkpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihzZXR0bGVtZW50LCBtYXR1cml0eSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgaWYgKGludmVzdG1lbnQgPD0gMCB8fCBkaXNjb3VudCA8PSAwKXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBpZiAoYmFzaXM8MCB8fCBiYXNpcz40KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBpZihzZXR0bGVtZW50ID49IG1hdHVyaXR5KXtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkFcbiAgfVxuICBsZXQgZGF5ID0gTWF0aC5hYnMoZGF0ZVRpbWUuREFZUyhzZXR0bGVtZW50LCBtYXR1cml0eSwgZmFsc2UpKVxuICByZXR1cm4gaW52ZXN0bWVudC8oMS0oZGlzY291bnQqZGF5LzM2MCkpXG59O1xuLy9YV++8mmVuZFxuXG5leHBvcnRzLlJSSSA9IGZ1bmN0aW9uKHBlcmlvZHMsIHByZXNlbnQsIGZ1dHVyZSkge1xuICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XG4gIHByZXNlbnQgPSB1dGlscy5wYXJzZU51bWJlcihwcmVzZW50KTtcbiAgZnV0dXJlID0gdXRpbHMucGFyc2VOdW1iZXIoZnV0dXJlKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocGVyaW9kcywgcHJlc2VudCwgZnV0dXJlKSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBwZXJpb2RzIG9yIHByZXNlbnQgaXMgZXF1YWwgdG8gMCAoemVybylcbiAgaWYgKHBlcmlvZHMgPT09IDAgfHwgcHJlc2VudCA9PT0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXF1aXZhbGVudCBpbnRlcmVzdCByYXRlXG4gIHJldHVybiBNYXRoLnBvdyhmdXR1cmUgLyBwcmVzZW50LCAxIC8gcGVyaW9kcykgLSAxO1xufTtcblxuZXhwb3J0cy5TTE4gPSBmdW5jdGlvbihjb3N0LCBzYWx2YWdlLCBsaWZlKSB7XG4gIGNvc3QgPSB1dGlscy5wYXJzZU51bWJlcihjb3N0KTtcbiAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xuICBsaWZlID0gdXRpbHMucGFyc2VOdW1iZXIobGlmZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGNvc3QsIHNhbHZhZ2UsIGxpZmUpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGxpZmUgZXF1YWwgdG8gMCAoemVybylcbiAgaWYgKGxpZmUgPT09IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIHN0cmFpZ2h0LWxpbmUgZGVwcmVjaWF0aW9uXG4gIHJldHVybiAoY29zdCAtIHNhbHZhZ2UpIC8gbGlmZTtcbn07XG5cbmV4cG9ydHMuU1lEID0gZnVuY3Rpb24oY29zdCwgc2FsdmFnZSwgbGlmZSwgcGVyaW9kKSB7XG4gIC8vIFJldHVybiBlcnJvciBpZiBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgaXMgbm90IGEgbnVtYmVyXG4gIGNvc3QgPSB1dGlscy5wYXJzZU51bWJlcihjb3N0KTtcbiAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xuICBsaWZlID0gdXRpbHMucGFyc2VOdW1iZXIobGlmZSk7XG4gIHBlcmlvZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZCk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGNvc3QsIHNhbHZhZ2UsIGxpZmUsIHBlcmlvZCkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgbGlmZSBlcXVhbCB0byAwICh6ZXJvKVxuICBpZiAobGlmZSA9PT0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgcGVyaW9kIGlzIGxvd2VyIHRoYW4gMSBvciBncmVhdGVyIHRoYW4gbGlmZVxuICBpZiAocGVyaW9kIDwgMSB8fCBwZXJpb2QgPiBsaWZlKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFRydW5jYXRlIHBlcmlvZCBpZiBpdCBpcyBub3QgYW4gaW50ZWdlclxuICBwZXJpb2QgPSBwYXJzZUludChwZXJpb2QsIDEwKTtcblxuICAvLyBSZXR1cm4gc3RyYWlnaHQtbGluZSBkZXByZWNpYXRpb25cbiAgcmV0dXJuICgoY29zdCAtIHNhbHZhZ2UpICogKGxpZmUgLSBwZXJpb2QgKyAxKSAqIDIpIC8gKGxpZmUgKiAobGlmZSArIDEpKTtcbn07XG5cbmV4cG9ydHMuVEJJTExFUSA9IGZ1bmN0aW9uKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBkaXNjb3VudCkge1xuICBzZXR0bGVtZW50ID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpO1xuICBtYXR1cml0eSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSk7XG4gIGRpc2NvdW50ID0gdXRpbHMucGFyc2VOdW1iZXIoZGlzY291bnQpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcihzZXR0bGVtZW50LCBtYXR1cml0eSwgZGlzY291bnQpKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIGRpc2NvdW50IGlzIGxvd2VyIHRoYW4gb3IgZXF1YWwgdG8gemVyb1xuICBpZiAoZGlzY291bnQgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgc2V0dGxlbWVudCBpcyBncmVhdGVyIHRoYW4gbWF0dXJpdHlcbiAgaWYgKHNldHRsZW1lbnQgPiBtYXR1cml0eSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgbWF0dXJpdHkgaXMgbW9yZSB0aGFuIG9uZSB5ZWFyIGFmdGVyIHNldHRsZW1lbnRcbiAgaWYgKG1hdHVyaXR5IC0gc2V0dGxlbWVudCA+IDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGJvbmQtZXF1aXZhbGVudCB5aWVsZFxuICByZXR1cm4gKDM2NSAqIGRpc2NvdW50KSAvICgzNjAgLSBkaXNjb3VudCAqIGRhdGVUaW1lLkRBWVMzNjAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGZhbHNlKSk7XG59O1xuXG5leHBvcnRzLlRCSUxMUFJJQ0UgPSBmdW5jdGlvbihzZXR0bGVtZW50LCBtYXR1cml0eSwgZGlzY291bnQpIHtcbiAgc2V0dGxlbWVudCA9IHV0aWxzLnBhcnNlRGF0ZShzZXR0bGVtZW50KTtcbiAgbWF0dXJpdHkgPSB1dGlscy5wYXJzZURhdGUobWF0dXJpdHkpO1xuICBkaXNjb3VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpc2NvdW50KTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3Ioc2V0dGxlbWVudCwgbWF0dXJpdHksIGRpc2NvdW50KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBkaXNjb3VudCBpcyBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cbiAgaWYgKGRpc2NvdW50IDw9IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIHNldHRsZW1lbnQgaXMgZ3JlYXRlciB0aGFuIG1hdHVyaXR5XG4gIGlmIChzZXR0bGVtZW50ID4gbWF0dXJpdHkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG5cbiAgLy8gUmV0dXJuIGVycm9yIGlmIG1hdHVyaXR5IGlzIG1vcmUgdGhhbiBvbmUgeWVhciBhZnRlciBzZXR0bGVtZW50XG4gIGlmIChtYXR1cml0eSAtIHNldHRsZW1lbnQgPiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBib25kLWVxdWl2YWxlbnQgeWllbGRcbiAgcmV0dXJuIDEwMCAqICgxIC0gZGlzY291bnQgKiBkYXRlVGltZS5EQVlTMzYwKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmYWxzZSkgLyAzNjApO1xufTtcblxuZXhwb3J0cy5UQklMTFlJRUxEID0gZnVuY3Rpb24oc2V0dGxlbWVudCwgbWF0dXJpdHksIHByaWNlKSB7XG4gIHNldHRsZW1lbnQgPSB1dGlscy5wYXJzZURhdGUoc2V0dGxlbWVudCk7XG4gIG1hdHVyaXR5ID0gdXRpbHMucGFyc2VEYXRlKG1hdHVyaXR5KTtcbiAgcHJpY2UgPSB1dGlscy5wYXJzZU51bWJlcihwcmljZSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBwcmljZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBSZXR1cm4gZXJyb3IgaWYgcHJpY2UgaXMgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvXG4gIGlmIChwcmljZSA8PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBzZXR0bGVtZW50IGlzIGdyZWF0ZXIgdGhhbiBtYXR1cml0eVxuICBpZiAoc2V0dGxlbWVudCA+IG1hdHVyaXR5KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiBtYXR1cml0eSBpcyBtb3JlIHRoYW4gb25lIHllYXIgYWZ0ZXIgc2V0dGxlbWVudFxuICBpZiAobWF0dXJpdHkgLSBzZXR0bGVtZW50ID4gMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBSZXR1cm4gYm9uZC1lcXVpdmFsZW50IHlpZWxkXG4gIHJldHVybiAoMTAwIC0gcHJpY2UpICogMzYwIC8gKHByaWNlICogZGF0ZVRpbWUuREFZUzM2MChzZXR0bGVtZW50LCBtYXR1cml0eSwgZmFsc2UpKTtcbn07XG5cbi8vVE9ETyDlsJrmnKrogIPomZFub19zd2l0Y2jnmoTmg4XlhrUs6LW35aeL5pel5ZKM57uI5q2i5pel6YO95bim5bCP5pWw5pe25a2Y5Zyo6K+v5beuIGJ5IOaXuuaXujExLzE5XG5mdW5jdGlvbiBnZXRfdG90YWwoY29zdCwgc2FsdmFnZSwgcGVyaW9kLGxpZmUsZmFjdG9yKXtcbiAgbGV0IHRvdGFsID0gMDtcbiAgbGV0IGN1cnJlbnQgPSAwO1xuICBsZXQgaSA9IDFcbiAgZm9yICg7IGkgPD0gcGVyaW9kOyBpKyspIHtcbiAgICBjdXJyZW50ID0gTWF0aC5taW4oKGNvc3QgLSB0b3RhbCkgKiAoZmFjdG9yIC8gbGlmZSksIChjb3N0IC0gc2FsdmFnZSAtIHRvdGFsKSk7XG4gICAgdG90YWwgKz0gY3VycmVudDtcbiAgfVxuICBsZXQgY3VycmVudG5ldz0ocGVyaW9kLWkrMSkqTWF0aC5taW4oKGNvc3QgLSB0b3RhbCkgKiAoZmFjdG9yIC8gbGlmZSksIChjb3N0IC0gc2FsdmFnZSAtIHRvdGFsKSlcbiAgcmV0dXJuIHRvdGFsICsgY3VycmVudG5ld1xufVxuZXhwb3J0cy5nZXRfdG90YWwgPSBnZXRfdG90YWxcblxuZXhwb3J0cy5WREIgPSBmdW5jdGlvbihjb3N0LCBzYWx2YWdlLCBsaWZlLCBTdGFydF9wZXJpb2QsRW5kX3BlcmlvZCxmYWN0b3IsTm9fc3dpdGNoKSB7XG4gIGxldCBmYWN0b3JOdW0gPSAoZmFjdG9yID09PSB1bmRlZmluZWQpID8gMiA6IGZhY3RvcjtcbiAgbGV0IGNvc3ROdW0gPSB1dGlscy5wYXJzZU51bWJlcihjb3N0KTtcbiAgbGV0IHNhbHZhZ2VOdW0gPSB1dGlscy5wYXJzZU51bWJlcihzYWx2YWdlKTtcbiAgbGV0IGxpZmVOdW0gPSB1dGlscy5wYXJzZU51bWJlcihsaWZlKTtcbiAgbGV0IFN0YXJ0X3BlcmlvZE51bSA9IHV0aWxzLnBhcnNlTnVtYmVyKFN0YXJ0X3BlcmlvZCk7XG4gIGxldCBFbmRfcGVyaW9kTnVtID0gdXRpbHMucGFyc2VOdW1iZXIoRW5kX3BlcmlvZCk7XG4gIGZhY3Rvck51bSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZhY3Rvcik7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKGNvc3ROdW0sIHNhbHZhZ2VOdW0sIGxpZmVOdW0sIFN0YXJ0X3BlcmlvZE51bSxFbmRfcGVyaW9kTnVtLCBmYWN0b3JOdW0pKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChjb3N0TnVtIDwgMCB8fCBzYWx2YWdlTnVtIDwgMCB8fCBsaWZlTnVtIDwgMCB8fCBTdGFydF9wZXJpb2ROdW0gPCAwIHx8IGZhY3Rvck51bSA8PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBpZiAoU3RhcnRfcGVyaW9kTnVtID4gbGlmZU51bSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgaWYgKHNhbHZhZ2VOdW0gPj0gY29zdE51bSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGxldCByZXN1bHQ9Z2V0X3RvdGFsKGNvc3ROdW0sc2FsdmFnZU51bSxFbmRfcGVyaW9kTnVtLGxpZmVOdW0sZmFjdG9yTnVtKS1nZXRfdG90YWwoY29zdE51bSxzYWx2YWdlTnVtLFN0YXJ0X3BlcmlvZE51bSxsaWZlTnVtLGZhY3Rvck51bSlcbiAgcmV0dXJuIHJlc3VsdFxufTtcblxuXG5cbmV4cG9ydHMuWElSUiA9IGZ1bmN0aW9uKHZhbHVlcywgZGF0ZXMsIGd1ZXNzKSB7XG4gIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxuXG4gIHZhbHVlcyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbih2YWx1ZXMpKTtcbiAgZGF0ZXMgPSB1dGlscy5wYXJzZURhdGVBcnJheSh1dGlscy5mbGF0dGVuKGRhdGVzKSk7XG4gIGd1ZXNzID0gdXRpbHMucGFyc2VOdW1iZXIoZ3Vlc3MpO1xuICBpZiAodXRpbHMuYW55SXNFcnJvcih2YWx1ZXMsIGRhdGVzLCBndWVzcykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICAvLyBDYWxjdWxhdGVzIHRoZSByZXN1bHRpbmcgYW1vdW50XG4gIGxldCBpcnJSZXN1bHQgPSBmdW5jdGlvbih2YWx1ZXMsIGRhdGVzLCByYXRlKSB7XG4gICAgbGV0IHIgPSByYXRlICsgMTtcbiAgICBsZXQgcmVzdWx0ID0gdmFsdWVzWzBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gdmFsdWVzW2ldIC8gTWF0aC5wb3cociwgZGF0ZVRpbWUuREFZUyhkYXRlc1tpXSwgZGF0ZXNbMF0pIC8gMzY1KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDYWxjdWxhdGVzIHRoZSBmaXJzdCBkZXJpdmF0aW9uXG4gIGxldCBpcnJSZXN1bHREZXJpdiA9IGZ1bmN0aW9uKHZhbHVlcywgZGF0ZXMsIHJhdGUpIHtcbiAgICBsZXQgciA9IHJhdGUgKyAxO1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZnJhYyA9IGRhdGVUaW1lLkRBWVMoZGF0ZXNbaV0sIGRhdGVzWzBdKSAvIDM2NTtcbiAgICAgIHJlc3VsdCAtPSBmcmFjICogdmFsdWVzW2ldIC8gTWF0aC5wb3cociwgZnJhYyArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWVzIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBwb3NpdGl2ZSB2YWx1ZSBhbmQgb25lIG5lZ2F0aXZlIHZhbHVlXG4gIGxldCBwb3NpdGl2ZSA9IGZhbHNlO1xuICBsZXQgbmVnYXRpdmUgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodmFsdWVzW2ldID4gMCkge1xuICAgICAgcG9zaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodmFsdWVzW2ldIDwgMCkge1xuICAgICAgbmVnYXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiBlcnJvciBpZiB2YWx1ZXMgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgcG9zaXRpdmUgdmFsdWUgYW5kIG9uZSBuZWdhdGl2ZSB2YWx1ZVxuICBpZiAoIXBvc2l0aXZlIHx8ICFuZWdhdGl2ZSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cblxuICAvLyBJbml0aWFsaXplIGd1ZXNzIGFuZCByZXN1bHRSYXRlXG4gIGd1ZXNzID0gZ3Vlc3MgfHwgMC4xO1xuICBsZXQgcmVzdWx0UmF0ZSA9IGd1ZXNzO1xuXG4gIC8vIFNldCBtYXhpbXVtIGVwc2lsb24gZm9yIGVuZCBvZiBpdGVyYXRpb25cbiAgbGV0IGVwc01heCA9IDFlLTEwO1xuXG4gIC8vIEltcGxlbWVudCBOZXd0b24ncyBtZXRob2RcbiAgbGV0IG5ld1JhdGUsIGVwc1JhdGUsIHJlc3VsdFZhbHVlO1xuICBsZXQgY29udExvb3AgPSB0cnVlO1xuICBkbyB7XG4gICAgcmVzdWx0VmFsdWUgPSBpcnJSZXN1bHQodmFsdWVzLCBkYXRlcywgcmVzdWx0UmF0ZSk7XG4gICAgbmV3UmF0ZSA9IHJlc3VsdFJhdGUgLSByZXN1bHRWYWx1ZSAvIGlyclJlc3VsdERlcml2KHZhbHVlcywgZGF0ZXMsIHJlc3VsdFJhdGUpO1xuICAgIGVwc1JhdGUgPSBNYXRoLmFicyhuZXdSYXRlIC0gcmVzdWx0UmF0ZSk7XG4gICAgcmVzdWx0UmF0ZSA9IG5ld1JhdGU7XG4gICAgY29udExvb3AgPSAoZXBzUmF0ZSA+IGVwc01heCkgJiYgKE1hdGguYWJzKHJlc3VsdFZhbHVlKSA+IGVwc01heCk7XG4gIH0gd2hpbGUgKGNvbnRMb29wKTtcblxuICAvLyBSZXR1cm4gaW50ZXJuYWwgcmF0ZSBvZiByZXR1cm5cbiAgcmV0dXJuIHJlc3VsdFJhdGU7XG59O1xuXG5leHBvcnRzLlhOUFYgPSBmdW5jdGlvbihyYXRlLCB2YWx1ZXMsIGRhdGVzKSB7XG4gIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcbiAgdmFsdWVzID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHZhbHVlcykpO1xuICBkYXRlcyA9IHV0aWxzLnBhcnNlRGF0ZUFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0ZXMpKTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgdmFsdWVzLCBkYXRlcykpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gdmFsdWVzW2ldIC8gTWF0aC5wb3coMSArIHJhdGUsIGRhdGVUaW1lLkRBWVMoZGF0ZXNbaV0sIGRhdGVzWzBdKSAvIDM2NSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIFhX77ya5b6F5a6e546wXG5leHBvcnRzLllJRUxEID0gZnVuY3Rpb24gKHNldHRsZW1lbnQsIG1hdHVyaXR5LCByYXRlLCBwciwgcmVkZW1wdGlvbiwgZnJlcXVlbmN5LCBiYXNpcykge1xuICBzZXR0bGVtZW50ID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpO1xuICBtYXR1cml0eSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSk7XG4gIGlmICh1dGlscy5hbnlJc0Vycm9yKHNldHRsZW1lbnQsIG1hdHVyaXR5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9WQUxVRTtcbiAgfVxuICBpZihyYXRlIDw9IDApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgLy8gUmV0dXJuIGVycm9yIGlmIHByaWNlIGlzIGxvd2VyIHRoYW4gb3IgZXF1YWwgdG8gemVyb1xuICBpZiAocHIgPD0gMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU07XG4gIH1cbiAgaWYgKHJlZGVtcHRpb24gPD0gMCl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTVxuICB9XG4gIC8vIFJldHVybiBlcnJvciBpZiBzZXR0bGVtZW50IGlzIGdyZWF0ZXIgdGhhbiBtYXR1cml0eVxuICBpZiAoc2V0dGxlbWVudCA+PSBtYXR1cml0eSAgKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBsZXQgQSA9IE1hdGguYWJzKGRhdGVUaW1lLkRBWVMoc2V0dGxlbWVudCwgbWF0dXJpdHksIGZhbHNlKSlcblxufTtcblxuXG4vLyBUT0RPIOiwg+eUqOeahHBhcnNlRGF0Zei9rOWMluaXpeacn+S4jeWkn+WHhuehrizlpoIzOTQ5NOW6lOi9rOS4ujIwMDgvMi8xNizlrp7pmYXovazkuLoyMDA4LzIvMTUgMjM6NTTpgKDmiJBiYXNpcz09MCw05pe255qE6K+v5beuXG5leHBvcnRzLllJRUxERElTQyA9IGZ1bmN0aW9uKHNldHRsZW1lbnQsIG1hdHVyaXR5LHByLCByZWRlbXB0aW9uLGJhc2lzKSB7XG4gIC8vIHRocm93IGNyZWF0ZWQgRXJyb3IoJ1lJRUxERElTQyBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbiAgbGV0IHNldHRsZW1lbnREYXRlID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpO1xuICBsZXQgbWF0dXJpdHlEYXRlID0gdXRpbHMucGFyc2VEYXRlKG1hdHVyaXR5KTtcbiAgaWYgKHV0aWxzLmFueUlzRXJyb3Ioc2V0dGxlbWVudERhdGUsIG1hdHVyaXR5RGF0ZSkpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gIH1cbiAgaWYgKHByIDw9IDApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGlmIChyZWRlbXB0aW9uIDw9IDApe1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OVU1cbiAgfVxuICBpZiAoc2V0dGxlbWVudERhdGUgPj0gbWF0dXJpdHlEYXRlICApIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTlVNO1xuICB9XG4gIGlmIChbMCwxLDIsMyw0XS5pbmRleE9mKGJhc2lzKT09PS0xKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05VTTtcbiAgfVxuICBsZXQgcmVzXG4gIGlmIChiYXNpcz09PTEpe1xuICAgIGxldCB5ZWFyPXNldHRsZW1lbnREYXRlLmdldEZ1bGxZZWFyKClcbiAgICBpZiAoMCA9PT0geWVhciU0ICYmICh5ZWFyJTEwMCAhPT0wIHx8IHllYXIlNDAwID09PSAwKSl7XG4gICAgICBsZXQgcmVzID0gKHJlZGVtcHRpb24tcHIpL3ByLyhtYXR1cml0eURhdGUtc2V0dGxlbWVudERhdGUpKjM2NiooMTAwMCAqIDYwICogNjAgKiAyNClcbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIGxldCByZXMgPSAocmVkZW1wdGlvbi1wcikvcHIvKG1hdHVyaXR5RGF0ZS1zZXR0bGVtZW50RGF0ZSkqMzY1KigxMDAwICogNjAgKiA2MCAqIDI0KVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfVxuICBpZiAoYmFzaXM9PT0yKXtcbiAgICBsZXQgcmVzID0gKHJlZGVtcHRpb24tcHIpL3ByLyhtYXR1cml0eURhdGUtc2V0dGxlbWVudERhdGUpKjM2MCooMTAwMCAqIDYwICogNjAgKiAyNClcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgaWYgKGJhc2lzPT09Myl7XG4gICAgbGV0IHJlcyA9IChyZWRlbXB0aW9uLXByKS9wci8obWF0dXJpdHlEYXRlLXNldHRsZW1lbnREYXRlKSozNjUqKDEwMDAgKiA2MCAqIDYwICogMjQpXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIGlmIChiYXNpcz09PTB8fGJhc2lzPT09NCl7XG4gICAgbGV0IG1vbnRoX1NNPW1hdHVyaXR5RGF0ZS5nZXRGdWxsWWVhcigpKjEyK21hdHVyaXR5RGF0ZS5nZXRNb250aCgpLXNldHRsZW1lbnREYXRlLmdldEZ1bGxZZWFyKCkqMTItc2V0dGxlbWVudERhdGUuZ2V0TW9udGgoKS0xXG4gICAgbGV0IGRheV9TTT1tb250aF9TTSozMCszMC1zZXR0bGVtZW50RGF0ZS5nZXREYXkoKSttYXR1cml0eURhdGUuZ2V0RGF5KClcbiAgICBsZXQgcmVzPShyZWRlbXB0aW9uLXByKS9wci9kYXlfU00qMzYwXG4gICAgcmV0dXJuIHJlc1xuICB9XG59O1xuXG4vLyBUT0RPXG5leHBvcnRzLllJRUxETUFUID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcignWUlFTERNQVQgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuLy9YV++8mmVuZFxuXG5leHBvcnRzLkZBQ1RPUklBTCA9IGZ1bmN0aW9uIChuKXtcbiAgbGV0IHJlc3VsdCA9IDFcbiAgZm9yIChsZXQgaT1uOyBpPj0xO2ktLSl7XG4gICAgcmVzdWx0ICo9IGlcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG4iLCJpbXBvcnQge2Vycm9yT2JqfSBmcm9tICcuLi8uLi9jYWxjX3V0aWxzL2Vycm9yX2NvbmZpZyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5mdW5jdGlvbiBtYXRjaF9sZXNzX3RoYW5fb3JfZXF1YWwobWF0cml4LCBsb29rdXBWYWx1ZSkge1xuICBsZXQgaW5kZXg7XG4gIGxldCBpbmRleFZhbHVlO1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBtYXRyaXgubGVuZ3RoOyBpZHgrKykge1xuICAgIGlmIChtYXRyaXhbaWR4XSA9PT0gbG9va3VwVmFsdWUpIHtcbiAgICAgIHJldHVybiBpZHggKyAxO1xuICAgIH0gZWxzZSBpZiAobWF0cml4W2lkeF0gPCBsb29rdXBWYWx1ZSkge1xuICAgICAgaWYgKCFpbmRleFZhbHVlKSB7XG4gICAgICAgIGluZGV4ID0gaWR4ICsgMTtcbiAgICAgICAgaW5kZXhWYWx1ZSA9IG1hdHJpeFtpZHhdO1xuICAgICAgfSBlbHNlIGlmIChtYXRyaXhbaWR4XSA+IGluZGV4VmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSBpZHggKyAxO1xuICAgICAgICBpbmRleFZhbHVlID0gbWF0cml4W2lkeF07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaW5kZXgpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBtYXRjaF9leGFjdGx5X3N0cmluZyhtYXRyaXgsIGxvb2t1cFZhbHVlKSB7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1hdHJpeC5sZW5ndGg7IGlkeCsrKSB7XG4gICAgbG9va3VwVmFsdWUgPSBsb29rdXBWYWx1ZS5yZXBsYWNlKC9cXD8vZywgJy4nKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRyaXhbaWR4XSkpIHtcbiAgICAgIGlmIChtYXRyaXhbaWR4XS5sZW5ndGggPT09IDFcbiAgICAgICAgJiYgdHlwZW9mIG1hdHJpeFtpZHhdWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAobWF0cml4W2lkeF1bMF0udG9Mb3dlckNhc2UoKSA9PT0gbG9va3VwVmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIHJldHVybiBpZHggKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbWF0cml4W2lkeF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAobWF0cml4W2lkeF0udG9Mb3dlckNhc2UoKSA9PT0gbG9va3VwVmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICByZXR1cm4gaWR4ICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoX2V4YWN0bHlfbm9uX3N0cmluZyhtYXRyaXgsIGxvb2t1cFZhbHVlKSB7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1hdHJpeC5sZW5ndGg7IGlkeCsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobWF0cml4W2lkeF0pKSB7XG4gICAgICBpZiAobWF0cml4W2lkeF0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmIChtYXRyaXhbaWR4XVswXSA9PT0gbG9va3VwVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaWR4ICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWF0cml4W2lkeF0gPT09IGxvb2t1cFZhbHVlKSB7XG4gICAgICByZXR1cm4gaWR4ICsgMTtcbiAgICB9XG4gIH1cbiAgLy9YVzrnu5/kuIDplJnor6/lj5jph49cbiAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICAvL1hX77yaZW5kXG59XG5cbmZ1bmN0aW9uIG1hdGNoX2dyZWF0ZXJfdGhhbl9vcl9lcXVhbChtYXRyaXgsIGxvb2t1cFZhbHVlKSB7XG4gIGxldCBpbmRleDtcbiAgbGV0IGluZGV4VmFsdWU7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1hdHJpeC5sZW5ndGg7IGlkeCsrKSB7XG4gICAgaWYgKG1hdHJpeFtpZHhdID09PSBsb29rdXBWYWx1ZSkge1xuICAgICAgcmV0dXJuIGlkeCArIDE7XG4gICAgfSBlbHNlIGlmIChtYXRyaXhbaWR4XSA+IGxvb2t1cFZhbHVlKSB7XG4gICAgICBpZiAoIWluZGV4VmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSBpZHggKyAxO1xuICAgICAgICBpbmRleFZhbHVlID0gbWF0cml4W2lkeF07XG4gICAgICB9IGVsc2UgaWYgKG1hdHJpeFtpZHhdIDwgaW5kZXhWYWx1ZSkge1xuICAgICAgICBpbmRleCA9IGlkeCArIDE7XG4gICAgICAgIGluZGV4VmFsdWUgPSBtYXRyaXhbaWR4XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpbmRleCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5leHBvcnRzLk1BVENIID0gZnVuY3Rpb24gKGxvb2t1cFZhbHVlLCBtYXRyaXgsIG1hdGNoVHlwZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXRyaXgpXG4gICAgJiYgbWF0cml4Lmxlbmd0aCA9PT0gMVxuICAgICYmIEFycmF5LmlzQXJyYXkobWF0cml4WzBdKSkge1xuICAgIG1hdHJpeCA9IG1hdHJpeFswXTtcbiAgfVxuICBpZiAoIWxvb2t1cFZhbHVlICYmICFtYXRyaXgpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICBtYXRjaFR5cGUgPSAxO1xuICB9XG4gIGlmICghKG1hdHJpeCBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuICBpZiAobWF0Y2hUeXBlID09PSAwKSB7XG4gICAgaWYgKHR5cGVvZiBsb29rdXBWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBtYXRjaF9leGFjdGx5X3N0cmluZyhtYXRyaXgsIGxvb2t1cFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1hdGNoX2V4YWN0bHlfbm9uX3N0cmluZyhtYXRyaXgsIGxvb2t1cFZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobWF0Y2hUeXBlID09PSAxKSB7XG4gICAgcmV0dXJuIG1hdGNoX2xlc3NfdGhhbl9vcl9lcXVhbChtYXRyaXgsIGxvb2t1cFZhbHVlKTtcbiAgfSBlbHNlIGlmIChtYXRjaFR5cGUgPT09IC0xKSB7XG4gICAgbGV0IGEgPSBtYXRyaXhbMF1bMF1cbiAgICBmb3IgKGxldCBpPTE7aTxtYXRyaXgubGVuZ3RoO2krKyl7XG4gICAgICBpZiAobWF0cml4W2ldWzBdID4gYSl7XG4gICAgICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoX2dyZWF0ZXJfdGhhbl9vcl9lcXVhbChtYXRyaXgsIGxvb2t1cFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG4gIH1cbn1cbi8vWFc6IHZsb29rdXDlh73mlbDlrp7njrBcbmV4cG9ydHMuVkxPT0tVUCA9IGZ1bmN0aW9uIChrZXksIG1hdHJpeCwgcmV0dXJuX2luZGV4LCBjdW11bGF0aXZlKSB7XG4gIGlmKHR5cGVvZiBjdW11bGF0aXZlID09ICdzdHJpbmcnICYmICEoY3VtdWxhdGl2ZSA9PSAnRkFMU0UnIHx8IGN1bXVsYXRpdmUgPT0gJ1RSVUUnKSl7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX1ZBTFVFO1xuICB9XG4gIGlmIChjdW11bGF0aXZlID09ICdGQUxTRScpIHtcbiAgICBjdW11bGF0aXZlID0gZmFsc2VcbiAgfWVsc2V7XG4gICAgY3VtdWxhdGl2ZSA9IHRydWVcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChtYXRyaXhbaV1bMF0gPT0ga2V5KSB7XG4gICAgICByZXR1cm4gbWF0cml4W2ldW3JldHVybl9pbmRleCAtIDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG59O1xuLy9YV++8mmVuZFxuXG5cbi8vWFc6aGxvb2t1cOWHveaVsOWunueOsFxuZXhwb3J0cy5ITE9PS1VQID0gZnVuY3Rpb24gKG5lZWRsZSwgdGFibGUsIGluZGV4LCBleGFjdG1hdGNoKSB7XG4gIGlmIChleGFjdG1hdGNoID09ICdUUlVFJyl7XG4gICAgZXhhY3RtYXRjaCA9IHRydWVcbiAgfVxuICBpZiAoZXhhY3RtYXRjaCA9PSAnRkFMU0UnKXtcbiAgICBleGFjdG1hdGNoID0gZmFsc2VcbiAgfVxuICBpZiAodHlwZW9mIHRhYmxlID09ICdzdHJpbmcnICYmIHRhYmxlLmluZGV4T2YoJ3snKSA+PTApe1xuICAgIHRhYmxlID0gdXRpbHMuc3RyVG9NYXRyaXgodGFibGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBuZWVkbGUgPT09IFwidW5kZWZpbmVkXCIgfHwgdGFibGVbMF0uaW5kZXhPZihuZWVkbGUpIDwgMCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9OQTtcbiAgfVxuXG4gIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgbGV0IHJvdyA9IHRhYmxlWzBdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGV4YWN0bWF0Y2ggJiYgcm93W2ldID09PSBuZWVkbGUgfHwgcm93W2ldLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKG5lZWRsZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGluZGV4IDwgdGFibGUubGVuZ3RoICsgMSA/IHRhYmxlW2luZGV4IC0gMV1baV0gOiB0YWJsZVswXVtpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXJyb3JPYmouRVJST1JfTkE7XG59XG4vL1hX77yaZW5kXG4iLCJpbXBvcnQge2Vycm9yT2JqfSBmcm9tICcuLi8uLi9jYWxjX3V0aWxzL2Vycm9yX2NvbmZpZydcbi8vWFc6IOiHquWumuS5ieWHveaVsFxuZXhwb3J0cy5QUVVFUlkgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSA1KSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX0VSUk9SO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50c1swXS5sZW5ndGggIT09IGFyZ3VtZW50c1sxXS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZXJyb3JPYmouRVJST1JfRVJST1I7XG4gIH1cblxuICBpZiAoYXJndW1lbnRzWzFdLmxlbmd0aCAhPT0gYXJndW1lbnRzWzNdLmxlbmd0aCkge1xuICAgIHJldHVybiBlcnJvck9iai5FUlJPUl9FUlJPUjtcbiAgfVxuXG4gIC8vIOiuoeeul+WHuue7neWvueWAvFxuICBsZXQgYWJzQXJyID0gW107XG4gIGxldCBvMSA9IGFyZ3VtZW50c1s0XTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHNbM10ubGVuZ3RoOyBpKyspIHtcbiAgICBhcmd1bWVudHNbM11baV0gPSBwYXJzZUZsb2F0KGFyZ3VtZW50c1szXVtpXSk7XG4gICAgaWYgKCFpc05hTihhcmd1bWVudHNbM11baV0pKSB7XG4gICAgICBhYnNBcnIucHVzaCh7XG4gICAgICAgIG51bWJlcjogaSxcbiAgICAgICAgdmFsdWU6IE1hdGguYWJzKGFyZ3VtZW50c1szXVtpXSAtIG8xKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFic0FyciA9IGFic0Fyci5zb3J0KChvYmoxLCBvYmoyKSA9PiB7XG4gICAgbGV0IHZhbDEgPSBvYmoxLnZhbHVlO1xuICAgIGxldCB2YWwyID0gb2JqMi52YWx1ZTtcbiAgICBpZiAodmFsMSA8IHZhbDIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKHZhbDEgPiB2YWwyKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9KTtcblxuXG4gIGxldCBpdGVtcyA9IFtdO1xuICBsZXQgY291bnQgPSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFic0Fyci5sZW5ndGg7IGkrKykge1xuICAgIGxldCB7bnVtYmVyLCB2YWx1ZX0gPSBhYnNBcnJbaV07XG4gICAgbGV0IGExID0gYXJndW1lbnRzWzBdW251bWJlcl1bMF07XG4gICAgbGV0IGEyID0gYXJndW1lbnRzWzFdW251bWJlcl1bMF07XG4gICAgbGV0IGE0ID0gYXJndW1lbnRzWzNdW251bWJlcl07XG5cbiAgICBpZiAoYTIgPT09IGFyZ3VtZW50c1syXSkge1xuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIG51bWJlcjogY291bnQsXG4gICAgICAgIG5hbWU6IGExLFxuICAgICAgICBjaXR5OiBhMixcbiAgICAgICAgYXJlYTogYTQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgICBjb3VudCA9IGNvdW50ICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyrmgqzmta7mn6XnnIsqIScgKyBKU09OLnN0cmluZ2lmeShpdGVtcyk7XG59O1xuXG5leHBvcnRzLkhZUEVSTElOSyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc29sZS5sb2coYXJndW1lbnRzKTtcbiAgaWYgKCFhcmd1bWVudHMgfHwgIWFyZ3VtZW50c1swXSB8fCAhYXJndW1lbnRzWzFdKSB7XG4gICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BO1xuICB9XG4gIGxldCB1cmwgPSBhcmd1bWVudHNbMF07XG4gIGlmICh1cmwuc3Vic3RyKDAsIDcpLnRvTG93ZXJDYXNlKCkgPT0gXCJodHRwOi8vXCIgfHwgdXJsLnN1YnN0cigwLCA4KS50b0xvd2VyQ2FzZSgpID09IFwiaHR0cHM6Ly9cIikge1xuICAgIHVybCA9IHVybDtcbiAgfSBlbHNlIHtcbiAgICB1cmwgPSBcImh0dHA6Ly9cIiArIHVybDtcbiAgfVxuXG4gIGxldCBjZWxsID0ge1xuICAgIFwidGV4dFwiOiBhcmd1bWVudHNbMV0sXG4gICAgXCJ1cmxcIjogdXJsXG4gIH1cbiAgcmV0dXJuIFwiKkhZUEVSTElOSyohXCIgKyBKU09OLnN0cmluZ2lmeShjZWxsKSArIFwiIFwiO1xufVxuXG5mdW5jdGlvbiBDaXR5KG5hbWUsIHR5cGUsIHVybCkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnVybCA9IHVybDtcbn1cblxuZnVuY3Rpb24gbGlhbkppYVVybChsaWFuamlhKSB7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWQiOiCpVwiLCAwLCBcImh0dHBzOi8vaGYubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWuieW6hlwiLCAwLCBcImh0dHBzOi8vYXEubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua7geW3nlwiLCAwLCBcImh0dHBzOi8vY3ouZmFuZy5saWFuamlhLmNvbS9kaXR1L1wiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIumprOmejeWxsVwiLCAwLCBcImh0dHBzOi8vbWFzLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLljJfkuqxcIiwgMCwgXCJodHRwczovL2JqLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLph43luoZcIiwgMCwgXCJodHRwczovL2NxLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLnpo/lt55cIiwgMCwgXCJodHRwczovL2Z6LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLms4nlt55cIiwgMCwgXCJodHRwczovL3F1YW56aG91LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLljqbpl6hcIiwgMCwgXCJodHRwczovL3htLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmvLPlt55cIiwgMCwgXCJodHRwczovL3poYW5nemhvdS5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5Lic6I6eXCIsIDAsIFwiaHR0cHM6Ly9kZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5L2b5bGxXCIsIDAsIFwiaHR0cHM6Ly9mcy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5bm/5beeXCIsIDAsIFwiaHR0cHM6Ly9nei5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5oOg5beeXCIsIDAsIFwiaHR0cHM6Ly9odWkubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuaxn+mXqFwiLCAwLCBcImh0dHBzOi8vamlhbmdtZW4ubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua4hei/nFwiLCAwLCBcImh0dHBzOi8vcXkubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua3seWcs1wiLCAwLCBcImh0dHBzOi8vc3oubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuePoOa1t1wiLCAwLCBcImh0dHBzOi8vemgubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua5m+axn1wiLCAwLCBcImh0dHBzOi8vemhhbmppYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLkuK3lsbFcIiwgMCwgXCJodHRwczovL3pzLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLotLXpmLNcIiwgMCwgXCJodHRwczovL2d5LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWMl+a1t1wiLCAwLCBcImh0dHBzOi8vYmgubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIumYsuWfjua4r1wiLCAwLCBcImh0dHBzOi8vZmNnLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmoYLmnpdcIiwgMCwgXCJodHRwczovL2dsLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmn7Plt55cIiwgMCwgXCJodHRwczovL2xpdXpob3UubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWNl+WugVwiLCAwLCBcImh0dHBzOi8vbm4ubGlhbmppYS5jb20vZGl0dVwiKSk7XG5cbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5YWw5beeXCIsIDAsIFwiaHR0cHM6Ly9sei5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLphILlt55cIiwgMCwgXCJodHRwczovL2V6LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLpu4Tnn7NcIiwgMCwgXCJodHRwczovL2h1YW5nc2hpLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmrabmsYlcIiwgMCwgXCJodHRwczovL3doLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLopYTpmLNcIiwgMCwgXCJodHRwczovL3h5LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlrpzmmIxcIiwgMCwgXCJodHRwczovL3lpY2hhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG5cbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi6ZW/5rKZXCIsIDAsIFwiaHR0cHM6Ly9jcy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5bi45b63XCIsIDAsIFwiaHR0cHM6Ly9jaGFuZ2RlLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlsrPpmLNcIiwgMCwgXCJodHRwczovL3l5LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmoKrmtLJcIiwgMCwgXCJodHRwczovL3podXpob3UubGlhbmppYS5jb20vZGl0dVwiKSk7XG5cbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5L+d5a6aXCIsIDAsIFwiaHR0cHM6Ly9iZC5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5buK5Z2KXCIsIDAsIFwiaHR0cHM6Ly9sZi5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi56em55qH5bKbXCIsIDAsIFwiaHR0cHM6Ly9xaGQuZmFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi55+z5a625bqEXCIsIDAsIFwiaHR0cHM6Ly9zanoubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWUkOWxsVwiLCAwLCBcImh0dHBzOi8vdHMubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuW8oOWutuWPo1wiLCAwLCBcImh0dHBzOi8vemprLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuS/neS6rVwiLCAwLCBcImh0dHBzOi8vYnQuZmFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5r6E6L+IXCIsIDAsIFwiaHR0cHM6Ly9jbS5mYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlhIvlt55cIiwgMCwgXCJodHRwczovL2R6LmZhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua1t+WPo1wiLCAwLCBcImh0dHBzOi8vaGsubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuS4tOmrmFwiLCAwLCBcImh0dHBzOi8vbGcuZmFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5LmQ5LicXCIsIDAsIFwiaHR0cHM6Ly9sZC5mYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLpmbXmsLRcIiwgMCwgXCJodHRwczovL2xzLmZhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIueQvOa1t1wiLCAwLCBcImh0dHBzOi8vcWguZmFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5LiJ5LqaXCIsIDAsIFwiaHR0cHM6Ly9zYW4ubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuS6lOaMh+WxsVwiLCAwLCBcImh0dHBzOi8vd3pzLmZhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuaWh+aYjFwiLCAwLCBcImh0dHBzOi8vd2MuZmFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5LiH5a6BXCIsIDAsIFwiaHR0cHM6Ly93bi5mYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuW8gOWwgVwiLCAwLCBcImh0dHBzOi8va2YubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua0m+mYs1wiLCAwLCBcImh0dHBzOi8vbHVveWFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5paw5LmhXCIsIDAsIFwiaHR0cHM6Ly94aW54aWFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi6K645piMXCIsIDAsIFwiaHR0cHM6Ly94Yy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi6YOR5beeXCIsIDAsIFwiaHR0cHM6Ly96ei5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlk4jlsJTmu6hcIiwgMCwgXCJodHRwczovL2tmLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuW4uOW3nlwiLCAwLCBcImh0dHBzOi8vY2hhbmd6aG91LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmt67lrolcIiwgMCwgXCJodHRwczovL2hhLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmmIblsbFcIiwgMCwgXCJodHRwczovL2tzLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLljZfkuqxcIiwgMCwgXCJodHRwczovL25qLmxpYW5qaWEuY29tL2RpdHUvXCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5Y2X6YCaXCIsIDAsIFwiaHR0cHM6Ly9udC5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi6IuP5beeXCIsIDAsIFwiaHR0cHM6Ly9zdS5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5peg6ZShXCIsIDAsIFwiaHR0cHM6Ly93eC5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5b6Q5beeXCIsIDAsIFwiaHR0cHM6Ly94ei5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi55uQ5Z+OXCIsIDAsIFwiaHR0cHM6Ly95Yy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi6ZWH5rGfXCIsIDAsIFwiaHR0cHM6Ly96ai5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLplb/mmKVcIiwgMCwgXCJodHRwczovL2NjLmxpYW5qaWEuY29tL2RpdHUvXCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5ZCJ5p6XXCIsIDAsIFwiaHR0cHM6Ly9qbC5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLotaPlt55cIiwgMCwgXCJodHRwczovL2dhbnpob3UubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuS5neaxn1wiLCAwLCBcImh0dHBzOi8vaml1amlhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWQieWuiVwiLCAwLCBcImh0dHBzOi8vamlhbi5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5Y2X5piMXCIsIDAsIFwiaHR0cHM6Ly9uYy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5LiK6aW2XCIsIDAsIFwiaHR0cHM6Ly9zci5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlpKfov55cIiwgMCwgXCJodHRwczovL2RsLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLkuLnkuJxcIiwgMCwgXCJodHRwczovL2RkLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmsojpmLNcIiwgMCwgXCJodHRwczovL3N5LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWRvOWSjOa1qeeJuVwiLCAwLCBcImh0dHBzOi8vaGhodC5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLpk7blt51cIiwgMCwgXCJodHRwczovL3lpbmNodWFuLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIumTtuW3nVwiLCAwLCBcImh0dHBzOi8veWluY2h1YW4ubGlhbmppYS5jb20vZGl0dVwiKSk7XG5cbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5LiK5rW3XCIsIDAsIFwiaHR0cHM6Ly9zaC5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmiJDpg71cIiwgMCwgXCJodHRwczovL2NkLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlvrfpmLNcIiwgMCwgXCJodHRwczovL2R5LmZhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIui+vuW3nlwiLCAwLCBcImh0dHBzOi8vZGF6aG91LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLkuZDlsbFcIiwgMCwgXCJodHRwczovL2xlc2hhbi5mYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlh4nlsbFcIiwgMCwgXCJodHRwczovL2xpYW5nc2hhbi5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi57u16ZizXCIsIDAsIFwiaHR0cHM6Ly9taWFueWFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi55yJ5bGxXCIsIDAsIFwiaHR0cHM6Ly9tcy5mYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLljZflhYVcIiwgMCwgXCJodHRwczovL25hbmNob25nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua1juWNl1wiLCAwLCBcImh0dHBzOi8vam4ubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuS4tOayglwiLCAwLCBcImh0dHBzOi8vbGlueWkubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIumdkuWym1wiLCAwLCBcImh0dHBzOi8vcWQubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIua9jeWdilwiLCAwLCBcImh0dHBzOi8vd2YubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWogea1t1wiLCAwLCBcImh0dHBzOi8vd2VpaGFpLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLng5/lj7BcIiwgMCwgXCJodHRwczovL3l0LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmt4TljZpcIiwgMCwgXCJodHRwczovL3piLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWunem4oVwiLCAwLCBcImh0dHBzOi8vYmFvamkubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuaxieS4rVwiLCAwLCBcImh0dHBzOi8vaGFuemhvbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuilv+WuiVwiLCAwLCBcImh0dHBzOi8veGEubGlhbmppYS5jb20vZGl0dVwiKSk7XG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWSuOmYs1wiLCAwLCBcImh0dHBzOi8veGlhbnlhbmcubGlhbmppYS5jb20vZGl0dVwiKSk7XG5cbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5pmL5LitXCIsIDAsIFwiaHR0cHM6Ly9qei5mYW5nLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLlpKrljp9cIiwgMCwgXCJodHRwczovL3R5LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuXG4gIGxpYW5qaWEucHVzaChuZXcgQ2l0eShcIuWkqea0pVwiLCAwLCBcImh0dHBzOi8vdGoubGlhbmppYS5jb20vZGl0dVwiKSk7XG5cbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5aSn55CGXCIsIDAsIFwiaHR0cHM6Ly9kYWxpLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmmIbmmI5cIiwgMCwgXCJodHRwczovL2ttLmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLopb/lj4zniYjnurNcIiwgMCwgXCJodHRwczovL3hzYm4uZmFuZy5saWFuamlhLmNvbS9kaXR1XCIpKTtcblxuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmna3lt55cIiwgMCwgXCJodHRwczovL2h6LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmuZblt55cIiwgMCwgXCJodHRwczovL2h1emhvdS5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5ZiJ5YW0XCIsIDAsIFwiaHR0cHM6Ly9qeC5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi6YeR5Y2OXCIsIDAsIFwiaHR0cHM6Ly9qaC5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5a6B5rOiXCIsIDAsIFwiaHR0cHM6Ly9uYi5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi57uN5YW0XCIsIDAsIFwiaHR0cHM6Ly9zeC5saWFuamlhLmNvbS9kaXR1XCIpKTtcbiAgbGlhbmppYS5wdXNoKG5ldyBDaXR5KFwi5Y+w5beeXCIsIDAsIFwiaHR0cHM6Ly90YWl6aG91LmxpYW5qaWEuY29tL2RpdHVcIikpO1xuICBsaWFuamlhLnB1c2gobmV3IENpdHkoXCLmuKnlt55cIiwgMCwgXCJodHRwczovL3d6LmxpYW5qaWEuY29tZGl0dVwiKSk7XG59XG5cbmZ1bmN0aW9uIHdvYWl3b2ppYVVybCh3b2Fpd29qaWEpIHtcbiAgd29haXdvamlhLnB1c2gobmV3IENpdHkoXCLljJfkuqxcIiwgMCwgXCJodHRwczovL2JqLjVpNWouY29tL21hcFwiKSk7XG4gIHdvYWl3b2ppYS5wdXNoKG5ldyBDaXR5KFwi5p2t5beeXCIsIDAsIFwiaHR0cHM6Ly9oei41aTVqLmNvbS9tYXBcIikpO1xuICB3b2Fpd29qaWEucHVzaChuZXcgQ2l0eShcIumdkuWym1wiLCAwLCBcImh0dHBzOi8vcWQuNWk1ai5jb20vbWFwXCIpKTtcbiAgd29haXdvamlhLnB1c2gobmV3IENpdHkoXCLlpKnmtKVcIiwgMCwgXCJodHRwczovL3RqLjVpNWouY29tL21hcFwiKSk7XG4gIHdvYWl3b2ppYS5wdXNoKG5ldyBDaXR5KFwi5aSq5Y6fXCIsIDAsIFwiaHR0cHM6Ly96ei41aTVqLmNvbS9tYXBcIikpO1xuICB3b2Fpd29qaWEucHVzaChuZXcgQ2l0eShcIumDkeW3nlwiLCAwLCBcImh0dHBzOi8venouNWk1ai5jb20vbWFwXCIpKTtcbiAgd29haXdvamlhLnB1c2gobmV3IENpdHkoXCLmiJDpg71cIiwgMCwgXCJodHRwczovL2NkLjVpNWouY29tL21hcFwiKSk7XG4gIHdvYWl3b2ppYS5wdXNoKG5ldyBDaXR5KFwi6ZW/5rKZXCIsIDAsIFwiaHR0cHM6Ly9jcy41aTVqLmNvbS9tYXBcIikpO1xuICB3b2Fpd29qaWEucHVzaChuZXcgQ2l0eShcIuWNl+aYjFwiLCAwLCBcImh0dHBzOi8vbmMuNWk1ai5jb20vbWFwXCIpKTtcbiAgd29haXdvamlhLnB1c2gobmV3IENpdHkoXCLljZfkuqxcIiwgMCwgXCJodHRwczovL25qLjVpNWouY29tL21hcFwiKSk7XG4gIHdvYWl3b2ppYS5wdXNoKG5ldyBDaXR5KFwi5Y2X5a6BXCIsIDAsIFwiaHR0cHM6Ly9ubi41aTVqLmNvbS9tYXBcIikpO1xuICB3b2Fpd29qaWEucHVzaChuZXcgQ2l0eShcIuS4iua1t1wiLCAwLCBcImh0dHBzOi8vc2guNWk1ai5jb20vbWFwXCIpKTtcbiAgd29haXdvamlhLnB1c2gobmV3IENpdHkoXCLoi4/lt55cIiwgMCwgXCJodHRwczovL3N6LjVpNWouY29tL21hcFwiKSk7XG4gIHdvYWl3b2ppYS5wdXNoKG5ldyBDaXR5KFwi5q2m5rGJXCIsIDAsIFwiaHR0cHM6Ly93aC41aTVqLmNvbS9tYXBcIikpO1xuICB3b2Fpd29qaWEucHVzaChuZXcgQ2l0eShcIuaXoOmUoVwiLCAwLCBcImh0dHBzOi8vd3guNWk1ai5jb20vbWFwXCIpKTtcbn1cblxuZnVuY3Rpb24gZmFuZ3RpYW54aWFVcmwoZmFuZ3RpYW54aWEpIHtcbiAgZmFuZ3RpYW54aWEucHVzaChuZXcgQ2l0eShcIuWFqOWbvVwiLCAwLCBcImh0dHBzOi8vd3d3MS5mYW5nLmNvbVwiKSk7XG59XG5cbmZ1bmN0aW9uIGZpbmQobmFtZSwgYXJyLCBzdHIgPSB0cnVlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXS5uYW1lID09PSBuYW1lIHx8ICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgc3RyID09PSBmYWxzZSkpIHtcbiAgICAgIGxldCB7dXJsfSA9IGFycltpXTtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwi5Z+O5biC5pyq5om+5YiwXCI7XG59XG5cbmxldCBsaWFuamlhID0gW107XG5saWFuSmlhVXJsKGxpYW5qaWEpO1xubGV0IHdvYWl3b2ppYSA9IFtdO1xud29haXdvamlhVXJsKHdvYWl3b2ppYSk7XG5sZXQgZmFuZ3RpYW54aWEgPSBbXTtcbmZhbmd0aWFueGlhVXJsKGZhbmd0aWFueGlhKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQge2NvbF9zdHJfMl9pbnQsaW50XzJfY29sX3N0cn0gZnJvbSAnLi4vLi4vaGVscGVyL2NhbGNfaGVscGVyLmpzJ1xuaW1wb3J0IHtSYXdWYWx1ZX0gZnJvbSAnLi4vY2FsY19kYXRhX3Byb3h5L3Jhd192YWx1ZS5qcydcbmltcG9ydCB7UmFuZ2V9IGZyb20gJy4uL2NhbGNfZGF0YV9wcm94eS9yYW5nZV9yZWYuanMnXG5pbXBvcnQge1JlZlZhbHVlfSBmcm9tICcuLi9jYWxjX2RhdGFfcHJveHkvcmVmX3ZhbHVlLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcmF3X29mZnNldChjZWxsX3JlZiwgcm93cywgY29sdW1ucywgaGVpZ2h0LCB3aWR0aCkge1xuICAgIGhlaWdodCA9IChoZWlnaHQgfHwgbmV3IFJhd1ZhbHVlKDEpKS5zb2x2ZUV4cHJlc3Npb24oKTtcbiAgICB3aWR0aCA9ICh3aWR0aCB8fCBuZXcgUmF3VmFsdWUoMSkpLnNvbHZlRXhwcmVzc2lvbigpO1xuICAgIGlmIChjZWxsX3JlZi5hcmdzLmxlbmd0aCA9PT0gMSAmJiBjZWxsX3JlZi5hcmdzWzBdLm5hbWUgPT09ICdSZWZWYWx1ZScpIHtcbiAgICAgICAgbGV0IHJlZl92YWx1ZSA9IGNlbGxfcmVmLmFyZ3NbMF07XG4gICAgICAgIGxldCBwYXJzZWRfcmVmID0gcmVmX3ZhbHVlLmdldFJlZkNhbGNDZWxsKCk7XG4gICAgICAgIGxldCBjb2wgPSBjb2xfc3RyXzJfaW50KHBhcnNlZF9yZWYuY2VsbF9uYW1lKSArIGNvbHVtbnMuc29sdmVFeHByZXNzaW9uKCk7XG4gICAgICAgIGxldCBjb2xfc3RyID0gaW50XzJfY29sX3N0cihjb2wpO1xuICAgICAgICBsZXQgcm93ID0gK3BhcnNlZF9yZWYuY2VsbF9uYW1lLnJlcGxhY2UoL15bQS1aXSsvZywgJycpICsgcm93cy5zb2x2ZUV4cHJlc3Npb24oKTtcbiAgICAgICAgbGV0IGNlbGxfbmFtZSA9IGNvbF9zdHIgKyByb3c7XG4gICAgICAgIGlmIChoZWlnaHQgPT09IDEgJiYgd2lkdGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVmVmFsdWUoY2VsbF9uYW1lLCByZWZfdmFsdWUuY2VsbEZvcm11bGFQcm94eSkuc29sdmVFeHByZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZW5kX3JhbmdlX2NvbCA9IGludF8yX2NvbF9zdHIoY29sICsgd2lkdGggLSAxKTtcbiAgICAgICAgICAgIGxldCBlbmRfcmFuZ2Vfcm93ID0gcm93ICsgaGVpZ2h0IC0gMTtcbiAgICAgICAgICAgIGxldCBlbmRfcmFuZ2UgPSBlbmRfcmFuZ2VfY29sICsgZW5kX3JhbmdlX3JvdztcbiAgICAgICAgICAgIGxldCBzdHJfZXhwcmVzc2lvbiA9IHBhcnNlZF9yZWYuc2hlZXRfbmFtZSArICchJyArIGNlbGxfbmFtZSArICc6JyArIGVuZF9yYW5nZTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RyX2V4cHJlc3Npb24sIHJlZl92YWx1ZS5jZWxsRm9ybXVsYVByb3h5KS5zb2x2ZUV4cHJlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlmZXJyb3IoY2VsbF9yZWYsIG9uZXJyb3J2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNlbGxfcmVmLnNvbHZlRXhwcmVzc2lvbigpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSB8fCB2YWx1ZSA9PT0gLUluZmluaXR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIG9uZXJyb3J2YWx1ZS5zb2x2ZUV4cHJlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBvbmVycm9ydmFsdWUuc29sdmVFeHByZXNzaW9uKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lmKGNvbmRpdGlvbiwgX3RoZW4sIF9lbHNlKSB7XG4gICAgaWYgKGNvbmRpdGlvbi5zb2x2ZUV4cHJlc3Npb24oKSkge1xuICAgICAgICByZXR1cm4gX3RoZW4uc29sdmVFeHByZXNzaW9uKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2Vsc2Uuc29sdmVFeHByZXNzaW9uKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5kKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmKCFhcmd1bWVudHNbaV0uc29sdmVFeHByZXNzaW9uKCkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQge01BUktfT0JKLCBGT1JNVUxBX1NUQVRVU30gZnJvbSBcIi4uLy4uL2NhbGNfdXRpbHMvY29uZmlnXCJcbmltcG9ydCB7RVJST1JfTk9OX1NPTFZFRH0gZnJvbSAnLi4vLi4vY2FsY191dGlscy9lcnJvcl9jb25maWcnO1xuaW1wb3J0IHsgQ2VsbFZFbXB0eSxDZWxsVkRhdGVUaW1lIH0gZnJvbSAnLi4vLi4vY2VsbF92YWx1ZV90eXBlL2NlbGxfdmFsdWUnO1xuXG5leHBvcnQgY2xhc3MgU2ltcGxlRXhwcmVzc2lvbkJ1aWxkZXIgeyAvLyDop6PmnpDkuI3lkKvnrYnlj7fnmoTpgqPkupvooajovr7lvI9cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYWxjQ2VsbCkge1xuICAgIHRoaXMucGFyc2VBcnJheSA9IFtEYXRlVGltZVBhcnNlciwgXSAvLyDpnIDopoHpgY3ljobnmoTop6PmnpDlmahcbiAgICB0aGlzLnJvb3RFeHAgPSBuZXcgU2ltcGxlRXhwcmVzc2lvbigpXG4gICAgdGhpcy5jYWxjQ2VsbCA9IGNhbGNDZWxsXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIHBhcnNlRm9ybXVsYSgpIHtcbiAgICBsZXQgcmVzXG4gICAgaWYodGhpcy5jYWxjQ2VsbC5mb3JtdWxhU3RyaW5nID09PSBcIlwiKXtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlRXhwcmVzc2lvbigpIC8vIOepuuWAvO+8jOi/lOWbnuS4gOS4quepuueahOihqOi+vuW8j1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMucm9vdEV4cCA9IG5ldyBTaW1wbGVFeHByZXNzaW9uKHRoaXMuY2FsY0NlbGwuZm9ybXVsYVN0cmluZywgdGhpcy5wYXJzZUFycmF5KVxuICAgICAgdGhpcy5yb290RXhwLnBhcnNlRXhwcmVzc2lvbigpXG4gICAgfVxuICB9XG59XG5cbmNsYXNzIEVtcHR5Tm9kZXtcbiAgY29uc3RydWN0b3IoKXtcbn1cbiAgc29sdmVOb2RlKCl7XG4gICAgcmV0dXJuIG5ldyBDZWxsVkVtcHR5KClcbiAgfVxuXG59XG5cbi8qKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0clRvUGFyc2VcbiAqL1xuY2xhc3MgU2ltcGxlRXhwcmVzc2lvbntcbiAgLy8g5oul5pyJ6Kej5p6Q5LiO6K6h566X5Lik5Liq6IO95YqbXG4gIGNvbnN0cnVjdG9yKHN0clRvUGFyc2UgPSBcIlwiLCBwYXJzZUFycmF5KXtcbiAgICB0aGlzLmV4cFN0YXR1cyA9IEZPUk1VTEFfU1RBVFVTLmNyZWF0ZWRcbiAgICB0aGlzLnN0clRvUGFyc2UgPSBzdHJUb1BhcnNlXG4gICAgdGhpcy5wYXJzZXJBcnJheSA9IHBhcnNlQXJyYXkgLy8g5aSa5Liq6Kej5p6Q5Zmo5bCd6K+V6Kej5p6QXG4gICAgdGhpcy5lcnJvck1zZyA9IFwiXCIgLy8g6Kej5p6Q5Lit55qE6Zeu6aKYXG4gICAgdGhpcy5hc3ROb2RlID0gbmV3IEVtcHR5Tm9kZSgpIC8vIOWvuWFyZ3PopoHlgZrnmoTlh73mlbDov5DnrpfvvIzlr7nlupTnmoTmoLnoioLngrnvvIzkuIDoiKzlr7nlupRBZGTvvIxBdmVyYWdl6L+Z5qC355qE6KGo6L6+5byP5Ye95pWwXG4gICAgdGhpcy5mblBhcmFtQXJyYXkgPSBbXSAvLyDlj4LmlbDliJfooajvvIzmiYDmnInnmoTlj4LmlbDpg73mnIlzb2x2ZUV4cHJlc3Npb27mlrnms5VcbiAgICB0aGlzLmV4cFNvbHV0aW9uID0gRVJST1JfTk9OX1NPTFZFRCAvLyDmsqHmnInop6PlhrNcbiAgfVxuICBwYXJzZUV4cHJlc3Npb24oKXtcbiAgICBsZXQgcmVzXG4gICAgZm9yKGxldCBwYXJzZXJDbHMgb2YgdGhpcy5wYXJzZXJBcnJheSl7IC8vIOivleWbvueUqOWkmuS4quino+aekOWZqOadpeino+aekFxuICAgICAgcmVzID0gbmV3IHBhcnNlckNscyh0aGlzLnN0clRvUGFyc2UpLnBhcnNlU3RyaW5nKClcbiAgICAgIGlmKHJlcy5pc0VtcHR5KCkgPT09IGZhbHNlKXsgLy8g5q2j56Gu6Kej5p6Q5LqGXG4gICAgICAgIHJldHVybiByZXMgLy8g6Kej5p6Q5oiQ5YqfXG4gICAgICB9XG4gICAgfVxuXG4gIH1cbiAgaXNFbXB0eSgpe1xuICAgIHJldHVybiB0aGlzLnN0clRvUGFyc2UgPT09IFwiXCJcbiAgfVxuICBpc05vZGVFbXB0eSgpe1xuICAgIHJldHVybiB0aGlzLmFzdE5vZGUgaW5zdGFuY2VvZiBFbXB0eU5vZGVcbiAgfVxuICB1cGRhdGVfY2VsbF92YWx1ZSgpe1xuICAgIHJldHVybiB0aGlzLnNvbHZlRXhwcmVzc2lvbigpXG4gIH1cbiAgc29sdmVFeHByZXNzaW9uKCl7XG4gICAgLy8g6aaW5YWI5omA5pyJ55qE5a2Q5Y+C5pWw6YO96KaB6I635b6X57uT5p6cXG4gICAgaWYodGhpcy5pc0VtcHR5KCkpe1xuICAgICAgdGhpcy5leHBTb2x1dGlvbiA9IG5ldyBDZWxsVkVtcHR5KCkgLy8g56m65YC8LOW+l+WIsOi/meS4que7k+aenFxuICAgIH1cbiAgICBlbHNlIGlmKHRoaXMuaXNOb2RlRW1wdHkoKSA9PT0gZmFsc2UpeyAvLyDpnIDopoHov5vooYzorqHnrpdcbiAgICAgIGlmKHRoaXMuZm5QYXJhbUFycmF5Lmxlbmd0aCA+IDApe1xuICAgICAgICBsZXQgc29sdmVkUGFyYW1BcnJheSA9IHRoaXMuZm5QYXJhbUFycmF5LnJlZHVjZSgoc29sdmVkQXJyYXkgICxmblBhcmFtKSA9PiB7c29sdmVkQXJyYXkucHVzaChmblBhcmFtLnNvbHZlRXhwcmVzc2lvbigpKX0pXG4gICAgICAgIHRoaXMuZXhwU29sdXRpb24gPSB0aGlzLmFzdE5vZGUuc29sdmVOb2RlKC4uLnNvbHZlZFBhcmFtQXJyYXkpXG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICB0aGlzLmV4cFNvbHV0aW9uID0gdGhpcy5hc3ROb2RlLnNvbHZlTm9kZSgpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBjb25zb2xlLmFzc2VydCh0aGlzLmZuUGFyYW1BcnJheS5sZW5ndGggPT09IDEpXG4gICAgICB0aGlzLmV4cFNvbHV0aW9uID0gc29sdmVkUGFyYW1BcnJheVswXSAvLyDmraTml7blupTor6Xlj6rmnInkuIDkuKroioLngrlcbiAgICB9XG4gICAgdGhpcy5leHBTdGF0dXMgPSBGT1JNVUxBX1NUQVRVUy5zb2x2ZWRcbiAgICByZXR1cm4gdGhpcy5leHBTb2x1dGlvblxuICB9XG59XG5cblxuY2xhc3MgRGF0ZVRpbWVQYXJzZXJ7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyVG9QYXJzZVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3RyVG9QYXJzZSl7XG4gICAgdGhpcy5zdHJUb1BhcnNlID0gc3RyVG9QYXJzZVxuICAgIHRoaXMucmVzRXhwID0gbmV3IFNpbXBsZUV4cHJlc3Npb24oKSAvLyDliJ3lp4vmmK/kuIDkuKrnqbrnmoQ7IOacgOe7iOW+l+WIsOS4gOS4qmV4cHJlc3Npb27vvIzov5nkuKpleHByZXNzaW9u5Lya6KKr6Kej5p6Q5Li65LiA5Liq5bCP6K+t5rOV5qCR77yM5pyJLmFzdE5vZGXlsZ7mgKdcbiAgfVxuICBkZWFsU3BhY2UoKXtcbiAgICBsZXQgZmlyc3RDb2xvblBzdCA9IHRoaXMuc3RyVG9QYXJzZS5pbmRleE9mKE1BUktfT0JKLmNvbG9uKVxuICAgIGxldCBsYXN0U3BhY2VQc3RcbiAgICBpZihmaXJzdENvbG9uUHN0ID4gMCl7IC8vIOWtmOWcqOWGkuWPt1xuICAgICAgbGV0IGxhc3RTcGFjZVBzdCA9IHRoaXMuc3RyVG9QYXJzZS5zbGljZSgwLGZpcnN0Q29sb25Qc3QpLmxhc3RJbmRleE9mKE1BUktfT0JKLnNwYWNlKVxuICAgICAgICBpZihsYXN0U3BhY2VQc3QgPiAwKXsgLy8g5a2Y5Zyo56m65qC8XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYodGhpcy5zdHJUb1BhcnNlLmluY2x1ZGVzKFwiOlwiKSl7IC8vIOino+aekOWGkuWPt1xuXG4gICAgfVxuXG4gIH1cblxuICBwYXJzZVN0cmluZygpeyAvLyBhc2RmK2FzIDtcbiAgICBsZXQgcmVzMSA9IHRoaXMuZGVhbFNwYWNlKClcbiAgICBjb25zb2xlLmxvZygpXG4gICAgcmV0dXJuIHRoaXMgLy8g6I635b6X55qE57uT5p6cXG4gIH1cbn1cbiIsImltcG9ydCB7IFN0cnVjdHVyYWxFeHAgfSBmcm9tICcuLi8uLi9jYWxjX2RhdGFfcHJveHkvc3RydWN0dXJhbF9leHAnO1xuaW1wb3J0IHsgUmF3VmFsdWUgfSBmcm9tICcuLi8uLi9jYWxjX2RhdGFfcHJveHkvcmF3X3ZhbHVlJztcbmltcG9ydCB7IGNvbW1vbl9vcGVyYXRpb25zIH0gZnJvbSAnLi4vLi4vY2FsY191dGlscy9jb25maWcnO1xuXG4vKipcbiAqIEBwcm9wZXJ0eVxuICogQHByb3BlcnR5IHtNdWx0aUNvbGxFeHBGbn0gbXVsdGlDb2xsRm5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0cnVjdHVyYWxFeHByZXNzaW9uQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKGNhbGNDZWxsLCBtdWx0aUNvbGxGbikge1xuICAgIHRoaXMubXVsdGlDb2xsRm4gPSBtdWx0aUNvbGxGbjtcbiAgICB0aGlzLmNhbGNDZWxsID0gY2FsY0NlbGxcbiAgICB0aGlzLmV4cF9vYmogPSB0aGlzLnJvb3RfZXhwID0gbmV3IFN0cnVjdHVyYWxFeHAoY2FsY0NlbGwpOyAgLy8g5bCB6KOF5YWs5byP5a6e5L6LXG4gICAgLy8g5LiL6Z2i5bqU6K+l5piv54q25oCBXG4gICAgdGhpcy5idWZmZXIgPSAnJztcbiAgICB0aGlzLndhc19zdHJpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmZuX3N0YWNrID0gW3sgLy8g6L+Z5Liq5piv5Ye95pWw6LCD55So5qCI77yfXG4gICAgICBleHA6IHRoaXMuZXhwX29ialxuICAgIH1dO1xuICAgIHRoaXMucG9zaXRpb25faSA9IDA7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuZGVhbDFDaGFyO1xuXG4gIH1cblxuICAvKipcbiAgICogc3RhdGUgcGF0dGVybiBpbiBmdW5jdGlvbmFsIHdheVxuICAgKi9cbiAgc3RyaW5nKGNoYXIpIHtcbiAgICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgICAgdGhpcy5leHBfb2JqLnB1c2gyRXhwQXJncyhuZXcgUmF3VmFsdWUodGhpcy5idWZmZXIpKTtcbiAgICAgIHRoaXMud2FzX3N0cmluZyA9IHRydWU7XG4gICAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuZGVhbDFDaGFyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1ZmZlciArPSBjaGFyO1xuICAgIH1cbiAgfVxuXG4gIHNpbmdsZV9xdW90ZShjaGFyKSB7XG4gICAgaWYgKGNoYXIgPT09ICdcXCcnKSB7XG4gICAgICB0aGlzLnN0YXRlID0gdGhpcy5kZWFsMUNoYXI7XG4gICAgfVxuICAgIHRoaXMuYnVmZmVyICs9IGNoYXI7XG4gIH1cblxuICBpbmlfcGFyZW50aGVzZXMoKSB7XG4gICAgbGV0IHN0cnVjdHVyYWxFeHAsXG4gICAgICB0cmltX2J1ZmZlciA9IHRoaXMuYnVmZmVyLnRyaW0oKSwgLy8gYnVmZmVyIOaYr+S4gOS4quWtl+espuS4su+8jOS7o+ihqOS4gOS4quivreS5ieWNleWFg++8jOS+i+WmgmF2ZXJhZ2VcbiAgICAgIHNwZWNpYWwgPSB0aGlzLm11bHRpQ29sbEZuLmdldEZuRXhlY3V0b3JCeU5hbWUodHJpbV9idWZmZXIpOyAvLyDojrflj5ZleHByZXNzaW9uIOWHveaVsFxuICAgIHN0cnVjdHVyYWxFeHAgPSBuZXcgU3RydWN0dXJhbEV4cCh0aGlzLmNhbGNDZWxsKTtcbiAgICB0aGlzLmZuX3N0YWNrLnB1c2goe1xuICAgICAgZXhwOiBzdHJ1Y3R1cmFsRXhwLFxuICAgICAgc3BlY2lhbDogc3BlY2lhbFxuICAgIH0pO1xuICAgIHRoaXMuZXhwX29iaiA9IHN0cnVjdHVyYWxFeHA7XG4gICAgdGhpcy5idWZmZXIgPSAnJztcbiAgfVxuXG4gIGVuZF9wYXJlbnRoZXNlcygpIHtcbiAgICBsZXQgZm5fc3RhY2sgPSB0aGlzLmZuX3N0YWNrO1xuICAgIGxldCB2LFxuICAgICAgc3RhY2sgPSB0aGlzLmZuX3N0YWNrLnBvcCgpO1xuICAgIHRoaXMuZXhwX29iaiA9IHN0YWNrLmV4cDtcbiAgICB0aGlzLmV4cF9vYmoucHVzaDJFeHBBcmdzKHRoaXMuYnVmZmVyLCk7XG4gICAgdiA9IHRoaXMuZXhwX29iajtcbiAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgIHRoaXMuZXhwX29iaiA9IGZuX3N0YWNrW2ZuX3N0YWNrLmxlbmd0aCAtIDFdLmV4cDtcbiAgICBpZiAoc3RhY2suc3BlY2lhbCkge1xuICAgICAgc3RhY2suc3BlY2lhbC5wdXNoKHYpO1xuICAgICAgdGhpcy5leHBfb2JqLnB1c2gyRXhwQXJncyhzdGFjay5zcGVjaWFsLCB0aGlzLnBvc2l0aW9uX2kpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV4cF9vYmoucHVzaDJFeHBBcmdzKHYsIHRoaXMucG9zaXRpb25faSk7XG4gICAgfVxuICB9XG5cbiAgYWRkX29wZXJhdGlvbihjaGFyKSB7XG4gICAgaWYgKCF0aGlzLndhc19zdHJpbmcpIHtcbiAgICAgIHRoaXMuZXhwX29iai5wdXNoMkV4cEFyZ3ModGhpcy5idWZmZXIsIHRoaXMucG9zaXRpb25faSk7XG4gICAgfVxuICAgIHRoaXMud2FzX3N0cmluZyA9IGZhbHNlO1xuICAgIHRoaXMuZXhwX29iai5wdXNoMkV4cEFyZ3MoY2hhciwgdGhpcy5wb3NpdGlvbl9pKTtcbiAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICB9XG5cbiAgZGVhbDFDaGFyKGNoYXIpIHsgLy8g5aSE55CG5LiA5Liq5a2X56ymXG4gICAgbGV0IGZuX3N0YWNrID0gdGhpcy5mbl9zdGFjaztcbiAgICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RyaW5nO1xuICAgICAgdGhpcy5idWZmZXIgPSAnJztcbiAgICB9IGVsc2UgaWYgKGNoYXIgPT09ICdcXCcnKSB7XG4gICAgICB0aGlzLnN0YXRlID0gdGhpcy5zaW5nbGVfcXVvdGU7XG4gICAgICB0aGlzLmJ1ZmZlciA9ICdcXCcnO1xuICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gJygnKSB7XG4gICAgICB0aGlzLmluaV9wYXJlbnRoZXNlcygpO1xuICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gJyknKSB7XG4gICAgICB0aGlzLmVuZF9wYXJlbnRoZXNlcygpO1xuICAgIH0gZWxzZSBpZiAoY29tbW9uX29wZXJhdGlvbnNbY2hhcl0pIHtcbiAgICAgIHRoaXMuYWRkX29wZXJhdGlvbihjaGFyKTtcbiAgICB9IGVsc2UgaWYgKGNoYXIgPT09ICcsJyAmJiBmbl9zdGFja1tmbl9zdGFjay5sZW5ndGggLSAxXS5zcGVjaWFsKSB7XG4gICAgICB0aGlzLndhc19zdHJpbmcgPSBmYWxzZTtcbiAgICAgIGZuX3N0YWNrW2ZuX3N0YWNrLmxlbmd0aCAtIDFdLmV4cC5wdXNoMkV4cEFyZ3ModGhpcy5idWZmZXIsIHRoaXMucG9zaXRpb25faSk7XG4gICAgICBmbl9zdGFja1tmbl9zdGFjay5sZW5ndGggLSAxXS5zcGVjaWFsLnB1c2goZm5fc3RhY2tbZm5fc3RhY2subGVuZ3RoIC0gMV0uZXhwKTtcbiAgICAgIGZuX3N0YWNrW2ZuX3N0YWNrLmxlbmd0aCAtIDFdLmV4cCA9IHRoaXMuZXhwX29iaiA9IG5ldyBTdHJ1Y3R1cmFsRXhwKHRoaXMuY2FsY0NlbGwpO1xuICAgICAgdGhpcy5idWZmZXIgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5idWZmZXIgKz0gY2hhcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtDYWxjQ2VsbH0gY2FsY0NlbGxcbiAgICogQHJldHVybiB7U3RydWN0dXJhbEV4cH1cbiAgICovXG4gIHBhcnNlRm9ybXVsYSgpIHsgLy8g5a6e6ZmF55qE6Kej5p6Q6YC76L6RXG4gICAgLy8g5Li75omn6KGM6K+t5Y+l5Zyo6L+Z6YeM77yM5LiK6Z2i5piv5a6a5LmJ5LiA57O75YiX5pa55rOVXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCB0b1BhcnNlU3RyID0gdGhpcy5jYWxjQ2VsbC5mb3JtdWxhU3RyaW5nLnNsaWNlKDEpOyAvLyDljrvmjonpppblrZfnrKbvvIgnPSfvvIlcbiAgICBmb3IgKDsgdGhpcy5wb3NpdGlvbl9pIDwgdG9QYXJzZVN0ci5sZW5ndGg7IHRoaXMucG9zaXRpb25faSsrKSB7XG4gICAgICBzZWxmLnN0YXRlKHRvUGFyc2VTdHJbc2VsZi5wb3NpdGlvbl9pXSk7IC8vIOmAkOWtl+espuino+aekOWHveaVsDsgc2VsZi5zdGF0ZeS7o+ihqOW9k+WJjeeahOino+aekOeKtuaAgVxuICAgIH1cbiAgICB0aGlzLnJvb3RfZXhwLnB1c2gyRXhwQXJncyh0aGlzLmJ1ZmZlciwgdGhpcy5wb3NpdGlvbl9pKTsgLy8gcm9vdF9leHAg5piv5LiA5LiqRXhw5a6e5L6L77yM6L+Z5Liq5a6e5L6L5Lya5byV55So5LiA5LiqRXhw5pWw57uEXG4gICAgcmV0dXJuIHRoaXMucm9vdF9leHA7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHtGT1JNVUxBX1NUQVRVU30gIGZyb20gXCIuLi9jYWxjX3V0aWxzL2NvbmZpZ1wiXG5pbXBvcnQge1Jhd1ZhbHVlfSBmcm9tICcuL3Jhd192YWx1ZS5qcyc7XG5pbXBvcnQge1JhbmdlfSBmcm9tICcuL3JhbmdlX3JlZi5qcyc7XG5pbXBvcnQge2Vycm9yT2JqLCBlcnJvck1zZ0Fycn0gIGZyb20gJy4uL2NhbGNfdXRpbHMvZXJyb3JfY29uZmlnJ1xuaW1wb3J0IHtDZWxsVkRhdGVUaW1lLCBDZWxsVkVtcHR5LCBjb252ZXJ0VG9DZWxsVn0gZnJvbSBcIi4uL2NlbGxfdmFsdWVfdHlwZS9jZWxsX3ZhbHVlXCI7XG5pbXBvcnQgeyBzdHJfMl92YWwgfSBmcm9tICcuL2V4cF9zZWN0aW9uJztcblxuXG5sZXQgZXhwX2lkID0gMDsgLy8g5YWo5bGA5Y+Y6YePXG4vKipcbiAqIEBwcm9wZXJ0eSB7Q2FsY0NlbGx9IGNhbGNDZWxsXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmFsRXhwIHtcbiAgICAvLyDku6Pooajor63ms5XkuabkuIrpnaLnmoTkuIDkuKroioLngrnjgILov5nkuKrlh6DngrnnmoRhcmdz5piv5Luj6KGo5qCR5p6d77yMXG4gICAgLy8g5Y+v5Lul5Li6UmF3VmFsdWXvvIxSZWZWYWx1Ze+8jExhenlWYWx1ZeaIluWtl+espuaIlkZvcm11bGFFeHA7IOWtmOWcqOaLrOWPt+eahOaXtuWAme+8jOS8muaKiuaLrOWPt+WGheeahOihqOi+vuW8j+aehOmAoOS4ukZvcm11bGFFeHBcbiAgICBjb25zdHJ1Y3RvcihjYWxjQ2VsbCkge1xuICAgICAgICB0aGlzLmlkID0gKytleHBfaWQ7ICAgLy8gaWQg5piv5LiA5Liq6YCS5aKe5bqP5YiX77yM5YW25Litcm9vdF9leHDnmoRpZOS4ujFcbiAgICAgICAgdGhpcy5hcmdzID0gW107XG4gICAgICAgIHRoaXMubmFtZSA9ICdFeHByZXNzaW9uJztcbiAgICAgICAgdGhpcy5jYWxjQ2VsbCA9IGNhbGNDZWxsO1xuICAgICAgICB0aGlzLmxhc3RfYXJnID0gXCJcIjtcbiAgICB9XG5cbiAgICB1cGRhdGVfY2VsbF92YWx1ZSgpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgY3VyQ2VsbE9iaiA9IHRoaXMuY2FsY0NlbGwuY2VsbE9iajtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlbGYuYXJncykgLy8g5LiN5ZCI5rOV55qE5Y+C5pWw77ybIOS9leaXtuS8muWHuueOsOi/meenjeaDheWGte+8n1xuICAgICAgICAgICAgICAmJiBzZWxmLmFyZ3MubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAgICYmIHNlbGYuYXJnc1swXSBpbnN0YW5jZW9mIFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JPYmouRVJST1JfVkFMVUU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJDZWxsT2JqLnYgPSBzZWxmLnNvbHZlRXhwcmVzc2lvbigpOyAvLyDorqHnrpfmlbDlgLxcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY3VyQ2VsbE9iai52KSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjdXJDZWxsT2JqLnQgPSAncyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAoY3VyQ2VsbE9iai52KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjdXJDZWxsT2JqLnQgPSAnbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlcnJvck1zZ0Fyci5pbmRleE9mKGUubWVzc2FnZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY3VyQ2VsbE9iai50ID0gJ2UnO1xuICAgICAgICAgICAgICAgIGN1ckNlbGxPYmoudyA9IGUubWVzc2FnZTsgLy8gdG9kbzog5oqKLncg5bGe5oCn5pS55Li6ICAudGV4dOWxnuaAp++8jCBjZWxs5L2/55SoY2FsY0NlbGzlrp7kvovogIzkuI3mmK/ljZXnuq/nmoRvYmpcbiAgICAgICAgICAgICAgICBjdXJDZWxsT2JqLnYgPSBlLm1lc3NhZ2U7IC8vIOWHuumUmeeahOivne+8jHblsZ7mgKflupTor6XmsqHmnInnlKjkuobmiopcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IFwiXCI7XG4gICAgfVxuXG4gICAgaGFzQ2FsY01ldGhvZChvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmouc29sdmVFeHByZXNzaW9uID09PSAnZnVuY3Rpb24nXG4gICAgfVxuICAgIGNvbnZlcnREYXRlVG9OdW1iZXIocmVzKXtcbiAgICAgICAgaWYocmVzIGluc3RhbmNlb2YgQ2VsbFZEYXRlVGltZSl7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnRvTnVtYmVyKClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGVjQ2FsY01ldGhvZChvYmosIGlzQ29udmVydERhdGVUb051bWJlciA9IHRydWUpe1xuICAgICAgICBpZih0aGlzLmhhc0NhbGNNZXRob2Qob2JqKSl7XG4gICAgICAgICAgICBsZXQgcmVzID0gb2JqLnNvbHZlRXhwcmVzc2lvbigpXG4gICAgICAgICAgICBpZihpc0NvbnZlcnREYXRlVG9OdW1iZXIpe1xuICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuY29udmVydERhdGVUb051bWJlcihyZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvck9iai5FUlJPUl9TWU5UQVhcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4ZWNPcGVyYXRvcldpdGgyQXJncyhvcCwgYXJncywgZm4pIHsgLy8gZm7lkKvmnInkuKTkuKrlj4LmlbDvvIzlm6DkuLrov5DnrpfnrKbmnInkvJjlhYjnuqfpobrluo/vvIzmiYDku6XpnIDopoHkvp3mrKHmiafooYxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7IC8vIHRvZG86IOWQjumdouS8muS/ruaUuWFyZ3PvvIzov5nmoLfkuI3mmK/lvojmgbDlvZNcbiAgICAgICAgICAgIGlmIChhcmdzW2ldID09PSBvcCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByID0gZm4odGhpcy5leGVjQ2FsY01ldGhvZChhcmdzW2ktMV0pLCB0aGlzLmV4ZWNDYWxjTWV0aG9kKGFyZ3NbaSsxXSkpOy8vIOi/memHjOWtmOWcqOmAkuW9klxuICAgICAgICAgICAgICAgICAgICBhcmdzLnNwbGljZShpIC0gMSwgMywgbmV3IFJhd1ZhbHVlKHIpKTtcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgLy8g5LiK6Z2i5LiA5pem5Ye6546w6ZSZ6K+v77yM5bCx55u05o6l6Lez5Ye65LqGXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3RydWN0dXJhbF9leHAuanNdIC0gJyArIHRoaXMubmFtZSArICc6IGV2YWx1YXRpbmcgJyArIHRoaXMuY2FsY0NlbGwuY2VsbE9iai5mICsgJ1xcbicgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4ZWNfbWludXMoYXJncykgeyAvLyA9MS4xXi0xMu+8mz0xLjEqLTEyIOWcqOi0n+WPt+S5i+WJjeacieWFtuS7lui/kOeul+esplxuICAgICAgICBmb3IgKGxldCBpID0gYXJncy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIGlmIChhcmdzW2ldID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDYWxjTWV0aG9kKGFyZ3NbaSsxXSlcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgdHlwZW9mIGFyZ3NbaSAtIDFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnNwbGljZShpLCAyLCBuZXcgUmF3VmFsdWUoLWFyZ3NbaSsxXSkpOy8vIOabv+aNojLkuKrljp/mnIlhcmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4ZWNfcGx1cyhhcmdzKXtcbiAgICAgICAgaWYgKGFyZ3NbMF0gPT09ICcrJykgeyAvLyDnrKzkuIDkuKrov5DnrpfnrKbnrKblsLHmmK/liqDlj7dcbiAgICAgICAgICAgIGxldCByID0gdGhpcy5leGVjQ2FsY01ldGhvZChhcmdzWzFdKTsgLy8g6L+Z6YeM5a2Y5Zyo6YCS5b2SXG4gICAgICAgICAgICBhcmdzLnNwbGljZSgwLCAyLCBuZXcgUmF3VmFsdWUocikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aKE5aSE55CGcmVmVmFsdWXnsbvlnovnmoTmlbDlgLxcbiAgICAgKiBAcmV0dXJuIHsqfEVycm9yfVxuICAgICAqL1xuICAgIGRlYWxBbGxSZWZWYWx1ZSgpe1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBhcmdzID0gc2VsZi5hcmdzLmNvbmNhdCgpOyAvLyDlupTor6Xkvb/nlKjmnaXlgZrkuKrmtYXlpI3liLZcbiAgICAgICAgbGV0IHNoZWV0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHsgLy8g6YGN5Y6G5omA5pyJ55qE5Y+C5pWwXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0ubmFtZSA9PT0gJ1JlZlZhbHVlJykgeyAvLyDlsZ7kuo7lvJXnlKjnmoTlrZfnrKbkuLJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQgPSBhcmdzW2ldLmNhbGNDZWxsLmNhbGNTaGVldDtcbiAgICAgICAgICAgICAgICAgICAgLy/mnKrlrprkuYnljZXlhYPmoLxm572u5Li6ZGVmYXVsdF8wXG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxsTmFtZSA9IGFyZ3NbaV0uc3RyX2V4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoZWV0LmdldENlbGxCeU5hbWUoY2VsbE5hbWUpID09PSB1bmRlZmluZWQpeyAvLyDliKTlrprnqbrljZXlhYPmoLzvvIxhcmdzW2ldLnN0cl9leHByZXNzaW9uID0gXCJBMjhcIiwgc2hlZXTmmK/kuIDkuKpvYmosIHZhbHVlIOaYryDvvZt2OixmOn3ov5nnp43lvaLlvI/nmoRvYmpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0LmFkZENhbGNDZWxsKGNlbGxOYW1lLCB7djogbmV3IENlbGxWRW1wdHkoKX0sIEZPUk1VTEFfU1RBVFVTLnNvbHZlZCkgICAvLyDmnKrlrprkuYnnmoTlgLzotYvlgLxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLz1BMOW9ouW8j+WPguaVsOaKpemUmVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXS5zdHJfZXhwcmVzc2lvbi5zbGljZSgxLCBhcmdzW2ldLnN0cl9leHByZXNzaW9uLmxlbmd0aCkgPT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yT2JqLkVSUk9SX05BTUU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNvbHZlRXhwcmVzc2lvbigpIHsgLy8g5qC45b+D5pa55rOV77yM5YGa6K6h566XXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGFyZ3MgPSBzZWxmLmFyZ3MuY29uY2F0KCk7IC8vIOW6lOivpeS9v+eUqOadpeWBmuS4qua1heWkjeWItlxuICAgICAgICBsZXQgc2hlZXRcbiAgICAgICAgdGhpcy5kZWFsQWxsUmVmVmFsdWUoKVxuICAgICAgICAvLyDku6XkuIvmmK/kvp3mrKHmiafooYzlkITkuKrov5DnrpfnrKbvvIzmnIDkvJjlhYjnmoTov5DnrpfnrKblnKjmnIDkuIrpnaJcbiAgICAgICAgdGhpcy5leGVjX21pbnVzKGFyZ3MpOyAvLyDmiafooYzotJ/lj7fov5DnrpdcbiAgICAgICAgdGhpcy5leGVjX3BsdXMoYXJncyk7IC8vIOaJp+ihjOesrOS4gOS4quWKoOWPt1xuICAgICAgICB0aGlzLmV4ZUFsbFR3b0FyZ09wZXJhdG9yKGFyZ3MsIHNlbGYpO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGNMYXN0QXJnKGFyZ3NbMF0pIC8vIOiuoeeul+acgOWQjuS4gOS4quWAvFxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGV4ZUFsbFR3b0FyZ09wZXJhdG9yKGFyZ3MsIHNlbGYpIHtcbiAgICAgICAgdGhpcy5leGVjT3BlcmF0b3JXaXRoMkFyZ3MoJ14nLCBhcmdzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KCthLCArYik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnLycsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yT2JqLkVSUk9SX0RJVjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKCthKSAvICgrYik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnKicsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKCthKSAqICgrYik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnLScsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7IC8vIOaJp+ihjOWHj+azlVxuICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnKycsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7IC8vIOaJp+ihjOWKoOazlVxuICAgICAgICAgICAgcmV0dXJuICgrYSkgKyAoK2IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leGVjT3BlcmF0b3JXaXRoMkFyZ3MoJyYnLCBhcmdzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuICcnICsgYSArIGI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnPCcsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA8IGI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnPicsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA+IGI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnPj0nLCBhcmdzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEgPj0gYjtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhlY09wZXJhdG9yV2l0aDJBcmdzKCc8PScsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA8PSBiO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leGVjT3BlcmF0b3JXaXRoMkFyZ3MoJzw+JywgYXJncywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmlzRW1wdHkoYSkgJiYgc2VsZi5pc0VtcHR5KGIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEgIT09IGI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4ZWNPcGVyYXRvcldpdGgyQXJncygnPScsIGFyZ3MsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0VtcHR5KGEpICYmIHNlbGYuaXNFbXB0eShiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChhID09PSBudWxsICYmIGIgPT09IDApIHx8IChhID09PSAwICYmIGIgPT09IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBiID09PSAnc3RyaW5nJyAmJiBhLnRvTG93ZXJDYXNlKCkgPT09IGIudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNhbGNMYXN0QXJnKGFyZyl7XG4gICAgICAgIGlmICh0eXBlb2YgKGFyZy5zb2x2ZUV4cHJlc3Npb24pICE9PSAnZnVuY3Rpb24nIHx8IGFyZy5jZWxsU3RhdHVzID09PSBGT1JNVUxBX1NUQVRVUy5zb2x2ZWQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUge0NhbGNDZWxsfSBhcmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmV0dXJuIGFyZy5jZWxsT2JqLnY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcmVzID0gYXJnLnNvbHZlRXhwcmVzc2lvbigpXG4gICAgICAgICAgICByZXR1cm4gY29udmVydFRvQ2VsbFYocmVzKTsgLy8g56Gu5L+d6L+U5Zue55qE6YO95piv5bCB6KOF6L+H55qE5YC8XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVzaDJFeHBBcmdzKGFzdE5vZGVTdHIsIHBvc2l0aW9uX2kpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzXG4gICAgICAgIGlmIChhc3ROb2RlU3RyKSB7XG4gICAgICAgICAgICBsZXQgdiA9IHN0cl8yX3ZhbChhc3ROb2RlU3RyLCBzZWxmLmNhbGNDZWxsLCBwb3NpdGlvbl9pKTtcbiAgICAgICAgICAgIGlmICgoKHYgPT09ICc9JykgJiYgKHNlbGYubGFzdF9hcmcgPT09ICc+JyB8fCBzZWxmLmxhc3RfYXJnID09PSAnPCcpKSB8fCAoc2VsZi5sYXN0X2FyZyA9PT0gJzwnICYmIHYgPT09ICc+JykpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFyZ3Nbc2VsZi5hcmdzLmxlbmd0aCAtIDFdICs9IHY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuYXJncy5wdXNoKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5sYXN0X2FyZyA9IHY7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNlbGYuaWQsICctLT4nLCB2KTtcbiAgICAgICAgfVxuICAgIH07XG5cbn07XG5cbiIsImltcG9ydCB7IFJhd1ZhbHVlIH0gZnJvbSAnLi9yYXdfdmFsdWUnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuL3JhbmdlX3JlZic7XG5pbXBvcnQgeyBSZWZWYWx1ZSB9IGZyb20gJy4vcmVmX3ZhbHVlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cl8yX3ZhbChhc3ROb2RlU3RyLCBmb3JtdWxhLCBwb3NpdGlvbl9pKSB7IC8vIGFzdE5vZGVTdHIg5Zyo6L+Z6YeM5piv5L2G5LiA5Liq5a2X56ym5Liy6KGo6L6+5byPXG4gIGxldCB2O1xuICBpZiAoIWlzTmFOKGFzdE5vZGVTdHIpKSB7XG4gICAgdiA9IG5ldyBSYXdWYWx1ZSgrYXN0Tm9kZVN0cik7XG4gIH0gZWxzZSBpZiAoYXN0Tm9kZVN0ciA9PT0gJ1RSVUUnKSB7XG4gICAgdiA9IG5ldyBSYXdWYWx1ZSgxKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXN0Tm9kZVN0ciA9PT0gJ3N0cmluZycgJiYgYXN0Tm9kZVN0ci50cmltKClcbiAgICAucmVwbGFjZSgvXFwkL2csICcnKVxuICAgIC5tYXRjaCgvXltBLVpdK1swLTldKzpbQS1aXStbMC05XSskLykpIHtcblxuICAgIHYgPSBuZXcgUmFuZ2UoYXN0Tm9kZVN0ci50cmltKClcbiAgICAgIC5yZXBsYWNlKC9cXCQvZywgJycpLCBmb3JtdWxhLCBwb3NpdGlvbl9pKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXN0Tm9kZVN0ciA9PT0gJ3N0cmluZycgJiYgYXN0Tm9kZVN0ci50cmltKClcbiAgICAucmVwbGFjZSgvXFwkL2csICcnKVxuICAgIC5tYXRjaCgvXlteIV0rIVtBLVpdK1swLTldKzpbQS1aXStbMC05XSskLykpIHtcbiAgICB2ID0gbmV3IFJhbmdlKGFzdE5vZGVTdHIudHJpbSgpXG4gICAgICAucmVwbGFjZSgvXFwkL2csICcnKSwgZm9ybXVsYSwgcG9zaXRpb25faSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFzdE5vZGVTdHIgPT09ICdzdHJpbmcnICYmIGFzdE5vZGVTdHIudHJpbSgpXG4gICAgLnJlcGxhY2UoL1xcJC9nLCAnJylcbiAgICAubWF0Y2goL15bQS1aXSs6W0EtWl0rJC8pKSB7XG4gICAgdiA9IG5ldyBSYW5nZShhc3ROb2RlU3RyLnRyaW0oKVxuICAgICAgLnJlcGxhY2UoL1xcJC9nLCAnJyksIGZvcm11bGEsIHBvc2l0aW9uX2kpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhc3ROb2RlU3RyID09PSAnc3RyaW5nJyAmJiBhc3ROb2RlU3RyLnRyaW0oKVxuICAgIC5yZXBsYWNlKC9cXCQvZywgJycpXG4gICAgLm1hdGNoKC9eW14hXSshW0EtWl0rOltBLVpdKyQvKSkge1xuICAgIHYgPSBuZXcgUmFuZ2UoYXN0Tm9kZVN0ci50cmltKClcbiAgICAgIC5yZXBsYWNlKC9cXCQvZywgJycpLCBmb3JtdWxhLCBwb3NpdGlvbl9pKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXN0Tm9kZVN0ciA9PT0gJ3N0cmluZycgJiYgYXN0Tm9kZVN0ci50cmltKClcbiAgICAucmVwbGFjZSgvXFwkL2csICcnKVxuICAgIC5tYXRjaCgvXltBLVpdK1swLTldKyQvKSkge1xuICAgIHYgPSBuZXcgUmVmVmFsdWUoYXN0Tm9kZVN0ci50cmltKClcbiAgICAgIC5yZXBsYWNlKC9cXCQvZywgJycpLCBmb3JtdWxhKTtcbiAgICB2LmVuZF9wc3QgPSBwb3NpdGlvbl9pOyAvLyDlkI7pnaLkuIDkuKrlrZfnrKbnmoTkvY3nva5cbiAgICB2LmJ1ZmZlciA9IGFzdE5vZGVTdHI7XG4gICAgdi5zdGFydF9wc3QgPSBwb3NpdGlvbl9pIC0gYXN0Tm9kZVN0ci5sZW5ndGg7XG5cblxuICB9IGVsc2UgaWYgKHR5cGVvZiBhc3ROb2RlU3RyID09PSAnc3RyaW5nJyAmJiBhc3ROb2RlU3RyLnRyaW0oKVxuICAgIC5yZXBsYWNlKC9cXCQvZywgJycpXG4gICAgLm1hdGNoKC9eW14hXSshW0EtWl0rWzAtOV0rJC8pKSB7XG4gICAgdiA9IG5ldyBSZWZWYWx1ZShhc3ROb2RlU3RyLnRyaW0oKVxuICAgICAgLnJlcGxhY2UoL1xcJC9nLCAnJyksIGZvcm11bGEpO1xuICAgIHYuZW5kX3BzdCA9IHBvc2l0aW9uX2k7IC8vIOWQjumdouS4gOS4quWtl+espueahOS9jee9rlxuICAgIHYuYnVmZmVyID0gYXN0Tm9kZVN0cjtcbiAgICB2LnN0YXJ0X3BzdCA9IHBvc2l0aW9uX2kgLSBhc3ROb2RlU3RyLmxlbmd0aDtcblxuICB9IGVsc2UgaWYgKHR5cGVvZiBhc3ROb2RlU3RyID09PSAnc3RyaW5nJyAmJiAhaXNOYU4oYXN0Tm9kZVN0ci50cmltKClcbiAgICAucmVwbGFjZSgvJSQvLCAnJykpKSB7IC8vIOWkhOeQhuWFrOW8j+S4reeahOeZvuWIhuWPt1xuICAgIHYgPSBuZXcgUmF3VmFsdWUoKyhhc3ROb2RlU3RyLnRyaW0oKVxuICAgICAgLnJlcGxhY2UoLyUkLywgJycpKSAvIDEwMC4wKTtcbiAgfSBlbHNlIHtcbiAgICB2ID0gYXN0Tm9kZVN0cjtcbiAgICAvLyB2LmVuZF9wc3QgPSBwb3NpdGlvbl9pIC8vIOWQjumdouS4gOS4quWtl+espueahOS9jee9rlxuICB9XG4gIHJldHVybiB2O1xufVxuIiwiaW1wb3J0IHsgQ2VsbFJhbmdlIH0gZnJvbSAnLi9jZWxsX3JhbmdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJhbmdlID0gbmV3IENlbGxSYW5nZSgwLCAwLCAwLCAwKTtcbiAgICB0aGlzLnJpID0gMDtcbiAgICB0aGlzLmNpID0gMDtcbiAgfVxuXG4gIG11bHRpcGxlKCkge1xuICAgIHJldHVybiB0aGlzLnJhbmdlLm11bHRpcGxlKCk7XG4gIH1cblxuICBzZXRJbmRleGVzKHJpLCBjaSkge1xuICAgIHRoaXMucmkgPSByaTtcbiAgICB0aGlzLmNpID0gY2k7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnJhbmdlLnNpemUoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy54ID0gMDsgLy8gbGVmdFxuICAgIHRoaXMueSA9IDA7IC8vIHRvcFxuICAgIHRoaXMucmkgPSAwOyAvLyBjZWxsIHJvdy1pbmRleFxuICAgIHRoaXMuY2kgPSAwOyAvLyBjZWxsIGNvbC1pbmRleFxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDbGlwYm9hcmQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJhbmdlID0gbnVsbDsgLy8gQ2VsbFJhbmdlXG4gICAgdGhpcy5zdGF0ZSA9ICdjbGVhcic7XG4gIH1cblxuICBjb3B5KGNlbGxSYW5nZSkge1xuICAgIHRoaXMucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgdGhpcy5zdGF0ZSA9ICdjb3B5JztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGN1dChjZWxsUmFuZ2UpIHtcbiAgICB0aGlzLnJhbmdlID0gY2VsbFJhbmdlO1xuICAgIHRoaXMuc3RhdGUgPSAnY3V0JztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGlzQ29weSgpIHtcbiAgLy8gICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gJ2NvcHknO1xuICAvLyB9XG4gIC8vXG4gIC8vIGlzQ3V0KCkge1xuICAvLyAgIHJldHVybiB0aGlzLnN0YXRlID09PSAnY3V0JztcbiAgLy8gfVxuXG4gIGlzQ2xlYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09ICdjbGVhcic7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLnJhbmdlID0gbnVsbDtcbiAgICB0aGlzLnN0YXRlID0gJ2NsZWFyJztcbiAgfVxufVxuIiwiaW1wb3J0IHtDZWxsUmFuZ2V9IGZyb20gJy4vY2VsbF9yYW5nZSc7XG4vLyBvcGVyYXRvcjogYWxsfGVxfG5lcXxndHxndGV8bHR8bHRlfGlufGJlXG4vLyB2YWx1ZTpcbi8vICAgaW4gPT4gW11cbi8vICAgYmUgPT4gW21pbiwgbWF4XVxuY2xhc3MgRmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjaSwgb3BlcmF0b3IsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2kgPSBjaTtcbiAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc2V0KG9wZXJhdG9yLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpbmNsdWRlcyh2KSB7XG4gICAgICAgIGNvbnN0IHtvcGVyYXRvciwgdmFsdWV9ID0gdGhpcztcbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnYWxsJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnaW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuaW5jbHVkZXModik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHZsZW5ndGgoKSB7XG4gICAgLy8gICAgIGNvbnN0IHtvcGVyYXRvciwgdmFsdWV9ID0gdGhpcztcbiAgICAvLyAgICAgaWYgKG9wZXJhdG9yID09PSAnaW4nKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiAwO1xuICAgIC8vIH1cblxuICAgIGdldERhdGEoKSB7XG5cbiAgICAgICAgY29uc3Qge2NpLCBvcGVyYXRvciwgdmFsdWV9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtjaSwgb3BlcmF0b3IsIHZhbHVlfTtcbiAgICB9XG59XG5cbmNsYXNzIFNvcnQge1xuICAgIGNvbnN0cnVjdG9yKGNpLCBvcmRlcikge1xuICAgICAgICB0aGlzLmNpID0gY2k7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICB9XG5cbiAgICBhc2MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yZGVyID09PSAnYXNjJztcbiAgICB9XG5cbiAgICBkZXNjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmRlciA9PT0gJ2Rlc2MnO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b0ZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gW107XG4gICAgICAgIHRoaXMuc29ydCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5mbGV4ID0gW107XG4gICAgfVxuXG4gICAgc2V0RGF0YSh7cmVmLCBmaWx0ZXJzLCBzb3J0fSkge1xuICAgICAgICBpZiAocmVmICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgICAgIHRoaXMuZml0bGVycyA9IGZpbHRlcnMubWFwKGl0ID0+IG5ldyBGaWx0ZXIoaXQuY2ksIGl0Lm9wZXJhdG9yLCBpdC52YWx1ZSkpO1xuICAgICAgICAgICAgaWYgKHNvcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnQgPSBuZXcgU29ydChzb3J0LmNpLCBzb3J0Lm9yZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSgpKSB7XG4gICAgICAgICAgICBjb25zdCB7cmVmLCBmaWx0ZXJzLCBzb3J0fSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4ge3JlZiwgZmlsdGVyczogZmlsdGVycy5tYXAoaXQgPT4gaXQuZ2V0RGF0YSgpKSwgc29ydH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGFkZEZpbHRlcihjaSwgb3BlcmF0b3IsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuZ2V0RmlsdGVyKGNpKTtcbiAgICAgICAgaWYgKGZpbHRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMucHVzaChuZXcgRmlsdGVyKGNpLCBvcGVyYXRvciwgdmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlci5zZXQob3BlcmF0b3IsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEZpZXhSb3dzKGFyZ3MpIHtcbiAgICAgICAgdGhpcy5mbGV4ID0gYXJncztcbiAgICB9XG5cbiAgICBzZXRTb3J0KGNpLCBvcmRlcikge1xuICAgICAgICB0aGlzLnNvcnQgPSBvcmRlciA/IG5ldyBTb3J0KGNpLCBvcmRlcikgOiBudWxsO1xuICAgIH1cblxuICAgIGluY2x1ZGVzKHJpLCBjaSkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHJhbmdlKCkuaW5jbHVkZXMocmksIGNpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0U2V0KGV4Y2VwdFJvd1NldCwgcmlyKSB7XG4gICAgICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCB0aGlzLmZsZXgubGVuZ3RoOyBpeCsrKSB7XG4gICAgICAgICAgICBsZXQge3JpLCAgIHNldF90b3RhbCwgc3RhdGV9ID0gdGhpcy5mbGV4W2l4XTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSByaTsgaSA8IHNldF90b3RhbCArIHJpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZSwgXCIxMTRcIiwgcmlyLCByaSwgc3RhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gZmFsc2UgJiYgcmlyID09PSByaSkge1xuICAgICAgICAgICAgICAgICAgICBleGNlcHRSb3dTZXQuYWRkKGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGV4W2l4XS5zdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gdHJ1ZSAmJiByaXIgPT09IHJpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4Y2VwdFJvd1NldC5kZWxldGUoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsZXhbaXhdLnN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4Y2VwdFJvd1NldDtcbiAgICB9XG5cbiAgICBpbmNsdWRlczIocmlyLCBjaWMpIHtcbiAgICAgICAgbGV0IGIgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmxleC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHtyaSwgY2l9ID0gdGhpcy5mbGV4W2ldO1xuICAgICAgICAgICAgaWYgKHJpciA9PT0gcmkgJiYgY2ljID09PSBjaSkge1xuICAgICAgICAgICAgICAgIGIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfVxuXG4gICAgZ2V0U29ydChjaSkge1xuICAgICAgICBjb25zdCB7c29ydH0gPSB0aGlzO1xuICAgICAgICBpZiAoc29ydCAmJiBzb3J0LmNpID09PSBjaSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0RmlsdGVyKGNpKSB7XG4gICAgICAgIGNvbnN0IHtmaWx0ZXJzfSA9IHRoaXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlcnNbaV0uY2kgPT09IGNpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZmlsdGVyZWRSb3dzKGdldENlbGwpIHtcbiAgICAgICAgLy8gY29uc3QgYXJ5ID0gW107XG4gICAgICAgIC8vIGxldCBsYXN0cmkgPSAwO1xuICAgICAgICBjb25zdCByc2V0ID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBmc2V0ID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUoKSkge1xuICAgICAgICAgICAgY29uc3Qge3NyaSwgZXJpfSA9IHRoaXMucmFuZ2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHtmaWx0ZXJzfSA9IHRoaXM7XG4gICAgICAgICAgICBmb3IgKGxldCByaSA9IHNyaSArIDE7IHJpIDw9IGVyaTsgcmkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBmaWx0ZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZ2V0Q2VsbChyaSwgZmlsdGVyLmNpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3RleHQgPSBjZWxsID8gY2VsbC50ZXh0IDogJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVyLmluY2x1ZGVzKGN0ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnNldC5hZGQocmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmc2V0LmFkZChyaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge3JzZXQsIGZzZXR9O1xuICAgIH1cblxuICAgIGl0ZW1zKGNpLCBnZXRDZWxsKSB7XG4gICAgICAgIGNvbnN0IG0gPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHtzcmksIGVyaX0gPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgICAgICBmb3IgKGxldCByaSA9IHNyaSArIDE7IHJpIDw9IGVyaTsgcmkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBnZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwgIT09IG51bGwgJiYgIS9eXFxzKiQvLnRlc3QoY2VsbC50ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBjZWxsLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIG1ba2V5XSA9IChtW2tleV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1bJyddID0gKG1bJyddIHx8IDApICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgcmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiBDZWxsUmFuZ2UudmFsdWVPZih0aGlzLnJlZik7XG4gICAgfVxuXG4gICAgaHJhbmdlKCkge1xuICAgICAgICBjb25zdCByID0gdGhpcy5yYW5nZSgpO1xuICAgICAgICByLmVyaSA9IHIuc3JpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5yZWYgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5zb3J0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZiAhPT0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDZWxsUmFuZ2UgfSBmcm9tICcuL2NlbGxfcmFuZ2UnO1xuXG5jbGFzcyBNZXJnZXMge1xuICBjb25zdHJ1Y3RvcihkID0gW10pIHtcbiAgICB0aGlzLl8gPSBkO1xuICB9XG5cbiAgZm9yRWFjaChjYikge1xuICAgIHRoaXMuXy5mb3JFYWNoKGNiKTtcbiAgfVxuXG4gIGVhY2goY2IpIHtcbiAgICAgIHRoaXMuXy5mb3JFYWNoKGl0ID0+IGNiKGl0KSk7XG4gIH1cblxuICBkZWxldGVXaXRoaW4oY3IpIHtcbiAgICB0aGlzLl8gPSB0aGlzLl8uZmlsdGVyKGl0ID0+ICFpdC53aXRoaW4oY3IpKTtcbiAgfVxuXG4gIGdldEZpcnN0SW5jbHVkZXMocmksIGNpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl8ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGl0ID0gdGhpcy5fW2ldO1xuICAgICAgaWYgKGl0LmluY2x1ZGVzKHJpLCBjaSkpIHtcbiAgICAgICAgcmV0dXJuIGl0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZpbHRlckludGVyc2VjdHMoY2VsbFJhbmdlKSB7XG4gICAgcmV0dXJuIG5ldyBNZXJnZXModGhpcy5fLmZpbHRlcihpdCA9PiBpdC5pbnRlcnNlY3RzKGNlbGxSYW5nZSkpKTtcbiAgfVxuXG4gIGludGVyc2VjdHMoY2VsbFJhbmdlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl8ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGl0ID0gdGhpcy5fW2ldO1xuICAgICAgaWYgKGl0LmludGVyc2VjdHMoY2VsbFJhbmdlKSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnaW50ZXJzZWN0cycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdW5pb24oY2VsbFJhbmdlKSB7XG4gICAgbGV0IGNyID0gY2VsbFJhbmdlO1xuICAgIHRoaXMuXy5mb3JFYWNoKChpdCkgPT4ge1xuICAgICAgaWYgKGl0LmludGVyc2VjdHMoY3IpKSB7XG4gICAgICAgIGNyID0gaXQudW5pb24oY3IpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjcjtcbiAgfVxuXG4gIGFkZChjcikge1xuICAgIHRoaXMuZGVsZXRlV2l0aGluKGNyKTtcbiAgICB0aGlzLl8ucHVzaChjcik7XG4gIH1cblxuICAvLyB0eXBlOiByb3cgfCBjb2x1bW5cbiAgc2hpZnQodHlwZSwgaW5kZXgsIG4sIGNiV2l0aGluKSB7XG4gICAgdGhpcy5fLmZvckVhY2goKGNlbGxSYW5nZSkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgICB9ID0gY2VsbFJhbmdlO1xuICAgICAgY29uc3QgcmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICBpZiAodHlwZSA9PT0gJ3JvdycpIHtcbiAgICAgICAgaWYgKHNyaSA+PSBpbmRleCkge1xuICAgICAgICAgIHJhbmdlLnNyaSArPSBuO1xuICAgICAgICAgIHJhbmdlLmVyaSArPSBuO1xuICAgICAgICB9IGVsc2UgaWYgKHNyaSA8IGluZGV4ICYmIGluZGV4IDw9IGVyaSkge1xuICAgICAgICAgIHJhbmdlLmVyaSArPSBuO1xuICAgICAgICAgIGNiV2l0aGluKHNyaSwgc2NpLCBuLCAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY29sdW1uJykge1xuICAgICAgICBpZiAoc2NpID49IGluZGV4KSB7XG4gICAgICAgICAgcmFuZ2Uuc2NpICs9IG47XG4gICAgICAgICAgcmFuZ2UuZWNpICs9IG47XG4gICAgICAgIH0gZWxzZSBpZiAoc2NpIDwgaW5kZXggJiYgaW5kZXggPD0gZWNpKSB7XG4gICAgICAgICAgcmFuZ2UuZWNpICs9IG47XG4gICAgICAgICAgY2JXaXRoaW4oc3JpLCBzY2ksIDAsIG4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtb3ZlKGNlbGxSYW5nZSwgcm4sIGNuKSB7XG4gICAgdGhpcy5fLmZvckVhY2goKGl0MSkgPT4ge1xuICAgICAgY29uc3QgaXQgPSBpdDE7XG4gICAgICBpZiAoaXQud2l0aGluKGNlbGxSYW5nZSkpIHtcbiAgICAgICAgaXQuZXJpICs9IHJuO1xuICAgICAgICBpdC5zcmkgKz0gcm47XG4gICAgICAgIGl0LnNjaSArPSBjbjtcbiAgICAgICAgaXQuZWNpICs9IGNuO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0RGF0YShtZXJnZXMpIHtcbiAgICB0aGlzLl8gPSBtZXJnZXMubWFwKG1lcmdlID0+IENlbGxSYW5nZS52YWx1ZU9mKG1lcmdlKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXREYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl8ubWFwKG1lcmdlID0+IG1lcmdlLnRvU3RyaW5nKCkpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIE1lcmdlcyxcbn07XG4iLCJpbXBvcnQgQ2VsbFJhbmdlIGZyb20gXCIuL2NlbGxfcmFuZ2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFzdGVQcm94eSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3JjQ2VsbFJhbmdlID0gXCJcIjtcbiAgICAgICAgdGhpcy5kc3RDZWxsUmFuZ2UgPSBcIlwiO1xuICAgICAgICB0aGlzLnNyY09uZURSYW5nZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuZHN0T25lRFJhbmdlID0gXCJcIjtcbiAgICB9XG5cbiAgICBzZXRTcmNBbmREc3RDZWxsUmFuZ2Uoc3JjQ2VsbFJhbmdlLCBkc3RDZWxsUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5zcmNDZWxsUmFuZ2UgPSBzcmNDZWxsUmFuZ2U7XG4gICAgICAgIHRoaXMuZHN0Q2VsbFJhbmdlID0gZHN0Q2VsbFJhbmdlO1xuICAgIH1cblxuICAgIHVzZSgpIHtcbiAgICAgICAgbGV0IHtzcmNDZWxsUmFuZ2UsIGRzdENlbGxSYW5nZX0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzcmksIHNjaSwgZXJpLCBlY2ksXG4gICAgICAgIH0gPSBzcmNDZWxsUmFuZ2U7XG5cbiAgICAgICAgY29uc3QgZHNyaSA9IGRzdENlbGxSYW5nZS5zcmk7XG4gICAgICAgIGNvbnN0IGRzY2kgPSBkc3RDZWxsUmFuZ2Uuc2NpO1xuICAgICAgICBjb25zdCBkZXJpID0gZHN0Q2VsbFJhbmdlLmVyaTtcbiAgICAgICAgY29uc3QgZGVjaSA9IGRzdENlbGxSYW5nZS5lY2k7XG4gICAgICAgIGNvbnN0IFtybiwgY25dID0gc3JjQ2VsbFJhbmdlLnNpemUoKTtcbiAgICAgICAgY29uc3QgW2RybiwgZGNuXSA9IGRzdENlbGxSYW5nZS5zaXplKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSwgZHNyaSwgZHNjaSwgZGVyaSwgZGVjaSwgcm4sIGNuLCBkcm4sIGRjblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXV0b0ZpbHRlckRpcmVjdGlvbigpIHtcbiAgICAgICAgbGV0IHtzcmksIGRzcmksIGRlcmksIGVyaX0gPSB0aGlzLnVzZSgpO1xuXG4gICAgICAgIGxldCBpc0xlZnRSaWdodCA9IGZhbHNlOyAvLyDor4bliKvmlrnlkJEgIOS4iuS4i2ZhbHNl44CB5bem5Y+zdHJ1ZVxuICAgICAgICBpZiAoc3JpID09PSBkc3JpICYmIGRlcmkgPT09IGVyaSkge1xuICAgICAgICAgICAgaXNMZWZ0UmlnaHQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzTGVmdFJpZ2h0O1xuICAgIH1cblxuICAgIHVwT3JEb3duKCkge1xuICAgICAgICBsZXQge2RlcmksIHNyaSwgZGVjaSwgc2NpLH0gPSB0aGlzLnVzZSgpO1xuICAgICAgICBsZXQgaXNEb3duID0gdHJ1ZTsgICAgICAgLy8g5b6A5LiK5pivZmFsc2UsIOW+gOS4i+aYr3RydWUgICAgIC8vIGlzRG93blxuICAgICAgICBpZiAoZGVyaSA8IHNyaSB8fCBkZWNpIDwgc2NpKSB7XG4gICAgICAgICAgICBpc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0Rvd247XG4gICAgfVxuXG4gICAgbGVmdE9yUmlnaHQoKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBzcmNPbmVEUmFuZ2UsXG4gICAgICAgICAgICBkc3RPbmVEUmFuZ2VcbiAgICAgICAgfSA9IHRoaXMuZ2V0UmFuZ2VCeVdheSgpO1xuXG4gICAgICAgIGxldCBsaW5lID0gMTsgICAgICAgLy8g5b6A5bem5b6A5Y+zXG4gICAgICAgIGlmIChzcmNPbmVEUmFuZ2Uuc3JpID09PSBzcmNPbmVEUmFuZ2UuZXJpICYmIGRzdE9uZURSYW5nZS5lY2kgPiBzcmNPbmVEUmFuZ2UuZWNpKSB7XG4gICAgICAgICAgICBsaW5lID0gMjsgICAgICAgLy8g5b6A5Y+zXG4gICAgICAgIH0gZWxzZSBpZiAoc3JjT25lRFJhbmdlLnNyaSA9PT0gc3JjT25lRFJhbmdlLmVyaSAmJiBkc3RPbmVEUmFuZ2UuZWNpIDwgc3JjT25lRFJhbmdlLmVjaSkge1xuICAgICAgICAgICAgbGluZSA9IDM7ICAgICAgIC8vIOW+gOW3plxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cblxuICAgIGdldE9uZURSYW5nZU9iaih3YXksIG9mZnNldCkge1xuICAgICAgICBsZXQge3NyaSwgc2NpLCBlcmksIGVjaSwgZHNyaSwgZHNjaSwgZGVyaSwgZGVjaX0gPSB0aGlzLnVzZSgpO1xuXG4gICAgICAgIGlmICghd2F5KSB7XG4gICAgICAgICAgICB0aGlzLnNyY09uZURSYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2kgKyBvZmZzZXQsIGVyaSwgc2NpICsgb2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMuZHN0T25lRFJhbmdlID0gbmV3IENlbGxSYW5nZShkc3JpLCBkc2NpICsgb2Zmc2V0LCBkZXJpLCBkc2NpICsgb2Zmc2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3JjT25lRFJhbmdlID0gbmV3IENlbGxSYW5nZShzcmkgKyBvZmZzZXQsIHNjaSwgc3JpICsgb2Zmc2V0LCBlY2kpO1xuICAgICAgICAgICAgdGhpcy5kc3RPbmVEUmFuZ2UgPSBuZXcgQ2VsbFJhbmdlKGRzcmkgKyBvZmZzZXQsIGRzY2ksIGRzcmkgKyBvZmZzZXQsIGRlY2kpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmFuZ2VCeVdheSgpO1xuICAgIH1cblxuICAgIGdldFJhbmdlQnlXYXkoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInNyY09uZURSYW5nZVwiOiB0aGlzLnNyY09uZURSYW5nZSxcbiAgICAgICAgICAgIFwiZHN0T25lRFJhbmdlXCI6IHRoaXMuZHN0T25lRFJhbmdlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0b2RvIOS7gOS5iOaEj+aAnVxuICAgIC8vIGlzQ29weShzYXJyLCBpKSB7XG4gICAgLy8gICAgIGxldCB7c3JpLCBzY2ksIGVyaX0gPSB0aGlzLnVzZSgpO1xuICAgIC8vICAgICBsZXQgaXNDb3B5ID0gZmFsc2U7XG4gICAgLy8gICAgIGlmIChzYXJyLmxlbmd0aCA+IDEpIHtcbiAgICAvLyAgICAgICAgIGlzQ29weSA9IHRydWU7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYgKHNyaSA9PT0gZXJpICYmIHNjaSArIGkgPT09IHNjaSArIGkpIHtcbiAgICAvLyAgICAgICAgIGlzQ29weSA9IHRydWU7XG4gICAgLy8gICAgIH1cbiAgICAvL1xuICAgIC8vICAgICByZXR1cm4gaXNDb3B5O1xuICAgIC8vIH1cblxuICAgIGNhbGNEaWZmKHNhcnIsIGlzQWRkKSB7XG4gICAgICAgIGxldCBkaWZmVmFsdWUgPSAxO1xuXG4gICAgICAgIGlmICghaXNBZGQpIHtcbiAgICAgICAgICAgIGRpZmZWYWx1ZSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNBZGQgJiYgc2Fyci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgbGFzdDIgPSBzYXJyW3NhcnIubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICBsZXQgbGFzdDEgPSBzYXJyW3NhcnIubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBkaWZmVmFsdWUgPSBsYXN0MS50ZXh0ICogMSAtIGxhc3QyLnRleHQgKiAxO1xuICAgICAgICB9IGVsc2UgaWYgKHNhcnIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGV0IGxhc3QyID0gc2FyclsxXTtcbiAgICAgICAgICAgIGxldCBsYXN0MSA9IHNhcnJbMF07XG4gICAgICAgICAgICBkaWZmVmFsdWUgPSBsYXN0MS50ZXh0ICogMSAtIGxhc3QyLnRleHQgKiAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoaXNOYU4oZGlmZlZhbHVlKSkge1xuICAgICAgICAgICAgZGlmZlZhbHVlID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaWZmVmFsdWU7XG4gICAgfVxufSIsImltcG9ydCB7aXNIYXZlfSBmcm9tIFwiLi4vaGVscGVyL2NoZWNrX3ZhbHVlXCI7XG5cblxuLyoqXG4gKiBDZWxs57G777yM5Luj6KGo5LiA5Liq5Y2V5YWD5qC855qE5pWw5o2u5qC85byP44CCXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGwge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB0ZXh0IC0g5Y2V5YWD5qC855qE5paH5pys44CCXG4gICAgICogQHBhcmFtIGZvcm11bGFzIC0g5Y2V5YWD5qC855qE5YWs5byPXG4gICAgICogQHBhcmFtIHN0eWxlIC0g5Y2V5YWD5qC855qE5qC35byPLCDlpoLmnpzkuLpudWxsLOWImeihqOekuuaYr+m7mOiupOagt+W8j1xuICAgICAqIEBwYXJhbSBkZXBlbmQgLSDlhbbku5bljZXlhYPmoLzkvp3otZZcbiAgICAgKiBAcGFyYW0gbWVyZ2UgLSDkuLpudWxs6KGo56S65LiN5piv5ZCI5bm25Y2V5YWD5qC877yM5ZCm5YiZ5Li65LiA5Liq5ZCI5bm25Y2V5YWD5qC8XG4gICAgICogQHBhcmFtIGZvcm1hdFRleHQgLSDljZXlhYPmoLznmoTmoLzlvI/vvIzoi6XkuLpudWxs77yM5YiZ6KGo5piO5rKh5pyJ5qC85byPXG4gICAgICogQHBhcmFtIG11bHRpdmFsdWVSZWZzQ2VsbCAtIOeUqOadpeagh+iusOWkmuWAvOWNleWFg+agvFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlcGVuZCA9IFtdO1xuICAgICAgICB0aGlzLmZvcm11bGFzID0gXCJcIjtcblxuICAgICAgICB0aGlzLnN0eWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5tZXJnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9ybWF0VGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMubXVsdGl2YWx1ZVJlZnNDZWxsID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb3VyY2VfdiA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6K6+572u5Y2V5YWD5qC85L+h5oGvXG4gICAgICovXG4gICAgc2V0Q2VsbChjZWxsKSB7XG4gICAgICAgIGlmICghaXNIYXZlKGNlbGwpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIYXZlKGNlbGwudGV4dCkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IGNlbGwudGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hhdmUoY2VsbC5mb3JtdWxhcykpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybXVsYXMgPSBjZWxsLmZvcm11bGFzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoaXNIYXZlKGNlbGwuZm9ybWF0VGV4dCkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0VGV4dCA9IGNlbGwuZm9ybWF0VGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hhdmUoY2VsbC5kZXBlbmQpKSB7XG4gICAgICAgICAgICB0aGlzLmRlcGVuZCA9IGNlbGwuZGVwZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSGF2ZShjZWxsLnN0eWxlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHlsZSA9IGNlbGwuc3R5bGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIYXZlKGNlbGwubXVsdGl2YWx1ZVJlZnNDZWxsKSkge1xuICAgICAgICAgICAgdGhpcy5tdWx0aXZhbHVlUmVmc0NlbGwgPSBjZWxsLm11bHRpdmFsdWVSZWZzQ2VsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hhdmUoY2VsbC5tZXJnZSkpIHtcbiAgICAgICAgICAgIHRoaXMubWVyZ2UgPSBjZWxsLm1lcmdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSGF2ZShjZWxsLnNvdXJjZV92KSkge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VfdiA9IGNlbGwuc291cmNlX3Y7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorr7nva7ljZXlhYPmoLznmoTmoLzlvI9cbiAgICAgKiBAcGFyYW0gYXJncyBhcmdzLnN0YXRlIOS4unRydWXooajnpLrlrZjlnKjmoLzlvI/vvIzkuLpmYWxzZeS4jeWtmOWcqOagvOW8jywgdGV4dCDlhbfkvZPmoLzlvI/kv6Hmga9cbiAgICAgKi9cbiAgICBzZXRGb3JtYXRUZXh0KGFyZ3MpIHtcbiAgICAgICAgaWYoYXJncy5zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXRUZXh0ID0gYXJncy50ZXh0O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtyYW5nZVN1bX0gZnJvbSAnLi4vaGVscGVyL2RhdGFwcm94eV9oZWxwZXInO1xuXG5jbGFzcyBDb2xzIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGxlbiwgd2lkdGgsIGluZGV4V2lkdGgsIG1pbldpZHRoLFxuICB9KSB7XG4gICAgdGhpcy5fID0ge307XG4gICAgdGhpcy5sZW4gPSBsZW47XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaW5kZXhXaWR0aCA9IGluZGV4V2lkdGg7XG4gICAgdGhpcy5taW5XaWR0aCA9IG1pbldpZHRoO1xuICB9XG5cbiAgc2V0RGF0YShkKSB7XG4gICAgaWYgKGQubGVuKSB7XG4gICAgICB0aGlzLmxlbiA9IGQubGVuO1xuICAgICAgZGVsZXRlIGQubGVuO1xuICAgIH1cbiAgICB0aGlzLl8gPSBkO1xuICB9XG5cbiAgZ2V0RGF0YSgpIHtcbiAgICBjb25zdCB7IGxlbiB9ID0gdGhpcztcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IGxlbiB9LCB0aGlzLl8pO1xuICB9XG5cbiAgZ2V0V2lkdGgoaSkge1xuICAgIGNvbnN0IGNvbCA9IHRoaXMuX1tpXTtcbiAgICBpZiAoY29sICYmIGNvbC53aWR0aCkge1xuICAgICAgcmV0dXJuIGNvbC53aWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMud2lkdGg7XG4gIH1cblxuICBnZXRPck5ldyhjaSkge1xuICAgIHRoaXMuX1tjaV0gPSB0aGlzLl9bY2ldIHx8IHt9O1xuICAgIHJldHVybiB0aGlzLl9bY2ldO1xuICB9XG5cbiAgc2V0V2lkdGgoY2ksIHdpZHRoKSB7XG4gICAgY29uc3QgY29sID0gdGhpcy5nZXRPck5ldyhjaSk7XG4gICAgY29sLndpZHRoID0gd2lkdGg7XG4gIH1cblxuICAvLyBzZXRTdHlsZShjaSwgc3R5bGUpIHtcbiAgLy8gICBjb25zdCBjb2wgPSB0aGlzLmdldE9yTmV3KGNpKTtcbiAgLy8gICBjb2wuc3R5bGUgPSBzdHlsZTtcbiAgLy8gfVxuXG4gIHN1bVdpZHRoKG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHJhbmdlU3VtKG1pbiwgbWF4LCBpID0+IHRoaXMuZ2V0V2lkdGgoaSkpO1xuICB9XG5cbiAgdG90YWxXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdW1XaWR0aCgwLCB0aGlzLmxlbik7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgQ29scyxcbn07XG4iLCJpbXBvcnQgVmFsaWRhdG9yIGZyb20gJy4vdmFsaWRhdG9yJztcbmltcG9ydCB7IENlbGxSYW5nZSB9IGZyb20gJy4vY2VsbF9yYW5nZSc7XG5cbmNsYXNzIFZhbGlkYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihtb2RlLCByZWZzLCB2YWxpZGF0b3IpIHtcbiAgICB0aGlzLnJlZnMgPSByZWZzO1xuICAgIHRoaXMubW9kZSA9IG1vZGU7IC8vIGNlbGxcbiAgICB0aGlzLnZhbGlkYXRvciA9IHZhbGlkYXRvcjtcbiAgfVxuXG4gIGluY2x1ZGVzKHJpLCBjaSkge1xuICAgIGNvbnN0IHsgcmVmcyB9ID0gdGhpcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGNyID0gQ2VsbFJhbmdlLnZhbHVlT2YocmVmc1tpXSk7XG4gICAgICBpZiAoY3IuaW5jbHVkZXMocmksIGNpKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGFkZFJlZihyZWYpIHtcbiAgICB0aGlzLnJlbW92ZShDZWxsUmFuZ2UudmFsdWVPZihyZWYpKTtcbiAgICB0aGlzLnJlZnMucHVzaChyZWYpO1xuICB9XG5cbiAgcmVtb3ZlKGNlbGxSYW5nZSkge1xuICAgIGNvbnN0IG5yZWZzID0gW107XG4gICAgdGhpcy5yZWZzLmZvckVhY2goKGl0KSA9PiB7XG4gICAgICBjb25zdCBjciA9IENlbGxSYW5nZS52YWx1ZU9mKGl0KTtcbiAgICAgIGlmIChjci5pbnRlcnNlY3RzKGNlbGxSYW5nZSkpIHtcbiAgICAgICAgY29uc3QgY3JzID0gY3IuZGlmZmVyZW5jZShjZWxsUmFuZ2UpO1xuICAgICAgICBjcnMuZm9yRWFjaChpdDEgPT4gbnJlZnMucHVzaChpdDEudG9TdHJpbmcoKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbnJlZnMucHVzaChpdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5yZWZzID0gbnJlZnM7XG4gIH1cblxuICBnZXREYXRhKCkge1xuICAgIGNvbnN0IHsgcmVmcywgbW9kZSwgdmFsaWRhdG9yIH0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsIHJlcXVpcmVkLCBvcGVyYXRvciwgdmFsdWUsXG4gICAgfSA9IHZhbGlkYXRvcjtcbiAgICByZXR1cm4ge1xuICAgICAgcmVmcywgbW9kZSwgdHlwZSwgcmVxdWlyZWQsIG9wZXJhdG9yLCB2YWx1ZSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHZhbHVlT2Yoe1xuICAgIHJlZnMsIG1vZGUsIHR5cGUsIHJlcXVpcmVkLCBvcGVyYXRvciwgdmFsdWUsXG4gIH0pIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRpb24obW9kZSwgcmVmcywgbmV3IFZhbGlkYXRvcih0eXBlLCByZXF1aXJlZCwgdmFsdWUsIG9wZXJhdG9yKSk7XG4gIH1cbn1cbmNsYXNzIFZhbGlkYXRpb25zIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fID0gW107XG4gICAgLy8gcmlfY2k6IGVyck1lc3NhZ2VcbiAgICB0aGlzLmVycm9ycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGdldEVycm9yKHJpLCBjaSkge1xuICAgIHJldHVybiB0aGlzLmVycm9ycy5nZXQoYCR7cml9XyR7Y2l9YCk7XG4gIH1cblxuICB2YWxpZGF0ZShyaSwgY2ksIHRleHQpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5nZXQocmksIGNpKTtcbiAgICBjb25zdCBrZXkgPSBgJHtyaX1fJHtjaX1gO1xuICAgIGNvbnN0IHsgZXJyb3JzIH0gPSB0aGlzO1xuICAgIGlmICh2ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBbZmxhZywgbWVzc2FnZV0gPSB2LnZhbGlkYXRvci52YWxpZGF0ZSh0ZXh0KTtcbiAgICAgIGlmICghZmxhZykge1xuICAgICAgICBlcnJvcnMuc2V0KGtleSwgbWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9ycy5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB0eXBlOiBkYXRlfG51bWJlcnxwaG9uZXxlbWFpbHxsaXN0XG4gIC8vIHZhbGlkYXRvcjogeyByZXF1aXJlZCwgdmFsdWUsIG9wZXJhdG9yIH1cbiAgYWRkKG1vZGUsIHJlZiwge1xuICAgIHR5cGUsIHJlcXVpcmVkLCB2YWx1ZSwgb3BlcmF0b3IsXG4gIH0pIHtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKFxuICAgICAgdHlwZSwgcmVxdWlyZWQsIHZhbHVlLCBvcGVyYXRvcixcbiAgICApO1xuICAgIGNvbnN0IHYgPSB0aGlzLmdldEJ5VmFsaWRhdG9yKHZhbGlkYXRvcik7XG4gICAgaWYgKHYgIT09IG51bGwpIHtcbiAgICAgIHYuYWRkUmVmKHJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuXy5wdXNoKG5ldyBWYWxpZGF0aW9uKG1vZGUsIFtyZWZdLCB2YWxpZGF0b3IpKTtcbiAgICB9XG4gIH1cblxuICBnZXRCeVZhbGlkYXRvcih2YWxpZGF0b3IpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuXy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgdiA9IHRoaXMuX1tpXTtcbiAgICAgIGlmICh2LnZhbGlkYXRvci5lcXVhbHModmFsaWRhdG9yKSkge1xuICAgICAgICByZXR1cm4gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXQocmksIGNpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl8ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLl9baV07XG4gICAgICBpZiAodi5pbmNsdWRlcyhyaSwgY2kpKSByZXR1cm4gdjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW1vdmUoY2VsbFJhbmdlKSB7XG4gICAgdGhpcy5lYWNoKChpdCkgPT4ge1xuICAgICAgaXQucmVtb3ZlKGNlbGxSYW5nZSk7XG4gICAgfSk7XG4gIH1cblxuICBlYWNoKGNiKSB7XG4gICAgdGhpcy5fLmZvckVhY2goaXQgPT4gY2IoaXQpKTtcbiAgfVxuXG4gIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuXy5maWx0ZXIoaXQgPT4gaXQucmVmcy5sZW5ndGggPiAwKS5tYXAoaXQgPT4gaXQuZ2V0RGF0YSgpKTtcbiAgfVxuXG4gIHNldERhdGEoZCkge1xuICAgIHRoaXMuXyA9IGQubWFwKGl0ID0+IFZhbGlkYXRpb24udmFsdWVPZihpdCkpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIFZhbGlkYXRpb25zLFxufTtcbiIsImltcG9ydCB7IHQgfSBmcm9tICcuLi9sb2NhbGUvbG9jYWxlJztcbmltcG9ydCAge2FycmF5RXF1YWxzfSBmcm9tICcuLi9oZWxwZXIvZGF0YXByb3h5X2hlbHBlcic7XG5cbmNvbnN0IHJ1bGVzID0ge1xuICBwaG9uZTogL15bMS05XVxcZHsxMH0kLyxcbiAgZW1haWw6IC93KyhbLSsuXXcrKSpAdysoWy0uXXcrKSoudysoWy0uXXcrKSovLFxufTtcblxuZnVuY3Rpb24gcmV0dXJuTWVzc2FnZShmbGFnLCBrZXksIC4uLmFyZykge1xuICBsZXQgbWVzc2FnZSA9ICcnO1xuICBpZiAoIWZsYWcpIHtcbiAgICBtZXNzYWdlID0gdChgdmFsaWRhdGlvbi4ke2tleX1gLCAuLi5hcmcpO1xuICB9XG4gIHJldHVybiBbZmxhZywgbWVzc2FnZV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbGlkYXRvciB7XG4gIC8vIG9wZXJhdG9yOiBifG5ifGVxfG5lcXxsdHxsdGV8Z3R8Z3RlXG4gIC8vIHR5cGU6IGRhdGV8bnVtYmVyfGxpc3R8cGhvbmV8ZW1haWxcbiAgY29uc3RydWN0b3IodHlwZSwgcmVxdWlyZWQsIHZhbHVlLCBvcGVyYXRvcikge1xuICAgIHRoaXMucmVxdWlyZWQgPSByZXF1aXJlZDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgdGhpcy5tZXNzYWdlID0gJyc7XG4gIH1cblxuICBwYXJzZVZhbHVlKHYpIHtcbiAgICBjb25zdCB7IHR5cGUgfSA9IHRoaXM7XG4gICAgaWYgKHR5cGUgPT09ICdkYXRlJykge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHYpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBOdW1iZXIodik7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgbGV0IGZsYWcgPSB0aGlzLnR5cGUgPT09IG90aGVyLnR5cGVcbiAgICAgICYmIHRoaXMucmVxdWlyZWQgPT09IG90aGVyLnJlcXVpcmVkXG4gICAgICAmJiB0aGlzLm9wZXJhdG9yID09PSBvdGhlci5vcGVyYXRvcjtcbiAgICBpZiAoZmxhZykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgZmxhZyA9IGFycmF5RXF1YWxzKHRoaXMudmFsdWUsIG90aGVyLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZsYWcgPSB0aGlzLnZhbHVlID09PSBvdGhlci52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZsYWc7XG4gIH1cblxuICB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUuc3BsaXQoJywnKTtcbiAgfVxuXG4gIHZhbGlkYXRlKHYpIHtcbiAgICBjb25zdCB7XG4gICAgICByZXF1aXJlZCwgb3BlcmF0b3IsIHZhbHVlLCB0eXBlLFxuICAgIH0gPSB0aGlzO1xuICAgIGlmIChyZXF1aXJlZCAmJiAvXlxccyokLy50ZXN0KHYpKSB7XG4gICAgICByZXR1cm4gcmV0dXJuTWVzc2FnZShmYWxzZSwgJ3JlcXVpcmVkJyk7XG4gICAgfVxuICAgIGlmICgvXlxccyokLy50ZXN0KHYpKSByZXR1cm4gW3RydWVdO1xuICAgIGlmIChydWxlc1t0eXBlXSAmJiAhcnVsZXNbdHlwZV0udGVzdCh2KSkge1xuICAgICAgcmV0dXJuIHJldHVybk1lc3NhZ2UoZmFsc2UsICdub3RNYXRjaCcpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2xpc3QnKSB7XG4gICAgICByZXR1cm4gcmV0dXJuTWVzc2FnZSh0aGlzLnZhbHVlcygpLmluY2x1ZGVzKHYpLCAnbm90SW4nKTtcbiAgICB9XG4gICAgaWYgKG9wZXJhdG9yKSB7XG4gICAgICBjb25zdCB2MSA9IHRoaXMucGFyc2VWYWx1ZSh2KTtcbiAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2JlJykge1xuICAgICAgICBjb25zdCBbbWluLCBtYXhdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiByZXR1cm5NZXNzYWdlKFxuICAgICAgICAgIHYxID49IHRoaXMucGFyc2VWYWx1ZShtaW4pICYmIHYxIDw9IHRoaXMucGFyc2VWYWx1ZShtYXgpLFxuICAgICAgICAgICdiZXR3ZWVuJyxcbiAgICAgICAgICBtaW4sXG4gICAgICAgICAgbWF4LFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnbmJlJykge1xuICAgICAgICBjb25zdCBbbWluLCBtYXhdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiByZXR1cm5NZXNzYWdlKFxuICAgICAgICAgIHYxIDwgdGhpcy5wYXJzZVZhbHVlKG1pbikgfHwgdjEgPiB0aGlzLnBhcnNlVmFsdWUobWF4KSxcbiAgICAgICAgICAnbm90QmV0d2VlbicsXG4gICAgICAgICAgbWluLFxuICAgICAgICAgIG1heCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2VxJykge1xuICAgICAgICByZXR1cm4gcmV0dXJuTWVzc2FnZShcbiAgICAgICAgICB2MSA9PT0gdGhpcy5wYXJzZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgICAnZXF1YWwnLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnbmVxJykge1xuICAgICAgICByZXR1cm4gcmV0dXJuTWVzc2FnZShcbiAgICAgICAgICB2MSAhPT0gdGhpcy5wYXJzZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgICAnbm90RXF1YWwnLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnbHQnKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5NZXNzYWdlKFxuICAgICAgICAgIHYxIDwgdGhpcy5wYXJzZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgICAnbGVzc1RoYW4nLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnbHRlJykge1xuICAgICAgICByZXR1cm4gcmV0dXJuTWVzc2FnZShcbiAgICAgICAgICB2MSA8PSB0aGlzLnBhcnNlVmFsdWUodmFsdWUpLFxuICAgICAgICAgICdsZXNzVGhhbkVxdWFsJyxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2d0Jykge1xuICAgICAgICByZXR1cm4gcmV0dXJuTWVzc2FnZShcbiAgICAgICAgICB2MSA+IHRoaXMucGFyc2VWYWx1ZSh2YWx1ZSksXG4gICAgICAgICAgJ2dyZWF0ZXJUaGFuJyxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2d0ZScpIHtcbiAgICAgICAgcmV0dXJuIHJldHVybk1lc3NhZ2UoXG4gICAgICAgICAgdjEgPj0gdGhpcy5wYXJzZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgICAnZ3JlYXRlclRoYW5FcXVhbCcsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbdHJ1ZV07XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0b29sYmFyOiB7XG4gICAgICAgIHVuZG86ICdVbmRvJyxcbiAgICAgICAgcmVkbzogJ1JlZG8nLFxuICAgICAgICBwYWludGZvcm1hdDogJ1BhaW50IGZvcm1hdCcsXG4gICAgICAgIGNsZWFyZm9ybWF0OiAnQ2xlYXIgZm9ybWF0JyxcbiAgICAgICAgZm9ybWF0OiAnRm9ybWF0JyxcbiAgICAgICAgZm9udDogJ0ZvbnQnLFxuICAgICAgICBmb250U2l6ZTogJ0ZvbnQgc2l6ZScsXG4gICAgICAgIGZvbnRCb2xkOiAnRm9udCBib2xkJyxcbiAgICAgICAgZm9udEl0YWxpYzogJ0ZvbnQgaXRhbGljJyxcbiAgICAgICAgdW5kZXJsaW5lOiAnVW5kZXJsaW5lJyxcbiAgICAgICAgc3RyaWtlOiAnU3RyaWtlJyxcbiAgICAgICAgdGV4dENvbG9yOiAnVGV4dCBjb2xvcicsXG4gICAgICAgIGZpbGxDb2xvcjogJ0ZpbGwgY29sb3InLFxuICAgICAgICBib3JkZXI6ICdCb3JkZXJzJyxcbiAgICAgICAgbWVyZ2U6ICdNZXJnZSBjZWxscycsXG4gICAgICAgIGFsaWduOiAnSG9yaXpvbnRhbCBhbGlnbicsXG4gICAgICAgIHZhbGlnbjogJ1ZlcnRpY2FsIGFsaWduJyxcbiAgICAgICAgdGV4dHdyYXA6ICdUZXh0IHdyYXBwaW5nJyxcbiAgICAgICAgZnJlZXplOiAnRnJlZXplIGNlbGwnLFxuICAgICAgICBhZGQ6ICdkaXNwbGF5IGVxdWF0aW9uJyxcbiAgICAgICAgYXV0b2ZpbHRlcjogJ0ZpbHRlcicsXG4gICAgICAgIGZvcm11bGE6ICdGdW5jdGlvbnMnLFxuICAgICAgICBtb3JlOiAnTW9yZScsXG4gICAgICAgIGZsZXhpYmxlOiAnRmxleGlibGUnLFxuICAgICAgICB0aHJvd0Zvcm11bGE6ICdUaHJvdyBmb3JtdWxhcycsXG4gICAgICAgIGNvbWVCYWNrOiAnY29tZSBiYWNrJyxcbiAgICB9LFxuICAgIGNvbnRleHRtZW51OiB7XG4gICAgICAgIGNvcHk6ICdDb3B5JyxcbiAgICAgICAgY3V0OiAnQ3V0JyxcbiAgICAgICAgcGFzdGU6ICdQYXN0ZScsXG4gICAgICAgIHBhc3RlVmFsdWU6ICdQYXN0ZSB2YWx1ZXMgb25seScsXG4gICAgICAgIHBhc3RlRm9ybWF0OiAnUGFzdGUgZm9ybWF0IG9ubHknLFxuICAgICAgICBpbnNlcnRSb3c6ICdJbnNlcnQgcm93JyxcbiAgICAgICAgaW5zZXJ0Q29sdW1uOiAnSW5zZXJ0IGNvbHVtbicsXG4gICAgICAgIGRlbGV0ZVJvdzogJ0RlbGV0ZSByb3cnLFxuICAgICAgICBkZWxldGVDb2x1bW46ICdEZWxldGUgY29sdW1uJyxcbiAgICAgICAgZGVsZXRlQ2VsbDogJ0RlbGV0ZSBjZWxsJyxcbiAgICAgICAgZGVsZXRlQ2VsbFRleHQ6ICdEZWxldGUgY2VsbCB0ZXh0JyxcbiAgICAgICAgdmFsaWRhdGlvbjogJ0RhdGEgdmFsaWRhdGlvbnMnLFxuICAgICAgICByZWNvdmVyOiAncmVjb3ZlcicsXG4gICAgfSxcbiAgICBmb3JtYXQ6IHtcbiAgICAgICAgbm9ybWFsOiAnTm9ybWFsJyxcbiAgICAgICAgdGV4dDogJ1BsYWluIFRleHQnLFxuICAgICAgICBudW1iZXI6ICdOdW1iZXInLFxuICAgICAgICBwZXJjZW50OiAnUGVyY2VudCcsXG4gICAgICAgIHJtYjogJ1JNQicsXG4gICAgICAgIHVzZDogJ1VTRCcsXG4gICAgICAgIGRhdGU6ICdEYXRlJyxcbiAgICAgICAgdGltZTogJ1RpbWUnLFxuICAgICAgICBkYXRldGltZTogJ0RhdGUgdGltZScsXG4gICAgICAgIGR1cmF0aW9uOiAnRHVyYXRpb24nLFxuICAgIH0sXG4gICAgZGF0ZV9mb3JtdWxhOiB7XG4gICAgICAgIHN1bTogJ1N1bScsXG4gICAgICAgIGF2ZXJhZ2U6ICdBdmVyYWdlJyxcbiAgICAgICAgbWF4OiAnTWF4JyxcbiAgICAgICAgbWluOiAnTWluJyxcbiAgICAgICAgY29uY2F0OiAnQ29uY2F0JyxcbiAgICAgICAgd2xhbmQ6ICdNRC5XTEFORCcsXG4gICAgICAgIHdmcjogJ01ELldGUicsXG4gICAgICAgIHJ0ZDogJ01ELlJURCcsXG4gICAgfSxcbiAgICB2YWxpZGF0aW9uOiB7XG4gICAgICAgIHJlcXVpcmVkOiAnaXQgbXVzdCBiZSByZXF1aXJlZCcsXG4gICAgICAgIG5vdE1hdGNoOiAnaXQgbm90IG1hdGNoIGl0cyB2YWxpZGF0aW9uIHJ1bGUnLFxuICAgICAgICBiZXR3ZWVuOiAnaXQgaXMgYmV0d2VlbiB7fSBhbmQge30nLFxuICAgICAgICBub3RCZXR3ZWVuOiAnaXQgaXMgbm90IGJldHdlZW4ge30gYW5kIHt9JyxcbiAgICAgICAgbm90SW46ICdpdCBpcyBub3QgaW4gbGlzdCcsXG4gICAgICAgIGVxdWFsOiAnaXQgZXF1YWwgdG8ge30nLFxuICAgICAgICBub3RFcXVhbDogJ2l0IG5vdCBlcXVhbCB0byB7fScsXG4gICAgICAgIGxlc3NUaGFuOiAnaXQgbGVzcyB0aGFuIHt9JyxcbiAgICAgICAgbGVzc1RoYW5FcXVhbDogJ2l0IGxlc3MgdGhhbiBvciBlcXVhbCB0byB7fScsXG4gICAgICAgIGdyZWF0ZXJUaGFuOiAnaXQgZ3JlYXRlciB0aGFuIHt9JyxcbiAgICAgICAgZ3JlYXRlclRoYW5FcXVhbDogJ2l0IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB7fScsXG4gICAgfSxcbiAgICBlcnJvcjoge1xuICAgICAgICBwYXN0ZUZvck1lcmdlZENlbGw6ICdVbmFibGUgdG8gZG8gdGhpcyBmb3IgbWVyZ2VkIGNlbGxzJyxcbiAgICB9LFxuICAgIGNhbGVuZGFyOiB7XG4gICAgICAgIHdlZWtzOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICAgICAgICBtb250aHM6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxuICAgIH0sXG4gICAgYnV0dG9uOiB7XG4gICAgICAgIGNhbmNlbDogJ0NhbmNlbCcsXG4gICAgICAgIHJlbW92ZTogJ1JlbW92ZScsXG4gICAgICAgIHNhdmU6ICdTYXZlJyxcbiAgICAgICAgb2s6ICdPSycsXG4gICAgfSxcbiAgICBzb3J0OiB7XG4gICAgICAgIGRlc2M6ICdTb3J0IFogLT4gQScsXG4gICAgICAgIGFzYzogJ1NvcnQgQSAtPiBaJyxcbiAgICB9LFxuICAgIGZpbHRlcjoge1xuICAgICAgICBlbXB0eTogJ2VtcHR5JyxcbiAgICB9LFxuICAgIGRhdGFWYWxpZGF0aW9uOiB7XG4gICAgICAgIG1vZGU6ICdNb2RlJyxcbiAgICAgICAgcmFuZ2U6ICdDZWxsIFJhbmdlJyxcbiAgICAgICAgY3JpdGVyaWE6ICdDcml0ZXJpYScsXG4gICAgICAgIG1vZGVUeXBlOiB7XG4gICAgICAgICAgICBjZWxsOiAnQ2VsbCcsXG4gICAgICAgICAgICBjb2x1bW46ICdDb2x1bicsXG4gICAgICAgICAgICByb3c6ICdSb3cnLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICBsaXN0OiAnTGlzdCcsXG4gICAgICAgICAgICBudW1iZXI6ICdOdW1iZXInLFxuICAgICAgICAgICAgZGF0ZTogJ0RhdGUnLFxuICAgICAgICAgICAgcGhvbmU6ICdQaG9uZScsXG4gICAgICAgICAgICBlbWFpbDogJ0VtYWlsJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3BlcmF0b3I6IHtcbiAgICAgICAgICAgIGJlOiAnYmV0d2VlbicsXG4gICAgICAgICAgICBuYmU6ICdub3QgYmV0d3dlbicsXG4gICAgICAgICAgICBsdDogJ2xlc3MgdGhhbicsXG4gICAgICAgICAgICBsdGU6ICdsZXNzIHRoYW4gb3IgZXF1YWwgdG8nLFxuICAgICAgICAgICAgZ3Q6ICdncmVhdGVyIHRoYW4nLFxuICAgICAgICAgICAgZ3RlOiAnZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvJyxcbiAgICAgICAgICAgIGVxOiAnZXF1YWwgdG8nLFxuICAgICAgICAgICAgbmVxOiAnbm90IGVxdWFsIHRvJyxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCB7aH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7bW91c2VNb3ZlVXB9IGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc2l6ZXIge1xuICAgIGNvbnN0cnVjdG9yKHZlcnRpY2FsID0gZmFsc2UsIG1pbkRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMubW92aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmVydGljYWwgPSB2ZXJ0aWNhbDtcbiAgICAgICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tcmVzaXplciAke3ZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJ31gKS5jaGlsZHJlbihcbiAgICAgICAgICAgIHRoaXMuaG92ZXJFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tcmVzaXplci1ob3ZlcmApXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24uc3RvcCcsIGV2dCA9PiB0aGlzLm1vdXNlZG93bkhhbmRsZXIoZXZ0KSksXG4gICAgICAgICAgICB0aGlzLmxpbmVFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tcmVzaXplci1saW5lYCkuaGlkZSgpLFxuICAgICAgICApLmhpZGUoKTtcbiAgICAgICAgLy8gY2VsbCByZWN0XG4gICAgICAgIHRoaXMuY1JlY3QgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbmlzaGVkRm4gPSBudWxsO1xuICAgICAgICB0aGlzLm1pbkRpc3RhbmNlID0gbWluRGlzdGFuY2U7XG4gICAgfVxuXG4gICAgLy8gcmVjdCA6IHt0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHR9XG4gICAgLy8gbGluZSA6IHt3aWR0aCwgaGVpZ2h0fVxuICAgIHNob3cocmVjdCwgbGluZSkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBtb3ZpbmcsIHZlcnRpY2FsLCBob3ZlckVsLCBsaW5lRWwsIGVsLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1vdmluZykgcmV0dXJuO1xuICAgICAgICB0aGlzLmNSZWN0ID0gcmVjdDtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gcmVjdDtcbiAgICAgICAgZWwub2Zmc2V0KHtcbiAgICAgICAgICAgIGxlZnQ6IHZlcnRpY2FsID8gbGVmdCArIHdpZHRoIC0gNSA6IGxlZnQsXG4gICAgICAgICAgICB0b3A6IHZlcnRpY2FsID8gdG9wIDogdG9wICsgaGVpZ2h0IC0gNSxcbiAgICAgICAgfSkuc2hvdygpO1xuICAgICAgICBob3ZlckVsLm9mZnNldCh7XG4gICAgICAgICAgICB3aWR0aDogdmVydGljYWwgPyA1IDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHZlcnRpY2FsID8gaGVpZ2h0IDogNSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmVFbC5vZmZzZXQoe1xuICAgICAgICAgICAgd2lkdGg6IHZlcnRpY2FsID8gMCA6IGxpbmUud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHZlcnRpY2FsID8gbGluZS5oZWlnaHQgOiAwLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmVsLm9mZnNldCh7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICB9KS5oaWRlKCk7XG4gICAgfVxuXG4gICAgbW91c2Vkb3duSGFuZGxlcihldnQpIHtcbiAgICAgICAgbGV0IHN0YXJ0RXZ0ID0gZXZ0O1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBlbCwgbGluZUVsLCBjUmVjdCwgdmVydGljYWwsIG1pbkRpc3RhbmNlLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gdmVydGljYWwgPyBjUmVjdC53aWR0aCA6IGNSZWN0LmhlaWdodDtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Rpc3RhbmNlOicsIGRpc3RhbmNlKTtcbiAgICAgICAgbGluZUVsLnNob3coKTtcbiAgICAgICAgbW91c2VNb3ZlVXAod2luZG93LCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb3ZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHN0YXJ0RXZ0ICE9PSBudWxsICYmIGUuYnV0dG9ucyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b3A6JywgdG9wLCAnLCBsZWZ0OicsIHRvcCwgJywgY1JlY3Q6JywgY1JlY3QpO1xuICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSArPSBlLm1vdmVtZW50WDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID4gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNzcygnbGVmdCcsIGAke2NSZWN0LmxlZnQgKyBkaXN0YW5jZX1weGApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgKz0gZS5tb3ZlbWVudFk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5jc3MoJ3RvcCcsIGAke2NSZWN0LnRvcCArIGRpc3RhbmNlfXB4YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhcnRFdnQgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBzdGFydEV2dCA9IG51bGw7XG4gICAgICAgICAgICBsaW5lRWwuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZmluaXNoZWRGbikge1xuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSBkaXN0YW5jZSA9IG1pbkRpc3RhbmNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoZWRGbihjUmVjdCwgZGlzdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2h9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSAnLi4vY29uZmlnJztcbi8vIGltcG9ydCB7bW92ZUFycn0gZnJvbSBcIi4uL2V2ZW50L3Bhc3RlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcm9sbGJhciB7XG4gICAgY29uc3RydWN0b3IodmVydGljYWwpIHtcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IHZlcnRpY2FsO1xuICAgICAgICB0aGlzLm1vdmVGbiA9IG51bGw7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNjcm9sbGJhciAke3ZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJ31gKVxuICAgICAgICAgICAgLmNoaWxkKHRoaXMuY29udGVudEVsID0gaCgnZGl2JywgJycpKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW1vdmUuc3RvcCcsICgpID0+IHtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ3Njcm9sbC5zdG9wJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB7c2Nyb2xsVG9wLCBzY3JvbGxMZWZ0fSA9IGV2dC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgLy8gc2Nyb2xsVG9wID0gc2Nyb2xsVG9wICogMjtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlQXJyLmNhbGwodGhpcy5iZWxvbmdTaGVldCwgc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb3ZlRm4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlRm4odGhpcy52ZXJ0aWNhbCA/IHNjcm9sbFRvcCA6IHNjcm9sbExlZnQsIGV2dCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2V2dDo6OicsIGV2dCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtb3ZlKHYpIHtcbiAgICAgICAgLy8gZGVidWdnZXJcbiAgICAgICAgdGhpcy5lbC5zY3JvbGwodik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjcm9sbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgc2V0KGRpc3RhbmNlLCBjb250ZW50RGlzdGFuY2UpIHtcbiAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlIC0gMTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Rpc3RhbmNlOicsIGRpc3RhbmNlLCAnLCBjb250ZW50RGlzdGFuY2U6JywgY29udGVudERpc3RhbmNlKTtcbiAgICAgICAgaWYgKGNvbnRlbnREaXN0YW5jZSA+IGQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzc0tleSA9IHRoaXMudmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgICAgICAgICB0aGlzLmVsLmNzcyhjc3NLZXksIGAke2QgLSAxNX1weGApLnNob3coKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsXG4gICAgICAgICAgICAgICAgLmNzcyh0aGlzLnZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCAnMXB4JylcbiAgICAgICAgICAgICAgICAuY3NzKGNzc0tleSwgYCR7Y29udGVudERpc3RhbmNlfXB4YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCJpbXBvcnQge0NlbGxSYW5nZX0gZnJvbSBcIi4uL2NvcmUvY2VsbF9yYW5nZVwiO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7aH0gZnJvbSBcIi4vZWxlbWVudFwiO1xuaW1wb3J0IHtzZWxlY3RvckhlaWdodEJvcmRlcldpZHRofSBmcm9tIFwiLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3RvckNlbGwge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItY2VsbGApO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLl8gPSBuZXcgQ2VsbFJhbmdlKDAsIDAsIDAsIDApO1xuICAgIH1cblxuICAgIHJlc2V0U2VsZWN0T2Zmc2V0KCkge1xuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuZGF0YS5nZXRSZWN0KHRoaXMuXyk7XG4gICAgICAgIHRoaXMuc2V0T2Zmc2V0KHJlY3QpO1xuICAgIH1cblxuICAgIHNldERhdGEocmksIGNpKSB7XG4gICAgICAgIHJpID0gcmkgPT09IC0xID8gMCA6IHJpO1xuICAgICAgICBjaSA9IGNpID09PSAtMSA/IDAgOiBjaTtcblxuICAgICAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICAgICAgbGV0IHttZXJnZXN9ID0gZGF0YTtcblxuICAgICAgICBsZXQgZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgbWVyZ2VzLmVhY2gocmFuZ2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJhbmdlLmluY2x1ZGVCeVJpQ2kocmksIGNpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuXyA9IHJhbmdlO1xuICAgICAgICAgICAgICAgIGVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFlbnRlcikge1xuICAgICAgICAgICAgdGhpcy5fID0gbmV3IENlbGxSYW5nZShyaSwgY2ksIHJpLCBjaSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b29sYmFyQ2hhbmdlU2VsZWN0b3JDZWxsKCkge1xuICAgICAgICBsZXQgcmkgPSB0aGlzLl8uc3JpO1xuICAgICAgICBsZXQgY2kgPSB0aGlzLl8uc2NpO1xuXG4gICAgICAgIHRoaXMuc2V0RGF0YShyaSwgY2kpO1xuICAgIH1cblxuICAgIHNldE9mZnNldCh2KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgfSA9IHY7XG4gICAgICAgIHRoaXMuZWwub2Zmc2V0KHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtIHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGggKyAwLjgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGggKyAwLjgsXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0IC0gMC44LFxuICAgICAgICAgICAgdG9wOiB0b3AgLSAwLjgsXG4gICAgICAgIH0pLnNob3coKTtcbiAgICB9XG59XG4iLCIvLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IFN1Z2dlc3QgZnJvbSAnLi9zdWdnZXN0JztcbmltcG9ydCBEYXRlcGlja2VyIGZyb20gJy4vZGF0ZXBpY2tlcic7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7XG4gICAgY3V0dGluZyxcbiAgICBjdXR0aW5nQnlQb3MsXG4gICAgY3V0dGluZ0J5UG9zMixcbiAgICBjdXR0aW5nQnlQb3NFbmQsXG4gICAgZGVlcENvcHksXG4gICAgaXNBYnNvbHV0ZVZhbHVlLFxuICAgIG9wZXJhdGlvblxufSBmcm9tICcuLi9jb3JlL29wZXJhdG9yJztcbmltcG9ydCBTdWdnZXN0Q29udGVudCBmcm9tICcuL3N1Z2dlc3RfY29udGVudCc7XG5pbXBvcnQge2ZpbmRCcmFja2V0LCBzdWdnZXN0Q29udGVudH0gZnJvbSAnLi9mb3JtdWxhX2VkaXRvcic7XG5pbXBvcnQge2NyZWF0ZUV2ZW50fSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCBFZGl0b3JUZXh0IGZyb20gXCIuLi9jb3JlL2VkaXRvcl90ZXh0XCI7XG5pbXBvcnQge3Rlc3RWYWxpZH0gZnJvbSBcIi4uL3V0aWxzL3Rlc3RcIjtcbmltcG9ydCB7aXNIYXZlfSBmcm9tIFwiLi4vaGVscGVyL2NoZWNrX3ZhbHVlXCI7XG5cbmZ1bmN0aW9uIHJlc2V0VGV4dGFyZWFTaXplKCkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdGV4dGxpbmVFbCwgdGV4dEVsLCBhcmVhT2Zmc2V0LFxuICAgIH0gPSB0aGlzO1xuICAgIGlmICghYXJlYU9mZnNldCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRsaW5lV2lkdGggPSB0ZXh0bGluZUVsLm9mZnNldCgpLndpZHRoICsgOSArIDE1O1xuICAgIGNvbnN0IG1heFdpZHRoID0gdGhpcy52aWV3Rm4oKS53aWR0aCAtIGFyZWFPZmZzZXQubGVmdCAtIDk7XG4gICAgLy8gY29uc29sZS5sb2coJ3RsaW5lV2lkdGg6JywgdGxpbmVXaWR0aCwgJzonLCBtYXhXaWR0aCk7XG4gICAgaWYgKHRsaW5lV2lkdGggPiBhcmVhT2Zmc2V0LndpZHRoICYmIGFyZWFPZmZzZXQud2lkdGggIT09IDApIHtcbiAgICAgICAgbGV0IHR3aWR0aCA9IHRsaW5lV2lkdGg7XG4gICAgICAgIGlmICh0bGluZVdpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgIHR3aWR0aCA9IG1heFdpZHRoIC0gMTU7XG4gICAgICAgICAgICBsZXQgaDEgPSBwYXJzZUludCh0bGluZVdpZHRoIC8gKG1heFdpZHRoIC0gMTUpLCAxMCk7XG4gICAgICAgICAgICBoMSArPSAodGxpbmVXaWR0aCAlIG1heFdpZHRoKSA+IDAgPyAxIDogMDtcbiAgICAgICAgICAgIGgxICo9IHRoaXMucm93SGVpZ2h0O1xuICAgICAgICAgICAgaWYgKGgxID4gYXJlYU9mZnNldC5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0RWwuY3NzKCdoZWlnaHQnLCBgJHtoMX1weGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRleHRFbC5jc3MoJ3dpZHRoJywgYCR7dHdpZHRofXB4YCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0ZXh0Rm9ybWF0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHRleHQgPSBcIlwiO1xuICAgIGxldCBjbHAgPSAoZS5vcmlnaW5hbEV2ZW50IHx8IGUpLmNsaXBib2FyZERhdGE7XG4gICAgaWYgKGNscCA9PT0gdW5kZWZpbmVkIHx8IGNscCA9PT0gbnVsbCkge1xuICAgICAgICB0ZXh0ID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dCcpIHx8ICcnO1xuICAgICAgICBpZiAodGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5nZXRSYW5nZUF0KDApLmluc2VydE5vZGUobmV3Tm9kZSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkucGFzdGVIVE1MKHRleHQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gY2xwLmdldERhdGEoJ3RleHQvcGxhaW4nKSB8fCAnJztcbiAgICAgICAgaWYgKHRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnaW5zZXJ0VGV4dCcsIGZhbHNlLCB0ZXh0KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBnZXRDdXJzb3J0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPD0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKTtcbiAgICBjb25zdCBwcmVTZWxlY3Rpb25SYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgICBwcmVTZWxlY3Rpb25SYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy50ZXh0RWwuZWwpO1xuICAgIHByZVNlbGVjdGlvblJhbmdlLnNldEVuZChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgIGNvbnN0IHN0YXJ0ID0gcHJlU2VsZWN0aW9uUmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgbGV0IHtlZGl0b3JUZXh0fSA9IHRoaXM7XG4gICAgbGV0IGlucHV0VGV4dCA9IGVkaXRvclRleHQuZ2V0VGV4dCgpO1xuXG4gICAgY29uc3Qge2V4aXN0LCBsZWZ0LCByaWdodH0gPSBmaW5kQnJhY2tldChzdGFydCAtIDEsIGN1dHRpbmcoaW5wdXRUZXh0KSwgaW5wdXRUZXh0KTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLnNwYW5BcnIpLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgdGhpcy5zcGFuQXJyW2ldLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICdyZ2JhKDI1NSwyNTUsMjU1LDAuMSknKTtcbiAgICB9KTtcbiAgICBjb25zdCBzcGFuTGVmdCA9IHRoaXMuc3BhbkFycltsZWZ0XTtcbiAgICBjb25zdCBzcGFuUmlnaHQgPSB0aGlzLnNwYW5BcnJbcmlnaHRdO1xuICAgIHRoaXMuc3VnZ2VzdENvbnRlbnQuaGlkZSgpO1xuICAgIGlmIChleGlzdCAmJiBzcGFuTGVmdCAmJiBzcGFuUmlnaHQpIHtcbiAgICAgICAgc3BhbkxlZnQuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJ3JnYigyMjksIDIyOSwgMjI5KScpO1xuICAgICAgICBzcGFuUmlnaHQuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJ3JnYigyMjksIDIyOSwgMjI5KScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHtzaG93fSA9IHRoaXMuc3VnZ2VzdDtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHN1Z2dlc3RDb250ZW50LmNhbGwodGhpcywgc3RhcnQsIGN1dHRpbmcoaW5wdXRUZXh0KSwgaW5wdXRUZXh0KTtcbiAgICAgICAgaWYgKGNvbnRlbnQuc3VnZ2VzdENvbnRlbnQgJiYgIXNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdENvbnRlbnQuY29udGVudChjb250ZW50LmN1dCwgY29udGVudC5wb3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXJ0O1xufTtcblxuZnVuY3Rpb24gc2V0X2ZvY3VzKGVsKSB7XG4gICAgaWYgKCF0aGlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2F2ZWRTZWwgPSB7XG4gICAgICAgIHN0YXJ0OiB0aGlzLnBvcyxcbiAgICAgICAgZW5kOiB0aGlzLnBvcyxcbiAgICB9O1xuICAgIGxldCBjaGFySW5kZXggPSAwO1xuICAgIGNvbnN0XG4gICAgICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRTdGFydChlbCwgMCk7XG4gICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgY29uc3Qgbm9kZVN0YWNrID0gW2VsXTtcbiAgICBsZXQgbm9kZTtcbiAgICBsZXQgZm91bmRTdGFydCA9IGZhbHNlO1xuICAgIGxldFxuICAgICAgICBzdG9wID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoIXN0b3AgJiYgKG5vZGUgPSBub2RlU3RhY2sucG9wKCkpKSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2hhckluZGV4ID0gY2hhckluZGV4ICsgbm9kZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoIWZvdW5kU3RhcnQgJiYgc2F2ZWRTZWwuc3RhcnQgPj0gY2hhckluZGV4ICYmIHNhdmVkU2VsLnN0YXJ0IDw9IG5leHRDaGFySW5kZXgpIHtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBzYXZlZFNlbC5zdGFydCAtIGNoYXJJbmRleCk7XG4gICAgICAgICAgICAgICAgZm91bmRTdGFydCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm91bmRTdGFydCAmJiBzYXZlZFNlbC5lbmQgPj0gY2hhckluZGV4ICYmIHNhdmVkU2VsLmVuZCA8PSBuZXh0Q2hhckluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIHNhdmVkU2VsLmVuZCAtIGNoYXJJbmRleCk7XG4gICAgICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFySW5kZXggPSBuZXh0Q2hhckluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGkgPSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIG5vZGVTdGFjay5wdXNoKG5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG59XG5cbi8vIGNvbnN0IHNldEN1cnNvclBvc2l0aW9uID0gKGVsZW0sIGluZGV4KSA9PiB7XG4vLyAgICAgY29uc3QgdmFsID0gZWxlbS52YWx1ZSB8fCBlbGVtLnRleHRDb250ZW50O1xuLy8gICAgIGNvbnN0IGxlbiA9IHZhbC5sZW5ndGg7XG4vL1xuLy8gICAgIC8vIOi2hei/h+aWh+acrOmVv+W6puebtOaOpei/lOWbnlxuLy8gICAgIGlmIChsZW4gPCBpbmRleCkgcmV0dXJuO1xuLy8gICAgIHNldF9mb2N1cy5jYWxsKHRoaXMsIGVsZW0pO1xuLy8gfTtcblxuZnVuY3Rpb24gbW91c2VEb3duRXZlbnRIYW5kbGVyKCkge1xuICAgIGxldCB7ZWRpdG9yVGV4dH0gPSB0aGlzO1xuICAgIGxldCBpbnB1dFRleHQgPSBlZGl0b3JUZXh0LmdldFRleHQoKTtcblxuICAgIHRoaXMucG9zID0gZ2V0Q3Vyc29ydFBvc2l0aW9uLmNhbGwodGhpcyk7XG4gICAgcGFyc2UyLmNhbGwodGhpcywgaW5wdXRUZXh0LCB0aGlzLnBvcyk7XG59XG5cbmZ1bmN0aW9uIHNldE9sZENlbGwoKSB7XG4gICAgbGV0IGQgPSBpc0Rpc3BsYXkuY2FsbCh0aGlzKTtcbiAgICBpZiAoZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmRhdGEuZ2V0Q2VsbCh0aGlzLnJpLCB0aGlzLmNpKTtcbiAgICAgICAgdGhpcy5lZGl0b3JUZXh0LnNldE9sZENlbGwoZGVlcENvcHkoY2VsbCksIHtyaTogdGhpcy5yaSwgY2k6IHRoaXMuY2l9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlucHV0RXZlbnRIYW5kbGVyKGV2dCwgdHh0ID0gJycsIGZvcm11bGFzID0gJycsIHN0YXRlID0gXCJpbnB1dFwiKSB7XG4gICAgc2V0T2xkQ2VsbC5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKGV2dCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpbnB1dFR5cGUsXG4gICAgICAgIH0gPSBldnQ7XG5cbiAgICAgICAgaWYgKGlucHV0VHlwZSA9PT0gJ2luc2VydEZyb21QYXN0ZScgJiYgdGhpcy50ZXh0RWwuZWwuc3R5bGVbJ2NhcmV0LWNvbG9yJ10gIT09ICdibGFjaycpIHtcbiAgICAgICAgICAgIHRoaXMuY29weSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXRUeXBlID09PSAnaGlzdG9yeVVuZG8nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxldCB7ZWRpdG9yVGV4dH0gPSB0aGlzO1xuICAgIC8vIGxldCBpbnB1dFRleHQgPSBlZGl0b3JUZXh0LmdldFRleHQoKTtcblxuICAgIC8vIGlmIChpbnB1dFRleHQgPT09ICcnKSB7XG4gICAgLy8gICAgIGNvbnN0IHtkYXRhfSA9IHRoaXM7XG4gICAgLy8gICAgIGNvbnN0IHtoaXN0b3J5fSA9IGRhdGE7XG4gICAgLy8gICAgIGhpc3RvcnkuYWRkKGRhdGEuZ2V0RGF0YSgpKTtcbiAgICAvLyB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbmVzZSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgbGV0IHYgPSAnJztcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5zZXR0aW5ncy5zaG93RWRpdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnNoZWV0LnNlbGVjdG9yLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eHQgPT09ICcnICYmIGV2dCAmJiBldnQudGFyZ2V0ICYmIGV2dC50YXJnZXQuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgbGV0IHQxID0gJyc7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZXZ0LnRhcmdldC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2dC50YXJnZXQuY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2ICs9IGV2dC50YXJnZXQuY2hpbGROb2Rlc1tpXS5pbm5lclRleHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldnQudGFyZ2V0LmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdDEgKz0gZXZ0LnRhcmdldC5jaGlsZE5vZGVzW2ldLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2ID0gdDEgIT09ICcnID8gdDEgOiB2O1xuICAgICAgICB9IGVsc2UgaWYgKHR4dCA9PT0gJycgJiYgZXZ0ICYmIGlzSGF2ZShldnQuZGF0YSkpIHtcbiAgICAgICAgICAgIHYgPSBldnQuZGF0YSAhPT0gJycgPyBldnQuZGF0YSA6IHY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ID0gdHh0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29weSkge1xuICAgICAgICAgICAgdGhpcy5jb3B5ID0gZmFsc2U7XG4gICAgICAgICAgICB2ID0gKGV2dCAmJiBldnQuZGF0YSkgPyBldnQuZGF0YSA6ICcnO1xuICAgICAgICAgICAgdGhpcy50ZXh0RWwuaHRtbCh2KTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gdi5sZW5ndGg7XG4gICAgICAgICAgICBzZXRfZm9jdXMuY2FsbCh0aGlzLCB0aGlzLnRleHRFbC5lbCwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN1Z2dlc3QsIHRleHRsaW5lRWwsIHZhbGlkYXRvciwgdGV4dEVsLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgZWRpdG9yVGV4dC5zZXRUZXh0KGAke3Z9YCk7XG4gICAgICAgIC8vIGlucHV0VGV4dCA9IGAke3Z9YDtcbiAgICAgICAgZWRpdG9yVGV4dC5jaGFuZ2VUZXh0KDEpO1xuICAgICAgICAvLyBpbnB1dFRleHQgPSBpbnB1dFRleHQucmVwbGFjZSgv77yML2csICcsJyk7XG4gICAgICAgIHRoaXMucG9zID0gZ2V0Q3Vyc29ydFBvc2l0aW9uLmNhbGwodGhpcyk7XG5cbiAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRvci50eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgICAgICAgICBzdWdnZXN0LnNlYXJjaCh2KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VnZ2VzdC5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ID0gdiArIFwiXCI7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHYubGFzdEluZGV4T2YoJz0nKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBwYXJzZTIuY2FsbCh0aGlzLCB2LCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB9IGVsc2UgcGFyc2UuY2FsbCh0aGlzLCB2KTtcbiAgICAgICAgICAgIGxldCBzaG93ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgY3V0VmFsdWUgPSBjdXR0aW5nQnlQb3MyKHYsIHRoaXMucG9zLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICh2Lmxlbmd0aCA+PSB0aGlzLnBvcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTnVtYmVyID0gYCR7dlt0aGlzLnBvc119YDtcbiAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIuc2VhcmNoKC9eWzAtOV0rLj9bMC05XSokLykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3V0VmFsdWUgKz0gY3V0dGluZ0J5UG9zRW5kKHYsIHRoaXMucG9zICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhcnQgPT09IDAgJiYgdi5sZW5ndGggPiAxICYmIGN1dFZhbHVlICE9PSAnJyAmJiAhc2hvdyAmJiBjdXRWYWx1ZS50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Quc2VhcmNoKGN1dFZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VnZ2VzdC5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIHRleHRsaW5lRWwuaHRtbChmb3JtdWxhcyB8fCB2KTtcbiAgICAgICAgZWRpdG9yVGV4dC5zZXRUZXh0KGZvcm11bGFzIHx8IHYpO1xuICAgICAgICB0aGlzLnN1Z2dlc3QuaXRlbUluZGV4ID0gLTE7XG4gICAgICAgIHJlc2V0VGV4dGFyZWFTaXplLmNhbGwodGhpcyk7XG4gICAgICAgIGlmICh2ICYmIHZbMF0gIT09ICc9Jykge1xuICAgICAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGV4dEVsLmVsLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9ybXVsYXMgJiYgZm9ybXVsYXNbMF0gPT09ICc9Jykge1xuICAgICAgICAgICAgdiA9IGZvcm11bGFzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhbmdlKHN0YXRlLCB2KTtcbiAgICAgICAgLy8gdGVzdFZhbGlkLmNhbGwodGhpcyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIGtleURvd25FdmVudEhhbmRsZXIoZXZ0KSB7XG4gICAgdGhpcy5wb3MgPSBnZXRDdXJzb3J0UG9zaXRpb24uY2FsbCh0aGlzKTtcbiAgICBpZiAoZXZ0LmNvZGUgPT09ICdBcnJvd1JpZ2h0Jykge1xuICAgICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgMTtcbiAgICB9IGVsc2UgaWYgKGV2dC5jb2RlID09PSAnQXJyb3dMZWZ0Jykge1xuICAgICAgICB0aGlzLnBvcyA9IHRoaXMucG9zIC0gMTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xuICAgIC8vIHRoaXMudGV4dEVsLmVsLnN0eWxlWydjYXJldC1jb2xvciddICE9ICdibGFjaycg5Yqg6L+Z5Liq5Li76KaB6Ziy5q2i55So5oi35Zyo5rKh5pyJ6L6T5YWl55qE5oOF5Ya15LiL5oyJ5LiLZXNjXG4gICAgaWYgKGtleUNvZGUgPT09IDI3ICYmIHRoaXMudGV4dEVsLmVsLnN0eWxlWydjYXJldC1jb2xvciddID09PSAnYmxhY2snICYmIHRoaXMudGV4dEVsLmVsLnN0eWxlLm9wYWNpdHkgPT09ICcxJykge1xuICAgICAgICB0aGlzLmNoYW5nZSgnaW5wdXQnLCAnQH5lc2MnKTtcbiAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IDM3IHx8IGtleUNvZGUgPT09IDM4IHx8IGtleUNvZGUgPT09IDM5IHx8IGtleUNvZGUgPT09IDQwKSB7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZSh2KSB7XG4gICAgY29uc3Qgc3RhcnQgPSB2Lmxhc3RJbmRleE9mKCc9Jyk7XG5cblxuICAgIGlmIChzdGFydCA9PT0gMCAmJiB2Lmxlbmd0aCA+PSAxICYmIG9wZXJhdGlvbih2W3YubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jayh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldExvY2soZmFsc2UpO1xuICAgICAgICB0aGlzLnN0YXRlID0gMjtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRMb2NrKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ID09PSAwICYmIHYubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jayh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBYnNvbHV0ZVZhbHVlKGN1dHRpbmdCeVBvcyh2LCB0aGlzLnBvcyksIDIpKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jayh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRMb2NrKGZhbHNlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlMih2LCBwb3MpIHtcbiAgICB2ID0gdiArIFwiXCI7XG4gICAgY29uc3Qgc3RhcnQgPSB2Lmxhc3RJbmRleE9mKCc9Jyk7XG4gICAgaWYgKHN0YXJ0ID09PSAwICYmIHYubGVuZ3RoID49IDEgJiYgb3BlcmF0aW9uKHZbcG9zIC0gMV0pKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jayh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldExvY2soZmFsc2UpO1xuICAgICAgICB0aGlzLnN0YXRlID0gMjtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRMb2NrKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ID09PSAwICYmIHYubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jayh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBYnNvbHV0ZVZhbHVlKGN1dHRpbmdCeVBvcyh2LCBwb3MpLCAyKSkge1xuICAgICAgICB0aGlzLnNldExvY2sodHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ICE9PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jayhmYWxzZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0YXJlYVJhbmdlKCkge1xuICAgIGNvbnN0IHtlbH0gPSB0aGlzLnRleHRFbDtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gZWwuZm9jdXMoKTtcbiAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgZWwpO1xuICAgICAgICAvLyBlbC5zZXRTZWxlY3Rpb25SYW5nZShwb3NpdGlvbiwgcG9zaXRpb24pO1xuICAgIH0sIDApO1xufVxuXG5mdW5jdGlvbiBzZXRUZXh0KHRleHQpIHtcbiAgICBjb25zdCB7dGV4dEVsLCB0ZXh0bGluZUVsLCB0bXB9ID0gdGhpcztcbiAgICAvLyBmaXJlZm94IGJ1Z1xuICAgIHRleHRFbC5lbC5ibHVyKCk7XG4gICAgdG1wLmh0bWwodGV4dCk7XG4gICAgdGV4dGxpbmVFbC5odG1sKHRleHQpO1xuICAgIHNldFRleHRhcmVhUmFuZ2UuY2FsbCh0aGlzKTtcbn1cblxuXG5mdW5jdGlvbiBzdWdnZXN0SXRlbUNsaWNrKGl0KSB7XG4gICAgY29uc3Qge3ZhbGlkYXRvciwgZWRpdG9yVGV4dH0gPSB0aGlzO1xuICAgIGxldCBpbnB1dFRleHQgPSBlZGl0b3JUZXh0LmdldFRleHQoKTtcbiAgICBpZiAodmFsaWRhdG9yICYmIHZhbGlkYXRvci50eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgLy8gdGhpcy5pbnB1dFRleHQgPSBpdDtcbiAgICAgICAgaW5wdXRUZXh0ID0gZWRpdG9yVGV4dC5zZXRUZXh0KGl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBvcyA9IGdldEN1cnNvcnRQb3NpdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICBjb25zdCBiZWdpbiA9IHRoaXMucG9zIC0gY3V0dGluZ0J5UG9zKGlucHV0VGV4dCwgdGhpcy5wb3MpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYyA9IGN1dHRpbmdCeVBvc0VuZChpbnB1dFRleHQsIHRoaXMucG9zICsgMSk7XG4gICAgICAgIGNvbnN0IGFyciA9IFsnJywgJyddO1xuICAgICAgICBjb25zdCBlbmQgPSB0aGlzLnBvcyArIGMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0VGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBiZWdpbikge1xuICAgICAgICAgICAgICAgIGFyclswXSArPSBpbnB1dFRleHRbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpID4gZW5kIC0gMSkge1xuICAgICAgICAgICAgICAgIGFyclsxXSArPSBpbnB1dFRleHRbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXRUZXh0ID0gZWRpdG9yVGV4dC5zZXRUZXh0KGAke2FyclswXSArIGl0LmtleX0oYCk7XG4gICAgICAgIC8vIHRoaXMuaW5wdXRUZXh0ID0gYCR7YXJyWzBdICsgaXQua2V5fShgO1xuICAgICAgICB0aGlzLnBvcyA9IGVkaXRvclRleHQuZ2V0VGV4dCgpLmxlbmd0aDtcbiAgICAgICAgaW5wdXRUZXh0ID0gZWRpdG9yVGV4dC5zZXRUZXh0KGlucHV0VGV4dCArIGApJHthcnJbMV19YCk7XG4gICAgICAgIC8vIHRoaXMuaW5wdXRUZXh0ICs9IGApJHthcnJbMV19YDtcbiAgICB9XG4gICAgdGhpcy50ZXh0RWwuaHRtbChpbnB1dFRleHQpO1xuICAgIHRoaXMudGV4dGxpbmVFbC5odG1sKGlucHV0VGV4dCk7XG4gICAgdGhpcy5zdWdnZXN0LmhpZGUoKTtcbiAgICBwYXJzZTIuY2FsbCh0aGlzLCBpbnB1dFRleHQsIHRoaXMucG9zKTtcbiAgICB0aGlzLmNoYW5nZSgnaW5wdXQnLCBpbnB1dFRleHQpO1xuICAgIHNldF9mb2N1cy5jYWxsKHRoaXMsIHRoaXMudGV4dEVsLmVsLCAtMSk7XG4gICAgcmVzZXRUZXh0YXJlYVNpemUuY2FsbCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdWdnZXN0Q29udGVudEl0ZW1zKCkge1xuICAgIHRoaXMuc3VnZ2VzdENvbnRlbnQuaGlkZSgpO1xufVxuXG5mdW5jdGlvbiByZXNldFN1Z2dlc3RJdGVtcygpIHtcbiAgICB0aGlzLnN1Z2dlc3Quc2V0SXRlbXModGhpcy5mb3JtdWxhcyk7XG59XG5cbmZ1bmN0aW9uIGRhdGVGb3JtYXQoZCkge1xuICAgIGxldCBtb250aCA9IGQuZ2V0TW9udGgoKSArIDE7XG4gICAgbGV0IGRhdGUgPSBkLmdldERhdGUoKTtcbiAgICBpZiAobW9udGggPCAxMCkgbW9udGggPSBgMCR7bW9udGh9YDtcbiAgICBpZiAoZGF0ZSA8IDEwKSBkYXRlID0gYDAke2RhdGV9YDtcbiAgICByZXR1cm4gYCR7ZC5nZXRGdWxsWWVhcigpfS0ke21vbnRofS0ke2RhdGV9YDtcbn1cblxuZnVuY3Rpb24gaXNEaXNwbGF5KCkge1xuICAgIC8vIGlmICh0aGlzLnRleHRFbC5lbC5zdHlsZVsnY2FyZXQtY29sb3InXSA9PT0gJ2JsYWNrJ1xuICAgIC8vICAgICAmJiB0aGlzLnRleHRFbC5lbC5zdHlsZS5vcGFjaXR5ID09PSAnMScpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiB0aGlzLnRleHRFbC5lbC5zdHlsZVsnY2FyZXQtY29sb3InXSA9PT0gJ2JsYWNrJ1xuICAgICAgICAmJiB0aGlzLnRleHRFbC5lbC5zdHlsZS5vcGFjaXR5ID09PSAnMSc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvciB7XG4gICAgY29uc3RydWN0b3IoZm5OYW1lQXJyYXlXaXRoS2V5LCB2aWV3Rm4sIHJvd0hlaWdodCwgcm93V2lkdGgsIGRhdGEsIHNoZWV0KSB7XG4gICAgICAgIHRoaXMudmlld0ZuID0gdmlld0ZuO1xuICAgICAgICB0aGlzLnJvd0hlaWdodCA9IHJvd0hlaWdodDtcbiAgICAgICAgdGhpcy5mb3JtdWxhcyA9IGZuTmFtZUFycmF5V2l0aEtleTtcbiAgICAgICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuICAgICAgICB0aGlzLmRpc3BsYXkgPSB0cnVlO1xuICAgICAgICB0aGlzLnN1Z2dlc3QgPSBuZXcgU3VnZ2VzdChmbk5hbWVBcnJheVdpdGhLZXksIChpdCkgPT4ge1xuICAgICAgICAgICAgc3VnZ2VzdEl0ZW1DbGljay5jYWxsKHRoaXMsIGl0KTtcbiAgICAgICAgfSwgZGF0YSwgdGhpcyk7XG4gICAgICAgIHRoaXMuc3VnZ2VzdENvbnRlbnQgPSBuZXcgU3VnZ2VzdENvbnRlbnQoKTtcbiAgICAgICAgdGhpcy5sb2NrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmRhdGVwaWNrZXIgPSBuZXcgRGF0ZXBpY2tlcigpO1xuICAgICAgICB0aGlzLmlzQ29ycyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRhdGVwaWNrZXIuY2hhbmdlKChkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFRleHQoZGF0ZUZvcm1hdChkKSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJpID0gLTE7XG4gICAgICAgIHRoaXMuY2kgPSAtMTtcbiAgICAgICAgdGhpcy5zcGFuQXJyID0gW107XG4gICAgICAgIHRoaXMubW91c2Vkb3duSW5kZXggPSBbXTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hpbmVzZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5lZGl0b3JUZXh0ID0gbmV3IEVkaXRvclRleHQoJycpO1xuXG4gICAgICAgIHRoaXMuYXJlYUVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1lZGl0b3ItYXJlYWApXG4gICAgICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0RWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWVkaXRvci10ZXh0RWxgKVxuICAgICAgICAgICAgICAgICAgICAub24oJ2lucHV0JywgZXZ0ID0+IGlucHV0RXZlbnRIYW5kbGVyLmNhbGwodGhpcywgZXZ0KSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsICgpID0+IG1vdXNlRG93bkV2ZW50SGFuZGxlci5jYWxsKHRoaXMsKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdrZXl1cCcsIGV2dCA9PiBrZXlEb3duRXZlbnRIYW5kbGVyLmNhbGwodGhpcywgZXZ0KSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24nLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmRldGFpbCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Rpc3BsYXkuY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7cmksIGNpfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJpLCBjaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VsbEVuZChkYXRhLmdldFNlbGVjdGVkQ2VsbFJpQ2kocmksIGNpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbignY29tcG9zaXRpb25zdGFydCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbmVzZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oJ2NvbXBvc2l0aW9uZW5kJywgKCApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbmVzZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbigncGFzdGUnLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0RWwuZWwuc3R5bGVbJ2NhcmV0LWNvbG9yJ10gPT09ICdibGFjaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGVFdmVudC5jYWxsKHRoaXMsIDY3LCB0cnVlLCBcInBhc3RlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjb3B5JywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGV4dEVsLmVsLnN0eWxlWydjYXJldC1jb2xvciddID09PSAnYmxhY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlRXZlbnQuY2FsbCh0aGlzLCA4NiwgdHJ1ZSwgXCJzaGVldENvcHlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oJ2tleWRvd24nLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldFRleHRhcmVhU2l6ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0bGluZUVsLmh0bWwoZXZ0LmN1cnJlbnRUYXJnZXQuaW5uZXJUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleV9udW0gPSBldnQua2V5Q29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN0cmwgKyB2IDY3ICAgICBjdHJsICsgdiAgODZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlfbnVtID09PSAzOCB8fCBrZXlfbnVtID09PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleV9udW0gPT09IDExNSkgeyAgICAgICAvLyBGNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7aW5wdXRUZXh0LCBwb3N9ID0gdGhpcy5lZGl0b3JUZXh0LmY0U2hvcnRjdXRLZXkoZ2V0Q3Vyc29ydFBvc2l0aW9uLmNhbGwodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RXZlbnRIYW5kbGVyLmNhbGwodGhpcywgbnVsbCwgaW5wdXRUZXh0LCBpbnB1dFRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0RWwuZWwuc3R5bGVbJ2NhcmV0LWNvbG9yJ10gPT09ICdibGFjaycpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsS2V5LCBtZXRhS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGV2dDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleV9udW0gPT09IDggfHwga2V5X251bSA9PT0gNDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFdmVudC5jYWxsKHRoaXMsIDgsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5X251bSA9PT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRXZlbnQuY2FsbCh0aGlzLCA0MCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXlfbnVtID09PSAzOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFdmVudC5jYWxsKHRoaXMsIDM5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleV9udW0gPT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUV2ZW50LmNhbGwodGhpcywgMzcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5X251bSA9PT0gMzgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRXZlbnQuY2FsbCh0aGlzLCAzOCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdHJsS2V5IHx8IG1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5X251bSA9PT0gNjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRXZlbnQuY2FsbCh0aGlzLCA2NywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXlfbnVtID09PSA4Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFdmVudC5jYWxsKHRoaXMsIDg2LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleV9udW0gPT09IDg4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUV2ZW50LmNhbGwodGhpcywgODgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5X251bSA9PT0gOTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRXZlbnQuY2FsbCh0aGlzLCA5MCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXlfbnVtID09PSA2Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFdmVudC5jYWxsKHRoaXMsIDY2LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMudGV4dGxpbmVFbCA9IGgoJ2RpdicsICd0ZXh0bGluZScpLFxuICAgICAgICAgICAgICAgIHRoaXMuc3VnZ2VzdENvbnRlbnQuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlcGlja2VyLmVsLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW1vdmUuc3RvcCcsICgpID0+IHtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlZG93bi5zdG9wJywgKCkgPT4ge1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgc2hlZXQuZWwuY2hpbGQodGhpcy5zdWdnZXN0LmVsKTtcbiAgICAgICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZWRpdG9yYClcbiAgICAgICAgICAgIC5jaGlsZHJlbih0aGlzLmFyZWFFbCk7XG4gICAgICAgIHRoaXMuc3VnZ2VzdC5iaW5kSW5wdXRFdmVudHModGhpcy50ZXh0RWwpO1xuXG4gICAgICAgIHRoaXMudGV4dEVsLm9uKCdwYXN0ZScsIChldnQpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0Rpc3BsYXkuY2FsbCh0aGlzKSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGV4dEZvcm1hdChldnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50bXAgPSBoKCdzcGFuJywgJ3NwYW5fdG1wJykuaGlkZSgpO1xuICAgICAgICB0aGlzLnRleHRFbC5hdHRyKCdjb250ZW50ZWRpdGFibGUnLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLnRleHRFbC5jc3MoJ3dpZHRoJywgYCR7cm93V2lkdGggLSAzfXB4YCk7XG4gICAgICAgIHRoaXMudGV4dEVsLmNzcygnaGVpZ2h0JywgYCR7cm93SGVpZ2h0IC0gMn1weGApO1xuICAgICAgICB0aGlzLnRleHRFbC5jaGlsZCh0aGlzLnRtcCk7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5hcmVhT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5mcmVlemUgPSB7dzogMCwgaDogMH07XG4gICAgICAgIHRoaXMuY2VsbCA9IG51bGw7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3coZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc2V0RnJlZXplTGVuZ3Rocyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuZnJlZXplLncgPSB3aWR0aDtcbiAgICAgICAgdGhpcy5mcmVlemUuaCA9IGhlaWdodDtcbiAgICB9XG5cbiAgICBzZXRNb3VzZURvd25JbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLm1vdXNlZG93bkluZGV4ID0gaW5kZXg7XG4gICAgfVxuXG4gICAgc2V0UmlDaShyaSwgY2kpIHtcbiAgICAgICAgdGhpcy5yaSA9IHJpO1xuICAgICAgICB0aGlzLmNpID0gY2k7XG4gICAgICAgIC8vIGlmICh0aGlzLnJpID09PSAtMSB8fCB0aGlzLmNpID09PSAtMSkge1xuICAgICAgICAvLyAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGNvbnN0IGNlbGwgPSB0aGlzLmRhdGEucm93cy5nZXRDZWxsKHJpLCBjaSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuZWRpdG9yVGV4dC5zZXRPbGRDZWxsKGRlZXBDb3B5KGNlbGwpKTtcbiAgICB9XG5cbiAgICBzZXRMb2NrKGxvY2spIHtcbiAgICAgICAgdGhpcy5sb2NrID0gbG9jaztcbiAgICB9XG5cbiAgICBnZXRMb2NrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NrO1xuICAgIH1cblxuXG4gICAgc2hvdyhvZmYgPSB0cnVlKSB7XG5cbiAgICAgICAgaWYgKG9mZiAmJiB0aGlzLmRhdGEuc2V0dGluZ3Muc2hvd0VkaXRvcikge1xuICAgICAgICAgICAgdGhpcy50ZXh0RWwuY3NzKCdjYXJldC1jb2xvcicsICdibGFjaycpO1xuICAgICAgICAgICAgdGhpcy50ZXh0RWwuY3NzKCdjdXJzb3InLCAndGV4dCcpO1xuICAgICAgICAgICAgdGhpcy50ZXh0RWwuY3NzKCdvcGFjaXR5JywgJzEnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dEVsLmVsLmZvY3VzKCk7XG4gICAgICAgICAgICB0aGlzLmFyZWFFbC5jc3MoJ3BvaW50ZXItZXZlbnRzJywgJ2F1dG8nKTtcbiAgICAgICAgICAgIHRoaXMuYXJlYUVsLmNzcygnYm9yZGVyJywgJzJweCBzb2xpZCAjNGI4OWZmJyk7XG4gICAgICAgICAgICB0aGlzLmFyZWFFbC5jc3MoJ2JhY2tncm91bmQnLCAnd2hpdGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dEVsLmNzcygnY2FyZXQtY29sb3InLCAnd2hpdGUnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dEVsLmNzcygnY3Vyc29yJywgJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dEVsLmNzcygnb3BhY2l0eScsICcwJyk7XG4gICAgICAgICAgICB0aGlzLnRleHRFbC5lbC5ibHVyKCk7XG4gICAgICAgICAgICB0aGlzLmFyZWFFbC5jc3MoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTtcbiAgICAgICAgICAgIHRoaXMuYXJlYUVsLmNzcygnYmFja2dyb3VuZCcsICdyZ2JhKDc1LCAxMzcsIDI1NSwgMCknKTtcbiAgICAgICAgICAgIHRoaXMuYXJlYUVsLmNzcygnYm9yZGVyJywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlKHBvcyA9IC0xKSB7XG4gICAgICAgIGxldCB7ZWRpdG9yVGV4dH0gPSB0aGlzO1xuICAgICAgICBsZXQgaW5wdXRUZXh0ID0gZWRpdG9yVGV4dC5nZXRUZXh0KCk7XG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IGdldEN1cnNvcnRQb3NpdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgcGFyc2UyLmNhbGwodGhpcywgaW5wdXRUZXh0LCB0aGlzLnBvcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZS5jYWxsKHRoaXMsIGlucHV0VGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhcihjID0gZmFsc2UpIHtcblxuICAgICAgICBsZXQge2VkaXRvclRleHR9ID0gdGhpcztcbiAgICAgICAgbGV0IGlucHV0VGV4dCA9IGVkaXRvclRleHQuZ2V0VGV4dCgpO1xuXG4gICAgICAgIHRoaXMuZGlzcGxheSA9IGlzRGlzcGxheS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIGlmIChpbnB1dFRleHQgIT09ICcnICYmIGlzTmFOKGlucHV0VGV4dCkgJiYgaW5wdXRUZXh0LnJlcGxhY2UoL1xccy9nLCBcIlwiKS5sYXN0SW5kZXhPZignwqUnKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2UoJ2Zvcm1hdCcsIGlucHV0VGV4dCk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYW5nZWQpIHtcblxuICAgICAgICAgICAgdGhpcy5jaGFuZ2UoJ2ZpbmlzaCcsIGlucHV0VGV4dCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNlbGwgPSBudWxsO1xuICAgICAgICB0aGlzLmFyZWFPZmZzZXQgPSBudWxsO1xuICAgICAgICBlZGl0b3JUZXh0LnNldFRleHQoJycpO1xuICAgICAgICAvLyB0aGlzLmlucHV0VGV4dCA9ICcnO1xuICAgICAgICB0aGlzLnNob3coZmFsc2UpO1xuICAgICAgICB0aGlzLmNvcHkgPSBmYWxzZTtcbiAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwsIC0xKTtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLnRtcC5oaWRlKCk7XG4gICAgICAgIHRoaXMudGV4dEVsLmh0bWwoJycpO1xuICAgICAgICB0aGlzLnRleHRsaW5lRWwuaHRtbCgnJyk7XG4gICAgICAgIHJlc2V0U3VnZ2VzdENvbnRlbnRJdGVtcy5jYWxsKHRoaXMpO1xuICAgICAgICByZXNldFN1Z2dlc3RJdGVtcy5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmRhdGVwaWNrZXIuaGlkZSgpO1xuXG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtyaSwgY2l9ID0gdGhpcy5kYXRhLnNlbGVjdG9yO1xuICAgICAgICAgICAgdGhpcy5zZXRSaUNpKHJpLCBjaSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BsYXk7XG4gICAgfVxuXG4gICAgbW91bnQyc3BhbihzcGFuQXJyLCBwb3MgPSAtMSwgYmVnaW4gPSAtMSwgY29udGVudCA9IHtzdWdnZXN0Q29udGVudDogZmFsc2UsIGN1dDogJycsIHBvczogLTF9KSB7XG4gICAgICAgIGlmICh0aGlzLnNwYW5BcnIgPT09IHNwYW5BcnIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtzaG93fSA9IHRoaXMuc3VnZ2VzdDtcbiAgICAgICAgaWYgKGNvbnRlbnQuc3VnZ2VzdENvbnRlbnQgJiYgIXNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdENvbnRlbnQuY29udGVudChjb250ZW50LmN1dCwgY29udGVudC5wb3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0Q29udGVudC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmtleXMoc3BhbkFycikuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICAgICAgc3BhbkFycltpXS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAncmdiYSgyNTUsMjU1LDI1NSwwLjEpJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocG9zICE9PSAnLTEnICYmIGJlZ2luICE9PSAtMSAmJiBzcGFuQXJyW3Bvc10pIHtcbiAgICAgICAgICAgIHNwYW5BcnJbcG9zXS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnI2U1ZTVlNScpO1xuICAgICAgICAgICAgc3BhbkFycltiZWdpbl0uY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyNlNWU1ZTUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGFuQXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudGV4dEVsLmh0bWwoJycpO1xuICAgICAgICAgICAgdGhpcy50bXAgPSBoKCdzcGFuJywgJ3NwYW5fdG1wJykuY2hpbGRyZW4oLi4uc3BhbkFycilcbiAgICAgICAgICAgICAgICAuY3NzKCd0b3AnLCAnMHB4JykuY3NzKCdjb2xvcicsICdibGFjaycpLmNzcygnZm9udC1zaXplJywgJzE0cHgnKS5jc3MoJ2ZvbnQtZmFtaWx5JywgJ20taW5jb25zb2xhdGEsbW9ub3NwYWNlLGFyaWFsLHNhbnMsc2Fucy1zZXJpZicpO1xuICAgICAgICAgICAgdGhpcy50ZXh0RWwuZWwuaW5zZXJ0QmVmb3JlKHRoaXMudG1wLmVsLCB0aGlzLnRleHRFbC5lbC5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICAgIC8vIHRoaXMudGV4dEVsLmVsLnJlbW92ZUNoaWxkKHRoaXMudGV4dEVsLmVsLmNoaWxkTm9kZXNbdGhpcy50ZXh0RWwuZWwuY2hpbGROb2Rlcy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICBzZXRfZm9jdXMuY2FsbCh0aGlzLCB0aGlzLnRleHRFbC5lbCwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zcGFuQXJyID0gc3BhbkFycjtcbiAgICB9XG5cbiAgICBoYW5kbGVyKHRleHQpIHtcbiAgICAgICAgbGV0IHtlZGl0b3JUZXh0fSA9IHRoaXM7XG4gICAgICAgIGxldCBpbnB1dFRleHQgPSBlZGl0b3JUZXh0LmdldFRleHQoKTtcblxuICAgICAgICBjb25zdCBjdXJzb3JQb3MgPSB0aGlzLnBvcztcbiAgICAgICAgaWYgKGN1cnNvclBvcyA+PSBpbnB1dFRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TW91c2VEb3duSW5kZXgoW10pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRleHRCZWdpbiA9IHRleHQuc3Vic3RyaW5nKDAsIGN1cnNvclBvcyk7XG4gICAgICAgIGNvbnN0IHRleHRFbmQgPSB0ZXh0LnN1YnN0cmluZyhjdXJzb3JQb3MsIHRleHQubGVuZ3RoKTtcbiAgICAgICAgcGFyc2UuY2FsbCh0aGlzLCB0ZXh0QmVnaW4pO1xuICAgICAgICBpZiAodGV4dEVuZCAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TW91c2VEb3duSW5kZXgoW3RleHRCZWdpbiwgdGV4dEVuZF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRNb3VzZURvd25JbmRleChbXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRPZmZzZXQob2Zmc2V0LCBzdWdnZXN0UG9zaXRpb24gPSAndG9wJywgc2hvdyA9IHRydWUpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGV4dEVsLCBhcmVhRWwsIHN1Z2dlc3QsIGZyZWV6ZSwgZWwsXG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmFyZWFPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LCBsLCB0LFxuICAgICAgICAgICAgfSA9IG9mZnNldDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWZ0OicsIGxlZnQsICcsdG9wOicsIHRvcCwgJywgZnJlZXplOicsIGZyZWV6ZSk7XG4gICAgICAgICAgICBjb25zdCBlbE9mZnNldCA9IHtsZWZ0OiAwLCB0b3A6IDB9O1xuICAgICAgICAgICAgLy8gdG9wIGxlZnRcbiAgICAgICAgICAgIGlmIChmcmVlemUudyA+IGwgJiYgZnJlZXplLmggPiB0KSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJlZXplLncgPCBsICYmIGZyZWV6ZS5oIDwgdCkge1xuICAgICAgICAgICAgICAgIGVsT2Zmc2V0LmxlZnQgPSBmcmVlemUudztcbiAgICAgICAgICAgICAgICBlbE9mZnNldC50b3AgPSBmcmVlemUuaDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJlZXplLncgPiBsKSB7XG4gICAgICAgICAgICAgICAgZWxPZmZzZXQudG9wID0gZnJlZXplLmg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyZWV6ZS5oID4gdCkge1xuICAgICAgICAgICAgICAgIGVsT2Zmc2V0LmxlZnQgPSBmcmVlemUudztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwub2Zmc2V0KGVsT2Zmc2V0KTtcbiAgICAgICAgICAgIGFyZWFFbC5vZmZzZXQoe2xlZnQ6IGxlZnQgLSBlbE9mZnNldC5sZWZ0IC0gMC44LCB0b3A6IHRvcCAtIGVsT2Zmc2V0LnRvcCAtIDAuOH0pO1xuICAgICAgICAgICAgdGV4dEVsLm9mZnNldCh7d2lkdGg6IHdpZHRoIC0gMiArIDAuOCwgaGVpZ2h0OiBoZWlnaHQgLSAzICsgMC44fSk7XG4gICAgICAgICAgICBjb25zdCBzT2Zmc2V0ID0ge2xlZnQ6IDB9O1xuICAgICAgICAgICAgc09mZnNldFtzdWdnZXN0UG9zaXRpb25dID0gaGVpZ2h0O1xuICAgICAgICAgICAgLy8gc3VnZ2VzdC5zZXRPZmZzZXQoc09mZnNldCk7XG4gICAgICAgICAgICBzdWdnZXN0LmhpZGUoKTtcbiAgICAgICAgICAgIHJlc2V0VGV4dGFyZWFTaXplLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDZWxsRW5kKGNlbGwpIHtcbiAgICAgICAgbGV0IHRleHQgPSAnJztcbiAgICAgICAgbGV0IGZvcm11bGFzID0gKGNlbGwgJiYgY2VsbC5mb3JtdWxhcykgfHwgJyc7XG4gICAgICAgIGlmIChpc0hhdmUoY2VsbCkgJiYgaXNIYXZlKGNlbGwudGV4dCkpIHtcbiAgICAgICAgICAgIHRleHQgPSBjZWxsLnRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIYXZlKGNlbGwpICYmIGlzSGF2ZShjZWxsLmZvcm11bGFzKSkge1xuICAgICAgICAgICAgdGV4dCA9IGNlbGwuZm9ybXVsYXM7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICAgICAgbGV0IHtyb3dzfSA9IGRhdGE7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZGF0YS5nZXRDZWxsU3R5bGVPckRlZmF1bHQodGhpcy5yaSwgdGhpcy5jaSk7XG4gICAgICAgIGxldCBhcmdzID0gZGF0YS5yZW5kZXJGb3JtYXQoc3R5bGUsIGNlbGwsIHRoaXMucmksIHRoaXMuY2ksIHRydWUpO1xuICAgICAgICBpZihhcmdzLnN0YXRlKSB7XG4gICAgICAgICAgICB0ZXh0ID0gYXJncy5jZWxsVGV4dDtcbiAgICAgICAgICAgIGZvcm11bGFzID0gYXJncy5jZWxsVGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGV4dEVsLmNoaWxkKHRleHQgKyBcIlwiKTtcbiAgICAgICAgdGhpcy5wb3MgPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwsIC0xKTtcblxuICAgICAgICB0aGlzLmVkaXRvclRleHQuc2V0T2xkQ2VsbCh7XG4gICAgICAgICAgICB0ZXh0OiAoY2VsbCAmJiBjZWxsLnRleHQpIHx8ICcnLFxuICAgICAgICAgICAgZm9ybXVsYXM6IChjZWxsICYmIGNlbGwuZm9ybXVsYXMpIHx8ICcnLFxuICAgICAgICB9LCB7cmk6IHRoaXMucmksIGNpOiB0aGlzLmNpfSk7XG5cbiAgICAgICAgdGVzdFZhbGlkLmNhbGwodGhpcyk7XG4gICAgICAgIGlucHV0RXZlbnRIYW5kbGVyLmNhbGwodGhpcywgbnVsbCwgdGV4dCwgZm9ybXVsYXMsIFwiZW5kXCIpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wb3MgPSByb3dzLnRvU3RyaW5nKHRleHQpLmxlbmd0aDtcbiAgICAgICAgICAgIHNldF9mb2N1cy5jYWxsKHRoaXMsIHRoaXMudGV4dEVsLmVsLCAtMSk7XG4gICAgICAgIH0sIDIwKVxuICAgIH1cblxuICAgIHNldENlbGwoY2VsbCwgdmFsaWRhdG9yLCB0eXBlID0gMSkge1xuICAgICAgICB0aGlzLmNlbGwgPSBjZWxsO1xuICAgICAgICB0aGlzLnNob3coKTtcblxuICAgICAgICBsZXQgdGV4dCA9IChjZWxsICYmIGNlbGwuZm9ybXVsYXMpIHx8ICcnO1xuICAgICAgICB0ZXh0ID0gdGV4dCA9PT0gJycgPyAoY2VsbCAmJiBjZWxsLnRleHQpIHx8ICcnIDogdGV4dDtcblxuICAgICAgICB0aGlzLmVkaXRvclRleHQuc2V0T2xkQ2VsbCh7XG4gICAgICAgICAgICB0ZXh0OiAoY2VsbCAmJiBjZWxsLnRleHQpIHx8ICcnLFxuICAgICAgICAgICAgZm9ybXVsYXM6IChjZWxsICYmIGNlbGwuZm9ybXVsYXMpIHx8ICcnLFxuICAgICAgICB9LCB7cmk6IHRoaXMucmksIGNpOiB0aGlzLmNpfSk7XG4gICAgICAgIGNvbnN0IHtlbCwgZGF0ZXBpY2tlciwgc3VnZ2VzdH0gPSB0aGlzO1xuICAgICAgICBlbC5zaG93KCk7XG4gICAgICAgIHRoaXMudGV4dEVsLnNob3coKTtcbiAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwsIC0xKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IHRleHQubGVuZ3RoO1xuICAgICAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwpO1xuICAgICAgICB9LCAxMCk7XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gdmFsaWRhdG9yO1xuICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBjb25zdCB7dHlwZX0gPSB2YWxpZGF0b3I7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgZGF0ZXBpY2tlci5zaG93KCk7XG4gICAgICAgICAgICAgICAgaWYgKCEvXlxccyokLy50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVwaWNrZXIuc2V0VmFsdWUodGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdsaXN0Jykge1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Quc2V0SXRlbXModmFsaWRhdG9yLnZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICBzdWdnZXN0LnNlYXJjaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gMiAmJiB0ZXh0ICE9PSAnJyAmJiB0ZXh0WzBdID09PSAnPScpIHtcbiAgICAgICAgICAgIGlucHV0RXZlbnRIYW5kbGVyLmNhbGwodGhpcywgbnVsbCwgdGV4dCk7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IHRleHQubGVuZ3RoO1xuICAgICAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwsIHRleHQubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAyICYmIHRleHRbMF0gIT09ICc9Jykge1xuICAgICAgICAgICAgdGhpcy50ZXh0RWwuY2hpbGQodGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRleHRsaW5lRWwuaHRtbCh0ZXh0KTtcbiAgICAgICAgICAgIHJlc2V0VGV4dGFyZWFTaXplLmNhbGwodGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGlucHV0RXZlbnRIYW5kbGVyKHRleHQgPSAnJywgcG9zID0gMSwgaGlkZSA9IGZhbHNlKSB7XG4gICAgLy8gICAgIGlmIChoaWRlKSB7XG4gICAgLy8gICAgICAgICB0aGlzLmFyZWFFbC5oaWRlKCk7XG4gICAgLy8gICAgICAgICB0aGlzLmJlbG9uZ1NoZWV0LnNlbGVjdG9yLmhpZGUoKTtcbiAgICAvLyAgICAgICAgIHRoaXMuaXNDb3JzID0gdHJ1ZTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICB0aGlzLnNldEN1cnNvclBvcyhwb3MpO1xuICAgIC8vICAgICBpbnB1dEV2ZW50SGFuZGxlci5jYWxsKHRoaXMsIG51bGwsIHRleHQpO1xuICAgIC8vIH1cblxuICAgIC8vIGlzRGlzcGxheSgpIHtcbiAgICAvLyAgICAgbGV0IHtlZGl0b3JUZXh0fSA9IHRoaXM7XG4gICAgLy9cbiAgICAvLyAgICAgcmV0dXJuIGlzRGlzcGxheS5jYWxsKHRoaXMpICYmIGVkaXRvclRleHQuaXNGb3JtdWxhKCk7XG4gICAgLy8gfVxuXG4gICAgaXNEaXNwbGF5MigpIHtcbiAgICAgICAgcmV0dXJuIGlzRGlzcGxheS5jYWxsKHRoaXMpXG4gICAgfVxuXG4gICAgc2V0Q3Vyc29yUG9zKHBvcykge1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgc2V0X2ZvY3VzLmNhbGwodGhpcywgdGhpcy50ZXh0RWwuZWwpO1xuICAgIH1cblxuICAgIHNldFRleHQodGV4dCkge1xuICAgICAgICBsZXQge2VkaXRvclRleHR9ID0gdGhpcztcbiAgICAgICAgZWRpdG9yVGV4dC5zZXRUZXh0KHRleHQpO1xuICAgICAgICAvLyB0aGlzLmlucHV0VGV4dCA9IHRleHQ7XG4gICAgICAgIHNldFRleHQuY2FsbCh0aGlzLCB0ZXh0KTtcbiAgICAgICAgcmVzZXRUZXh0YXJlYVNpemUuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy50ZXh0RWwuY2hpbGQodGhpcy50bXApO1xuICAgIH1cbn1cbiIsImltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyJztcbmltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgY3NzUHJlZml4IH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7Y2FsZW5kYXJQYXR0ZXJuLCBzdHIyUmV9IGZyb20gXCIuLi91dGlscy9yZWdfcGF0dGVyblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRlcGlja2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jYWxlbmRhciA9IG5ldyBDYWxlbmRhcihuZXcgRGF0ZSgpKTtcbiAgICB0aGlzLmVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1kYXRlcGlja2VyYCkuY2hpbGQoXG4gICAgICB0aGlzLmNhbGVuZGFyLmVsLFxuICAgICkuaGlkZSgpO1xuICB9XG5cbiAgc2V0VmFsdWUoZGF0ZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCc6Ojo6Ojo6JywgZGF0ZSwgdHlwZW9mIGRhdGUsIGRhdGUgaW5zdGFuY2VvZiBzdHJpbmcpO1xuICAgIGNvbnN0IHsgY2FsZW5kYXIgfSA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gY29uc29sZS5sb2coL15cXGR7NH0tXFxkezEsMn0tXFxkezEsMn0kLy50ZXN0KGRhdGUpKTtcbiAgICAgIGlmIChzdHIyUmUoY2FsZW5kYXJQYXR0ZXJuKS50ZXN0KGRhdGUpKSB7IC8vIGpvYnM6IHRvZG86IOato+WImeihqOi+vuW8j+aKveWPluWHuuadpVxuICAgICAgICBjYWxlbmRhci5zZXRWYWx1ZShuZXcgRGF0ZShkYXRlLnJlcGxhY2UobmV3IFJlZ0V4cCgnLScsICdnJyksICcvJykpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICBjYWxlbmRhci5zZXRWYWx1ZShkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjaGFuZ2UoY2IpIHtcbiAgICB0aGlzLmNhbGVuZGFyLnNlbGVjdENoYW5nZSA9IChkKSA9PiB7XG4gICAgICBjYihkKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH07XG4gIH1cblxuICBzaG93KCkge1xuICAgIHRoaXMuZWwuc2hvdygpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLmVsLmhpZGUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuL2ljb24nO1xuaW1wb3J0IHsgdCB9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGUnO1xuXG5mdW5jdGlvbiBhZGRNb250aChkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59XG5cbmZ1bmN0aW9uIHdlZWtkYXkoZGF0ZSwgaW5kZXgpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGRhdGUpO1xuICBkLnNldERhdGUoaW5kZXggLSBkYXRlLmdldERheSgpICsgMSk7XG4gIHJldHVybiBkO1xufVxuXG5mdW5jdGlvbiBtb250aERheXMoeWVhciwgbW9udGgsIGNkYXRlKSB7XG4gIC8vIHRoZSBmaXJzdCBkYXkgb2YgbW9udGhcbiAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEsIDIzLCA1OSwgNTkpO1xuICBjb25zdCBkYXRlc3MgPSBbW10sIFtdLCBbXSwgW10sIFtdLCBbXV07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSArPSAxKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCA3OyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAqIDcgKyBqO1xuICAgICAgY29uc3QgZCA9IHdlZWtkYXkoc3RhcnREYXRlLCBpbmRleCk7XG4gICAgICBjb25zdCBkaXNhYmxlZCA9IGQuZ2V0TW9udGgoKSAhPT0gbW9udGg7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZDonLCBkLCAnLCBjZGF0ZTonLCBjZGF0ZSk7XG4gICAgICBjb25zdCBhY3RpdmUgPSBkLmdldE1vbnRoKCkgPT09IGNkYXRlLmdldE1vbnRoKCkgJiYgZC5nZXREYXRlKCkgPT09IGNkYXRlLmdldERhdGUoKTtcbiAgICAgIGRhdGVzc1tpXVtqXSA9IHsgZCwgZGlzYWJsZWQsIGFjdGl2ZSB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0ZXNzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWxlbmRhciB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuY3ZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuXG4gICAgdGhpcy5oZWFkZXJMZWZ0RWwgPSBoKCdkaXYnLCAnY2FsZW5kYXItaGVhZGVyLWxlZnQnKTtcbiAgICB0aGlzLmJvZHlFbCA9IGgoJ3Rib2R5JywgJycpO1xuICAgIHRoaXMuYnVpbGRBbGwoKTtcbiAgICB0aGlzLmVsID0gaCgnZGl2JywgJ2Zpbi1jZWxsLWNhbGVuZGFyJylcbiAgICAgIC5jaGlsZHJlbihcbiAgICAgICAgaCgnZGl2JywgJ2NhbGVuZGFyLWhlYWRlcicpLmNoaWxkcmVuKFxuICAgICAgICAgIHRoaXMuaGVhZGVyTGVmdEVsLFxuICAgICAgICAgIGgoJ2RpdicsICdjYWxlbmRhci1oZWFkZXItcmlnaHQnKS5jaGlsZHJlbihcbiAgICAgICAgICAgIGgoJ2EnLCAnY2FsZW5kYXItcHJldicpXG4gICAgICAgICAgICAgIC5vbignY2xpY2suc3RvcCcsICgpID0+IHRoaXMucHJldigpKVxuICAgICAgICAgICAgICAuY2hpbGQobmV3IEljb24oJ2NoZXZyb24tbGVmdCcpKSxcbiAgICAgICAgICAgIGgoJ2EnLCAnY2FsZW5kYXItbmV4dCcpXG4gICAgICAgICAgICAgIC5vbignY2xpY2suc3RvcCcsICgpID0+IHRoaXMubmV4dCgpKVxuICAgICAgICAgICAgICAuY2hpbGQobmV3IEljb24oJ2NoZXZyb24tcmlnaHQnKSksXG4gICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgICAgaCgndGFibGUnLCAnY2FsZW5kYXItYm9keScpLmNoaWxkcmVuKFxuICAgICAgICAgIGgoJ3RoZWFkJywgJycpLmNoaWxkKFxuICAgICAgICAgICAgaCgndHInLCAnJykuY2hpbGRyZW4oXG4gICAgICAgICAgICAgIC4uLnQoJ2NhbGVuZGFyLndlZWtzJykubWFwKHdlZWsgPT4gaCgndGgnLCAnY2VsbCcpLmNoaWxkKHdlZWspKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKSxcbiAgICAgICAgICB0aGlzLmJvZHlFbCxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgdGhpcy5zZWxlY3RDaGFuZ2UgPSAoKSA9PiB7fTtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuY3ZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgIHRoaXMuYnVpbGRBbGwoKTtcbiAgfVxuXG4gIHByZXYoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcztcbiAgICBhZGRNb250aCh2YWx1ZSwgLTEpO1xuICAgIHRoaXMuYnVpbGRBbGwoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcztcbiAgICBhZGRNb250aCh2YWx1ZSwgMSk7XG4gICAgdGhpcy5idWlsZEFsbCgpO1xuICB9XG5cbiAgYnVpbGRBbGwoKSB7XG4gICAgdGhpcy5idWlsZEhlYWRlckxlZnQoKTtcbiAgICB0aGlzLmJ1aWxkQm9keSgpO1xuICB9XG5cbiAgYnVpbGRIZWFkZXJMZWZ0KCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXM7XG4gICAgdGhpcy5oZWFkZXJMZWZ0RWwuaHRtbChgJHt0KCdjYWxlbmRhci5tb250aHMnKVt2YWx1ZS5nZXRNb250aCgpXX0gJHt2YWx1ZS5nZXRGdWxsWWVhcigpfWApO1xuICB9XG5cbiAgYnVpbGRCb2R5KCkge1xuICAgIGNvbnN0IHsgdmFsdWUsIGN2YWx1ZSwgYm9keUVsIH0gPSB0aGlzO1xuICAgIGNvbnN0IG1EYXlzID0gbW9udGhEYXlzKHZhbHVlLmdldEZ1bGxZZWFyKCksIHZhbHVlLmdldE1vbnRoKCksIGN2YWx1ZSk7XG4gICAgY29uc3QgdHJzID0gbURheXMubWFwKChpdCkgPT4ge1xuICAgICAgY29uc3QgdGRzID0gaXQubWFwKChpdDEpID0+IHtcbiAgICAgICAgbGV0IGNscyA9ICdjZWxsJztcbiAgICAgICAgaWYgKGl0MS5kaXNhYmxlZCkgY2xzICs9ICcgZGlzYWJsZWQnO1xuICAgICAgICBpZiAoaXQxLmFjdGl2ZSkgY2xzICs9ICcgYWN0aXZlJztcbiAgICAgICAgcmV0dXJuIGgoJ3RkJywgJycpLmNoaWxkKFxuICAgICAgICAgIGgoJ2RpdicsIGNscylcbiAgICAgICAgICAgIC5vbignY2xpY2suc3RvcCcsICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDaGFuZ2UoaXQxLmQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jaGlsZChpdDEuZC5nZXREYXRlKCkudG9TdHJpbmcoKSksXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoKCd0cicsICcnKS5jaGlsZHJlbiguLi50ZHMpO1xuICAgIH0pO1xuICAgIGJvZHlFbC5odG1sKCcnKS5jaGlsZHJlbiguLi50cnMpO1xuICB9XG59XG4iLCJpbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtofSBmcm9tIFwiLi4vY29tcG9uZW50L2VsZW1lbnRcIjtcbmltcG9ydCB7aGVscEZvcm11bGF9IGZyb20gXCIuLi9jYWxjL2NhbGNfY21kL2ZuX3N1Z2dlc3Rpb25cIjtcbmltcG9ydCB7YmluZH0gZnJvbSBcIi4vZXZlbnRcIjtcblxuZnVuY3Rpb24gdmFyaWFibGVFbGVtZW50KGNvbnRlbnQsIHR4dCwgcG9zLCBjbGFzc05hbWUsIHMgPSBcIlwiLCBzMiA9IFwiXCIpIHtcbiAgICBsZXQgaXRlbSA9IGgoJ2RpdicsIGNsYXNzTmFtZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50W3R4dF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGN0ID0gY29udGVudFt0eHRdW2ldO1xuICAgICAgICBsZXQge25hbWUsIGVkaXRvciwgaW5kZXh9ID0gY3Q7XG5cbiAgICAgICAgaWYgKHBvcyA9PT0gaSkge1xuICAgICAgICAgICAgaXRlbS5jaGlsZChoKCdzcGFuJywgcykuY2hpbGQobmFtZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGVkaXRvciA9PT0gdHJ1ZSAmJiBwb3MgPj0gaW5kZXgpIHtcbiAgICAgICAgICAgIGl0ZW0uY2hpbGQoaCgnc3BhbicsIHMpLmNoaWxkKG5hbWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uY2hpbGQoaCgnc3BhbicsIHMyKS5jaGlsZChuYW1lKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VnZ2VzdENvbnRlbnQge1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoID0gXCIzMDBweFwiKSB7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXN1Z2dlc3QtY29udGVudGApLmNzcygnd2lkdGgnLCB3aWR0aCkuY3NzKCd6LWluZGV4JywgXCIxMDAwMFwiKS5jc3MoJ3Bvc2l0aW9uJywgXCJhYnNvbHV0ZVwiKS5oaWRlKCk7XG4gICAgICAgIHRoaXMuZWwuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgYmluZCh0aGlzLmVsLmVsLCAncGFzdGUnLCBldnQgPT4ge1xuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgYmluZCh0aGlzLmVsLmVsLCAnY29weScsIGV2dCA9PiB7XG4gICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBiaW5kKHRoaXMuZWwuZWwsICdrZXlkb3duJywgZXZ0ID0+IHtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJpbmQodGhpcy5lbC5lbCwgJ2tleXVwJywgZXZ0ID0+IHtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgY29uc3Qge2VsfSA9IHRoaXM7XG4gICAgICAgIGVsLmhpZGUoKTtcbiAgICB9XG5cbiAgICBjb250ZW50KGN1dCA9IFwiXCIsIHBvcyA9IC0xKSB7XG4gICAgICAgIGNvbnN0IHtlbH0gPSB0aGlzO1xuXG4gICAgICAgIGN1dCA9IGN1dC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAvLyBjdXQg5om+5Yiw5YaF5a65XG4gICAgICAgIGxldCBjb250ZW50ID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGhlbHBGb3JtdWxhKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgaWYgKGkgPT09IGN1dCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBoZWxwRm9ybXVsYVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFjb250ZW50IHx8IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpID09PSAne30nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IHRpdGxlID0gdmFyaWFibGVFbGVtZW50LmNhbGwodGhpcywgY29udGVudCwgXCJ0aXRsZVwiLCBwb3MsIGAke2Nzc1ByZWZpeH0taGVscC10aXRsZWAsIGAke2Nzc1ByZWZpeH0taGVscC1zcGFuLXRpdGxlYCwgYCR7Y3NzUHJlZml4fS1oZWxwLXNwYW4yLXRpdGxlYCk7XG4gICAgICAgIGxldCBleGFtcGxlTmFtZSA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taGVscC1zZWN0aW9uLXRpdGxlYCkuY2hpbGQoXCLnpLrkvotcIik7XG4gICAgICAgIGxldCBleGFtcGxlID0gdmFyaWFibGVFbGVtZW50LmNhbGwodGhpcywgY29udGVudCwgXCJleGFtcGxlXCIsIHBvcywgYCR7Y3NzUHJlZml4fS1oZWxwLXNlY3Rpb24tY29udGVudGAsIGAke2Nzc1ByZWZpeH0taGVscC1zcGFuMy10aXRsZWApO1xuICAgICAgICBpdGVtcy5wdXNoKC4uLlt0aXRsZSwgZXhhbXBsZU5hbWUsIGV4YW1wbGVdKTtcbiAgICAgICAgT2JqZWN0LmtleXMoY29udGVudC5jb250ZW50KS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgbGV0IGMgPSBjb250ZW50LmNvbnRlbnRbaV07XG4gICAgICAgICAgICBsZXQgaXRlbSA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taGVscC1zZWN0aW9uLXRpdGxlYCkuY2hpbGQoaSk7XG4gICAgICAgICAgICBsZXQgaXRlbTIgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWhlbHAtc2VjdGlvbi1jb250ZW50YCkuY2hpbGQoYyk7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKC4uLltpdGVtLCBpdGVtMl0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbC5odG1sKCcnKS5jaGlsZHJlbiguLi5pdGVtcykuc2hvdygpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBoZWxwRm9ybXVsYSA9IHtcbiAgICBcIkFERFwiOiB7ICAgIC8vIOWHveaVsOWQjeensO+8jCDlv4XpobvopoHlpKflhpnvvIwg5piv5LiA5Liq5a+56LGhXG4gICAgICAgIFwidGl0bGVcIjogWyAgICAvLyDmmK/kuIDkuKrmlbDnu4TvvIwg6ZyA6KaB5oqKIO+8iO+8ieWGheeahOino+aekOWHuuadpVxuICAgICAgICAgICAgLy8gIEFERCh2YWx1ZTEsIHZhbHVlMikgIOWwseiiq+ino+aekOaIkOWmguS4i+aJgOekulxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFERChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZSAgICAvLyDkuIvpnaLmnInku4vnu43or6XlrZfmrrVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIu+8jFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogWyAgICAgICAgICAgICAgIC8vIOWQjHRpdGxlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUREKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi77yMXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjogeyAgICAgICAgICAgICAvLyDov5npg6jliIbmmK/lhoXlrrnor7TmmI7jgIJcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuKTkuKrmlbDlgLzkuYvlkozjgILnm7jlvZPkuo4gKyDov5DnrpfnrKbjgIJcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi56ys5LiA5Liq5Yqg5pWw44CCXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuesrOS6jOS4quWKoOaVsOOAglwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklSUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklSUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZXNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ3Vlc3NcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFsgICAgICAgICAgICAgICAvLyDlkIx0aXRsZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklSUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkExOkExMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnueUseaVsOWAvOS7o+ihqOeahOS4gOe7hOeOsOmHkea1geeahOWGhemDqOaUtuebiueOh+OAgui/meS6m+eOsOmHkea1geS4jeW/heS4uuWdh+ihoeeahO+8jOS9huS9nOS4uuW5tOmHke+8jOWug+S7rOW/hemhu+aMieWbuuWumueahOmXtOmalOS6p+eUn++8jOWmguaMieaciOaIluaMieW5tOOAguWGhemDqOaUtuebiueOh+S4uuaKlei1hOeahOWbnuaUtuWIqeeOh++8jOWFtuS4reWMheWQq+Wumuacn+aUr+S7mO+8iOi0n+WAvO+8ieWSjOWumuacn+aUtuWFpe+8iOato+WAvO+8ieOAglwiLFxuICAgICAgICAgICAgXCJ2YWx1ZXNcIjogXCLkuLrmlbDnu4TmiJbljZXlhYPmoLznmoTlvJXnlKjvvIzljIXlkKvnlKjmnaXorqHnrpfov5Tlm57nmoTlhoXpg6jmlLbnm4rnjofnmoTmlbDlrZfjgILoh7PlsJHlkITlkKvkuIDkuKrmraPlgLzlkozkuIDkuKrotJ/lgLxcIixcbiAgICAgICAgICAgIFwiZ3Vlc3NcIjogXCLlr7nlh73mlbAgSVJSIOiuoeeul+e7k+aenOeahOS8sOiuoeWAvO+8jOm7mOiupOS4ujAuMVwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNVTVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNVTShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIu+8jFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsIC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLCAgICAgICAgICAgICAgICAgLy8g5YOP6L+Z56eN5oOF5Ya1IFt2YWx1ZTIsIC4uLl3vvIxcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgZWRpdG9y5bCx5pivdHJ1ZSwgICBpbmRleCDkuLozIOaYryDlm6DkuLrku44oIOe0ouW8leS4ujNcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMDBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxMDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4TmlbDlgLzlkowv5oiW5Y2V5YWD5qC855qE5oC75ZKM44CCXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgeebuOWKoOeahOesrOS4gOS4quaVsOWAvOaIluiMg+WbtOOAglwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLopoHkuI7igJx2YWx1ZTHigJ3nm7jliqDnmoTlhbbku5bmlbDlgLzmiJbojIPlm7TjgIJcIixcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBQlNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBQlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2UgICAgLy8g5LiL6Z2i5pyJ5LuL57uN6K+l5a2X5q61XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFsgICAgICAgICAgICAgICAvLyDlkIx0aXRsZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFCUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjogeyAgICAgICAgICAgICAvLyDov5npg6jliIbmmK/lhoXlrrnor7TmmI7jgIJcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDlrZfnmoTnu53lr7nlgLzjgILnu53lr7nlgLzmsqHmnInnrKblj7fjgIJcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHorqHnrpflhbbnu53lr7nlgLznmoTlrp7mlbDjgIJcIixcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTUVJUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1FSVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZSAgICAvLyDkuIvpnaLmnInku4vnu43or6XlrZfmrrVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogWyAgICAgICAgICAgICAgIC8vIOWQjHRpdGxlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1FSVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7ICAgICAgICAgICAgIC8vIOi/memDqOWIhuaYr+WGheWuueivtOaYjuOAglxuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuato+W5s+aWueagueOAglwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgeiuoeeul+W5s+aWueagueeahOaVsOOAglwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNFSUxJTkdcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDRUlMSU5HKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzaWduaWZpY2FuY2VcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDRUlMSU5HKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEwLjRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjogeyAgICAgICAgICAgICAvLyDov5npg6jliIbmmK/lhoXlrrnor7TmmI7jgIJcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIblj4LmlbAgTnVtYmVyIOWQkeS4iuiIjeWFpe+8iOayv+e7neWvueWAvOWinuWkp+eahOaWueWQke+8ieS4uuacgOaOpei/keeahCBzaWduaWZpY2FuY2Ug55qE5YCN5pWw44CCXCIsXG4gICAgICAgICAgICBcIm51bWJlclwiOiBcIuaJgOimgeWbm+iIjeS6lOWFpeeahOaVsOWAvOOAglwiLFxuICAgICAgICAgICAgXCJzaWduaWZpY2FuY2VcIjogXCLnlKjku6Xov5vooYzoiI3lhaXorqHnrpfnmoTlgI3mlbDjgIJcIixcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT05DQVRFTkFURVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPTkNBVEVOQVRFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHQxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLvvIxcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdGV4dDIsIC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLCAgICAgICAgICAgICAgICAgLy8g5YOP6L+Z56eN5oOF5Ya1IFt2YWx1ZTIsIC4uLl3vvIxcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgZWRpdG9y5bCx5pivdHJ1ZSwgICBpbmRleCDkuLozIOaYryDlm6DkuLrku44oIOe0ouW8leS4ujNcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09OQ0FURU5BVEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5paH5pysMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIu+8jFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaWh+acrDJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbkuKTkuKrmiJblpJrkuKrmlofmnKzlrZfnrKbkuLLlkIjlubbkuLrkuIDkuKrmlofmnKzlrZfnrKbkuLLjgIJcIixcbiAgICAgICAgICAgIFwidGV4dDFcIjogXCLlvoXlkIjlubbmlofmnKzlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwidGV4dDJcIjogXCLopoHkuI7igJx0ZXh0MeKAneWQiOW5tueahOWFtuS7luW+heWQiOW5tuaWh+acrOWtl+espuS4suOAglwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBNVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBNVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJyYXRlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm5wZXJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicHZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZnZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBNVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwLjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTIwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEwMDBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7ICAgICAgICAgICAgIC8vIOi/memDqOWIhuaYr+WGheWuueivtOaYjuOAglxuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWfuuS6juWbuuWumuWIqeeOh+WPiuetiemineWIhuacn+S7mOasvuaWueW8j++8jOi/lOWbnui0t+asvueahOavj+acn+S7mOasvumineOAglwiLFxuICAgICAgICAgICAgXCJyYXRlXCI6IFwi6LS35qy+5Yip546H44CCXCIsXG4gICAgICAgICAgICBcIm5wZXJcIjogXCLor6XpobnotLfmrL7nmoTku5jmrL7mnJ/mlbDjgIJcIixcbiAgICAgICAgICAgIFwicHZcIjogXCLnjrDlgLzvvIzmiJbkuIDns7vliJfmnKrmnaXku5jmrL7nmoTlvZPliY3lgLznmoTntK/np6/lkozvvIzkuZ/np7DkuLrmnKzph5HjgIJcIixcbiAgICAgICAgICAgIFwiZnZcIjogXCLkuLrmnKrmnaXlgLzvvIzmiJblnKjmnIDlkI7kuIDmrKHku5jmrL7lkI7luIzmnJvlvpfliLDnmoTnjrDph5HkvZnpop3vvIzlpoLmnpznnIHnlaUgZnbvvIzliJnlgYforr7lhbblgLzkuLrpm7bvvIzkuZ/lsLHmmK/kuIDnrJTotLfmrL7nmoTmnKrmnaXlgLzkuLrpm7bjgIJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIuaMh+WumuWQhOacn+eahOS7mOasvuaXtumXtOaYr+WcqOacn+WInei/mOaYr+acn+acq+OAgjDmiJbogIXnnIHnlaXkuLrmnJ/liJ3vvIwx5Li65pyf5pyrXCIsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09VTlRBXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VTlRBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi77yMXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwgLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVU5UQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi77yMXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lj4LmlbDliJfooajkuK3pnZ7nqbrlgLznmoTljZXlhYPmoLzkuKrmlbDjgIJcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB6K6h5pWw55qE5Y2V5YWD5qC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeiuoeaVsOeahOWNleWFg+agvFwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNUREVWXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1RERVYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVERFVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBMTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjpcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOmZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOlwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjp0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLkvLDnrpfln7rkuo7moLfmnKznmoTmoIflh4blgY/lt65cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5a+55bqU5LqO5oC75L2T5qC35pys55qE56ys5LiA5Liq5pWw5YC85Y+C5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWvueW6lOS6juaAu+S9k+agt+acrOeahCAyIOWIsCAyNTUg5Liq5pWw5YC85Y+C5pWw44CC5Lmf5Y+v5Lul55So5Y2V5LiA5pWw57uE5oiW5a+55p+Q5Liq5pWw57uE55qE5byV55So5p2l5Luj5pu/55So6YCX5Y+35YiG6ZqU55qE5Y+C5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBVkVSQUdFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVZFUkFHRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFt7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJBVkVSQUdFKFwiLFxuICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH1dLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPguaVsOeahOW5s+Wdh+WAvCAo566X5pyv5bmz5Z2H5YC8KVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHorqHnrpflubPlnYflgLznmoTnrKzkuIDkuKrmlbDlrZfjgIHljZXlhYPmoLzlvJXnlKjmiJbljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB6K6h566X5bmz5Z2H5YC855qE5YW25LuW5pWw5a2X44CB5Y2V5YWD5qC85byV55So5oiW5Y2V5YWD5qC85Yy65Z+f77yM5pyA5aSa5Y+v5YyF5ZCrIDI1NSDkuKpcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkVYUFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkV4cChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFeHAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbniBlIOeahCBuIOasoeW5glwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlupXmlbAgZSDnmoTmjIfmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkxOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiODZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDkuKrmlbDnmoToh6rnhLblr7nmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5oOz6KaB6K6h566X5YW26Ieq54S25a+55pWw55qE5q2j5a6e5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJUUklNXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJJTShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJJTShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIoJyBGaXJzdCBRdWFydGVyIEVhcm5pbmdzICAnKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLpmaTkuobljZXor43kuYvpl7TnmoTljZXkuKrnqbrmoLzlpJbvvIzmuIXpmaTmlofmnKzkuK3miYDmnInnmoTnqbrmoLxcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIumcgOimgeWIoOmZpOWFtuS4reepuuagvOeahOaWh+acrFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSFlQRVJMSU5LXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSFlQRVJMSU5LKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnvZHlnYBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+mTvuaOpeagh+etvl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSFlQRVJMSU5LKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogJ1wiaHR0cDovL3d3dy5nb29nbGUuY29tL1wiJyxcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXFxcIkdvb2dsZVxcXCJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Zyo5Y2V5YWD5qC85YaF5Yib5bu65LiA5Liq6LaF6ZO+5o6l44CCXCIsXG4gICAgICAgICAgICBcInVybFwiOiBcIuS7peW8leWPt+aLrOS9j+eahOmTvuaOpeS9jee9rueahOWujOaVtOe9keWdgO+8jOaIluWvueWMheWQq+i/meenjee9keWdgOeahOWNleWFg+agvOeahOW8leeUqOOAglwiLFxuICAgICAgICAgICAgXCJsaW5rdGFnXCI6IFwi55So5byV5Y+35ous5L2P55qE6KaB5Zyo5Y2V5YWD5qC85Lit5L2c5Li66ZO+5o6l5pi+56S655qE5paH5a2X77yM5oiW5a+55YyF5ZCr5q2k57G75qCH562+55qE5Y2V5YWD5qC855qE5byV55So44CCXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJMRU5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMRU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMRU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5paH5pys5a2X56ym5Liy5Lit55qE5a2X56ym5pWwXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLopoHmn6Xmib7lhbbplb/luqbnmoTmlofmnKws5Lmf5Y+v5Li65Y2V5YWD5qC85byV55So44CC56m65qC85bCG5L2c5Li65a2X56ym6L+b6KGM6K6h5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJU0JMQU5LXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNCTEFOSyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNCTEFOSyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLmo4DpqozmjIflrprlgLzlubbmoLnmja7lj4LmlbDlj5blgLzov5Tlm54gVFJVRSDmiJYgRkFMU0VcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5qOA6aqM55qE5YC844CC5Y+C5pWwIHZhbHVlIOWPr+S7peaYr+epuueZve+8iOepuuWNleWFg+agvO+8ieOAgemUmeivr+WAvOOAgemAu+i+keWAvOOAgeaWh+acrOOAgeaVsOWtl+OAgeW8leeUqOWAvO+8jOaIluiAheW8leeUqOimgeajgOmqjOeahOS7peS4iuS7u+aEj+WAvOeahOWQjeensFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQUNDUklOVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFDQ1JJTlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yip546HXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuelqOmdouWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlubTku5jmga/mrKHmlbBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNDUklOVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lrprmnJ/ku5jmga/or4HliLjnmoTlupTorqHliKnmga9cIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLor4HliLjnmoTlj5HooYzml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLor4HliLjnmoTpppbmrKHorqHmga/ml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTNcIjogXCLor4HliLjnmoTnu5Pnrpfml6XjgILor4HliLjnu5Pnrpfml6XmmK/lnKjlj5HooYzml6XmnJ/kuYvlkI7vvIzor4HliLjljZbnu5notK3kubDogIXnmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwicmF0ZVwiOiBcIuivgeWIuOeahOW5tOaBr+elqOWIqeeOh1wiLFxuICAgICAgICAgICAgXCJwcmljZVwiOiBcIuivgeWIuOeahOelqOmdouWAvOOAguWmguaenOecgeeVpeatpOWPguaVsO+8jOWImSBBQ0NSSU5UIOS9v+eUqCDvv6UxLDAwMFwiLFxuICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCLlubTku5jmga/mrKHmlbDjgILlpoLmnpzmjInlubTmlK/ku5jvvIxmcmVxdWVuY3kgPSAx77yb5oyJ5Y2K5bm05pyf5pSv5LuY77yMZnJlcXVlbmN5ID0gMu+8m+aMieWto+aUr+S7mO+8jGZyZXF1ZW5jeSA9IDRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFDQ1JJTlRNXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNDUklOVE0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWIqeeOh1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIidcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnpajpnaLlgLxcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNDUklOVE0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Yiw5pyf5LiA5qyh5oCn5LuY5oGv5pyJ5Lu36K+B5Yi455qE5bqU6K6h5Yip5oGvXCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi6K+B5Yi455qE5Y+R6KGM5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi6K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcInJhdGVcIjogXCLor4HliLjnmoTlubTmga/npajliKnnjodcIixcbiAgICAgICAgICAgIFwicHJpY2VcIjogXCLor4HliLjnmoTnpajpnaLlgLzjgILlpoLmnpznnIHnlaXmraTlj4LmlbDvvIzliJkgQUNDUklOVE0g5L2/55SoIO+/pTEsMDAwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBQ09TXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNPUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNPUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMC41XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVsOWtl+eahOWPjeS9meW8puWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmiYDpnIDnmoTop5LluqbkvZnlvKblgLzvvIzlv4Xpobvku4vkuo4gLTEg5YiwIDEg5LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBQ09TSFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFDT1NIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBQ09TSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIHZhbHVlMSDlj4LmlbDnmoTlj43lj4zmm7LkvZnlvKblgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5aSn5LqO562J5LqOIDEg55qE5Lu75oSP5a6e5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBQ09UXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNPVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNPVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVsOWtl+eahOWPjeS9meWIh+WAvOeahOS4u+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCJ2YWx1ZTEg5Li65omA6ZyA6KeS5bqm55qE5L2Z5YiH5YC844CCIOatpOWAvOW/hemhu+aYr+WunuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQUNPVEhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBQ09USChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQUNPVEgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDlrZfnmoTlj43lj4zmm7LkvZnliIflgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwidmFsdWUxIOeahOe7neWvueWAvOW/hemhu+Wkp+S6jiAxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBTU9SREVHUkNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBTU9SREVHUkMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaKmOaXp+eOh1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBTU9SREVHUkMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5q+P5Liq57uT566X5pyf6Ze055qE5oqY5pen5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIui1hOS6p+WOn+WAvFwiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIui0reWFpei1hOS6p+eahOaXpeacn1wiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuesrOS4gOS4quacn+mXtOe7k+adn+aXtueahOaXpeacn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLotYTkuqflnKjkvb/nlKjlr7/lkb3nu5PmnZ/ml7bnmoTmrovlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5pyf6Ze0XCIsXG4gICAgICAgICAgICBcImRlcHJlY2lhdGlvbnJhdGVcIjogXCLmipjml6fnjodcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFNT1JMSU5DXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQU1PUkxJTkMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pyf6Ze0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaKmOaXp+eOh1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBTU9STElOQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmnJ/pl7RcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5oqY5pen546HXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuavj+S4que7k+eul+acn+mXtOeahOaKmOaXp+WAvO+8jOivpeWHveaVsOS4uuazleWbveS8muiuoeezu+e7n+aPkOS+m+OAguWmguaenOafkOmhuei1hOS6p+aYr+WcqOe7k+eul+acn+mXtOeahOS4reacn+i0reWFpeeahO+8jOWImeaMiee6v+aAp+aKmOaXp+azleiuoeeul1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLotYTkuqfljp/lgLxcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLotK3lhaXotYTkuqfnmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLnrKzkuIDkuKrmnJ/pl7Tnu5PmnZ/ml7bnmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6LWE5Lqn5Zyo5L2/55So5a+/5ZG957uT5p2f5pe255qE5q6L5YC8XCIsXG4gICAgICAgICAgICBcInBlcmlvZFwiOiBcIuacn+mXtFwiLFxuICAgICAgICAgICAgXCJkZXByZWNpYXRpb25yYXRlXCI6IFwi5oqY5pen546HXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBTkRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6YC76L6R5YC8MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb6YC76L6R5YC8MiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQU5EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyPjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI8MTAwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5omA5pyJ5Y+C5pWw55qE6K6h566X57uT5p6c5Li6IFRSVUUg5pe277yMQU5EIOWHveaVsOi/lOWbniBUUlVF77yb5Y+q6KaB5pyJ5LiA5Liq5Y+C5pWw55qE6K6h566X57uT5p6c5Li6IEZBTFNF77yM5Y2z6L+U5ZueIEZBTFNFXCIsXG4gICAgICAgICAgICBcImxvZ2ljMVwiOiBcIuesrOS4gOS4quaDs+imgea1i+ivleS4lOiuoeeul+e7k+aenOWPr+S4uiBUUlVFIOaIliBGQUxTRSDnmoTmnaHku7ZcIixcbiAgICAgICAgICAgIFwibG9naWMyXCI6IFwi5YW25LuW5oOz6KaB5rWL6K+V5LiU6K6h566X57uT5p6c5Y+v5Li6IFRSVUUg5oiWIEZBTFNFIOeahOadoeS7tu+8iOacgOWkmiAyNTUg5Liq5p2h5Lu277yJXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBUkFCSUNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBUkFCSUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBUkFCSUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ0xWSUknXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhue9l+mprOaVsOWtl+i9rOaNouS4uumYv+aLieS8r+aVsOWtl1wiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwi55So5byV5Y+35byV6LW355qE5a2X56ym5Liy44CB56m65a2X56ym5LiyICgnJykg5oiW5a+55YyF5ZCr5paH5pys55qE5Y2V5YWD5qC855qE5byV55SoXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJBU0NcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ0VYQ0VMJyBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5a+55LqO5Y+M5a2X6IqC5a2X56ym6ZuGIChEQkNTKSDor63oqIDvvIzlsIblhajop5LvvIjlj4zlrZfoioLvvInlrZfnrKbmm7TmlLnkuLrljYrop5LvvIjljZXlrZfoioLvvInlrZfnrKZcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIuaWh+acrOaIluWvueWMheWQq+imgeabtOaUueeahOaWh+acrOeahOWNleWFg+agvOeahOW8leeUqOOAguWmguaenOaWh+acrOS4reS4jeWMheWQq+S7u+S9leWFqOinkuWtl+avje+8jOWImeaWh+acrOS4jeS8muabtOaUuVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQVNJTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFTSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVNJTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMC41XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPguaVsOeahOWPjeato+W8puWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuaJgOmcgOeahOinkuW6puato+W8puWAvO+8jOW/hemhu+S7i+S6jiAtMSDliLAgMSDkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFTSU5IXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVNJTkgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVNJTkgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLTIuNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lj4LmlbDnmoTlj43lj4zmm7LmraPlvKblgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLku7vmhI/lrp7mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFUQU5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBVEFOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFUQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lj43mraPliIflgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLmiYDpnIDnmoTop5LluqbmraPliIflgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFUQU4yXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVRBTjIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBVEFOMihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57nu5nlrprnmoQgWCDlj4ogWSDlnZDmoIflgLznmoTlj43mraPliIflgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi54K555qEIHgg5Z2Q5qCHXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIueCueeahCB5IOWdkOagh1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQVRBTkhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBVEFOSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBVEFOSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMC4xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPguaVsOeahOWPjeWPjOabsuato+WIh+WAvO+8jOWPguaVsOW/hemhu+S7i+S6jiAtMSDliLAgMSDkuYvpl7TvvIjpmaTljrsgLTEg5ZKMIDHvvIlcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCItMSDliLAgMSDkuYvpl7TnmoTku7vmhI/lrp7mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFWRURFVlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFWRURFVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFWRURFVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4TmlbDmja7kuI7lhbblnYflgLznmoTnu53lr7nlgY/lt67nmoTlubPlnYflgLzvvIxBVkVERVYg55So5LqO6K+E5rWL6L+Z57uE5pWw5o2u55qE56a75pWj5bqmXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLnlKjkuo7orqHnrpfnu53lr7nlgY/lt67lubPlnYflgLznmoTkuIDnu4Tlj4LmlbDvvIzlj4LmlbDnmoTkuKrmlbDlj6/ku6XkuLogMSDliLAgMjU1IOS4qlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQVZFUkFHRUFcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBVkVSQUdFQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFWRVJBR0VBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuiuoeeul+WPguaVsOWIl+ihqOS4reaVsOWAvOeahOW5s+Wdh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6ZyA6KaB6K6h566X5bmz5Z2H5YC855qEIDEg5YiwIDI1NSDkuKrljZXlhYPmoLzjgIHljZXlhYPmoLzljLrln5/miJblgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkFWRVJBR0VJRlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkFWRVJBR0VJRihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlvJXnlKjojIPlm7RcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qCH5YeG5p2h5Lu2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVZFUkFHRUlGKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic8MjMwMDAnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuafkOS4quWMuuWfn+WGhea7oei2s+e7meWumuadoeS7tueahOaJgOacieWNleWFg+agvOeahOW5s+Wdh+WAvO+8iOeul+acr+W5s+Wdh+WAvO+8iVwiLFxuICAgICAgICAgICAgXCJyZWZlcmVuY2VhcmVhXCI6IFwi6KaB6K6h566X5bmz5Z2H5YC855qE5LiA5Liq5oiW5aSa5Liq5Y2V5YWD5qC877yM5YW25Lit5YyF5ous5pWw5a2X5oiW5YyF5ZCr5pWw5a2X55qE5ZCN56ew44CB5pWw57uE5oiW5byV55SoXCIsXG4gICAgICAgICAgICBcInN0YW5kYXJkY29uZGl0aW9uXCI6IFwi5pWw5a2X44CB6KGo6L6+5byP44CB5Y2V5YWD5qC85byV55So5oiW5paH5pys5b2i5byP55qE5p2h5Lu277yM55So5LqO5a6a5LmJ6KaB5a+55ZOq5Lqb5Y2V5YWD5qC86K6h566X5bmz5Z2H5YC8XCJcbiAgICAgICAgfVxuXG4gICAgfSxcbiAgICBcIkFWRVJBR0VJRlNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBVkVSQUdFSUZTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuW8leeUqOiMg+WbtFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmoIflh4bmnaHku7Zf6YCC55So6IyD5Zu0MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmoIflh4bmnaHku7YxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvmoIflh4bmnaHku7Zf6YCC55So6IyD5Zu0MizmoIflh4bmnaHku7YyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQVZFUkFHRUlGUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDMjpDN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmr5XlsJTopJRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRDI6RDdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic+MidcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRTI6RTdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ+aYrydcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5ruh6Laz5aSa6YeN5p2h5Lu255qE5omA5pyJ5Y2V5YWD5qC855qE5bmz5Z2H5YC877yI566X5pyv5bmz5Z2H5YC877yJXCIsXG4gICAgICAgICAgICBcInJlZmVyZW5jZWFyZWFcIjogXCLopoHorqHnrpflubPlnYflgLznmoTkuIDkuKrmiJblpJrkuKrljZXlhYPmoLzvvIzlhbbkuK3ljIXmi6zmlbDlrZfmiJbljIXlkKvmlbDlrZfnmoTlkI3np7DjgIHmlbDnu4TmiJblvJXnlKhcIixcbiAgICAgICAgICAgIFwic3RhbmRhcmRjb25kaXRpb25fYXJlYTFcIjogXCLopoHorqHnrpflubPlnYflgLznmoTlrp7pmYXljZXlhYPmoLzpm4ZcIixcbiAgICAgICAgICAgIFwic3RhbmRhcmRjb25kaXRpb24xXCI6IFwi5a6a5LmJ6KaB5a+56YCC55So6IyD5Zu0MeS4reeahOWTquS6m+WNleWFg+agvOiuoeeul+W5s+Wdh+WAvFwiLFxuICAgICAgICAgICAgXCJzdGFuZGFyZGNvbmRpdGlvbl9hcmVhMlwiOiBcIumAgueUqOiMg+WbtOWPiuWFtuWvueW6lOeahOagh+WHhuadoeS7tlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQkFIVFRFWFRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCQUhUVEVYVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCQUhUVEVYVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmlbDlrZfovazmjaLkuLrms7Dor63mlofmnKzlubbmt7vliqDlkI7nvIDigJzms7Dpk6LigJ1cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHovazmjaLmiJDmlofmnKznmoTmlbDlrZfjgIHlr7nljIXlkKvmlbDlrZfnmoTljZXlhYPmoLznmoTlvJXnlKjmiJbnu5PmnpzkuLrmlbDlrZfnmoTlhazlvI9cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkJBU0VcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCQVNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWfulwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5pyA5bCP6ZW/5bqmXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCQVNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5pWw5a2X6L2s5o2i5Li65YW35aSH57uZ5a6a5Z+65pWw55qE5paH5pys6KGo56S6XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB6L2s5o2i55qE5pWw5a2X44CCIOW/hemhu+aYr+Wkp+S6juaIluetieS6jjDkuJTlsI/kuo4gMiBeIDUzIOeahOaVtOaVsFwiLFxuICAgICAgICAgICAgXCJiYXNpY1wiOiBcIuimgeWwhuaVsOWtl+i9rOaNouS4uueahOWfuuehgOWfuuaVsOOAgiDlv4XpobvmmK/lpKfkuo7miJbnrYnkuo4y5LiU5bCP5LqO5oiW562J5LqOMzbnmoTmlbTmlbBcIixcbiAgICAgICAgICAgIFwibWlubGVuZ3RoXCI6IFwi6L+U5Zue55qE5a2X56ym5Liy55qE5pyA5bCP6ZW/5bqm44CCIOW/hemhu+aYr+Wkp+S6juaIluetieS6jjDnmoTmlbTmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkJFU1NFTElcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCRVNTRUxJKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQkVTU0VMSShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxLjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kv67mraMgQmVzc2VsIOWHveaVsOWAvO+8jOWug+S4jueUqOe6r+iZmuaVsOWPguaVsOi/kOeul+aXtueahCBCZXNzZWwg5Ye95pWw5YC855u4562JXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIueUqOadpei/m+ihjOWHveaVsOiuoeeul+eahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCJCZXNzZWwg5Ye95pWw55qE6Zi25pWw44CC5aaC5p6cIG4g5LiN5piv5pW05pWw77yM5YiZ5oiq5bC+5Y+W5pW0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJCRVNTRUxKXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQkVTU0VMSihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJFU1NFTEooXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMS45XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIEJlc3NlbCDlh73mlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi55So5p2l6L+b6KGM5Ye95pWw6K6h566X55qE5pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIkJlc3NlbCDlh73mlbDnmoTpmLbmlbDjgILlpoLmnpwgbiDkuI3mmK/mlbTmlbDvvIzliJnmiKrlsL7lj5bmlbRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkJFU1NFTEtcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCRVNTRUxLKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQkVTU0VMSyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxLjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kv67mraMgQmVzc2VsIOWHveaVsOWAvO+8jOWug+S4jueUqOe6r+iZmuaVsOWPguaVsOi/kOeul+aXtueahCBCZXNzZWwg5Ye95pWw5YC855u4562JXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIueUqOadpei/m+ihjOWHveaVsOiuoeeul+eahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCJCZXNzZWwg5Ye95pWw55qE6Zi25pWw44CC5aaC5p6cIG4g5LiN5piv5pW05pWw77yM5YiZ5oiq5bC+5Y+W5pW0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJCRVNTRUxZXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQkVTU0VMWShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJFU1NFTFkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMi41XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIEJlc3NlbCDlh73mlbDlgLzvvIzkuZ/np7DkuLogV2ViZXIg5Ye95pWw5oiWIE5ldW1hbm4g5Ye95pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIueUqOadpei/m+ihjOWHveaVsOiuoeeul+eahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCJCZXNzZWwg5Ye95pWw55qE6Zi25pWw44CC5aaC5p6cIG4g5LiN5piv5pW05pWw77yM5YiZ5oiq5bC+5Y+W5pW0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJCRVRBLkRJU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCRVRBLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6YC76L6R5YC8XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvkuIvnlYxdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5LiK55WMXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAxMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQkVUQS5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRydWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDEyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm54gQmV0YSDliIbluINcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5LuL5LqOIEEg5ZKMIEIg5LmL6Ze055So5p2l6L+b6KGM5Ye95pWw6K6h566X55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuW4g+WPguaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbluIPlj4LmlbBcIixcbiAgICAgICAgICAgIFwibG9naWNcIjogXCLlhrPlrprlh73mlbDlvaLlvI/nmoTpgLvovpHlgLzjgILlpoLmnpwgY3VtdWxhdGl2ZSDkuLogVFJVRe+8jEJFVEEuRElTVCDov5Tlm57ntK/np6/liIbluIPlh73mlbDvvJvlpoLmnpzkuLogRkFMU0XvvIzliJnov5Tlm57mpoLnjoflr4bluqblh73mlbBcIixcbiAgICAgICAgICAgIFwibG93Ym91bmRcIjogXCJ2YWx1ZTHmiYDlsZ7ljLrpl7TnmoTkuIvnlYxcIixcbiAgICAgICAgICAgIFwidXBib3VuZFwiOiBcInZhbHVlMeaJgOWxnuWMuumXtOeahOS4iueVjFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQkVUQS5JTlZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCRVRBLklOVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5LiL55WMXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5LiK55WMXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQkVUQS5JTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbniBCZXRhIOe0r+enr+amgueOh+WvhuW6puWHveaVsCAoQkVUQS5ESVNUKSDnmoTlj43lh73mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5LiOIGJldGEg5YiG5biD55u45YWz55qE5qaC546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuW4g+WPguaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbluIPlj4LmlbBcIixcbiAgICAgICAgICAgIFwibG93Ym91bmRcIjogXCJ2YWx1ZTHmiYDlsZ7ljLrln5/nmoTkuIvnlYxcIixcbiAgICAgICAgICAgIFwidXBib3VuZFwiOiBcInZhbHVlMeaJgOWxnuWMuuWfn+eahOS4iueVjFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQklOMkRFQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJTjJERUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklOMkRFQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxMTAwMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuS6jOi/m+WItuaVsOi9rOaNouS4uuWNgei/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuW4jOacm+i9rOaNoueahOS6jOi/m+WItuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQklOMkhFWFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJTjJIRVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJTjJIRVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTExMTEwMTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbkuozov5vliLbmlbDovazmjaLkuLrljYHlha3ov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5biM5pyb6L2s5o2i55qE5LqM6L+b5Yi25pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeS9v+eUqOeahOWtl+espuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQklOMk9DVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJTjJPQ1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJTjJPQ1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTAwMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuS6jOi/m+WItuaVsOi9rOaNouS4uuWFq+i/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLluIzmnJvovazmjaLnmoTkuozov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5L2/55So55qE5a2X56ym5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJCSU5PTS5ESVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklOT00uRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklOT00uRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGQUxTRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuozpobnlvI/liIbluIPnmoTmpoLnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6K+V6aqM5oiQ5Yqf55qE5qyh5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIueLrOeri+ivlemqjOeahOasoeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLmr4/mrKHor5XpqozkuK3miJDlip/nmoTmpoLnjodcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5Yaz5a6a5Ye95pWw5b2i5byP55qE6YC76L6R5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJCSU5PTS5JTlZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCSU5PTS5JTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklOT00uSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS9v+e0r+enr+S6jOmhueW8j+WIhuW4g+Wkp+S6juetieS6juS4tOeVjOWAvOeahOacgOWwj+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLkvK/liqrliKnor5XpqozmrKHmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5q+P5qyh6K+V6aqM5Lit5oiQ5Yqf55qE5qaC546HXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuS4tOeVjOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQklUQU5EXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUQU5EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUQU5EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4pOS4quaVsOeahOaMieS9jeKAnOS4juKAnVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlv4XpobvkuLrljYHov5vliLbmoLzlvI/kuJTlpKfkuo7nrYnkuo4gMFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlv4XpobvkuLrljYHov5vliLbmoLzlvI/kuJTlpKfkuo7nrYnkuo4gMFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQklUTFNISUZUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUTFNISUZUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUTFNISUZUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lkJHlt6bnp7vliqjmjIflrprkvY3mlbDlkI7nmoTmlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5b+F6aG75piv5aSn5LqO5oiW562J5LqOMOeahOaVtOaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlv4XpobvmmK/mlbTmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkJJVE9SXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUT1IoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCSVRPUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuKTkuKrmlbDnmoTmjInkvY3igJzmiJbigJ1cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5b+F6aG75Li65Y2B6L+b5Yi25qC85byP5LiU5aSn5LqO562J5LqOIDBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5b+F6aG75Li65Y2B6L+b5Yi25qC85byP5LiU5aSn5LqO562J5LqOIDBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkJJVFJTSElGVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJVFJTSElGVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkJJVFJTSElGVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWQkeWPs+enu+WKqOaMh+WumuS9jeaVsOWQjueahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlv4XpobvmmK/lpKfkuo7miJbnrYnkuo4w55qE5pW05pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuW/hemhu+aYr+aVtOaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQklUWE9SXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUWE9SKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQklUWE9SKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuKTkuKrmlbDlgLznmoTmjInkvY3igJzlvILmiJbigJ3nu5PmnpxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5b+F6aG75aSn5LqO5oiW562J5LqOIDBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5b+F6aG75aSn5LqO5oiW562J5LqOIDBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNFSUxJTkcuTUFUSFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNFSUxJTkcuTUFUSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlM11cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0VJTElORy5NQVRIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIi01LjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmlbDlrZflkJHkuIroiI3lhaXkuLrmnIDmjqXov5HnmoTmlbTmlbDmiJbmnIDmjqXov5HnmoTmjIflrprln7rmlbDnmoTlgI3mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5b+F6aG75bCP5LqOIDkuOTkgRSArIDMwNyDkuJTlpKfkuo4tMi4yMjkgRS0zMDhcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5bCG5pWw5a2X6IiN5YWl5Yiw55qE5YCN5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuWvueS6jui0n+aVsCwg5o6n5Yi25pWw5a2X5piv6IiN5YWl6L+Y5piv6L+c56a76Zu2XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDRUlMSU5HLlBSRUNJU0VcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDRUlMSU5HLlBSRUNJU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNFSUxJTkcuUFJFQ0lTRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0LjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDkuKrmlbDlrZfvvIzor6XmlbDlrZflkJHkuIroiI3lhaXkuLrmnIDmjqXov5HnmoTmlbTmlbDmiJbmnIDmjqXov5HnmoTmnInmlYjkvY3nmoTlgI3mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB6L+b6KGM6IiN5YWl55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeWwhuaVsOWtl+iIjeWFpeeahOWAjeaVsCzlpoLmnpznnIHnlaXvvIzliJnlhbbpu5jorqTlgLzkuLogMVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ0VMTFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNFTEwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNFTEwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi4oCccm934oCdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mnInlhbPljZXlhYPmoLznmoTmoLzlvI/jgIHkvY3nva7miJblhoXlrrnnmoTkv6Hmga9cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5LiA5Liq5paH5pys5YC877yM5oyH5a6a6KaB6L+U5Zue55qE5Y2V5YWD5qC85L+h5oGv55qE57G75Z6LXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIumcgOimgeWFtuebuOWFs+S/oeaBr+eahOWNleWFg+agvOOAguWmguaenOecgeeVpe+8jOWImeWwhiB2YWx1ZTEg5Y+C5pWw5Lit5oyH5a6a55qE5L+h5oGv6L+U5Zue57uZ5pyA5ZCO5pu05pS555qE5Y2V5YWD5qC844CC5aaC5p6c5Y+C5pWwIHZhbHVlMiDmmK/mn5DkuIDljZXlhYPmoLzljLrln5/vvIzliJnlh73mlbDlj6rlsIbor6Xkv6Hmga/ov5Tlm57nu5nor6XljLrln5/lt6bkuIrop5LnmoTljZXlhYPmoLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNIQVJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSEFSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNIQVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5a+55bqU5LqO5pWw5a2X5Luj56CB55qE5a2X56ymXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5LuL5LqOIDEg5YiwIDI1NSDkuYvpl7TnlKjkuo7mjIflrprmiYDpnIDlrZfnrKbnmoTmlbDlrZdcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNISURJU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSElESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0hJRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm54gz4cyIOWIhuW4g+eahOWPs+WwvuamgueOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLnlKjmnaXorqHnrpfliIbluIPnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6Ieq55Sx5bqm55qE5pWw5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDSElJTlZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSElJTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSElJTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIM+HMiDliIbluIPnmoTlj7PlsL7mpoLnjofnmoTlj43lh73mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5LiOIM+HMiDliIbluIPnm7jlhbPnmoTmpoLnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6Ieq55Sx5bqm55qE5pWw5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDSElTUS5ESVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0hJU1EuRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSElTUS5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSVUVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIM+HMiDliIbluINcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi55So5p2l6K6h566X5YiG5biD55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuiHqueUseW6puaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLlhrPlrprlh73mlbDlvaLlvI/nmoTpgLvovpHlgLzjgILlpoLmnpzkuLogVFJVRe+8jOWImei/lOWbnue0r+enr+WIhuW4g+WHveaVsO+8m+WmguaenOS4uiBGQUxTRe+8jOWImei/lOWbnuamgueOh+WvhuW6puWHveaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ0hJU1EuSU5WXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0hJU1EuSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0hJU1EuSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuOTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm54gz4cyIOWIhuW4g+eahOW3puWwvuamgueOh+eahOWPjeWHveaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLkuI4gz4cyIOWIhuW4g+ebuOWFs+iBlOeahOamgueOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLoh6rnlLHluqbmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNISVNRLlRFU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSElTUS5URVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDSElTUS5URVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE2OkI4XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnueLrOeri+aAp+ajgOmqjOWAvFwiLFxuICAgICAgICAgICAgXCJhcmVhMVwiOiBcIuWMheWQq+inguWvn+WAvOeahOaVsOaNruWMuuWfn++8jOeUqOS6juajgOmqjOmihOacn+WAvFwiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+ihjOWIl+axh+aAu+eahOS5mOenr+S4juaAu+iuoeWAvOS5i+avlOeOh+eahOaVsOaNruWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ0hPT1NFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0hPT1NFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMywuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNIT09TRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTMsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjVcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuS9v+eUqCB2YWx1ZTEg6L+U5Zue5pWw5YC85Y+C5pWw5YiX6KGo5Lit55qE5pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuaMh+WumuaJgOmAieWumueahOWAvOWPguaVsOOAgnZhbHVlMSDlv4XpobvkuLogMSDliLAgMjU0IOS5i+mXtOeahOaVsOWtl++8jOaIluiAheS4uuWFrOW8j+aIluWvueWMheWQqyAxIOWIsCAyNTQg5LmL6Ze05p+Q5Liq5pWw5a2X55qE5Y2V5YWD5qC855qE5byV55SoXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcInZhbHVlMiDmmK/lv4XpnIDnmoTvvIzlkI7nu63lgLzmmK/lj6/pgInnmoTjgILlj6/ku6XkuLrmlbDlrZfjgIHljZXlhYPmoLzlvJXnlKjjgIHlt7LlrprkuYnlkI3np7DjgIHlhazlvI/jgIHlh73mlbDmiJbmlofmnKxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5Y+v5Lul5Li65pWw5a2X44CB5Y2V5YWD5qC85byV55So44CB5bey5a6a5LmJ5ZCN56ew44CB5YWs5byP44CB5Ye95pWw5oiW5paH5pysXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDTEVBTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNMRUFOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ0xFQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Yig6Zmk5paH5pys5Lit5LiN6IO95omT5Y2w55qE5a2X56ymXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLopoHku47kuK3liKDpmaTpnZ7miZPljbDlrZfnrKbnmoTku7vkvZXlt6XkvZzooajkv6Hmga9cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPREVcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT0RFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09ERShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLigJxB4oCdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaWh+acrOWtl+espuS4suS4reesrOS4gOS4quWtl+espueahOaVsOWtl+S7o+eggVwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwi6ZyA6KaB5b6X5Yiw5YW256ys5LiA5Liq5a2X56ym5Luj56CB55qE5paH5pysXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT0xVTU5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT0xVTU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+aVsOWAvF1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09MVU1OKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkMxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mjIflrprljZXlhYPmoLzlvJXnlKjnmoTliJflj7dcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHov5Tlm57lhbbliJflj7fnmoTljZXlhYPmoLzmiJbljZXlhYPmoLzljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPTFVNTlNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT0xVTU5TKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPTFVNTlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pWw57uE5oiW5byV55So55qE5YiX5pWwXCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi6ZyA6KaB5b6X5Yiw5YW25YiX5pWw55qE5pWw57uE44CB5pWw57uE5YWs5byP5oiW5a+55Y2V5YWD5qC85Yy65Z+f55qE5byV55SoXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT01CSU5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT01CSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT01CSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuiuoeeul+S7jue7meWumuaVsOebrueahOWvueixoembhuWQiOS4reaPkOWPluiLpeW5suWvueixoeeahOe7hOWQiOaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLpobnnm67nmoTmlbDph49cIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5q+P5LiA57uE5ZCI5Lit6aG555uu55qE5pWw6YePXCJcbiAgICAgICAgfVxuXG4gICAgfSxcbiAgICBcIkNPTUJJTkFcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT01CSU5BKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09NQklOQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue57uZ5a6a5pWw55uu55qE6aG555qE57uE5ZCI5pWw77yI5YyF5ZCr6YeN5aSN77yJXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuW/hemhu+Wkp+S6juaIluetieS6jiAwIOW5tuWkp+S6juaIluetieS6jiBOdW1iZXJfY2hvc2Vu44CCIOmdnuaVtOaVsOWAvOWwhuiiq+aIquWwvuWPluaVtFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlv4XpobvlpKfkuo7miJbnrYnkuo4gMOOAgiDpnZ7mlbTmlbDlgLzlsIbooqvmiKrlsL7lj5bmlbRcIlxuICAgICAgICB9XG5cbiAgICB9LFxuICAgIFwiQ09NUExFWFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPTVBMRVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5ZCO57yAXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT01QTEVYKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLigJxq4oCdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuWunuezu+aVsOWPiuiZmuezu+aVsOi9rOaNouS4uiB4K3lpIOaIliB4K3lqIOW9ouW8j+eahOWkjeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlpI3mlbDnmoTlrp7pg6hcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5aSN5pWw55qE6Jma6YOoXCIsXG4gICAgICAgICAgICBcInN1ZmZpeFwiOiBcIuWkjeaVsOS4reiZmumDqOeahOWQjue8gO+8jOWmguaenOecgeeVpe+8jOWImeiupOS4uuWug+S4uiBpXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT05GSURFTkNFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09ORklERU5DRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT05GSURFTkNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuS9v+eUqOato+aAgeWIhuW4g+i/lOWbnuaAu+S9k+W5s+Wdh+WAvOeahOe9ruS/oeWMuumXtFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLnlKjkuo7orqHnrpfnva7kv6HluqbnmoTmmL7okZfmsLTlubPlj4LmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pWw5o2u5Yy65Z+f55qE5oC75L2T5qCH5YeG5YGP5beuLOWBh+iuvuS4uuW3suefpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLmoLfmnKzlrrnph49cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPTlZFUlRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT05WRVJUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWNleS9jTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Y2V5L2NMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT05WRVJUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEuMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInbGJtJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIna2cnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuaVsOWtl+S7juS4gOS4quW6pumHj+ezu+e7n+i9rOaNouWIsOWPpuS4gOS4quW6pumHj+ezu+e7n+S4rVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuS7peWNleS9jTHkuLrljZXkvY3nmoTpnIDopoHov5vooYzovazmjaLnmoTmlbDlgLxcIixcbiAgICAgICAgICAgIFwidW5pdDFcIjogXCLmlbDlgLznmoTljZXkvY1cIixcbiAgICAgICAgICAgIFwidW5pdDJcIjogXCLnu5PmnpznmoTljZXkvY1cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPUlJFTFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPUlJFTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPUlJFTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ljZXlhYPmoLzljLrln58gYXJyYXkxIOWSjCBhcnJheTIg5LmL6Ze055qE55u45YWz57O75pWwXCIsXG4gICAgICAgICAgICBcImFycmF5MVwiOiBcIuesrOS4gOe7hOaVsOWAvOWNleWFg+agvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJhcnJheTJcIjogXCLnrKzkuoznu4TmlbDlgLzljZXlhYPmoLzljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPU1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMS4wNDdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue57uZ5a6a6KeS5bqm55qE5L2Z5bym5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5oOz6KaB5rGC5L2Z5bym55qE6KeS5bqm77yM5Lul5byn5bqm6KGo56S6XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT1RIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09USChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcblxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVEgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDkuKrlj4zmm7Lop5LluqbnmoTlj4zmm7LkvZnliIflgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLmg7PopoHmsYLlj4zmm7LkvZnlvKblgLznmoTop5LluqblgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPVU5UXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VTlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VOVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLorqHnrpfljIXlkKvmlbDlrZfnmoTljZXlhYPmoLzku6Xlj4rlj4LmlbDliJfooajkuK3mlbDlrZfnmoTkuKrmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB6K6h566X5YW25Lit5pWw5a2X55qE5Liq5pWw55qE56ys5LiA5Liq6aG544CB5Y2V5YWD5qC85byV55So5oiW5Yy65Z+fXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeiuoeeul+WFtuS4reaVsOWtl+eahOS4quaVsOeahOWFtuS7lumhueOAgeWNleWFg+agvOW8leeUqOaIluWMuuWfn++8jOacgOWkmuWPr+WMheWQqyAyNTUg5LiqXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT1VOVEJMQU5LXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VTlRCTEFOSyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln59cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VTlRCTEFOSyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpCNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLorqHnrpfmjIflrprljZXlhYPmoLzljLrln5/kuK3nqbrnmb3ljZXlhYPmoLznmoTkuKrmlbBcIixcbiAgICAgICAgICAgIFwiYXJlYVwiOiBcIumcgOimgeiuoeeul+WFtuS4reepuueZveWNleWFg+agvOS4quaVsOeahOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09VTlRJRlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVU5USUYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuagh+WHhuadoeS7tlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VOVElGKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkE3XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic/5p6cJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlr7nljLrln5/kuK3mu6HotrPljZXkuKrmjIflrprmnaHku7bnmoTljZXlhYPmoLzov5vooYzorqHmlbBcIixcbiAgICAgICAgICAgIFwiYXJlYVwiOiBcIuimgeWvueWFtui/m+ihjOiuoeaVsOeahOS4gOS4quaIluWkmuS4quWNleWFg+agvO+8jOWFtuS4reWMheaLrOaVsOWtl+aIluWQjeensOOAgeaVsOe7hOaIluWMheWQq+aVsOWtl+eahOW8leeUqOOAguepuuWAvOWSjOaWh+acrOWAvOWwhuiiq+W/veeVpVwiLFxuICAgICAgICAgICAgXCJzdGFuZGFyZGNvbmRpdGlvblwiOiBcIueUqOS6juWumuS5ieWwhuWvueWTquS6m+WNleWFg+agvOi/m+ihjOiuoeaVsOeahOaVsOWtl+OAgeihqOi+vuW8j+OAgeWNleWFg+agvOW8leeUqOaIluaWh+acrOWtl+espuS4slwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09VTlRJRlNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VOVElGUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuagh+WHhuadoeS7tjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+WMuuWfnzIs5qCH5YeG5p2h5Lu2MiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVU5USUZTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkQyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic95pivJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJb5Yy65Z+fMizmoIflh4bmnaHku7YyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmnaHku7blupTnlKjkuo7ot6jlpJrkuKrljLrln5/nmoTljZXlhYPmoLzvvIzlubborqHnrpfnrKblkIjmiYDmnInmnaHku7bnmoTmrKHmlbBcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLlnKjlhbbkuK3orqHnrpflhbPogZTmnaHku7bnmoTnrKzkuIDkuKrljLrln59cIixcbiAgICAgICAgICAgIFwic3RhbmRhcmRjb25kaXRpb24xXCI6IFwi5p2h5Lu255qE5b2i5byP5Li65pWw5a2X44CB6KGo6L6+5byP44CB5Y2V5YWD5qC85byV55So5oiW5paH5pys77yM5Y+v55So5p2l5a6a5LmJ5bCG5a+55ZOq5Lqb5Y2V5YWD5qC86L+b6KGM6K6h5pWwXCIsXG4gICAgICAgICAgICBcInN0YW5kYXJkY29uZGl0aW9uMlwiOiBcIumZhOWKoOeahOWMuuWfn+WPiuWFtuWFs+iBlOadoeS7tuOAguacgOWkmuWFgeiuuCAxMjcg5Liq5Yy65Z+fL+adoeS7tuWvuVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09VUERBWUJTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VUERBWUJTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VQREFZQlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LuO5LuY5oGv5pyf5byA5aeL5Yiw57uT566X5pel55qE5aSp5pWwXCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi6K+B5Yi455qE57uT566X5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi6K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5bm05LuY5oGv5qyh5pWw44CC5aaC5p6c5oyJ5bm05pSv5LuY77yM5pWw5YC8ID0gMe+8m+aMieWNiuW5tOacn+aUr+S7mO+8jOaVsOWAvCA9IDLvvJvmjInlraPmlK/ku5jvvIzmlbDlgLwgPSA0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT1VQREFZU1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVVBEQVlTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VQREFZUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57nu5Pnrpfml6XmiYDlnKjnmoTku5jmga/mnJ/nmoTlpKnmlbBcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLor4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLor4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlubTku5jmga/mrKHmlbDjgILlpoLmnpzmjInlubTmlK/ku5jvvIzmlbDlgLwgPSAx77yb5oyJ5Y2K5bm05pyf5pSv5LuY77yM5pWw5YC8ID0gMu+8m+aMieWto+aUr+S7mO+8jOaVsOWAvCA9IDRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPVVBEQVlTTkNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VQREFZU05DKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1VQREFZU05DKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7jue7k+eul+aXpeWIsOS4i+S4gOS7mOaBr+aXpeS5i+mXtOeahOWkqeaVsFwiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuW5tOS7mOaBr+asoeaVsOOAguWmguaenOaMieW5tOaUr+S7mO+8jOaVsOWAvCA9IDHvvJvmjInljYrlubTmnJ/mlK/ku5jvvIzmlbDlgLwgPSAy77yb5oyJ5a2j5pSv5LuY77yM5pWw5YC8ID0gNFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09VUE5DRFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVVBOQ0RcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VUE5DRFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4gOS4quihqOekuuWcqOe7k+eul+aXpeS5i+WQjuS4i+S4gOS4quS7mOaBr+aXpeeahOaVsOWtl1wiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuW5tOS7mOaBr+asoeaVsOOAguWmguaenOaMieW5tOaUr+S7mO+8jOaVsOWAvCA9IDHvvJvmjInljYrlubTmnJ/mlK/ku5jvvIzmlbDlgLwgPSAy77yb5oyJ5a2j5pSv5LuY77yM5pWw5YC8ID0gNFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09VUE5VTVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVVBOVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNPVVBOVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Zyo57uT566X5pel5ZKM5Yiw5pyf5pel5LmL6Ze055qE5LuY5oGv5qyh5pWw77yM5ZCR5LiK6IiN5YWl5Yiw5pyA6L+R55qE5pW05pWwXCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi6K+B5Yi455qE57uT566X5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi6K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5bm05LuY5oGv5qyh5pWw44CC5aaC5p6c5oyJ5bm05pSv5LuY77yM5pWw5YC8ID0gMe+8m+aMieWNiuW5tOacn+aUr+S7mO+8jOaVsOWAvCA9IDLvvJvmjInlraPmlK/ku5jvvIzmlbDlgLwgPSA0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT1VQUENEXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VUFBDRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09VUFBDRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ooajnpLrnu5Pnrpfml6XkuYvliY3nmoTkuIrkuIDkuKrku5jmga/ml6XnmoTmlbDlrZdcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLor4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLor4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlubTku5jmga/mrKHmlbDjgILlpoLmnpzmjInlubTmlK/ku5jvvIzmlbDlgLwgPSAx77yb5oyJ5Y2K5bm05pyf5pSv5LuY77yM5pWw5YC8ID0gMu+8m+aMieWto+aUr+S7mO+8jOaVsOWAvCA9IDRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNPVkFSXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09WQVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1ZBUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ljY/mlrnlt67vvIzljbPkuKTkuKrmlbDmja7pm4bkuK3mr4/lr7nmlbDmja7ngrnnmoTlgY/lt67kuZjnp6/nmoTlubPlnYfmlbBcIixcbiAgICAgICAgICAgIFwiYXJyYXkxXCI6IFwi56ys5LiA5Liq5omA5ZCr5pWw5o2u5Li65pW05pWw55qE5Y2V5YWD5qC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcImFycmF5MlwiOiBcIuesrOS6jOS4quaJgOWQq+aVsOaNruS4uuaVtOaVsOeahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ09WQVJJQU5DRS5QXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09WQVJJQU5DRS5QKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ09WQVJJQU5DRS5QKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkI2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaAu+S9k+WNj+aWueW3ru+8jOWNs+S4pOS4quaVsOaNrumbhuS4reavj+WvueaVsOaNrueCueeahOWBj+W3ruS5mOenr+eahOW5s+Wdh+aVsFwiLFxuICAgICAgICAgICAgXCJhcnJheTFcIjogXCLnrKzkuIDkuKrmiYDlkKvmlbDmja7kuLrmlbTmlbDnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiYXJyYXkyXCI6IFwi56ys5LqM5Liq5omA5ZCr5pWw5o2u5Li65pW05pWw55qE5Y2V5YWD5qC85Yy65Z+fXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDT1ZBUklBTkNFLlNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1ZBUklBTkNFLlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDT1ZBUklBTkNFLlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTM6QTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjM6QjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5qC35pys5Y2P5pa55beu77yM5Y2z5Lik5Liq5pWw5o2u6ZuG5Lit5q+P5a+55pWw5o2u54K555qE5YGP5beu5LmY56ev55qE5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcImFycmF5MVwiOiBcIuaVtOaVsOeahOesrOS4gOS4quWNleWFg+agvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJhcnJheTJcIjogXCLmlbTmlbDnmoTnrKzkuozkuKrljZXlhYPmoLzljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNTQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNTQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6KeS5bqm55qE5L2Z5Ymy5YC877yM5Lul5byn5bqm6KGo56S6XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB5rGC5L2Z5Ymy5YC855qE6KeS5bqm5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJDU0NIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ1NDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDU0NIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEuNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57op5LluqbnmoTlj4zmm7LkvZnlibLlgLzvvIzku6XlvKfluqbooajnpLpcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHmsYLlj4zmm7LkvZnlibLlgLznmoTop5LluqblgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkNVTUlQTVRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDVU1JUE1UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkNVTUlQTVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTIvMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTMqMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMjRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnrJTotLfmrL7lnKjnu5nlrprnmoQgdmFsdWU0IOWIsCB2YWx1ZTUg5pyf6Ze057Sv6K6h5YG/6L+Y55qE5Yip5oGv5pWw6aKdXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWIqeeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmgLvku5jmrL7mnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi546w5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuiuoeeul+S4reeahOmmluacn+OAgiDku5jmrL7mnJ/mlbDku44gMSDlvIDlp4vorqHmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWU1XCI6IFwi6K6h566X5Lit55qE5pyr5pyfXCIsXG4gICAgICAgICAgICBcInZhbHVlNlwiOiBcIuS7mOasvuaXtumXtOexu+Wei1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiQ1VNUFJJTkNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDVU1QUklOQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDVU1QUklOQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMi8xMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMyoxMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4gOeslOi0t+asvuWcqOe7meWumueahCBzdGFydF9wZXJpb2Qg5YiwIGVuZF9wZXJpb2Qg5pyf6Ze057Sv6K6h5YG/6L+Y55qE5pys6YeR5pWw6aKdXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWIqeeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmgLvku5jmrL7mnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi546w5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuiuoeeul+S4reeahOmmluacn+OAgiDku5jmrL7mnJ/mlbDku44gMSDlvIDlp4vorqHmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWU1XCI6IFwi6K6h566X5Lit55qE5pyr5pyfXCIsXG4gICAgICAgICAgICBcInZhbHVlNlwiOiBcIuS7mOasvuaXtumXtOexu+Wei1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREFURVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRBVEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bm0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaciFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6VcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFURShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyMDA4XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ooajnpLrnibnlrprml6XmnJ/nmoTov57nu63luo/liJflj7dcIixcbiAgICAgICAgICAgIFwieWVhclwiOiBcIuW5tFwiLFxuICAgICAgICAgICAgXCJtb250aFwiOiBcIuaciFwiLFxuICAgICAgICAgICAgXCJkYXlcIjogXCLml6VcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkRBVEVWQUxVRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRBVEVWQUxVRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRBVEVWQUxVRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInOC8yMi8yMDA4J1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlj6/lsIblrZjlgqjkuLrmlofmnKznmoTml6XmnJ/ovazmjaLkuLogRXhjZWwg6K+G5Yir5Li65pel5pyf55qE5bqP5YiX5Y+3XCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLooajnpLogRXhjZWwg5pel5pyf5qC85byP55qE5pel5pyf55qE5paH5pys77yM5oiW6ICF5piv5a+56KGo56S6IEV4Y2VsIOaXpeacn+agvOW8j+eahOaXpeacn+eahOaWh+acrOaJgOWcqOWNleWFg+agvOeahOWNleWFg+agvOW8leeUqFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREFWRVJBR0VcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEQVZFUkFHRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWHveaVsOmAgueUqOWIl1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRBVkVSQUdFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlr7nliJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmlbDlgLzmsYLlubPlnYflgLxcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuaYr+WMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREFZXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFZKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEQVkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Lul5bqP5YiX5Y+36KGo56S655qE5p+Q5pel5pyf55qE5aSp5pWw77yM55So5pW05pWwIDEg5YiwIDMxIOihqOekulwiLFxuICAgICAgICAgICAgXCJkYXRlXCI6IFwi6KaB5p+l5om+55qE6YKj5LiA5aSp55qE5pel5pyfXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJEQVlTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFZUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFZUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMjAxMS0zLTE1J1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMjAxMS0yLTEnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4pOS4quaXpeacn+S5i+mXtOeahOWkqeaVsFwiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIueUqOS6juiuoeeul+acn+mXtOWkqeaVsOeahOi1t+Wni+aXpeacn1wiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIueUqOS6juiuoeeul+acn+mXtOWkqeaVsOeahOe7iOatouaXpeacn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREFZUzM2MFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRBWVMzNjAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRBWVMzNjAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5oyJ54Wn5LiA5bm0IDM2MCDlpKnnmoTnrpfms5XvvIjmr4/kuKrmnIjku6UgMzAg5aSp6K6h77yM5LiA5bm05YWx6K6hIDEyIOS4quaciO+8ie+8jOi/lOWbnuS4pOaXpeacn+mXtOebuOW3rueahOWkqeaVsO+8jOi/meWcqOS4gOS6m+S8muiuoeiuoeeul+S4reWwhuS8mueUqOWIsFwiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuimgeiuoeeul+acn+mXtOWkqeaVsOeahOi1t+Wni+aXpeacn1wiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuimgeiuoeeul+acn+mXtOWkqeaVsOeahOe7iOatouaXpeacn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEQihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRCKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5L2/55So5Zu65a6a5L2Z6aKd6YCS5YeP5rOV77yM6K6h566X5LiA56yU6LWE5Lqn5Zyo57uZ5a6a5pyf6Ze05YaF55qE5oqY5pen5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIui1hOS6p+WOn+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLotYTkuqflnKjmipjml6fmnJ/mnKvnmoTku7flgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi6LWE5Lqn55qE5oqY5pen5pyf5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIumcgOimgeiuoeeul+aKmOaXp+WAvOeahOacn+mXtFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTVcIjogXCLnrKzkuIDlubTnmoTmnIjku73mlbDvvIzlpoLnnIHnlaXvvIzliJnlgYforr7kuLogMTJcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkRCQ1NcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEQkNTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREJDUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFWENFTFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIblrZfnrKbkuLLkuK3nmoTljYrop5LvvIjljZXlrZfoioLvvInlrZfmr43ovazmjaLkuLrlhajop5LvvIjlj4zlrZfoioLvvInlrZfnrKZcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIuaWh+acrOaIluWMheWQq+imgei9rOaNoueahOaWh+acrOeahOWNleWFg+agvOeahOW8leeUqFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRENPVU5UXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRENPVU5UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Ye95pWw6YCC55So5YiXXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRENPVU5UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInQWdlJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpGMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3ljIXlkKvmlbDlrZfnmoTljZXlhYPmoLznmoTkuKrmlbBcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRENPVU5UQVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRDT1VOVEEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlh73mlbDpgILnlKjliJdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEQ09VTlRBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInUHJvZml0J1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpGMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTpnZ7nqbrljZXlhYPmoLznmoTkuKrmlbBcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRERCXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRERCKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWU1XVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEREIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxLjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5L2/55So5Y+M5YCN5L2Z6aKd6YCS5YeP5rOV5oiW5YW25LuW5oyH5a6a5pa55rOV77yM6K6h566X5LiA56yU6LWE5Lqn5Zyo57uZ5a6a5pyf6Ze05YaF55qE5oqY5pen5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIui1hOS6p+WOn+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLotYTkuqflnKjmipjml6fmnJ/mnKvnmoTku7flgLzvvIjmnInml7bkuZ/np7DkuLrotYTkuqfmrovlgLzvvInjgILmraTlgLzlj6/ku6XmmK8gMFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLotYTkuqfnmoTmipjml6fmnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi6ZyA6KaB6K6h566X5oqY5pen5YC855qE5pyf6Ze0XCIsXG4gICAgICAgICAgICBcInZhbHVlNVwiOiBcIuS9meminemAkuWHj+mAn+eOh1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREVDMkJJTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFQzJCSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFQzJCSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuWNgei/m+WItuaVsOi9rOaNouS4uuS6jOi/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlvoXovazmjaLnmoTljYHov5vliLbmlbTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5L2/55So55qE5a2X56ym5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJERUMySEVYXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREVDMkhFWChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREVDMkhFWChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxMDBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbljYHov5vliLbmlbDovazmjaLkuLrljYHlha3ov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5b6F6L2s5o2i55qE5Y2B6L+b5Yi25pW05pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeS9v+eUqOeahOWtl+espuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREVDMk9DVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFQzJPQ1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFQzJPQ1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNThcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbljYHov5vliLbmlbDovazmjaLkuLrlhavov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5b6F6L2s5o2i55qE5Y2B6L+b5Yi25pW05pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeS9v+eUqOeahOWtl+espuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREVDSU1BTFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFQ0lNQUwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbDliLZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREVDSU1BTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInRkYnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuaMiee7meWumuWfuuaVsOWwhuaVsOWtl+eahOaWh+acrOihqOekuuW9ouW8j+i9rOaNouaIkOWNgei/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwi5omA6KaB6L2s5o2i55qE5paH5pysXCIsXG4gICAgICAgICAgICBcIm51bXR5cGVcIjogXCLovazmjaLmiYDnlKjnmoTmlbDliLYs5b+F6aG75piv5pW05pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJERUdSRUVTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREVHUkVFUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlvKfluqbop5JcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREVHUkVFUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQSSgpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuW8p+W6pui9rOaNouS4uuW6plwiLFxuICAgICAgICAgICAgXCJhcmN0YW5nbGVcIjogXCLlvoXovazmjaLnmoTlvKfluqbop5JcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkRFTFRBXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREVMVEEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFTFRBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLmtYvor5XkuKTkuKrmlbDlgLzmmK/lkKbnm7jnrYlcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi56ys5LiA5Liq5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuesrOS6jOS4quaVsOWtl+OAguWmguaenOecgeeVpe+8jOWBh+iuviBOdW1iZXIyIOeahOWAvOS4uumbtlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiREVWU1FcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJERVZTUShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRFVlNRKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkE4XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVsOaNrueCueS4juWQhOiHquagt+acrOW5s+Wdh+WAvOWBj+W3rueahOW5s+aWueWSjFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlv4XpnIBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Y+C5pWw55qE5Liq5pWw5Y+v5Lul5Li6IDEg5YiwIDI1NSDkuKpcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkRHRVRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJER0VUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Ye95pWw6YCC55So5YiXXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREdFVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNDpFMTBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ1lpZWxkJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLku47liJfooajmiJbmlbDmja7lupPnmoTliJfkuK3mj5Dlj5bnrKblkIjmjIflrprmnaHku7bnmoTljZXkuKrlgLxcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRElTQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRJU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRElTQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mnInku7for4HliLjnmoTotLTnjrDnjodcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLmnInku7for4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLmnInku7for4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Lu35qC877yI5oyJ6Z2i5YC85Li6IO+/pTEwMCDorqHnrpfvvIlcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5YWR5o2i5YC877yI5oyJ6Z2i5YC85Li6IO+/pTEwMCDorqHnrpfvvIlcIlxuXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRE1BWFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRNQVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlh73mlbDpgILnlKjliJdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJETUFYKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1OkUxMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn5Yip5ramJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpGM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmnIDlpKfmlbDlrZdcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRE1JTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRNSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlh73mlbDpgILnlKjliJdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJETUlOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInUHJvZml0J1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpCMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmnIDlsI/mlbDlrZdcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRE9MTEFSXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRE9MTEFSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJET0xMQVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmlbDlrZfovazmjaLkuLrotKfluIHmoLzlvI/kvb/nlKjlsI/mlbDkvY3mlbDoiI3lhaXliLDmgqjmjIflrprnmoTkvY3mlbDnmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pWw5a2X44CB5a+55YyF5ZCr5pWw5a2X55qE5Y2V5YWD5qC855qE5byV55So5oiW5piv6K6h566X57uT5p6c5Li65pWw5a2X55qE5YWs5byPXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuaVsOWAvOWwj+aVsOeCueWPs+i+ueeahOS9jeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRE9MTEFSREVcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJET0xMQVJERShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRPTExBUkRFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEuMDJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5Lul5pW05pWw6YOo5YiG5ZKM5YiG5pWw6YOo5YiG6KGo56S655qE5Lu35qC877yI5L6L5aaCIDEuMDLvvInovazmjaLkuLrku6XlsI/mlbDpg6jliIbooajnpLrnmoTku7fmoLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lul5pW05pWw6YOo5Lu95ZKM5YiG5pWw6YOo5YiG6KGo56S655qE5pWw5a2X77yM55So5bCP5pWw54K56ZqU5byAXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIueUqOS9nOWIhuaVsOS4reeahOWIhuavjeeahOaVtOaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRFBST0RVQ1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEUFJPRFVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWHveaVsOmAgueUqOWIl1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRQUk9EVUNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1OkUxMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn5Lqn6YePJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpGM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmlbDlgLznmoTkuZjnp69cIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRFNUREVWXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRFNUREVWKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Ye95pWw6YCC55So5YiXXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRFNUREVWKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1OkUxMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn5Lqn6YePJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liKnnlKjliJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmlbDlrZfkvZzkuLrkuIDkuKrmoLfmnKzkvLDnrpflh7rnmoTmgLvkvZPmoIflh4blgY/lt65cIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRFNUREVWUFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRTVERFVlAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlh73mlbDpgILnlKjliJdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEU1RERVZQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1OkUxMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn5Lqn6YePJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liKnnlKjliJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmlbDlrZfkvZzkuLrmoLfmnKzmgLvkvZPorqHnrpflh7rnmoTmgLvkvZPmoIflh4blgY/lt65cIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRFNVTVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRTVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlh73mlbDpgILnlKjliJdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEU1VNKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn5Yip5ramJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpGM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmlbDlrZfkuYvlkoxcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRFVSQVRJT05cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEVVJBVElPTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRFVSQVRJT04oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5YGH6K6+6Z2i5YC85Li6IO+/pSAxMDAg55qEIE1hY2F1bGV5IOW3peacn1wiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuacieS7t+ivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuacieS7t+ivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmnInku7for4HliLjnmoTlubTmga/npajliKnnjodcIixcbiAgICAgICAgICAgIFwicmV0dXJucmF0ZVwiOiBcIuacieS7t+ivgeWIuOeahOW5tOaUtuebiueOh1wiLFxuICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCLlubTku5jmga/mrKHmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkRWQVJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEVkFSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Ye95pWw6YCC55So5YiXXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRFZBUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNDpFMTBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ+S6p+mHj1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liKnnlKjliJfooajmiJbmlbDmja7lupPkuK3mu6HotrPmjIflrprmnaHku7bnmoTorrDlvZXlrZfmrrXvvIjliJfvvInkuK3nmoTmlbDlrZfkvZzkuLrkuIDkuKrmoLfmnKzkvLDnrpflh7rnmoTmgLvkvZPmlrnlt65cIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLmnoTmiJDliJfooajmiJbmlbDmja7lupPnmoTljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwiZnVuY2NvbHVtblwiOiBcIuaMh+WumuWHveaVsOaJgOS9v+eUqOeahOWIl1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuWMheWQq+aJgOaMh+WumuadoeS7tueahOWNleWFg+agvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRFZBUlBcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJEVkFSUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWHveaVsOmAgueUqOWIl1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkRWQVJQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0OkUxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn5Lqn6YePXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkExOkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIumAmui/h+S9v+eUqOWIl+ihqOaIluaVsOaNruW6k+S4rea7oei2s+aMh+WumuadoeS7tueahOiusOW9leWtl+aute+8iOWIl++8ieS4reeahOaVsOWtl+iuoeeul+agt+acrOaAu+S9k+eahOagt+acrOaAu+S9k+aWueW3rlwiLFxuICAgICAgICAgICAgXCJhcmVhMVwiOiBcIuaehOaIkOWIl+ihqOaIluaVsOaNruW6k+eahOWNleWFg+agvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJmdW5jY29sdW1uXCI6IFwi5oyH5a6a5Ye95pWw5omA5L2/55So55qE5YiXXCIsXG4gICAgICAgICAgICBcImFyZWEyXCI6IFwi5YyF5ZCr5omA5oyH5a6a5p2h5Lu255qE5Y2V5YWD5qC85Yy65Z+fXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJFREFURVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVEQVRFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFREFURShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuihqOekuuafkOS4quaXpeacn+eahOW6j+WIl+WPt++8jOivpeaXpeacn+S4juaMh+WumuaXpeacnyAoc3RhcnRfZGF0ZSkg55u46ZqU77yI5LmL5YmN5oiW5LmL5ZCO77yJ5oyH56S655qE5pyI5Lu95pWwXCIsXG4gICAgICAgICAgICBcImRhdGVcIjogXCLkuIDkuKrku6PooajlvIDlp4vml6XmnJ/nmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLml6XmnJ/kuYvliY3miJbkuYvlkI7nmoTmnIjku73mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkVGRkVDVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVGRkVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVGRkVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLliKnnlKjnu5nlrprnmoTlkI3kuYnlubTliKnnjoflkozmr4/lubTnmoTlpI3liKnmnJ/mlbDvvIzorqHnrpfmnInmlYjnmoTlubTliKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5ZCN5LmJ5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuavj+W5tOeahOWkjeWIqeacn+aVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRU9NT05USFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVPTU9OVEgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVPTU9OVEgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mn5DkuKrmnIjku73mnIDlkI7kuIDlpKnnmoTluo/liJflj7fvvIzor6XmnIjku73kuI4g5pel5pyfIOebuOmalO+8iOS5i+WQjuaIluS5i+WQju+8ieaMh+ekuueahOaciOS7veaVsFwiLFxuICAgICAgICAgICAgXCJkYXRlXCI6IFwi6KGo56S65byA5aeL5pel5pyf55qE5pel5pyfXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5pel5pyfIOS5i+WJjeaIluS5i+WQjueahOaciOS7veaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRVJGXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRVJGKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFUkYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMC43NDVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6K+v5beu5Ye95pWw5Zyo5LiK5LiL6ZmQ5LmL6Ze055qE56ev5YiGXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWHveaVsOeahOenr+WIhuS4i+mZkFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlh73mlbDnmoTnp6/liIbkuIrpmZDjgIIg5aaC5p6c55yB55Wl77yMRVJGIOenr+WIhuWwhuWcqOmbtuWIsCBsb3dlcl9saW1pdCDkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkVSRkNQUkVDSVNFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRVJGQ1BSRUNJU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRVJGQ1BSRUNJU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ku44g5pWw5YC8IOWIsOaXoOept+Wkp+enr+WIhueahOS6kuihpSBFUkYg5Ye95pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5Ye95pWw55qE56ev5YiG5LiL6ZmQXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJFUlJPUi5UWVBFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRVJST1IuVFlQRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFUlJPUi5UWVBFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWvueW6lOS6jiBNaWNyb3NvZnQgRXhjZWwg5Lit55qE6ZSZ6K+v5YC85LmL5LiA55qE5pWw5a2X5oiW6L+U5Zue4oCcI04vQeKAnemUmeivr++8iOWmguaenOS4jeWtmOWcqOmUmeivr++8iVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgeafpeaJvuWFtuagh+ivhuWPt+eahOmUmeivr+WAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRVZFTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVWRU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRVZFTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxLjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pWw5a2X5ZCR5LiK6IiN5YWl5Yiw55qE5pyA5o6l6L+R55qE5YG25pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB6IiN5YWl55qE5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJFWEFDVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVYQUNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaWh+acrDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5paH5pysMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJFWEFDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLmr5TovoPkuKTkuKrmlofmnKzlrZfnrKbkuLLvvIzlpoLmnpzlroPku6zlrozlhajnm7jlkIzvvIzliJnov5Tlm54gVFJVRe+8jOWQpuWImei/lOWbniBGQUxTRVwiLFxuICAgICAgICAgICAgXCJ0ZXh0MVwiOiBcIuesrOS4gOS4quaWh+acrOWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJ0ZXh0MlwiOiBcIuesrOS6jOS4quaWh+acrOWtl+espuS4slwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRVhQT04uRElTVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkVYUE9OLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRVhQT04uRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUUlVFXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaMh+aVsOWIhuW4g1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlh73mlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Y+C5pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIumAu+i+keWAvO+8jOeUqOS6juaMh+WumuaMh+aVsOWHveaVsOeahOW9ouW8j1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRi5ESVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRi5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm54gRiDmpoLnjofliIbluIPlh73mlbDnmoTlh73mlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi55So5p2l6K6h566X5Ye95pWw55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuWtkOiHqueUseW6plwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbmr43oh6rnlLHluqZcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5Yaz5a6a5Ye95pWw5b2i5byP55qE6YC76L6R5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJGLklOVlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkYuSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkYuSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbniBGIOamgueOh+WIhuW4g+WHveaVsOeahOWPjeWHveaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCJGIOe0r+enr+WIhuW4g+eahOamgueOh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLliIblrZDoh6rnlLHluqZcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5YiG5q+N6Ieq55Sx5bqmXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJGLlRFU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGLlRFU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGLlRFU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjI6QjZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Yik5pat5Lik5Liq5qC35pys55qE5pa55beu5piv5ZCm5LiN5ZCMXCIsXG4gICAgICAgICAgICBcImFycmF5MVwiOiBcIuesrOS4gOS4quaVsOe7hOaIluaVsOaNruWMuuWfn1wiLFxuICAgICAgICAgICAgXCJhcnJheTJcIjogXCLnrKzkuozkuKrmlbDnu4TmiJbmlbDmja7ljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZBQ1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGQUNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZBQ1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mn5DmlbDnmoTpmLbkuZhcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHorqHnrpflhbbpmLbkuZjnmoTpnZ7otJ/mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZBQ1RET1VCTEVcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGQUNURE9VQkxFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZBQ1RET1VCTEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDlrZfnmoTlj4zlgI3pmLbkuZhcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHorqHnrpflhbblj4zlgI3pmLbkuZjnmoTmlbDlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZBTFNFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRkFMU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZBTFNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57pgLvovpHlgLwgRkFMU0VcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkYuRElTVC5SVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkYuRElTVC5SVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGLkRJU1QuUlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Lik5Liq5pWw5o2u6ZuG55qE77yI5Y+z5bC+77yJRiDmpoLnjofliIbluIPvvIjlj5jljJbnqIvluqbvvIlcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi55So5p2l6K6h566X5Ye95pWw55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuWtkOiHqueUseW6plwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbmr43oh6rnlLHluqZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZJTkRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGSU5EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaWh+acrDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5paH5pysMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5pWw5YC8XVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGSU5EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIidNJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJb5pWw5YC8XVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjVcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIueUqOS6juWcqOaWh+acrDLkuK3lrprkvY3mlofmnKwx77yM5bm26L+U5Zue5paH5pysMeeahOi1t+Wni+S9jee9rueahOWAvO+8jOivpeWAvOS7juaWh+acrDLnmoTnrKzkuIDkuKrlrZfnrKbnrpfotbdcIixcbiAgICAgICAgICAgIFwidGV4dDFcIjogXCLopoHmn6Xmib7nmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwidGV4dDJcIjogXCLljIXlkKvopoHmn6Xmib7mlofmnKznmoTmlofmnKxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkYuSU5WLlJUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRi5JTlYuUlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRi5JTlYuUlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue77yI5Y+z5bC+77yJRiDmpoLnjofliIbluIPlh73mlbDnmoTlj43lh73mlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwiRiDntK/np6/liIbluIPnmoTmpoLnjoflgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5YiG5a2Q6Ieq55Sx5bqmXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuWIhuavjeiHqueUseW6plwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRklTSEVSXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRklTSEVSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZJU0hFUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwLjc1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbniB4IOeahCBGaXNoZXIg5Y+Y5o2i5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB5a+55YW26L+b6KGM5Y+Y5o2i55qE5pWw5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJGSVNIRVJJTlZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGSVNIRVJJTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRklTSEVSSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuOTcyOTU1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbniBGaXNoZXIg6YCG5Y+Y5o2i5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB5a+55YW26L+b6KGM6YCG5Y+Y5o2i55qE5pWw5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJGSVhFRFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZJWEVEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlM11cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRklYRUQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmlbDlrZfoiI3lhaXliLDmjIflrprnmoTlsI/mlbDkvY3mlbDvvIzkvb/nlKjlj6XngrnlkozpgJflj7fvvIzku6XljYHov5vliLbmlbDmoLzlvI/lr7nor6XmlbDov5vooYzmoLzlvI/orr7nva7vvIzlubbku6XmlofmnKzlvaLlvI/ov5Tlm57nu5PmnpxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB6L+b6KGM6IiN5YWl5bm26L2s5o2i5Li65paH5pys55qE5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWwj+aVsOeCueWPs+i+ueeahOS9jeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLkuIDkuKrpgLvovpHlgLzvvIzlpoLmnpzkuLogVFJVRe+8jOWImeS8muemgeatoiBGSVhFRCDlnKjov5Tlm57nmoTmlofmnKzkuK3ljIXlkKvpgJflj7dcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZMT09SXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRkxPT1IoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGTE9PUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzLjdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIblj4LmlbAgdmFsdWUxIOWQkeS4i+iIjeWFpe+8iOayv+e7neWvueWAvOWHj+Wwj+eahOaWueWQke+8ieS4uuacgOaOpei/keeahCB2YWx1ZTIg55qE5YCN5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgeiIjeWFpeeahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLopoHoiI3lhaXliLDnmoTlgI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZMT09SLk1BVEhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGTE9PUi5NQVRIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUzXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGTE9PUi5NQVRIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIi01LjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmlbDlrZflkJHkuIvoiI3lhaXkuLrmnIDmjqXov5HnmoTmlbTmlbDmiJbmnIDmjqXov5HnmoTmjIflrprln7rmlbDnmoTlgI3mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5ZCR5LiL6IiN5YWl55qE5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeiIjeWFpeWIsOeahOWAjeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLoiI3lhaXotJ/mlbDnmoTmlrnlkJHvvIjmjqXov5HmiJbov5znprsgMO+8iVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiRkxPT1IuUFJFQ0lTRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZMT09SLlBSRUNJU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZMT09SLlBSRUNJU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLTMuMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDkuKrmlbDlrZfvvIzor6XmlbDlrZflkJHkuIvoiI3lhaXkuLrmnIDmjqXov5HnmoTmlbTmlbDmiJbmnIDmjqXov5HnmoQgdmFsdWUyIOeahOWAjeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHov5vooYzoiI3lhaXnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5bCG5pWw5a2X6IiN5YWl55qE5YCN5pWw44CC5aaC5p6c55yB55WlLOWImeWFtum7mOiupOWAvOS4uiAxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJGT1JFQ0FTVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZPUkVDQVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGT1JFQ0FTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLmoLnmja7njrDmnInlgLzorqHnrpfmiJbpooTmtYvmnKrmnaXlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHov5vooYzlgLzpooTmtYvnmoTmlbDmja7ngrlcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLnm7jlhbPmlbDnu4TmiJbmlbDmja7ljLrln59cIixcbiAgICAgICAgICAgIFwiYXJlYTJcIjogXCLni6znq4vmlbDnu4TmiJbmlbDmja7ljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZSRVFVRU5DWVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZSRVFVRU5DWShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZSRVFVRU5DWShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBMTBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjI6QjRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Ye95pWw6K6h566X5YC85Zyo5p+Q5Liq6IyD5Zu05YaF5Ye6546w55qE6aKR546HLCDnhLblkI7ov5Tlm57kuIDkuKrlnoLnm7TnmoTmlbDlrZfmlbDnu4RcIixcbiAgICAgICAgICAgIFwiYXJyYXkxXCI6IFwiIOimgeWvueWFtumikeeOh+i/m+ihjOiuoeaVsOeahOS4gOe7hOaVsOWAvOaIluWvuei/mee7hOaVsOWAvOeahOW8leeUqFwiLFxuICAgICAgICAgICAgXCJhcnJheTJcIjogXCIg6KaB5bCGIGFycmF5MSDkuK3nmoTlgLzmj5LlhaXliLDnmoTpl7TpmpTmlbDnu4TmiJblr7npl7TpmpTnmoTlvJXnlKhcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkZWXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNF1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTIvMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi55So5LqO5qC55o2u5Zu65a6a5Yip546H6K6h566X5oqV6LWE55qE5pyq5p2l5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWQhOacn+WIqeeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlubTph5HnmoTku5jmrL7mgLvmnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5ZCE5pyf5omA5bqU5pSv5LuY55qE6YeR6aKd77yM5Zyo5pW05Liq5bm06YeR5pyf6Ze05L+d5oyB5LiN5Y+YXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIiDnjrDlgLzvvIzmiJbkuIDns7vliJfmnKrmnaXku5jmrL7nmoTlvZPliY3lgLznmoTntK/np6/lkozjgIIg5aaC5p6c55yB55WlIHZhbHVlNO+8jOWImeWBh+WumuWFtuWAvOS4uiAwXCIsXG4gICAgICAgICAgICBcInZhbHVlNVwiOiBcIuaVsOWtlyAwIOaIliAx77yM55So5Lul5oyH5a6a5ZCE5pyf55qE5LuY5qy+5pe26Ze05piv5Zyo5pyf5Yid6L+Y5piv5pyf5pyr44CC5aaC5p6c55yB55WlIHZhbHVlNe+8jOWImeWBh+WumuWFtuWAvOS4uiAwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJGVlNDSEVEVUxFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRlZTQ0hFRFVMRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJGVlNDSEVEVUxFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiezAuMDksMC4xMSwwLjF9XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuW6lOeUqOS4gOezu+WIl+WkjeWIqeeOh+iuoeeul+eahOWIneWni+acrOmHkeeahOacquadpeWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIueOsOWAvFwiLFxuICAgICAgICAgICAgXCJhcnJheVwiOiBcIuimgeW6lOeUqOeahOWIqeeOh+aVsOe7hFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiR0FNTUFcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHQU1NQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHQU1NQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyLjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIGdhbW1hIOWHveaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIui/lOWbnuS4gOS4quaVsOWtl1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiR0FNTUEuRElTVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdBTU1BLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdBTU1BLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRkFMU0VcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Ly9546b5YiG5biD5Ye95pWw55qE5Ye95pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIueUqOadpeiuoeeul+WIhuW4g+eahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLliIbluIPlj4LmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5YiG5biD5Y+C5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuWGs+WumuWHveaVsOW9ouW8j+eahOmAu+i+keWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiR0FNTUEuSU5WXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiR0FNTUEuSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdBTU1BLklOVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kvL3njpvntK/np6/liIbluIPlh73mlbDnmoTlj43lh73mlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Ly9546b5YiG5biD55u45YWz55qE5qaC546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuW4g+WPguaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbluIPlj4LmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkdBTU1BTE5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHQU1NQUxOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdBTU1BTE4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kvL3njpvlh73mlbDnmoToh6rnhLblr7nmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHorqHnrpflhbYgR0FNTUFMTiDnmoTmlbDlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkdBTU1BTE4uUFJFQ0lTRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdBTU1BTE4uUFJFQ0lTRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHQU1NQUxOLlBSRUNJU0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kvL3njpvlh73mlbDnmoToh6rnhLblr7nmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHorqHnrpflhbYgR0FNTUFMTi5QUkVDSVNFIOeahOaVsOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiR0FVU1NcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHQVVTUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHQVVTUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuiuoeeul+agh+WHhuato+aAgeaAu+S9k+eahOaIkOWRmOWkhOS6juW5s+Wdh+WAvOS4juW5s+Wdh+WAvOeahCB6IOWAjeagh+WHhuWBj+W3ruS5i+mXtOeahOamgueOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIui/lOWbnuS4gOS4quaVsOWtl1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiR0NEXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiR0NEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiR0NEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjM2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4pOS4quaIluWkmuS4quaVtOaVsOeahOacgOWkp+WFrOe6puaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jiAxIOWSjCAyNTUg5LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJHRU9NRUFOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiR0VPTUVBTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdFT01FQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QThcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA57uE5q2j5pWw5pWw5o2u5oiW5q2j5pWw5pWw5o2u5Yy65Z+f55qE5Yeg5L2V5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lrp7mlbAs5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiR0VTVEVQXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiR0VTVEVQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHRVNURVAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWPr+S7peS9v+eUqOatpOWHveaVsOadpeetm+mAieS4gOe7hOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHpkojlr7nmraXpqqTov5vooYzmtYvor5XnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5aaC5p6c55yB55Wl77yM5YiZIEdFU1RFUCDkvb/nlKjpm7ZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkdST1dUSFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkdST1dUSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpm4blkIgxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvpm4blkIgyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUxXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJHUk9XVEgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjI6QjdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMV1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjo1XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjdcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuS9v+eUqOeOsOacieaVsOaNruiuoeeul+mihOa1i+eahOaMh+aVsOetieavlFwiLFxuICAgICAgICAgICAgXCJzZXQxXCI6IFwi5YWz57O76KGo6L6+5byPIHkgPSBiKm1eeCDkuK3lt7Lnn6XnmoQgeSDlgLzpm4blkIhcIixcbiAgICAgICAgICAgIFwic2V0MlwiOiBcIuWFs+ezu+ihqOi+vuW8jyB5PWIqbV54IOS4reW3suefpeeahCB4IOWAvOmbhuWQiFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCIg6ZyA6KaBIEdST1dUSCDov5Tlm57lr7nlupQgeSDlgLznmoTmlrAgeCDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwiIOS4gOS4qumAu+i+keWAvO+8jOeUqOS6juaMh+WumuaYr+WQpuWwhuW4uOmHjyBiIOW8uuWItuiuvuS4uiAxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJIQVJNRUFOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSEFSTUVBTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkhBUk1FQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QThcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA57uE5pWw5o2u55qE6LCD5ZKM5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lrp7mlbAs5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSEVYMkJJTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkhFWDJCSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkhFWDJCSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ0YnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5Y2B5YWt6L+b5Yi25pWw6L2s5o2i5Li65LqM6L+b5Yi25pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgei9rOaNoueahOWNgeWFrei/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLopoHkvb/nlKjnmoTlrZfnrKbmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkhFWDJERUNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJIRVgyREVDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkhFWDJERUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ0ZGRkZGRkZGNUInXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuWNgeWFrei/m+WItuaVsOi9rOaNouS4uuWNgei/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgei9rOaNoueahOWNgeWFrei/m+WItuaVsFwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkhFWDJPQ1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJIRVgyT0NUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJIRVgyT0NUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIidGJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuWNgeWFrei/m+WItuaVsOi9rOaNouS4uuWFq+i/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHovazmjaLnmoTljYHlha3ov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5L2/55So55qE5a2X56ym5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJITE9PS1VQXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSExPT0tVUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUzXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJITE9PS1VQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIidCJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpDMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSVUVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Zyo6KGo5qC855qE6aaW6KGM5oiW5pWw5YC85pWw57uE5Lit5pCc57Si5YC877yM54S25ZCO6L+U5Zue6KGo5qC85oiW5pWw57uE5Lit5oyH5a6a6KGM55qE5omA5Zyo5YiX5Lit55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgeWcqOihqOagvOeahOesrOS4gOihjOS4reafpeaJvueahOWAvFwiLFxuICAgICAgICAgICAgXCJhcnJheTFcIjogXCLlnKjlhbbkuK3mn6Xmib7mlbDmja7nmoTkv6Hmga/ooahcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwiYXJyYXkxIOS4reWwhui/lOWbnuWMuemFjeWAvOeahOihjOWPt1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLkuIDkuKrpgLvovpHlgLzvvIzmjIflrprluIzmnJsgSExPT0tVUCDmn6Xmib7nsr7noa7ljLnphY3lgLzov5jmmK/ov5HkvLzljLnphY3lgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkhPVVJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJIT1VSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXtumXtFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJIT1VSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaXtumXtOWAvOeahOWwj+aXtuaVsFwiLFxuICAgICAgICAgICAgXCJ0aW1lXCI6IFwi5pe26Ze05YC877yM5YW25Lit5YyF5ZCr6KaB5p+l5om+55qE5bCP5pe25pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJIWVBHRU9NLkRJU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJIWVBHRU9NLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIi5cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkhZUEdFT00uRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIi5cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUUlVFXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnui2heWHoOS9leWIhuW4g1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmoLfmnKzkuK3miJDlip/nmoTmrKHmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5qC35pys6YePXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuaAu+S9k+S4reaIkOWKn+eahOasoeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTRcIjogXCLmgLvkvZPlpKflsI9cIixcbiAgICAgICAgICAgIFwidmFsdWU1XCI6IFwi5Yaz5a6a5Ye95pWw5b2i5byP55qE6YC76L6R5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJRlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklGKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuadoeS7tlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSUYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI+QjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ+i2heWHuumihOeulydcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJ+ato+W4uCdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5aaC5p6c5p2h5Lu25Li655yf77yM6K+l5Ye95pWw5bCG6L+U5Zue5LiA5Liq5YC877yb5aaC5p6c5p2h5Lu25Li65YGH77yM5Ye95pWw5bCG6L+U5Zue5Y+m5LiA5Liq5YC8XCIsXG4gICAgICAgICAgICBcImNvbmRpdG9uXCI6IFwi6KaB5rWL6K+V55qE5p2h5Lu2XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuadoeS7tueahOe7k+aenOS4uiBUUlVFIOaXtu+8jOaCqOW4jOacm+i/lOWbnueahOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmnaHku7bnmoTnu5PmnpzkuLogRkFMU0Ug5pe277yM5oKo5biM5pyb6L+U5Zue55qE5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJRkVSUk9SXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSUZFUlJPUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlgLwxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvDJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSUZFUlJPUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMi9CMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIn6K6h566X5Lit5pyJ6ZSZ6K+vJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlj6/ku6Xkvb/nlKggSUZFUlJPUiDlh73mlbDmjZXojrflkozlpITnkIblhazlvI/kuK3nmoTplJnor69cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5qOA5p+l5piv5ZCm5a2Y5Zyo6ZSZ6K+v55qE5Y+C5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWFrOW8j+iuoeeul+mUmeivr+aXtui/lOWbnueahOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSUZOQVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklGTkEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Y+C5pWwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklGTkEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6ICdWTE9PS1VQKFwiU2VhdHRsZVwiLCRBJDU6JEIkMTAsMCknLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInTm90IGZvdW5kJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlpoLmnpzlhazlvI/ov5Tlm57plJnor6/lgLwgI04vQe+8jOWImee7k+aenOi/lOWbnuaCqOaMh+WumueahOWAvO+8m+WQpuWImei/lOWbnuWFrOW8j+eahOe7k+aenFwiLFxuICAgICAgICAgICAgXCJwYXJhbVwiOiBcIueUqOS6juajgOafpemUmeivr+WAvCAjTi9BIOeahOWPguaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWFrOW8j+iuoeeul+e7k+aenOS4uumUmeivr+WAvCAjTi9BIOaXtuimgei/lOWbnueahOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSUZTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSUZTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuadoeS7tjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5YC8MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5p2h5Lu2MizlgLwyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSUZTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyPjg5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIidBJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJb5p2h5Lu2MizlgLwyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjo1XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlh73mlbDmo4Dmn6XmmK/lkKbmu6HotrPkuIDkuKrmiJblpJrkuKrmnaHku7bvvIzkuJTov5Tlm57nrKblkIjnrKzkuIDkuKogVFJVRSDmnaHku7bnmoTlgLxcIixcbiAgICAgICAgICAgIFwiY29uZGl0aW9uMVwiOiBcIuiuoeeul+e7k+aenOS4uiBUUlVFIOaIliBGQUxTRSDnmoTmnaHku7ZcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlvZMg5p2h5Lu2MSDnmoTorqHnrpfnu5PmnpzkuLogVFJVRSDml7bopoHov5Tlm57nu5PmnpzjgIIg5Y+v5Lul5Li656m644CCXCIsXG4gICAgICAgICAgICBcImNvbmRpdGlvbjJcIjogXCLlhbbku5blj4LmlbDlr7lcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNQUJTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1BQlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1BQlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzUrMTJpJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ku6UgeCt5aSDmiJYgeCt5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTnu53lr7nlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHorqHnrpflhbbnu53lr7nlgLznmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNQUdJTkFSWVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNQUdJTkFSWShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTUFHSU5BUlkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzMrNGknXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOWkjeaVsOeahOiZmuezu+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumcgOimgeiuoeeul+WFtuiZmuezu+aVsOeahOWkjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU1BUkdVTUVOVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNQVJHVU1FTlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1BUkdVTUVOVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMys0aSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Y+C5pWwICDOuCAodGhldGEp77yM5Y2z5Lul5byn5bqm6KGo56S655qE6KeSXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW25Y+C5pWwICDOuCDnmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNQ09OSlVHQVRFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1DT05KVUdBVEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTUNPTkpVR0FURShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMys0aSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ku6UgeCt5aSDmiJYgeCt5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTlhbHova3lpI3mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHorqHnrpflhbblhbHova3mlbDnmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNQ09TXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1DT1MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1DT1MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzEraSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5aSN5pWw55qE5L2Z5bymXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW25L2Z5bym55qE5aSN5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTUNPU0hcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTUNPU0hcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTUNPU0hcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInNCszaSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5aSN5pWw55qE5Y+M5puy5L2Z5bym5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW25Y+M5puy5L2Z5bym5YC855qE5aSN5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTUNPVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNQ09UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNQ09UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic0KzNpJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ku6UgeCt5aSDmiJYgeCt5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTkvZnliIflgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHlr7nlhbbkvZnliIflgLznmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNQ1NDXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1DU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1DU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOWkjeaVsOeahOS9meWJsuWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgeWvueWFtuS9meWJsuWAvOeahOWkjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU1DU0NIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1DU0NIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNQ1NDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInNCszaSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5aSN5pWw55qE5Y+M5puy5L2Z5Ymy5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW25Y+M5puy5L2Z5Ymy5YC855qE5aSN5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTURJVlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNRElWKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1ESVYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJy0yMzgrMjQwaSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzEwKzI0aSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5Lik5Liq5aSN5pWw55qE5ZWGXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWkjeaVsOWIhuWtkOaIluiiq+mZpOaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlpI3mlbDliIbmr43miJbpmaTmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNRVhQXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1FWFAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1FWFAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOWkjeaVsOeahOaMh+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumcgOimgeiuoeeul+WFtuaMh+aVsOeahOWkjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU1MTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNTE4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1MTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInNCszaSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5aSN5pWw55qE6Ieq54S25a+55pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW26Ieq54S25a+55pWw55qE5aSN5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTUxPRzJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTUxPRzIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1MT0cyKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic0KzNpJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tov5Tlm57ku6UgeCt5aSDmiJYgeCt5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTku6UgMiDkuLrlupXmlbDnmoTlr7nmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHorqHnrpfku6UgMiDkuLrlupXmlbDnmoTlr7nmlbDnmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNTE9HMTBcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTUxPRzEwKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNTE9HMTAoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4ICsgeWkg5oiWIHggKyB5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTluLjnlKjlr7nmlbDvvIjku6UgMTAg5Li65bqV5pWw77yJXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW25bi455So5a+55pWw55qE5aSN5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTVBPV0VSXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1QT1dFUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNUE9XRVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5aSN5pWw55qEIG4g5qyh5bmCXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIumcgOimgeiuoeeul+WFtuW5guWAvOeahOWkjeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLpnIDopoHlr7nlpI3mlbDlupTnlKjnmoTluYLmrKFcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNUFJPRFVDVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNUFJPRFVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNUFJPRFVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMSsyaSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMzBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qEIDEg6IezIDI1NSDkuKrlpI3mlbDnmoTkuZjnp69cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lu75oSP5aSN5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS7u+aEj+WkjeaVsCzkuKrmlbDku4vkuo4x5YiwMjU15LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTVJFQUxcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTVJFQUwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1SRUFMKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic0KzNpJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ku6UgeCt5aSDmiJYgeCt5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTlrp7ns7vmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHorqHnrpflhbblrp7ns7vmlbDnmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNU0VDXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1TRUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1TRUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOWkjeaVsOeahOato+WJsuWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumcgOimgeiuoeeul+WFtuato+WJsuWAvOeahOWkjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU1TRUNIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1TRUNIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNU0VDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInNCszaSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5aSN5pWw55qE5Y+M5puy5q2j5Ymy5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6K6h566X5YW25Y+M5puy5q2j5Ymy5YC855qE5aSN5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTVNJTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNU0lOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNU0lOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIic0KzNpJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ku6UgeCt5aSDmiJYgeCt5aiDmlofmnKzmoLzlvI/ooajnpLrnmoTlpI3mlbDnmoTmraPlvKblgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHorqHnrpflhbbmraPlvKbnmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNU0lOSFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNU0lOSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTVNJTkgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4ICsgeWkg5oiWIHggKyB5aiDmlofmnKzmoLzlvI/nmoTlpI3mlbDnmoTlj4zmm7LmraPlvKblgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHlr7nlhbblj4zmm7LmraPlvKblgLznmoTlpI3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNU1FSVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNU1FSVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTVNRUlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOWkjeaVsOeahOW5s+aWueaguVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumcgOimgeiuoeeul+WFtuW5s+aWueagueeahOWkjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU1TVUJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTVNVQihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklNU1VCKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIicxMys0aSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzUrM2lcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LulIHgreWkg5oiWIHgreWog5paH5pys5qC85byP6KGo56S655qE5Lik5Liq5aSN5pWw55qE5beuXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7ju+8iOWkje+8ieaVsOS4reWHj+WOuyB2YWx1ZTJcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5LuOIHZhbHVlMSDkuK3lh4/vvIjlpI3vvInmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNU1VNXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1TVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTVNVTShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMys0aSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzUtM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOS4pOS4quaIluWkmuS4quWkjeaVsOeahOWSjFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lpI3mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5aSN5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklNVEFOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1UQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU1UQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJzQrM2knXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS7pSB4K3lpIOaIliB4K3lqIOaWh+acrOagvOW8j+ihqOekuueahOWkjeaVsOeahOato+WIh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgeWvueWFtui/m+ihjOWIh+e6v+eahOWkjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU5ERVhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTkRFWChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlh73mlbDpgILnlKjooYxcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+WHveaVsOmAgueUqOWIl11cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU5ERVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWHveaVsOi/lOWbnuihqOagvOaIluWMuuWfn+S4reeahOWAvOaIluWAvOeahOW8leeUqFwiLFxuICAgICAgICAgICAgXCJhcnJheVwiOiBcIuWNleWFg+agvOWMuuWfn+aIluaVsOe7hOW4uOmHj1wiLFxuICAgICAgICAgICAgXCJmdW5jcm93XCI6IFwi6YCJ5oup5pWw57uE5Lit55qE5p+Q6KGM77yM5Ye95pWw5LuO6K+l6KGM6L+U5Zue5pWw5YC8XCIsXG4gICAgICAgICAgICBcImZ1bmNjb2x1bVwiOiBcIumAieaLqeaVsOe7hOS4reeahOafkOWIl++8jOWHveaVsOS7juivpeWIl+i/lOWbnuaVsOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU5GT1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklORk8oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTkZPKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIidudW1maWxlJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mnInlhbPlvZPliY3mk43kvZznjq/looPnmoTkv6Hmga9cIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIueUqOS6juaMh+Wumuimgei/lOWbnueahOS/oeaBr+exu+Wei+eahOaWh+acrFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSU5UXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU5UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklOVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI4LjlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5pWw5a2X5ZCR5LiL6IiN5YWl5Yiw5pyA5o6l6L+R55qE5pW05pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6ZyA6KaB6L+b6KGM5ZCR5LiL6IiN5YWl5Y+W5pW055qE5a6e5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTlRFUkNFUFRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTlRFUkNFUFQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZuG5ZCIMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpm4blkIgyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklOVEVSQ0VQVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLliKnnlKjlt7Lnn6XnmoQgeCDlgLzkuI4geSDlgLzorqHnrpfnm7Tnur/kuI4geSDovbTkuqTlj4nngrlcIixcbiAgICAgICAgICAgIFwic2V0MVwiOiBcIuWboOWPmOeahOinguWvn+WAvOaIluaVsOaNrueahOmbhuWQiFwiLFxuICAgICAgICAgICAgXCJzZXQyXCI6IFwi6Ieq5Y+Y55qE6KeC5a+f5YC85oiW5pWw5o2u55qE6ZuG5ZCIXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJTlRSQVRFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSU5UUkFURShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJTlRSQVRFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWujOWFqOaKlei1hOWei+ivgeWIuOeahOWIqeeOh1wiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuacieS7t+ivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuacieS7t+ivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmnInku7for4HliLjnmoTmipXotYTpop1cIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pyJ5Lu36K+B5Yi45Yiw5pyf5pe255qE5YWR5o2i5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJUE1UXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVBNVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMTFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklQTVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTIvMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTQqMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjo5XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWU2XVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjExXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLln7rkuo7lm7rlrprliKnnjoflj4rnrYnpop3liIbmnJ/ku5jmrL7mlrnlvI/vvIzov5Tlm57nu5nlrprmnJ/mlbDlhoXlr7nmipXotYTnmoTliKnmga/lgb/ov5jpop1cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5ZCE5pyf5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIueUqOS6juiuoeeul+WFtuWIqeaBr+aVsOmineeahOacn+aVsO+8jOW/hemhu+WcqCAxIOWIsCB2YWx1ZTMg5LmL6Ze0XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuW5tOmHkeeahOS7mOasvuaAu+acn+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTRcIjogXCLnjrDlgLzvvIzmiJbkuIDns7vliJfmnKrmnaXku5jmrL7nmoTlvZPliY3lgLznmoTntK/np6/lkoxcIixcbiAgICAgICAgICAgIFwidmFsdWU1XCI6IFwi5pyq5p2l5YC877yM5oiW5Zyo5pyA5ZCO5LiA5qyh5LuY5qy+5ZCO5biM5pyb5b6X5Yiw55qE546w6YeR5L2Z6aKdXCIsXG4gICAgICAgICAgICBcInZhbHVlNlwiOiBcIuaVsOWtlyAwIOaIliAx77yM55So5Lul5oyH5a6a5ZCE5pyf55qE5LuY5qy+5pe26Ze05piv5Zyo5pyf5Yid6L+Y5piv5pyf5pyr44CCIOWmguaenOecgeeVpSB2YWx1ZTbvvIzliJnlgYflrprlhbblgLzkuLogMFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNFUlJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU0VSUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlgLxcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNFUlIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5qOA6aqM5piv5ZCm5a2Y5Zyo6ZSZ6K+v5oOF5b2iXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5YC85Li65Lu75oSP6ZSZ6K+v5YC877yI6Zmk5Y67ICNOL0HvvIks5YiZ6L+U5ZueVFJVRVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNFUlJPUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTRVJST1IoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5YC8XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTRVJST1IoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5qOA6aqM5piv5ZCm5a2Y5Zyo6ZSZ6K+v5oOF5b2iXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5YC85Li65Lu75oSP6ZSZ6K+v5YC8LOWImei/lOWbnlRSVUVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklTRVZFTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTRVZFTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU0VWRU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5aaC5p6c5Y+C5pWwIOaVsOWAvCDkuLrlgbbmlbDvvIzov5Tlm54gVFJVRe+8jOWQpuWImei/lOWbniBGQUxTRVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgea1i+ivleeahOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNGT1JNVUxBXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNGT1JNVUxBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuW8leeUqFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU0ZPUk1VTEEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5qOA5p+l5piv5ZCm5a2Y5Zyo5YyF5ZCr5YWs5byP55qE5Y2V5YWD5qC85byV55So77yM54S25ZCO6L+U5ZueIFRSVUUg5oiWIEZBTFNFXCIsXG4gICAgICAgICAgICBcInJlZmVyZW5jZVwiOiBcIuW8leeUqOaYr+Wvueimgea1i+ivleWNleWFg+agvOeahOW8leeUqFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNMT0dJQ0FMXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNMT0dJQ0FMKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU0xPR0lDQUwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLliKTmlq3mmK/lkKbkuLrpgLvovpHlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlpoLmnpzkuLrpgLvovpHlgLzov5Tlm55UUlVFLOWQpuWImei/lOWbnkZBTFNFXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJU05BXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNOQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlgLxcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNOQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIjTi9BXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWIpOaWreaYr+WQpuS4uiNOL0FcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlpoLmnpzkuLojTi9B6L+U5ZueVFJVRSzlkKbliJnov5Tlm55GQUxTRVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNOT05URVhUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNOT05URVhUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU05PTlRFWFQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiI04vQVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLliKTmlq3mmK/lkKbkuLrpnZ7mlofmnKznmoTku7vmhI/poblcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlpoLmnpzkuLrpnZ7mlofmnKznmoTku7vmhI/pobnov5Tlm55UUlVFLOWQpuWImei/lOWbnkZBTFNFXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJU05VTUJFUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTTlVNQkVSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU05VTUJFUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWIpOaWreaYr+WQpuS4uuaVsOWtl1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWmguaenOS4uuaVsOWtl+i/lOWbnlRSVUUs5ZCm5YiZ6L+U5ZueRkFMU0VcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklTTy5DRUlMSU5HXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNPLkNFSUxJTkcoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTTy5DRUlMSU5HKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjQuM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4gOS4quaVsOWtl++8jOivpeaVsOWtl+WQkeS4iuiIjeWFpeS4uuacgOaOpei/keeahOaVtOaVsOaIluacgOaOpei/keeahOacieaViOS9jeeahOWAjeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHov5vooYzoiI3lhaXnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5bCG5pWw5a2X6IiN5YWl55qE5Y+v6YCJ5YCN5pWw44CC5aaC5p6c55yB55Wl77yM5YiZ5YW26buY6K6k5YC85Li6IDFcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIklTT0REXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNPREQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5YC8XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTT0REKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Yik5pat5piv5ZCm5Li65aWH5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5aaC5p6c5Li65aWH5pWw6L+U5ZueVFJVRSzlkKbliJnov5Tlm55GQUxTRVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNPV0VFS05VTVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTT1dFRUtOVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTT1dFRUtOVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue57uZ5a6a5pel5pyf5Zyo5YWo5bm05Lit55qEIElTTyDlkajmlbBcIixcbiAgICAgICAgICAgIFwiZGF0ZVwiOiBcIuaXpeacn+aYryBFeGNlbCDnlKjkuo7ml6XmnJ/lkozml7bpl7TorqHnrpfnmoTml6XmnJ8t5pe26Ze05Luj56CBXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJJU1BNVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIklTUE1UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU1BNVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLorqHnrpfku5jolqogKOaIluaKlei1hCkg5oyH5a6a5pyf6Ze05YaFICjnlJroh7PmnKzph5Hku5jmrL4pIOaUr+S7mOeahOWIqeaBryAo5oiW5o6l5pS2KVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmipXotYTnmoTliKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB5p+l5om+5YW25Yip5oGv55qE5pyf6Ze0LCDlubbkuJTlv4Xpobvku4vkuo4x5ZKMIHZhbHVlMyDkuYvpl7RcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5oqV6LWE55qE5oC75pSv5LuY5pyf5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuaKlei1hOeahOeOsOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiSVNSRUZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJJU1JFRihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlgLxcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiSVNSRUYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Yik5pat5piv5ZCm5Li65byV55SoXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5aaC5p6c5Li65byV55So6L+U5ZueVFJVRSzlkKbliJnov5Tlm55GQUxTRVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiS1VSVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIktVUlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJLVVJUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4TmlbDmja7nmoTls7DlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lu75oSP5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS7u+aEj+WAvCzkuKrmlbDku4vkuo4x5YiwMjU15LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJMQVJHRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkxBUkdFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfn1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMQVJHRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpCNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVsOaNrumbhuS4reesrCBrIOS4quacgOWkp+WAvFwiLFxuICAgICAgICAgICAgXCJhcmVhXCI6IFwi6ZyA6KaB56Gu5a6a56ysIOaVsOWAvCDkuKrmnIDlpKflgLznmoTmlbDnu4TmiJbmlbDmja7ljLrln59cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLov5Tlm57lgLzlnKjmlbDnu4TmiJbmlbDmja7ljZXlhYPmoLzljLrln5/kuK3nmoTkvY3nva7vvIjku47lpKfliLDlsI/mjpLvvIlcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkxDTVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIktVUlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMQ00oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVtOaVsOeahOacgOWwj+WFrOWAjeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/mlbTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5pW05pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkxFRlRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMRUZUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTEVGVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6NVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5LuO5paH5pys5a2X56ym5Liy55qE56ys5LiA5Liq5a2X56ym5byA5aeL6L+U5Zue5oyH5a6a5Liq5pWw55qE5a2X56ymXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLljIXlkKvopoHmj5Dlj5bnmoTlrZfnrKbnmoTmlofmnKzlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5oyH5a6a6KaB55SxIExFRlQg5o+Q5Y+W55qE5a2X56ym55qE5pWw6YePXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuaMieWtl+iKguaMh+WumuimgeeUsSBMRUZUQiDmj5Dlj5bnmoTlrZfnrKbnmoTmlbDph49cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkxJTkVTVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkxJTkVTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpm4blkIgxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvpm4blkIgyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUxXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMSU5FU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjI6QjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRkFMU0VcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjo3XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLkvb/nlKjmnIDlsI/kuozkuZjms5XorqHnrpfkuI7njrDmnInmlbDmja7mnIDkvbPmi5/lkIjnmoTnm7Tnur/vvIzmnaXorqHnrpfmn5Dnm7Tnur/nmoTnu5/orqHlgLzvvIznhLblkI7ov5Tlm57mj4/ov7DmraTnm7Tnur/nmoTmlbDnu4RcIixcbiAgICAgICAgICAgIFwic2V0MVwiOiBcIuWFs+ezu+ihqOi+vuW8jyB5ID0gbXggKyBiIOS4reW3suefpeeahCB5IOWAvOmbhuWQiFwiLFxuICAgICAgICAgICAgXCJzZXQyXCI6IFwi5YWz57O76KGo6L6+5byPIHkgPSBteCArIGIg5Lit5bey55+l55qEIHgg5YC86ZuG5ZCIXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS4gOS4qumAu+i+keWAvO+8jOeUqOS6juaMh+WumuaYr+WQpuWwhuW4uOmHjyBiIOW8uuWItuiuvuS4uiAwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS4gOS4qumAu+i+keWAvO+8jOeUqOS6juaMh+WumuaYr+WQpui/lOWbnumZhOWKoOWbnuW9kue7n+iuoeWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTE9HXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9HKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMT0coXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuagueaNruaMh+WumuW6leaVsOi/lOWbnuaVsOWtl+eahOWvueaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmg7PopoHorqHnrpflhbblr7nmlbDnmoTmraPlrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5a+55pWw55qE5bqV5pWw44CCIOWmguaenOecgeeVpe+8jOWImeWBh+WumuWFtuWAvOS4uiAxMFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTE9HMTBcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMT0cxMChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMT0cxMChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI4NlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDlrZfku6UgMTAg5Li65bqV55qE5a+55pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5oOz6KaB6K6h566X5YW25LulIDEwIOS4uuW6leeahOWvueaVsOeahOato+WunuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTE9HRVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9HRVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumbhuWQiDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+mbhuWQiDJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTFdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkxPR0VTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUUlVFXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZBTFNFXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuiuoeeul+mAguWQiOaCqOeahOaVsOaNrueahOaMh+aVsOabsue6vywg5bm26L+U5Zue5o+P6L+w6K+l5puy57q/55qE5YC85pWw57uEXCIsXG4gICAgICAgICAgICBcInNldDFcIjogXCLlhbPns7vooajovr7lvI8geSA9IGIqbV54IOS4reW3suefpeeahCB5IOWAvOmbhuWQiFwiLFxuICAgICAgICAgICAgXCJzZXQyXCI6IFwi5YWz57O76KGo6L6+5byPIHk9YiptXngg5Lit5bey55+l55qEIHgg5YC86ZuG5ZCIXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS4gOS4qumAu+i+keWAvO+8jOeUqOS6juaMh+WumuaYr+WQpuWwhuW4uOmHjyBiIOW8uuWItuiuvuS4uiAxXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS4gOS4qumAu+i+keWAvO+8jOeUqOS6juaMh+WumuaYr+WQpui/lOWbnumZhOWKoOWbnuW9kue7n+iuoeWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTE9HSU5WXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9HSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkxPR0lOVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm54geCDnmoTlr7nmlbDntK/np6/liIbluIPlh73mlbDnmoTlj43lh73mlbDlgLzvvIzmraTlpITnmoQgbG4oeCkg5piv5pyN5LuOIHZhbHVlMiDlkowgdmFsdWUzIOeahOato+aAgeWIhuW4g1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLkuI7lr7nmlbDliIbluIPnm7jlhbPnmoTmpoLnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwibG4oeCkg55qE5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcImxuKHgpIOeahOagh+WHhuWBj+W3rlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTE9HTk9STS5ESVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9HTk9STS5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMT0dOT1JNLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm54geCDnmoTlr7nmlbDliIbluIPlh73mlbDvvIzmraTlpITnmoQgbG4oeCkg5piv5ZCr5pyJIHZhbHVlMiDkuI4gdmFsdWUzIOWPguaVsOeahOato+aAgeWIhuW4g1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLnlKjmnaXorqHnrpflh73mlbDnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwibG4oeCkg55qE5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcImxuKHgpIOeahOagh+WHhuWBj+W3rlwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTRcIjogXCLlhrPlrprlh73mlbDlvaLlvI/nmoTpgLvovpHlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkxPR05PUk0uSU5WXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9HTk9STS5JTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9HTk9STS5JTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIHgg55qE5a+55pWw57Sv56ev5YiG5biD5Ye95pWw55qE5Y+N5Ye95pWw5YC877yM5q2k5aSE55qEIGxuKHgpIOaYr+acjeS7juWPguaVsCB2YWx1ZTIg5ZKMIHZhbHVlMyDnmoTmraPmgIHliIbluINcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5LiO5a+55pWw5YiG5biD55u45YWz55qE5qaC546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcImxuKHgpIOeahOW5s+Wdh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCJsbih4KSDnmoTmoIflh4blgY/lt65cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIkxPV0VSXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTE9XRVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJMT1dFUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbkuIDkuKrmlofmnKzlrZfnrKbkuLLkuK3nmoTmiYDmnInlpKflhpnlrZfmr43ovazmjaLkuLrlsI/lhpnlrZfmr41cIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIuimgei9rOaNouS4uuWwj+WGmeWtl+avjeeahOaWh+acrFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTUFUQ0hcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNQVRDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1BVENIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjM5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5ZyoIOiMg+WbtCDljZXlhYPmoLzkuK3mkJzntKLnibnlrprnmoTpobnvvIznhLblkI7ov5Tlm57or6XpobnlnKjmraTljLrln5/kuK3nmoTnm7jlr7nkvY3nva5cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5ZyoIOWMuuWfnyDkuK3ljLnphY3nmoTlgLxcIixcbiAgICAgICAgICAgIFwiYXJlYVwiOiBcIuimgeaQnOe0oueahOWNleWFg+agvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmlbDlrZcgLTHjgIEwIOaIliAxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNQVhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNQVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNQVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA57uE5YC85Lit55qE5pyA5aSn5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lrp7mlbAs5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTURFVEVSTVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1ERVRFUk0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTURFVEVSTShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpENVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDkuKrmlbDnu4TnmoTnn6npmLXooYzliJflvI/nmoTlgLxcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLooYzmlbDlkozliJfmlbDnm7jnrYnnmoTmlbDlgLzmlbDnu4RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk1EVVJBVElPTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1EVVJBVElPTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTURVUkFUSU9OKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lgYforr7pnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuOeahCBNYWNhdWxleSDkv67mraPmnJ/pmZBcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLmnInku7for4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLmnInku7for4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE5bm05oGv56Wo5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuacieS7t+ivgeWIuOeahOW5tOaUtuebiueOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLlubTku5jmga/mrKHmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk1FRElBTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1FRElBTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1FRElBTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4Tlt7Lnn6XmlbDlrZfnmoTkuK3lgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lu75oSP5a6e5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS7u+aEj+WunuaVsCzkuKrmlbDku4vkuo4x5YiwMjU15LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNSURcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNSUQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNSUQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlofmnKzlrZfnrKbkuLLkuK3ku47mjIflrprkvY3nva7lvIDlp4vnmoTnibnlrprmlbDnm67nmoTlrZfnrKbvvIzor6XmlbDnm67nlLHnlKjmiLfmjIflrppcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIuWMheWQq+imgeaPkOWPluWtl+espueahOaWh+acrOWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmlofmnKzkuK3opoHmj5Dlj5bnmoTnrKzkuIDkuKrlrZfnrKbnmoTkvY3nva5cIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5oyH5a6a5biM5pybIE1JRCDku47mlofmnKzkuK3ov5Tlm57lrZfnrKbnmoTkuKrmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk1JTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1JTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1JTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4TlgLzkuK3nmoTmnIDlsI/lgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lu75oSP5a6e5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS7u+aEj+WunuaVsCzkuKrmlbDku4vkuo4x5YiwMjU15LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNSU5BXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTUlOQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlgLwxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvlgLwyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTUlOQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJb5YC8MiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Y+C5pWw5YiX6KGo5Lit55qE5pyA5bCP5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lgLws5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTUlOVVRFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTUlOVVRFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXtumXtFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNSU5VVEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pe26Ze05YC85Lit55qE5YiG6ZKf44CCIOWIhumSn+aYr+S4gOS4quS7i+S6jiAwIOWIsCA1OSDkuYvpl7TnmoTmlbTmlbBcIixcbiAgICAgICAgICAgIFwidGltZVwiOiBcIuS4gOS4quaXtumXtOWAvO+8jOWFtuS4reWMheWQq+imgeafpeaJvueahOWIhumSn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTUlOVkVSU0VcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNSU5WRVJTRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNSU5WRVJTRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpCM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDnu4TkuK3lrZjlgqjnmoTnn6npmLXnmoTpgIbnn6npmLVcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLooYzmlbDlkozliJfmlbDnm7jnrYnnmoTmlbDlgLzmlbDnu4RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk1JUlJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNSVJSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTUlSUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDns7vliJflrprmnJ/njrDph5HmtYHnmoTlt7Lkv67mlLnlhoXpg6jmlLbnm4rnjodcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLmlbDnu4TmiJblr7nljIXlkKvmlbDlrZfnmoTljZXlhYPmoLznmoTlvJXnlKhcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi546w6YeR5rWB5Lit5L2/55So55qE6LWE6YeR5pSv5LuY55qE5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWwhueOsOmHkea1geWGjeaKlei1hOeahOaUtuebiueOh1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTU1VTFRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNTVVMVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXkyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1NVUxUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1OkI2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4pOS4quaVsOe7hOeahOefqemYteS5mOenr1wiLFxuICAgICAgICAgICAgXCJhcnJheTFcIjogXCLopoHov5vooYznn6npmLXkuZjms5Xov5DnrpfnmoTnrKzkuIDkuKrmlbDnu4RcIixcbiAgICAgICAgICAgIFwiYXJyYXkyXCI6IFwi6KaB6L+b6KGM55+p6Zi15LmY5rOV6L+Q566X55qE56ys5LqM5Liq5pWw57uEXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNT0RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNT0QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNT0QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4pOaVsOebuOmZpOeahOS9meaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHorqHnrpfkvZnmlbDnmoTooqvpmaTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6Zmk5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNT0RFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTU9ERShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1PREUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Zue55qE5pWw57uE5oiW5pWw5o2u5Yy65Z+f5Lit5Ye6546w6aKR546H5pyA6auY5oiW6YeN5aSN5Ye6546wXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lrp7mlbAs5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTU9ERS5NVUxUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTU9ERS5NVUxUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTU9ERS5NVUxUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4TmlbDmja7miJbmlbDmja7ljLrln5/kuK3lh7rnjrDpopHnjofmnIDpq5jmiJbph43lpI3lh7rnjrDnmoTmlbDlgLznmoTlnoLnm7TmlbDnu4RcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lu75oSP5a6e5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS7u+aEj+WunuaVsCzkuKrmlbDku4vkuo4x5YiwMjU15LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNT0RFLlNOR0xcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNT0RFLlNOR0woXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNT0RFLlNOR0woXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4gOe7hOaVsOaNruaIluaVsOaNruWMuuWfn+S4reWHuueOsOmikeeOh+acgOmrmOaIlumHjeWkjeWHuueOsOeahOaVsOWAvOeahOWeguebtOaVsOe7hFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk1PTlRIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTU9OVEgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1PTlRIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaXpeacn++8iOS7peW6j+WIl+aVsOihqOekuu+8ieS4reeahOaciOS7veOAgiDmnIjku73mmK/ku4vkuo4gMe+8iOS4gOaciO+8ieWIsCAxMu+8iOWNgeS6jOaciO+8ieS5i+mXtOeahOaVtOaVsFwiLFxuICAgICAgICAgICAgXCJkYXRlXCI6IFwi5oKo5bCd6K+V5p+l5om+55qE5pyI5Lu955qE5pel5pyfXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJNUk9VTkRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNUk9VTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNUk9VTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57oiI3lhaXliLDmiYDpnIDlgI3mlbDnmoTmlbDlrZdcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB6IiN5YWl55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeiIjeWFpeWIsOeahOWAjeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTVVMVElOT01JQUxcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJNVUxUSU5PTUlBTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTVVMVElOT01JQUwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPguaVsOWSjOeahOmYtuS5mOS4juWQhOWPguaVsOmYtuS5mOS5mOenr+eahOavlOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk1VTklUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTVVOSVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTVVOSVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mjIflrprnu7TluqbnmoTljZXkvY3nn6npmLVcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLmjIflrpropoHov5Tlm57nmoTljZXkvY3nn6npmLXnmoTnu7TluqZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6L2s5YyW5Li65pWw5YC85ZCO55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB6L2s5o2i55qE5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJOQVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5BKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueICNOL0EuIOeahOmUmeivr+WAvFwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk5FR0JJTk9NLkRJU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJORUdCSU5PTS5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJORUdCSU5PTS5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSVUVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6LSf5LqM6aG55byP5YiG5biDXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWksei0peeahOasoeaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmiJDlip/mrKHmlbDnmoTpmIjlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5oiQ5Yqf55qE5qaC546HXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuWGs+WumuWHveaVsOW9ouW8j+eahOmAu+i+keWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTkVUV09SS0RBWVNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJORVRXT1JLREFZUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTNdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5FVFdPUktEQVlTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPguaVsCB2YWx1ZTEg5ZKMIHZhbHVlMiDkuYvpl7TlrozmlbTnmoTlt6XkvZzml6XmlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwiIOS4gOS4quS7o+ihqOW8gOWni+aXpeacn+eahOaXpeacn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCIg5LiA5Liq5Luj6KGo57uI5q2i5pel5pyf55qE5pel5pyfXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuS4jeWcqOW3peS9nOaXpeWOhuS4reeahOS4gOS4quaIluWkmuS4quaXpeacn+aJgOaehOaIkOeahOWPr+mAieWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTkVUV09SS0RBWVMuSU5UTFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5FVFdPUktEQVlTLklOVEwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvmlbDlgLxdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5FVFdPUktEQVlTLklOVEwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFURSgyMDA2LDEsMSlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFURSgyMDA2LDEsMzEpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5pWw5YC8XVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuKTkuKrml6XmnJ/kuYvpl7TnmoTmiYDmnInlt6XkvZzml6XmlbDvvIzkvb/nlKjlj4LmlbDmjIfnpLrlk6rkupvlpKnmmK/lkajmnKvvvIzku6Xlj4rmnInlpJrlsJHlpKnmmK/lkajmnKtcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLkuIDkuKrku6PooajlvIDlp4vml6XmnJ/nmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLkuIDkuKrku6Pooajnu4jmraLml6XmnJ/nmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLooajnpLrku4vkuo4g5pel5pyfMSDlkowg5pel5pyfMiDkuYvpl7TkvYblj4jkuI3ljIXmi6zlnKjmiYDmnInlt6XkvZzml6XmlbDkuK3nmoTlkajmnKvml6VcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk5PTUlOQUxcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOT01JTkFMKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTk9NSU5BTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLln7rkuo7nu5nlrprnmoTlrp7pmYXliKnnjoflkozlubTlpI3liKnmnJ/mlbDvvIzov5Tlm57lkI3kuYnlubTliKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5a6e6ZmF5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuavj+W5tOeahOWkjeWIqeacn+aVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTk9STS5ESVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTk9STS5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOT1JNLkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mjIflrprlubPlnYflgLzlkozmoIflh4blgY/lt67nmoTmraPmgIHliIbluIPlh73mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6ZyA6KaB6K6h566X5YW25YiG5biD55qE5pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuW4g+eahOeul+acr+W5s+Wdh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbluIPnmoTmoIflh4blgY/lt65cIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi56Gu5a6a5Ye95pWw5b2i5byP55qE6YC76L6R5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJOT1JNLklOVlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5PUk0uSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5PUk0uSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaMh+WumuW5s+Wdh+WAvOWSjOagh+WHhuWBj+W3rueahOato+aAgee0r+enr+WIhuW4g+WHveaVsOeahOWPjeWHveaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlr7nlupTkuo7mraPmgIHliIbluIPnmoTmpoLnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5YiG5biD55qE566X5pyv5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuWIhuW4g+eahOagh+WHhuWBj+W3rlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTk9STS5TLkRJU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOT1JNLlMuRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5PUk0uUy5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEuMzMzMzMzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSVUVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5qCH5YeG5q2j5oCB5YiG5biD5Ye95pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIumcgOimgeiuoeeul+WFtuWIhuW4g+eahOaVsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlhrPlrprlh73mlbDlvaLlvI/nmoTpgLvovpHlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk5PVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5PVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpgLvovpHlh73mlbBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTk9UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyPjEwMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlh73mlbDkvJrlr7nlhbblj4LmlbDnmoTlgLzov5vooYzmsYLlj41cIixcbiAgICAgICAgICAgIFwibG9naWNmdW5jXCI6IFwi6K6h566X57uT5p6c5Li6IFRSVUUg5oiWIEZBTFNFIOeahOS7u+S9leWAvOaIluihqOi+vuW8j1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiTk9XXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiTk9XKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOT1coXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuW9k+WJjeaXpeacn+WSjOaXtumXtOeahOW6j+WIl+WPt1wiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk5QRVJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOUEVSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTRdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTVdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5QRVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTIvMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLln7rkuo7lm7rlrprliKnnjoflj4rnrYnpop3liIbmnJ/ku5jmrL7mlrnlvI/vvIzov5Tlm57mn5DpobnmipXotYTnmoTmgLvmnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5ZCE5pyf5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWQhOacn+aJgOW6lOaUr+S7mOeahOmHkemine+8jOWcqOaVtOS4quW5tOmHkeacn+mXtOS/neaMgeS4jeWPmFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLnjrDlgLzvvIzmiJbkuIDns7vliJfmnKrmnaXku5jmrL7nmoTlvZPliY3lgLznmoTntK/np6/lkoxcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5pyq5p2l5YC877yM5oiW5Zyo5pyA5ZCO5LiA5qyh5LuY5qy+5ZCO5biM5pyb5b6X5Yiw55qE546w6YeR5L2Z6aKdXCIsXG4gICAgICAgICAgICBcInZhbHVlNVwiOiBcIuaVsOWtlyAwIOaIliAx77yM55So5Lul5oyH5a6a5ZCE5pyf55qE5LuY5qy+5pe26Ze05piv5Zyo5pyf5Yid6L+Y5piv5pyf5pyrXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJOUFZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOUFYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5YC8MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5YC8MiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5QVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLkvb/nlKjotLTnjrDnjoflkozkuIDns7vliJfmnKrmnaXmlK/lh7rvvIjotJ/lgLzvvInlkozmlLbnm4rvvIjmraPlgLzvvInmnaXorqHnrpfkuIDpobnmipXotYTnmoTlh4DnjrDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLmn5DkuIDmnJ/pl7TnmoTotLTnjrDnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Lu75oSP5a6e5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS7u+aEj+WunuaVsCzkuKrmlbDku4vkuo4x5YiwMjU15LmL6Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJOVU1CRVJWQUxVRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk5VTUJFUlZBTFVFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+Wtl+espjFdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvlrZfnrKYyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJOVU1CRVJWQUxVRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInMi41MDAsMjcnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIicsJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInLidcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Lul5LiO5Yy65Z+f6K6+572u5peg5YWz55qE5pa55byP5bCG5paH5pys6L2s5o2i5Li65pWw5a2XXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLopoHovazmjaLkuLrmlbDlrZfnmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwiY2hhcmFjdGVyMVwiOiBcIueUqOS6juWIhumalOe7k+aenOeahOaVtOaVsOWSjOWwj+aVsOmDqOWIhueahOWtl+esplwiLFxuICAgICAgICAgICAgXCJjaGFyYWN0ZXIyXCI6IFwiIOeUqOS6juWIhumalOaVsOWtl+WIhue7hOeahOWtl+esplwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiT0NUMkRFQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9DVDJERUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiT0NUMkRFQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI1NFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIblhavov5vliLbmlbDovazmjaLkuLrljYHov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHovazmjaLnmoTlhavov5vliLbmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk9DVDJCSU5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJPQ1QyQklOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJPQ1QyQklOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIblhavov5vliLbmlbDovazmjaLkuLrkuozov5vliLbmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB6L2s5o2i55qE5YWr6L+b5Yi25pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeS9v+eUqOeahOWtl+espuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiT0NUMkhFWFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9DVDJIRVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9DVDJIRVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5YWr6L+b5Yi25pWw6L2s5o2i5Li65Y2B5YWt6L+b5Yi25pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgei9rOaNoueahOWFq+i/m+WItuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLopoHkvb/nlKjnmoTlrZfnrKbmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk9ERFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9ERChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJPREQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMS41XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVsOWtl+WQkeS4iuiIjeWFpeWIsOeahOacgOaOpei/keeahOWlh+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgeiIjeWFpeeahOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiT0RERlBSSUNFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiT0RERlBSSUNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8zXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiT0RERlBSSUNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQThcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6aaW5pyf5LuY5oGv5pel5LiN5Zu65a6a77yI6ZW/5pyf5oiW55+t5pyf77yJ55qE6Z2i5YC8IO+/pTEwMCDnmoTmnInku7for4HliLjku7fmoLxcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLmnInku7for4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLmnInku7for4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTNcIjogXCLmnInku7for4HliLjnmoTlj5HooYzml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTRcIjogXCLmnInku7for4HliLjnmoTpppbmnJ/ku5jmga/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuacieS7t+ivgeWIuOeahOW5tOaUtuebiueOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLpnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuOeahOa4heWBv+S7t+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTRcIjogXCLlubTku5jmga/mrKHmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk9EREZZSUVMRFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9EREZZSUVMRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ80XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9EREZZSUVMRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE3XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE4XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnummluacn+S7mOaBr+aXpeS4jeWbuuWumu+8iOmVv+acn+aIluefreacn++8ieeahOmdouWAvCDvv6UxMDAg55qE5pyJ5Lu36K+B5Yi45Lu35qC8XCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE57uT566X5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcImRhdGUzXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Y+R6KGM5pelXCIsXG4gICAgICAgICAgICBcImRhdGU0XCI6IFwi5pyJ5Lu36K+B5Yi455qE6aaW5pyf5LuY5oGv5pelXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuacieS7t+ivgeWIuOeahOWIqeeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmnInku7for4HliLjnmoTku7fmoLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi6Z2i5YC8IO+/pTEwMCDnmoTmnInku7for4HliLjnmoTmuIXlgb/ku7flgLxcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5bm05LuY5oGv5qyh5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJPRERMUFJJQ0VcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJPRERMUFJJQ0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9ERExQUklDRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mnKvmnJ/ku5jmga/ml6XkuI3lm7rlrprnmoTpnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuO+8iOmVv+acn+aIluefreacn++8ieeahOS7t+agvFwiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuacieS7t+ivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuacieS7t+ivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlM1wiOiBcIuacieS7t+ivgeWIuOeahOacq+acn+S7mOaBr+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmnInku7for4HliLjnmoTliKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5bm05pS255uK546HXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIumdouWAvCDvv6UxMDAg55qE5pyJ5Lu36K+B5Yi455qE5riF5YG/5Lu35YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuW5tOS7mOaBr+asoeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiT0RETFlJRUxEXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiT0RETFlJRUxEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8zXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJPRERMWUlFTEQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQThcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pyr5pyf5LuY5oGv5pel5LiN5Zu65a6a55qE6Z2i5YC8IO+/pTEwMCDnmoTmnInku7for4HliLjvvIjplb/mnJ/miJbnn63mnJ/vvInnmoTku7fmoLxcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLmnInku7for4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLmnInku7for4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTNcIjogXCLmnInku7for4HliLjnmoTmnKvmnJ/ku5jmga/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuacieS7t+ivgeWIuOeahOS7t+agvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLpnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuOeahOa4heWBv+S7t+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTRcIjogXCLlubTku5jmga/mrKHmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIk9SXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiT1IoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5p2h5Lu2MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5p2h5Lu2MiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk9SKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyPjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI8MTAwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWHveaVsOeahOS7u+aEj+WPguaVsOiuoeeul+S4uiBUUlVF77yM5YiZ5YW26L+U5ZueIFRSVUXvvJvlpoLmnpzlhbbmiYDmnInlj4LmlbDlnYforqHnrpfmnLrkuLogRkFMU0XvvIzliJnov5Tlm54gRkFMU0VcIixcbiAgICAgICAgICAgIFwiY29uZGl0aW9uMVwiOiBcIuesrOS4gOS4quaDs+imgea1i+ivleS4lOiuoeeul+e7k+aenOWPr+S4uiBUUlVFIOaIliBGQUxTRSDnmoTmnaHku7ZcIixcbiAgICAgICAgICAgIFwiY29uZGl0aW9uMlwiOiBcIuWFtuS7luaDs+imgea1i+ivleS4lOiuoeeul+e7k+aenOWPr+S4uiBUUlVFIOaIliBGQUxTRSDnmoTmnaHku7bvvIjmnIDlpJogMjU1IOS4quadoeS7tu+8iVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUERVUkFUSU9OXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUERVUkFUSU9OKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBEVVJBVElPTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyLjUlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjIwMDBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMjIwMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mipXotYTliLDovr7mjIflrprlgLzmiYDpnIDnmoTmnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6LS5546H5piv5oyH5q+P5pyf55qE5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuaKlei1hOeahOeOsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLmiYDpnIDmipXotYTnmoTmnKrmnaXlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBFQVJTT05cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRUFSU09OKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEVBUlNPTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMzpBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMzpCN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57nmq7lsJTnlJ8oUGVhcnNvbinkuZjnp6/nn6nnm7jlhbPns7vmlbAgcu+8jOi/meaYr+S4gOS4quiMg+WbtOWcqCAtMS4wIOWIsCAxLjAg5LmL6Ze077yI5YyF5ousIC0xLjAg5ZKMIDEuMCDlnKjlhoXvvInnmoTml6Dph4/nurLmjIfmlbDvvIzlj43mmKDkuobkuKTkuKrmlbDmja7pm4blkIjkuYvpl7TnmoTnur/mgKfnm7jlhbPnqIvluqZcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLoh6rlj5jph4/pm4blkIhcIixcbiAgICAgICAgICAgIFwiYXJyYXkyXCI6IFwi5Zug5Y+Y6YeP6ZuG5ZCIXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQRVJDRU5USUxFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEVSQ0VOVElMRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRVJDRU5USUxFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkUyOkU1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ljLrln5/kuK3mlbDlgLznmoTnrKwgayDkuKrnmb7liIbngrnnmoTlgLxcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLlrprkuYnnm7jlr7nkvY3nva7nmoTmlbDnu4TmiJbmlbDmja7ljLrln59cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIwIOWIsCAxIOS5i+mXtOeahOeZvuWIhueCueWAvO+8jOWMheWQqyAwIOWSjCAxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQRVJDRU5USUxFLkVYQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBFUkNFTlRJTEUuRVhDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBFUkNFTlRJTEUuRVhDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkUyOkU1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ljLrln5/kuK3mlbDlgLznmoTnrKwgSyDkuKrnmb7liIbngrnnmoTlgLzvvIzlhbbkuK0gayDkuLogMCDliLAgMSDkuYvpl7TnmoTlgLzvvIzkuI3ljIXlkKsgMCDlkowgMVwiLFxuICAgICAgICAgICAgXCJhcnJheVwiOiBcIuWumuS5ieebuOWvueS9jee9rueahOaVsOe7hOaIluaVsOaNruWMuuWfn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjAg5YiwIDEg5LmL6Ze055qE55m+5YiG54K55YC877yM5YyF5ZCrIDAg5ZKMIDFcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBFUkNFTlRJTEUuSU5DXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEVSQ0VOVElMRS5JTkMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEVSQ0VOVElMRS5JTkMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRTI6RTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMC4zXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWMuuWfn+S4reaVsOWAvOeahOesrCBLIOS4queZvuWIhueCueeahOWAvO+8jEsg5Li6IDAg5YiwIDEg5LmL6Ze055qE55m+5YiG54K55YC877yM5YyF5ZCrIDAg5ZKMIDFcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLlrprkuYnnm7jlr7nkvY3nva7nmoTmlbDnu4TmiJbmlbDmja7ljLrln59cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIwIOWIsCAxIOS5i+mXtOeahOeZvuWIhueCueWAvO+8jOWMheWQqyAwIOWSjCAxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQRVJDRU5UUkFOS1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBFUkNFTlRSQU5LKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRVJDRU5UUkFOSyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBMTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjVcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWwhuafkOS4quaVsOWAvOWcqOaVsOaNrumbhuS4reeahOaOkuS9jeS9nOS4uuaVsOaNrumbhueahOeZvuWIhuavlOWAvOi/lOWbnu+8jOatpOWkhOeahOeZvuWIhuavlOWAvOeahOiMg+WbtOS4uiAwIOWIsCAxXCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi5a6a5LmJ55u45a+55L2N572u55qE5pWw5YC85pWw57uE5oiW5pWw5YC85pWw5o2u5Yy65Z+fXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIumcgOimgeW+l+WIsOWFtuaOkuS9jeeahOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLnlKjkuo7moIfor4bov5Tlm57nmoTnmb7liIbmr5TlgLznmoTmnInmlYjkvY3mlbDnmoTlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBFUkNFTlRSQU5LLkVYQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBFUkNFTlRSQU5LLkVYQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEVSQ0VOVFJBTksuRVhDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6NVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5p+Q5Liq5pWw5YC85Zyo5LiA5Liq5pWw5o2u6ZuG5Lit55qE55m+5YiG5q+U77yIMCDliLAgMe+8jOS4jeWMheaLrCAwIOWSjCAx77yJ5o6S5L2NXCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi5a6a5LmJ55u45a+55L2N572u55qE5pWw5YC85pWw57uE5oiW5pWw5YC85pWw5o2u5Yy65Z+fXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIumcgOimgeW+l+WIsOWFtuaOkuS9jeeahOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLnlKjkuo7moIfor4bov5Tlm57nmoTnmb7liIbmr5TlgLznmoTmnInmlYjkvY3mlbDnmoTlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBFUkNFTlRSQU5LLklOQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBFUkNFTlRSQU5LLklOQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEVSQ0VOVFJBTksuSU5DKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6NVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5p+Q5Liq5pWw5YC85Zyo5pWw5o2u6ZuG5Lit55qE5o6S5L2N5L2c5Li65pWw5o2u6ZuG55qE55m+5YiG5q+U5YC86L+U5Zue77yM5q2k5aSE55qE55m+5YiG5q+U5YC855qE6IyD5Zu05Li6IDAg5YiwIDHvvIjlkKsgMCDlkowgMe+8iVwiLFxuICAgICAgICAgICAgXCJhcnJheVwiOiBcIuWumuS5ieebuOWvueS9jee9rueahOaVsOWAvOaVsOe7hOaIluaVsOWAvOaVsOaNruWMuuWfn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLpnIDopoHlvpfliLDlhbbmjpLkvY3nmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi55So5LqO5qCH6K+G6L+U5Zue55qE55m+5YiG5q+U5YC855qE5pyJ5pWI5L2N5pWw55qE5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQRVJNVVRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRVJNVVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRVJNVVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPr+S7juaVsOWtl+WvueixoeS4remAieaLqeeahOe7meWumuaVsOebruWvueixoeeahOaOkuWIl+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLooajnpLrlr7nosaHkuKrmlbDnmoTmlbTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KGo56S65q+P5Liq5o6S5YiX5Lit5a+56LGh5Liq5pWw55qE5pW05pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQRVJNVVRBVElPTkFcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRVJNVVRBVElPTkEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQRVJNVVRBVElPTkEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWPr+S7juWvueixoeaAu+aVsOS4remAieaLqeeahOe7meWumuaVsOebruWvueixoe+8iOWQq+mHjeWkje+8ieeahOaOkuWIl+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLooajnpLrlr7nosaHmgLvmlbDnmoTmlbTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KGo56S65q+P5Liq5o6S5YiX5Lit5a+56LGh5pWw55uu55qE5pW05pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQSElcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQSEkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEhJKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuNzVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5qCH5YeG5q2j5oCB5YiG5biD55qE5a+G5bqm5Ye95pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5omA6ZyA55qE5qCH5YeG5q2j5oCB5YiG5biD5a+G5bqm5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQSVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBJKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQSShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pWw5a2XIDMuMTQxNTkyNjUzNTg5NznvvIjmlbDlrabluLjph48gcGnvvInvvIznsr7noa7liLAgMTUg5Liq5pWw5a2XXCIsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUE9JU1NPTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBPSVNTT04oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUE9JU1NPTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUUlVFXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaziuadvuWIhuW4g1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLkuovku7bmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pyf5pyb5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuS4gOmAu+i+keWAvO+8jOehruWumuaJgOi/lOWbnueahOamgueOh+WIhuW4g+eahOW9ouW8j1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUE9JU1NPTi5ESVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUE9JU1NPTi5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBPSVNTT04uRElTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUUlVFXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaziuadvuWIhuW4g1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLkuovku7bmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pyf5pyb5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuS4gOmAu+i+keWAvO+8jOehruWumuaJgOi/lOWbnueahOamgueOh+WIhuW4g+eahOW9ouW8j1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUE9XRVJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQT1dFUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBPV0VSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDlrZfkuZjluYLnmoTnu5PmnpxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Z+65pWw44CCIOWPr+S4uuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLln7rmlbDkuZjluYLov5DnrpfnmoTmjIfmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBQTVRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUE1UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTVdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBQTVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkExMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkExM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWU1XVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjlcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuagueaNruWumuacn+WbuuWumuS7mOasvuWSjOWbuuWumuWIqeeOh+iAjOWumueahOaKlei1hOWcqOW3suefpeacn+mXtOWGheeahOacrOmHkeWBv+S7mOminVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlkITmnJ/liKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5oyH5a6a5pyf5pWw77yM6K+l5YC85b+F6aG75ZyoIDEg5YiwIHZhbHVlMyDojIPlm7TlhoVcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5bm06YeR55qE5LuY5qy+5oC75pyf5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIueOsOWAvOWNs+S4gOezu+WIl+acquadpeS7mOasvuW9k+WJjeWAvOeahOaAu+WSjFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTVcIjogXCLmlbDlrZcgMCDmiJYgMe+8jOeUqOS7peaMh+WumuWQhOacn+eahOS7mOasvuaXtumXtOaYr+WcqOacn+WInei/mOaYr+acn+acq1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUFJJQ0VcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUklDRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWU0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBSSUNFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE3XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWumuacn+S7mOaBr+eahOmdouWAvCDvv6UxMDAg55qE5pyJ5Lu36K+B5Yi455qE5Lu35qC8XCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE57uT566X5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuacieS7t+ivgeWIuOeahOW5tOaBr+elqOWIqeeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmnInku7for4HliLjnmoTlubTmlLbnm4rnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi6Z2i5YC8IO+/pTEwMCDnmoTmnInku7for4HliLjnmoTmuIXlgb/ku7flgLxcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5bm05LuY5oGv5qyh5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQUklDRURJU0NcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUklDRURJU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUFJJQ0VESVNDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaKmOS7t+WPkeihjOeahOmdouWAvCDvv6UxMDAg55qE5pyJ5Lu36K+B5Yi455qE5Lu35qC8XCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE57uT566X5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuacieS7t+ivgeWIuOeahOi0tOeOsOeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLpnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuOeahOa4heWBv+S7t+WAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUFJJQ0VNQVRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUklDRU1BVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUklDRU1BVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liLDmnJ/ku5jmga/nmoTpnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuOeahOS7t+agvFwiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuacieS7t+ivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuacieS7t+ivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlM1wiOiBcIuacieS7t+ivgeWIuOeahOWPkeihjOaXpe+8jOS7peaXtumXtOW6j+WIl+WPt+ihqOekulwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmnInku7for4HliLjlnKjlj5HooYzml6XnmoTliKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5bm05pS255uK546HXCIsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUFJPQlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBST0IoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUxXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUk9CKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzOkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIzOkI2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlM11cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Yy65Z+f5Lit55qE5pWw5YC86JC95Zyo5oyH5a6a5Yy66Ze05YaF55qE5qaC546HXCIsXG4gICAgICAgICAgICBcImFyZWFcIjogXCLlhbfmnInlkIToh6rnm7jlupTmpoLnjoflgLznmoQgeCDmlbDlgLzljLrln59cIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLkuI4g5Yy65Z+fIOS4reeahOWAvOebuOWFs+iBlOeahOS4gOe7hOamgueOh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHorqHnrpflhbbmpoLnjofnmoTmlbDlgLzkuIvnlYxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6KaB6K6h566X5YW25qaC546H55qE5Y+v6YCJ5pWw5YC85LiK55WMXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQUk9EVUNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUFJPRFVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlBST0RVQ1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Ye95pWw5bCG5Lul5Y+C5pWw5b2i5byP57uZ5Ye655qE5omA5pyJ5pWw5a2X55u45LmYLCDlubbov5Tlm57or6Xkuqflk4FcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB55u45LmY55qE56ys5LiA5Liq5pWw5a2X5oiW6IyD5Zu0XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgeebuOS5mOeahOWFtuS7luaVsOWtl+aIluWNleWFg+agvOWMuuWfn++8jOacgOWkmuWPr+S7peS9v+eUqCAyNTUg5Liq5Y+C5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJQUk9QRVJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUk9QRVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJQUk9QRVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5paH5pys5a2X56ym5Liy55qE6aaW5a2X5q+N5Lul5Y+K5paH5a2X5Lit5Lu75L2V6Z2e5a2X5q+N5a2X56ym5LmL5ZCO55qE5Lu75L2V5YW25LuW5a2X5q+N6L2s5o2i5oiQ5aSn5YaZXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLnlKjlvJXlj7fmi6zotbfmnaXnmoTmlofmnKzjgIHov5Tlm57mlofmnKzlgLznmoTlhazlvI/vvIzmiJbogIXlr7nljIXlkKvopoHov5vooYzpg6jliIblpKflhpnovazmjaLmlofmnKznmoTljZXlhYPmoLznmoTlvJXnlKhcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlBWXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUFYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNF1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUFYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTMvMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTIqQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNF1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjo3XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIueUqOS6juagueaNruWbuuWumuWIqeeOh+iuoeeul+i0t+asvuaIluaKlei1hOeahOeOsOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlkITmnJ/liKnnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5bm06YeR55qE5LuY5qy+5oC75pyf5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlM1wiOiBcIuavj+acn+eahOS7mOasvumHkemine+8jOWcqOW5tOmHkeWRqOacn+WGheS4jeiDveabtOaUuVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTRcIjogXCLmnKrmnaXlgLzvvIzmiJblnKjmnIDlkI7kuIDmrKHku5jmrL7lkI7luIzmnJvlvpfliLDnmoTnjrDph5HkvZnpop1cIixcbiAgICAgICAgICAgIFwidmFsdWU1XCI6IFwi5pWw5a2XIDAg5oiWIDHvvIznlKjku6XmjIflrprlkITmnJ/nmoTku5jmrL7ml7bpl7TmmK/lnKjmnJ/liJ3ov5jmmK/mnJ/mnKtcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlFVQVJUSUxFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUVVBUlRJTEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUVVBUlRJTEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDnu4TmlbDmja7nmoTlm5vliIbkvY3ngrlcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLopoHmsYLlvpflm5vliIbkvY3mlbDlgLznmoTmlbDnu4TmiJbmlbDlrZflnovljZXlhYPmoLzljLrln59cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLmjIflrprov5Tlm57lk6rkuIDkuKrlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlFVQVJUSUxFLkVYQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlFVQVJUSUxFLkVYQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJRVUFSVElMRS5FWEMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLln7rkuo4gMCDliLAgMSDkuYvpl7TvvIjkuI3ljIXmi6wgMCDlkowgMe+8ieeahOeZvuWIhueCueWAvOi/lOWbnuaVsOaNrumbhueahOWbm+WIhuS9jeaVsFwiLFxuICAgICAgICAgICAgXCJhcnJheVwiOiBcIuimgeaxguW+l+Wbm+WIhuS9jeaVsOWAvOeahOaVsOe7hOaIluaVsOWtl+Wei+WNleWFg+agvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuaMh+Wumui/lOWbnuWTquS4gOS4quWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUVVBUlRJTEUuSU5DXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUVVBUlRJTEUuSU5DKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlFVQVJUSUxFLklOQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuagueaNriAwIOWIsCAxIOS5i+mXtOeahOeZvuWIhueCueWAvO+8iOWMheWQqyAwIOWSjCAx77yJ6L+U5Zue5pWw5o2u6ZuG55qE5Zub5YiG5L2N5pWwXCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi6KaB5rGC5b6X5Zub5YiG5L2N5pWw5YC855qE5pWw57uE5oiW5pWw5a2X5Z6L5Y2V5YWD5qC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5oyH5a6a6L+U5Zue5ZOq5LiA5Liq5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJRVU9USUVOVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlFVT1RJRU5UKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUVVPVElFTlQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnumZpOazleeahOaVtOaVsOmDqOWIhlwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLooqvpmaTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi6Zmk5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJSQURJQU5TXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkFESUFOUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLop5LluqZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkFESUFOUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyNzBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5bqm5pWw6L2s5o2i5Li65byn5bqmXCIsXG4gICAgICAgICAgICBcInRhbmdsZVwiOiBcIuimgei9rOaNoueahOS7peW6puaVsOihqOekuueahOinkuW6plwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUkFORFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJBTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJBTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS6huS4gOS4quWkp+S6juetieS6jiAwIOS4lOWwj+S6jiAxIOeahOW5s+Wdh+WIhuW4g+eahOmaj+acuuWunuaVsFwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlJBTkRCRVRXRUVOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkFOREJFVFdFRU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSQU5EQkVUV0VFTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEwMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kvY3kuo7kuKTkuKrmjIflrprmlbDkuYvpl7TnmoTkuIDkuKrpmo/mnLrmlbTmlbDjgIIg5q+P5qyh6K6h566X5bel5L2c6KGo5pe26YO95bCG6L+U5Zue5LiA5Liq5paw55qE6ZqP5py65pW05pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWwhui/lOWbnueahOacgOWwj+aVtOaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlsIbov5Tlm57nmoTmnIDlpKfmlbTmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlJBTktcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSQU5LKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSQU5LKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkE2XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA5YiX5pWw5a2X55qE5pWw5a2X5o6S5L2N44CCIOaVsOWtl+eahOaOkuS9jeaYr+WFtuebuOWvueS6juWIl+ihqOS4reWFtuS7luWAvOeahOWkp+Wwj1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHmib7liLDlhbbmjpLkvY3nmoTmlbDlrZdcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLmlbDlrZfliJfooajnmoTmlbDnu4TvvIzlr7nmlbDlrZfliJfooajnmoTlvJXnlKhcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5LiA5Liq5oyH5a6a5pWw5a2X5o6S5L2N5pa55byP55qE5pWw5a2XXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJSQU5LLkFWR1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJBTksuQVZHKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSQU5LLkFWRyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4gOWIl+aVsOWtl+eahOaVsOWtl+aOkuS9je+8muaVsOWtl+eahOaOkuS9jeaYr+WFtuWkp+Wwj+S4juWIl+ihqOS4reWFtuS7luWAvOeahOavlOWAvO+8m+WmguaenOWkmuS4quWAvOWFt+acieebuOWQjOeahOaOkuS9je+8jOWImeWwhui/lOWbnuW5s+Wdh+aOkuS9jVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHmib7liLDlhbbmjpLkvY3nmoTmlbDlrZdcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLmlbDlrZfliJfooajnmoTmlbDnu4TvvIzlr7nmlbDlrZfliJfooajnmoTlvJXnlKhcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5LiA5Liq5oyH5a6a5pWw5a2X5o6S5L2N5pa55byP55qE5pWw5a2XXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJSQU5LLkVRXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkFOSy5FUShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkFOSy5FUShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4gOWIl+aVsOWtl+eahOaVsOWtl+aOkuS9jeOAgiDlhbblpKflsI/kuI7liJfooajkuK3lhbbku5blgLznm7jlhbPvvJvlpoLmnpzlpJrkuKrlgLzlhbfmnInnm7jlkIznmoTmjpLkvY3vvIzliJnov5Tlm57or6Xnu4TlgLznmoTmnIDpq5jmjpLkvY1cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5om+5Yiw5YW25o6S5L2N55qE5pWw5a2XXCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi5pWw5a2X5YiX6KGo55qE5pWw57uE77yM5a+55pWw5a2X5YiX6KGo55qE5byV55SoXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS4gOS4quaMh+WumuaVsOWtl+aOkuS9jeaWueW8j+eahOaVsOWtl1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUkFURVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJBVEUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNF1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkFURShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMioxMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWU0XVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjdcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTVdXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6OVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5q+P5pyf5bm06YeR55qE5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuW5tOmHkeeahOS7mOasvuaAu+acn+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmr4/mnJ/nmoTku5jmrL7ph5Hpop3vvIzlnKjlubTph5HlkajmnJ/lhoXkuI3og73mm7TmlLlcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi546w5YC85Y2z5LiA57O75YiX5pyq5p2l5LuY5qy+5b2T5YmN5YC855qE5oC75ZKMXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuacquadpeWAvO+8jOaIluWcqOacgOWQjuS4gOasoeS7mOasvuWQjuW4jOacm+W+l+WIsOeahOeOsOmHkeS9meminVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTVcIjogXCLmlbDlrZcgMCDmiJYgMe+8jOeUqOS7peaMh+WumuWQhOacn+eahOS7mOasvuaXtumXtOaYr+WcqOacn+WInei/mOaYr+acn+acq1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUkVDRUlWRURcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSRUNFSVZFRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSRUNFSVZFRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuIDmrKHmgKfku5jmga/nmoTmnInku7for4HliLjliLDmnJ/mlLblm57nmoTph5Hpop1cIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLmnInku7for4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLmnInku7for4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pyJ5Lu36K+B5Yi455qE5oqV6LWE6aKdXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuacieS7t+ivgeWIuOeahOi0tOeOsOeOh1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUkVQTEFDRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJFUExBQ0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5paH5pysMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaWh+acrDJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkVQTEFDRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJyonXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuagueaNruaMh+WumueahOWtl+espuaVsO+8jFJFUExBQ0Ug5bCG6YOo5YiG5paH5pys5a2X56ym5Liy5pu/5o2i5Li65LiN5ZCM55qE5paH5pys5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcInRleHQxXCI6IFwi6KaB5pu/5o2i5YW26YOo5YiG5a2X56ym55qE5paH5pysXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuaWh+acrDHkuK3opoHmm7/mjaLkuLog5paH5pysMiDnmoTlrZfnrKbkvY3nva5cIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5paH5pysMSDkuK3luIzmnJsgUkVQTEFDRSDkvb/nlKgg5paH5pysMiDmnaXov5vooYzmm7/mjaLnmoTlrZfnrKbmlbBcIixcbiAgICAgICAgICAgIFwidGV4dDJcIjogXCLlsIbmm7/mjaIg5paH5pysMSDkuK3lrZfnrKbnmoTmlofmnKxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlJFUFRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSRVBUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUkVQVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInKl8nXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5paH5pys6YeN5aSN5LiA5a6a5qyh5pWwXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLpnIDopoHph43lpI3mmL7npLrnmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLnlKjkuo7mjIflrprmlofmnKzph43lpI3mrKHmlbDnmoTmraPmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlJJR0hUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUklHSFQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5pWw5YC8XVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSSUdIVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuagueaNruaJgOaMh+WumueahOWtl+espuaVsOi/lOWbnuaWh+acrOWtl+espuS4suS4reacgOWQjuS4gOS4quaIluWkmuS4quWtl+esplwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwi5YyF5ZCr6KaB5o+Q5Y+W5a2X56ym55qE5paH5pys5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5oyH5a6a5biM5pybIFJJR0hUIOaPkOWPlueahOWtl+espuaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUk9NQU5cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJST01BTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUk9NQU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNDk5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG6Zi/5ouJ5Lyv5pWw5a2X6L2s5o2i5Li65paH5a2X5b2i5byP55qE572X6ams5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIumcgOimgei9rOaNoueahOmYv+aLieS8r+aVsOWtl1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLkuIDkuKrmlbDlrZcsIOaMh+WumuaJgOmcgOeahOe9l+mprOaVsOWtl+exu+Wei1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUk9VTkRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJST1VORChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJPVU5EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjIuMTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlh73mlbDlsIbmlbDlrZflm5voiI3kupTlhaXliLDmjIflrprnmoTkvY3mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5Zub6IiN5LqU5YWl55qE5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgei/m+ihjOWbm+iIjeS6lOWFpei/kOeul+eahOS9jeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUk9VTkRET1dOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUk9VTkRET1dOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUk9VTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMy4yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5pyd552A6Zu255qE5pa55ZCR5bCG5pWw5a2X6L+b6KGM5ZCR5LiL6IiN5YWlXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgeWbm+iIjeS6lOWFpeeahOaVsOWtl1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLopoHov5vooYzlm5voiI3kupTlhaXov5DnrpfnmoTkvY3mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlJPVU5EVVBcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJST1VORFVQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUk9VTkRVUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyLjE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5pyd552A6L+c56a7IDDvvIjpm7bvvInnmoTmlrnlkJHlsIbmlbDlrZfov5vooYzlkJHkuIroiI3lhaVcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5Zub6IiN5LqU5YWl55qE5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuimgei/m+ihjOWbm+iIjeS6lOWFpei/kOeul+eahOS9jeaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiUk9XXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUk9XKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfn1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJST1coXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQzEwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuW8leeUqOeahOihjOWPt1wiLFxuICAgICAgICAgICAgXCJhcmVhXCI6IFwi6ZyA6KaB5b6X5Yiw5YW26KGM5Y+355qE5Y2V5YWD5qC85oiW5Y2V5YWD5qC85Yy65Z+fXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJST1dTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUk9XUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJST1coXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQzE6RTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5byV55So5oiW5pWw57uE55qE6KGM5pWwXCIsXG4gICAgICAgICAgICBcImFyZWFcIjogXCLpnIDopoHlvpfliLDlhbbooYzmlbDnmoTmlbDnu4TjgIHmlbDnu4TlhazlvI/miJblr7nljZXlhYPmoLzljLrln5/nmoTlvJXnlKhcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlJSSVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJSSShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSUkkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiOTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTAwMDBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMTEwMDBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5oqV6LWE5aKe6ZW/55qE562J5pWI5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuaKlei1hOeahOaAu+acn+aVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmipXotYTnmoTnjrDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5oqV6LWE55qE5pyq5p2l5YC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJSU1FcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJSU1EoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlJTUShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMzpBOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMzpCOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLpgJrov4cga25vd25feSdzIOWSjCBrbm93bl94J3Mg5Lit55qE5pWw5o2u54K56L+U5Zue55qu5bCU55Sf5LmY56ev55+p55u45YWz57O75pWw55qE5bmz5pa5XCIsXG4gICAgICAgICAgICBcImFyZWExXCI6IFwi5pWw57uE5oiW5pWw5o2u54K55Yy65Z+fXCIsXG4gICAgICAgICAgICBcImFyZWEyXCI6IFwi5pWw57uE5oiW5pWw5o2u54K55Yy65Z+fXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTRUFSQ0hcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTRUFSQ0goXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5paH5pysMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlofmnKwyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvmlbDlgLxdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNFQVJDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInZSdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlj6/lnKjnrKzkuozkuKrmlofmnKzlrZfnrKbkuLLkuK3mn6Xmib7nrKzkuIDkuKrmlofmnKzlrZfnrKbkuLLvvIzlubbov5Tlm57nrKzkuIDkuKrmlofmnKzlrZfnrKbkuLLnmoTotbflp4vkvY3nva7nmoTnvJblj7fvvIzor6XnvJblj7fku47nrKzkuozkuKrmlofmnKzlrZfnrKbkuLLnmoTnrKzkuIDkuKrlrZfnrKbnrpfotbdcIixcbiAgICAgICAgICAgIFwidGV4dDFcIjogXCLopoHmn6Xmib7nmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwidGV4dDJcIjogXCLopoHlnKjlhbbkuK3mkJzntKIg5paH5pysMSDlj4LmlbDnmoTlgLznmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLmlofmnKwyIOWPguaVsOS4reS7juS5i+W8gOWni+aQnOe0oueahOWtl+espue8luWPt1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU0VDXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0VDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNFQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0NVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57op5LluqbnmoTmraPlibLlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHlr7nlhbbov5vooYzmraPlibLnmoTop5LluqYgXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTRUNIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0VDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTRUNIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjQ1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuinkuW6pueahOWPjOabsuato+WJsuWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWvueW6lOaJgOmcgOWPjOabsuato+WJsuWAvOeahOinkuW6pu+8jOS7peW8p+W6puihqOekulwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU0VDT05EXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0VDT05EKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXtumXtFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTRUNPTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pe26Ze05YC855qE56eS5pWw44CCIOenkuaVsOaYryAw77yI6Zu277yJ5YiwIDU5IOiMg+WbtOWGheeahOaVtOaVsFwiLFxuICAgICAgICAgICAgXCJ0aW1lXCI6IFwi5LiA5Liq5pe26Ze05YC877yM5YW25Lit5YyF5ZCr6KaB5p+l5om+55qE56eS5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTRVJJRVNTVU1cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTRVJJRVNTVU0oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0VSSUVTU1VNKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNDpBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57ln7rkuo5TRVJJRVPlhazlvI/nmoTluYLnuqfmlbDkuYvlkoxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5bmC57qn5pWw55qE6L6T5YWl5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcInZhbHVlMSDnmoTpppbpobnkuZjluYJcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi57qn5pWw5Lit5q+P5LiA6aG555qE5LmY5bmCIG4g55qE5q2l6ZW/5aKe5Yqg5YC8XCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi5LiOIHZhbHVlMSDnmoTmr4/kuKrov57nu63kuZjluYLnm7jkuZjnmoTkuIDnu4Tns7vmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNIRUVUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0hFRVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+WAvF1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbe1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0hFRVQoXCIsXG4gICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRhYmxlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuW8leeUqOW3peS9nOihqOeahOW3peS9nOihqOe8luWPt1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumcgOimgeW3peS9nOihqOe8luWPt+eahOW3peS9nOihqOaIluW8leeUqOeahOWQjeensFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU0hFRVRTXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0hFRVRTKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvlvJXnlKhdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNIRUVUUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5byV55So5Lit55qE5bel5L2c6KGo5pWwXCIsXG4gICAgICAgICAgICBcInJlZmVyZW5jZVwiOiBcIuW8leeUqOaYr+imgeS6huino+WFtuWMheWQq+eahOW3peS9nOihqOaVsOeahOW8leeUqFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU0lHTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNJR04oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0lHTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLnoa7lrprmlbDlrZfnmoTnrKblj7dcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLku7vmhI/lrp7mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNJTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNJTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTSU4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUEkoKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lt7Lnn6Xop5LluqbnmoTmraPlvKZcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLpnIDopoHmsYLmraPlvKbnmoTop5LluqbvvIzku6XlvKfluqbooajnpLpcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNJTkhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTSU5IKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNJTkgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMC4wMzQyKjEuMDNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pWw5a2X55qE5Y+M5puy5q2j5bymXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5Lu75oSP5a6e5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTS0VXXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU0tFVyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNLRVcoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWIhuW4g+eahOWBj+aWnOW6plwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNLRVcuUFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNLRVcuUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNLRVcoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWfuuS6juagt+acrOaAu+S9k+eahOWIhuW4g+S4jeWvueensOW6pu+8muihqOaYjuWIhuW4g+ebuOWvueS6juW5s+Wdh+WAvOeahOS4jeWvueensOeoi+W6plwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNMTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNMTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTTE4oXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA5Liq5pyf6Ze05YaF55qE6LWE5Lqn55qE55u057q/5oqY5penXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIui1hOS6p+WOn+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmipjml6fmnKvlsL7ml7bnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi6LWE5Lqn55qE5oqY5pen5pyf5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTTE9QRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNMT1BFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumbhuWQiDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZuG5ZCIMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTTE9QRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMzpBOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMzpCOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57pgJrov4cg6ZuG5ZCIMSDlkowg6ZuG5ZCIMiDkuK3mlbDmja7ngrnnmoTnur/mgKflm57lvZLnur/nmoTmlpznjodcIixcbiAgICAgICAgICAgIFwic2V0MVwiOiBcIuaVsOWtl+Wei+WboOWPmOmHj+aVsOaNrueCueaVsOe7hOaIluWNleWFg+agvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJzZXQyXCI6IFwi6Ieq5Y+Y6YeP5pWw5o2u54K56ZuG5ZCIXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTTUFMTFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNNQUxMKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfn1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTTUFMTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBMTBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDmja7pm4bkuK3nmoTnrKwgayDkuKrmnIDlsI/lgLxcIixcbiAgICAgICAgICAgIFwiYXJlYVwiOiBcIumcgOimgeaJvuWIsOesrCBrIOS4quacgOWwj+WAvOeahOaVsOe7hOaIluaVsOWAvOaVsOaNruWMuuWfn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgei/lOWbnueahOaVsOaNruWcqOaVsOe7hOaIluaVsOaNruWMuuWfn+mHjOeahOS9jee9rlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU1FSVFBJXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1FSVFBJKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNRUlRQSShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuafkOaVsOS4jiBwaSDnmoTkuZjnp6/nmoTlubPmlrnmoLlcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLkuI4gcGkg55u45LmY55qE5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTVEFOREFSRElaRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNUQU5EQVJESVpFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNUQU5EQVJESVpFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnueUsSB2YWx1ZTIg5ZKMIHZhbHVlMyDooajnpLrnmoTliIbluIPnmoTop4TojIPljJblgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6ZyA6KaB6L+b6KGM5q2j5oCB5YyW55qE5pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWIhuW4g+eahOeul+acr+W5s+Wdh+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLliIbluIPnmoTmoIflh4blgY/lt65cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNUREVWQVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNUREVWQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNUREVWQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMzpBMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW+WAvDIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuagueaNruagt+acrOS8sOiuoeagh+WHhuWBj+W3rlwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNUREVWUFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNUREVWUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNUREVWUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMzpBMTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW+WAvDIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuagueaNruS9nOS4uuWPguaVsOe7meWumueahOaVtOS4quaAu+S9k+iuoeeul+agh+WHhuWBj+W3rlwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLku7vmhI/lrp7mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5Lu75oSP5a6e5pWwLOS4quaVsOS7i+S6jjHliLAyNTXkuYvpl7RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNUREVWUEFcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVERFVlBBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+WAvDIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVERFVlBBKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzOkExMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJb5YC8MiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5qC55o2u5L2c5Li65Y+C5pWw77yI5YyF5ous5paH5a2X5ZKM6YC76L6R5YC877yJ57uZ5a6a55qE5pW05Liq5oC75L2T6K6h566X5qCH5YeG5YGP5beuXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lgLws5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU1RFWVhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVEVZWChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1RFWVgoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTM6QTlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjM6QjlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6YCa6L+H57q/5oCn5Zue5b2S5rOV6aKE5rWL5q+P5LiqIHgg55qEIHkg5YC85pe25omA5Lqn55Sf55qE5qCH5YeG6K+v5beuXCIsXG4gICAgICAgICAgICBcImFyZWExXCI6IFwi5Zug5Y+Y6YeP5pWw5o2u54K55pWw57uE5oiW5Yy65Z+fXCIsXG4gICAgICAgICAgICBcImFyZWEyXCI6IFwi6Ieq5Y+Y6YeP5pWw5o2u54K55pWw57uE5oiW5Yy65Z+fXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTVUJTVElUVVRFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VCU1RJVFVURShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlofmnKwxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaWh+acrDJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5paH5pysM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5LqL5Lu2XVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVUJTVElUVVRFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIifplIDllK7pop0nXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIifmiJDmnKwnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Zyo5paH5pys5a2X56ym5Liy5Lit55SoIOaWh+acrDMg5pu/5o2iIOaWh+acrDJcIixcbiAgICAgICAgICAgIFwidGV4dDFcIjogXCLpnIDopoHmm7/mjaLlhbbkuK3lrZfnrKbnmoTmlofmnKzvvIzmiJblr7nlkKvmnInmlofmnKzvvIjpnIDopoHmm7/mjaLlhbbkuK3lrZfnrKbvvInnmoTljZXlhYPmoLznmoTlvJXnlKhcIixcbiAgICAgICAgICAgIFwidGV4dDJcIjogXCLpnIDopoHmm7/mjaLnmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwidGV4dDNcIjogXCLnlKjkuo7mm7/mjaIg5paH5pysMiDnmoTmlofmnKxcIixcbiAgICAgICAgICAgIFwiZXZlbnRcIjogXCLmjIflrpropoHnlKgg5paH5pysMyDmm7/mjaIg5paH5pysMiDnmoTkuovku7ZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNVQlRPVEFMXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VCVE9UQUwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5Yy65Z+fMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VCVE9UQUwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiOVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCLljLrln58yXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6NVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5YiX6KGo5oiW5pWw5o2u5bqT5Lit55qE5YiG57G75rGH5oC7XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5pWw5a2XIDEtMTEg5oiWIDEwMS0xMTHvvIznlKjkuo7mjIflrpropoHkuLrliIbnsbvmsYfmgLvkvb/nlKjnmoTlh73mlbBcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCLopoHlr7nlhbbov5vooYzliIbnsbvmsYfmgLvorqHnrpfnmoTnrKzkuIDkuKrlkb3lkI3ljLrln5/miJblvJXnlKhcIixcbiAgICAgICAgICAgIFwiYXJlYTJcIjogXCLopoHlr7nlhbbov5vooYzliIbnsbvmsYfmgLvorqHnrpfnmoTnrKwgMiDkuKroh7PnrKwgMjU0IOS4quWRveWQjeWMuuWfn+aIluW8leeUqFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU1VNSUZcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVU1JRihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuadoeS7tlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb5Yy65Z+fMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNSUYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJz4xNjAwMDAnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWvuSDojIPlm7Qg5Lit56ym5ZCI5oyH5a6a5p2h5Lu255qE5YC85rGC5ZKMXCIsXG4gICAgICAgICAgICBcImFyZWExXCI6IFwi6KaB5oyJ5p2h5Lu26K6h566X55qE5Y2V5YWD5qC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcImNvbmRpdGlvblwiOiBcIuWumuS5ieWTquS6m+WNleWFg+agvOWwhuiiq+a3u+WKoOeahOaVsOWtl+OAgeihqOi+vuW8j+OAgeWNleWFg+agvOW8leeUqOOAgeaWh+acrOaIluWHveaVsOW9ouW8j+eahOadoeS7tlwiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIuimgea3u+WKoOeahOWunumZheWNleWFg+agvCAo5aaC5p6c6KaB5re75Yqg55qE5Y2V5YWD5qC85LiN5ZyocmFuZ2Xlj4LmlbDkuK3mjIflrprnmoTljZXlhYPmoLwpXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTVU1JRlNcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVU1JRlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmnaHku7YxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvljLrln58yLOadoeS7tjIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVU1JRlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJz4xNjAwMDAnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkI1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWvuSDojIPlm7Qg5Lit56ym5ZCI5oyH5a6a5p2h5Lu255qE5YC85rGC5ZKMXCIsXG4gICAgICAgICAgICBcImFyZWExXCI6IFwi6KaB5oyJ5p2h5Lu26K6h566X55qE5Y2V5YWD5qC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcImNvbmRpdGlvbjFcIjogXCLlrprkuYnlk6rkupvljZXlhYPmoLzlsIbooqvmt7vliqDnmoTmlbDlrZfjgIHooajovr7lvI/jgIHljZXlhYPmoLzlvJXnlKjjgIHmlofmnKzmiJblh73mlbDlvaLlvI/nmoTmnaHku7ZcIixcbiAgICAgICAgICAgIFwiY29uZGl0aW9uMlwiOiBcIuWFtuS7lueahOWMuuWfnyzmnaHku7blr7lcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNVTVBST0RVQ1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVU1QUk9EVUNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbYXJyYXkyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNUFJPRFVDVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpEMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpEMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlr7nnu5nlrprmlbDnu4TkuK3nmoTnm7jlupTnu4Tku7bmiafooYznroDljZXnmoTnrpfmnK/ov5DnrpcsIOW5tui/lOWbnui/meS6m+iuoeeul+eahOWSjFwiLFxuICAgICAgICAgICAgXCJhcnJheTFcIjogXCLlhbbnm7jlupTlhYPntKDpnIDopoHov5vooYznm7jkuZjlubbmsYLlkoznmoTnrKzkuIDkuKrmlbDnu4Tlj4LmlbBcIixcbiAgICAgICAgICAgIFwiYXJyYXkyXCI6IFwiIDIg5YiwIDI1NSDkuKrmlbDnu4Tlj4LmlbDvvIzlhbbnm7jlupTlhYPntKDpnIDopoHov5vooYznm7jkuZjlubbmsYLlkoxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNVTVNRXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNU1EoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVU1TUShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Y+C5pWw55qE5bmz5pa55ZKMXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WunuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLku7vmhI/lrp7mlbAs5Liq5pWw5LuL5LqOMeWIsDI1NeS5i+mXtFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU1VNWDJNWTJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTVU1YMk1ZMihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNWDJNWTIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QThcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjI6QjhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Lik5pWw57uE5Lit5a+55bqU5pWw5YC855qE5bmz5pa55beu5LmL5ZKMXCIsXG4gICAgICAgICAgICBcImFyZWExXCI6IFwiIOesrOS4gOS4quaVsOe7hOaIluaVsOWAvOWMuuWfn1wiLFxuICAgICAgICAgICAgXCJhcmVhMlwiOiBcIiDnrKzogIzkuKrmlbDnu4TmiJbmlbDlgLzljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlNVTVgyUFkyXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNWDJQWTIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy65Z+fMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNVTVgyUFkyKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkE4XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkI4XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuS4pOaVsOe7hOS4reWvueW6lOWAvOeahOW5s+aWueWSjOS5i+WSjFwiLFxuICAgICAgICAgICAgXCJhcmVhMVwiOiBcIiDnrKzkuIDkuKrmlbDnu4TmiJbmlbDlgLzljLrln59cIixcbiAgICAgICAgICAgIFwiYXJlYTJcIjogXCIg56ys6ICM5Liq5pWw57uE5oiW5pWw5YC85Yy65Z+fXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJTVU1YTVkyXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNWE1ZMihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfnzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1VNWE1ZMihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMjpCOFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57kuKTmlbDnu4TkuK3lr7nlupTmlbDlgLzkuYvlt67nmoTlubPmlrnlkoxcIixcbiAgICAgICAgICAgIFwiYXJlYTFcIjogXCIg56ys5LiA5Liq5pWw57uE5oiW5pWw5YC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcImFyZWEyXCI6IFwiIOesrOiAjOS4quaVsOe7hOaIluaVsOWAvOWMuuWfn1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU1dJVENIXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1dJVENIKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuihqOi+vuW8j1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlgLwxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIue7k+aenDFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+WAvDIs57uT5p6cMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlNXSVRDSChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIifmmJ/mnJ/lpKknXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlvlgLwyLOe7k+aenDIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjdcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWHveaVsOagueaNruWAvOWIl+ihqOiuoeeul+S4gOS4quWAvO+8iOensOS4uuihqOi+vuW8j++8ie+8jOW5tui/lOWbnuS4juesrOS4gOS4quWMuemFjeWAvOWvueW6lOeahOe7k+aenFwiLFxuICAgICAgICAgICAgXCJmb3JtdWxhXCI6IFwi55So5p2l5q+U6L6D55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7u+aEj+WAvFwiLFxuICAgICAgICAgICAgXCJyZXN1bHQxXCI6IFwi5YC8MSDkuI4g6KGo6L6+5byPIOWMuemFjeWQjui/lOWbnueahOWAvFwiLFxuICAgICAgICAgICAgXCJyZXN1bHQyXCI6IFwi5YW25LuW5YC85LiO57uT5p6c5a+5LOacgOWkmjEyNeS4qlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiU1lEXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiU1lEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJTWUQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lnKjmjIflrprmnJ/pl7TlhoXotYTkuqfmjInlubTpmZDmgLvlkozmipjml6fms5XorqHnrpfnmoTmipjml6dcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6LWE5Lqn5Y6f5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuaKmOaXp+acq+WwvuaXtueahOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLotYTkuqfnmoTmipjml6fmnJ/mlbBcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5pyf6Ze077yM5b+F6aG75LiOIHZhbHVlMyDkvb/nlKjnm7jlkIznmoTljZXkvY1cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWAvOW8leeUqOeahOaWh+Wtl1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuimgea1i+ivleeahOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVEFOXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVEFOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRBTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwLjc4NVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lt7Lnn6Xop5LluqbnmoTmraPliIdcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLopoHmsYLmraPliIfnmoTop5LluqbvvIzku6XlvKfluqbooajnpLpcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRBTkhcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUQU5IKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRBTihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCItMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mlbDlrZfnmoTlj4zmm7LmraPliIdcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLku7vmhI/lrp7mlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRCSUxMRVFcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUQklMTEVRKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUQklMTEVRKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWbveW6k+WIuOeahOetieaViOaUtuebiueOh1wiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuWbveW6k+WIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuWbveW6k+WIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWbveW6k+WIuOeahOi0tOeOsOeOh1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVEJJTExQUklDRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRCSUxMUFJJQ0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRCSUxMUFJJQ0UoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6Z2i5YC8IO+/pTEwMCDnmoTlm73lupPliLjnmoTku7fmoLxcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLlm73lupPliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLlm73lupPliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLlm73lupPliLjnmoTotLTnjrDnjodcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRCSUxMWUlFTERcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUQklMTFlJRUxEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUQklMTFlJRUxEKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWbveW6k+WIuOeahOaUtuebiueOh1wiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuWbveW6k+WIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuWbveW6k+WIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumdouWAvCDvv6UxMDAg55qE5Zu95bqT5Yi455qE5Lu35qC8XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJULkRJU1RcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJULkRJU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVC5ESVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjYwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lrabnlJ/nmoTlt6blsL4gdCDliIbluIPjgIIgdCDliIbluIPnlKjkuo7lsI/lnovmoLfmnKzmlbDmja7pm4bnmoTlgYforr7mo4DpqoxcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6ZyA6KaB6K6h566X5YiG5biD55qE5pWw5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuS4gOS4quihqOekuuiHqueUseW6puaVsOeahOaVtOaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLlhrPlrprlh73mlbDlvaLlvI/nmoTpgLvovpHlgLxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlQuRElTVC5SVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlQuRElTVC5SVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlQuRElTVC5SVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCJ0IOWIhuW4g+eUqOS6juWwj+Wei+agt+acrOaVsOaNrumbhueahOWBh+iuvuajgOmqjFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLpnIDopoHorqHnrpfliIbluIPnmoTmlbDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5LiA5Liq6KGo56S66Ieq55Sx5bqm5pWw55qE5pW05pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJURVhUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVEVYVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW3tcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRFWFQoXCIsXG4gICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEyMzQuNTY3XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIickIywjIzAuMDAnXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Ye95pWw5Y+v6YCa6L+H5qC85byP5Luj56CB5ZCR5pWw5a2X5bqU55So5qC85byP77yM6L+b6ICM5pu05pS55pWw5a2X55qE5pi+56S65pa55byPXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi6KaB6L2s5o2i5Li65paH5pys55qE5pWw5YC8XCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLkuIDkuKrmlofmnKzlrZfnrKbkuLLvvIzlrprkuYnopoHlupTnlKjkuo7miYDmj5DkvpvlgLznmoTmoLzlvI9cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRJTUVcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUSU1FKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXtlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLliIZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi56eSXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRJTUUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQzJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue54m55a6a5pe26Ze055qE5Y2B6L+b5Yi25pWw5a2XXCIsXG4gICAgICAgICAgICBcImhvdXJcIjogXCIw77yI6Zu277yJ5YiwIDMyNzY3IOS5i+mXtOeahOaVsOWtl++8jOS7o+ihqOWwj+aXtlwiLFxuICAgICAgICAgICAgXCJtaW51dGVcIjogXCIgMCDliLAgMzI3Njcg5LmL6Ze055qE5pWw5a2X77yM5Luj6KGo5YiG6ZKfXCIsXG4gICAgICAgICAgICBcInNlY29uZFwiOiBcIjAg5YiwIDMyNzY3IOS5i+mXtOeahOaVsOWtl++8jOS7o+ihqOenklwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVElNRVZBTFVFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVElNRVZBTFVFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVElNRVZBTFVFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIicyOjI0IEFNJ1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57nlLHmlofmnKzlrZfnrKbkuLLooajnpLrnmoTml7bpl7TnmoTljYHov5vliLbmlbDlrZdcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIuS4gOS4quaWh+acrOWtl+espuS4su+8jOS7o+ihqOS7peS7u+S4gCBNaWNyb3NvZnQgRXhjZWwg5pe26Ze05qC85byP6KGo56S655qE5pe26Ze0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJULklOVlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlQuSU5WKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVC5JTlYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMC43NVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuWtpueUn+eahCB0IOWIhuW4g+eahOW3puWwvuWPjeWHveaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLkuI7lrabnlJ/nmoQgdCDliIbluIPnm7jlhbPnmoTmpoLnjodcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5LiO5a2m55Sf55qEIHQg5YiG5biD55u45YWz55qE5qaC546HXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJUT0RBWVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRPREFZKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUT0RBWShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5b2T5YmN5pel5pyf55qE5bqP5YiX5Y+3XCIsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVFJBTlNQT1NFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJBTlNQT1NFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSQU5TUE9TRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMTpGNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlj6/ov5Tlm57ovaznva7ljZXlhYPmoLzljLrln5/vvIzljbPlsIbooYzljZXlhYPmoLzljLrln5/ovaznva7miJDliJfljZXlhYPmoLzljLrln5/vvIzlj43kuYvkuqbnhLZcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLopoHovaznva7nmoTlt6XkvZzooajkuIrnmoTmlbDnu4TmiJbljZXlhYPmoLzljLrln59cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRSRU5EXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJFTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZuG5ZCIMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJb6ZuG5ZCIMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJFTkQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRTI6RTEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkQyOkQxM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUxXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjVcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTJdXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6N1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Ye95pWw6L+U5Zue5rK/57q/5oCn6LaL5Yq/55qE5YC8XCIsXG4gICAgICAgICAgICBcInNldDFcIjogXCLlhbPns7sgeSA9IG14ICsgYiDkuK3lt7Lnn6XpgZPnmoQgeSDlgLzpm4ZcIixcbiAgICAgICAgICAgIFwic2V0MlwiOiBcIuWcqOWFs+ezuyB5ID0gbXggKyBiIOS4reWPr+iDveW3sue7j+efpemBk+eahOS4gOe7hOWPr+mAiSB4IOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLopoHov5Tlm57lhbbotovlir/nmoTmlrAgeCDlgLzov5Tlm57lr7nlupTnmoQgeSDlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5LiA5Liq6YC76L6R5YC8LCDmjIflrprmmK/lkKblvLrliLbluLjph48gYiDnrYnkuo4wXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJUUklNTUVBTlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSSU1NRUFOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSSU1NRUFOKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwLjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5pWw5o2u6ZuG55qE5YaF6YOo5bmz5Z2H5YC8XCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi6ZyA6KaB6L+b6KGM5pW055CG5bm25rGC5bmz5Z2H5YC855qE5pWw57uE5oiW5pWw5YC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5LuO6K6h566X5Lit5o6S6Zmk5pWw5o2u54K555qE5YiG5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJUUlVFXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVFJVRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue6YC76L6R5YC8IFRSVUVcIixcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJUUlVOQ1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSVU5DKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUUlVOQyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI4LjlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlsIbmlbDlrZfnmoTlsI/mlbDpg6jliIbmiKrljrvvvIzov5Tlm57mlbTmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6ZyA6KaB5oiq5bC+5Y+W5pW055qE5pWw5a2XXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIueUqOS6juaMh+WumuWPluaVtOeyvuW6pueahOaVsOWtlyzpu5jorqTkuLrpm7ZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlQuVEVTVFwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlQuVEVTVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbDmja7pm4YxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVsOaNrumbhjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJULlRFU1QoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTEwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkIxMFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiO5a2m55SfIHQt5qOA6aqM55u45YWz55qE5qaC546HXCIsXG4gICAgICAgICAgICBcImRhdGFzZXQxXCI6IFwi56ys5LiA5Liq5pWw5o2u6ZuGXCIsXG4gICAgICAgICAgICBcImRhdGFzZXQyXCI6IFwi56ys5LqM5Liq5pWw5o2u6ZuGXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuaMh+WumuWIhuW4g+WwvuaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLopoHmiafooYznmoQgdCDmo4DpqoznmoTnsbvlnotcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlRZUEVcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUWVBFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWAvFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJUWVBFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaVsOWAvOeahOexu+Wei1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIumcgOimgei/lOWbnuWAvOexu+Wei+eahOWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVU5JQ0hBUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlVOSUNIQVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVU5JQ0hBUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIzMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57nu5nlrprmlbDlgLzlvJXnlKjnmoQgVW5pY29kZSDlrZfnrKZcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLku6PooajlrZfnrKbnmoQgVW5pY29kZSDmlbDlrZdcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlVOSUNPREVcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJVTklDT0RFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVU5JQ09ERShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCInQidcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5a+55bqU5LqO5paH5pys55qE56ys5LiA5Liq5a2X56ym55qE5pWw5a2X77yI5Luj56CB54K577yJXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLopoHojrflvpflhbYgVW5pY29kZSDlgLznmoTlrZfnrKZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlVOSVFVRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlVOSVFVRShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUxXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJVTklRVUUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRDI6RDExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTFdXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjo1XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLlh73mlbDov5Tlm57liJfooajmiJbojIPlm7TkuK3nmoTkuIDns7vliJfllK/kuIDlgLxcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLopoHku47lhbbkuK3ov5Tlm57llK/kuIDlgLznmoTojIPlm7TmiJbmlbDnu4RcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5Li66YC76L6R5YC877yM55So5LqO5oyH56S65q+U6L6D5pa55byP77ybQnkgcm93ID0gRkFMU0Ug5oiW55yB55Wl77ybQnkgY29sdW1uID0gVFJVRVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLkuLrpgLvovpHlgLzvvJrku4Xov5Tlm57lh7rnjrDkuIDmrKHnmoTllK/kuIDlgLwgPSBUUlVF77yb5YyF5ZCr5omA5pyJ5ZSv5LiA5YC8ID0gRkFMU0Ug5oiW55yB55WlXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJVUFBFUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlVQUEVSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVVBQRVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG5paH5pys6L2s5o2i5Li65aSn5YaZ5a2X5q+NXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLopoHovazmjaLkuLrlpKflhpnlrZfmr43nmoTmlofmnKzjgIIg5paH5pys5Y+v5Lul5piv5byV55So5oiW5paH5pys5a2X56ym5LiyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJWQUxVRVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZBTFVFKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVkFMVUUoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiJyQxLDAwMCdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5bCG6KGo56S65pWw5a2X55qE5paH5pys5a2X56ym5Liy6L2s5o2i5Li65pWw5a2XXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCLnlKjlvJXlj7fmi6zotbfmnaXnmoTmlofmnKzmiJbljIXlkKvopoHovazmjaLmlofmnKznmoTljZXlhYPmoLznmoTlvJXnlKhcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlZBUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZBUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZBUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBMTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6K6h566X5Z+65LqO57uZ5a6a5qC35pys55qE5pa55beuXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWvueW6lOS6juaAu+S9k+agt+acrOeahOesrOS4gOS4quaVsOWAvOWPguaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlr7nlupTkuo7mgLvkvZPmoLfmnKznmoQgMiDliLAgMjU1IOS4quaVsOWAvOWPguaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVkFSLlBcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJWQVIuUChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZBUi5QKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCJbdmFsdWUyLC4uLl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjozXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLorqHnrpfln7rkuo7mlbTkuKrmoLfmnKzmgLvkvZPnmoTmlrnlt67vvIjlv73nlaXmoLfmnKzmgLvkvZPkuK3nmoTpgLvovpHlgLzlkozmlofmnKzvvIlcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5a+55bqU5LqO5oC75L2T5qC35pys55qE56ys5LiA5Liq5pWw5YC85Y+C5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWvueW6lOS6juaAu+S9k+agt+acrOeahCAyIOWIsCAyNTUg5Liq5pWw5YC85Y+C5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJWQVJBXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVkFSQShcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZBUkEoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTExXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgLy8gICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgXCJpbmRleFwiOjNcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuiuoeeul+WfuuS6jue7meWumuagt+acrOeahOaWueW3rlwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLlr7nlupTkuo7mgLvkvZPmoLfmnKznmoTnrKzkuIDkuKrmlbDlgLzlj4LmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUyXCI6IFwi5a+55bqU5LqO5oC75L2T5qC35pys55qEIDIg5YiwIDI1NSDkuKrmlbDlgLzlj4LmlbBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlZBUi5TXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVkFSLlMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlt2YWx1ZTIsLi4uXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJWQVIuUyhcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMjpBMTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMiwuLi5dXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBcImluZGV4XCI6M1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Lyw566X5Z+65LqO5qC35pys55qE5pa55beuXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuWvueW6lOS6juaAu+S9k+agt+acrOeahOesrOS4gOS4quaVsOWAvOWPguaVsFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLlr7nlupTkuo7mgLvkvZPmoLfmnKznmoQgMiDliLAgMjU1IOS4quaVsOWAvOWPguaVsFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiVkRCXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiVkRCKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWU0XVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAxMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlNV1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogMTNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZEQihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjAuODc1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjEuNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAxMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgIC8vICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgIFwiaW5kZXhcIjoxM1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5L2/55So5Y+M5YCN5L2Z6aKd6YCS5YeP5rOV5oiW5YW25LuW5oyH5a6a5pa55rOV77yM6L+U5Zue5LiA56yU6LWE5Lqn5Zyo57uZ5a6a5pyf6Ze077yI5YyF5ous6YOo5YiG5pyf6Ze077yJ5YaF55qE5oqY5pen5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIui1hOS6p+WOn+WAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmipjml6fmnKvlsL7ml7bnmoTlgLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi6LWE5Lqn55qE5oqY5pen5pyf5pWwXCIsXG4gICAgICAgICAgICBcImRhdGUxXCI6IFwi5oKo6KaB6K6h566X5oqY5pen55qE6LW35aeL5pe25pyfXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi5oKo6KaB6K6h566X5oqY5pen55qE57uI5q2i5pe25pyfXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuS9meminemAkuWHj+mAn+eOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTVcIjogXCLpgLvovpHlgLzvvIzmjIflrprlvZPmipjml6flgLzlpKfkuo7kvZnpop3pgJLlh4/orqHnrpflgLzml7bvvIzmmK/lkKbovaznlKjnm7Tnur/mipjml6fms5VcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlZMT09LVVBcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJWTE9PS1VQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLrln58xXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUzXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJWTE9PS1VQKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkIyOkU3XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRkFMU0VcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi5Zyo6KGo5qC85oiW5Yy65Z+f5Lit5oyJ6KGM5p+l5om+6aG555uuXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuimgeafpeaJvueahOWAvFwiLFxuICAgICAgICAgICAgXCJhcmVhMVwiOiBcIuaQnOe0oiB2YWx1ZTEg5ZKM6L+U5Zue5YC855qE5Y2V5YWD5qC85Yy65Z+fXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuWMheWQq+i/lOWbnuWAvOeahOWIl+WPt1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTNcIjogXCLkuIDkuKrpgLvovpHlgLzvvIzor6XlgLzmjIflrprluIzmnJsgVkxPT0tVUCDmn6Xmib7ov5HkvLzljLnphY3ov5jmmK/nsr7noa7ljLnphY1cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIldFRUtEQVlcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXRUVLREFZKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXRUVLREFZKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5a+55bqU5LqO5p+Q5Liq5pel5pyf55qE5LiA5ZGo5Lit55qE56ys5Yeg5aSpXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS4gOS4quW6j+WIl+WPt++8jOS7o+ihqOWwneivleafpeaJvueahOmCo+S4gOWkqeeahOaXpeacn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLnlKjkuo7noa7lrprov5Tlm57lgLznsbvlnovnmoTmlbDlrZdcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIldFRUtOVU1cIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXRUVLTlVNKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJbdmFsdWUyXVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXRUVLTlVNKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue54m55a6a5pel5pyf55qE5ZGo5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuS7o+ihqOS4gOWRqOS4reeahOaXpeacn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLkuIDmlbDlrZfvvIznoa7lrprmmJ/mnJ/ku47lk6rkuIDlpKnlvIDlp4tcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIldFSUJVTExcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXRUlCVUxMKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXRUlCVUxMKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRSVUVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIFdlaWJ1bGwg5YiG5biDXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIueUqOadpeiuoeeul+WHveaVsOeahOWAvFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLliIbluIPlj4LmlbBcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi5YiG5biD5Y+C5pWwXCIsXG4gICAgICAgICAgICBcInZhbHVlNFwiOiBcIuehruWumuWHveaVsOeahOW9ouW8j1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiV09SS0RBWVwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIldPUktEQVkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvmlbDnu4RdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIldPUktEQVkoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTQ6QTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5Zyo5p+Q5pel5pyf77yI6LW35aeL5pel5pyf77yJ5LmL5YmN5oiW5LmL5ZCO44CB5LiO6K+l5pel5pyf55u46ZqU5oyH5a6a5bel5L2c5pel55qE5p+Q5LiA5pel5pyf55qE5pel5pyf5YC8XCIsXG4gICAgICAgICAgICBcImRhdGVcIjogXCLkuIDkuKrku6PooajlvIDlp4vml6XmnJ/nmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCLml6XmnJ8g5LmL5YmN5oiW5LmL5ZCO5LiN5ZCr5ZGo5pyr5Y+K6IqC5YGH5pel55qE5aSp5pWwXCIsXG4gICAgICAgICAgICBcImFycmF5XCI6IFwi5LiA5Liq5Y+v6YCJ5YiX6KGo77yM5YW25Lit5YyF5ZCr6ZyA6KaB5LuO5bel5L2c5pel5Y6G5Lit5o6S6Zmk55qE5LiA5Liq5oiW5aSa5Liq5pel5pyf77yM5L6L5aaC5ZCE56eN55yBL+W4gi/oh6rmsrvljLrlkozlm73lrrYv5Zyw5Yy655qE5rOV5a6a5YGH5pel5Y+K6Z2e5rOV5a6a5YGH5pelXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJXT1JLREFZLklOVExcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJXT1JLREFZLklOVEwoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvmlbDnu4RdXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIldPUktEQVkuSU5UTChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNDpBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57mjIflrprnmoToi6XlubLkuKrlt6XkvZzml6XkuYvliY3miJbkuYvlkI7nmoTml6XmnJ/nmoTluo/liJflj7fvvIjkvb/nlKjoh6rlrprkuYnlkajmnKvlj4LmlbDvvIlcIixcbiAgICAgICAgICAgIFwiZGF0ZVwiOiBcIuW8gOWni+aXpeacn1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuaXpeacnyDkuYvliY3miJbkuYvlkI7kuI3lkKvlkajmnKvlj4roioLlgYfml6XnmoTlpKnmlbBcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIjogXCLmjIfnpLrkuIDlkajkuK3lsZ7kuo7lkajmnKvnmoTml6XlrZDlkozkuI3kvZzkuLrlt6XkvZzml6XnmoTml6XlrZBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlhJUlJcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJYSVJSKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW+aVsOWAvF1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWElSUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMzpBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJCMzpCN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIwLjFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA57uE5LiN5LiA5a6a5a6a5pyf5Y+R55Sf55qE546w6YeR5rWB55qE5YaF6YOo5pS255uK546HXCIsXG4gICAgICAgICAgICBcImFycmF5MVwiOiBcIuS4jiBhcnJheTIg5Lit55qE5pSv5LuY5pe26Ze055u45a+55bqU55qE5LiA57O75YiX546w6YeR5rWBXCIsXG4gICAgICAgICAgICBcImFycmF5MlwiOiBcIuS4jueOsOmHkea1geaUr+S7mOebuOWvueW6lOeahOaUr+S7mOaXpeacn+ihqFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWvueWHveaVsCBYSVJSIOiuoeeul+e7k+aenOeahOS8sOiuoeWAvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiWE5QVlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlhOUFYoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFycmF5MVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcnJheTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWE5QVihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIuMDlcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQjM6QjdcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTI6QTZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5LiA57uE546w6YeR5rWB55qE5YeA546w5YC877yM6L+Z5Lqb546w6YeR5rWB5LiN5LiA5a6a5a6a5pyf5Y+R55SfXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwi5a+55Ye95pWwIFhJUlIg6K6h566X57uT5p6c55qE5Lyw6K6h5YC8XCIsXG4gICAgICAgICAgICBcImFycmF5MVwiOiBcIuS4jiBhcnJheTIg5Lit55qE5pSv5LuY5pe26Ze055u45a+55bqU55qE5LiA57O75YiX546w6YeR5rWBXCIsXG4gICAgICAgICAgICBcImFycmF5MlwiOiBcIuS4jueOsOmHkea1geaUr+S7mOebuOWvueW6lOeahOaUr+S7mOaXpeacn+ihqFwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIlhPUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlhPUihcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmnaHku7YxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlvmnaHku7YyLC4uLl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWE9SKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIigzPjBcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiMjw5XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaJgOacieWPguaVsOeahOmAu+i+keW8guaIllwiLFxuICAgICAgICAgICAgXCJjb25kaXRpb24xXCI6IFwi6K6h566X5YC85Li6VFJVReaIlkZBTFNFXCIsXG4gICAgICAgICAgICBcImNvbmRpdGlvbjJcIjogXCLopoHmo4DpqoznmoQgMSDoh7MgMjU0IOS4quadoeS7tu+8jOWPr+S4uiBUUlVFIOaIliBGQUxTRe+8jOS4lOWPr+S4uumAu+i+keWAvOOAgeaVsOe7hOaIluW8leeUqFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiWUVBUlwiOiB7XG4gICAgICAgIFwidGl0bGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIllFQVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIllFQVIoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiQTNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5Zue5a+55bqU5LqO5p+Q5Liq5pel5pyf55qE5bm05Lu9XCIsXG4gICAgICAgICAgICBcImRhdGVcIjogXCLopoHmn6Xmib7nmoTlubTku73nmoTml6XmnJ9cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIllFQVJGUkFDXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWUVBUkZSQUMoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIllFQVJGUkFDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIuWPr+iuoeeul+S4pOS4quaXpeacn++8iOaXpeacnzEg5ZKMIOaXpeacnzLvvInkuYvpl7TnmoTlpKnmlbBcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLkuIDkuKrku6PooajlvIDlp4vml6XmnJ/nmoTml6XmnJ9cIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLkuIDkuKrku6Pooajnu4jmraLml6XmnJ/nmoTml6XmnJ9cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIllJRUxEXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWUlFTEQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJZSUVMRChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBN1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57lrprmnJ/mlK/ku5jliKnmga/nmoTlgLrliLjnmoTmlLbnm4pcIixcbiAgICAgICAgICAgICdkYXRlMSc6IFwi5pyJ5Lu36K+B5Yi455qE57uT566X5pelXCIsXG4gICAgICAgICAgICBcImRhdGUyXCI6IFwi5pyJ5Lu36K+B5Yi455qE5Yiw5pyf5pelXCIsXG4gICAgICAgICAgICBcInZhbHVlMVwiOiBcIuacieS7t+ivgeWIuOeahOW5tOaBr+elqOWIqeeOh1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLmnInku7for4HliLjnmoTku7fmoLxcIixcbiAgICAgICAgICAgIFwidmFsdWUzXCI6IFwi6Z2i5YC8IO+/pTEwMCDnmoTmnInku7for4HliLjnmoTmuIXlgb/ku7flgLxcIixcbiAgICAgICAgICAgIFwidmFsdWU0XCI6IFwi5bm05LuY5oGv5qyh5pWwXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJZSUVMRERJU0NcIjoge1xuICAgICAgICBcInRpdGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJZSUVMRERJU0MoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTJcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWUlFTERESVNDKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEzXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkE1XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiKVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBcImNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJhYnN0cmFjdFwiOiBcIui/lOWbnuaKmOS7t+WPkeihjOeahOacieS7t+ivgeWIuOeahOW5tOaUtuebiueOh1wiLFxuICAgICAgICAgICAgXCJkYXRlMVwiOiBcIuacieS7t+ivgeWIuOeahOe7k+eul+aXpVwiLFxuICAgICAgICAgICAgXCJkYXRlMlwiOiBcIuacieS7t+ivgeWIuOeahOWIsOacn+aXpVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTFcIjogXCLmnInku7for4HliLjnmoTku7fmoLzvvIjmjInpnaLlgLzkuLog77+lMTAwIOiuoeeul++8iVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZTJcIjogXCLpnaLlgLwg77+lMTAwIOeahOacieS7t+ivgeWIuOeahOa4heWBv+S7t+WAvFwiLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIllJRUxETUFUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWUlFTERNQVQoXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyfMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ8yXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacnzNcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWUxXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJZSUVMRE1BVChcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBMlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBM1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBNlwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIilcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgXCJjb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwiYWJzdHJhY3RcIjogXCLov5Tlm57liLDmnJ/ku5jmga/nmoTmnInku7for4HliLjnmoTlubTmlLbnm4rnjodcIixcbiAgICAgICAgICAgIFwiZGF0ZTFcIjogXCLmnInku7for4HliLjnmoTnu5Pnrpfml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTJcIjogXCLmnInku7for4HliLjnmoTliLDmnJ/ml6VcIixcbiAgICAgICAgICAgIFwiZGF0ZTNcIjogXCLmnInku7for4HliLjnmoTlj5HooYzml6XvvIzku6Xml7bpl7Tluo/liJflj7fooajnpLpcIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi5pyJ5Lu36K+B5Yi45Zyo5Y+R6KGM5pel55qE5Yip546HXCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuacieS7t+ivgeWIuOeahOS7t+agvFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiWi5URVNUXCI6IHtcbiAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWi5URVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuuWfn1wiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZTFcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIsXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiW3ZhbHVlMl1cIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiWi5URVNUKFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkEyOkExMVwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCI0XCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiLFwiLFxuICAgICAgICAgICAgICAgIFwiZWRpdG9yXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIjZcIixcbiAgICAgICAgICAgICAgICBcImVkaXRvclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiaW5kZXhcIjogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCIpXCIsXG4gICAgICAgICAgICAgICAgXCJlZGl0b3JcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiY29udGVudFwiOiB7XG4gICAgICAgICAgICBcImFic3RyYWN0XCI6IFwi6L+U5ZueIHog5qOA6aqM55qE5Y2V5bC+IFAg5YC8XCIsXG4gICAgICAgICAgICBcImFyZWFcIjogXCLnlKjmnaXmo4DpqowgeCDnmoTmlbDnu4TmiJbmlbDmja7ljLrln59cIixcbiAgICAgICAgICAgIFwidmFsdWUxXCI6IFwi6KaB5rWL6K+V55qE5YC8XCIsXG4gICAgICAgICAgICBcInZhbHVlMlwiOiBcIuaAu+S9k++8iOW3suefpe+8ieagh+WHhuWBj+W3ruOAgiDlpoLmnpznnIHnlaXvvIzliJnkvb/nlKjmoLfmnKzmoIflh4blgY/lt65cIlxuICAgICAgICB9XG4gICAgfSxcbn07XG4iLCJpbXBvcnQge2h9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7Q2VsbFJhbmdlfSBmcm9tICcuLi9jb3JlL2NlbGxfcmFuZ2UnO1xuaW1wb3J0IHttb3VzZU1vdmVVcH0gZnJvbSBcIi4uL2NvbXBvbmVudC9ldmVudFwiO1xuaW1wb3J0IHtsb2NrQ2VsbHN9IGZyb20gXCIuLi9jb21wb25lbnQvZm9ybXVsYV9lZGl0b3JcIjtcbmltcG9ydCB7Y3V0dGluZ0J5UG9zfSBmcm9tIFwiLi4vY29yZS9vcGVyYXRvclwiO1xuaW1wb3J0IHtleHByMnh5fSBmcm9tIFwiLi4vdXRpbHMvYWxwaGFiZXRcIjtcbmltcG9ydCB7Y3V0dGluZ0J5UG9zRW5kLCBpc0Fic29sdXRlVmFsdWV9IGZyb20gXCIuLi9jb3JlL29wZXJhdG9yXCI7XG5pbXBvcnQgU2VsZWN0b3JNb3ZlIGZyb20gXCIuL3NlbGVjdG9yX21vdmVcIjtcblxuY29uc3Qgc2VsZWN0b3JIZWlnaHRCb3JkZXJXaWR0aCA9IDIgKiAyIC0gMTtcbmxldCBzdGFydFpJbmRleCA9IDEwO1xuXG5mdW5jdGlvbiAgZmluZChzdHIsIGNoYSkge1xuICAgIHJldHVybiBzdHIubGFzdEluZGV4T2YoY2hhKTtcbn1cblxuY2xhc3MgU2VsZWN0b3JFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBzZWxlY3Rvciwgc2hlZXQpIHtcbiAgICAgICAgLy8gdGhpcy5jb3JuZXJFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItY29ybmVyYCk7XG4gICAgICAgIC8vIHRoaXMuYm94ID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3Rvci1ib3hgKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuICAgICAgICB0aGlzLmwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWJveC1sYClcbiAgICAgICAgICAgIC5vbignbW91c2Vkb3duLnN0b3AnLCBldnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUV2ZW50KGV2dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3Rvci1ib3gtcmApXG4gICAgICAgICAgICAub24oJ21vdXNlZG93bi5zdG9wJywgZXZ0ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVFdmVudChldnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LXRgKVxuICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24uc3RvcCcsIGV2dCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRXZlbnQoZXZ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLmIgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWJveC1iYClcbiAgICAgICAgICAgIC5vbignbW91c2Vkb3duLnN0b3AnLCBldnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUV2ZW50KGV2dCk7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIHRoaXMuYm94aW5uZXIgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWJveGlubmVyYClcbiAgICAgICAgICAgIC5jaGlsZHJlbih0aGlzLmIsIHRoaXMudCwgdGhpcy5yLCB0aGlzLmwpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yTW92ZSA9IG5ldyBTZWxlY3Rvck1vdmUodGhpcy5ib3hpbm5lciwgZGF0YSwgc2hlZXQsIHNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5hcmVhRWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWFyZWFgKVxuICAgICAgICAgICAgLmNoaWxkKHRoaXMuYm94aW5uZXIpXG4gICAgICAgICAgICAuaGlkZSgpOyAgICAgICAgICAgIC8vIHRoaXMuYm94aW5uZXJcbiAgICAgICAgdGhpcy5jbGlwYm9hcmRFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItY2xpcGJvYXJkYCkuaGlkZSgpO1xuICAgICAgICB0aGlzLmF1dG9maWxsRWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXNlbGVjdG9yLWF1dG9maWxsYCkuaGlkZSgpO1xuICAgICAgICB0aGlzLmVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3RvcmApXG4gICAgICAgICAgICAuY3NzKCd6LWluZGV4JywgYCR7c3RhcnRaSW5kZXh9YClcbiAgICAgICAgICAgIC5jaGlsZHJlbih0aGlzLmFyZWFFbCwgdGhpcy5jbGlwYm9hcmRFbCwgdGhpcy5hdXRvZmlsbEVsKVxuICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgc3RhcnRaSW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICBtb3ZlRXZlbnQoZXZ0KSB7XG4gICAgICAgIGxldCB7ZGF0YSwgX3NlbGVjdG9yLCBzaGVldH0gPSB0aGlzO1xuICAgICAgICBsZXQgX21vdmVfc2VsZWN0b3JzID0gbnVsbDtcbiAgICAgICAgbGV0IHtzZWxlY3Rvcn0gPSBkYXRhO1xuICAgICAgICBsZXQge3NyaSwgc2NpLCBlcmksIGVjaSwgdywgaH0gPSBzZWxlY3Rvci5yYW5nZTtcbiAgICAgICAgbGV0IGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBoKTtcbiAgICAgICAgbGV0IHAgPSAtMTtcbiAgICAgICAgbW91c2VNb3ZlVXAod2luZG93LCAoZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHtzZWxlY3RvcnN9ID0gdGhpcy5zaGVldDtcbiAgICAgICAgICAgIHNoZWV0LmNvbnRhaW5lci5jc3MoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdG9yID0gc2VsZWN0b3JzW2ldO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLnNlbGVjdG9yLnNldEJveGlubmVyKFwibm9uZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHtyaSwgY2l9ID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFkoZS5sYXllclgsIGUubGF5ZXJZKTtcbiAgICAgICAgICAgIGlmIChyaSAhPT0gLTEgJiYgY2kgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgcG9zfSA9IHRoaXMuc2hlZXQuZWRpdG9yO1xuICAgICAgICAgICAgICAgIGxldCBpbnB1dFRleHQgPSB0aGlzLnNoZWV0LmVkaXRvci5lZGl0b3JUZXh0LmdldFRleHQoKTtcbiAgICAgICAgICAgICAgICBsZXQgX2VycHggPSBjdXR0aW5nQnlQb3MoaW5wdXRUZXh0LCBwb3MgLSAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRUZXh0Lmxlbmd0aCA+IHBvcyAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgX2VycHggKz0gY3V0dGluZ0J5UG9zRW5kKGlucHV0VGV4dCwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY3RvciA9IHNlbGVjdG9yc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHtjbGFzc05hbWUsIGVycHh9ID0gc2VsZWN0b3I7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycHggPT09IF9lcnB4ICYmIGNsYXNzTmFtZSA9PT0gX3NlbGVjdG9yLmNsYXNzTmFtZSArIFwiIGNsZWFyX3NlbGVjdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycyA9IF9tb3ZlX3NlbGVjdG9ycyA/IF9tb3ZlX3NlbGVjdG9ycyA6IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycHguc2VhcmNoKC9eW0EtWmEtel0rXFxkKzpbQS1aYS16XStcXGQrJC8pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcnIgPSBlcnB4LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZTEgPSBleHByMnh5KGFyclswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGUyID0gZXhwcjJ4eShhcnJbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2UoZTFbMV0sIGUxWzBdLCBlMlsxXSwgZTJbMF0sIHcsIGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSYW5nZS5tb3ZlKHJpLCBjaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGRhdGEuZ2V0TW92ZVJlY3QoY2VsbFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3IucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVfc2VsZWN0b3JzLnNlbGVjdG9yLnNldE1vdmUocmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5zZXQocmksIGNpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycHggIT09IF9lcnB4ICYmIGNsYXNzTmFtZSA9PT0gX3NlbGVjdG9yLmNsYXNzTmFtZSArIFwiIGNsZWFyX3NlbGVjdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBwICE9PSAtMSA/IHAgOiBmaW5kKGlucHV0VGV4dCwgc2VsZWN0b3IuZXJweCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNoZWV0LmVkaXRvci5zZXRDdXJzb3JQb3MocCArIHNlbGVjdG9yLmVycHgubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycyA9IF9tb3ZlX3NlbGVjdG9ycyA/IF9tb3ZlX3NlbGVjdG9ycyA6IHNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuZXJweC5zZWFyY2goL15bQS1aYS16XStcXGQrOltBLVphLXpdK1xcZCskLykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyciA9IGVycHguc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMSA9IGV4cHIyeHkoYXJyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZTIgPSBleHByMnh5KGFyclsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJhbmdlID0gbmV3IENlbGxSYW5nZShlMVsxXSwgZTFbMF0sIGUyWzFdLCBlMlswXSwgdywgaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJhbmdlLm1vdmUocmksIGNpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVfc2VsZWN0b3JzLnNlbGVjdG9yLnNldChyaSwgY2ksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF9tb3ZlX3NlbGVjdG9ycykge1xuICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0Q3NzKF9tb3ZlX3NlbGVjdG9ycy5jb2xvciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBsb2NrQ2VsbHMuY2FsbCh0aGlzLnNoZWV0LCBldnQsIF9tb3ZlX3NlbGVjdG9ycywgaXNBYnNvbHV0ZVZhbHVlKF9tb3ZlX3NlbGVjdG9ycy5lcnB4KSwgcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAvLyDliqDov5nkuKrnmoTljp/lm6DmmK8gIGUubGF5ZXJYLCBlLmxheWVyWe+8jCDlpoLmnpzkuI3liqDnmoTor50g5Lya54K55Yiw5Y2V5YWD5qC85YaF55qEIHh55Z2Q5qCH6L+b6KGM57uT566XXG4gICAgICAgICAgICBsZXQge3NlbGVjdG9yc30gPSB0aGlzLnNoZWV0O1xuICAgICAgICAgICAgc2hlZXQuY29udGFpbmVyLmNzcygncG9pbnRlci1ldmVudHMnLCAnYXV0bycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0b3IgPSBzZWxlY3RvcnNbaV07XG4gICAgICAgICAgICAgICAgc2VsZWN0b3Iuc2VsZWN0b3Iuc2V0Qm94aW5uZXIoXCJhbGxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwID0gLTE7XG4gICAgICAgICAgICBpZiAoX21vdmVfc2VsZWN0b3JzICYmIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3RvcilcbiAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0Q3NzKF9tb3ZlX3NlbGVjdG9ycy5jb2xvciwgdHJ1ZSk7XG4gICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRCb3hpbm5lcihwb2ludGVyKSB7XG4gICAgICAgIHRoaXMubC5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICAgICAgdGhpcy5yLmNzcyhcInBvaW50ZXItZXZlbnRzXCIsIHBvaW50ZXIpO1xuICAgICAgICB0aGlzLnQuY3NzKFwicG9pbnRlci1ldmVudHNcIiwgcG9pbnRlcik7XG4gICAgICAgIHRoaXMuYi5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvck1vdmUubC5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvck1vdmUuci5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvck1vdmUudC5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvck1vdmUuYi5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBwb2ludGVyKTtcbiAgICB9XG5cbiAgICBzZXRDc3MoYiwga2V5ID0gdHJ1ZSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgdGhpcy5hcmVhRWwuY3NzKFwiYm9yZGVyXCIsIGAycHggc29saWQgJHtifWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcmVhRWwuY3NzKFwiYm9yZGVyXCIsIGAycHggZGFzaGVkICR7Yn1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsLmNzcyhcInotaW5kZXhcIiwgXCItMVwiKTtcbiAgICB9XG5cbiAgICBzZXRPZmZzZXQodikge1xuICAgICAgICB0aGlzLmVsLm9mZnNldCh2KS5zaG93KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuZWwuaGlkZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXRBcmVhT2Zmc2V0KHYpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gdjtcbiAgICAgICAgdGhpcy5hcmVhRWwub2Zmc2V0KHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAtIHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGggKyAwLjgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHNlbGVjdG9ySGVpZ2h0Qm9yZGVyV2lkdGggKyAwLjgsXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0IC0gMC44LFxuICAgICAgICAgICAgdG9wOiB0b3AgLSAwLjgsXG4gICAgICAgIH0pLnNob3coKTtcbiAgICB9XG5cbiAgICBzZXRDbGlwYm9hcmRPZmZzZXQodikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgIH0gPSB2O1xuICAgICAgICB0aGlzLmNsaXBib2FyZEVsLm9mZnNldCh7XG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoIC0gNSxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC0gNSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvd0F1dG9maWxsKHYpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gdjtcbiAgICAgICAgdGhpcy5hdXRvZmlsbEVsLm9mZnNldCh7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGggLSBzZWxlY3RvckhlaWdodEJvcmRlcldpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSBzZWxlY3RvckhlaWdodEJvcmRlcldpZHRoLFxuICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgfSkuc2hvdygpO1xuICAgIH1cblxuICAgIGhpZGVBdXRvZmlsbCgpIHtcbiAgICAgICAgdGhpcy5hdXRvZmlsbEVsLmhpZGUoKTtcbiAgICB9XG5cbiAgICBzaG93Q2xpcGJvYXJkKCkge1xuICAgICAgICB0aGlzLmNsaXBib2FyZEVsLnNob3coKTtcbiAgICB9XG5cbiAgICBoaWRlQ2xpcGJvYXJkKCkge1xuICAgICAgICB0aGlzLmNsaXBib2FyZEVsLmhpZGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhbEJSQXJlYU9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgICAgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LCBzY3JvbGwsIGwsIHQsXG4gICAgfSA9IG9mZnNldDtcbiAgICBjb25zdCBmdHdpZHRoID0gZGF0YS5mcmVlemVUb3RhbFdpZHRoKCk7XG4gICAgY29uc3QgZnRoZWlnaHQgPSBkYXRhLmZyZWV6ZVRvdGFsSGVpZ2h0KCk7XG4gICAgbGV0IGxlZnQwID0gbGVmdCAtIGZ0d2lkdGg7XG4gICAgaWYgKGZ0d2lkdGggPiBsKSBsZWZ0MCAtPSBzY3JvbGwueDtcbiAgICBsZXQgdG9wMCA9IHRvcCAtIGZ0aGVpZ2h0O1xuICAgIGlmIChmdGhlaWdodCA+IHQpIHRvcDAgLT0gc2Nyb2xsLnk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogbGVmdDAsXG4gICAgICAgIHRvcDogdG9wMCxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjYWxUQXJlYU9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgICAgbGVmdCwgd2lkdGgsIGhlaWdodCwgbCwgdCwgc2Nyb2xsLFxuICAgIH0gPSBvZmZzZXQ7XG4gICAgY29uc3QgZnR3aWR0aCA9IGRhdGEuZnJlZXplVG90YWxXaWR0aCgpO1xuICAgIGxldCBsZWZ0MCA9IGxlZnQgLSBmdHdpZHRoO1xuICAgIGlmIChmdHdpZHRoID4gbCkgbGVmdDAgLT0gc2Nyb2xsLng7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogbGVmdDAsIHRvcDogdCwgd2lkdGgsIGhlaWdodCxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjYWxMQXJlYU9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgICAgdG9wLCB3aWR0aCwgaGVpZ2h0LCBsLCB0LCBzY3JvbGwsXG4gICAgfSA9IG9mZnNldDtcbiAgICBjb25zdCBmdGhlaWdodCA9IGRhdGEuZnJlZXplVG90YWxIZWlnaHQoKTtcbiAgICBsZXQgdG9wMCA9IHRvcCAtIGZ0aGVpZ2h0O1xuICAgIC8vIGNvbnNvbGUubG9nKCdmdGhlaWdodDonLCBmdGhlaWdodCwgJywgdDonLCB0KTtcbiAgICBpZiAoZnRoZWlnaHQgPiB0KSB0b3AwIC09IHNjcm9sbC55O1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGwsIHRvcDogdG9wMCwgd2lkdGgsIGhlaWdodCxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzZXRCUkFyZWFPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge2JyfSA9IHRoaXM7XG4gICAgYnIuc2V0QXJlYU9mZnNldChjYWxCUkFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbn1cblxuZnVuY3Rpb24gc2V0VExBcmVhT2Zmc2V0KG9mZnNldCkge1xuICAgIGNvbnN0IHt0bH0gPSB0aGlzO1xuICAgIHRsLnNldEFyZWFPZmZzZXQob2Zmc2V0KTtcbn1cblxuZnVuY3Rpb24gc2V0VEFyZWFPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge3R9ID0gdGhpcztcbiAgICB0LnNldEFyZWFPZmZzZXQoY2FsVEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbn1cblxuZnVuY3Rpb24gc2V0TEFyZWFPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge2x9ID0gdGhpcztcbiAgICBsLnNldEFyZWFPZmZzZXQoY2FsTEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbn1cblxuZnVuY3Rpb24gc2V0TENsaXBib2FyZE9mZnNldChvZmZzZXQpIHtcbiAgICBjb25zdCB7bH0gPSB0aGlzO1xuICAgIGwuc2V0Q2xpcGJvYXJkT2Zmc2V0KGNhbExBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KSk7XG59XG5cbmZ1bmN0aW9uIHNldEJSQ2xpcGJvYXJkT2Zmc2V0KG9mZnNldCkge1xuICAgIGNvbnN0IHticn0gPSB0aGlzO1xuICAgIGJyLnNldENsaXBib2FyZE9mZnNldChjYWxCUkFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbn1cblxuZnVuY3Rpb24gc2V0VExDbGlwYm9hcmRPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge3RsfSA9IHRoaXM7XG4gICAgdGwuc2V0Q2xpcGJvYXJkT2Zmc2V0KG9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIHNldFRDbGlwYm9hcmRPZmZzZXQob2Zmc2V0KSB7XG4gICAgY29uc3Qge3R9ID0gdGhpcztcbiAgICB0LnNldENsaXBib2FyZE9mZnNldChjYWxUQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xufVxuXG5mdW5jdGlvbiBzZXRBbGxBcmVhT2Zmc2V0KG9mZnNldCkge1xuICAgIHNldEJSQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgc2V0VExBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICBzZXRUQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgc2V0TEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBzZXRBbGxDbGlwYm9hcmRPZmZzZXQob2Zmc2V0KSB7XG4gICAgc2V0QlJDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgIHNldFRMQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICBzZXRUQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICBzZXRMQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0b3JDb3B5IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBzaGVldCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgICB0aGlzLmJyID0gbmV3IFNlbGVjdG9yRWxlbWVudChkYXRhLCB0aGlzLCBzaGVldCk7XG4gICAgICAgIHRoaXMudCA9IG5ldyBTZWxlY3RvckVsZW1lbnQoZGF0YSwgdGhpcywgc2hlZXQpO1xuICAgICAgICB0aGlzLmwgPSBuZXcgU2VsZWN0b3JFbGVtZW50KGRhdGEsIHRoaXMsIHNoZWV0KTtcbiAgICAgICAgdGhpcy50bCA9IG5ldyBTZWxlY3RvckVsZW1lbnQoZGF0YSwgdGhpcywgc2hlZXQpO1xuICAgICAgICB0aGlzLmJyLmVsLnNob3coKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmFyZWFPZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmluZGV4ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnJhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hcmFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLmVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1zZWxlY3RvcnNgKVxuICAgICAgICAgICAgLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgIHRoaXMudGwuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy50LmVsLFxuICAgICAgICAgICAgICAgIHRoaXMubC5lbCxcbiAgICAgICAgICAgICAgICB0aGlzLmJyLmVsLFxuICAgICAgICAgICAgKS5oaWRlKCk7XG5cbiAgICAgICAgLy8gZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHRoaXMubGFzdHJpID0gLTE7XG4gICAgICAgIHRoaXMubGFzdGNpID0gLTE7XG5cbiAgICAgICAgc3RhcnRaSW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICBzZXRDc3MoYiwga2V5ID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmJyLnNldENzcyhiLCBrZXkpO1xuICAgICAgICB0aGlzLnQuc2V0Q3NzKGIsIGtleSk7XG4gICAgICAgIHRoaXMubC5zZXRDc3MoYiwga2V5KTtcbiAgICAgICAgdGhpcy50bC5zZXRDc3MoYiwga2V5KTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmVsLmhpZGUoKTtcbiAgICB9XG5cbiAgICByZXNldE9mZnNldCgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZGF0YSwgdGwsIHQsIGwsIGJyLFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZnJlZXplSGVpZ2h0ID0gZGF0YS5mcmVlemVUb3RhbEhlaWdodCgpO1xuICAgICAgICBjb25zdCBmcmVlemVXaWR0aCA9IGRhdGEuZnJlZXplVG90YWxXaWR0aCgpO1xuICAgICAgICBpZiAoZnJlZXplSGVpZ2h0ID4gMCB8fCBmcmVlemVXaWR0aCA+IDApIHtcbiAgICAgICAgICAgIHRsLnNldE9mZnNldCh7d2lkdGg6IGZyZWV6ZVdpZHRoLCBoZWlnaHQ6IGZyZWV6ZUhlaWdodH0pO1xuICAgICAgICAgICAgdC5zZXRPZmZzZXQoe2xlZnQ6IGZyZWV6ZVdpZHRoLCBoZWlnaHQ6IGZyZWV6ZUhlaWdodH0pO1xuICAgICAgICAgICAgbC5zZXRPZmZzZXQoe3RvcDogZnJlZXplSGVpZ2h0LCB3aWR0aDogZnJlZXplV2lkdGh9KTtcbiAgICAgICAgICAgIGJyLnNldE9mZnNldCh7bGVmdDogZnJlZXplV2lkdGgsIHRvcDogZnJlZXplSGVpZ2h0fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0bC5oaWRlKCk7XG4gICAgICAgICAgICB0LmhpZGUoKTtcbiAgICAgICAgICAgIGwuaGlkZSgpO1xuICAgICAgICAgICAgYnIuc2V0T2Zmc2V0KHtsZWZ0OiAwLCB0b3A6IDB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0QXJlYU9mZnNldCgpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29mZnNldDonLCBvZmZzZXQpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0U2VsZWN0ZWRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGNvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0Q2xpcGJvYXJkUmVjdCgpO1xuICAgICAgICBzZXRBbGxBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICAgICAgc2V0QWxsQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgY29mZnNldCk7XG4gICAgICAgIHRoaXMucmVzZXRPZmZzZXQoKTtcbiAgICB9XG5cbiAgICByZXNldEJSVEFyZWFPZmZzZXQoKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZGF0YS5nZXRTZWxlY3RlZFJlY3QoKTtcbiAgICAgICAgY29uc3QgY29mZnNldCA9IHRoaXMuZGF0YS5nZXRDbGlwYm9hcmRSZWN0KCk7XG4gICAgICAgIHNldEJSQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgICAgIHNldFRBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICAgICAgc2V0QlJDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcbiAgICAgICAgc2V0VENsaXBib2FyZE9mZnNldC5jYWxsKHRoaXMsIGNvZmZzZXQpO1xuICAgICAgICB0aGlzLnJlc2V0T2Zmc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXRTZWxlY3RvckJSTEFyZWFPZmZzZXQocmFuZ2UpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5kYXRhLmdldE1vdmVSZWN0KHJhbmdlKTtcbiAgICAgICAgY29uc3QgY29mZnNldCA9IHRoaXMuZGF0YS5nZXRDbGlwYm9hcmRSZWN0KCk7XG4gICAgICAgIHNldEJSQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgICAgIHNldExBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KTtcbiAgICAgICAgc2V0QlJDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcbiAgICAgICAgc2V0TENsaXBib2FyZE9mZnNldC5jYWxsKHRoaXMsIGNvZmZzZXQpO1xuICAgICAgICB0aGlzLnJlc2V0T2Zmc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXRCUkxBcmVhT2Zmc2V0KCkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0U2VsZWN0ZWRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGNvZmZzZXQgPSB0aGlzLmRhdGEuZ2V0Q2xpcGJvYXJkUmVjdCgpO1xuICAgICAgICBzZXRCUkFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpO1xuICAgICAgICBzZXRMQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCk7XG4gICAgICAgIHNldEJSQ2xpcGJvYXJkT2Zmc2V0LmNhbGwodGhpcywgY29mZnNldCk7XG4gICAgICAgIHNldExDbGlwYm9hcmRPZmZzZXQuY2FsbCh0aGlzLCBjb2Zmc2V0KTtcbiAgICAgICAgdGhpcy5yZXNldE9mZnNldCgpO1xuICAgIH1cblxuICAgIHNldChyaSwgY2ksIGluZGV4ZXNVcGRhdGVkID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB7ZGF0YX0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjZWxsUmFuZ2UgPSBkYXRhLmNhbFNlbGVjdGVkUmFuZ2VCeVN0YXJ0KHJpLCBjaSk7XG4gICAgICAgIGNvbnN0IHtzcmksIHNjaX0gPSBjZWxsUmFuZ2U7XG4gICAgICAgIGlmIChpbmRleGVzVXBkYXRlZCkge1xuICAgICAgICAgICAgbGV0IFtjcmksIGNjaV0gPSBbcmksIGNpXTtcbiAgICAgICAgICAgIGlmIChyaSA8IDApIGNyaSA9IDA7XG4gICAgICAgICAgICBpZiAoY2kgPCAwKSBjY2kgPSAwO1xuICAgICAgICAgICAgZGF0YS5zZWxlY3Rvci5zZXRJbmRleGVzKGNyaSwgY2NpKTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlcyA9IFtjcmksIGNjaV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vdmVJbmRleGVzID0gW3NyaSwgc2NpXTtcbiAgICAgICAgLy8gdGhpcy5zSW5kZXhlcyA9IHNJbmRleGVzO1xuICAgICAgICAvLyB0aGlzLmVJbmRleGVzID0gZUluZGV4ZXM7XG4gICAgICAgIHRoaXMucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgIHRoaXMucmVzZXRBcmVhT2Zmc2V0KCk7XG4gICAgICAgIHRoaXMuZWwuc2hvdygpO1xuICAgIH1cblxuICAgIHNldE1vdmUocmVjdCkge1xuICAgICAgICBzZXRBbGxBcmVhT2Zmc2V0LmNhbGwodGhpcywgcmVjdCk7XG4gICAgfVxuXG4gICAgc2V0RW5kKHJpLCBjaSwgbW92aW5nID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB7ZGF0YSwgbGFzdHJpLCBsYXN0Y2l9ID0gdGhpcztcbiAgICAgICAgaWYgKG1vdmluZykge1xuICAgICAgICAgICAgaWYgKHJpID09PSBsYXN0cmkgJiYgY2kgPT09IGxhc3RjaSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5sYXN0cmkgPSByaTtcbiAgICAgICAgICAgIHRoaXMubGFzdGNpID0gY2k7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYW5nZSA9IGRhdGEuY2FsU2VsZWN0ZWRSYW5nZUJ5RW5kKHJpLCBjaSk7XG5cbiAgICAgICAgc2V0QWxsQXJlYU9mZnNldC5jYWxsKHRoaXMsIHRoaXMuZGF0YS5nZXRTZWxlY3RlZFJlY3QoKSk7XG5cbiAgICB9XG5cbiAgICBzZXRCb3hpbm5lcihwb2ludGVyKSB7XG4gICAgICAgIHRoaXMuYnIuc2V0Qm94aW5uZXIocG9pbnRlcik7XG4gICAgICAgIHRoaXMudC5zZXRCb3hpbm5lcihwb2ludGVyKTtcbiAgICAgICAgdGhpcy5sLnNldEJveGlubmVyKHBvaW50ZXIpO1xuICAgICAgICB0aGlzLnRsLnNldEJveGlubmVyKHBvaW50ZXIpO1xuICAgIH1cblxuICAgIC8vIHJlc2V0KCkge1xuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygnOjo6OicsIHRoaXMuZGF0YSk7XG4gICAgLy8gICAgIGNvbnN0IHtlcmksIGVjaX0gPSB0aGlzLmRhdGEuc2VsZWN0b3IucmFuZ2U7XG4gICAgLy8gICAgIHRoaXMuc2V0RW5kKGVyaSwgZWNpKTtcbiAgICAvLyB9XG5cbiAgICBzaG93QXV0b2ZpbGwocmksIGNpKSB7XG4gICAgICAgIGlmIChyaSA9PT0gLTEgJiYgY2kgPT09IC0xKSByZXR1cm47XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdyaTonLCByaSwgJywgY2k6JywgY2kpO1xuICAgICAgICAvLyBjb25zdCBbc3JpLCBzY2ldID0gdGhpcy5zSW5kZXhlcztcbiAgICAgICAgLy8gY29uc3QgW2VyaSwgZWNpXSA9IHRoaXMuZUluZGV4ZXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNyaSwgc2NpLCBlcmksIGVjaSxcbiAgICAgICAgfSA9IHRoaXMucmFuZ2U7XG4gICAgICAgIGNvbnN0IFtucmksIG5jaV0gPSBbcmksIGNpXTtcbiAgICAgICAgLy8gY29uc3Qgcm4gPSBlcmkgLSBzcmk7XG4gICAgICAgIC8vIGNvbnN0IGNuID0gZWNpIC0gc2NpO1xuICAgICAgICBjb25zdCBzcm4gPSBzcmkgLSByaTtcbiAgICAgICAgY29uc3Qgc2NuID0gc2NpIC0gY2k7XG4gICAgICAgIGNvbnN0IGVybiA9IGVyaSAtIHJpO1xuICAgICAgICBjb25zdCBlY24gPSBlY2kgLSBjaTtcbiAgICAgICAgaWYgKHNjbiA+IDApIHtcbiAgICAgICAgICAgIC8vIGxlZnRcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWZ0Jyk7XG4gICAgICAgICAgICB0aGlzLmFyYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBuY2ksIGVyaSwgc2NpIC0gMSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNhSW5kZXhlcyA9IFtzcmksIG5jaV07XG4gICAgICAgICAgICAvLyB0aGlzLmVhSW5kZXhlcyA9IFtlcmksIHNjaSAtIDFdO1xuICAgICAgICAgICAgLy8gZGF0YS5jYWxSYW5nZUluZGV4ZXMyKFxuICAgICAgICB9IGVsc2UgaWYgKHNybiA+IDApIHtcbiAgICAgICAgICAgIC8vIHRvcFxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3RvcCcpO1xuICAgICAgICAgICAgLy8gbnJpID0gc3JpO1xuICAgICAgICAgICAgdGhpcy5hcmFuZ2UgPSBuZXcgQ2VsbFJhbmdlKG5yaSwgc2NpLCBzcmkgLSAxLCBlY2kpO1xuICAgICAgICAgICAgLy8gdGhpcy5zYUluZGV4ZXMgPSBbbnJpLCBzY2ldO1xuICAgICAgICAgICAgLy8gdGhpcy5lYUluZGV4ZXMgPSBbc3JpIC0gMSwgZWNpXTtcbiAgICAgICAgfSBlbHNlIGlmIChlY24gPCAwKSB7XG4gICAgICAgICAgICAvLyByaWdodFxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JpZ2h0Jyk7XG4gICAgICAgICAgICAvLyBuY2kgPSBlY2k7XG4gICAgICAgICAgICB0aGlzLmFyYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBlY2kgKyAxLCBlcmksIG5jaSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNhSW5kZXhlcyA9IFtzcmksIGVjaSArIDFdO1xuICAgICAgICAgICAgLy8gdGhpcy5lYUluZGV4ZXMgPSBbZXJpLCBuY2ldO1xuICAgICAgICB9IGVsc2UgaWYgKGVybiA8IDApIHtcbiAgICAgICAgICAgIC8vIGJvdHRvbVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2JvdHRvbScpO1xuICAgICAgICAgICAgLy8gbnJpID0gZXJpO1xuICAgICAgICAgICAgdGhpcy5hcmFuZ2UgPSBuZXcgQ2VsbFJhbmdlKGVyaSArIDEsIHNjaSwgbnJpLCBlY2kpO1xuICAgICAgICAgICAgLy8gdGhpcy5zYUluZGV4ZXMgPSBbZXJpICsgMSwgc2NpXTtcbiAgICAgICAgICAgIC8vIHRoaXMuZWFJbmRleGVzID0gW25yaSwgZWNpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdlbHNlOicpO1xuICAgICAgICAgICAgdGhpcy5hcmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgLy8gdGhpcy5zYUluZGV4ZXMgPSBudWxsO1xuICAgICAgICAgICAgLy8gdGhpcy5lYUluZGV4ZXMgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFyYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zYUluZGV4ZXMsICc6JywgdGhpcy5lYUluZGV4ZXMpO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5kYXRhLmdldFJlY3QodGhpcy5hcmFuZ2UpO1xuICAgICAgICAgICAgb2Zmc2V0LndpZHRoICs9IDI7XG4gICAgICAgICAgICBvZmZzZXQuaGVpZ2h0ICs9IDI7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgYnIsIGwsIHQsIHRsLFxuICAgICAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgICAgICBici5zaG93QXV0b2ZpbGwoY2FsQlJBcmVhT2Zmc2V0LmNhbGwodGhpcywgb2Zmc2V0KSk7XG4gICAgICAgICAgICBsLnNob3dBdXRvZmlsbChjYWxMQXJlYU9mZnNldC5jYWxsKHRoaXMsIG9mZnNldCkpO1xuICAgICAgICAgICAgdC5zaG93QXV0b2ZpbGwoY2FsVEFyZWFPZmZzZXQuY2FsbCh0aGlzLCBvZmZzZXQpKTtcbiAgICAgICAgICAgIHRsLnNob3dBdXRvZmlsbChvZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZUF1dG9maWxsKCkge1xuICAgICAgICBbJ2JyJywgJ2wnLCAndCcsICd0bCddLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgICB0aGlzW3Byb3BlcnR5XS5oaWRlQXV0b2ZpbGwoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvd0NsaXBib2FyZCgpIHtcbiAgICAgICAgY29uc3QgY29mZnNldCA9IHRoaXMuZGF0YS5nZXRDbGlwYm9hcmRSZWN0KCk7XG4gICAgICAgIHNldEFsbENsaXBib2FyZE9mZnNldC5jYWxsKHRoaXMsIGNvZmZzZXQpO1xuICAgICAgICBbJ2JyJywgJ2wnLCAndCcsICd0bCddLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgICB0aGlzW3Byb3BlcnR5XS5zaG93Q2xpcGJvYXJkKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhpZGVDbGlwYm9hcmQoKSB7XG4gICAgICAgIFsnYnInLCAnbCcsICd0JywgJ3RsJ10uZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgIHRoaXNbcHJvcGVydHldLmhpZGVDbGlwYm9hcmQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtofSBmcm9tIFwiLi9lbGVtZW50XCI7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtjdXR0aW5nQnlQb3MsIGN1dHRpbmdCeVBvc0VuZCwgaXNBYnNvbHV0ZVZhbHVlfSBmcm9tIFwiLi4vY29yZS9vcGVyYXRvclwiO1xuaW1wb3J0IHtleHByMnh5fSBmcm9tIFwiLi4vdXRpbHMvYWxwaGFiZXRcIjtcbmltcG9ydCB7bG9ja0NlbGxzfSBmcm9tIFwiLi9mb3JtdWxhX2VkaXRvclwiO1xuaW1wb3J0IHtDZWxsUmFuZ2V9IGZyb20gXCIuLi9jb3JlL2NlbGxfcmFuZ2VcIjtcbmltcG9ydCB7bW91c2VNb3ZlVXB9IGZyb20gXCIuL2V2ZW50XCI7XG5cbmZ1bmN0aW9uIGZpbmQoc3RyLCBjaGEpIHtcblxuICAgIHJldHVybiBzdHIubGFzdEluZGV4T2YoY2hhKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0b3JNb3ZlIHtcbiAgICBjb25zdHJ1Y3Rvcihib3hpbm5lciwgZGF0YSwgc2hlZXQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMubCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LWwtbW92ZS1sYCk7XG4gICAgICAgIHRoaXMuciA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LWwtbW92ZS1yYCk7XG4gICAgICAgIHRoaXMudCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LWwtbW92ZS10YCk7XG4gICAgICAgIHRoaXMuYiA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc2VsZWN0b3ItYm94LWwtbW92ZS1iYCk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgICAgICB0aGlzLmV2ZW50KHRoaXMubCwgMSk7XG4gICAgICAgIHRoaXMuZXZlbnQodGhpcy5yLCAyKTtcbiAgICAgICAgdGhpcy5ldmVudCh0aGlzLnQsIDMpO1xuICAgICAgICB0aGlzLmV2ZW50KHRoaXMuYiwgNCk7XG4gICAgICAgIHRoaXMuYm94aW5uZXIgPSBib3hpbm5lcjtcbiAgICAgICAgdGhpcy5ib3hpbm5lci5jaGlsZHJlbihcbiAgICAgICAgICAgIHRoaXMubCxcbiAgICAgICAgICAgIHRoaXMucixcbiAgICAgICAgICAgIHRoaXMudCxcbiAgICAgICAgICAgIHRoaXMuYixcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBldmVudCh0YXJnZXQsIGRpY3QpIHtcbiAgICAgICAgbGV0IHRpbWVyID0gbnVsbDtcbiAgICAgICAgdGFyZ2V0Lm9uKCdtb3VzZWRvd24uc3RvcCcsIGV2dCA9PiB7XG4gICAgICAgICAgICBsZXQge2RhdGEsIHNoZWV0LCBfc2VsZWN0b3J9ID0gdGhpcztcbiAgICAgICAgICAgIGxldCBwID0gLTE7XG4gICAgICAgICAgICBsZXQge3NlbGVjdG9yfSA9IGRhdGE7XG4gICAgICAgICAgICBsZXQgX21vdmVfc2VsZWN0b3JzID0gbnVsbDtcbiAgICAgICAgICAgIGxldCB7c3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBofSA9IHNlbGVjdG9yLnJhbmdlO1xuICAgICAgICAgICAgbGV0IGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2Uoc3JpLCBzY2ksIGVyaSwgZWNpLCB3LCBoKTtcbiAgICAgICAgICAgIGxldCBfY2VsbFJhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIGxldCB7c2VsZWN0b3JzfSA9IHNoZWV0O1xuICAgICAgICAgICAgbGV0IG1zcmkgPSAtMSwgbXNjaSA9IC0xLCBtZXJpID0gLTEsIG1lY2kgPSAtMTtcblxuICAgICAgICAgICAgbW91c2VNb3ZlVXAod2luZG93LCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuY29udGFpbmVyLmNzcygncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGVjdG9yID0gc2VsZWN0b3JzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3Iuc2VsZWN0b3Iuc2V0Qm94aW5uZXIoXCJub25lXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHtyaSwgY2l9ID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFkoZS5sYXllclgsIGUubGF5ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJpICE9PSAtMSAmJiBjaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7cG9zfSA9IHRoaXMuc2hlZXQuZWRpdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0VGV4dCA9IHRoaXMuc2hlZXQuZWRpdG9yLmVkaXRvclRleHQuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IF9lcnB4ID0gY3V0dGluZ0J5UG9zKGlucHV0VGV4dCwgcG9zIC0gMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRUZXh0Lmxlbmd0aCA+IHBvcyAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZXJweCArPSBjdXR0aW5nQnlQb3NFbmQoaW5wdXRUZXh0LCBwb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGVjdG9yID0gc2VsZWN0b3JzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7Y2xhc3NOYW1lLCBlcnB4fSA9IHNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycHggPT09IF9lcnB4ICYmIGNsYXNzTmFtZSA9PT0gX3NlbGVjdG9yLmNsYXNzTmFtZSArIFwiIGNsZWFyX3NlbGVjdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVfc2VsZWN0b3JzID0gX21vdmVfc2VsZWN0b3JzID8gX21vdmVfc2VsZWN0b3JzIDogc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnB4LnNlYXJjaCgvXltBLVphLXpdK1xcZCs6W0EtWmEtel0rXFxkKyQvKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcnIgPSBlcnB4LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMSA9IGV4cHIyeHkoYXJyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMiA9IGV4cHIyeHkoYXJyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2UoZTFbMV0sIGUxWzBdLCBlMlsxXSwgZTJbMF0sIHcsIGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJhbmdlLm1vdmUocmksIGNpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBkYXRhLmdldE1vdmVSZWN0KGNlbGxSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3IucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5zZXQocmksIGNpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycHggIT09IF9lcnB4ICYmIGNsYXNzTmFtZSA9PT0gX3NlbGVjdG9yLmNsYXNzTmFtZSArIFwiIGNsZWFyX3NlbGVjdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHAgIT09IC0xID8gcCA6IGZpbmQoaW5wdXRUZXh0LCBzZWxlY3Rvci5lcnB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGVldC5lZGl0b3Iuc2V0Q3Vyc29yUG9zKHAgKyBzZWxlY3Rvci5lcnB4Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycyA9IF9tb3ZlX3NlbGVjdG9ycyA/IF9tb3ZlX3NlbGVjdG9ycyA6IHNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5lcnB4LnNlYXJjaCgvXltBLVphLXpdK1xcZCs6W0EtWmEtel0rXFxkKyQvKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcnIgPSBlcnB4LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMSA9IGV4cHIyeHkoYXJyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMiA9IGV4cHIyeHkoYXJyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSYW5nZSA9IG5ldyBDZWxsUmFuZ2UoZTFbMV0sIGUxWzBdLCBlMlsxXSwgZTJbMF0sIHcsIGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jZWxsUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2VsbFJhbmdlID0gY2VsbFJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY3QgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IGRhdGEuZ2V0Q2VsbFJlY3RCeVhZKGUubGF5ZXJYLCBlLmxheWVyWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJhbmdlLm1vdmUyKGUxWzFdLCBlMVswXSwgYXJncy5yaSwgYXJncy5jaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGRhdGEuZ2V0TW92ZVJlY3QoY2VsbFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3IucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVfc2VsZWN0b3JzLnNlbGVjdG9yLnNldE1vdmUocmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpY3QgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IGRhdGEuZ2V0Q2VsbFJlY3RCeVhZKGUubGF5ZXJYLCBlLmxheWVyWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJhbmdlLm1vdmUyKGUxWzFdLCBhcmdzLmNpLCBhcmdzLnJpLCBlMlswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY2VsbFJhbmdlLCBfY2VsbFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGljdCA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcmdzID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFkoZS5sYXllclgsIGUubGF5ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmFuZ2UubW92ZTIoYXJncy5yaSwgYXJncy5jaSwgZTJbMV0sIGUyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGljdCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcmdzID0gZGF0YS5nZXRDZWxsUmVjdEJ5WFkoZS5sYXllclgsIGUubGF5ZXJZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmFuZ2UubW92ZTIoYXJncy5yaSwgZTFbMF0sIGUyWzFdLCBhcmdzLmNpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlMSA9IGV4cHIyeHkoc2VsZWN0b3IuZXJweCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZTIgPSBleHByMnh5KHNlbGVjdG9yLmVycHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSBkYXRhLmdldENlbGxSZWN0QnlYWShlLmxheWVyWCwgZS5sYXllclkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY3QgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmFuZ2UubW92ZTIoZTFbMV0sIGUxWzBdLCBhcmdzLnJpLCBhcmdzLmNpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGljdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSYW5nZS5tb3ZlMihlMVsxXSwgYXJncy5jaSwgYXJncy5yaSwgZTJbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBkYXRhLmdldE1vdmVSZWN0KGNlbGxSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVfc2VsZWN0b3JzLnNlbGVjdG9yLnJhbmdlID0gY2VsbFJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5zZXRNb3ZlKHJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaWN0ID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJhbmdlLm1vdmUyKGFyZ3MucmksIGFyZ3MuY2ksIGUyWzFdLCBlMlswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGRhdGEuZ2V0TW92ZVJlY3QoY2VsbFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3IucmFuZ2UgPSBjZWxsUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVfc2VsZWN0b3JzLnNlbGVjdG9yLnNldE1vdmUocmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpY3QgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmFuZ2UubW92ZTIoYXJncy5yaSwgZTFbMF0sIGUyWzFdLCBhcmdzLmNpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZGF0YS5nZXRNb3ZlUmVjdChjZWxsUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5yYW5nZSA9IGNlbGxSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0TW92ZShyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbW92ZV9zZWxlY3RvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAobXNyaSAhPT0gY2VsbFJhbmdlLnNyaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBtc2NpICE9PSBjZWxsUmFuZ2Uuc2NpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IG1lcmkgIT09IGNlbGxSYW5nZS5lcmlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgbWVjaSAhPT0gY2VsbFJhbmdlLmVjaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3Iuc2V0Q3NzKF9tb3ZlX3NlbGVjdG9ycy5jb2xvciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2tDZWxscy5jYWxsKHRoaXMuc2hlZXQsIGV2dCwgX21vdmVfc2VsZWN0b3JzLCBpc0Fic29sdXRlVmFsdWUoX21vdmVfc2VsZWN0b3JzLmVycHgpLCBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1zcmkgPSBjZWxsUmFuZ2Uuc3JpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNjaSA9IGNlbGxSYW5nZS5zY2k7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJpID0gY2VsbFJhbmdlLmVyaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lY2kgPSBjZWxsUmFuZ2UuZWNpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNik7XG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICBsZXQge3NlbGVjdG9yc30gPSB0aGlzLnNoZWV0O1xuICAgICAgICAgICAgICAgIHNoZWV0LmNvbnRhaW5lci5jc3MoJ3BvaW50ZXItZXZlbnRzJywgJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0b3IgPSBzZWxlY3RvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnNlbGVjdG9yLnNldEJveGlubmVyKFwiYWxsXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwID0gLTE7XG4gICAgICAgICAgICAgICAgaWYgKF9tb3ZlX3NlbGVjdG9ycyAmJiBfbW92ZV9zZWxlY3RvcnMuc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgICAgIF9tb3ZlX3NlbGVjdG9ycy5zZWxlY3Rvci5zZXRDc3MoX21vdmVfc2VsZWN0b3JzLmNvbG9yLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBfbW92ZV9zZWxlY3RvcnMgPSBudWxsO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtjdXR0aW5nQnlQb3MsIGN1dHRpbmdCeVBvc0VuZDIsIGlzQWJzb2x1dGVWYWx1ZSwgdmFsdWUyYWJzb2x1dGV9IGZyb20gXCIuLi9jb3JlL29wZXJhdG9yXCI7XG5pbXBvcnQge3RvVXBwZXJDYXNlfSBmcm9tIFwiLi4vY29tcG9uZW50L3RhYmxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvclRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlucHV0VGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMub2xkQ2VsbCA9IFwiXCI7XG4gICAgICAgIHRoaXMucmkgPSAtMTtcbiAgICAgICAgdGhpcy5jaSA9IC0xO1xuICAgIH1cblxuICAgIHNldFRleHQodGV4dCkge1xuICAgICAgICB0aGlzLmlucHV0VGV4dCA9IHRleHQ7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRleHQoKTtcbiAgICB9XG5cbiAgICBnZXRUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dFRleHQ7XG4gICAgfVxuXG4gICAgc2V0T2xkQ2VsbChvbGRDZWxsLCB7cmkgPSAtMSwgY2kgPSAtMX0gPSAtMSkge1xuICAgICAgICB0aGlzLm9sZENlbGwgPSBvbGRDZWxsO1xuICAgICAgICB0aGlzLnJpID0gcmk7XG4gICAgICAgIHRoaXMuY2kgPSBjaTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2xkQ2VsbCgpO1xuICAgIH1cblxuICAgIC8vIHNldFJJQ0kocmksIGNpKSB7XG4gICAgLy8gICAgdGhpcy5yaSA9IHJpO1xuICAgIC8vICAgICB0aGlzLmNpID0gY2k7XG4gICAgLy8gfVxuXG4gICAgZ2V0T2xkQ2VsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2xkQ2VsbDtcbiAgICB9XG5cbiAgICBnZXRSSUNJKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJyaVwiOiB0aGlzLnJpLFxuICAgICAgICAgICAgXCJjaVwiOiB0aGlzLmNpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNoYW5nZVRleHQodHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRUZXh0KHRoaXMuZ2V0VGV4dCgpLnJlcGxhY2UoL++8jC9nLCAnLCcpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzRm9ybXVsYSgpIHtcbiAgICAgICAgbGV0IGlucHV0VGV4dCA9IHRoaXMuZ2V0VGV4dCgpO1xuXG4gICAgICAgIHJldHVybiBpbnB1dFRleHQubGFzdEluZGV4T2YoXCI9XCIpID09PSAwO1xuICAgIH1cblxuICAgIGY0U2hvcnRjdXRLZXkocG9zKSB7XG4gICAgICAgIGxldCBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQodG9VcHBlckNhc2UodGhpcy5pbnB1dFRleHQpKTtcbiAgICAgICAgbGV0IHZhbHVlID0gY3V0dGluZ0J5UG9zKGlucHV0VGV4dCwgcG9zLCB0cnVlKTtcbiAgICAgICAgbGV0IHZhbHVlMiA9IGN1dHRpbmdCeVBvc0VuZDIoaW5wdXRUZXh0LCBwb3MgKyAxKTtcbiAgICAgICAgY29uc29sZS5sb2codmFsdWUyKTtcbiAgICAgICAgbGV0IHR5cGUgPSBpc0Fic29sdXRlVmFsdWUodmFsdWUsIDUpO1xuICAgICAgICBsZXQgZCA9IFwiXCI7XG4gICAgICAgIGxldCBuID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgdHlwZSA9IGlzQWJzb2x1dGVWYWx1ZShuLCA1KTtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlID09PSAzID8gNiA6IHR5cGU7XG4gICAgICAgICAgICB0eXBlID0gdHlwZSA9PT0gMTIgPyA5IDogdHlwZTtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlID09PSAxID8gNyA6IHR5cGU7XG4gICAgICAgICAgICB0eXBlID0gdHlwZSA9PT0gMiA/IDggOiB0eXBlO1xuICAgICAgICAgICAgY29uc29sZS5sb2codHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIG4gPSB2YWx1ZS5zcGxpdChcIjpcIilbMV07XG4gICAgICAgICAgICAgICAgICAgIGQgPSB2YWx1ZTJhYnNvbHV0ZShuLnJlcGxhY2UoL1xcJC9nLCBcIlwiKSkuczE7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0X2IgPSBpbnB1dFRleHQuc3Vic3RyaW5nKDAsIGlucHV0VGV4dC5sYXN0SW5kZXhPZihuKSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VGV4dCA9IHRoaXMuc2V0VGV4dCh0ZXh0X2IgKyBkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkID0gdmFsdWUyYWJzb2x1dGUobi5yZXBsYWNlKC9cXCQvZywgXCJcIikpLnMzO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZTJhYnNvbHV0ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQoaW5wdXRUZXh0LnN1YnN0cmluZygwLCBpbnB1dFRleHQubGFzdEluZGV4T2YobikpICsgZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0VGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBuID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdO1xuICAgICAgICAgICAgICAgICAgICBkID0gdmFsdWUyYWJzb2x1dGUobi5yZXBsYWNlKC9cXCQvZywgXCJcIikpLnMzO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQoaW5wdXRUZXh0LnN1YnN0cmluZygwLCBpbnB1dFRleHQubGFzdEluZGV4T2YobikpICsgZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgbiA9IHZhbHVlLnNwbGl0KFwiOlwiKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgZCA9IHZhbHVlMmFic29sdXRlKG4ucmVwbGFjZSgvXFwkL2csIFwiXCIpKS5zMjtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUZXh0ID0gdGhpcy5zZXRUZXh0KGlucHV0VGV4dC5zdWJzdHJpbmcoMCwgaW5wdXRUZXh0Lmxhc3RJbmRleE9mKG4pKSArIGQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG4gPSB2YWx1ZS5zcGxpdChcIjpcIilbMV07XG4gICAgICAgICAgICAgICAgICAgIGQgPSBuLnJlcGxhY2UoL1xcJC9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUZXh0ID0gdGhpcy5zZXRUZXh0KGlucHV0VGV4dC5zdWJzdHJpbmcoMCwgaW5wdXRUZXh0Lmxhc3RJbmRleE9mKG4pKSArIGQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG4gPSB2YWx1ZS5zcGxpdChcIjpcIilbMV07XG4gICAgICAgICAgICAgICAgICAgIGQgPSB2YWx1ZTJhYnNvbHV0ZShuLnJlcGxhY2UoL1xcJC9nLCBcIlwiKSkuczE7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VGV4dCA9IHRoaXMuc2V0VGV4dChpbnB1dFRleHQuc3Vic3RyaW5nKDAsIGlucHV0VGV4dC5sYXN0SW5kZXhPZihuKSkgKyBkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBuID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdO1xuICAgICAgICAgICAgICAgICAgICBkID0gdmFsdWUyYWJzb2x1dGUobi5yZXBsYWNlKC9cXCQvZywgXCJcIikpLnMyO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQoaW5wdXRUZXh0LnN1YnN0cmluZygwLCBpbnB1dFRleHQubGFzdEluZGV4T2YobikpICsgZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZCA9IHZhbHVlMmFic29sdXRlKHZhbHVlLnNwbGl0KFwiOlwiKVsxXS5yZXBsYWNlKC9cXCQvZywgXCJcIikpLnMxO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQoaW5wdXRUZXh0LnN1YnN0cmluZygwLCBpbnB1dFRleHQubGFzdEluZGV4T2YodmFsdWUpKSArIGQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGQgPSB2YWx1ZTJhYnNvbHV0ZSh2YWx1ZS5zcGxpdChcIjpcIilbMV0ucmVwbGFjZSgvXFwkL2csIFwiXCIpKS5zMjtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUZXh0ID0gdGhpcy5zZXRUZXh0KGlucHV0VGV4dC5zdWJzdHJpbmcoMCwgaW5wdXRUZXh0Lmxhc3RJbmRleE9mKHZhbHVlKSkgKyBkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBkID0gdmFsdWUyYWJzb2x1dGUodmFsdWUucmVwbGFjZSgvXFwkL2csIFwiXCIpKS5zMjtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUZXh0ID0gdGhpcy5zZXRUZXh0KGlucHV0VGV4dC5zdWJzdHJpbmcoMCwgaW5wdXRUZXh0Lmxhc3RJbmRleE9mKHZhbHVlKSkgKyBkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBkID0gdmFsdWUucmVwbGFjZSgvXFwkL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQoaW5wdXRUZXh0LnN1YnN0cmluZygwLCBpbnB1dFRleHQubGFzdEluZGV4T2YodmFsdWUpKSArIGQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGQgPSB2YWx1ZTJhYnNvbHV0ZSh2YWx1ZS5yZXBsYWNlKC9cXCQvZywgXCJcIikpLnMxO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQgPSB0aGlzLnNldFRleHQoaW5wdXRUZXh0LnN1YnN0cmluZygwLCBpbnB1dFRleHQubGFzdEluZGV4T2YodmFsdWUpKSArIGQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3UG9zID0gaW5wdXRUZXh0Lmxlbmd0aDtcbiAgICAgICAgaW5wdXRUZXh0ID0gdGhpcy5zZXRUZXh0KGlucHV0VGV4dCArIHZhbHVlMik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInBvc1wiOiBuZXdQb3MsXG4gICAgICAgICAgICBcImlucHV0VGV4dFwiOiBpbnB1dFRleHRcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2V4cHIyeHksIHh5MmV4cHJ9IGZyb20gJy4uL3V0aWxzL2FscGhhYmV0JztcbmltcG9ydCB7bG9vaywgbG9vazJ9IGZyb20gXCIuLi9jb25maWdcIjtcbi8vIGltcG9ydCBYTFNYX0NBTEMgZnJvbSBcInNvbHZlRXhwcmVzc2lvblwiXG4vLyB2YXIgZXhwcmVzc2lvbl9mbiA9IHJlcXVpcmUoJ2V4cHJlc3Npb25fZm4nKTtcbi8vIENvbnZlcnRpbmcgaW5maXggZXhwcmVzc2lvbiB0byBhIHN1ZmZpeCBleHByZXNzaW9uXG4vLyBzcmM6IEFWRVJBR0UoU1VNKEExLEEyKSwgQjEpICsgNTAgKyBCMjBcbi8vIHJldHVybjogW0ExLCBBMl0sIFNVTVssIEIxXSxBVkVSQUdFLDUwLCssQjIwLCtcbmNvbnN0IGluZml4RXhwclRvU3VmZml4RXhwciA9IChzcmMpID0+IHtcbiAgICBjb25zdCBvcGVyYXRvclN0YWNrID0gW107XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICBsZXQgc3ViU3RycyA9IFtdOyAvLyBTVU0sIEExLCBCMiwgNTAgLi4uXG4gICAgbGV0IGZuQXJnVHlwZSA9IDA7IC8vIDEgPT4gLCAyID0+IDpcbiAgICBsZXQgZm5BcmdzTGVuID0gMTsgLy8gQTEsQTIsQTMuLi5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNyYy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBjID0gc3JjLmNoYXJBdChpKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2M6JywgYyk7XG4gICAgICAgIGlmIChjICE9PSAnICcpIHtcbiAgICAgICAgICAgIGlmIChjID49ICdhJyAmJiBjIDw9ICd6Jykge1xuICAgICAgICAgICAgICAgIHN1YlN0cnMucHVzaChjLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoYyA+PSAnMCcgJiYgYyA8PSAnOScpIHx8IChjID49ICdBJyAmJiBjIDw9ICdaJykgfHwgYyA9PT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgc3ViU3Rycy5wdXNoKGMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzcmMuY2hhckF0KGkpICE9PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YlN0cnMucHVzaChzcmMuY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGBcIiR7c3ViU3Rycy5qb2luKCcnKX1gKTtcbiAgICAgICAgICAgICAgICBzdWJTdHJzID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdWJTdHJzOicsIHN1YlN0cnMuam9pbignJyksIHN0YWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoYyAhPT0gJygnICYmIHN1YlN0cnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN1YlN0cnMuam9pbignJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gJyknKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjMSA9IG9wZXJhdG9yU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbkFyZ1R5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZuIGFyZ3VtZW50IHJhbmdlID0+IEExOkI1XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtleCwgZXldID0gZXhwcjJ4eShzdGFjay5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3N4LCBzeV0gPSBleHByMnh5KHN0YWNrLnBvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnOjonLCBzeCwgc3ksIGV4LCBleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlbGVuID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gc3g7IHggPD0gZXg7IHggKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gc3k7IHkgPD0gZXk7IHkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh4eTJleHByKHgsIHkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlbGVuICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChbYzEsIHJhbmdlbGVuXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm5BcmdUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmbiBhcmd1bWVudCA9PiBBMSxBMixCNVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChbYzEsIGZuQXJnc0xlbl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm5BcmdzTGVuID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjMTonLCBjMSwgZm5BcmdUeXBlLCBzdGFjaywgb3BlcmF0b3JTdGFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYzEgIT09ICcoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRvclN0YWNrLmxlbmd0aCA8PSAwKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMSA9IG9wZXJhdG9yU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm5BcmdUeXBlID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc6Jykge1xuICAgICAgICAgICAgICAgICAgICBmbkFyZ1R5cGUgPSAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJywnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuQXJnVHlwZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGZuQXJnc0xlbiArPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJygnICYmIHN1YlN0cnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvclN0YWNrLnB1c2goc3ViU3Rycy5qb2luKCcnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJpb3JpdHk6ICovID4gKy1cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cob3BlcmF0b3JTdGFjaywgYywgc3RhY2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0b3JTdGFjay5sZW5ndGggPiAwICYmIChjID09PSAnKycgfHwgYyA9PT0gJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvcCA9IG9wZXJhdG9yU3RhY2tbb3BlcmF0b3JTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3AgIT09ICcoJykgc3RhY2sucHVzaChvcGVyYXRvclN0YWNrLnBvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3AgPT09ICcqJyB8fCB0b3AgPT09ICcvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcGVyYXRvclN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gb3BlcmF0b3JTdGFja1tvcGVyYXRvclN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9wICE9PSAnKCcpIHN0YWNrLnB1c2gob3BlcmF0b3JTdGFjay5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yU3RhY2sucHVzaChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3ViU3RycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdWJTdHJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3RhY2sucHVzaChzdWJTdHJzLmpvaW4oJycpKTtcbiAgICB9XG4gICAgd2hpbGUgKG9wZXJhdG9yU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICBzdGFjay5wdXNoKG9wZXJhdG9yU3RhY2sucG9wKCkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2s7XG59O1xuXG5jb25zdCBldmFsU3ViRXhwciA9IChzdWJFeHByLCBjZWxsUmVuZGVyKSA9PiB7XG4gICAgaWYgKCFzdWJFeHByKSB7XG4gICAgICAgIHN1YkV4cHIgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAoc3ViRXhwclswXSA+PSAnMCcgJiYgc3ViRXhwclswXSA8PSAnOScpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihzdWJFeHByKTtcbiAgICB9XG4gICAgaWYgKHN1YkV4cHJbMF0gPT09ICdcIicpIHtcbiAgICAgICAgcmV0dXJuIHN1YkV4cHIuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBjb25zdCBbeCwgeV0gPSBleHByMnh5KHN1YkV4cHIpO1xuICAgIHJldHVybiBjZWxsUmVuZGVyKHgsIHkpO1xufTtcblxuLy8gZXZhbHVhdGUgdGhlIHN1ZmZpeCBleHByZXNzaW9uXG4vLyBzcmNTdGFjazogPD0gaW5maXhFeHByVG9TdWZpeEV4cHJcbi8vIGZvcm11bGFNYXA6IHsnU1VNJzoge30sIC4uLn1cbi8vIGNlbGxSZW5kZXI6ICh4LCB5KSA9PiB7fVxuY29uc3QgZXZhbFN1ZmZpeEV4cHIgPSAoc3JjU3RhY2ssIGZvcm11bGFNYXAsIGNlbGxSZW5kZXIsIGNlbGxMaXN0KSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICAvLyBjb25zb2xlLmxvZygnOjo6Ojpmb3JtdWxhTWFwOicsIGZvcm11bGFNYXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjU3RhY2subGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJzo6Oj4+PicsIHNyY1N0YWNrW2ldKTtcbiAgICAgICAgaWYgKHNyY1N0YWNrW2ldID09PSAnKycpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChOdW1iZXIoc3RhY2sucG9wKCkpICsgTnVtYmVyKHRvcCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyY1N0YWNrW2ldID09PSAnLScpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChOdW1iZXIoc3RhY2sucG9wKCkpIC0gTnVtYmVyKHRvcCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyY1N0YWNrW2ldID09PSAnKicpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goTnVtYmVyKHN0YWNrLnBvcCgpKSAqIE51bWJlcihzdGFjay5wb3AoKSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyY1N0YWNrW2ldID09PSAnLycpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChOdW1iZXIoc3RhY2sucG9wKCkpIC8gTnVtYmVyKHRvcCkpO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc3JjU3RhY2tbaV0pKSB7XG4gICAgICAgICAgICBjb25zdCBbZm9ybXVsYSwgbGVuXSA9IHNyY1N0YWNrW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goc3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaChmb3JtdWxhTWFwW2Zvcm11bGFdLnJlbmRlcihwYXJhbXMucmV2ZXJzZSgpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2VsbExpc3QuaW5jbHVkZXMoc3JjU3RhY2tbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsTGlzdC5wdXNoKHNyY1N0YWNrW2ldKTtcbiAgICAgICAgICAgIGxldCBzID0gZXZhbFN1YkV4cHIoc3JjU3RhY2tbaV0sIGNlbGxSZW5kZXIpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChldmFsU3ViRXhwcihzcmNTdGFja1tpXSwgY2VsbFJlbmRlcikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdGFjazonLCBzdGFjayk7XG4gICAgfVxuICAgIHJldHVybiBzdGFja1swXTtcbn07XG5cbmZ1bmN0aW9uIGV2YWxGb3JtdWxhKHRleHQsIHJ1bGUpIHtcbiAgICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gaWYgKHRleHQudG9VcHBlckNhc2UoKS5pbmRleE9mKHJ1bGUudG9VcHBlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgLy8gICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyB9XG4gICAgcmV0dXJuIHRleHQudG9VcHBlckNhc2UoKS5pbmRleE9mKHJ1bGUudG9VcHBlckNhc2UoKSkgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbFJlbmRlcihkYXRhLCBzaGVldGJvb2ssIHksIHgsIHNyYywgZm9ybXVsYU1hcCwgZ2V0Q2VsbFRleHQsIGNlbGxMaXN0ID0gW10pe1xuICAgIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycgJiYgbG9vay5pbmRleE9mKHNyYy5zcGxpdChcIiFcIilbMF0pICE9PSAtMSkge1xuICAgICAgICBsZXQgbGVuID0gc3JjLmxlbmd0aDtcbiAgICAgICAgaWYoc3JjLnNwbGl0KFwiIFwiKVswXSkge1xuICAgICAgICAgICAgbGVuID0gc3JjLnNwbGl0KFwiIFwiKVswXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGEgPSBKU09OLnBhcnNlKHNyYy5zdWJzdHJpbmcoc3JjLmluZGV4T2YoXCIhXCIpICsgMSwgbGVuKSk7XG4gICAgICAgIGxldCBzID0gbG9vay5pbmRleE9mKHNyYy5zcGxpdChcIiFcIilbMF0pO1xuXG4gICAgICAgIGlmIChzID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYS50ZXh0O1xuICAgICAgICB9IGVsc2UgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChhICYmIGFbMF0pIHtcbiAgICAgICAgICAgICAgICBsZXQge25hbWUsIHZhbHVlfSA9IGFbMF07XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDAgJiYgYVsxXSAmJiBhWzFdLnZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDAgJiYgIWFbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvb2syO1xuICAgIH1cblxuICAgIGlmIChzcmNbMF0gPT09ICc9JyAmJiBzcmNbMV0gIT09ICc9Jykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIjE1NlwiLCBzaGVldGJvb2suU2hlZXRzLlNoZWV0MVt4eTJleHByKHgsIHkpXSwgeHkyZXhwcih4LCB5KSlcbiAgICAgICAgaWYgKGV2YWxGb3JtdWxhKHNyYy5zdWJzdHJpbmcoMSksIFwid2xhbmRcIikgfHwgZXZhbEZvcm11bGEoc3JjLnN1YnN0cmluZygxKSwgXCJ3ZnJcIikgfHwgZXZhbEZvcm11bGEoc3JjLnN1YnN0cmluZygxKSwgXCJydGRcIilcbiAgICAgICAgICAgIHx8IGV2YWxGb3JtdWxhKHNyYy5zdWJzdHJpbmcoMSksIFwiY2l0eVwiKSkge1xuICAgICAgICAgICAgLy8gbGV0IHtkYXRlX2Zvcm11bGF9ID0gZGF0YS5zZXR0aW5nczs9TUQuUlREKFwic2luYVwiLCBcIjE2MjQxMVwiLCBcIm5vd1wiKVxuICAgICAgICAgICAgLy8gZGF0ZV9mb3JtdWxhLndsYW5kKGRhdGVfZm9ybXVsYSwgZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gc3JjLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3JjLnN1YnN0cmluZygxKSAmJiBzaGVldGJvb2sgJiYgc2hlZXRib29rLlNoZWV0cyAmJiBzaGVldGJvb2suU2hlZXRzW2RhdGEubmFtZV0gJiYgc2hlZXRib29rLlNoZWV0c1tkYXRhLm5hbWVdW3h5MmV4cHIoeCwgeSldKSB7XG4gICAgICAgICAgICAvLyBzaGVldGJvb2suU2hlZXRzLlNoZWV0MVt4eTJleHByKHgsIHkpXS5mID0gc3JjLnN1YnN0cmluZygxKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgLy8gWExTWF9DQUxDLmltcG9ydF9mdW5jdGlvbnMoZXhwcmVzc2lvbl9mbik7XG4gICAgICAgICAgICAvLyBYTFNYX0NBTEMoc2hlZXRib29rKTtcblxuICAgICAgICAgICAgaWYgKChzaGVldGJvb2suU2hlZXRzW2RhdGEubmFtZV1beHkyZXhwcih4LCB5KV0uZiAmJiBzaGVldGJvb2suU2hlZXRzW2RhdGEubmFtZV1beHkyZXhwcih4LCB5KV0uZi5zZWFyY2goL1xcKChcXCt8XFwtfFxcKnxcXC8pLykgIT09IC0xKSB8fCBzaGVldGJvb2suU2hlZXRzW2RhdGEubmFtZV1beHkyZXhwcih4LCB5KV0udiA9PT0gdW5kZWZpbmVkIHx8IHNoZWV0Ym9vay5TaGVldHNbZGF0YS5uYW1lXVt4eTJleHByKHgsIHkpXS52ID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiI0VSUk9SIVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hlZXRib29rLlNoZWV0c1tkYXRhLm5hbWVdW3h5MmV4cHIoeCwgeSldLnYgPSBzaGVldGJvb2suU2hlZXRzW2RhdGEubmFtZV1beHkyZXhwcih4LCB5KV0udiArIFwiXCI7XG5cbiAgICAgICAgICAgIC8vIGxldCB2YWx1ZSA9IHNoZWV0Ym9vay5TaGVldHMuU2hlZXQxW3h5MmV4cHIoeCwgeSldLnYgPyBzaGVldGJvb2suU2hlZXRzLlNoZWV0MVt4eTJleHByKHgsIHkpXS52IDogXCJOYU5cIjtcbiAgICAgICAgICAgIHJldHVybiBzaGVldGJvb2suU2hlZXRzW2RhdGEubmFtZV1beHkyZXhwcih4LCB5KV0udyA/IHNoZWV0Ym9vay5TaGVldHNbZGF0YS5uYW1lXVt4eTJleHByKHgsIHkpXS53IDogc2hlZXRib29rLlNoZWV0c1tkYXRhLm5hbWVdW3h5MmV4cHIoeCwgeSldLnYucmVwbGFjZSgvJy9nLCBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3Qgc3RhY2sgPSBpbmZpeEV4cHJUb1N1ZmZpeEV4cHIoc3JjLnN1YnN0cmluZygxKSk7XG4gICAgICAgIC8vIGlmIChzdGFjay5sZW5ndGggPD0gMCkgcmV0dXJuIHNyYztcblxuICAgICAgICByZXR1cm4gc3JjO1xuICAgIH1cbiAgICByZXR1cm4gc3JjO1xufTtcblxuZXhwb3J0IGxldCByZW5kZXIgPSBjZWxsUmVuZGVyXG5leHBvcnQge1xuICAgIGluZml4RXhwclRvU3VmZml4RXhwcixcbn07XG4iLCJleHBvcnQgY29uc3QgaXNNaW51cyA9ICh0ZXh0KSA9PiB7XG4gICAgaWYoaXNOYU4odGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZih0ZXh0ID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBpZihwYXJzZUludCh0ZXh0KSA+PSAwKVxuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gcGFyc2VJbnQodGV4dCkgPCAwO1xufTsiLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQge2lzSGF2ZX0gZnJvbSBcIi4uL2hlbHBlci9jaGVja192YWx1ZVwiO1xuXG5mdW5jdGlvbiBkcHIoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7ICAgICAgIC8vIOS/ruaUueS5i+WQjlxufVxuXG5mdW5jdGlvbiB0aGluTGluZVdpZHRoKCkge1xuICAgIHJldHVybiBkcHIoKSAtIDAuNTtcbn1cblxuZnVuY3Rpb24gbnB4KHB4KSB7XG4gICAgbGV0IGQgPSBweCAqIGRwcigpICsgXCJcIjtcbiAgICByZXR1cm4gcGFyc2VJbnQoZCwgMTApO1xufVxuXG5mdW5jdGlvbiBucHhMaW5lKHB4KSB7XG4gICAgY29uc3QgbiA9IG5weChweCk7XG4gICAgcmV0dXJuIG4gPiAwID8gbiAtIDAuNSA6IDAuNTtcbn1cblxuZnVuY3Rpb24gZHJhd0ZsZXhGYWxzZShjdHgsIHN4LCBzeSkge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcIiM3MDcwNzBcIjtcbiAgICBjdHgubW92ZVRvKHN4LCBzeSArIDYpO1xuICAgIGN0eC5saW5lVG8oc3ggKyAxMiwgc3kgKyA2KTtcbiAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICBjdHguc3Ryb2tlUmVjdChzeCwgc3ksIDEyLCAxMik7XG4gICAgY3R4LmNsaXAoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdGbGV4VHJ1ZShjdHgsIHN4LCBzeSkge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcIiM3MDcwNzBcIjtcbiAgICBjdHgubW92ZVRvKHN4ICsgNiwgc3kpO1xuICAgIGN0eC5saW5lVG8oc3ggKyA2LCBzeSArIDEyKTtcbiAgICBjdHgubW92ZVRvKHN4LCBzeSArIDYpO1xuICAgIGN0eC5saW5lVG8oc3ggKyAxMiwgc3kgKyA2KTtcbiAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICBjdHguc3Ryb2tlUmVjdChzeCwgc3ksIDEyLCAxMik7XG4gICAgY3R4LmNsaXAoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5cbmNsYXNzIERyYXdCb3gge1xuICAgIGNvbnN0cnVjdG9yKHgsIHksIHcsIGgsIHBhZGRpbmcgPSAwKSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMud2lkdGggPSB3O1xuICAgICAgICB0aGlzLmhlaWdodCA9IGg7XG4gICAgICAgIHRoaXMucGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICAgIHRoaXMuYmdjb2xvciA9ICcjZmZmZmZmJztcbiAgICAgICAgLy8gYm9yZGVyOiBbd2lkdGgsIHN0eWxlLCBjb2xvcl1cbiAgICAgICAgdGhpcy5ib3JkZXJUb3AgPSBudWxsO1xuICAgICAgICB0aGlzLmJvcmRlclJpZ2h0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ib3JkZXJCb3R0b20gPSBudWxsO1xuICAgICAgICB0aGlzLmJvcmRlckxlZnQgPSBudWxsO1xuICAgIH1cblxuICAgIHNldEJvcmRlcnMoe1xuICAgICAgICAgICAgICAgICAgIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCxcbiAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgaWYgKHRvcCkgdGhpcy5ib3JkZXJUb3AgPSB0b3A7XG4gICAgICAgIGlmIChyaWdodCkgdGhpcy5ib3JkZXJSaWdodCA9IHJpZ2h0O1xuICAgICAgICBpZiAoYm90dG9tKSB0aGlzLmJvcmRlckJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgaWYgKGxlZnQpIHRoaXMuYm9yZGVyTGVmdCA9IGxlZnQ7XG4gICAgfVxuXG4gICAgaW5uZXJXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggLSAodGhpcy5wYWRkaW5nICogMik7XG4gICAgfVxuXG4gICAgaW5uZXJIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlaWdodCAtICh0aGlzLnBhZGRpbmcgKiAyKTtcbiAgICB9XG5cbiAgICB0ZXh0eChhbGlnbikge1xuICAgICAgICBjb25zdCB7d2lkdGgsIHBhZGRpbmd9ID0gdGhpcztcbiAgICAgICAgbGV0IHt4fSA9IHRoaXM7XG4gICAgICAgIGlmIChhbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB4ICs9IHBhZGRpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB4ICs9IHdpZHRoIC8gMjtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgeCArPSB3aWR0aCAtIHBhZGRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgdGV4dHkoYWxpZ24sIGZvbnRTaXplLCBob2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHtoZWlnaHQsIHBhZGRpbmd9ID0gdGhpcztcbiAgICAgICAgbGV0IHt5fSA9IHRoaXM7XG4gICAgICAgIGlmIChhbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHkgKz0gcGFkZGluZztcbiAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ21pZGRsZScpIHtcbiAgICAgICAgICAgIHkgPSB5ICsgaGVpZ2h0IC8gMiAtIGhvZmZzZXQ7XG4gICAgICAgICAgICAvLyB5ID0geTE7XG4gICAgICAgICAgICAvLyBjb25zdCB5MiA9IHkgKyBwYWRkaW5nICsgZm9udFNpemUgLyAyICsgMTtcbiAgICAgICAgICAgIC8vIGlmICh5MSA8IHkyKSB5ID0geTI7XG4gICAgICAgICAgICAvLyBlbHNlIHkgPSB5MTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHkgKz0gaGVpZ2h0IC0gaG9mZnNldCAqIDIgLSBwYWRkaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5O1xuICAgIH1cblxuICAgIHRvcHh5cygpIHtcbiAgICAgICAgY29uc3Qge3gsIHksIHdpZHRofSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbW3gsIHldLCBbeCArIHdpZHRoLCB5XV07XG4gICAgfVxuXG4gICAgcmlnaHR4eXMoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHgsIHksIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1t4ICsgd2lkdGgsIHldLCBbeCArIHdpZHRoLCB5ICsgaGVpZ2h0XV07XG4gICAgfVxuXG4gICAgYm90dG9teHlzKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB4LCB5LCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtbeCwgeSArIGhlaWdodF0sIFt4ICsgd2lkdGgsIHkgKyBoZWlnaHRdXTtcbiAgICB9XG5cbiAgICBsZWZ0eHlzKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB4LCB5LCBoZWlnaHQsXG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1t4LCB5XSwgW3gsIHkgKyBoZWlnaHRdXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdGb250TGluZSh0eXBlLCB0eCwgdHksIGFsaWduLCB2YWxpZ24sIGJsaGVpZ2h0LCBibHdpZHRoKSB7XG4gICAgY29uc3QgZmxvZmZzZXQgPSB7eDogMCwgeTogMH07XG4gICAgaWYgKHR5cGUgPT09ICd1bmRlcmxpbmUnKSB7XG4gICAgICAgIGlmICh2YWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBmbG9mZnNldC55ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBmbG9mZnNldC55ID0gLShibGhlaWdodCArIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmxvZmZzZXQueSA9IC1ibGhlaWdodCAvIDI7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpa2UnKSB7XG4gICAgICAgIGlmICh2YWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBmbG9mZnNldC55ID0gYmxoZWlnaHQgLyAyO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIGZsb2Zmc2V0LnkgPSAtKChibGhlaWdodCAvIDIpICsgMik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGZsb2Zmc2V0LnggPSBibHdpZHRoIC8gMjtcbiAgICB9IGVsc2UgaWYgKGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIGZsb2Zmc2V0LnggPSBibHdpZHRoO1xuICAgIH1cbiAgICB0aGlzLmxpbmUoXG4gICAgICAgIFt0eCAtIGZsb2Zmc2V0LngsIHR5IC0gZmxvZmZzZXQueV0sXG4gICAgICAgIFt0eCAtIGZsb2Zmc2V0LnggKyBibHdpZHRoLCB0eSAtIGZsb2Zmc2V0LnldLFxuICAgICk7XG59XG5cbmNsYXNzIERyYXcge1xuICAgIGNvbnN0cnVjdG9yKGVsLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5jdHggPSBlbC5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jdHguc2NhbGUoZHByKCkgKiAxLCBkcHIoKSAqIDEpO1xuICAgICAgICB0aGlzLmN4YyA9IHtcbiAgICAgICAgICAgIGluZGVudDogMjUwLFxuICAgICAgICAgICAgdkluZGVudDogMjAwLFxuICAgICAgICAgICAgY2FudmFzQ29udGV4dDogdGhpcy5jdHhcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2RwcjonLCBkcHIpO1xuICAgICAgICB0aGlzLmVsLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xuICAgICAgICB0aGlzLmVsLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgICAgIHRoaXMuZWwud2lkdGggPSBucHgod2lkdGgpO1xuICAgICAgICB0aGlzLmVsLmhlaWdodCA9IG5weChoZWlnaHQpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0aGlzLmVsO1xuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGF0dHIob3B0aW9ucykge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY3R4LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2F2ZSgpIHtcbiAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVzdG9yZSgpIHtcbiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBiZWdpblBhdGgoKSB7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUoeCwgeSkge1xuICAgICAgICB0aGlzLmN0eC50cmFuc2xhdGUobnB4KHgpLCBucHgoeSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjbGVhclJlY3QoeCwgeSwgdywgaCkge1xuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoeCwgeSwgdywgaCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZpbGxSZWN0KHgsIHksIHcsIGgpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QobnB4KHgpIC0gMC41LCBucHgoeSkgLSAwLjUsIG5weCh3KSwgbnB4KGgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZmlsbFRleHQodGV4dCwgeCwgeSkge1xuICAgICAgICAvLyB0aGlzLmN0eC5mb250LnNpemUgPSAzMDtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCIyMDM6XCIsIHRoaXMuY3R4LmZvbnQpO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dCh0ZXh0LCBucHgoeCksIG5weCh5KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNlbGZBZGFwdGlvbkhlaWdodChib3gsIHR4dCwgZm9udCkge1xuICAgICAgICBpZiAoZm9udCA9PT0gdW5kZWZpbmVkIHx8IHR4dCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgbiA9IDE7XG4gICAgICAgIGNvbnN0IHRleHRMaW5lID0ge2xlbjogMCwgc3RhcnQ6IDB9O1xuICAgICAgICBsZXQgaW5uZXJXaWR0aCA9IGJveC53aWR0aCAtIGJveC5wYWRkaW5nICogMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0TGluZS5sZW4gKyBib3gucGFkZGluZyA+PSBpbm5lcldpZHRoKSB7XG4gICAgICAgICAgICAgICAgbiA9IG4gKyAxO1xuICAgICAgICAgICAgICAgIHRleHRMaW5lLmxlbiA9IDA7XG4gICAgICAgICAgICAgICAgdGV4dExpbmUuc3RhcnQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dExpbmUubGVuICs9IHRoaXMuc2VsZkFkYXB0aW9uT25lVHh0V2lkdGgodHh0W2ldLCBmb250KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cblxuICAgIHNlbGZBZGFwdGlvblR4dFdpZHRoKHR4dCwgZm9udCwgYm94KSB7XG4gICAgICAgIGlmIChpc0hhdmUodHh0KSA9PT0gZmFsc2UgfHwgaXNIYXZlKGZvbnQpID09PSBmYWxzZSB8fCB0eHQubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgY29uc3Qge2N0eH0gPSB0aGlzO1xuICAgICAgICBjdHguZm9udCA9IGAke2ZvbnQuaXRhbGljID8gJ2l0YWxpYycgOiAnJ30gJHtmb250LmJvbGQgPyAnYm9sZCcgOiAnJ30gJHtucHgoZm9udC5zaXplKX1weCAke2ZvbnQubmFtZX1gO1xuICAgICAgICByZXR1cm4gY3R4Lm1lYXN1cmVUZXh0KHR4dCkud2lkdGggKiBmb250LnNpemUgLyBucHgoZm9udC5zaXplKTtcbiAgICB9XG5cbiAgICBzZWxmQWRhcHRpb25PbmVUeHRXaWR0aCh0eHQsIGZvbnQpIHtcbiAgICAgICAgaWYgKGlzSGF2ZSh0eHQpID09PSBmYWxzZSB8fCBpc0hhdmUoZm9udCkgPT09IGZhbHNlIHx8IHR4dC5sZW5ndGggPD0gMClcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBjb25zdCB7Y3R4fSA9IHRoaXM7XG4gICAgICAgIGN0eC5mb250ID0gYCR7Zm9udC5pdGFsaWMgPyAnaXRhbGljJyA6ICcnfSAke2ZvbnQuYm9sZCA/ICdib2xkJyA6ICcnfSAke25weChmb250LnNpemUpfXB4ICR7Zm9udC5uYW1lfWA7XG5cbiAgICAgICAgcmV0dXJuIGN0eC5tZWFzdXJlVGV4dCh0eHQpLndpZHRoO1xuICAgIH1cblxuICAgIC8qXG4gICAgICB0eHQ6IHJlbmRlciB0ZXh0XG4gICAgICBib3g6IERyYXdCb3hcbiAgICAgIGF0dHI6IHtcbiAgICAgICAgYWxpZ246IGxlZnQgfCBjZW50ZXIgfCByaWdodFxuICAgICAgICB2YWxpZ246IHRvcCB8IG1pZGRsZSB8IGJvdHRvbVxuICAgICAgICBjb2xvcjogJyMzMzMzMzMnLFxuICAgICAgICBzdHJpa2U6IGZhbHNlLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgbmFtZTogJ0FyaWFsJyxcbiAgICAgICAgICBzaXplOiAxNCxcbiAgICAgICAgICBib2xkOiBmYWxzZSxcbiAgICAgICAgICBpdGFsaWM6IGZhbHNlLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0ZXh0V3JhcDogdGV4dCB3cmFwcGluZ1xuICAgICovXG4gICAgdGV4dCh0eHQsIGJveCwgYXR0ciA9IHt9LCB0ZXh0V3JhcCA9IHRydWUpIHtcbiAgICAgICAgY29uc3Qge2N0eH0gPSB0aGlzO1xuICAgICAgICAvLyBjb25zdCB7XG4gICAgICAgIC8vICAgICBhbGlnbiwgdmFsaWduLCBmb250LCBjb2xvciwgc3RyaWtlLCB1bmRlcmxpbmUsIGlnbm9yZSwgY2luZGV4XG4gICAgICAgIC8vIH0gPSBhdHRyO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhbGlnbiwgdmFsaWduLCBmb250LCBjb2xvciwgc3RyaWtlLCB1bmRlcmxpbmUsIGlnbm9yZVxuICAgICAgICB9ID0gYXR0cjtcblxuICAgICAgICBjb25zdCB0eCA9IGJveC50ZXh0eChhbGlnbik7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgICB0aGlzLmF0dHIoe1xuICAgICAgICAgICAgdGV4dEFsaWduOiBhbGlnbixcbiAgICAgICAgICAgIHRleHRCYXNlbGluZTogdmFsaWduLFxuICAgICAgICAgICAgZm9udDogYCR7Zm9udC5pdGFsaWMgPyAnaXRhbGljJyA6ICcnfSAke2ZvbnQuYm9sZCA/ICdib2xkJyA6ICcnfSAke25weChmb250LnNpemUpfXB4ICR7Zm9udC5uYW1lfWAsXG4gICAgICAgICAgICBmaWxsU3R5bGU6IGNvbG9yLFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IGNvbG9yLFxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgdHh0V2lkdGggPSB0aGlzLnNlbGZBZGFwdGlvblR4dFdpZHRoKHR4dCwgZm9udCwgYm94KTtcbiAgICAgICAgbGV0IGhvZmZzZXQgPSAwO1xuICAgICAgICBsZXQgaW5uZXJXaWR0aCA9IGJveC5pbm5lcldpZHRoKCk7XG4gICAgICAgIGlmICh0ZXh0V3JhcCkge1xuICAgICAgICAgICAgaW5uZXJXaWR0aCA9IGJveC53aWR0aCAtIGJveC5wYWRkaW5nICogMjtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLnNlbGZBZGFwdGlvbkhlaWdodChib3gsIHR4dCwgZm9udCk7XG4gICAgICAgICAgICBob2Zmc2V0ID0gKChuIC0gMSkgKiBmb250LnNpemUpIC8gMjtcbiAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgaWdub3JlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgaWYgKGNpbmRleCAhPSBpZ25vcmVbaV0pIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gaG9mZnNldCA9IDA7XG4gICAgICAgICAgICAvLyAgICAgfSBlbHNlIGlmIChjaW5kZXggPT0gaWdub3JlW2ldKSB7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0eSA9IGJveC50ZXh0eSh2YWxpZ24sIGZvbnQuc2l6ZSwgaG9mZnNldCk7XG4gICAgICAgIGlmICh0ZXh0V3JhcCAmJiB0eHRXaWR0aCA+IGlubmVyV2lkdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRMaW5lID0ge2xlbjogMCwgc3RhcnQ6IDB9O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAodGV4dExpbmUubGVuICsgYm94LnBhZGRpbmcgPj0gaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWJ1Z2dlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxUZXh0KHR4dC5zdWJzdHJpbmcodGV4dExpbmUuc3RhcnQsIGkpLCB0eCwgdHkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaWtlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3Rm9udExpbmUuY2FsbCh0aGlzLCAnc3RyaWtlJywgdHgsIHR5LCBhbGlnbiwgdmFsaWduLCBmb250LnNpemUsIHRleHRMaW5lLmxlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuZGVybGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0ZvbnRMaW5lLmNhbGwodGhpcywgJ3VuZGVybGluZScsIHR4LCB0eSwgYWxpZ24sIHZhbGlnbiwgZm9udC5zaXplLCB0ZXh0TGluZS5sZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHR5ICs9IGZvbnQuc2l6ZSArIDI7XG4gICAgICAgICAgICAgICAgICAgIHRleHRMaW5lLmxlbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRleHRMaW5lLnN0YXJ0ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGV4dExpbmUubGVuICs9IHRoaXMuc2VsZkFkYXB0aW9uT25lVHh0V2lkdGgodHh0W2ldLCBmb250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ZXh0TGluZS5sZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxsVGV4dCh0eHQuc3Vic3RyaW5nKHRleHRMaW5lLnN0YXJ0KSwgdHgsIHR5KTtcbiAgICAgICAgICAgICAgICBpZiAoc3RyaWtlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdGb250TGluZS5jYWxsKHRoaXMsICdzdHJpa2UnLCB0eCwgdHksIGFsaWduLCB2YWxpZ24sIGZvbnQuc2l6ZSwgdGV4dExpbmUubGVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVuZGVybGluZSkge1xuICAgICAgICAgICAgICAgICAgICBkcmF3Rm9udExpbmUuY2FsbCh0aGlzLCAndW5kZXJsaW5lJywgdHgsIHR5LCBhbGlnbiwgdmFsaWduLCBmb250LnNpemUsIHRleHRMaW5lLmxlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maWxsVGV4dCh0eHQsIHR4LCB0eSk7XG4gICAgICAgICAgICBpZiAoc3RyaWtlKSB7XG4gICAgICAgICAgICAgICAgZHJhd0ZvbnRMaW5lLmNhbGwodGhpcywgJ3N0cmlrZScsIHR4LCB0eSwgYWxpZ24sIHZhbGlnbiwgZm9udC5zaXplLCB0eHRXaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5kZXJsaW5lKSB7XG4gICAgICAgICAgICAgICAgZHJhd0ZvbnRMaW5lLmNhbGwodGhpcywgJ3VuZGVybGluZScsIHR4LCB0eSwgYWxpZ24sIHZhbGlnbiwgZm9udC5zaXplLCB0eHRXaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYm9yZGVyKHN0eWxlLCBjb2xvcikge1xuICAgICAgICBjb25zdCB7Y3R4fSA9IHRoaXM7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGluTGluZVdpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3N0eWxlOicsIHN0eWxlKTtcbiAgICAgICAgaWYgKHN0eWxlID09PSAnbWVkaXVtJykge1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG5weCgyKSAtIDAuNTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ3RoaWNrJykge1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG5weCgzKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ2Rhc2hlZCcpIHtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChbbnB4KDMpLCBucHgoMildKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ2RvdHRlZCcpIHtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChbbnB4KDEpLCBucHgoMSldKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHlsZSA9PT0gJ2RvdWJsZScpIHtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChbbnB4KDIpLCAwXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbGluZSguLi54eXMpIHtcbiAgICAgICAgY29uc3Qge2N0eH0gPSB0aGlzO1xuICAgICAgICBpZiAoeHlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IHh5c1swXTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8obnB4TGluZSh4KSwgbnB4TGluZSh5KSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHh5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFt4MSwgeTFdID0geHlzW2ldO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8obnB4TGluZSh4MSksIG5weExpbmUoeTEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdHJva2VCb3JkZXJzKGJveCkge1xuICAgICAgICBjb25zdCB7Y3R4fSA9IHRoaXM7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgLy8gYm9yZGVyXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCxcbiAgICAgICAgfSA9IGJveDtcbiAgICAgICAgaWYgKGJvcmRlclRvcCkge1xuICAgICAgICAgICAgdGhpcy5ib3JkZXIoLi4uYm9yZGVyVG9wKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdib3gudG9weHlzOicsIGJveC50b3B4eXMoKSk7XG4gICAgICAgICAgICB0aGlzLmxpbmUoLi4uYm94LnRvcHh5cygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9yZGVyUmlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuYm9yZGVyKC4uLmJvcmRlclJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMubGluZSguLi5ib3gucmlnaHR4eXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvcmRlckJvdHRvbSkge1xuICAgICAgICAgICAgdGhpcy5ib3JkZXIoLi4uYm9yZGVyQm90dG9tKTtcbiAgICAgICAgICAgIHRoaXMubGluZSguLi5ib3guYm90dG9teHlzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib3JkZXJMZWZ0KSB7XG4gICAgICAgICAgICB0aGlzLmJvcmRlciguLi5ib3JkZXJMZWZ0KTtcbiAgICAgICAgICAgIHRoaXMubGluZSguLi5ib3gubGVmdHh5cygpKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIGRyb3BVcChib3gsIHN0YXRlLCBkaWZmKSB7XG4gICAgICAgIGNvbnN0IHtjdHh9ID0gdGhpcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgeCwgeSwgaGVpZ2h0LFxuICAgICAgICB9ID0gYm94O1xuXG4gICAgICAgIGNvbnN0IHN4ID0geCArIDEwO1xuICAgICAgICBjb25zdCBzeSA9IHkgKyBoZWlnaHQgLSAxOCAtIGRpZmY7XG5cbiAgICAgICAgLy8gaWYgKHN0YXRlKSB7XG4gICAgICAgIC8vICAgaW1nLnNyYyA9IFwiaHR0cDovL3N0YXJpbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vMjAxOTQxOC8xNTU3Mjc4NTM5MTc3LnN2Z1wiO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgIGltZy5zcmMgPSBcImh0dHA6Ly9zdGFyaW1hZ2Uub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzIwMTk0MTgvMTU1NzI3ODU3OTc0Mi5zdmdcIjtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBucHgoc3gpLCBucHgoc3kpLCAxNiwgMTYpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgZHJhd0ZsZXhUcnVlLmNhbGwodGhpcywgY3R4LCBucHgoc3gpLCBucHgoc3kpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd0ZsZXhGYWxzZS5jYWxsKHRoaXMsIGN0eCwgbnB4KHN4KSwgbnB4KHN5KSlcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgbGluZVRvKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jeGMuY2FudmFzQ29udGV4dC5saW5lVG8oeCArIHRoaXMuY3hjLmluZGVudCwgeSArIHRoaXMuY3hjLnZJbmRlbnQpO1xuICAgIH1cblxuICAgIG1vdmVUbyh4LCB5KSB7XG4gICAgICAgIHRoaXMuY3hjLmNhbnZhc0NvbnRleHQubW92ZVRvKHggKyB0aGlzLmN4Yy5pbmRlbnQsIHkgKyB0aGlzLmN4Yy52SW5kZW50KTtcbiAgICB9O1xuXG5cbiAgICBkcm9wZG93bihib3gpIHtcbiAgICAgICAgY29uc3Qge2N0eH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB4LCB5LCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB9ID0gYm94O1xuXG4gICAgICAgIGNvbnN0IHN4ID0geCArIHdpZHRoIC0gMTU7XG4gICAgICAgIGNvbnN0IHN5ID0geSArIGhlaWdodCAtIDE1O1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8obnB4KHN4KSwgbnB4KHN5KSk7XG4gICAgICAgIGN0eC5saW5lVG8obnB4KHN4ICsgOCksIG5weChzeSkpO1xuICAgICAgICBjdHgubGluZVRvKG5weChzeCArIDQpLCBucHgoc3kgKyA2KSk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIC40NSknO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIGVycm9yKGJveCkge1xuICAgICAgICBjb25zdCB7Y3R4fSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHt4LCB5LCB3aWR0aH0gPSBib3g7XG4gICAgICAgIGNvbnN0IHN4ID0geCArIHdpZHRoIC0gMTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKG5weChzeCAtIDgpLCBucHgoeSAtIDEpKTtcbiAgICAgICAgY3R4LmxpbmVUbyhucHgoc3gpLCBucHgoeSAtIDEpKTtcbiAgICAgICAgY3R4LmxpbmVUbyhucHgoc3gpLCBucHgoeSArIDgpKTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAwLCAwLCAuNjUpJztcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICByZWN0KGJveCwgZHRleHRjYikge1xuICAgICAgICBjb25zdCB7Y3R4fSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJnY29sb3IsXG4gICAgICAgIH0gPSBib3g7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJnY29sb3IgfHwgJyNmZmYnO1xuICAgICAgICBjdHgucmVjdChucHhMaW5lKHggKyAxKSwgbnB4TGluZSh5ICsgMSksIG5weCh3aWR0aCAtIDIpLCBucHgoaGVpZ2h0IC0gMikpO1xuICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBkdGV4dGNiKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcmVjdDIoYm94LCBkdGV4dGNiKSB7XG4gICAgICAgIGNvbnN0IHtjdHh9ID0gdGhpcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgeCwgeSwgd2lkdGgsIGJnY29sb3IsXG4gICAgICAgIH0gPSBib3g7XG4gICAgICAgIGxldCB7aGVpZ2h0fSA9IGJveDtcbiAgICAgICAgLy8gaWYgKHRleHR3cmFwID09IHRydWUpIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiNDg3XCIpXG4gICAgICAgIC8vICAgICBjb25zdCBuID0gdGhpcy5zZWxmQWRhcHRpb25IZWlnaHQoYm94LCBjZWxsVGV4dCk7XG4gICAgICAgIC8vICAgICBoZWlnaHQgPSBoZWlnaHQgKiBuO1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCI0OTVcIiwgaGVpZ2h0KVxuICAgICAgICAvLyB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJnY29sb3IgPT09IFwicmdiYSgwLCAwLCAwLCAwKVwiID8gJyNmZmYnIDogYmdjb2xvciB8fCAnI2ZmZic7XG4gICAgICAgIGN0eC5yZWN0KG5weExpbmUoeCArIDEpLCBucHhMaW5lKHkgKyAxKSwgbnB4KHdpZHRoIC0gMiksIG5weChoZWlnaHQgLSAyKSk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGR0ZXh0Y2IoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgRHJhdyxcbiAgICBEcmF3Qm94LFxuICAgIHRoaW5MaW5lV2lkdGgsXG4gICAgbnB4LFxufTtcbiIsImltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgYmluZENsaWNrb3V0c2lkZSwgdW5iaW5kQ2xpY2tvdXRzaWRlIH0gZnJvbSAnLi9ldmVudCc7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGYgfSBmcm9tICcuLi9sb2NhbGUvbG9jYWxlJztcblxuY29uc3QgbWVudUl0ZW1zID0gW1xuICB7IGtleTogJ2NvcHknLCB0aXRsZTogdGYoJ2NvbnRleHRtZW51LmNvcHknKSwgbGFiZWw6ICdDdHJsK0MnIH0sXG4gIHsga2V5OiAnY3V0JywgdGl0bGU6IHRmKCdjb250ZXh0bWVudS5jdXQnKSwgbGFiZWw6ICdDdHJsK1gnIH0sXG4gIC8vIHsga2V5OiAncGFzdGUnLCB0aXRsZTogdGYoJ2NvbnRleHRtZW51LnBhc3RlJyksIGxhYmVsOiAnQ3RybCtWJyB9LFxuICAvLyB7IGtleTogJ3Bhc3RlLXZhbHVlJywgdGl0bGU6IHRmKCdjb250ZXh0bWVudS5wYXN0ZVZhbHVlJyksIGxhYmVsOiAnQ3RybCtTaGlmdCtWJyB9LFxuICAvLyB7IGtleTogJ3Bhc3RlLWZvcm1hdCcsIHRpdGxlOiB0ZignY29udGV4dG1lbnUucGFzdGVGb3JtYXQnKSwgbGFiZWw6ICdDdHJsK0FsdCtWJyB9LFxuICB7IGtleTogJ2RpdmlkZXInIH0sXG4gIHsga2V5OiAnaW5zZXJ0LXJvdycsIHRpdGxlOiB0ZignY29udGV4dG1lbnUuaW5zZXJ0Um93JykgfSxcbiAgeyBrZXk6ICdpbnNlcnQtY29sdW1uJywgdGl0bGU6IHRmKCdjb250ZXh0bWVudS5pbnNlcnRDb2x1bW4nKSB9LFxuICB7IGtleTogJ2RpdmlkZXInIH0sXG4gIHsga2V5OiAnZGVsZXRlLXJvdycsIHRpdGxlOiB0ZignY29udGV4dG1lbnUuZGVsZXRlUm93JykgfSxcbiAgeyBrZXk6ICdkZWxldGUtY29sdW1uJywgdGl0bGU6IHRmKCdjb250ZXh0bWVudS5kZWxldGVDb2x1bW4nKSB9LFxuICB7IGtleTogJ2RlbGV0ZS1jZWxsLXRleHQnLCB0aXRsZTogdGYoJ2NvbnRleHRtZW51LmRlbGV0ZUNlbGxUZXh0JykgfSxcbiAgeyBrZXk6ICdkaXZpZGVyJyB9LFxuICB7IGtleTogJ3ZhbGlkYXRpb24nLCB0aXRsZTogdGYoJ2NvbnRleHRtZW51LnZhbGlkYXRpb24nKSB9LFxuXTtcblxuZnVuY3Rpb24gYnVpbGRNZW51SXRlbShpdGVtKSB7XG4gIGlmIChpdGVtLmtleSA9PT0gJ2RpdmlkZXInKSB7XG4gICAgcmV0dXJuIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taXRlbSBkaXZpZGVyYCk7XG4gIH1cbiAgcmV0dXJuIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taXRlbWApXG4gICAgLm9uKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgIHRoaXMuaXRlbUNsaWNrKGl0ZW0ua2V5LCBldnQpO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSlcbiAgICAuY2hpbGRyZW4oXG4gICAgICBpdGVtLnRpdGxlKCksXG4gICAgICBoKCdkaXYnLCAnbGFiZWwnKS5jaGlsZChpdGVtLmxhYmVsIHx8ICcnKSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBidWlsZE1lbnUoKSB7XG4gIHJldHVybiBtZW51SXRlbXMubWFwKGl0ID0+IGJ1aWxkTWVudUl0ZW0uY2FsbCh0aGlzLCBpdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZXh0TWVudSB7XG4gIGNvbnN0cnVjdG9yKHZpZXdGbiwgaXNIaWRlID0gZmFsc2UpIHtcbiAgICB0aGlzLm1lbnVzID0gYnVpbGRNZW51LmNhbGwodGhpcyk7XG4gICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tY29udGV4dG1lbnVgKVxuICAgICAgLmNoaWxkcmVuKC4uLnRoaXMubWVudXMpXG4gICAgICAuaGlkZSgpO1xuICAgIHRoaXMudmlld0ZuID0gdmlld0ZuO1xuICAgIHRoaXMuaXRlbUNsaWNrID0gKCkgPT4ge307XG4gICAgdGhpcy5pc0hpZGUgPSBpc0hpZGU7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnN0IHsgZWwgfSA9IHRoaXM7XG4gICAgZWwuaGlkZSgpO1xuICAgIHVuYmluZENsaWNrb3V0c2lkZShlbCk7XG4gIH1cblxuICBzZXRQb3NpdGlvbih4LCB5KSB7XG4gICAgaWYgKHRoaXMuaXNIaWRlKSByZXR1cm47XG4gICAgY29uc3QgeyBlbCB9ID0gdGhpcztcbiAgICBjb25zdCB7IGhlaWdodCwgd2lkdGggfSA9IGVsLnNob3coKS5vZmZzZXQoKTtcbiAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3Rm4oKTtcbiAgICBsZXQgdG9wID0geTtcbiAgICBsZXQgbGVmdCA9IHg7XG4gICAgaWYgKHZpZXcuaGVpZ2h0IC0geSA8PSBoZWlnaHQpIHtcbiAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgfVxuICAgIGlmICh2aWV3LndpZHRoIC0geCA8PSB3aWR0aCkge1xuICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICB9XG4gICAgZWwub2Zmc2V0KHsgbGVmdCwgdG9wIH0pO1xuICAgIGJpbmRDbGlja291dHNpZGUoZWwpO1xuICB9XG59XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQge2h9IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQge2JpbmR9IGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IHRvb2x0aXAgZnJvbSAnLi90b29sdGlwJztcbmltcG9ydCBEcm9wZG93bkZvbnQgZnJvbSAnLi9kcm9wZG93bl9mb250JztcbmltcG9ydCBEcm9wZG93bkZvbnRTaXplIGZyb20gJy4vZHJvcGRvd25fZm9udHNpemUnO1xuaW1wb3J0IERyb3Bkb3duRm9ybWF0IGZyb20gJy4vZHJvcGRvd25fZm9ybWF0JztcbmltcG9ydCBEcm9wZG93bkZvcm11bGEgZnJvbSAnLi9kcm9wZG93bl9mb3JtdWxhJztcbmltcG9ydCBEcm9wZG93bkNvbG9yIGZyb20gJy4vZHJvcGRvd25fY29sb3InO1xuaW1wb3J0IERyb3Bkb3duQWxpZ24gZnJvbSAnLi9kcm9wZG93bl9hbGlnbic7XG5pbXBvcnQgRHJvcGRvd25Cb3JkZXIgZnJvbSAnLi9kcm9wZG93bl9ib3JkZXInO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vZHJvcGRvd24nO1xuaW1wb3J0IEljb24gZnJvbSAnLi9pY29uJztcbmltcG9ydCB7Y3NzUHJlZml4fSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHt0fSBmcm9tICcuLi9sb2NhbGUvbG9jYWxlJztcbmltcG9ydCBEcm9wZG93bkFjdGlvbiBmcm9tIFwiLi9kcm9wZG93bl9hY3Rpb25cIjtcblxuZnVuY3Rpb24gYnVpbGRJY29uKG5hbWUpIHtcbiAgICByZXR1cm4gbmV3IEljb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEJ1dHRvbih0b29sdGlwZGF0YSkge1xuICAgIHJldHVybiBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXRvb2xiYXItYnRuYClcbiAgICAgICAgLm9uKCdtb3VzZWVudGVyJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgdG9vbHRpcCh0b29sdGlwZGF0YSwgZXZ0LnRhcmdldCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdkYXRhLXRvb2x0aXAnLCB0b29sdGlwZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRGl2aWRlcigpIHtcbiAgICByZXR1cm4gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS10b29sYmFyLWRpdmlkZXJgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQnV0dG9uV2l0aEljb24odG9vbHRpcGRhdGEsIGljb25OYW1lLCBjaGFuZ2UgPSAoKSA9PiB7XG59KSB7XG4gICAgcmV0dXJuIGJ1aWxkQnV0dG9uKHRvb2x0aXBkYXRhKVxuICAgICAgICAuY2hpbGQoYnVpbGRJY29uKGljb25OYW1lKSlcbiAgICAgICAgLm9uKCdjbGljaycsICgpID0+IGNoYW5nZSgpKTtcbn1cblxuZnVuY3Rpb24gYmluZERyb3Bkb3duQ2hhbmdlKCkge1xuICAgIHRoaXMuZGRGb3JtYXQuY2hhbmdlID0gaXQgPT4gdGhpcy5jaGFuZ2UoJ2Zvcm1hdCcsIGl0LmtleSk7XG4gICAgdGhpcy5kZEZvbnQuY2hhbmdlID0gaXQgPT4gdGhpcy5jaGFuZ2UoJ2ZvbnQtbmFtZScsIGl0LmtleSk7XG4gICAgLy8gdGhpcy5kZEZvcm11bGEuY2hhbmdlID0gaXQgPT4gdGhpcy5jaGFuZ2UoJ2NlbGxGb3JtdWxhUHJveHknLCBpdC5rZXkpO1xuICAgIHRoaXMuZGRGb250U2l6ZS5jaGFuZ2UgPSBpdCA9PiB0aGlzLmNoYW5nZSgnZm9udC1zaXplJywgaXQucHQpO1xuICAgIHRoaXMuZGRUZXh0Q29sb3IuY2hhbmdlID0gaXQgPT4gdGhpcy5jaGFuZ2UoJ2NvbG9yJywgaXQpO1xuICAgIHRoaXMuZGRGaWxsQ29sb3IuY2hhbmdlID0gaXQgPT4gdGhpcy5jaGFuZ2UoJ2JnY29sb3InLCBpdCk7XG4gICAgdGhpcy5kZEFsaWduLmNoYW5nZSA9IGl0ID0+IHRoaXMuY2hhbmdlKCdhbGlnbicsIGl0KTtcbiAgICB0aGlzLmRkVkFsaWduLmNoYW5nZSA9IGl0ID0+IHRoaXMuY2hhbmdlKCd2YWxpZ24nLCBpdCk7XG4gICAgdGhpcy5kZEJvcmRlci5jaGFuZ2UgPSBpdCA9PiB0aGlzLmNoYW5nZSgnYm9yZGVyJywgaXQpO1xuICAgIHRoaXMudW5kb0VsLmNoYW5nZSA9IGl0ID0+IHRoaXMuY2hhbmdlKCd1bmRvJywgaXQpO1xufVxuXG5cbmZ1bmN0aW9uIHRvZ2dsZUNoYW5nZSh0eXBlKSB7XG4gICAgbGV0IGVsTmFtZSA9IHR5cGU7XG4gICAgY29uc3QgdHlwZXMgPSB0eXBlLnNwbGl0KCctJyk7XG4gICAgaWYgKHR5cGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdHlwZXMuZm9yRWFjaCgoaXQsIGkpID0+IHtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSBlbE5hbWUgPSBpdDtcbiAgICAgICAgICAgIGVsc2UgZWxOYW1lICs9IGl0WzBdLnRvVXBwZXJDYXNlKCkgKyBpdC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBlbCA9IHRoaXNbYCR7ZWxOYW1lfUVsYF07XG4gICAgZWwudG9nZ2xlKCk7XG4gICAgdGhpcy5jaGFuZ2UodHlwZSwgZWwuaGFzQ2xhc3MoJ2FjdGl2ZScpKTtcbn1cblxuY2xhc3MgRHJvcGRvd25Nb3JlIGV4dGVuZHMgRHJvcGRvd24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBpY29uID0gbmV3IEljb24oJ2VsbGlwc2lzJyk7XG4gICAgICAgIGNvbnN0IG1vcmVCdG5zID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS10b29sYmFyLW1vcmVgKTtcbiAgICAgICAgc3VwZXIoaWNvbiwgJ2F1dG8nLCBmYWxzZSwgJ2JvdHRvbS1yaWdodCcsIGZhbHNlLCAgbW9yZUJ0bnMpO1xuICAgICAgICB0aGlzLm1vcmVCdG5zID0gbW9yZUJ0bnM7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNzcygnbWF4LXdpZHRoJywgJzQyMHB4Jyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0QnRuczIoKSB7XG4gICAgdGhpcy5idG5zMiA9IHRoaXMuYnRuQ2hpbGRyZW4ubWFwKChpdCkgPT4ge1xuICAgICAgICBjb25zdCByZWN0ID0gaXQuYm94KCk7XG4gICAgICAgIGNvbnN0IHttYXJnaW5MZWZ0LCBtYXJnaW5SaWdodH0gPSBpdC5jb21wdXRlZFN0eWxlKCk7XG4gICAgICAgIHJldHVybiBbaXQsIHJlY3Qud2lkdGggKyBwYXJzZUludChtYXJnaW5MZWZ0LCAxMCkgKyBwYXJzZUludChtYXJnaW5SaWdodCwgMTApXTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbW9yZVJlc2l6ZSh3aWR0aEZuID0gdGhpcy53aWR0aEZuKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBlbCwgYnRucywgbW9yZUVsLCBkZE1vcmUsIGJ0bnMyLFxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IHttb3JlQnRucywgY29udGVudEVsfSA9IGRkTW9yZTtcbiAgICBlbC5jc3MoJ3dpZHRoJywgYCR7d2lkdGhGbigpIC0gNjB9cHhgKTtcbiAgICBjb25zdCBlbEJveCA9IGVsLmJveCgpO1xuICAgIGNvbnNvbGUubG9nKFwiOTI6IFwiLCBlbEJveCk7XG5cbiAgICBsZXQgc3VtV2lkdGggPSAxNjA7XG4gICAgbGV0IHN1bVdpZHRoMiA9IDEyO1xuICAgIGNvbnN0IGxpc3QxID0gW107XG4gICAgY29uc3QgbGlzdDIgPSBbXTtcbiAgICBidG5zMi5mb3JFYWNoKChbaXQsIHddLCBpbmRleCkgPT4ge1xuICAgICAgICBzdW1XaWR0aCArPSB3O1xuICAgICAgICBpZiAoaW5kZXggPT09IGJ0bnMyLmxlbmd0aCAtIDEgfHwgc3VtV2lkdGggPCBlbEJveC53aWR0aCkge1xuICAgICAgICAgICAgbGlzdDEucHVzaChpdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdW1XaWR0aDIgKz0gdztcbiAgICAgICAgICAgIGxpc3QyLnB1c2goaXQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgYnRucy5odG1sKCcnKS5jaGlsZHJlbiguLi5saXN0MSk7XG4gICAgbW9yZUJ0bnMuaHRtbCgnJykuY2hpbGRyZW4oLi4ubGlzdDIpO1xuICAgIGNvbnRlbnRFbC5jc3MoJ3dpZHRoJywgYCR7c3VtV2lkdGgyfXB4YCk7XG4gICAgaWYgKGxpc3QyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbW9yZUVsLnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb3JlRWwuaGlkZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbGJhciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgd2lkdGhGbiwgaXNIaWRlID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud2lkdGhGbiA9IHdpZHRoRm47XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZGF0YS5kZWZhdWx0U3R5bGUoKTtcbiAgICAgICAgdGhpcy5kZEZvcm1hdCA9IG5ldyBEcm9wZG93bkZvcm1hdCgpO1xuICAgICAgICB0aGlzLmRkRm9udCA9IG5ldyBEcm9wZG93bkZvbnQoKTtcbiAgICAgICAgLy8gdGhpcy5kZEZvcm11bGEgPSBuZXcgRHJvcGRvd25Gb3JtdWxhKCk7XG4gICAgICAgIHRoaXMuZGRGb250U2l6ZSA9IG5ldyBEcm9wZG93bkZvbnRTaXplKCk7XG4gICAgICAgIHRoaXMuZGRUZXh0Q29sb3IgPSBuZXcgRHJvcGRvd25Db2xvcigndGV4dC1jb2xvcicsIHN0eWxlLmNvbG9yKTtcbiAgICAgICAgdGhpcy5kZEZpbGxDb2xvciA9IG5ldyBEcm9wZG93bkNvbG9yKCdmaWxsLWNvbG9yJywgc3R5bGUuYmdjb2xvcik7XG4gICAgICAgIHRoaXMuZGRBbGlnbiA9IG5ldyBEcm9wZG93bkFsaWduKFsnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnXSwgc3R5bGUuYWxpZ24pO1xuICAgICAgICB0aGlzLmRkVkFsaWduID0gbmV3IERyb3Bkb3duQWxpZ24oWyd0b3AnLCAnbWlkZGxlJywgJ2JvdHRvbSddLCBzdHlsZS52YWxpZ24pO1xuICAgICAgICB0aGlzLmRkQm9yZGVyID0gbmV3IERyb3Bkb3duQm9yZGVyKCk7XG4gICAgICAgIHRoaXMuZGRNb3JlID0gbmV3IERyb3Bkb3duTW9yZSgpO1xuICAgICAgICB0aGlzLnVuZG9FbCA9IG5ldyBEcm9wZG93bkFjdGlvbigndW5kbycsICAoKSA9PiB0aGlzLmNoYW5nZSgndW5kbycpLCAodikgPT4gdGhpcy5jaGFuZ2UoJ3VuZG9MaXN0JywgdikpO1xuICAgICAgICB0aGlzLnJlZG9FbCA9IG5ldyBEcm9wZG93bkFjdGlvbigncmVkbycsICAoKSA9PiB0aGlzLmNoYW5nZSgncmVkbycpLCAodikgPT4gdGhpcy5jaGFuZ2UoJ3JlZG9MaXN0JywgdikpO1xuICAgICAgICB0aGlzLmJ0bkNoaWxkcmVuID0gW1xuICAgICAgICAgICAgLy8gdGhpcy51bmRvRWwgPSBidWlsZEJ1dHRvbldpdGhJY29uKGAke3QoJ3Rvb2xiYXIudW5kbycpfSAoQ3RybCtaKWAsICd1bmRvJywgKCkgPT4gdGhpcy5jaGFuZ2UoJ3VuZG8nKSksXG5cbiAgICAgICAgICAgIC8vIHRoaXMucHJpbnRFbCA9IGJ1aWxkQnV0dG9uV2l0aEljb24oJ1ByaW50IChDdHJsK1ApJywgJ3ByaW50JywgKCkgPT4gdGhpcy5jaGFuZ2UoJ3ByaW50JykpLFxuICAgICAgICAgICAgYnVpbGRCdXR0b24oYCR7dCgndG9vbGJhci51bmRvJyl9YCkuY2hpbGQodGhpcy51bmRvRWwuZWwpLFxuICAgICAgICAgICAgYnVpbGRCdXR0b24oYCR7dCgndG9vbGJhci5yZWRvJyl9YCkuY2hpbGQodGhpcy5yZWRvRWwuZWwpLFxuICAgICAgICAgICAgdGhpcy5wYWludGZvcm1hdEVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLnBhaW50Zm9ybWF0Jyl9YCwgJ3BhaW50Zm9ybWF0JywgKCkgPT4gdG9nZ2xlQ2hhbmdlLmNhbGwodGhpcywgJ3BhaW50Zm9ybWF0JykpLFxuICAgICAgICAgICAgLy8gdGhpcy5jbGVhcmZvcm1hdEVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLmNsZWFyZm9ybWF0Jyl9YCwgJ2NsZWFyZm9ybWF0JywgKCkgPT4gdGhpcy5jaGFuZ2UoJ2NsZWFyZm9ybWF0JykpLFxuICAgICAgICAgICAgYnVpbGREaXZpZGVyKCksXG4gICAgICAgICAgICBidWlsZEJ1dHRvbihgJHt0KCd0b29sYmFyLmZvcm1hdCcpfWApLmNoaWxkKHRoaXMuZGRGb3JtYXQuZWwpLFxuICAgICAgICAgICAgYnVpbGREaXZpZGVyKCksXG4gICAgICAgICAgICBidWlsZEJ1dHRvbihgJHt0KCd0b29sYmFyLmZvbnQnKX1gKS5jaGlsZCh0aGlzLmRkRm9udC5lbCksXG4gICAgICAgICAgICBidWlsZEJ1dHRvbihgJHt0KCd0b29sYmFyLmZvbnRTaXplJyl9YCkuY2hpbGQodGhpcy5kZEZvbnRTaXplLmVsKSxcbiAgICAgICAgICAgIGJ1aWxkRGl2aWRlcigpLFxuICAgICAgICAgICAgdGhpcy5mb250Qm9sZEVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLmZvbnRCb2xkJyl9IChDdHJsK0IpYCwgJ2JvbGQnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAnZm9udC1ib2xkJykpLFxuICAgICAgICAgICAgdGhpcy5mb250SXRhbGljRWwgPSBidWlsZEJ1dHRvbldpdGhJY29uKGAke3QoJ3Rvb2xiYXIuZm9udEl0YWxpYycpfSAoQ3RybCtJKWAsICdpdGFsaWMnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAnZm9udC1pdGFsaWMnKSksXG4gICAgICAgICAgICB0aGlzLnVuZGVybGluZUVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLnVuZGVybGluZScpfSAoQ3RybCtVKWAsICd1bmRlcmxpbmUnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAndW5kZXJsaW5lJykpLFxuICAgICAgICAgICAgLy8gdGhpcy5mbGV4aWJsZUVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLmZsZXhpYmxlRWwnKX0gYCwgJ2ZsZXhpYmxlJywgKCkgPT4gdG9nZ2xlQ2hhbmdlLmNhbGwodGhpcywgJ2ZsZXhpYmxlJykpLFxuICAgICAgICAgICAgdGhpcy5zdHJpa2VFbCA9IGJ1aWxkQnV0dG9uV2l0aEljb24oYCR7dCgndG9vbGJhci5zdHJpa2UnKX1gLCAnc3RyaWtlJywgKCkgPT4gdG9nZ2xlQ2hhbmdlLmNhbGwodGhpcywgJ3N0cmlrZScpKSxcbiAgICAgICAgICAgIGJ1aWxkQnV0dG9uKGAke3QoJ3Rvb2xiYXIudGV4dENvbG9yJyl9YCkuY2hpbGQodGhpcy5kZFRleHRDb2xvci5lbCksXG4gICAgICAgICAgICBidWlsZERpdmlkZXIoKSxcbiAgICAgICAgICAgIGJ1aWxkQnV0dG9uKGAke3QoJ3Rvb2xiYXIuZmlsbENvbG9yJyl9YCkuY2hpbGQodGhpcy5kZEZpbGxDb2xvci5lbCksXG4gICAgICAgICAgICBidWlsZEJ1dHRvbihgJHt0KCd0b29sYmFyLmJvcmRlcicpfWApLmNoaWxkKHRoaXMuZGRCb3JkZXIuZWwpLFxuICAgICAgICAgICAgdGhpcy5tZXJnZUVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLm1lcmdlJyl9YCwgJ21lcmdlJywgKCkgPT4gdG9nZ2xlQ2hhbmdlLmNhbGwodGhpcywgJ21lcmdlJykpLFxuICAgICAgICAgICAgYnVpbGREaXZpZGVyKCksXG4gICAgICAgICAgICBidWlsZEJ1dHRvbihgJHt0KCd0b29sYmFyLmFsaWduJyl9YCkuY2hpbGQodGhpcy5kZEFsaWduLmVsKSxcbiAgICAgICAgICAgIGJ1aWxkQnV0dG9uKGAke3QoJ3Rvb2xiYXIudmFsaWduJyl9YCkuY2hpbGQodGhpcy5kZFZBbGlnbi5lbCksXG4gICAgICAgICAgICB0aGlzLnRleHR3cmFwRWwgPSBidWlsZEJ1dHRvbldpdGhJY29uKGAke3QoJ3Rvb2xiYXIudGV4dHdyYXAnKX1gLCAndGV4dHdyYXAnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAndGV4dHdyYXAnKSksXG4gICAgICAgICAgICBidWlsZERpdmlkZXIoKSxcbiAgICAgICAgICAgIC8vIHRoaXMubGlua0VsID0gYnVpbGRCdXR0b25XaXRoSWNvbignSW5zZXJ0IGxpbmsnLCAnbGluaycpLFxuICAgICAgICAgICAgLy8gdGhpcy5jaGFydEVsID0gYnVpbGRCdXR0b25XaXRoSWNvbignSW5zZXJ0IGNoYXJ0JywgJ2NoYXJ0JyksXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUVsID0gYnVpbGRCdXR0b25XaXRoSWNvbihgJHt0KCd0b29sYmFyLmZyZWV6ZScpfWAsICdmcmVlemUnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAnZnJlZXplJykpLFxuICAgICAgICAgICAgdGhpcy5hZGRFbCA9IGJ1aWxkQnV0dG9uV2l0aEljb24oYCR7dCgndG9vbGJhci5hZGQnKX1gLCAnYWRkJywgKCkgPT4gdG9nZ2xlQ2hhbmdlLmNhbGwodGhpcywgJ2FkZCcpKSxcbiAgICAgICAgICAgIHRoaXMuY2xvc2VFbCA9IGJ1aWxkQnV0dG9uV2l0aEljb24oYCR7dCgndG9vbGJhci5zb2x2ZUV4cHJlc3Npb24nKX1gLCAnY2xvc2UnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAnY2xvc2UnKSksXG4gICAgICAgICAgICB0aGlzLmF1dG9maWx0ZXJFbCA9IGJ1aWxkQnV0dG9uV2l0aEljb24oYCR7dCgndG9vbGJhci5hdXRvZmlsdGVyJyl9YCwgJ2F1dG9maWx0ZXInLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAnYXV0b2ZpbHRlcicpKSxcbiAgICAgICAgICAgIHRoaXMudGhyb3dGb3JtdWxhRWwgPSBidWlsZEJ1dHRvbldpdGhJY29uKGAke3QoJ3Rvb2xiYXIudGhyb3dGb3JtdWxhJyl9YCwgJ2NoZXZyb24tcmlnaHQnLCAoKSA9PiB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCAndGhyb3dGb3JtdWxhJykpLFxuICAgICAgICAgICAgLy8gYnVpbGRCdXR0b24oYCR7dCgndG9vbGJhci5kYXRlX2Zvcm11bGEnKX1gKS5jaGlsZCh0aGlzLmRkRm9ybXVsYS5lbCksXG4gICAgICAgICAgICAvLyBidWlsZERpdmlkZXIoKSxcbiAgICAgICAgICAgIHRoaXMubW9yZUVsID0gYnVpbGRCdXR0b24oYCR7dCgndG9vbGJhci5tb3JlJyl9YCkuY2hpbGQodGhpcy5kZE1vcmUuZWwpLmhpZGUoKSxcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tdG9vbGJhcmApO1xuICAgICAgICB0aGlzLmJ0bnMgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXRvb2xiYXItYnRuc2ApLmNoaWxkcmVuKC4uLnRoaXMuYnRuQ2hpbGRyZW4pO1xuICAgICAgICB0aGlzLmVsLmNoaWxkKHRoaXMuYnRucyk7XG4gICAgICAgIGlmIChpc0hpZGUpIHRoaXMuZWwuaGlkZSgpO1xuICAgICAgICBiaW5kRHJvcGRvd25DaGFuZ2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGluaXRCdG5zMi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgbW9yZVJlc2l6ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgYmluZCh3aW5kb3csICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICBtb3JlUmVzaXplLmNhbGwodGhpcywgZGF0YS5zZXR0aW5ncy52aWV3LndpZHRoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbW9yZVJlc2l6ZSgpIHtcbiAgICAgICAgbGV0IHtkYXRhfSA9IHRoaXM7XG4gICAgICAgIG1vcmVSZXNpemUuY2FsbCh0aGlzLCBkYXRhLnNldHRpbmdzLnZpZXcud2lkdGgpO1xuICAgIH1cblxuICAgIHBhaW50Zm9ybWF0QWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWludGZvcm1hdEVsLmhhc0NsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG5cbiAgICBwYWludGZvcm1hdFRvZ2dsZSgpIHtcbiAgICAgICAgdGhpcy5wYWludGZvcm1hdEVsLnRvZ2dsZSgpO1xuICAgIH1cblxuICAgIHRyaWdnZXIodHlwZSkge1xuICAgICAgICB0b2dnbGVDaGFuZ2UuY2FsbCh0aGlzLCB0eXBlKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkYXRhLmdldFNlbGVjdGVkQ2VsbFN0eWxlKCk7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBkYXRhLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgICAgICB0aGlzLnVuZG9FbC5kaXNhYmxlZCghZGF0YS5jYW5VbmRvKCkpO1xuICAgICAgICB0aGlzLnJlZG9FbC5kaXNhYmxlZCghZGF0YS5jYW5SZWRvKCkpO1xuICAgICAgICB0aGlzLm1lcmdlRWwuYWN0aXZlKGRhdGEuY2FuVW5tZXJnZSgpKVxuICAgICAgICAgICAgLmRpc2FibGVkKCFkYXRhLnNlbGVjdG9yLm11bHRpcGxlKCkpO1xuICAgICAgICB0aGlzLmF1dG9maWx0ZXJFbC5hY3RpdmUoIWRhdGEuY2FuQXV0b2ZpbHRlcigpKTtcbiAgICAgICAgLy8gdGhpcy5tZXJnZUVsLmRpc2FibGVkKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzZWxlY3RlZENlbGw6Jywgc3R5bGUsIGNlbGwpO1xuICAgICAgICBjb25zdCB7Zm9udH0gPSBzdHlsZTtcbiAgICAgICAgdGhpcy5kZEZvbnQuc2V0VGl0bGUoZm9udC5uYW1lKTtcbiAgICAgICAgdGhpcy5kZEZvbnRTaXplLnNldFRpdGxlKGZvbnQuc2l6ZSk7XG4gICAgICAgIHRoaXMuZm9udEJvbGRFbC5hY3RpdmUoZm9udC5ib2xkKTtcbiAgICAgICAgdGhpcy5mb250SXRhbGljRWwuYWN0aXZlKGZvbnQuaXRhbGljKTtcbiAgICAgICAgdGhpcy51bmRlcmxpbmVFbC5hY3RpdmUoc3R5bGUudW5kZXJsaW5lKTtcbiAgICAgICAgLy8gdGhpcy5mbGV4aWJsZUVsLmFjdGl2ZShzdHlsZS5mbGV4aWJsZSk7XG4gICAgICAgIHRoaXMuc3RyaWtlRWwuYWN0aXZlKHN0eWxlLnN0cmlrZSk7XG4gICAgICAgIHRoaXMuZGRUZXh0Q29sb3Iuc2V0VGl0bGUoc3R5bGUuY29sb3IpO1xuICAgICAgICB0aGlzLmRkRmlsbENvbG9yLnNldFRpdGxlKHN0eWxlLmJnY29sb3IpO1xuICAgICAgICB0aGlzLmRkQWxpZ24uc2V0VGl0bGUoc3R5bGUuYWxpZ24pO1xuICAgICAgICB0aGlzLmRkVkFsaWduLnNldFRpdGxlKHN0eWxlLnZhbGlnbik7XG4gICAgICAgIHRoaXMudGV4dHdyYXBFbC5hY3RpdmUoc3R5bGUudGV4dHdyYXApO1xuICAgICAgICB0aGlzLmFkZEVsLmFjdGl2ZShkYXRhLmVxdWF0aW9uSXNBY3RpdmUoKSk7XG4gICAgICAgIHRoaXMuY2xvc2VFbC5hY3RpdmUoZmFsc2UpO1xuICAgICAgICB0aGlzLnRocm93Rm9ybXVsYUVsLmFjdGl2ZShmYWxzZSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdmcmVlemUgaXMgQWN0aXZlOicsIGRhdGEuZnJlZXplSXNBY3RpdmUoKSk7XG4gICAgICAgIHRoaXMuZnJlZXplRWwuYWN0aXZlKGRhdGEuZnJlZXplSXNBY3RpdmUoKSk7XG4gICAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgICAgICBpZiAoY2VsbC5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRkRm9ybWF0LnNldFRpdGxlKGNlbGwuZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qIGdsb2JhbCBkb2N1bWVudCAqL1xuaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHtiaW5kfSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7Y3NzUHJlZml4fSBmcm9tICcuLi9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b29sdGlwKGh0bWwsIHRhcmdldCkge1xuICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge1xuICAgIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCxcbiAgfSA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXRvb2x0aXBgKS5odG1sKGh0bWwpLnNob3coKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbC5lbCk7XG4gIGNvbnN0IGVsQm94ID0gZWwuYm94KCk7XG4gIC8vIGNvbnNvbGUubG9nKCdlbEJveDonLCBlbEJveCk7XG4gIGVsLmNzcygnbGVmdCcsIGAke2xlZnQgKyAod2lkdGggLyAyKSAtIChlbEJveC53aWR0aCAvIDIpfXB4YClcbiAgICAuY3NzKCd0b3AnLCBgJHt0b3AgKyBoZWlnaHQgKyAyfXB4YCk7XG4gIGJpbmQodGFyZ2V0LCAnbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICBpZiAoZG9jdW1lbnQuYm9keS5jb250YWlucyhlbC5lbCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWwuZWwpO1xuICAgIH1cbiAgfSk7XG5cbiAgYmluZCh0YXJnZXQsICdjbGljaycsICgpID0+IHtcbiAgICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsLmVsKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbC5lbCk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCBEcm9wZG93biBmcm9tICcuL2Ryb3Bkb3duJztcbmltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgYmFzZUZvbnRzIH0gZnJvbSAnLi4vY29yZS9mb250JztcbmltcG9ydCB7IGNzc1ByZWZpeCB9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyb3Bkb3duRm9udCBleHRlbmRzIERyb3Bkb3duIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgbmZvbnRzID0gYmFzZUZvbnRzLm1hcChpdCA9PiBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW1gKVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRUaXRsZShpdC50aXRsZSk7XG4gICAgICAgIHRoaXMuY2hhbmdlKGl0KTtcbiAgICAgIH0pXG4gICAgICAuY2hpbGQoaXQudGl0bGUpKTtcbiAgICBzdXBlcihiYXNlRm9udHNbMF0udGl0bGUsICcxNjBweCcsIHRydWUsICdib3R0b20tbGVmdCcsIHt0eXBlOiBmYWxzZX0sIC4uLm5mb250cyApO1xuICB9XG59XG4iLCJpbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bic7XG5pbXBvcnQgeyBoIH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7IGZvbnRTaXplcyB9IGZyb20gJy4uL2NvcmUvZm9udCc7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wZG93bkZvbnRTaXplIGV4dGVuZHMgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBuZm9udFNpemVzID0gZm9udFNpemVzLm1hcChpdCA9PiBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW1gKVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRUaXRsZShgJHtpdC5wdH1gKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UoaXQpO1xuICAgICAgfSlcbiAgICAgIC5jaGlsZChgJHtpdC5wdH1gKSk7XG4gICAgc3VwZXIoJzEwJywgJzYwcHgnLCB0cnVlLCAnYm90dG9tLWxlZnQnLCB7dHlwZTogZmFsc2V9LCAuLi5uZm9udFNpemVzICk7XG4gIH1cbn1cbiIsImltcG9ydCBEcm9wZG93biBmcm9tICcuL2Ryb3Bkb3duJztcbmltcG9ydCB7aH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7YmFzZUZvcm1hdHN9IGZyb20gJy4uL2NvcmUvZm9ybWF0JztcbmltcG9ydCB7Y3NzUHJlZml4fSBmcm9tICcuLi9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wZG93bkZvcm1hdCBleHRlbmRzIERyb3Bkb3duIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbGV0IG5mb3JtYXRzID0gYmFzZUZvcm1hdHMuc2xpY2UoMCk7XG4gICAgICAgIG5mb3JtYXRzLnNwbGljZSgxLCAwLCB7a2V5OiAnZGl2aWRlcid9KTtcbiAgICAgICAgbmZvcm1hdHMuc3BsaWNlKDUsIDAsIHtrZXk6ICdkaXZpZGVyJ30pO1xuICAgICAgICBuZm9ybWF0cyA9IG5mb3JtYXRzLm1hcCgoaXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW1gKTtcbiAgICAgICAgICAgIGlmIChpdC5rZXkgPT09ICdkaXZpZGVyJykge1xuICAgICAgICAgICAgICAgIGl0ZW0uYWRkQ2xhc3MoJ2RpdmlkZXInKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5jaGlsZChpdC50aXRsZSgpKVxuICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUaXRsZShpdC50aXRsZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlKGl0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGl0LmxhYmVsKSBpdGVtLmNoaWxkKGgoJ2RpdicsICdsYWJlbCcpLmh0bWwoaXQubGFiZWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgICAgc3VwZXIoJ05vcm1hbCcsICcyMjBweCcsIHRydWUsICdib3R0b20tbGVmdCcsIHt0eXBlOiBmYWxzZX0sIC4uLm5mb3JtYXRzICk7XG4gICAgfVxuXG4gICAgc2V0VGl0bGUoa2V5KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFzZUZvcm1hdHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChiYXNlRm9ybWF0c1tpXS5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGl0bGUuaHRtbChiYXNlRm9ybWF0c1tpXS50aXRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vZHJvcGRvd24nO1xuaW1wb3J0IEljb24gZnJvbSAnLi9pY29uJztcbmltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgYWxsRm5PYmogfSBmcm9tICcuLi9jYWxjL2NhbGNfY21kL2Zvcm11bGEnO1xuaW1wb3J0IHsgY3NzUHJlZml4IH0gZnJvbSAnLi4vY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJvcGRvd25Gb3JtdWxhIGV4dGVuZHMgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBuZm9ybXVsYXMgPSBhbGxGbk9iai5tYXAoaXQgPT4gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1pdGVtYClcbiAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLmNoYW5nZShpdCk7XG4gICAgICB9KVxuICAgICAgLmNoaWxkKGl0LmtleSkpO1xuICAgIHN1cGVyKG5ldyBJY29uKCdjZWxsRm9ybXVsYVByb3h5JyksICcxODBweCcsIHRydWUsICdib3R0b20tbGVmdCcsIHt0eXBlOiBmYWxzZX0sIC4uLm5mb3JtdWxhcyApO1xuICB9XG59XG4iLCJpbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bic7XG5pbXBvcnQgeyBoIH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCBJY29uIGZyb20gJy4vaWNvbic7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuXG5mdW5jdGlvbiBidWlsZEl0ZW1XaXRoSWNvbihpY29uTmFtZSkge1xuICByZXR1cm4gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1pdGVtYCkuY2hpbGQobmV3IEljb24oaWNvbk5hbWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJvcGRvd25BbGlnbiBleHRlbmRzIERyb3Bkb3duIHtcbiAgY29uc3RydWN0b3IoYWxpZ25zLCBhbGlnbikge1xuICAgIGNvbnN0IGljb24gPSBuZXcgSWNvbihgYWxpZ24tJHthbGlnbn1gKTtcbiAgICBjb25zdCBuYWxpZ25zID0gYWxpZ25zLm1hcChpdCA9PiBidWlsZEl0ZW1XaXRoSWNvbihgYWxpZ24tJHtpdH1gKVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRUaXRsZShpdCk7XG4gICAgICAgIHRoaXMuY2hhbmdlKGl0KTtcbiAgICAgIH0pKTtcbiAgICBzdXBlcihpY29uLCAnYXV0bycsIHRydWUsICdib3R0b20tbGVmdCcsICB7dHlwZTogZmFsc2V9LCAuLi5uYWxpZ25zICk7XG4gIH1cblxuICBzZXRUaXRsZShhbGlnbikge1xuICAgIHRoaXMudGl0bGUuc2V0TmFtZShgYWxpZ24tJHthbGlnbn1gKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vZHJvcGRvd24nO1xuaW1wb3J0IEljb24gZnJvbSAnLi9pY29uJztcbmltcG9ydCBCb3JkZXJQYWxldHRlIGZyb20gJy4vYm9yZGVyX3BhbGV0dGUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wZG93bkJvcmRlciBleHRlbmRzIERyb3Bkb3duIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgaWNvbiA9IG5ldyBJY29uKCdib3JkZXItYWxsJyk7XG4gICAgY29uc3QgYm9yZGVyUGFsZXR0ZSA9IG5ldyBCb3JkZXJQYWxldHRlKCk7XG4gICAgYm9yZGVyUGFsZXR0ZS5jaGFuZ2UgPSAodikgPT4ge1xuICAgICAgdGhpcy5jaGFuZ2Uodik7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuICAgIHN1cGVyKGljb24sICdhdXRvJywgZmFsc2UsICdib3R0b20tbGVmdCcsIHt0eXBlOiBmYWxzZX0sIGJvcmRlclBhbGV0dGUuZWwgKTtcbiAgICB0aGlzLmJvcmRlclBhbGV0dGUgPSBib3JkZXJQYWxldHRlO1xuICB9XG59XG5cbiIsImltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi9pY29uJztcbmltcG9ydCBEcm9wZG93bkNvbG9yIGZyb20gJy4vZHJvcGRvd25fY29sb3InO1xuaW1wb3J0IERyb3Bkb3duTGluZVR5cGUgZnJvbSAnLi9kcm9wZG93bl9saW5ldHlwZSc7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuXG5mdW5jdGlvbiBidWlsZFRhYmxlKC4uLnRycykge1xuICByZXR1cm4gaCgndGFibGUnLCAnJykuY2hpbGQoXG4gICAgaCgndGJvZHknLCAnJykuY2hpbGRyZW4oLi4udHJzKSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gYnVpbGRUZChpY29uTmFtZSkge1xuICBsZXQgaXRlbSA9ICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWJvcmRlci1wYWxldHRlLWNlbGxgKTtcbiAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xuICByZXR1cm4gaCgndGQnLCAnJykuY2hpbGQoXG4gICAgaXRlbS5jaGlsZChcbiAgICAgIG5ldyBJY29uKGBib3JkZXItJHtpY29uTmFtZX1gKSxcbiAgICApLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMubW9kZSA9IGljb25OYW1lO1xuICAgICAgY29uc3QgeyBtb2RlLCBzdHlsZSwgY29sb3IgfSA9IHRoaXM7XG4gICAgICB0aGlzLmNoYW5nZSh7IG1vZGUsIHN0eWxlLCBjb2xvciB9KTtcbiAgICB9KSxcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9yZGVyUGFsZXR0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29sb3IgPSAnIzAwMCc7XG4gICAgdGhpcy5zdHlsZSA9ICd0aGluJztcbiAgICB0aGlzLm1vZGUgPSAnYWxsJztcbiAgICB0aGlzLmNoYW5nZSA9ICgpID0+IHt9O1xuICAgIHRoaXMuZGRDb2xvciA9IG5ldyBEcm9wZG93bkNvbG9yKCdsaW5lLWNvbG9yJywgdGhpcy5jb2xvcik7XG4gICAgdGhpcy5kZENvbG9yLmNoYW5nZSA9IChjb2xvcikgPT4ge1xuICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgIH07XG4gICAgdGhpcy5kZFR5cGUgPSBuZXcgRHJvcGRvd25MaW5lVHlwZSh0aGlzLnN0eWxlKTtcbiAgICB0aGlzLmRkVHlwZS5jaGFuZ2UgPSAoW3NdKSA9PiB7XG4gICAgICB0aGlzLnN0eWxlID0gcztcbiAgICB9O1xuICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWJvcmRlci1wYWxldHRlYCk7XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuXG4gICAgY29uc3QgdGFibGUgPSBidWlsZFRhYmxlKFxuICAgICAgaCgndHInLCAnJykuY2hpbGRyZW4oXG4gICAgICAgIGgoJ3RkJywgYCR7Y3NzUHJlZml4fS1ib3JkZXItcGFsZXR0ZS1sZWZ0YCkuY2hpbGQoXG4gICAgICAgICAgYnVpbGRUYWJsZShcbiAgICAgICAgICAgIGgoJ3RyJywgJycpLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAuLi5bJ2FsbCcsICdpbnNpZGUnLCAnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICdvdXRzaWRlJ10ubWFwKGl0ID0+IGJ1aWxkVGQuY2FsbCh0aGlzLCBpdCkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGgoJ3RyJywgJycpLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAuLi5bJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdub25lJ10ubWFwKGl0ID0+IGJ1aWxkVGQuY2FsbCh0aGlzLCBpdCkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICAgICBoKCd0ZCcsIGAke2Nzc1ByZWZpeH0tYm9yZGVyLXBhbGV0dGUtcmlnaHRgKS5jaGlsZHJlbihcbiAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXRvb2xiYXItYnRuYCkuY2hpbGQodGhpcy5kZENvbG9yLmVsKSxcbiAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXRvb2xiYXItYnRuYCkuY2hpbGQodGhpcy5kZFR5cGUuZWwpLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICApO1xuICAgIHRoaXMuZWwuY2hpbGQodGFibGUpO1xuICB9XG59XG4iLCJpbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bic7XG5pbXBvcnQgeyBoIH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCBJY29uIGZyb20gJy4vaWNvbic7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCBsaW5lVHlwZXMgPSBbXG4gIFsndGhpbicsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjUwXCIgaGVpZ2h0PVwiMVwiIHN0eWxlPVwidXNlci1zZWxlY3Q6IG5vbmU7XCI+PGxpbmUgeDE9XCIwXCIgeTE9XCIwLjVcIiB4Mj1cIjUwXCIgeTI9XCIwLjVcIiBzdHJva2Utd2lkdGg9XCIxXCIgc3Ryb2tlPVwiYmxhY2tcIiBzdHlsZT1cInVzZXItc2VsZWN0OiBub25lO1wiPjwvbGluZT48L3N2Zz4nXSxcbiAgWydtZWRpdW0nLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjJcIiBzdHlsZT1cInVzZXItc2VsZWN0OiBub25lO1wiPjxsaW5lIHgxPVwiMFwiIHkxPVwiMS4wXCIgeDI9XCI1MFwiIHkyPVwiMS4wXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZT1cImJsYWNrXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48L2xpbmU+PC9zdmc+J10sXG4gIFsndGhpY2snLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjNcIiBzdHlsZT1cInVzZXItc2VsZWN0OiBub25lO1wiPjxsaW5lIHgxPVwiMFwiIHkxPVwiMS41XCIgeDI9XCI1MFwiIHkyPVwiMS41XCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZT1cImJsYWNrXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48L2xpbmU+PC9zdmc+J10sXG4gIFsnZGFzaGVkJywgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCIxXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48bGluZSB4MT1cIjBcIiB5MT1cIjAuNVwiIHgyPVwiNTBcIiB5Mj1cIjAuNVwiIHN0cm9rZS13aWR0aD1cIjFcIiBzdHJva2U9XCJibGFja1wiIHN0cm9rZS1kYXNoYXJyYXk9XCIyXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48L2xpbmU+PC9zdmc+J10sXG4gIFsnZG90dGVkJywgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCIxXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48bGluZSB4MT1cIjBcIiB5MT1cIjAuNVwiIHgyPVwiNTBcIiB5Mj1cIjAuNVwiIHN0cm9rZS13aWR0aD1cIjFcIiBzdHJva2U9XCJibGFja1wiIHN0cm9rZS1kYXNoYXJyYXk9XCIxXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48L2xpbmU+PC9zdmc+J10sXG4gIC8vIFsnZG91YmxlJywgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCIzXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48bGluZSB4MT1cIjBcIiB5MT1cIjAuNVwiIHgyPVwiNTBcIiB5Mj1cIjAuNVwiIHN0cm9rZS13aWR0aD1cIjFcIiBzdHJva2U9XCJibGFja1wiIHN0eWxlPVwidXNlci1zZWxlY3Q6IG5vbmU7XCI+PC9saW5lPjxsaW5lIHgxPVwiMFwiIHkxPVwiMi41XCIgeDI9XCI1MFwiIHkyPVwiMi41XCIgc3Ryb2tlLXdpZHRoPVwiMVwiIHN0cm9rZT1cImJsYWNrXCIgc3R5bGU9XCJ1c2VyLXNlbGVjdDogbm9uZTtcIj48L2xpbmU+PC9zdmc+J10sXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wZG93bkxpbmVUeXBlIGV4dGVuZHMgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgY29uc3QgaWNvbiA9IG5ldyBJY29uKCdsaW5lLXR5cGUnKTtcbiAgICBsZXQgYmVmb3JlaSA9IDA7XG4gICAgY29uc3QgbGluZVR5cGVFbHMgPSBsaW5lVHlwZXMubWFwKChpdCwgaXRpKSA9PiBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW0gc3RhdGUgJHt0eXBlID09PSBpdFswXSA/ICdjaGVja2VkJyA6ICcnfWApXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBsaW5lVHlwZUVsc1tiZWZvcmVpXS50b2dnbGUoJ2NoZWNrZWQnKTtcbiAgICAgICAgbGluZVR5cGVFbHNbaXRpXS50b2dnbGUoJ2NoZWNrZWQnKTtcbiAgICAgICAgYmVmb3JlaSA9IGl0aTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlKGl0KTtcbiAgICAgIH0pXG4gICAgICAuY2hpbGQoXG4gICAgICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tbGluZS10eXBlYCkuaHRtbChpdFsxXSksXG4gICAgICApKTtcblxuICAgIHN1cGVyKGljb24sICdhdXRvJywgZmFsc2UsICdib3R0b20tbGVmdCcsIHt0eXBlOiBmYWxzZX0sIC4uLmxpbmVUeXBlRWxzICk7XG4gIH1cbn1cbiIsImltcG9ydCBEcm9wZG93biBmcm9tIFwiLi9kcm9wZG93blwiO1xuaW1wb3J0IEljb24gZnJvbSBcIi4vaWNvblwiO1xuaW1wb3J0IEhpc3RvcnlCb3JkZXIgZnJvbSBcIi4vaGlzdG9yeV9ib3JkZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJvcGRvd25BY3Rpb24gZXh0ZW5kcyBEcm9wZG93biB7XG4gICAgY29uc3RydWN0b3IoaWNvbk5hbWUsIGNoYW5nZSwgYXJyb3dDaGFuZ2UpIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IG5ldyBJY29uKGljb25OYW1lKVxuICAgICAgICAgICAgLmNzcygnaGVpZ2h0JywgJzE4cHgnKTtcbiAgICAgICAgY29uc3QgaGlzdG9yeUJvcmRlciA9IG5ldyBIaXN0b3J5Qm9yZGVyKCk7XG4gICAgICAgIHN1cGVyKGljb24sICdhdXRvJywgdHJ1ZSwgJ2JvdHRvbS1sZWZ0Jywge3R5cGU6IHRydWUsIGNoYW5nZTogY2hhbmdlLCBhcnJvd0NoYW5nZTogYXJyb3dDaGFuZ2UsIGhpc3RvcnlCb3JkZXJ9LCBoaXN0b3J5Qm9yZGVyLmVsKTtcbiAgICB9XG59IiwiaW1wb3J0IHtofSBmcm9tIFwiLi9lbGVtZW50XCI7XG5pbXBvcnQge2Nzc1ByZWZpeH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIaXN0b3J5Qm9yZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taGlzdG9yeS1ib3JkZXJgKTtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1oaXN0b3J5LWNvbnRlbnRgKS5odG1sKCfmmoLml6DlhoXlrrknKTtcbiAgICAgICAgdGhpcy5lbC5jaGlsZCggdGhpcy5oaXN0b3J5KTtcbiAgICB9XG5cbiAgICBzZXRDb250ZW50KGl0ZW1zKSB7XG4gICAgICAgIGl0ZW1zID0gaXRlbXMuc2xpY2UoaXRlbXMubGVuZ3RoIC0gMTAwIDwgMCA/IDAgOiBpdGVtcy5sZW5ndGgsIGl0ZW1zLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZWwuaHRtbCgnJyk7XG4gICAgICAgIGxldCBlbHMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCBkID0gaCgnZGl2JywgJycpO1xuICAgICAgICAgICAgbGV0IHthY3Rpb259ID0gaXRlbXNbaV07XG4gICAgICAgICAgICBkLmh0bWwoYWN0aW9uKTtcbiAgICAgICAgICAgIGVscy5wdXNoKGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2codGhpcywgdGhpcy5lbCk7XG4gICAgICAgIHRoaXMuZWwuY2hpbGRyZW4oLi4uZWxzKTtcbiAgICB9XG59IiwiaW1wb3J0IE1vZGFsIGZyb20gJy4vbW9kYWwnO1xuaW1wb3J0IEZvcm1JbnB1dCBmcm9tICcuL2Zvcm1faW5wdXQnO1xuaW1wb3J0IEZvcm1TZWxlY3QgZnJvbSAnLi9mb3JtX3NlbGVjdCc7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4vZm9ybV9maWVsZCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCB7IHQgfSBmcm9tICcuLi9sb2NhbGUvbG9jYWxlJztcbmltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgY3NzUHJlZml4IH0gZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgZmllbGRMYWJlbFdpZHRoID0gMTAwO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbFZhbGlkYXRpb24gZXh0ZW5kcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IG1mID0gbmV3IEZvcm1GaWVsZChcbiAgICAgIG5ldyBGb3JtU2VsZWN0KCdjZWxsJyxcbiAgICAgICAgWydjZWxsJ10sIC8vIGNlbGx8cm93fGNvbHVtblxuICAgICAgICAnMTAwJScsXG4gICAgICAgIGl0ID0+IHQoYGRhdGFWYWxpZGF0aW9uLm1vZGVUeXBlLiR7aXR9YCkpLFxuICAgICAgeyByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgYCR7dCgnZGF0YVZhbGlkYXRpb24ucmFuZ2UnKX06YCxcbiAgICAgIGZpZWxkTGFiZWxXaWR0aCxcbiAgICApO1xuICAgIGNvbnN0IHJmID0gbmV3IEZvcm1GaWVsZChcbiAgICAgIG5ldyBGb3JtSW5wdXQoJzEyMHB4JywgJ0UzIG9yIEUzOkYxMicpLFxuICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgcGF0dGVybjogL14oW0EtWl17MSwyfVsxLTldXFxkKikoOltBLVpdezEsMn1bMS05XVxcZCopPyQvIH0sXG4gICAgKTtcbiAgICBjb25zdCBjZiA9IG5ldyBGb3JtRmllbGQoXG4gICAgICBuZXcgRm9ybVNlbGVjdCgnbGlzdCcsXG4gICAgICAgIFsnbGlzdCcsICdudW1iZXInLCAnZGF0ZScsICdwaG9uZScsICdlbWFpbCddLFxuICAgICAgICAnMTAwJScsXG4gICAgICAgIGl0ID0+IHQoYGRhdGFWYWxpZGF0aW9uLnR5cGUuJHtpdH1gKSxcbiAgICAgICAgaXQgPT4gdGhpcy5jcml0ZXJpYVNlbGVjdGVkKGl0KSksXG4gICAgICB7IHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICBgJHt0KCdkYXRhVmFsaWRhdGlvbi5jcml0ZXJpYScpfTpgLFxuICAgICAgZmllbGRMYWJlbFdpZHRoLFxuICAgICk7XG5cbiAgICAvLyBvcGVyYXRvclxuICAgIGNvbnN0IG9mID0gbmV3IEZvcm1GaWVsZChcbiAgICAgIG5ldyBGb3JtU2VsZWN0KCdiZScsXG4gICAgICAgIFsnYmUnLCAnbmJlJywgJ2VxJywgJ25lcScsICdsdCcsICdsdGUnLCAnZ3QnLCAnZ3RlJ10sXG4gICAgICAgICcxNjBweCcsXG4gICAgICAgIGl0ID0+IHQoYGRhdGFWYWxpZGF0aW9uLm9wZXJhdG9yLiR7aXR9YCksXG4gICAgICAgIGl0ID0+IHRoaXMuY3JpdGVyaWFPcGVyYXRvclNlbGVjdGVkKGl0KSksXG4gICAgICB7IHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgKS5oaWRlKCk7XG4gICAgLy8gbWluLCBtYXhcbiAgICBjb25zdCBtaW52ZiA9IG5ldyBGb3JtRmllbGQoXG4gICAgICBuZXcgRm9ybUlucHV0KCc3MHB4JywgJzEwJyksXG4gICAgICB7IHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgKS5oaWRlKCk7XG4gICAgY29uc3QgbWF4dmYgPSBuZXcgRm9ybUZpZWxkKFxuICAgICAgbmV3IEZvcm1JbnB1dCgnNzBweCcsICcxMDAnKSxcbiAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0sXG4gICAgKS5oaWRlKCk7XG4gICAgLy8gdmFsdWVcbiAgICBjb25zdCBzdmYgPSBuZXcgRm9ybUZpZWxkKFxuICAgICAgbmV3IEZvcm1JbnB1dCgnMTIwcHgnLCAnYSxiLGMnKSxcbiAgICAgIHsgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICApO1xuICAgIGNvbnN0IHZmID0gbmV3IEZvcm1GaWVsZChcbiAgICAgIG5ldyBGb3JtSW5wdXQoJzcwcHgnLCAnMTAnKSxcbiAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdudW1iZXInIH0sXG4gICAgKS5oaWRlKCk7XG5cbiAgICBzdXBlcih0KCdjb250ZXh0bWVudS52YWxpZGF0aW9uJyksIFtcbiAgICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZm9ybS1maWVsZHNgKS5jaGlsZHJlbihcbiAgICAgICAgbWYuZWwsXG4gICAgICAgIHJmLmVsLFxuICAgICAgKSxcbiAgICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZm9ybS1maWVsZHNgKS5jaGlsZHJlbihcbiAgICAgICAgY2YuZWwsXG4gICAgICAgIG9mLmVsLFxuICAgICAgICBtaW52Zi5lbCxcbiAgICAgICAgbWF4dmYuZWwsXG4gICAgICAgIHZmLmVsLFxuICAgICAgICBzdmYuZWwsXG4gICAgICApLFxuICAgICAgaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1idXR0b25zYCkuY2hpbGRyZW4oXG4gICAgICAgIG5ldyBCdXR0b24oJ2NhbmNlbCcpLm9uKCdjbGljaycsICgpID0+IHRoaXMuYnRuQ2xpY2soJ2NhbmNlbCcpKSxcbiAgICAgICAgbmV3IEJ1dHRvbigncmVtb3ZlJykub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5idG5DbGljaygncmVtb3ZlJykpLFxuICAgICAgICBuZXcgQnV0dG9uKCdzYXZlJywgJ3ByaW1hcnknKS5vbignY2xpY2snLCAoKSA9PiB0aGlzLmJ0bkNsaWNrKCdzYXZlJykpLFxuICAgICAgKSxcbiAgICBdKTtcbiAgICB0aGlzLm1mID0gbWY7XG4gICAgdGhpcy5yZiA9IHJmO1xuICAgIHRoaXMuY2YgPSBjZjtcbiAgICB0aGlzLm9mID0gb2Y7XG4gICAgdGhpcy5taW52ZiA9IG1pbnZmO1xuICAgIHRoaXMubWF4dmYgPSBtYXh2ZjtcbiAgICB0aGlzLnZmID0gdmY7XG4gICAgdGhpcy5zdmYgPSBzdmY7XG4gICAgdGhpcy5jaGFuZ2UgPSAoKSA9PiB7fTtcbiAgfVxuXG4gIC8vIHNob3dWZihpdCkge1xuICAvLyAgIGNvbnN0IGhpbnQgPSBpdCA9PT0gJ2RhdGUnID8gJzIwMTgtMTEtMTInIDogJzEwJztcbiAgLy8gICBjb25zdCB7IHZmIH0gPSB0aGlzO1xuICAvLyAgIHZmLmlucHV0LmhpbnQoaGludCk7XG4gIC8vICAgdmYuc2hvdygpO1xuICAvLyB9XG5cbiAgY3JpdGVyaWFTZWxlY3RlZChpdCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9mLCBtaW52ZiwgbWF4dmYsIHZmLCBzdmYsXG4gICAgfSA9IHRoaXM7XG4gICAgaWYgKGl0ID09PSAnZGF0ZScgfHwgaXQgPT09ICdudW1iZXInKSB7XG4gICAgICBvZi5zaG93KCk7XG4gICAgICBtaW52Zi5ydWxlLnR5cGUgPSBpdDtcbiAgICAgIG1heHZmLnJ1bGUudHlwZSA9IGl0O1xuICAgICAgaWYgKGl0ID09PSAnZGF0ZScpIHtcbiAgICAgICAgbWludmYuaGludCgnMjAxOC0xMS0xMicpO1xuICAgICAgICBtYXh2Zi5oaW50KCcyMDE5LTExLTEyJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtaW52Zi5oaW50KCcxMCcpO1xuICAgICAgICBtYXh2Zi5oaW50KCcxMDAnKTtcbiAgICAgIH1cbiAgICAgIG1pbnZmLnNob3coKTtcbiAgICAgIG1heHZmLnNob3coKTtcbiAgICAgIHZmLmhpZGUoKTtcbiAgICAgIHN2Zi5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpdCA9PT0gJ2xpc3QnKSB7XG4gICAgICAgIHN2Zi5zaG93KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdmYuaGlkZSgpO1xuICAgICAgfVxuICAgICAgdmYuaGlkZSgpO1xuICAgICAgb2YuaGlkZSgpO1xuICAgICAgbWludmYuaGlkZSgpO1xuICAgICAgbWF4dmYuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNyaXRlcmlhT3BlcmF0b3JTZWxlY3RlZChpdCkge1xuICAgIGlmICghaXQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBtaW52ZiwgbWF4dmYsIHZmLFxuICAgIH0gPSB0aGlzO1xuICAgIGlmIChpdCA9PT0gJ2JlJyB8fCBpdCA9PT0gJ25iZScpIHtcbiAgICAgIG1pbnZmLnNob3coKTtcbiAgICAgIG1heHZmLnNob3coKTtcbiAgICAgIHZmLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdHlwZSA9IHRoaXMuY2YudmFsKCk7XG4gICAgICB2Zi5ydWxlLnR5cGUgPSB0eXBlO1xuICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICB2Zi5oaW50KCcyMDE4LTExLTEyJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2Zi5oaW50KCcxMCcpO1xuICAgICAgfVxuICAgICAgdmYuc2hvdygpO1xuICAgICAgbWludmYuaGlkZSgpO1xuICAgICAgbWF4dmYuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGJ0bkNsaWNrKGFjdGlvbikge1xuICAgIGlmIChhY3Rpb24gPT09ICdjYW5jZWwnKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ3JlbW92ZScpIHtcbiAgICAgIHRoaXMuY2hhbmdlKCdyZW1vdmUnKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAnc2F2ZScpIHtcbiAgICAgIC8vIHZhbGlkYXRlXG4gICAgICBjb25zdCBhdHRycyA9IFsnbWYnLCAncmYnLCAnY2YnLCAnb2YnLCAnc3ZmJywgJ3ZmJywgJ21pbnZmJywgJ21heHZmJ107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdGhpc1thdHRyc1tpXV07XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdmaWVsZDonLCBmaWVsZCk7XG4gICAgICAgIGlmIChmaWVsZC5pc1Nob3coKSkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdpdDonLCBpdCk7XG4gICAgICAgICAgaWYgKCFmaWVsZC52YWxpZGF0ZSgpKSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9kZSA9IHRoaXMubWYudmFsKCk7XG4gICAgICBjb25zdCByZWYgPSB0aGlzLnJmLnZhbCgpO1xuICAgICAgY29uc3QgdHlwZSA9IHRoaXMuY2YudmFsKCk7XG4gICAgICBjb25zdCBvcGVyYXRvciA9IHRoaXMub2YudmFsKCk7XG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLnN2Zi52YWwoKTtcbiAgICAgIGlmICh0eXBlID09PSAnbnVtYmVyJyB8fCB0eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnYmUnIHx8IG9wZXJhdG9yID09PSAnbmJlJykge1xuICAgICAgICAgIHZhbHVlID0gW3RoaXMubWludmYudmFsKCksIHRoaXMubWF4dmYudmFsKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy52Zi52YWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2cobW9kZSwgcmVmLCB0eXBlLCBvcGVyYXRvciwgdmFsdWUpO1xuICAgICAgdGhpcy5jaGFuZ2UoJ3NhdmUnLFxuICAgICAgICBtb2RlLFxuICAgICAgICByZWYsXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlLCBvcGVyYXRvciwgcmVxdWlyZWQ6IGZhbHNlLCB2YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICAvLyB2YWxpZGF0aW9uOiB7IG1vZGUsIHJlZiwgdmFsaWRhdG9yIH1cbiAgc2V0VmFsdWUodikge1xuICAgIGlmICh2KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1mLCByZiwgY2YsIG9mLCBzdmYsIHZmLCBtaW52ZiwgbWF4dmYsXG4gICAgICB9ID0gdGhpcztcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbW9kZSwgcmVmLCB2YWxpZGF0b3IsXG4gICAgICB9ID0gdjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdHlwZSwgb3BlcmF0b3IsIHZhbHVlLFxuICAgICAgfSA9IHZhbGlkYXRvciB8fCB7IHR5cGU6ICdsaXN0JyB9O1xuICAgICAgbWYudmFsKG1vZGUgfHwgJ2NlbGwnKTtcbiAgICAgIHJmLnZhbChyZWYpO1xuICAgICAgY2YudmFsKHR5cGUpO1xuICAgICAgb2YudmFsKG9wZXJhdG9yKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBtaW52Zi52YWwodmFsdWVbMF0pO1xuICAgICAgICBtYXh2Zi52YWwodmFsdWVbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3ZmLnZhbCh2YWx1ZSB8fCAnJyk7XG4gICAgICAgIHZmLnZhbCh2YWx1ZSB8fCAnJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNyaXRlcmlhU2VsZWN0ZWQodHlwZSk7XG4gICAgICB0aGlzLmNyaXRlcmlhT3BlcmF0b3JTZWxlY3RlZChvcGVyYXRvcik7XG4gICAgfVxuICAgIHRoaXMuc2hvdygpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7IGNzc1ByZWZpeCB9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1JbnB1dCB7XG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoaW50KSB7XG4gICAgdGhpcy52Y2hhbmdlID0gKCkgPT4ge307XG4gICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZm9ybS1pbnB1dGApO1xuICAgIHRoaXMuaW5wdXQgPSBoKCdpbnB1dCcsICcnKS5jc3MoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAub24oJ2lucHV0JywgZXZ0ID0+IHRoaXMudmNoYW5nZShldnQpKVxuICAgICAgLmF0dHIoJ3BsYWNlaG9sZGVyJywgaGludCk7XG4gICAgdGhpcy5lbC5jaGlsZCh0aGlzLmlucHV0KTtcbiAgfVxuXG4gIGhpbnQodikge1xuICAgIHRoaXMuaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCB2KTtcbiAgfVxuXG4gIHZhbCh2KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsKHYpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCBTdWdnZXN0IGZyb20gJy4vc3VnZ2VzdCc7XG5pbXBvcnQgeyBjc3NQcmVmaXggfSBmcm9tICcuLi9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtU2VsZWN0IHtcbiAgY29uc3RydWN0b3Ioa2V5LCBpdGVtcywgd2lkdGgsIGdldFRpdGxlID0gaXQgPT4gaXQsIGNoYW5nZSA9ICgpID0+IHt9KSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5nZXRUaXRsZSA9IGdldFRpdGxlO1xuICAgIHRoaXMudmNoYW5nZSA9ICgpID0+IHt9O1xuICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWZvcm0tc2VsZWN0YCk7XG4gICAgdGhpcy5zdWdnZXN0ID0gbmV3IFN1Z2dlc3QoaXRlbXMubWFwKGl0ID0+ICh7IGtleTogaXQsIHRpdGxlOiB0aGlzLmdldFRpdGxlKGl0KSB9KSksIChpdCkgPT4ge1xuICAgICAgdGhpcy5pdGVtQ2xpY2soaXQua2V5KTtcbiAgICAgIGNoYW5nZShpdC5rZXkpO1xuICAgICAgdGhpcy52Y2hhbmdlKGl0LmtleSk7XG4gICAgfSwgd2lkdGgsIHRoaXMuZWwpO1xuICAgIHRoaXMuZWwuY2hpbGRyZW4oXG4gICAgICB0aGlzLml0ZW1FbCA9IGgoJ2RpdicsICdpbnB1dC10ZXh0JykuaHRtbCh0aGlzLmdldFRpdGxlKGtleSkpLFxuICAgICAgdGhpcy5zdWdnZXN0LmVsLFxuICAgICkub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5zaG93KCkpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLnN1Z2dlc3Quc2VhcmNoKCcnKTtcbiAgfVxuXG4gIGl0ZW1DbGljayhpdCkge1xuICAgIHRoaXMua2V5ID0gaXQ7XG4gICAgdGhpcy5pdGVtRWwuaHRtbCh0aGlzLmdldFRpdGxlKGl0KSk7XG4gIH1cblxuICB2YWwodikge1xuICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMua2V5ID0gdjtcbiAgICAgIHRoaXMuaXRlbUVsLmh0bWwodGhpcy5nZXRUaXRsZSh2KSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMua2V5O1xuICB9XG59XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7IGNzc1ByZWZpeCB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0IH0gZnJvbSAnLi4vbG9jYWxlL2xvY2FsZSc7XG5cbmNvbnN0IHBhdHRlcm5zID0ge1xuICBudW1iZXI6IC8oXlxcZCskKXwoXlxcZCsoXFwuXFxkezAsNH0pPyQpLyxcbiAgZGF0ZTogL15cXGR7NH0tXFxkezEsMn0tXFxkezEsMn0kLyxcbn07XG5cbi8vIHJ1bGU6IHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlLCBwYXR0ZXJuOiAvLyB9XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtRmllbGQge1xuICBjb25zdHJ1Y3RvcihpbnB1dCwgcnVsZSwgbGFiZWwsIGxhYmVsV2lkdGgpIHtcbiAgICB0aGlzLmxhYmVsID0gJyc7XG4gICAgdGhpcy5ydWxlID0gcnVsZTtcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwgPSBoKCdsYWJlbCcsICdsYWJlbCcpLmNzcygnd2lkdGgnLCBgJHtsYWJlbFdpZHRofXB4YCkuaHRtbChsYWJlbCk7XG4gICAgfVxuICAgIHRoaXMudGlwID0gaCgnZGl2JywgJ3RpcCcpLmNoaWxkKCd0aXAnKS5oaWRlKCk7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMuaW5wdXQudmNoYW5nZSA9ICgpID0+IHRoaXMudmFsaWRhdGUoKTtcbiAgICB0aGlzLmVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1mb3JtLWZpZWxkYClcbiAgICAgIC5jaGlsZHJlbih0aGlzLmxhYmVsLCBpbnB1dC5lbCwgdGhpcy50aXApO1xuICB9XG5cbiAgaXNTaG93KCkge1xuICAgIHJldHVybiB0aGlzLmVsLmNzcygnZGlzcGxheScpICE9PSAnbm9uZSc7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHRoaXMuZWwuc2hvdygpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLmVsLmhpZGUoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhbCh2KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsKHYpO1xuICB9XG5cbiAgaGludChoaW50KSB7XG4gICAgdGhpcy5pbnB1dC5oaW50KGhpbnQpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaW5wdXQsIHJ1bGUsIHRpcCwgZWwsXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgdiA9IGlucHV0LnZhbCgpO1xuICAgIGlmIChydWxlLnJlcXVpcmVkKSB7XG4gICAgICBpZiAoL15cXHMqJC8udGVzdCh2KSkge1xuICAgICAgICB0aXAuaHRtbCh0KCd2YWxpZGF0aW9uLnJlcXVpcmVkJykpO1xuICAgICAgICBlbC5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocnVsZS50eXBlIHx8IHJ1bGUucGF0dGVybikge1xuICAgICAgY29uc3QgcGF0dGVybiA9IHJ1bGUucGF0dGVybiB8fCBwYXR0ZXJuc1tydWxlLnR5cGVdO1xuICAgICAgaWYgKCFwYXR0ZXJuLnRlc3QodikpIHtcbiAgICAgICAgdGlwLmh0bWwodCgndmFsaWRhdGlvbi5ub3RNYXRjaCcpKTtcbiAgICAgICAgZWwuYWRkQ2xhc3MoJ2Vycm9yJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsImltcG9ydCB7aH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHtiaW5kQ2xpY2tvdXRzaWRlLCB1bmJpbmRDbGlja291dHNpZGV9IGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge3R9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGUnO1xuXG5mdW5jdGlvbiBidWlsZE1lbnUoY2xzTmFtZSkge1xuICAgIHJldHVybiBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW0gJHtjbHNOYW1lfWApO1xufVxuXG5mdW5jdGlvbiBidWlsZFNvcnRJdGVtKGl0KSB7XG4gICAgcmV0dXJuIGJ1aWxkTWVudSgnc3RhdGUnKS5jaGlsZCh0KGBzb3J0LiR7aXR9YCkpXG4gICAgICAgIC5vbignY2xpY2suc3RvcCcsICgpID0+IHRoaXMuaXRlbUNsaWNrKGl0KSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRmlsdGVyQm9keShpdGVtcykge1xuICAgIGNvbnN0IHtmaWx0ZXJiRWwsIGZpbHRlclZhbHVlc30gPSB0aGlzO1xuICAgIGZpbHRlcmJFbC5odG1sKCcnKTtcbiAgICBjb25zdCBpdGVtS2V5cyA9IE9iamVjdC5rZXlzKGl0ZW1zKTtcbiAgICBpdGVtS2V5cy5mb3JFYWNoKChpdCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY250ID0gaXRlbXNbaXRdO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBmaWx0ZXJWYWx1ZXMuaW5jbHVkZXMoaXQpID8gJ2NoZWNrZWQnIDogJyc7XG4gICAgICAgIGZpbHRlcmJFbC5jaGlsZChoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWl0ZW0gc3RhdGUgJHthY3RpdmV9YClcbiAgICAgICAgICAgIC5vbignY2xpY2suc3RvcCcsICgpID0+IHRoaXMuZmlsdGVyQ2xpY2soaW5kZXgsIGl0KSlcbiAgICAgICAgICAgIC5jaGlsZHJlbihpdCA9PT0gJycgPyB0KCdmaWx0ZXIuZW1wdHknKSA6IGl0LCBoKCdkaXYnLCAnbGFiZWwnKS5odG1sKGAoJHtjbnR9KWApKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0RmlsdGVySGVhZGVyKCkge1xuICAgIGNvbnN0IHtmaWx0ZXJoRWwsIGZpbHRlclZhbHVlcywgdmFsdWVzfSA9IHRoaXM7XG4gICAgZmlsdGVyaEVsLmh0bWwoYCR7ZmlsdGVyVmFsdWVzLmxlbmd0aH0gLyAke3ZhbHVlcy5sZW5ndGh9YCk7XG4gICAgZmlsdGVyaEVsLmNoZWNrZWQoZmlsdGVyVmFsdWVzLmxlbmd0aCA9PT0gdmFsdWVzLmxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvcnRGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmZpbHRlcmJFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tYm9keWApO1xuICAgICAgICB0aGlzLmZpbHRlcmhFbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0taGVhZGVyIHN0YXRlYCkub24oJ2NsaWNrLnN0b3AnLCAoKSA9PiB0aGlzLmZpbHRlckNsaWNrKDAsICdhbGwnKSk7XG4gICAgICAgIHRoaXMudGluZGV4ID0gMTtcbiAgICAgICAgdGhpcy5lbCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tc29ydC1maWx0ZXJgKS5jaGlsZHJlbihcbiAgICAgICAgICAgIHRoaXMuc29ydEFzY0VsID0gYnVpbGRTb3J0SXRlbS5jYWxsKHRoaXMsICdhc2MnKSxcbiAgICAgICAgICAgIHRoaXMuc29ydERlc2NFbCA9IGJ1aWxkU29ydEl0ZW0uY2FsbCh0aGlzLCAnZGVzYycpLFxuICAgICAgICAgICAgYnVpbGRNZW51KCdkaXZpZGVyJyksXG4gICAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWZpbHRlcmApLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyaEVsLFxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyYkVsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tYnV0dG9uc2ApLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgIG5ldyBCdXR0b24oJ2NhbmNlbCcpLm9uKCdjbGljaycsICgpID0+IHRoaXMuYnRuQ2xpY2soJ2NhbmNlbCcpKSxcbiAgICAgICAgICAgICAgICBuZXcgQnV0dG9uKCdvaycsICdwcmltYXJ5Jykub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5idG5DbGljaygnb2snKSksXG4gICAgICAgICAgICApLFxuICAgICAgICApLmhpZGUoKTtcbiAgICAgICAgLy8gdGhpcy5zZXRGaWx0ZXJzKFsndGVzdDEnLCAndGVzdDInLCAndGV4dDMnXSk7XG4gICAgICAgIHRoaXMuZWwub24oJ21vdXNlZG93bi5zdG9wJywgZXZ0ID0+IHtcbiAgICAgICAgICAgIHRoaXMudGluZGV4ID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jaSA9IG51bGw7XG4gICAgICAgIHRoaXMuc29ydERlc2MgPSBudWxsO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuZmlsdGVyVmFsdWVzID0gW107XG4gICAgfVxuXG4gICAgYnRuQ2xpY2soaXQpIHtcbiAgICAgICAgaWYgKGl0ID09PSAnb2snKSB7XG4gICAgICAgICAgICBjb25zdCB7Y2ksIHNvcnQsIGZpbHRlclZhbHVlc30gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHRoaXMub2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9rKGNpLCBzb3J0LCAnaW4nLCBmaWx0ZXJWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIGl0ZW1DbGljayhpdCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnaXQ6JywgaXQpO1xuICAgICAgICB0aGlzLnNvcnQgPSBpdDtcbiAgICAgICAgY29uc3Qge3NvcnRBc2NFbCwgc29ydERlc2NFbH0gPSB0aGlzO1xuICAgICAgICBzb3J0QXNjRWwuY2hlY2tlZChpdCA9PT0gJ2FzYycpO1xuICAgICAgICBzb3J0RGVzY0VsLmNoZWNrZWQoaXQgPT09ICdkZXNjJyk7XG4gICAgfVxuXG4gICAgZmlsdGVyQ2xpY2soaW5kZXgsIGl0KSB7XG4gICAgICAgIGNvbnN0IHtmaWx0ZXJiRWwsIGZpbHRlclZhbHVlcywgdmFsdWVzfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gZmlsdGVyYkVsLmNoaWxkcmVuKCk7XG4gICAgICAgIGlmIChpdCA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IGZpbHRlclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goaSA9PiBoKGkpLmNoZWNrZWQoZmFsc2UpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJWYWx1ZXMgPSBBcnJheS5mcm9tKHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChpID0+IGgoaSkuY2hlY2tlZCh0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gaChjaGlsZHJlbltpbmRleF0pLnRvZ2dsZSgnY2hlY2tlZCcpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaChjaGlsZHJlbltpbmRleF0pLCBcIjkyXCIpXG4gICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGZpbHRlclZhbHVlcy5wdXNoKGl0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyVmFsdWVzLnNwbGljZShmaWx0ZXJWYWx1ZXMuZmluZEluZGV4KGkgPT4gaSA9PT0gaXQpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc2V0RmlsdGVySGVhZGVyLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gdjogYXV0b0ZpbHRlclxuICAgIC8vIGl0ZW1zOiB7dmFsdWU6IGNudH1cbiAgICAvLyBzb3J0IHsgY2ksIG9yZGVyIH1cbiAgICBzZXQoY2ksIGl0ZW1zLCBmaWx0ZXIsIHNvcnQpIHtcbiAgICAgICAgdGhpcy5jaSA9IGNpO1xuICAgICAgICBjb25zdCB7c29ydEFzY0VsLCBzb3J0RGVzY0VsfSA9IHRoaXM7XG4gICAgICAgIGlmIChzb3J0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNvcnQgPSBzb3J0Lm9yZGVyO1xuICAgICAgICAgICAgc29ydEFzY0VsLmNoZWNrZWQoc29ydC5hc2MoKSk7XG4gICAgICAgICAgICBzb3J0RGVzY0VsLmNoZWNrZWQoc29ydC5kZXNjKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb3J0RGVzYyA9IG51bGw7XG4gICAgICAgICAgICBzb3J0QXNjRWwuY2hlY2tlZChmYWxzZSk7XG4gICAgICAgICAgICBzb3J0RGVzY0VsLmNoZWNrZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMuc2V0RmlsdGVycyhpdGVtcywgZmlsdGVyKTtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBPYmplY3Qua2V5cyhpdGVtcyk7XG4gICAgICAgIHRoaXMuZmlsdGVyVmFsdWVzID0gZmlsdGVyID8gQXJyYXkuZnJvbShmaWx0ZXIudmFsdWUpIDogT2JqZWN0LmtleXMoaXRlbXMpO1xuICAgICAgICBidWlsZEZpbHRlckJvZHkuY2FsbCh0aGlzLCBpdGVtcywgZmlsdGVyKTtcbiAgICAgICAgcmVzZXRGaWx0ZXJIZWFkZXIuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBzZXRPZmZzZXQodikge1xuICAgICAgICBpZih0aGlzLmVsLmlzU2hvdygpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWwub2Zmc2V0KHYpLnNob3coKTtcbiAgICAgICAgbGV0IHRpbmRleCA9IDE7XG5cblxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmVsKTtcbiAgICAgICAgYmluZENsaWNrb3V0c2lkZSh0aGlzLmVsLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0aW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGluZGV4ID0gMDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5lbC5zaG93KCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5lbC5oaWRlKCk7XG4gICAgICAgIHVuYmluZENsaWNrb3V0c2lkZSh0aGlzLmVsKTtcbiAgICB9XG59XG4iLCIvKiBnbG9iYWwgZG9jdW1lbnQgKi9cbmltcG9ydCB7IGggfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi9pY29uJztcbmltcG9ydCB7IGNzc1ByZWZpeCB9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB4dG9hc3QodGl0bGUsIGNvbnRlbnQpIHtcbiAgY29uc3QgZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LXRvYXN0YCk7XG4gIGNvbnN0IGRpbW1lciA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tZGltbWVyIGFjdGl2ZWApO1xuICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbC5lbCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaW1tZXIuZWwpO1xuICB9O1xuXG4gIGVsLmNoaWxkcmVuKFxuICAgIGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tdG9hc3QtaGVhZGVyYCkuY2hpbGRyZW4oXG4gICAgICBuZXcgSWNvbignY2xvc2UnKS5vbignY2xpY2suc3RvcCcsICgpID0+IHJlbW92ZSgpKSxcbiAgICAgIHRpdGxlLFxuICAgICksXG4gICAgaCgnZGl2JywgYCR7Y3NzUHJlZml4fS10b2FzdC1jb250ZW50YCkuaHRtbChjb250ZW50KSxcbiAgKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbC5lbCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGltbWVyLmVsKTtcbiAgLy8gc2V0IG9mZnNldFxuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGVsLmJveCgpO1xuICBjb25zdCB7IGNsaWVudEhlaWdodCwgY2xpZW50V2lkdGggfSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgZWwub2Zmc2V0KHtcbiAgICBsZWZ0OiAoY2xpZW50V2lkdGggLSB3aWR0aCkgLyAyLFxuICAgIHRvcDogKGNsaWVudEhlaWdodCAtIGhlaWdodCkgLyAzLFxuICB9KTtcbn1cblxuIiwiaW1wb3J0IHtofSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge3NoZWV0UmVzZXR9IGZyb20gJy4vc2hlZXQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZHZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHNoZWV0KSB7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWFkdmljZWApXG4gICAgICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1hZHZpY2Utc3R5bGVgKVxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdib3JkZXItYm90dG9tJywgJzFweCBzb2xpZCcpLFxuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IGgoJ2RpdicsIGAke2Nzc1ByZWZpeH0tYWR2aWNlLXN0eWxlYCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB0aGlzLnNhdmUuY2hpbGRyZW4oXG4gICAgICAgICAgICB0aGlzLnNhdmVDaGVjayA9IGgoJ3NwYW4nLCAnY2hlY2snKS5oaWRlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLFxuICAgICAgICAgICAgaCgnc3BhbicsICcnKS5odG1sKCfkv53nlZnmoLflvI8nKSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50ZXh0LmNoaWxkcmVuKFxuICAgICAgICAgICAgdGhpcy50ZXh0Q2hlY2sgPSBoKCdzcGFuJywgJ2NoZWNrJykuaGlkZSgndmlzaWJpbGl0eScsICdoaWRkZW4nKSxcbiAgICAgICAgICAgIGgoJ3NwYW4nLCAnJykuaHRtbCgn5LuF5paH5pysJyksXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcbiAgICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgICAgdGhpcy50b3AgPSAwO1xuXG4gICAgICAgIHRoaXMuc2F2ZS5vbignbW91c2Vkb3duLnN0b3AnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNhdmVDaGVjay5zaG93KCd2aXNpYmlsaXR5JywgJ2luaXRpYWwnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dENoZWNrLmhpZGUoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLnNoZWV0LnNldENlbGxSYW5nZSh0aGlzLnJlZmVyZW5jZSwgdGhpcy50YWJsZVByb3h5LCB0cnVlKTtcbiAgICAgICAgICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzLnNoZWV0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy50ZXh0Lm9uKCdtb3VzZWRvd24uc3RvcCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hlZXQuc2V0Q2VsbFJhbmdlKHRoaXMucmVmZXJlbmNlLCB0aGlzLnRhYmxlUHJveHksIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZUNoZWNrLnNob3coJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLnRleHRDaGVjay5oaWRlKCd2aXNpYmlsaXR5JywgJ2luaXRpYWwnKTtcbiAgICAgICAgICAgIHNoZWV0UmVzZXQuY2FsbCh0aGlzLnNoZWV0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdyhsZWZ0LCB0b3AsIHR5cGUgPSAxLCByZWZlcmVuY2UsIHRhYmxlUHJveHkgKSB7XG4gICAgICAgIHRoaXMuZWwuY3NzKCdsZWZ0JywgYCR7bGVmdH1weGApO1xuICAgICAgICB0aGlzLmVsLmNzcygndG9wJywgYCR7dG9wfXB4YCk7XG4gICAgICAgIGlmICh0eXBlID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmVDaGVjay5zaG93KCd2aXNpYmlsaXR5JywgJ2luaXRpYWwnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dENoZWNrLmhpZGUoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZWZ0ID0gcGFyc2VJbnQobGVmdCk7XG4gICAgICAgIHRoaXMudG9wID0gcGFyc2VJbnQodG9wKTtcbiAgICAgICAgdGhpcy50YWJsZVByb3h5ID0gdGFibGVQcm94eTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XG4gICAgICAgIHRoaXMuZWwuc2hvdygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7aH0gZnJvbSBcIi4uL2NvbXBvbmVudC9lbGVtZW50XCI7XG5pbXBvcnQge2Nzc1ByZWZpeCwgbG9va30gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IENlbGxSYW5nZSBmcm9tIFwiLi4vY29yZS9jZWxsX3JhbmdlXCI7XG5pbXBvcnQgeyAgaXNTcGVjaWFsV2Vic2l0ZX0gZnJvbSBcIi4uL2NvcmUvc3BlY2lhbF9mb3JtdWxhX3Byb2Nlc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2Vic2l0ZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgZWRpdG9yKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZWwgPSBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWh5cGVybGluay10b29sdGlwYClcbiAgICAgICAgICAgIC5oaWRlKCk7XG5cbiAgICAgICAgdGhpcy50YWJsZUVsID0gaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1oeXBlcmxpbmstdG9vbHRpcGApXG4gICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjtcbiAgICAgICAgdGhpcy50YWJsZUVsLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICAgIHRoaXMudGFibGVFbC5jc3MoJ292ZXJmbG93LXknLCAnYXV0bycpO1xuICAgICAgICB0aGlzLnRhYmxlRWwuY3NzKCdtYXgtaGVpZ2h0JywgJzQwMHB4Jyk7XG4gICAgICAgIC8vIGJpbmQodGhpcy50YWJsZUVsLmVsLCAncGFzdGUnLCBldnQgPT4ge1xuICAgICAgICAvLyAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gYmluZCh0aGlzLnRhYmxlRWwuZWwsICdjb3B5JywgZXZ0ID0+IHtcbiAgICAgICAgLy8gICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGJpbmQodGhpcy50YWJsZUVsLmVsLCAna2V5ZG93bicsIGV2dCA9PiB7XG4gICAgICAgIC8vICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyBiaW5kKHRoaXMudGFibGVFbC5lbCwgJ2tleXVwJywgZXZ0ID0+IHtcbiAgICAgICAgLy8gICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnRpbWVyMiA9IG51bGw7XG4gICAgfVxuXG4gICAgc2hvdyhyaSwgY2kpIHtcbiAgICAgICAgaWYodGhpcy5lZGl0b3IuaXNEaXNwbGF5MigpKSB7XG4gICAgICAgICAgICB0aGlzLmVsLmhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMudGFibGVFbC5oaWRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB7ZGF0YX0gPSB0aGlzO1xuICAgICAgICBsZXQgdGV4dCA9IGRhdGEuZ2V0Q2VsbFRleHRPckRlZmF1bHQocmksIGNpKSArIFwiXCI7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIyKTtcblxuICAgICAgICBpZiAobG9vay5pbmRleE9mKHRleHQuc3BsaXQoXCIhXCIpWzBdKSA9PT0gMCkge1xuICAgICAgICAgICAgbGV0IHJlY3QgPSBkYXRhLmdldFJlY3QobmV3IENlbGxSYW5nZShyaSwgY2ksIHJpLCBjaSkpO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSByZWN0LmxlZnQgKyA1NTtcbiAgICAgICAgICAgIGxldCB0b3AgPSByZWN0LnRvcCArIDUwO1xuICAgICAgICAgICAgbGV0IGFyciA9IEpTT04ucGFyc2UodGV4dC5zdWJzdHJpbmcodGV4dC5pbmRleE9mKFwiIVwiKSArIDEsIHRleHQubGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIHRoaXMudGFibGVFbC5jc3MoJ2xlZnQnLCBgJHtsZWZ0fXB4YCk7XG4gICAgICAgICAgICB0aGlzLnRhYmxlRWwuY3NzKCd0b3AnLCBgJHt0b3B9cHhgKTtcbiAgICAgICAgICAgIHRoaXMudGFibGVFbC5jc3MoJ3VzZXItc2VsZWN0JywgJ3RleHQnKTtcblxuICAgICAgICAgICAgdGhpcy50YWJsZUVsLmh0bWwoJycpO1xuICAgICAgICAgICAgbGV0IHRhYmxlID0gaCgndGFibGUnLCAnJyk7XG4gICAgICAgICAgICB0YWJsZS5jc3MoJ2JvcmRlci1zcGFjaW5nJywgJzBweCcpO1xuICAgICAgICAgICAgbGV0IHRyID0gaCgndHInLCAnJyk7XG4gICAgICAgICAgICB0ci5jaGlsZHJlbihcbiAgICAgICAgICAgICAgICBoKCd0ZCcsICcnKS5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgYmxhY2snKS5odG1sKCfluo/lj7cnKSxcbiAgICAgICAgICAgICAgICBoKCd0ZCcsICcnKS5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgYmxhY2snKS5odG1sKCfpobnnm67lkI3np7AnKSxcbiAgICAgICAgICAgICAgICBoKCd0ZCcsICcnKS5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgYmxhY2snKS5odG1sKCfln47luIInKSxcbiAgICAgICAgICAgICAgICBoKCd0ZCcsICcnKS5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgYmxhY2snKS5odG1sKCfljaDlnLDpnaLnp68nKSxcbiAgICAgICAgICAgICAgICBoKCd0ZCcsICcnKS5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgYmxhY2snKS5odG1sKCflt67pop0nKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRhYmxlLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgIHRyXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFyci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCB7bnVtYmVyLCBuYW1lLCBjaXR5LCBhcmVhLCB2YWx1ZX0gPSBhcnJbal07XG4gICAgICAgICAgICAgICAgbGV0IHRyID0gaCgndHInLCAnJyk7XG4gICAgICAgICAgICAgICAgbGV0IHRkID0gaCgndGQnLCAnJyk7XG4gICAgICAgICAgICAgICAgdGQuaHRtbChudW1iZXIpO1xuICAgICAgICAgICAgICAgIHRkLmNzcygnYm9yZGVyJywgJzFweCBzb2xpZCBibGFjaycpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHRkMiA9IGgoJ3RkJywgJycpO1xuICAgICAgICAgICAgICAgIHRkMi5odG1sKG5hbWUpO1xuICAgICAgICAgICAgICAgIHRkMi5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgYmxhY2snKTtcblxuICAgICAgICAgICAgICAgIGxldCB0ZDMgPSBoKCd0ZCcsICcnKTtcbiAgICAgICAgICAgICAgICB0ZDMuaHRtbChjaXR5KTtcbiAgICAgICAgICAgICAgICB0ZDMuY3NzKCdib3JkZXInLCAnMXB4IHNvbGlkIGJsYWNrJyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdGQ0ID0gaCgndGQnLCAnJyk7XG4gICAgICAgICAgICAgICAgdGQ0Lmh0bWwoYXJlYSk7XG4gICAgICAgICAgICAgICAgdGQ0LmNzcygnYm9yZGVyJywgJzFweCBzb2xpZCBibGFjaycpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHRkNSA9IGgoJ3RkJywgJycpO1xuICAgICAgICAgICAgICAgIHRkNS5odG1sKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0ZDUuY3NzKCdib3JkZXInLCAnMXB4IHNvbGlkIGJsYWNrJyk7XG4gICAgICAgICAgICAgICAgdHIuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgICAgIHRkLFxuICAgICAgICAgICAgICAgICAgICB0ZDIsXG4gICAgICAgICAgICAgICAgICAgIHRkMyxcbiAgICAgICAgICAgICAgICAgICAgdGQ0LFxuICAgICAgICAgICAgICAgICAgICB0ZDVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRhYmxlLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICB0clxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGFibGVFbC5jaGlsZHJlbihcbiAgICAgICAgICAgICAgICB0YWJsZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGFibGVFbC5zaG93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbC5oaWRlKCk7XG4gICAgICAgICAgICB9LCAxNTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGFyZ3MgPSBpc1NwZWNpYWxXZWJzaXRlKHRleHQpO1xuICAgICAgICAgICAgaWYoYXJncy5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBhcmdzLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHIoMCwgMykudG9Mb3dlckNhc2UoKSA9PT0gXCJ3d3dcIiA/IFwiaHR0cDovL1wiICsgdGV4dCA6IHRleHQ7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZWdleC50ZXN0KHRleHQpKVxuICAgICAgICAgICAgaWYgKHRleHQuc3Vic3RyKDAsIDcpLnRvTG93ZXJDYXNlKCkgIT09ICdodHRwOi8vJyAmJlxuICAgICAgICAgICAgICAgIHRleHQuc3Vic3RyKDAsIDgpLnRvTG93ZXJDYXNlKCkgIT09ICdodHRwczovLycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlRWwuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJlY3QgPSBkYXRhLmdldFJlY3QobmV3IENlbGxSYW5nZShyaSwgY2ksIHJpLCBjaSkpO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSByZWN0LmxlZnQgKyA1NTtcbiAgICAgICAgICAgIGxldCB0b3AgPSByZWN0LnRvcCArIDU7XG4gICAgICAgICAgICB0aGlzLmVsLmh0bWwoJycpO1xuICAgICAgICAgICAgdGhpcy5lbC5jc3MoJ2NvbG9yJywgJ2JsdWUnKTtcbiAgICAgICAgICAgIHRoaXMuZWwuY2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgaCgnZGl2JywgJ2FhYScpLmNzcyhcImJvcmRlci1ib3R0b21cIiwgXCIxcHggc29saWQgYmx1ZVwiKVxuICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZXZ0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpV2lkdGggPSA2NTA7IC8v5by55Ye656qX5Y+j55qE5a695bqmO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlIZWlnaHQgPSA1MDA7IC8v5by55Ye656qX5Y+j55qE6auY5bqmO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhldnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHtzY3JlZW5YLCBzY3JlZW5ZfSA9IGV2dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHRleHQsIFwiXCIsIGB3aWR0aD0ke2lXaWR0aH0saGVpZ2h0PSR7aUhlaWdodH0sbGVmdD0ke3NjcmVlblggKyByZWN0LndpZHRofSx0b3A9JHtzY3JlZW5ZfWApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuaHRtbCh0ZXh0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZWwuY3NzKCdsZWZ0JywgYCR7bGVmdH1weGApO1xuICAgICAgICAgICAgdGhpcy5lbC5jc3MoJ3RvcCcsIGAke3RvcH1weGApO1xuXG4gICAgICAgICAgICB0aGlzLnRpbWVyMiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZWwuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFibGVFbC5oaWRlKCk7XG4gICAgICAgICAgICB9LCAxNTApO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7bG9va30gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuXG5sZXQgdjEgPSBcIkhZUEVSTElOS1wiO1xuXG5cbmZ1bmN0aW9uIGlzU3BlY2lhbFdlYnNpdGUodGV4dCkge1xuICAgIGlmIChsb29rLmluZGV4T2YodGV4dC5zcGxpdChcIiFcIilbMF0pID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IHRydWUsXG4gICAgICAgICAgICBcInRleHRcIjogSlNPTi5wYXJzZSh0ZXh0LnNwbGl0KFwiIVwiKVsxXSkudXJsLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBcInN0YXRlXCI6IGZhbHNlLFxuICAgICAgICBcInRleHRcIjogXCJcIixcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpbmRleE9mKHRleHQsIGZvcm11bGEpIHtcbiAgICBpZiAobG9vay5pbmRleE9mKHRleHQuc3BsaXQoXCIhXCIpWzBdKSA9PT0gMSAmJiBmb3JtdWxhLnRvVXBwZXJDYXNlKCkuaW5kZXhPZih2MSkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDZWxsc1JlbmRlcihjZWxscywgbWMpIHtcbiAgICBsZXQgdGFpbEFyciA9IFtdO1xuICAgIE9iamVjdC5rZXlzKG1jKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICBjZWxsc1tpXSA9IG1jW2ldO1xuICAgICAgICB0YWlsQXJyLnB1c2goaSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGFpbEFycjtcbn1cblxuZnVuY3Rpb24gc3BlY2lhbFdlYnNpdGVWYWx1ZSh0ZXh0LCBmb3JtdWxhKSB7XG4gICAgbGV0IGluZGV4ID0gaW5kZXhPZih0ZXh0LCBmb3JtdWxhKTtcblxuICAgIGlmIChpbmRleCA9PT0gMikge1xuICAgICAgICBsZXQgYXJyID0gdGV4dC5zcGxpdChcIiBcIik7XG4gICAgICAgIGxldCBzID0gXCJcIjtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgdGV4dCA9IGFyclswXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcyArPSBhcnJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwic3RhdGVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBpbmRleCxcbiAgICAgICAgICAgIFwidGV4dFwiOiBKU09OLnBhcnNlKHRleHQuc3BsaXQoXCIhXCIpWzFdKS50ZXh0ICsgcyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJzdGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgXCJ0eXBlXCI6IGluZGV4LFxuICAgICAgICBcInRleHRcIjogXCJcIixcbiAgICB9O1xufVxuXG5leHBvcnQge1xuICAgIGlzU3BlY2lhbFdlYnNpdGUsXG4gICAgc3BlY2lhbFdlYnNpdGVWYWx1ZSxcbiAgICBtdWx0aXBsZUNlbGxzUmVuZGVyLFxufSIsImltcG9ydCBNb2RhbCBmcm9tIFwiLi9tb2RhbFwiO1xuaW1wb3J0IHtofSBmcm9tIFwiLi9lbGVtZW50XCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuL2J1dHRvblwiO1xuaW1wb3J0IHt0fSBmcm9tIFwiLi4vbG9jYWxlL2xvY2FsZVwiO1xuaW1wb3J0IHtjc3NQcmVmaXh9IGZyb20gXCIuLi9jb25maWdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3JQb3BVcCBleHRlbmRzIE1vZGFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbGV0IHRpcCA9IGgoJ3NwYW4nLCAnJykuaHRtbChcIuaCqOi+k+WFpeeahOWFrOW8j+WlveWDj+iHs+Wwkee8uuWwkeS4gOS4quW3puaLrOWPt1wiKTtcbiAgICAgICAgc3VwZXIodCgnY29udGV4dG1lbnUuZXJyb3JQb3AnKSwgW1xuICAgICAgICAgICAgaCgnZGl2JywgYCR7Y3NzUHJlZml4fS1mb3JtLWZpZWxkc2ApLmNoaWxkcmVuKFxuICAgICAgICAgICAgICAgIHRpcCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWZvcm0tZmllbGRzYCksXG4gICAgICAgICAgICBoKCdkaXYnLCBgJHtjc3NQcmVmaXh9LWJ1dHRvbnNgKS5jaGlsZHJlbihcbiAgICAgICAgICAgICAgICBuZXcgQnV0dG9uKCdvaycsICdwcmltYXJ5JylcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsICgpID0+IHRoaXMuYnRuQ2xpY2soJ29rJykpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudGlwID0gdGlwO1xuICAgIH1cblxuICAgIHNob3codCkge1xuICAgICAgICB0aGlzLnRpcC5odG1sKHQpO1xuICAgICAgICBzdXBlci5zaG93KCk7XG4gICAgfVxuXG4gICAgYnRuQ2xpY2soYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24gPT09ICdvaycpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiaW1wb3J0IHtvZmZzZXRUb3B9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7cG9zaXRpb25BbmdsZX0gZnJvbSBcIi4uL2NvcmUvb3BlcmF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdFByb3h5IHtcbiAgICBjb25zdHJ1Y3RvcihyZWN0KSB7XG4gICAgICAgIHRoaXMucmVjdCA9IHJlY3Q7XG4gICAgfVxuXG4gICAgaXNMb2NJbnNpZGUoeCwgeSkge1xuICAgICAgICBsZXQge3JlY3R9ID0gdGhpcztcblxuICAgICAgICAvLyBpZiAoeCA8IHJlY3Qud2lkdGggKyByZWN0LmxlZnQgJiYgeCA+IHJlY3QubGVmdCAmJiB5IC0gb2Zmc2V0VG9wID4gcmVjdC50b3AgJiYgeSAtIG9mZnNldFRvcCA8IHJlY3QudG9wICsgcmVjdC5oZWlnaHQpIHtcbiAgICAgICAgLy8gICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyB9XG4gICAgICAgIHJldHVybiB4IDwgcmVjdC53aWR0aCArIHJlY3QubGVmdCAmJiB4ID4gcmVjdC5sZWZ0ICYmIHkgLSBvZmZzZXRUb3AgPiByZWN0LnRvcCAmJiB5IC0gb2Zmc2V0VG9wIDwgcmVjdC50b3AgKyByZWN0LmhlaWdodDtcbiAgICB9XG5cbiAgICBnZXRVcERvd25MZWZ0UmlnaHQoZXgsIGV5LCBjbGllbnRYLCBjbGllbnRZKSB7XG4gICAgICAgIGxldCB7cmVjdH0gPSB0aGlzO1xuXG4gICAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgICBpZiAoZXggPCByZWN0LndpZHRoICsgcmVjdC5sZWZ0ICYmIGV4ID4gcmVjdC5sZWZ0KSB7XG4gICAgICAgICAgICBpZiAoZXkgPiByZWN0LnRvcCArIHJlY3QuaGVpZ2h0ICsgb2Zmc2V0VG9wKSB7XG4gICAgICAgICAgICAgICAgcG9zID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXkgLSBvZmZzZXRUb3AgPCByZWN0LnRvcCkge1xuICAgICAgICAgICAgICAgIHBvcyA9IDQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChleSAtICggcmVjdC50b3AgLSByZWN0LmhlaWdodCArIG9mZnNldFRvcCkgPiAwICYmIChyZWN0LmhlaWdodCArIHJlY3QudG9wICsgb2Zmc2V0VG9wKSA+IGV5KSB7XG4gICAgICAgICAgICBpZiAoZXggPiByZWN0LndpZHRoICsgcmVjdC5sZWZ0KSB7XG4gICAgICAgICAgICAgICAgcG9zID0gMztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXggPCByZWN0LmxlZnQpIHtcbiAgICAgICAgICAgICAgICBwb3MgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xuICAgICAgICAgICAgcG9zID0gcG9zaXRpb25BbmdsZShjbGllbnRYLCBleCwgY2xpZW50WSwgZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgPT09IDEgJiYgZXkgPCAwKSB7XG4gICAgICAgICAgICBwb3MgPSA0O1xuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IDwgZXkgJiYgcG9zID09PSA0KSB7XG4gICAgICAgICAgICBwb3MgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgPT09IDMgJiYgZXggPCAwKSB7XG4gICAgICAgICAgICBwb3MgPSAyO1xuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCBleCAmJiBwb3MgPT09IDIpIHtcbiAgICAgICAgICAgIHBvcyA9IDM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGltZXIgPSBbXTtcbiAgICB9XG5cbiAgICBwdXNoKHQpIHtcbiAgICAgICAgdGhpcy50aW1lci5wdXNoKHQpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy50aW1lci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHQgPSB0aGlzLnRpbWVyW2ldO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJmdW5jdGlvbiBSZXNpemUob3B0aW9ucywgc2VsZikge1xuXG4gICAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBsZXQgZGlyZWN0aW9uc0FyciA9IFtdO1xuICAgICAgICBsZXQgZGlyZWN0aW9ucyA9IFsnbncnLCAndycsICd3cycsICdzJywgJ3NlJywgJ2UnLCAnbmUnLCAnbiddO1xuICAgICAgICAvL+WinuWKoOWFg+e0oFxuICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goc3RyID0+IHtcbiAgICAgICAgICAgIC8vZGlyZWN0aW9uIHdzXG5cbiAgICAgICAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdkaXJlY3Rpb24gJyArIHN0cjtcbiAgICAgICAgICAgIC8v5rOo5YaM5LqL5Lu2XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbnNBcnIucHVzaChkaXYpO1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGxpbmUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIGxpbmUuY2xhc3NOYW1lID0gYGxpbmUke2krMX1gO1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQobGluZSk7XG4gICAgICAgICAgICBkaXJlY3Rpb25zQXJyLnB1c2gobGluZSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBib3JkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm9yZGVyLmNsYXNzTmFtZSA9ICdib3JkZXInO1xuICAgICAgICBlbC5hcHBlbmRDaGlsZChib3JkZXIpO1xuXG5cbiAgICAgICAgLy/ms6jlhozkuovku7ZcblxuICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goc3RyID0+IHtcbiAgICAgICAgICAgIGxldCBvYmogPSBlbC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgc3RyKTtcbiAgICAgICAgICAgIG9iai5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoZS5idXR0b24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBveCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgICAgICBsZXQgb3kgPSBlLmNsaWVudFk7XG5cbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3g6IG94LFxuICAgICAgICAgICAgICAgICAgICBveTogb3ksXG4gICAgICAgICAgICAgICAgICAgIG93OiBlbC5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgb2g6IGVsLm9mZnNldEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgb2w6IGVsLm9mZnNldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIG90OiBlbC5vZmZzZXRUb3BcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9uQmVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkJlZ2luLmNhbGwoZWwsZGF0YSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgaXNSZXNpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSBldmVudC5jbGllbnRYO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy/orqHnrpcgd2lkdGjlkoxoZWlnaHQg5beu5YC8XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0geCAtIGRhdGEub3g7XG4gICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSB5IC0gZGF0YS5veTtcblxuXG4gICAgICAgICAgICAgICAgICAgIGRhdGEud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1biA9IG1hcHBlcnNbc3RyXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuLmNhbGwob2JqLCBkYXRhLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vbm1vdXNldXAgPSBmdW5jdGlvbiAoZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNSZXNpemUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vbkVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVuZC5jYWxsKGVsKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8v6Zi75q2i5LqL5Lu25YaS5rOhXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIG9uUmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMub25SZXNpemUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldExlZnQobCkge1xuICAgICAgICAgICAgb3B0aW9ucy5vblJlc2l6ZSh7bGVmdDogbH0sIHNlbGYpO1xuICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGwgKyAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VG9wKHQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25SZXNpemUoe3RvcDogdH0sIHNlbGYpO1xuICAgICAgICAgICAgZWwuc3R5bGUudG9wID0gdCArICdweCc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRXaWR0aCh3KSB7XG4gICAgICAgICAgICBpZiAodyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgdyA9IDIwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5vblJlc2l6ZSh7d2lkdGg6IHd9LCBzZWxmKTtcbiAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gdyArICdweCc7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRIZWlnaHQoaCkge1xuXG4gICAgICAgICAgICBpZiAoaCA8IDIwKSB7XG4gICAgICAgICAgICAgICAgaCA9IDIwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5vblJlc2l6ZSh7aGVpZ2h0OiBofSwgc2VsZik7XG4gICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtYXBwZXJzID0ge1xuICAgICAgICAgICAgczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBzZXRIZWlnaHQoZGF0YS5vaCArIGRhdGEuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHNldFdpZHRoKGRhdGEub3cgKyBkYXRhLndpZHRoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHc6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZGF0YS53aWR0aDtcblxuXG4gICAgICAgICAgICAgICAgbGV0IGwgPSBkYXRhLm9sICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHcgPSBkYXRhLm93ICsgTWF0aC5hYnModmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3ID0gZGF0YS5vdyAtIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh3ID4gMjApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TGVmdChsKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0V2lkdGgodyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG46IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZGF0YS5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBsZXQgdCA9IGRhdGEub3QgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgaCA9IGRhdGEub2ggKyBNYXRoLmFicyh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGggPSBkYXRhLm9oIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoID4gMjApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGVpZ2h0KGgpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUb3AodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIG1hcHBlcnMucyhkYXRhKTtcbiAgICAgICAgICAgICAgICBtYXBwZXJzLmUoZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbnc6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgbWFwcGVycy5uKGRhdGEpO1xuICAgICAgICAgICAgICAgIG1hcHBlcnMudyhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3czogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBtYXBwZXJzLncoZGF0YSk7XG4gICAgICAgICAgICAgICAgbWFwcGVycy5zKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5lOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIG1hcHBlcnMubihkYXRhKTtcbiAgICAgICAgICAgICAgICBtYXBwZXJzLmUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZWwucXVlcnlTZWxlY3RvcigpXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb25zQXJyO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVzaXplO1xuIiwiaW1wb3J0IHtpc0hhdmVTdHlsZX0gZnJvbSBcIi4uL2V2ZW50L3Bhc3RlXCI7XG5pbXBvcnQge1Jvd3N9IGZyb20gXCIuLi9jb3JlL3Jvd1wiO1xuaW1wb3J0IHtzcGxpdFN0cn0gZnJvbSBcIi4uL2NvcmUvb3BlcmF0b3JcIjtcbmltcG9ydCBDZWxsUmFuZ2UgZnJvbSAnLi4vY29yZS9jZWxsX3JhbmdlJztcbmltcG9ydCB7aXNIYXZlfSBmcm9tIFwiLi4vaGVscGVyL2RhdGFwcm94eV9oZWxwZXJcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlUHJveHkge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEgKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgICB0aGlzLnJvd3MgPSBuZXcgUm93cyh7bGVuOiAwLCBoZWlnaHQ6IDB9LCBkYXRhKTtcbiAgICB9XG5cbiAgICBnZXRDb21wdXRlZFN0eWxlKGNvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgbGV0IGJvbGQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGNvbXB1dGVkU3R5bGUuZm9udFdlaWdodCA+IDQwMCkge1xuICAgICAgICAgICAgYm9sZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sb3I6IGNvbXB1dGVkU3R5bGUuY29sb3IsXG4gICAgICAgICAgICBiZ2NvbG9yOiBjb21wdXRlZFN0eWxlLmJhY2tncm91bmQuc3Vic3RyaW5nKDAsXG4gICAgICAgICAgICAgICAgY29tcHV0ZWRTdHlsZS5iYWNrZ3JvdW5kLmluZGV4T2YoXCIpXCIpICsgMSksXG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgYm9sZDogYm9sZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXh0ZW5kKHRhYmxlRG9tLCB7cmksIGNpfSkge1xuICAgICAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICAgICAgaWYgKHRhYmxlRG9tLnJvd3MubGVuZ3RoID49IGRhdGEucm93cy5sZW4gLSByaSkge1xuICAgICAgICAgICAgbGV0IGRpZmYgPSB0YWJsZURvbS5yb3dzLmxlbmd0aCAtIChkYXRhLnJvd3MubGVuIC0gcmkpO1xuICAgICAgICAgICAgaWYoZGlmZiA+IDApIHtcbiAgICAgICAgICAgICAgICBkYXRhLmluc2VydCgncm93JywgZGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIYXZlKHRhYmxlRG9tLnJvd3NbMF0pID09PSBmYWxzZSB8fCBpc0hhdmUodGFibGVEb20ucm93c1swXS5jZWxscykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29sTGVuID0gdGFibGVEb20ucm93c1swXS5jZWxscy5sZW5ndGg7XG4gICAgICAgIGlmIChjb2xMZW4gPj0gZGF0YS5jb2xzLmxlbikge1xuICAgICAgICAgICAgbGV0IGRpZmYgPSBjb2xMZW4gLSAoZGF0YS5jb2xzLmxlbiAtIGNpKTtcbiAgICAgICAgICAgIGlmKGRpZmYgPiAwKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5pbnNlcnQoJ2NvbHVtbicsIGRpZmYsIGRhdGEuY29scy5sZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWFjaChvYmosIGNiKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb2JqLnJvd3NbaV0uY2VsbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjYihpLCBqLCBvYmoucm93c1tpXS5jZWxsc1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWFsQ29sU3Bhbih0YWJsZURvbSkge1xuICAgICAgICB0aGlzLmVhY2godGFibGVEb20sIChpLCBqLCBjZWxsKSA9PiB7XG4gICAgICAgICAgICBsZXQgbGVuID0gY2VsbC5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpO1xuICAgICAgICAgICAgaWYgKGxlbiAmJiBsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBsZW4gLSAxOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVEb20ucm93c1tpXS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpLCB0YWJsZURvbS5yb3dzW2ldLmNlbGxzW2ogKyAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWFsU3R5bGUodGFibGVEb20sIHtyaSwgY2l9KSB7XG4gICAgICAgIGxldCB7ZGF0YSwgcm93c30gPSB0aGlzO1xuICAgICAgICBsZXQgc3R5bGVzID0gZGF0YS5zdHlsZXM7XG5cbiAgICAgICAgdGhpcy5lYWNoKHRhYmxlRG9tLCAoaSwgaiwgY2VsbCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbXB1dGVkU3R5bGUgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGNlbGwsIG51bGwpO1xuICAgICAgICAgICAgbGV0IGFyZ3MgPSB0aGlzLmdldENvbXB1dGVkU3R5bGUoY29tcHV0ZWRTdHlsZSk7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBpc0hhdmVTdHlsZShzdHlsZXMsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wdXNoKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93cy5zZXRDZWxsKHJpICsgaSwgY2kgKyBqLCB7XCJzdHlsZVwiOiBpbmRleCA9PT0gLTEgPyBzdHlsZXMubGVuZ3RoIC0gMSA6IGluZGV4fSwgJ2FsbCcpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJzZVRhYmxlQ2VsbFJhbmdlKHRhYmxlRG9tLCB7cmksIGNpfSkge1xuICAgICAgbGV0IG1heFJpID0gcmksIG1heENpID0gY2k7XG4gICAgICB0aGlzLmVhY2godGFibGVEb20sIChpLCBqKSA9PiB7XG4gICAgICAgIGxldCByaWkgPSByaSArIGk7XG4gICAgICAgIGxldCBjaWogPSBjaSArIGo7XG4gICAgICAgICAgICBpZihtYXhSaSA8IHJpaSkge1xuICAgICAgICAgICAgICBtYXhSaSA9IHJpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1heENpIDwgY2lqKSB7XG4gICAgICAgICAgICAgIG1heENpID0gY2lqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBDZWxsUmFuZ2UocmksIGNpLCBtYXhSaSwgbWF4Q2kpO1xuICAgIH1cblxuICAgIGRlYWxSZWZlcmVuY2UodGFibGVEb20sIHtyaSwgY2l9KSB7XG4gICAgICAgIGxldCB7cm93c30gPSB0aGlzO1xuICAgICAgICAgbGV0IHJlZmVyZW5jZSA9IFtdO1xuXG4gICAgICAgIHRoaXMuZWFjaCh0YWJsZURvbSwgKGksIGosIGNlbGwpID0+IHsgLy8g5aSE55CGcmVmZXJlbmNl5Ye95pWw5o+Q5Y+W5LiA5LiL77yM5aGr5YWF5Lmf55So5byV55So6L+Z5Liq5Ye95pWw44CCIHVwZGF0ZUNFbGxSZWZlcmVuY2VCeVNoaWZ077yMIOi3n+Whq+WFheeahOmAu+i+keWFseS6q1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBjZWxsLnF1ZXJ5U2VsZWN0b3IoXCJyZWZlcmVuY2VcIik7XG4gICAgICAgICAgICBsZXQgaW5uZXJUZXh0ID0gY2VsbC5pbm5lclRleHQgfHwgXCJcIjtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVyaSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdyaScpO1xuICAgICAgICAgICAgICAgIGxldCBlY2kgPSBub2RlLmdldEF0dHJpYnV0ZSgnY2knKTtcblxuICAgICAgICAgICAgICAgIGxldCBzdHJMaXN0ID0gc3BsaXRTdHIoaW5uZXJUZXh0KTtcbiAgICAgICAgICAgICAgICBsZXQgZGNpID0gaSArIHJpIC0gZXJpO1xuICAgICAgICAgICAgICAgIGxldCBkZWkgPSBqICsgY2kgLSBlY2k7XG5cbiAgICAgICAgICAgICAgICBsZXQge2JhZCwgcmVzdWx0fSA9IHJvd3MuZ2V0Q2VsbFRleHRCeVNoaWZ0KHN0ckxpc3QsIGRlaSwgZGNpKTtcbiAgICAgICAgICAgICAgICByb3dzLnVwZGF0ZUNlbGxSZWZlcmVuY2VCeVNoaWZ0KGJhZCwgcmVzdWx0LCByaSArIGksIGNpICsgaik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBfY2VsbCA9IHJvd3MuZ2V0Q2VsbChyaSArIGksIGNpICsgaikgfHwge307XG4gICAgICAgICAgICAgICAgX2NlbGwudGV4dCA9IGlubmVyVGV4dDtcbiAgICAgICAgICAgICAgICBfY2VsbC5mb3JtdWxhcyA9IGlubmVyVGV4dDtcblxuICAgICAgICAgICAgICAgIHJvd3Muc2V0Q2VsbChyaSArIGksIGNpICsgaiwgX2NlbGwsICdhbGwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHByb3h5LnNldENlbGwoZGF0YS5uYW1lLCB4eTJleHByKGNpICsgaiwgcmkgKyBpKSk7XG5cbiAgICAgICAgICAgIHJlZmVyZW5jZS5wdXNoKHtcbiAgICAgICAgICAgICAgICByaTogcmkgKyBpLFxuICAgICAgICAgICAgICAgIGNpOiBjaSArIGpcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcInJlZmVyZW5jZVwiOiByZWZlcmVuY2V9O1xuICAgIH1cbn1cbiIsImltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcbmltcG9ydCB7ZGF0ZVBhdHRlcm4sIHN0cjJSZX0gZnJvbSBcIi4uL3V0aWxzL3JlZ19wYXR0ZXJuXCI7XG5pbXBvcnQge2Zvcm1hdE51bWJlclJlbmRlcn0gZnJvbSBcIi4uL2NvcmUvZm9ybWF0XCI7XG5pbXBvcnQge2lzSGF2ZSwgaXNOdW1iZXJ9IGZyb20gXCIuLi9oZWxwZXIvZGF0YXByb3h5X2hlbHBlclwiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKGRpZmYpIHtcbiAgICBpZighaXNIYXZlKGRpZmYpIHx8ICFpc051bWJlcihkaWZmKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIFwiZGF0ZVwiOiBkYXRlLFxuICAgICAgICAgICAgXCJkYXRlX2Zvcm11bGFcIjogXCJcIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc3RyID0gY2FsY0RlY2ltYWxzKGRpZmYsIChpKSA9PiB7XG4gICAgICAgIHJldHVybiBpICogMjQgKiA2MDtcbiAgICB9KTtcbiAgICBzdHIgPSBmb3JtYXROdW1iZXJSZW5kZXIoc3RyLCA1KTtcbiAgICBsZXQgYmVnaW5EYXRlID0gZGF5anMoJzE5MDAtMDEtMDEnKTtcbiAgICBsZXQgYmVnaW5EYXRlMiA9IGRheWpzKCcxOTAwLTAxLTAxJyk7XG4gICAgbGV0IGVudGVyID0gZmFsc2U7XG5cbiAgICBpZiAoaXNIYXZlKHN0cikgJiYgc3RyICogMSA+IDApIHtcbiAgICAgICAgbGV0IHNlY29uZCA9IGNhbGNEZWNpbWFscyhzdHIsIChpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaSAqIDYwO1xuICAgICAgICB9KTtcbiAgICAgICAgZW50ZXIgPSB0cnVlO1xuICAgICAgICBzZWNvbmQgPSBmb3JtYXROdW1iZXJSZW5kZXIoc2Vjb25kLCA1KTtcbiAgICAgICAgYmVnaW5EYXRlMiA9IGRheWpzKCcxOTAwLTAxLTAxICAwMDowMDowMCcpLnNldCgnbWludXRlJywgc3RyKS5zZXQoJ3NlY29uZCcsIHNlY29uZCk7XG4gICAgfVxuXG4gICAgbGV0IGRhdGUgPSBcIlwiO1xuICAgIGlmIChlbnRlcikge1xuICAgICAgICBkYXRlID0gYmVnaW5EYXRlLmFkZChkaWZmLCAnZGF5Jykuc3VidHJhY3QoMiwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuXG4gICAgICAgIGxldCBmb3JtdWxhID0gYmVnaW5EYXRlMi5hZGQoZGlmZiwgJ2RheScpLnN1YnRyYWN0KDIsICdkYXknKS5mb3JtYXQoJ1lZWVktTU0tREQgIGg6bW06c3MnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwic3RhdGVcIjogZGF0ZSAhPT0gJ0ludmFsaWQgRGF0ZScsXG4gICAgICAgICAgICBcImRhdGVcIjogZGF0ZSxcbiAgICAgICAgICAgIFwiZGF0ZV9mb3JtdWxhXCI6IGZvcm11bGEsXG4gICAgICAgICAgICBcIm1pbnV0ZVwiOiB0cnVlXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlID0gYmVnaW5EYXRlLmFkZChkaWZmLCAnZGF5Jykuc3VidHJhY3QoMiwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBkYXRlICE9PSAnSW52YWxpZCBEYXRlJyxcbiAgICAgICAgICAgIFwiZGF0ZVwiOiBkYXRlLFxuICAgICAgICAgICAgXCJkYXRlX2Zvcm11bGFcIjogXCJcIixcbiAgICAgICAgICAgIFwibWludXRlXCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VGb3JtYXQoZGF0ZSwgZm9ybWF0ID0gJ1lZWVnlubRNTeaciERE5pelJykge1xuICByZXR1cm4gZGF5anMoZGF0ZSkuZm9ybWF0KGZvcm1hdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjRGVjaW1hbHMoZGlmZiwgY2IgPSAoKSA9PiB7XG59KSB7XG4gICAgbGV0IGFyciA9IGRpZmYudG9TdHJpbmcoKS5zcGxpdCgnLicpO1xuICAgIGlmIChhcnIubGVuZ3RoID4gMikge1xuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICB9XG4gICAgbGV0IGZpeCA9IGFyclsxXSArIFwiXCI7XG4gICAgbGV0IG5ld0RhdGEgPSBmaXg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3RGF0YSA9IG5ld0RhdGEgKiAwLjE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNiKG5ld0RhdGEpO1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gY2VsbERhdGUoKSB7XG4vL1xuLy8gfVxuXG4vLyDlt7Llhpl0ZXN0XG5leHBvcnQgZnVuY3Rpb24gZGF0ZURpZmYoZGF0ZSkge1xuICAgIGxldCB2YWxpZCA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IHZhbGlkID09PSBmYWxzZSAmJiBpIDwgZGF0ZVBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWQgPSBzdHIyUmUoZGF0ZVBhdHRlcm5baV0pLnRlc3QoZGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJpc1ZhbGlkXCI6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSBkYXRlLnJlcGxhY2UoL1vlubR85pyIXS9nLCBcIi1cIik7XG4gICAgICAgIGRhdGUgPSBkYXRlLnJlcGxhY2UoL1vml6VdL2csIFwiXCIpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImRpZmZcIjogZGF5anMoZGF0ZSkuZGlmZihkYXlqcygnMTkwMC0wMS0wMScpLCAnZGF5JykgKyAyLFxuICAgICAgICAgICAgXCJpc1ZhbGlkXCI6IHRydWUsXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge3h5MmV4cHJ9IGZyb20gXCIuLi91dGlscy9hbHBoYWJldFwiO1xuaW1wb3J0IFByZUFjdGlvbiBmcm9tIFwiLi4vbW9kZWwvcHJlX2FjdGlvblwiO1xuaW1wb3J0IHt0ZXN0VmFsaWR9IGZyb20gXCIuLi91dGlscy90ZXN0XCI7XG5cbmZ1bmN0aW9uIG9wZXJhdGlvbkl0ZW0ocHJlQWN0aW9uKSB7XG4gICAgdGhpcy51bmRvSXRlbXMucHVzaChwcmVBY3Rpb24pO1xuICAgIHRoaXMucmVkb0l0ZW1zID0gW107XG59XG5cbi8vIHRvZG8gdHlwZeeuoeeQhlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlQcmVBY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy51bmRvSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWRvSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICBhZGRTdGVwKHt0eXBlLCBhY3Rpb24sIHJpLCBjaSwgZXhwciwgY2VsbFJhbmdlLCBjZWxscywgaGVpZ2h0LCB3aWR0aCwgcHJvcGVydHksIHZhbHVlLCBvbGREYXRhfSwge29sZENlbGwsIG5ld0NlbGwsIG9sZE1lcmdlc0RhdGEsIG5ld01lcmdlc0RhdGEsIG9sZFN0ZXB9KSB7XG4gICAgICAgIGxldCBwcmVBY3Rpb24gPSBcIlwiO1xuXG4gICAgICAgIGlmKHR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIHByZUFjdGlvbiA9IG5ldyBQcmVBY3Rpb24oe1xuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgYWN0aW9uLCByaSwgY2ksIGV4cHIsIG9sZENlbGwsIG5ld0NlbGxcbiAgICAgICAgICAgIH0sIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICBvcGVyYXRpb25JdGVtLmNhbGwodGhpcywgcHJlQWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmKHR5cGUgPT09IDIgfHwgdHlwZSA9PT0gNSB8fCB0eXBlID09PSAxMSB8fCB0eXBlID09PSAxMiB8fCB0eXBlID09PSA2KSB7XG4gICAgICAgICAgICBwcmVBY3Rpb24gPSBuZXcgUHJlQWN0aW9uKHtcbiAgICAgICAgICAgICAgICB0eXBlLCBvbGRNZXJnZXNEYXRhLCBwcm9wZXJ0eSwgdmFsdWUsIG5ld01lcmdlc0RhdGEsXG4gICAgICAgICAgICAgICAgYWN0aW9uLCBjZWxsUmFuZ2UsICBvbGRDZWxsLCBuZXdDZWxsOiBjZWxsc1xuICAgICAgICAgICAgfSwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgIG9wZXJhdGlvbkl0ZW0uY2FsbCh0aGlzLCBwcmVBY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gMTMpIHtcbiAgICAgICAgICAgIHByZUFjdGlvbiA9IG5ldyBQcmVBY3Rpb24oe1xuICAgICAgICAgICAgICAgIHR5cGUsIG9sZERhdGEsIG5ld0RhdGE6IG9sZFN0ZXAub2xkRGF0YSxcbiAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICB9LCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgb3BlcmF0aW9uSXRlbS5jYWxsKHRoaXMsIHByZUFjdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSAzKSB7XG4gICAgICAgICAgICBwcmVBY3Rpb24gPSBuZXcgUHJlQWN0aW9uKHtcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGFjdGlvbiwgaGVpZ2h0LCByaSwgb2xkU3RlcFxuICAgICAgICAgICAgfSwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgIG9wZXJhdGlvbkl0ZW0uY2FsbCh0aGlzLCBwcmVBY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gNCkge1xuICAgICAgICAgICAgcHJlQWN0aW9uID0gbmV3IFByZUFjdGlvbih7XG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBhY3Rpb24sIHdpZHRoLCBjaSwgb2xkU3RlcFxuICAgICAgICAgICAgfSwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgIG9wZXJhdGlvbkl0ZW0uY2FsbCh0aGlzLCBwcmVBY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGVzdFZhbGlkLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8g5Yig5o6J5LqG5LiA5LiqbWVyZ2VzXG4gICAgZ2V0U3RlcFR5cGUodHlwZSwge3JpLCBjaSwgZXhwciwgdGV4dCwgcmFuZ2UsIGNlbGxSYW5nZSwgcHJvcGVydHksIHZhbHVlfSkge1xuICAgICAgICBsZXQgc3RyID0gXCJcIjtcbiAgICAgICAgbGV0IHtyb3dzLCBjb2xzfSA9IHRoaXMuZGF0YTtcblxuICAgICAgICBpZih0eXBlID09PSAxKSB7XG4gICAgICAgICAgICBzdHIgPSBg5ZyoJHtleHByfeS4remUruWFpVwiJHt0ZXh0fVwiYDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzdHIsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICByaSwgY2ksIGV4cHJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSAyKSB7XG4gICAgICAgICAgICBsZXQgZXhwcjEgPSB4eTJleHByKHJhbmdlLnNjaSwgcmFuZ2Uuc3JpKTtcbiAgICAgICAgICAgIGxldCBleHByMiA9IHh5MmV4cHIocmFuZ2UuZWNpLCByYW5nZS5lcmkpO1xuICAgICAgICAgICAgZXhwciA9IGV4cHIxID09PSBleHByMiA/IGV4cHIxIDogYCR7ZXhwcjF9OiR7ZXhwcjJ9YDtcbiAgICAgICAgICAgIHN0ciA9IGDliKDpmaQke2V4cHJ955qE5Y2V5YWD5qC85YaF5a65YDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzdHIsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBjZWxsUmFuZ2U6IHJhbmdlLFxuICAgICAgICAgICAgICAgIGNlbGxzOiB0aGlzLmVhY2hSYW5nZShyYW5nZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gMykge1xuICAgICAgICAgICAgbGV0IGhlaWdodCA9IHJvd3MuZ2V0SGVpZ2h0KHJpKTtcbiAgICAgICAgICAgIHN0ciA9IGDooYzlrr1gO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN0cixcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJpOiByaVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmKHR5cGUgPT09IDQpIHtcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IGNvbHMuZ2V0V2lkdGgoY2kpO1xuICAgICAgICAgICAgc3RyID0gYOWIl+WuvWA7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogc3RyLFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIGNpOiBjaVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmKHR5cGUgPT09IDUpIHtcbiAgICAgICAgICAgIHN0ciA9ICfoh6rliqjloavlhYUnO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN0cixcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGNlbGxSYW5nZTogcmFuZ2UsXG4gICAgICAgICAgICAgICAgY2VsbHM6IHRoaXMuZWFjaFJhbmdlKGNlbGxSYW5nZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gMTIpIHtcbiAgICAgICAgICAgIHN0ciA9ICfpgInmi6nmgKfnspjotLQnO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN0cixcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGNlbGxSYW5nZTogcmFuZ2UsIHByb3BlcnR5LCB2YWx1ZSxcbiAgICAgICAgICAgICAgICBjZWxsczogdGhpcy5lYWNoUmFuZ2UoY2VsbFJhbmdlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSAxMykge1xuICAgICAgICAgICAgc3RyID0gJ+aPkuWFpeWNleWFg+agvCc7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzdHIsXG4gICAgICAgICAgICAgICAgdHlwZSwgb2xkRGF0YTogdGhpcy5kYXRhLmdldERhdGEoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1lbHNlIGlmKHR5cGUgPT09IDExKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09ICdmb250LWJvbGQnIHx8IHByb3BlcnR5ID09PSAnZm9udC1pdGFsaWMnXG4gICAgICAgICAgICAgICAgfHwgcHJvcGVydHkgPT09ICdmb250LW5hbWUnIHx8IHByb3BlcnR5ID09PSAnZm9udC1zaXplJyB8fCBwcm9wZXJ0eSA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgICAgIHN0ciA9IFwi5a2X5L2TXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAndW5kZXJsaW5lJykge1xuICAgICAgICAgICAgICAgIHN0ciA9IFwi5LiL5YiS57q/XCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAnYmdjb2xvcicgfHwgcHJvcGVydHkgPT09ICdmb3JtYXQnKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gXCLljZXlhYPmoLzmoLzlvI9cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICdhbGlnbicpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIuW3puWvuem9kFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwi5bGF5LitXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIuWPs+Wvuem9kFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICd2YWxpZ24nKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIumhtuerr+Wvuem9kFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwi5bGF5LitXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gXCLlupXnq6/lr7npvZBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAnYm9yZGVyJykge1xuICAgICAgICAgICAgICAgIHN0ciA9IFwi6L655qGGXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAnc3RyaWtlJykge1xuICAgICAgICAgICAgICAgIHN0ciA9IFwi5Yig6Zmk57q/XCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAnbWVyZ2UnKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gJ+WQiOW5tuWNleWFg+agvCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzdHIsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBjZWxsUmFuZ2U6IHJhbmdlLCBwcm9wZXJ0eSwgdmFsdWUsXG4gICAgICAgICAgICAgICAgY2VsbHM6IHRoaXMuZWFjaFJhbmdlKGNlbGxSYW5nZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gNikge1xuICAgICAgICAgICAgc3RyID0gJ+eymOi0tCc7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogc3RyLFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgY2VsbFJhbmdlOiByYW5nZSxcbiAgICAgICAgICAgICAgICBjZWxsczogdGhpcy5lYWNoUmFuZ2UoY2VsbFJhbmdlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bmRvKCkge1xuICAgICAgICBsZXQgcHJlQWN0aW9uID0gdGhpcy5kb2VzKHRoaXMuZ2V0SXRlbXMoMSksIDEpO1xuICAgICAgICB0aGlzLnJlZG9JdGVtcy5wdXNoKHByZUFjdGlvbik7XG4gICAgfVxuXG4gICAgcmVkbygpIHtcbiAgICAgICAgbGV0IHByZUFjdGlvbiA9IHRoaXMuZG9lcyh0aGlzLmdldEl0ZW1zKDIpLCAyKTtcbiAgICAgICAgdGhpcy51bmRvSXRlbXMucHVzaChwcmVBY3Rpb24pO1xuICAgIH1cblxuICAgIGVhY2hSYW5nZShyYW5nZSkge1xuICAgICAgICBsZXQge3Jvd3N9ID0gdGhpcy5kYXRhO1xuXG4gICAgICAgIHJldHVybiByb3dzLmVhY2hSYW5nZShyYW5nZSk7XG4gICAgfVxuXG4gICAgZG9lcyhhY3Rpb25JdGVtcywgYWN0aW9uVHlwZSkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5zZXR0aW5ncy5zaG93RWRpdG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uSXRlbXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQge2RhdGF9ID0gdGhpcztcbiAgICAgICAgbGV0IHtzaGVldH0gPSBkYXRhO1xuXG4gICAgICAgIGxldCBwcmVBY3Rpb24gPSBhY3Rpb25JdGVtcy5wb3AoKTtcbiAgICAgICAgcHJlQWN0aW9uLnJlc3RvcmUoZGF0YSwgc2hlZXQsIGFjdGlvblR5cGUpO1xuXG4gICAgICAgIHJldHVybiBwcmVBY3Rpb247XG4gICAgfVxuXG4gICAgZ2V0SXRlbXModHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5kb0l0ZW1zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVkb0l0ZW1zO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IENlbGxQcm9wIGZyb20gXCIuL2NlbGxfcHJvcFwiO1xuaW1wb3J0IHt4eTJleHByfSBmcm9tIFwiLi4vdXRpbHMvYWxwaGFiZXRcIjtcblxuZnVuY3Rpb24gZ2V0VHlwZShkVHlwZSwgc1R5cGUpIHtcbiAgICBpZiAoZFR5cGUgPT09IDEgJiYgc1R5cGUgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIDE7ICAgICAgICAgICAvLyAx6KGM5aSa5YiXICogMeihjOWkmuWIl1xuICAgIH0gZWxzZSBpZiAoZFR5cGUgPT09IDEgJiYgc1R5cGUgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfSBlbHNlIGlmIChkVHlwZSA9PT0gMSAmJiBzVHlwZSA9PT0gMykgeyAgICAvLyDlpJrooYzlpJrliJcgKiDkuIDooYzlpJrliJdcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgfSBlbHNlIGlmIChkVHlwZSA9PT0gMiAmJiBzVHlwZSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9IGVsc2UgaWYgKGRUeXBlID09PSAzICYmIHNUeXBlID09PSAxKSB7XG4gICAgICAgIHJldHVybiA1O1xuICAgIH0gZWxzZSBpZiAoZFR5cGUgPT09IDIgJiYgc1R5cGUgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIDY7XG4gICAgfSBlbHNlIGlmIChkVHlwZSA9PT0gMiAmJiBzVHlwZSA9PT0gMykge1xuICAgICAgICByZXR1cm4gNztcbiAgICB9IGVsc2UgaWYgKGRUeXBlID09PSAzICYmIHNUeXBlID09PSAyKSB7XG4gICAgICAgIHJldHVybiA4O1xuICAgIH0gZWxzZSBpZiAoZFR5cGUgPT09IDMgJiYgc1R5cGUgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIDk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGFuZ2VEYXJyVG9Eb3VibGVBcnIoZGFyciwgc2VsZWN0b3JSYW5nZSkge1xuICAgIGxldCByaSA9IHNlbGVjdG9yUmFuZ2Uuc3JpO1xuICAgIGxldCBfZGFyciA9IFtdO1xuICAgIGxldCBhcnIgPSBbXTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHNlbGVjdG9yUmFuZ2UuZWFjaCgoaSwgaikgPT4ge1xuICAgICAgICBpZiAocmkgIT09IGkpIHtcbiAgICAgICAgICAgIHJpID0gaTtcbiAgICAgICAgICAgIF9kYXJyLnB1c2goYXJyKTtcbiAgICAgICAgICAgIGFyciA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGFyci5wdXNoKGRhcnJbaW5kZXhdKTtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICB9KTtcbiAgICBfZGFyci5wdXNoKGFycik7XG5cbiAgICByZXR1cm4gX2RhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhaW50Rm9ybWF0IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvclJhbmdlLCBkc3RSYW5nZSkge1xuICAgICAgICB0aGlzLnNlbGVjdG9yUmFuZ2UgPSBzZWxlY3RvclJhbmdlO1xuICAgICAgICB0aGlzLmRzdFJhbmdlID0gZHN0UmFuZ2U7XG4gICAgfVxuXG4gICAgZ2V0UGFpbnRUeXBlKCkge1xuICAgICAgICBsZXQge2RzdFJhbmdlLCBzZWxlY3RvclJhbmdlfSA9IHRoaXM7XG5cbiAgICAgICAgbGV0IGRUeXBlID0gZHN0UmFuZ2UuZ2V0VHlwZSgpO1xuICAgICAgICBsZXQgc1R5cGUgPSBzZWxlY3RvclJhbmdlLmdldFR5cGUoKTtcblxuICAgICAgICBsZXQgcGFpbnRUeXBlID0gZ2V0VHlwZShkVHlwZSwgc1R5cGUpO1xuXG4gICAgICAgIHJldHVybiBwYWludFR5cGU7XG4gICAgfVxuXG4gICAgbWFrZVBhaW50QXJyKHR5cGUsIGRhcnIpIHtcbiAgICAgICAgbGV0IHtkc3RSYW5nZSwgc2VsZWN0b3JSYW5nZX0gPSB0aGlzO1xuICAgICAgICBsZXQgcEFyciA9IFtdO1xuICAgICAgICAvLyBpZiAodHlwZSA9PT0gMSB8fCB0eXBlID09PSA2KSB7ICAvLyAx6KGM5aSa5YiXIC8vIDHliJflpJrooYxcbiAgICAgICAgLy8gICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIC8vICAgICBkc3RSYW5nZS5lYWNoKChpLCBqKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHtjZWxsfSA9IGRhcnJbaW5kZXhdO1xuICAgICAgICAvLyAgICAgICAgIGxldCBjZWxsUHJvcCA9IGNyZWF0ZWQgQ2VsbFByb3AoaSwgaiwgY2VsbCk7XG4gICAgICAgIC8vICAgICAgICAgcEFyci5wdXNoKGNlbGxQcm9wKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAvLyAgICAgICAgIGlmIChpbmRleCA9PT0gZGFyci5sZW5ndGgpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHsgICAgICAgIC8vIDMg5aSa6KGM5aSa5YiXICogMeihjOWkmuWIl1xuICAgICAgICAvLyAgICAgbGV0IGRjaSA9IHNlbGVjdG9yUmFuZ2UuZWNpIC0gc2VsZWN0b3JSYW5nZS5zY2ksIGluZGV4ID0gMCwgcmVjb3JkUmkgPSBkc3RSYW5nZS5zcmk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBsZXQgX2RhcnIgPSBjaGFuZ2VEYXJyVG9Eb3VibGVBcnIoZGFyciwgc2VsZWN0b3JSYW5nZSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBkc3RSYW5nZS5lYWNoKChpLCBqKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHtjZWxsfSA9IF9kYXJyWzBdW2luZGV4XTtcbiAgICAgICAgLy8gICAgICAgICBsZXQgY2VsbFByb3AgPSBjcmVhdGVkIENlbGxQcm9wKGksIGosIGNlbGwpO1xuICAgICAgICAvLyAgICAgICAgIHBBcnIucHVzaChjZWxsUHJvcCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgaWYgKGluZGV4ID09PSBkY2kpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAvLyAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0gZWxzZSBpZih0eXBlID09PSA3KSB7XG4gICAgICAgIC8vICAgICBsZXQgcmVjb3JkUmkgPSBkc3RSYW5nZS5zcmk7XG4gICAgICAgIC8vICAgICBsZXQgcm93SW5kZXggPSAwO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgbGV0IF9kYXJyID0gY2hhbmdlRGFyclRvRG91YmxlQXJyKGRhcnIsIHNlbGVjdG9yUmFuZ2UpO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgZHN0UmFuZ2UuZWFjaCgoaSwgaikgPT4ge1xuICAgICAgICAvLyAgICAgICAgIGlmIChyZWNvcmRSaSAhPT0gaSkge1xuICAgICAgICAvLyAgICAgICAgICAgICByb3dJbmRleCArPSAxO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICAgICBpZiAocm93SW5kZXggPT09IF9kYXJyLmxlbmd0aCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgcm93SW5kZXggPSAwO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGxldCB7Y2VsbH0gPSBfZGFycltyb3dJbmRleF1bMF07XG4gICAgICAgIC8vICAgICAgICAgbGV0IGNlbGxQcm9wID0gY3JlYXRlZCBDZWxsUHJvcChpLCBqLCBjZWxsKTtcbiAgICAgICAgLy8gICAgICAgICBwQXJyLnB1c2goY2VsbFByb3ApO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIHJlY29yZFJpID0gaTtcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9ZWxzZSBpZiAodHlwZSA9PT0gNCB8fCB0eXBlID09PSAyKSB7ICAgLy8gNDogMeihjOWkmuWIlyAqIDHliJflpJrooYwgICAgNjogMeWIl+WkmuihjCAqIDHooYzlpJrliJdcbiAgICAgICAgLy8gICAgIGRzdFJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgLy8gICAgICAgICBsZXQge2NlbGx9ID0gZGFyclswXTtcbiAgICAgICAgLy8gICAgICAgICBsZXQgY2VsbFByb3AgPSBjcmVhdGVkIENlbGxQcm9wKGksIGosIGNlbGwpO1xuICAgICAgICAvLyAgICAgICAgIHBBcnIucHVzaChjZWxsUHJvcCk7XG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlID09PSA1KSB7XG4gICAgICAgIC8vICAgICBsZXQgZGNpID0gc2VsZWN0b3JSYW5nZS5lY2kgLSBzZWxlY3RvclJhbmdlLnNjaSwgaW5kZXggPSAwLCByZWNvcmRSaSA9IGRzdFJhbmdlLnNyaTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGRzdFJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgLy8gICAgICAgICBpZiAocmVjb3JkUmkgIT09IGkpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICBsZXQge2NlbGx9ID0gZGFycltpbmRleF07XG4gICAgICAgIC8vICAgICAgICAgbGV0IGNlbGxQcm9wID0gY3JlYXRlZCBDZWxsUHJvcChpLCBqLCBjZWxsKTtcbiAgICAgICAgLy8gICAgICAgICBwQXJyLnB1c2goY2VsbFByb3ApO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGlmIChpbmRleCA9PT0gZGNpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgLy8gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICByZWNvcmRSaSA9IGk7XG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlID09PSA4KSB7XG4gICAgICAgIC8vICAgICBsZXQgcm93SW5kZXggPSAwLCByZWNvcmRSaSA9IGRzdFJhbmdlLnNyaTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGRzdFJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgLy8gICAgICAgICBpZiAocmVjb3JkUmkgIT09IGkpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgcm93SW5kZXggKz0gMTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKHJvd0luZGV4ID09PSBkYXJyLmxlbmd0aCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgcm93SW5kZXggPSAwO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGxldCB7Y2VsbH0gPSBkYXJyW3Jvd0luZGV4XTtcbiAgICAgICAgLy8gICAgICAgICBsZXQgY2VsbFByb3AgPSBjcmVhdGVkIENlbGxQcm9wKGksIGosIGNlbGwpO1xuICAgICAgICAvLyAgICAgICAgIHBBcnIucHVzaChjZWxsUHJvcCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgcmVjb3JkUmkgPSBpO1xuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0gZWxzZSBpZiAodHlwZSA9PT0gOSkge1xuICAgICAgICAgICAgbGV0IGRjaSA9IHNlbGVjdG9yUmFuZ2UuZWNpIC0gc2VsZWN0b3JSYW5nZS5zY2ksIGluZGV4ID0gMCwgcmVjb3JkUmkgPSBkc3RSYW5nZS5zcmk7XG4gICAgICAgICAgICBsZXQgcm93SW5kZXggPSAwO1xuXG4gICAgICAgICAgICBsZXQgX2RhcnIgPSBjaGFuZ2VEYXJyVG9Eb3VibGVBcnIoZGFyciwgc2VsZWN0b3JSYW5nZSk7XG5cbiAgICAgICAgICAgIGRzdFJhbmdlLmVhY2goKGksIGopID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkUmkgIT09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93SW5kZXggPT09IF9kYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHtjZWxsfSA9IF9kYXJyW3Jvd0luZGV4XVtpbmRleF07XG5cbiAgICAgICAgICAgICAgICBsZXQgY2VsbFByb3AgPSBuZXcgQ2VsbFByb3AoaSwgaiwgY2VsbCwgeHkyZXhwcihpLCBqKSk7XG4gICAgICAgICAgICAgICAgcEFyci5wdXNoKGNlbGxQcm9wKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZGNpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWNvcmRSaSA9IGk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHJldHVybiBwQXJyO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0b29sYmFyOiB7XG4gICAgICAgIHVuZG86ICfmkqTplIAnLFxuICAgICAgICByZWRvOiAn5oGi5aSNJyxcbiAgICAgICAgcGFpbnRmb3JtYXQ6ICfmoLzlvI/liLcnLFxuICAgICAgICBjbGVhcmZvcm1hdDogJ+a4hemZpOagvOW8jycsXG4gICAgICAgIGZvcm1hdDogJ+aVsOaNruagvOW8jycsXG4gICAgICAgIGZvbnQ6ICflrZfkvZMnLFxuICAgICAgICBmb250U2l6ZTogJ+Wtl+WPtycsXG4gICAgICAgIGZvbnRCb2xkOiAn5Yqg57KXJyxcbiAgICAgICAgZm9udEl0YWxpYzogJ+WAvuaWnCcsXG4gICAgICAgIHVuZGVybGluZTogJ+S4i+WIkue6vycsXG4gICAgICAgIHN0cmlrZTogJ+WIoOmZpOe6vycsXG4gICAgICAgIHRleHRDb2xvcjogJ+Wtl+S9k+minOiJsicsXG4gICAgICAgIGZpbGxDb2xvcjogJ+Whq+WFheminOiJsicsXG4gICAgICAgIGJvcmRlcjogJ+i+ueahhicsXG4gICAgICAgIG1lcmdlOiAn5ZCI5bm25Y2V5YWD5qC8JyxcbiAgICAgICAgYWxpZ246ICfmsLTlubPlr7npvZAnLFxuICAgICAgICB2YWxpZ246ICflnoLnm7Tlr7npvZAnLFxuICAgICAgICB0ZXh0d3JhcDogJ+iHquWKqOaNouihjCcsXG4gICAgICAgIGZyZWV6ZTogJ+WGu+e7kycsXG4gICAgICAgIGF1dG9maWx0ZXI6ICfoh6rliqjnrZvpgIknLFxuICAgICAgICBhZGQ6ICfmuIXpmaTlhazlvI8nLFxuICAgICAgICBjYWxjOiAn5byA5aeL6K6h566XJyxcbiAgICAgICAgZm9ybXVsYTogJ+WHveaVsCcsXG4gICAgICAgIG1vcmU6ICfmm7TlpJonLFxuICAgICAgICB0aHJvd0Zvcm11bGE6ICfmmL7npLrlhazlvI8nLFxuICAgICAgICBjb21lQmFjazogJ+i/lOWbnicsXG4gICAgfSxcbiAgICByZXZpc2lvbjoge1xuICAgICAgICBjb21lQmFjazogJ+mAgOWHuicsXG4gICAgfSxcbiAgICBjb250ZXh0bWVudToge1xuICAgICAgICBjb3B5OiAn5aSN5Yi2JyxcbiAgICAgICAgY3V0OiAn5Ymq5YiHJyxcbiAgICAgICAgcGFzdGU6ICfnspjotLQnLFxuICAgICAgICBwYXN0ZVZhbHVlOiAn57KY6LS05pWw5o2uJyxcbiAgICAgICAgcGFzdGVGb3JtYXQ6ICfnspjotLTmoLzlvI8nLFxuICAgICAgICBpbnNlcnRSb3c6ICfmj5LlhaXooYwnLFxuICAgICAgICBpbnNlcnRDb2x1bW46ICfmj5LlhaXliJcnLFxuICAgICAgICBkZWxldGVSb3c6ICfliKDpmaTooYwnLFxuICAgICAgICBkZWxldGVDb2x1bW46ICfliKDpmaTliJcnLFxuICAgICAgICBkZWxldGVDZWxsOiAn5Yig6ZmkJyxcbiAgICAgICAgZGVsZXRlQ2VsbFRleHQ6ICfliKDpmaTmlbDmja4nLFxuICAgICAgICB2YWxpZGF0aW9uOiAn5pWw5o2u6aqM6K+BJyxcbiAgICAgICAgZXJyb3JQb3A6ICflh7rnjrDpl67popgnLFxuICAgICAgICByZWNvdmVyOiAn5oGi5aSN5q2k54mI5pysJyxcbiAgICB9LFxuICAgIGZvcm1hdDoge1xuICAgICAgICBub3JtYWw6ICfluLjop4QnLFxuICAgICAgICB0ZXh0OiAn5paH5pysJyxcbiAgICAgICAgbnVtYmVyOiAn5pWw5YC8JyxcbiAgICAgICAgcGVyY2VudDogJ+eZvuWIhuavlCcsXG4gICAgICAgIHJtYjogJ+S6uuawkeW4gScsXG4gICAgICAgIHVzZDogJ+e+juWFgycsXG4gICAgICAgIGRhdGU6ICfnn63ml6XmnJ8nLFxuICAgICAgICB0aW1lOiAn5pe26Ze0JyxcbiAgICAgICAgZGF0ZXRpbWU6ICfplb/ml6XmnJ8nLFxuICAgICAgICBkdXJhdGlvbjogJ+aMgee7reaXtumXtCcsXG4gICAgfSxcbiAgICBkYXRlX2Zvcm11bGE6IHtcbiAgICAgICAgc3VtOiAn5rGC5ZKMJyxcbiAgICAgICAgYXZlcmFnZTogJ+axguW5s+Wdh+WAvCcsXG4gICAgICAgIG1heDogJ+axguacgOWkp+WAvCcsXG4gICAgICAgIG1pbjogJ+axguacgOWwj+WAvCcsXG4gICAgICAgIGNvbmNhdDogJ+Wtl+espuaLvOaOpScsXG4gICAgICAgIHdsYW5kOiAnTUQuV0xBTkQnLFxuICAgICAgICB3ZnI6ICdNRC5XRlInLFxuICAgICAgICBydGQ6ICdNRC5SVEQnLFxuICAgIH0sXG4gICAgdmFsaWRhdGlvbjoge1xuICAgICAgICByZXF1aXJlZDogJ+atpOWAvOW/heWhqycsXG4gICAgICAgIG5vdE1hdGNoOiAn5q2k5YC85LiN5Yy56YWN6aqM6K+B6KeE5YiZJyxcbiAgICAgICAgYmV0d2VlbjogJ+atpOWAvOW6lOWcqCB7fSDlkowge30g5LmL6Ze0JyxcbiAgICAgICAgbm90QmV0d2VlbjogJ+atpOWAvOS4jeW6lOWcqCB7fSDlkowge30g5LmL6Ze0JyxcbiAgICAgICAgbm90SW46ICfmraTlgLzkuI3lnKjliJfooajkuK0nLFxuICAgICAgICBlcXVhbDogJ+atpOWAvOW6lOivpeetieS6jiB7fScsXG4gICAgICAgIG5vdEVxdWFsOiAn5q2k5YC85LiN5bqU6K+l562J5LqOIHt9JyxcbiAgICAgICAgbGVzc1RoYW46ICfmraTlgLzlupTor6XlsI/kuo4ge30nLFxuICAgICAgICBsZXNzVGhhbkVxdWFsOiAn5q2k5YC85bqU6K+l5bCP5LqO562J5LqOIHt9JyxcbiAgICAgICAgZ3JlYXRlclRoYW46ICfmraTlgLzlupTor6XlpKfkuo4ge30nLFxuICAgICAgICBncmVhdGVyVGhhbkVxdWFsOiAn5q2k5YC85bqU6K+l5aSn5LqO562J5LqOIHt9JyxcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICAgIHBhc3RlRm9yTWVyZ2VkQ2VsbDogJ+aXoOazleWvueWQiOW5tueahOWNleWFg+agvOaJp+ihjOatpOaTjeS9nCcsXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICB3ZWVrczogWyfml6UnLCAn5LiAJywgJ+S6jCcsICfkuIknLCAn5ZubJywgJ+S6lCcsICflha0nXSxcbiAgICAgICAgbW9udGhzOiBbJ+S4gOaciCcsICfkuozmnIgnLCAn5LiJ5pyIJywgJ+Wbm+aciCcsICfkupTmnIgnLCAn5YWt5pyIJywgJ+S4g+aciCcsICflhavmnIgnLCAn5Lmd5pyIJywgJ+WNgeaciCcsICfljYHkuIDmnIgnLCAn5Y2B5LqM5pyIJ10sXG4gICAgfSxcbiAgICBidXR0b246IHtcbiAgICAgICAgY2FuY2VsOiAn5Y+W5raIJyxcbiAgICAgICAgcmVtb3ZlOiAn5Yig6ZmkJyxcbiAgICAgICAgc2F2ZTogJ+S/neWtmCcsXG4gICAgICAgIG9rOiAn56Gu6K6kJyxcbiAgICB9LFxuICAgIHNvcnQ6IHtcbiAgICAgICAgZGVzYzogJ+mZjeW6jycsXG4gICAgICAgIGFzYzogJ+WNh+W6jycsXG4gICAgfSxcbiAgICBmaWx0ZXI6IHtcbiAgICAgICAgZW1wdHk6ICfnqbrnmb0nLFxuICAgIH0sXG4gICAgZGF0YVZhbGlkYXRpb246IHtcbiAgICAgICAgbW9kZTogJ+aooeW8jycsXG4gICAgICAgIHJhbmdlOiAn5Y2V5YWD5Yy66Ze0JyxcbiAgICAgICAgY3JpdGVyaWE6ICfmnaHku7YnLFxuICAgICAgICBtb2RlVHlwZToge1xuICAgICAgICAgICAgY2VsbDogJ+WNleWFg+agvCcsXG4gICAgICAgICAgICBjb2x1bW46ICfliJfmqKHlvI8nLFxuICAgICAgICAgICAgcm93OiAn6KGM5qih5byPJyxcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgbGlzdDogJ+WIl+ihqCcsXG4gICAgICAgICAgICBudW1iZXI6ICfmlbDlrZcnLFxuICAgICAgICAgICAgZGF0ZTogJ+aXpeacnycsXG4gICAgICAgICAgICBwaG9uZTogJ+aJi+acuuWPtycsXG4gICAgICAgICAgICBlbWFpbDogJ+eUteWtkOmCruS7ticsXG4gICAgICAgIH0sXG4gICAgICAgIG9wZXJhdG9yOiB7XG4gICAgICAgICAgICBiZTogJ+WcqOWMuumXtCcsXG4gICAgICAgICAgICBuYmU6ICfkuI3lnKjljLrpl7QnLFxuICAgICAgICAgICAgbHQ6ICflsI/kuo4nLFxuICAgICAgICAgICAgbHRlOiAn5bCP5LqO562J5LqOJyxcbiAgICAgICAgICAgIGd0OiAn5aSn5LqOJyxcbiAgICAgICAgICAgIGd0ZTogJ+Wkp+S6juetieS6jicsXG4gICAgICAgICAgICBlcTogJ+etieS6jicsXG4gICAgICAgICAgICBuZXE6ICfkuI3nrYnkuo4nLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuXG4iLCJpbXBvcnQge2RlYnVnb3V0fSBmcm9tIFwiLi9kZWJ1Z291dFwiO1xubGV0IGJ1Z291dCA9IFwiXCI7XG50cnkge1xuICAgIGJ1Z291dCA9IG5ldyBkZWJ1Z291dCgpO1xufSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG59XG5cbmV4cG9ydCB7XG4gICAgYnVnb3V0LFxufSIsIi8qXG5cbiAgICBkZWJ1Z291dC5qc1xuICAgIGJ5IEBpbm9yZ2FuaWtcblxuKi9cblxuXG4vLyBzYXZlIGFsbCB0aGUgY29uc29sZS5sb2dzXG5leHBvcnQgZnVuY3Rpb24gZGVidWdvdXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gT1BUSU9OU1xuICAgIHNlbGYucmVhbFRpbWVMb2dnaW5nT24gPSB0cnVlOyAvLyBsb2cgaW4gcmVhbCB0aW1lIChmb3J3YXJkcyB0byBjb25zb2xlLmxvZylcbiAgICBzZWxmLnVzZVRpbWVzdGFtcHMgPSBmYWxzZTsgLy8gaW5zZXJ0IGEgdGltZXN0YW1wIGluIGZyb250IG9mIGVhY2ggbG9nXG4gICAgc2VsZi51c2VMb2NhbFN0b3JhZ2UgPSB0cnVlOyAvLyBzdG9yZSB0aGUgb3V0cHV0IHVzaW5nIHdpbmRvdy5sb2NhbFN0b3JhZ2UoKSBhbmQgY29udGludW91c2x5IGFkZCB0byB0aGUgc2FtZSBsb2cgZWFjaCBzZXNzaW9uXG4gICAgc2VsZi5yZWNvcmRMb2dzID0gdHJ1ZTsgLy8gc2V0IHRvIGZhbHNlIGFmdGVyIHlvdSdyZSBzb2x2ZWQgZGVidWdnaW5nIHRvIGF2b2lkIHRoZSBsb2cgZWF0aW5nIHVwIG1lbW9yeVxuICAgIHNlbGYuYXV0b1RyaW0gPSB0cnVlOyAvLyB0byBhdm9pZCB0aGUgbG9nIGVhdGluZyB1cCBwb3RlbnRpYWxseSBlbmRsZXNzIG1lbW9yeVxuICAgIHNlbGYubWF4TGluZXMgPSAyNTAwOyAvLyBpZiBhdXRvVHJpbSBpcyB0cnVlLCB0aGlzIG1hbnkgbW9zdCByZWNlbnQgbGluZXMgYXJlIHNhdmVkXG4gICAgc2VsZi50YWlsTnVtTGluZXMgPSAxMDA7IC8vIGhvdyBtYW55IGxpbmVzIHRhaWwoKSB3aWxsIHJldHJpZXZlXG4gICAgc2VsZi5sb2dGaWxlbmFtZSA9ICdkZWJ1Z291dC50eHQnOyAvLyBmaWxlbmFtZSBvZiBsb2cgZG93bmxvYWRlZCB3aXRoIGRvd25sb2FkTG9nKClcblxuICAgIC8vIHZhcnNcbiAgICBzZWxmLmRlcHRoID0gMDtcbiAgICBzZWxmLnBhcmVudFNpemVzID0gWzBdO1xuICAgIHNlbGYuY3VycmVudFJlc3VsdCA9ICcnO1xuICAgIHNlbGYuc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgICBzZWxmLm91dHB1dCA9ICcnO1xuXG4gICAgdGhpcy52ZXJzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJzAuNS4wJ1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIFVTRVIgTUVUSE9EU1xuICAgICovXG4gICAgdGhpcy5nZXRMb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXRyaWV2YWxUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgLy8gaWYgcmVjb3JkaW5nIGlzIG9mZiwgc28gZGV2IGtub3dzIHdoeSB0aGV5IGRvbid0IGhhdmUgYW55IGxvZ3NcbiAgICAgICAgaWYgKCFzZWxmLnJlY29yZExvZ3MpIHtcbiAgICAgICAgICAgIHNlbGYubG9nKCdbZGVidWdvdXQuanNdIGxvZyByZWNvcmRpbmcgaXMgb2ZmLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHVzaW5nIGxvY2FsIHN0b3JhZ2UsIGdldCB2YWx1ZXNcbiAgICAgICAgaWYgKHNlbGYudXNlTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICB2YXIgc2F2ZWQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RlYnVnb3V0LmpzJyk7XG4gICAgICAgICAgICBpZiAoc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICBzYXZlZCA9IEpTT04ucGFyc2Uoc2F2ZWQpO1xuICAgICAgICAgICAgICAgIHNlbGYuc3RhcnRUaW1lID0gbmV3IERhdGUoc2F2ZWQuc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICBzZWxmLm91dHB1dCA9IHNhdmVkLmxvZztcbiAgICAgICAgICAgICAgICByZXRyaWV2YWxUaW1lID0gbmV3IERhdGUoc2F2ZWQubGFzdExvZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGYub3V0cHV0XG4gICAgICAgICAgICArICdcXG4tLS0tIExvZyByZXRyaWV2ZWQ6ICcgKyByZXRyaWV2YWxUaW1lICsgJyAtLS0tXFxuJ1xuICAgICAgICAgICAgKyBzZWxmLmZvcm1hdFNlc3Npb25EdXJhdGlvbihzZWxmLnN0YXJ0VGltZSwgcmV0cmlldmFsVGltZSk7XG4gICAgfVxuICAgIC8vIGFjY2VwdHMgb3B0aW9uYWwgbnVtYmVyIG9yIHVzZXMgdGhlIGRlZmF1bHQgZm9yIG51bWJlciBvZiBsaW5lc1xuICAgIHRoaXMudGFpbCA9IGZ1bmN0aW9uIChudW1MaW5lcykge1xuICAgICAgICB2YXIgbnVtTGluZXMgPSBudW1MaW5lcyB8fCBzZWxmLnRhaWxMaW5lcztcbiAgICAgICAgcmV0dXJuIHNlbGYudHJpbUxvZyhzZWxmLmdldExvZygpLCBudW1MaW5lcyk7XG4gICAgfVxuICAgIC8vIGFjY2VwdHMgYSBzdHJpbmcgdG8gc2VhcmNoIGZvclxuICAgIHRoaXMuc2VhcmNoID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICB2YXIgbGluZXMgPSBzZWxmLm91dHB1dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIHZhciByZ3ggPSBuZXcgUmVnRXhwKHN0cmluZyk7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIC8vIGNhbid0IHVzZSBhIHNpbXBsZSBBcnJheS5wcm90b3R5cGUuZmlsdGVyKCkgaGVyZVxuICAgICAgICAvLyBiZWNhdXNlIHdlIG5lZWQgdG8gYWRkIHRoZSBsaW5lIG51bWJlclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWRkciA9ICdbJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgaWYgKGxpbmVzW2ldLm1hdGNoKHJneCkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkLnB1c2goYWRkciArIGxpbmVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gbWF0Y2hlZC5qb2luKCdcXG4nKTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHJlc3VsdCA9ICdOb3RoaW5nIGZvdW5kIGZvciBcIicgKyBzdHJpbmcgKyAnXCIuJztcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICAvLyBhY2NlcHRzIHRoZSBzdGFydGluZyBsaW5lIGFuZCBob3cgbWFueSBsaW5lcyBhZnRlciB0aGUgc3RhcnRpbmcgbGluZSB5b3Ugd2FudFxuICAgIHRoaXMuZ2V0U2xpY2UgPSBmdW5jdGlvbiAobGluZU51bWJlciwgbnVtTGluZXMpIHtcbiAgICAgICAgdmFyIGxpbmVzID0gc2VsZi5vdXRwdXQuc3BsaXQoJ1xcbicpO1xuICAgICAgICB2YXIgc2VnbWVudCA9IGxpbmVzLnNsaWNlKGxpbmVOdW1iZXIsIGxpbmVOdW1iZXIgKyBudW1MaW5lcyk7XG4gICAgICAgIHJldHVybiBzZWdtZW50LmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICAvLyBpbW1lZGlhdGVseSBkb3dubG9hZHMgdGhlIGxvZyAtIGZvciBkZXNrdG9wIGJyb3dzZXIgdXNlXG4gICAgdGhpcy5kb3dubG9hZExvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpbGUgPSBcImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04LFwiO1xuICAgICAgICB2YXIgbG9nRmlsZSA9IHNlbGYuZ2V0TG9nKCk7XG4gICAgICAgIHZhciBlbmNvZGVkID0gZW5jb2RlVVJJQ29tcG9uZW50KGxvZ0ZpbGUpO1xuICAgICAgICBmaWxlICs9IGVuY29kZWQ7XG4gICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBhLmhyZWYgPSBmaWxlO1xuICAgICAgICBhLnRhcmdldCA9ICdfYmxhbmsnO1xuICAgICAgICBhLmRvd25sb2FkID0gc2VsZi5sb2dGaWxlbmFtZTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgYS5jbGljaygpO1xuICAgICAgICBhLnJlbW92ZSgpO1xuICAgIH1cbiAgICAvLyBjbGVhcnMgdGhlIGxvZ1xuICAgIHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbGVhclRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBzZWxmLm91dHB1dCA9ICctLS0tIExvZyBjbGVhcmVkOiAnICsgY2xlYXJUaW1lICsgJyAtLS0tXFxuJztcbiAgICAgICAgaWYgKHNlbGYudXNlTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAvLyBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAgICB2YXIgc2F2ZU9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICBzdGFydFRpbWU6IHNlbGYuc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgIGxvZzogc2VsZi5vdXRwdXQsXG4gICAgICAgICAgICAgICAgbGFzdExvZzogY2xlYXJUaW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzYXZlT2JqZWN0ID0gSlNPTi5zdHJpbmdpZnkoc2F2ZU9iamVjdCk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RlYnVnb3V0LmpzJywgc2F2ZU9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYucmVhbFRpbWVMb2dnaW5nT24pIGNvbnNvbGUubG9nKCdbZGVidWdvdXQuanNdIGNsZWFyKCknKTtcbiAgICB9XG4gICAgLy8gcmVjb3JkcyBhIGxvZ1xuICAgIHRoaXMubG9nID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAvLyBsb2cgaW4gcmVhbCB0aW1lXG4gICAgICAgIGlmIChzZWxmLnJlYWxUaW1lTG9nZ2luZ09uKSBjb25zb2xlLmxvZyhvYmopO1xuICAgICAgICAvLyByZWNvcmQgbG9nXG4gICAgICAgIHZhciB0eXBlID0gc2VsZi5kZXRlcm1pbmVUeXBlKG9iaik7XG4gICAgICAgIGlmICh0eXBlICE9PSBudWxsICYmIHNlbGYucmVjb3JkTG9ncykge1xuICAgICAgICAgICAgdmFyIGFkZGl0aW9uID0gb2JqO1xuICAgICAgICAgICAgLy8gdGltZXN0YW1wLCBmb3JtYXR0ZWQgZm9yIGJyZXZpdHlcbiAgICAgICAgICAgIGlmIChzZWxmLnVzZVRpbWVzdGFtcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9nVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5vdXRwdXQgKz0gc2VsZi5mb3JtYXRUaW1lc3RhbXAobG9nVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLm91dHB1dCArPSBhZGRpdGlvbiArICdcXG4nO1xuICAgICAgICAgICAgaWYgKHNlbGYuYXV0b1RyaW0pIHNlbGYub3V0cHV0ID0gc2VsZi50cmltTG9nKHNlbGYub3V0cHV0LCBzZWxmLm1heExpbmVzKTtcbiAgICAgICAgICAgIC8vIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgICAgIGlmIChzZWxmLnVzZUxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2F2ZU9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lOiBzZWxmLnN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgbG9nOiBzZWxmLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgbGFzdExvZzogbGFzdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzYXZlT2JqZWN0ID0gSlNPTi5zdHJpbmdpZnkoc2F2ZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkZWJ1Z291dC5qcycsIHNhdmVPYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlbGYuZGVwdGggPSAwO1xuICAgICAgICBzZWxmLnBhcmVudFNpemVzID0gWzBdO1xuICAgICAgICBzZWxmLmN1cnJlbnRSZXN1bHQgPSAnJztcbiAgICB9XG4gICAgLypcbiAgICAgICAgTUVUSE9EUyBGT1IgQ09OU1RSVUNUSU5HIFRIRSBMT0dcbiAgICAqL1xuXG4gICAgLy8gbGlrZSB0eXBlb2YgYnV0IGNsYXNzaWZpZXMgb2JqZWN0cyBvZiB0eXBlICdvYmplY3QnXG4gICAgLy8ga2VwdCBzZXBhcmF0ZSBmcm9tIGZvcm1hdFR5cGUoKSBzbyB5b3UgY2FuIHVzZSBhdCB5b3VyIGNvbnZlbmllbmNlIVxuICAgIHRoaXMuZGV0ZXJtaW5lVHlwZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHR5cGVSZXN1bHQ7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmplY3Q7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAobGVuID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0LmdldFRpbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVSZXN1bHQgPSAnRGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9iamVjdC50ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlUmVzdWx0ID0gJ1JlZ0V4cCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlUmVzdWx0ID0gJ09iamVjdCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0eXBlUmVzdWx0ID0gJ0FycmF5JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5cGVSZXN1bHQgPSB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVSZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3JtYXQgdHlwZSBhY2NvcmRpbmdseSwgcmVjdXJzaXZlbHkgaWYgbmVjZXNzYXJ5XG4gICAgdGhpcy5mb3JtYXRUeXBlID0gZnVuY3Rpb24gKHR5cGUsIG9iaikge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ09iamVjdCcgOlxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFJlc3VsdCArPSAne1xcbic7XG4gICAgICAgICAgICAgICAgc2VsZi5kZXB0aCsrO1xuICAgICAgICAgICAgICAgIHNlbGYucGFyZW50U2l6ZXMucHVzaChzZWxmLm9iamVjdFNpemUob2JqKSk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFJlc3VsdCArPSBzZWxmLmluZGVudHNGb3JEZXB0aChzZWxmLmRlcHRoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50UmVzdWx0ICs9IHByb3AgKyAnOiAnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3VidHlwZSA9IHNlbGYuZGV0ZXJtaW5lVHlwZShvYmpbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3VicmVzdWx0ID0gc2VsZi5mb3JtYXRUeXBlKHN1YnR5cGUsIG9ialtwcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFJlc3VsdCArPSBzdWJyZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gc2VsZi5wYXJlbnRTaXplc1tzZWxmLmRlcHRoXSAtIDEpIHNlbGYuY3VycmVudFJlc3VsdCArPSAnLCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gc2VsZi5wYXJlbnRTaXplc1tzZWxmLmRlcHRoXSAtIDEpIHNlbGYuY3VycmVudFJlc3VsdCArPSAnLCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLmRlcHRoLS07XG4gICAgICAgICAgICAgICAgc2VsZi5wYXJlbnRTaXplcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gc2VsZi5pbmRlbnRzRm9yRGVwdGgoc2VsZi5kZXB0aCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50UmVzdWx0ICs9ICd9JztcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5kZXB0aCA9PT0gMCkgcmV0dXJuIHNlbGYuY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FycmF5JyA6XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50UmVzdWx0ICs9ICdbJztcbiAgICAgICAgICAgICAgICBzZWxmLmRlcHRoKys7XG4gICAgICAgICAgICAgICAgc2VsZi5wYXJlbnRTaXplcy5wdXNoKG9iai5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJ0eXBlID0gc2VsZi5kZXRlcm1pbmVUeXBlKG9ialtpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJ0eXBlID09PSAnT2JqZWN0JyB8fCBzdWJ0eXBlID09PSAnQXJyYXknKSBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gJ1xcbicgKyBzZWxmLmluZGVudHNGb3JEZXB0aChzZWxmLmRlcHRoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnJlc3VsdCA9IHNlbGYuZm9ybWF0VHlwZShzdWJ0eXBlLCBvYmpbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VicmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gc3VicmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IHNlbGYucGFyZW50U2l6ZXNbc2VsZi5kZXB0aF0gLSAxKSBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJ0eXBlID09PSAnQXJyYXknKSBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gc2VsZi5wYXJlbnRTaXplc1tzZWxmLmRlcHRoXSAtIDEpIHNlbGYuY3VycmVudFJlc3VsdCArPSAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnR5cGUgIT09ICdPYmplY3QnKSBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpID09PSBzZWxmLnBhcmVudFNpemVzW3NlbGYuZGVwdGhdIC0gMSkgc2VsZi5jdXJyZW50UmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuZGVwdGgtLTtcbiAgICAgICAgICAgICAgICBzZWxmLnBhcmVudFNpemVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFJlc3VsdCArPSAnXSc7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVwdGggPT09IDApIHJldHVybiBzZWxmLmN1cnJlbnRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbicgOlxuICAgICAgICAgICAgICAgIG9iaiArPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBvYmouc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzW2ldLm1hdGNoKC9cXH0vKSkgc2VsZi5kZXB0aC0tO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRSZXN1bHQgKz0gc2VsZi5pbmRlbnRzRm9yRGVwdGgoc2VsZi5kZXB0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lc1tpXS5tYXRjaCgvXFx7LykpIHNlbGYuZGVwdGgrKztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50UmVzdWx0ICs9IGxpbmVzW2ldICsgJ1xcbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmN1cnJlbnRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdSZWdFeHAnIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJy8nICsgb2JqLnNvdXJjZSArICcvJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnIDpcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZycgOlxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmRlcHRoID4gMCB8fCBvYmoubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnXCInICsgb2JqICsgJ1wiJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nIDpcbiAgICAgICAgICAgICAgICBpZiAob2JqKSByZXR1cm4gJ3RydWUnO1xuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuICdmYWxzZSc7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICsgJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pbmRlbnRzRm9yRGVwdGggPSBmdW5jdGlvbiAoZGVwdGgpIHtcbiAgICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcHRoOyBpKyspIHtcbiAgICAgICAgICAgIHN0ciArPSAnXFx0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICB0aGlzLnRyaW1Mb2cgPSBmdW5jdGlvbiAobG9nLCBtYXhMaW5lcykge1xuICAgICAgICB2YXIgbGluZXMgPSBsb2cuc3BsaXQoJ1xcbicpO1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gbWF4TGluZXMpIHtcbiAgICAgICAgICAgIGxpbmVzID0gbGluZXMuc2xpY2UobGluZXMubGVuZ3RoIC0gbWF4TGluZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICB9XG4gICAgdGhpcy5saW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYub3V0cHV0LnNwbGl0KCdcXG4nKS5sZW5ndGg7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSB0ZXN0aW5nIHRpbWVcbiAgICB0aGlzLmZvcm1hdFNlc3Npb25EdXJhdGlvbiA9IGZ1bmN0aW9uIChzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAgICAgdmFyIG1zZWMgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuICAgICAgICB2YXIgaGggPSBNYXRoLmZsb29yKG1zZWMgLyAxMDAwIC8gNjAgLyA2MCk7XG4gICAgICAgIHZhciBocnMgPSAoJzAnICsgaGgpLnNsaWNlKC0yKTtcbiAgICAgICAgbXNlYyAtPSBoaCAqIDEwMDAgKiA2MCAqIDYwO1xuICAgICAgICB2YXIgbW0gPSBNYXRoLmZsb29yKG1zZWMgLyAxMDAwIC8gNjApO1xuICAgICAgICB2YXIgbWlucyA9ICgnMCcgKyBtbSkuc2xpY2UoLTIpO1xuICAgICAgICBtc2VjIC09IG1tICogMTAwMCAqIDYwO1xuICAgICAgICB2YXIgc3MgPSBNYXRoLmZsb29yKG1zZWMgLyAxMDAwKTtcbiAgICAgICAgdmFyIHNlY3MgPSAoJzAnICsgc3MpLnNsaWNlKC0yKTtcbiAgICAgICAgbXNlYyAtPSBzcyAqIDEwMDA7XG4gICAgICAgIHJldHVybiAnLS0tLSBTZXNzaW9uIGR1cmF0aW9uOiAnICsgaHJzICsgJzonICsgbWlucyArICc6JyArIHNlY3MgKyAnIC0tLS0nXG4gICAgfVxuICAgIHRoaXMuZm9ybWF0VGltZXN0YW1wID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgeWVhciA9IHRpbWVzdGFtcC5nZXRGdWxsWWVhcigpO1xuICAgICAgICB2YXIgZGF0ZSA9IHRpbWVzdGFtcC5nZXREYXRlKCk7XG4gICAgICAgIHZhciBtb250aCA9ICgnMCcgKyAodGltZXN0YW1wLmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpO1xuICAgICAgICB2YXIgaHJzID0gTnVtYmVyKHRpbWVzdGFtcC5nZXRIb3VycygpKTtcbiAgICAgICAgdmFyIG1pbnMgPSAoJzAnICsgdGltZXN0YW1wLmdldE1pbnV0ZXMoKSkuc2xpY2UoLTIpO1xuICAgICAgICB2YXIgc2VjcyA9ICgnMCcgKyB0aW1lc3RhbXAuZ2V0U2Vjb25kcygpKS5zbGljZSgtMik7XG4gICAgICAgIHJldHVybiAnWycgKyB5ZWFyICsgJy0nICsgbW9udGggKyAnLScgKyBkYXRlICsgJyAnICsgaHJzICsgJzonICsgbWlucyArICc6JyArIHNlY3MgKyAnXTogJztcbiAgICB9XG4gICAgdGhpcy5vYmplY3RTaXplID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgc2l6ZSA9IDAsIGtleTtcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHNpemUrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICBTVEFSVC9SRVNVTUUgTE9HXG4gICAgKi9cbiAgICBpZiAoc2VsZi51c2VMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgdmFyIHNhdmVkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkZWJ1Z291dC5qcycpO1xuICAgICAgICBpZiAoc2F2ZWQpIHtcbiAgICAgICAgICAgIHNhdmVkID0gSlNPTi5wYXJzZShzYXZlZCk7XG4gICAgICAgICAgICBzZWxmLm91dHB1dCA9IHNhdmVkLmxvZztcbiAgICAgICAgICAgIHZhciBzdGFydCA9IG5ldyBEYXRlKHNhdmVkLnN0YXJ0VGltZSk7XG4gICAgICAgICAgICB2YXIgZW5kID0gbmV3IERhdGUoc2F2ZWQubGFzdExvZyk7XG4gICAgICAgICAgICBzZWxmLm91dHB1dCArPSAnXFxuLS0tLSBTZXNzaW9uIGVuZDogJyArIHNhdmVkLmxhc3RMb2cgKyAnIC0tLS1cXG4nO1xuICAgICAgICAgICAgc2VsZi5vdXRwdXQgKz0gc2VsZi5mb3JtYXRTZXNzaW9uRHVyYXRpb24oc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICBzZWxmLm91dHB1dCArPSAnXFxuXFxuJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxmLm91dHB1dCArPSAnLS0tLSBTZXNzaW9uIHN0YXJ0ZWQ6ICcgKyBzZWxmLnN0YXJ0VGltZSArICcgLS0tLVxcblxcbic7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9