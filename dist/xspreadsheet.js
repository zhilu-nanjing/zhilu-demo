!function(e){function t(t){for(var n,o,l=t[0],s=t[1],u=t[2],d=0,f=[];d<l.length;d++)o=l[d],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&f.push(a[o][0]),a[o]=0;for(n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n]);for(c&&c(t);f.length;)f.shift()();return i.push.apply(i,u||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,l=1;l<r.length;l++){var s=r[l];0!==a[s]&&(n=!1)}n&&(i.splice(t--,1),e=o(o.s=r[0]))}return e}var n={},a={2:0,0:0},i=[];function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var l=window.webpackJsonp=window.webpackJsonp||[],s=l.push.bind(l);l.push=t,l=l.slice();for(var u=0;u<l.length;u++)t(l[u]);var c=s;i.push([86,1]),r()}([function(e,t,r){"use strict";function n(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.h=t.Element=void 0;var i=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"==typeof t?(this.el=document.createElement(t),this.el.className=r):this.el=t,this.data={}}var t,r,i;return t=e,(r=[{key:"data",value:function(e,t){return void 0!==t?(this.data[e]=t,this):this.data[e]}},{key:"on",value:function(e,t){var r=n(e.split(".")),a=r[0],i=r.slice(1),o=a;return"mousewheel"===o&&/Firefox/i.test(window.navigator.userAgent)&&(o="DOMMouseScroll"),this.el.addEventListener(o,(function(e){t(e);for(var r=0;r<i.length;r+=1){var n=i[r];if("left"===n&&0!==e.button)return;if("right"===n&&2!==e.button)return;"stop"===n&&e.stopPropagation()}})),this}},{key:"offset",value:function(e){var t=this;if(void 0!==e)return Object.keys(e).forEach((function(r){t.css(r,"".concat(e[r],"px"))})),this;var r=this.el;return{top:r.offsetTop,left:r.offsetLeft,height:r.offsetHeight,width:r.offsetWidth}}},{key:"scroll",value:function(e){var t=this.el;return void 0!==e&&(void 0!==e.left&&(t.scrollLeft=e.left),void 0!==e.top&&(t.scrollTop=e.top)),{left:t.scrollLeft,top:t.scrollTop}}},{key:"box",value:function(){return this.el.getBoundingClientRect()}},{key:"parent",value:function(){return new e(this.el.parentNode)}},{key:"children",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return 0===arguments.length?this.el.childNodes:(r.forEach((function(t){return e.child(t)})),this)}},{key:"child",value:function(t){var r=t;return"string"==typeof t?r=document.createTextNode(t):t instanceof e&&(r=t.el),this.el.appendChild(r),this}},{key:"contains",value:function(e){return this.el.contains(e)}},{key:"className",value:function(e){return void 0!==e?(this.el.className=e,this):this.el.className}},{key:"addClass",value:function(e){return this.el.classList.add(e),this}},{key:"hasClass",value:function(e){return this.el.classList.contains(e)}},{key:"removeClass",value:function(e){return this.el.classList.remove(e),this}},{key:"toggle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"active";return this.toggleClass(e)}},{key:"toggleClass",value:function(e){return this.el.classList.toggle(e)}},{key:"active",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"active";return e?this.addClass(t):this.removeClass(t),this}},{key:"checked",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.active(e,"checked"),this}},{key:"disabled",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return e?this.addClass("disabled"):this.removeClass("disabled"),this}},{key:"attr",value:function(e,t){var r=this;if(void 0!==t)this.el.setAttribute(e,t);else{if("string"==typeof e)return this.el.getAttribute(e);Object.keys(e).forEach((function(t){r.el.setAttribute(t,e[t])}))}return this}},{key:"removeAttr",value:function(e){return this.el.removeAttribute(e),this}},{key:"html",value:function(e){return void 0!==e?(this.el.innerHTML=e,this):this.el.innerHTML}},{key:"val",value:function(e){return void 0!==e?(this.el.value=e,this):this.el.value}},{key:"cssRemoveKeys",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.forEach((function(t){return e.el.style.removeProperty(t)})),this}},{key:"css",value:function(e,t){var r=this;return void 0===t&&"string"!=typeof e?(Object.keys(e).forEach((function(t){r.el.style[t]=e[t]})),this):void 0!==t?(this.el.style[e]=t,this):this.el.style[e]}},{key:"removeEl",value:function(){this.el&&this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},{key:"computedStyle",value:function(){return window.getComputedStyle(this.el,null)}},{key:"isShow",value:function(){return"block"===this.el.style.display}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"display",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"block";return this.css(e,t),this}},{key:"hide",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"display",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"none";return this.css(e,t),this}}])&&a(t.prototype,r),i&&a(t,i),e}();t.Element=i;t.h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new i(e,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.offsetTop=t.offsetLeft=t.filterFormula=t.look2=t.look=t.cssPrefix=void 0;t.cssPrefix="fin-cell";t.look=["*悬浮查看*","*HYPERLINK*","*MULTIPLECELLS*"];t.look2="#CHECK！";t.filterFormula=["CITY"];t.offsetLeft=60;t.offsetTop=70},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reportError=function(e){return console.log(new Error(e)),new Error(e)},t.reportConvertFail=function(e){return{msg:"CONVERT_FAIL",instance:e}},t.errorObj=t.errorMsgArr=t.PARSE_FAIL_OBJ=t.PARSE_FAIL=t.ERROR_NON_SOLVED=t.ERROR_SYNTAX=t.ERROR_ERROR=t.ERROR_CIRCULAR=t.ERROR_DATE_STR=t.ERROR_GETTING_DATA=t.ERROR_NA=t.ERROR_NUM=t.ERROR_NAME=t.ERROR_REF=t.ERROR_VALUE=t.ERROR_DIV0=t.ERROR_NULL=void 0;t.ERROR_NULL="#NULL!";t.ERROR_DIV0="#DIV/0!";t.ERROR_VALUE="#VALUE!";t.ERROR_REF="#REF!";t.ERROR_NAME="#NAME?";t.ERROR_NUM="#NUM!";t.ERROR_NA="#N/A";t.ERROR_GETTING_DATA="#GETTING_DATA!";t.ERROR_DATE_STR="#DATE!";t.ERROR_CIRCULAR="#CIRCULA!";t.ERROR_ERROR="#ERROR!";t.ERROR_SYNTAX="#SYNTAX";t.ERROR_NON_SOLVED="NON_SOLVED";t.PARSE_FAIL="PARSE_FAIL";t.PARSE_FAIL_OBJ={msg:"PARSE_FAIL"};var n=["#NULL!","#DIV/0!","#VALUE!","#REF!","#NAME?","#NUM!","#N/A","#GETTING_DATA!","#DATE!","#CIRCULA!","#ERROR!","#SYNTAX"];t.errorMsgArr=n;var a={ERROR_NULL:new Error("#NULL!"),ERROR_DIV0:new Error("#DIV/0!"),ERROR_VALUE:new Error("#VALUE!"),ERROR_REF:new Error("#REF!"),ERROR_NAME:new Error("#NAME?"),ERROR_NUM:new Error("#NUM!"),ERROR_NA:new Error("#N/A"),ERROR_GETTING_DATA:new Error("#GETTING_DATA!"),ERROR_DATE_STR:new Error("#DATE!"),ERROR_CIRCULAR:new Error("#CIRCULA!"),ERROR_ERROR:new Error("#ERROR!"),ERROR_SYNTAX:new Error("#SYNTAX"),ERROR_NON_SOLVED:new Error("NON_SOLVED")};t.errorObj=a},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.stringAt=a,t.indexAt=i,t.expr2xy=o,t.xy2expr=l,t.default=void 0;var n=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];function a(e){for(var t="",r=e;r>=n.length;)r/=n.length,r-=1,t+=n[parseInt(r,10)%n.length];var a=e%n.length;return t+=n[a]}function i(e){for(var t=0,r=0;r<e.length-1;r+=1){var a=e.charCodeAt(r)-65,i=e.length-1-r;t+=Math.pow(n.length,i)+n.length*a}return t+=e.charCodeAt(e.length-1)-65}function o(e){for(var t="",r="",n=0;n<e.length;n+=1)e.charAt(n)>="0"&&e.charAt(n)<="9"?r+=e.charAt(n):t+=e.charAt(n);return[i(t),parseInt(r,10)-1]}function l(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e*=1,t*=1,2===r?"".concat(a(e),"$").concat(t+1):1===r?"$".concat(a(e)).concat(t+1):"".concat(a(e)).concat(t+1)}var s={expr2xy:o,xy2expr:l};t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CellRange=t.default=void 0;var n=r(4);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t,r,n,a){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sri=t,this.sci=r,this.eri=n,this.eci=a,this.w=i,this.h=o}var t,r,o;return t=e,o=[{key:"valueOf",value:function(t){var r=t.split(":"),i=a((0,n.expr2xy)(r[0]),2),o=i[0],l=i[1],s=l,u=o;if(r.length>1){var c=a((0,n.expr2xy)(r[1]),2);u=c[0],s=c[1]}return new e(l,o,s,u)}}],(r=[{key:"set",value:function(e,t,r,n){this.sri=e,this.sci=t,this.eri=r,this.eci=n}},{key:"multiple",value:function(){return this.eri-this.sri>0||this.eci-this.sci>0}},{key:"includes",value:function(){for(var e=0,t=0,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];if(1===i.length){var l=(0,n.expr2xy)(i[0]),s=a(l,2);t=s[0],e=s[1]}else 2===i.length&&(e=i[0],t=i[1]);var u=this.sri,c=this.sci,d=this.eri,f=this.eci;return u<=e&&e<=d&&c<=t&&t<=f}},{key:"each",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0},r=this.sri,n=this.sci,a=this.eri,i=this.eci,o=r;o<=a;o+=1)if(t(o))for(var l=n;l<=i;l+=1)e(o,l)}},{key:"getType",value:function(){var e=this.sri,t=this.sci,r=this.eri,n=this.eci;return e===r&&t!==n?1:e!==r&&t===n?2:e!==r&&t!==n?3:e===r&&t===n?1:(console.error("未知情况"),4)}},{key:"move",value:function(e,t){var r=this.eri-this.sri,n=this.eci-this.sci;this.sri=e,this.sci=t,this.eri=this.sri+r,this.eci=this.sci+n}},{key:"move2",value:function(e,t,r,n){this.sri=e,this.sci=t,this.eri=r,this.eci=n}},{key:"contains",value:function(e){return this.sri<=e.sri&&this.sci<=e.sci&&this.eri>=e.eri&&this.eci>=e.eci}},{key:"within",value:function(e){return this.sri>=e.sri&&this.sci>=e.sci&&this.eri<=e.eri&&this.eci<=e.eci}},{key:"disjoint",value:function(e){return this.sri>e.eri||this.sci>e.eci||e.sri>this.eri||e.sci>this.eci}},{key:"intersects",value:function(e){return this.sri<=e.eri&&this.sci<=e.eci&&e.sri<=this.eri&&e.sci<=this.eci}},{key:"getMovePos",value:function(e,t){var r=this.sri,n=this.sci,a=this.eri,i=this.eci,o=0;return e>a&&t>i?o=1:e>a&&t<n?o=7:e<r&&t>i?o=8:t<n&&e<r?o=4:e>a?o=2:t>i?o=3:t<n?o=5:e<r&&(o=6),o}},{key:"union",value:function(t){var r=this.sri,n=this.sci,a=this.eri,i=this.eci;return new e(t.sri<r?t.sri:r,t.sci<n?t.sci:n,t.eri>a?t.eri:a,t.eci>i?t.eci:i)}},{key:"difference",value:function(t){var r=[],n=function(t,n,a,i){r.push(new e(t,n,a,i))},a=this.sri,i=this.sci,o=this.eri,l=this.eci,s=t.sri-a,u=t.sci-i,c=o-t.eri,d=l-t.eci;return s>0?(n(a,i,t.sri-1,l),c>0?(n(t.eri+1,i,o,l),u>0&&n(t.sri,i,t.eri,t.sci-1),d>0&&n(t.sri,t.eci+1,t.eri,l)):(u>0&&n(t.sri,i,o,t.sci-1),d>0&&n(t.sri,t.eci+1,o,l))):c>0&&(n(t.eri+1,i,o,l),u>0&&n(a,i,t.eri,t.sci-1),d>0&&n(a,t.eci+1,t.eri,l)),u>0?(n(a,i,o,t.sci-1),d>0?(n(a,t.eri+1,o,l),s>0&&n(a,t.sci,t.sri-1,t.eci),c>0&&n(t.sri+1,t.sci,o,t.eci)):(s>0&&n(a,t.sci,t.sri-1,l),c>0&&n(t.sri+1,t.sci,o,l))):d>0&&(n(o,t.eci+1,o,l),s>0&&n(a,i,t.sri-1,t.eci),c>0&&n(t.eri+1,i,o,t.eci)),r}},{key:"size",value:function(){return[this.eri-this.sri+1,this.eci-this.sci+1]}},{key:"toString",value:function(){var e=this.sri,t=this.sci,r=this.eri,a=this.eci,i=(0,n.xy2expr)(t,e);return this.multiple()&&(i="".concat(i,":").concat((0,n.xy2expr)(a,r))),i}},{key:"includeByRiCi",value:function(e,t){var r=this.sri,n=this.sci,a=this.eri,i=this.eci;return r<=e&&a>=e&&n<=t&&i>=t}},{key:"getLocationArray",value:function(e){var t=[],r=0;return this.each((function(n,a){t.push({ri:n,ci:a,v:e[r%e.length].tmp,type:e[r%e.length].type}),r+=1})),t}},{key:"equals",value:function(e){return this.eri===e.eri&&this.eci===e.eci&&this.sri===e.sri&&this.sci===e.sci}}])&&i(t.prototype,r),o&&i(t,o),e}();t.CellRange=o;var l=o;t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLegal=function(e){var t=function(e){return"("===e||"["===e||"{"===e||"/*"===e?0:")"===e||"]"===e||"}"===e||"*/"===e?1:2},r=[];if(null!==e||""!==e||void 0!==e){for(var n=0;n<e.length;n++){var a=e.charAt(n);if(0===t(a))r.push(a);else if(!(1!==t(a)||0!==r.length&&(i=r.pop(),o=a,"("===i&&")"===o||"{"===i&&"}"===o||"["===i&&"]"===o||"/*"===i&&"*/"===o)))return!1}return 0===r.length}var i,o},t.distinct=function(e){return function(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(new Set(e))},t.changeFormula=function(e){for(var t=0;t<e.length;t++){var r=e[t];-1===r.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)&&(e[t]="".concat(r,":").concat(r))}return e},t.deepCopy=function e(t){var r=Array.isArray(t)?[]:{};for(var n in t)t.hasOwnProperty(n)&&("object"===a(t[n])&&null!==t[n]?r[n]=e(t[n]):r[n]=t[n]);return r},t.positionAngle=t.cuttingByPos2=t.cuttingByPosEnd2=t.isSheetVale=t.splitStr=t.value2absolute=t.cuttingByPosEnd=t.operation3=t.cutFirst=t.cuttingByPos=t.isAbsoluteValue=t.cutting2=t.cutting=t.cutStr=t.operation=t.operator=void 0;var n=r(19);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=["+","-","*","/","&","^","(",",","="," "," ","，"];t.operator=i;var o=["+","-","*","/","&","^","(",",","="," ","，"],l=["+","-","*","/","&","^","(",",","=",")","，"],s=function(e){for(var t=0;t<i.length;t++)if(i[t]===e)return 1;return 0};t.operation=s;var u=function(e){for(var t=0;t<i.length;t++)if(o[t]===e)return 1;return 0};t.operation3=u;var c=function(e){for(var t=0;t<l.length;t++)if(l[t]===e)return 1;return 0};t.value2absolute=function(e){for(var t="",r=!1,n=0;n<e.length;n++)!1===r&&1*e[n]>=0&&1*e[n]<=9&&(t+="$",r=!0),t+=e[n];return{s1:t,s2:"$"+e,s3:"$"+t}};t.cutStr=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("="!==(e=(e+="").toUpperCase())[0])return[];for(var a=e.split((0,n.str2Re)(n.logicOperator)),i=0;i<a.length;i++)a[i]=a[i].replace((0,n.str2Re)(n.blankOperator),"");var o=[],l=0;return a.filter((function(e){var i=!0;a.length>l+1&&(-1!==a[l+1].indexOf("(")&&(i=!1));if(r&&i)-1===(e=e.replace(/\$/g,"")).search((0,n.str2Re)(n.letterOperator))&&-1===e.search((0,n.str2Re)(n.letterAndLetterOperator))||-1===o.indexOf(e)&&o.push(e);else if(i){if(-1!==e.search((0,n.str2Re)(n.letterOperator))||-1!==e.search((0,n.str2Re)(n.letterOperatorWithDollor))||-1!==e.search((0,n.str2Re)(n.letterOperatorWithDollorEnd))||-1!==e.search((0,n.str2Re)(n.letterOperatorWithDollorPrex)))-1!==o.indexOf(e)&&!0!==t||o.push(e);else-1!==e.replace(/\$/g,"").search((0,n.str2Re)(n.letterAndLetterOperator))&&o.push(e)}l+=1})),o};t.cutFirst=function(e){for(var t="",r=0;r<e.length;r++){if(c(e[r]))return t;t+=e[r]}return t};t.cuttingByPos=function(e,t){for(var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n="",a=!1,i=t-1;i>0&&!1===a;i--)!1===(a=!1===r?1===u(e[i]):1===s(e[i]))&&(n+=e[i]);return r&&(n=n.replace(/\s/g,"")),(n=n.split("").reverse().join("")).toUpperCase()};t.cuttingByPos2=function(e,t){for(var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n="",a=!1,i=t-1;i>0&&!1===a;i--)!1===(a=!1===r?1===u(e[i]):1===s(e[i]))&&(n+=e[i]);return r&&(n=n.replace(/\s/g,"")),n=n.split("").reverse().join("")};t.cuttingByPosEnd=function(e,t){for(var r="",n=!1,a=t-1;a<e.length&&!1===n;a++)!1===(n=1===s(e[a]))&&")"!==e[a]&&(r+=e[a]);return r.toUpperCase()};t.cuttingByPosEnd2=function(e,t){for(var r="",n=t-1;n<e.length;n++)r+=e[n];return r};t.cutting=function(e){for(var t=[],r=0;r<e.length;r++)e[r]&&t.push(e[r]);return t};t.isSheetVale=function(e){return-1!==(e=e.toUpperCase()).search(/[\u4E00-\u9FA50-9a-zA-Z]+![A-Za-z]+\$\d+/)||(-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+!\$[A-Za-z]+\d+/)||(-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+!\$[A-Za-z]+\$\d+/)||-1!==e.search(/[\u4E00-\u9FA50-9a-zA-Z]+![A-Za-z]+\d+/)))};t.positionAngle=function(e,t,r,n){var a,i,o,l,s=0,u=Math.abs((o=(i={x:t,y:n}).x-(a={x:e,y:r}).x,l=i.y-a.y,360*Math.atan(l/o)/(2*Math.PI)));return e<t&&r<n?s=1:e>t&&r<n?s=2:e<t&&r>n?s=3:e>t&&r>n&&(s=4),1===s&&u<45?s=3:2===s&&u>30?s=1:3===s&&u>30?s=4:4===s&&u<45?s=2:s};t.isAbsoluteValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e=e.toUpperCase(),1===t?-1!==e.search(/^\$[A-Z]+\$\d+$/)?3:-1!==e.search(/^\$[A-Z]+\d+$/)?1:-1!==e.search(/^[A-Z]+\$\d+$/)&&2:3===t?-1!==e.search(/^\$[A-Z]+\$\d+$/)||(-1!==e.search(/^[A-Z]+\d+$/)||(-1!==e.search(/^\$[A-Z]+\d+$/)||-1!==e.search(/^[A-Z]+\$\d+$/))):4!==t?5===t?-1!==e.search(/^[A-Z]+\d+:\$[A-Z]+\d+$/)?8:-1!==e.search(/^[A-Z]+\d+:[A-Z]+\$\d+$/)?9:-1!==e.search(/^[A-Z]+\$\d+:[A-Z]+\d+$/)?10:-1!==e.search(/^\$[A-Z]+\d+:[A-Z]+\d+$/)?11:-1!==e.search(/^\$[A-Z]+\$\d+$/)?3:-1!==e.search(/^[A-Z]+\d+$/)?12:-1!==e.search(/^[A-Z]+\d+:[A-Z]+\d+$/)?13:-1!==e.search(/^\$[A-Z]+\d+$/)?1:-1!==e.search(/^[A-Z]+\$\d+$/)?2:-1!==e.search(/^[A-Z]+\$\d+:[A-Z]+\$\d+$/)?4:-1!==e.search(/^[A-Z]+\$\d+:\$[A-Z]+\d+$/)?5:-1!==e.search(/^\$[A-Z]+\d+:[A-Z]+\$\d+$/)?6:-1!==e.search(/^\$[A-Z]+\d+:\$[A-Z]+\d+$/)&&7:6===t?-1!==(e=e.replace(/\$/g,"")).search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/):-1!==e.search(/^[A-Za-z]+\d+$/)||-1!==e.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/):-1!==e.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)||void 0};t.splitStr=function(e){for(var t=e.split(/([(-\/,+，*\s=^&])/),r=[],n=0;n<t.length;n++){var a=1;if(t.length>n+1){var i=t[n+1];"("===t[n]?a=3:-1!==i.indexOf("(")&&(a=2)}3!==a&&(2===a?r.push(t[n]+"("):r.push(t[n]))}return r};t.cutting2=function(e){for(var t=e.split(/([(-\/,+，*\s=^&])/),r=0,n=[],a=0;a<t.length;a++)t[a]&&n.push(t[a]);for(var i=[],o=0;o<n.length;o++){var l=n[o].toUpperCase(),s=!0;if(n.length>o+1)-1!==n[o+1].indexOf("(")&&(s=!1);if(-1===l.search(/^[A-Z]+\d+$/)&&-1===l.search(/^\$[A-Z]+\$\d+$/)&&-1===l.search(/^[A-Z]+\$\d+$/)&&-1===l.search(/^\$[A-Z]+\d+$/)&&-1===l.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)||!s){if(-1!==l.replace(/\$/g,"").search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)&&s){for(var u=0;u<n[o].length;u++)i.push({code:r,data:n[o][u]});r+=1}else for(var c=0;c<n[o].length;c++)i.push({code:-1,data:n[o][c]})}else{for(var d=0;d<n[o].length;d++)i.push({code:r,data:n[o][d]});r+=1}}return i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyMultiSheetObj=t.NOT_SUPPORT=t.SHAPE_DIFF=t.NOT_NUMBER=t.INVALID_MATRIX=t.TO_PARA_TYPE=t.E_PATTERN=t.CLEAN_FLOAT_PATTERN=t.FLOAT_WITH_COMMA_PATTERN=t.INT_WITH_COMMA_PATTERN=t.ALL_DIGIT_PATTERN_STR=t.d18991230STR=t.d18991230MS=t.d18991230=t.FORCE_STR_MARK=t.MONEY_UNIT_OBJ=t.PRE_DEFINED_CONST=t.SINGLE_CHAR_OPERATOR=t.MULTI_CHAR_OPERATOR=t.MARK_OBJ=t.FORMULA_STATUS=t.common_operations=t.MS_PER_DAY=void 0;t.MS_PER_DAY=864e5;t.common_operations={"*":"multiply","+":"plus","-":"subtractDays","/":"divide","^":"power","&":"concat","<":"lt",">":"gt","=":"eq"};t.FORMULA_STATUS={created:"created",working:"working",solved:"solved"};t.MARK_OBJ={percent:"%",star:"*",plus:"+",dash:"-",slash:"/",caret:"^",ampersand:"&",lessThen:"<",greaterThen:">",equal:"=",exclamation:"!",leftParentheses:"(",rightParentheses:")",comma:",",leftBracket:"[",rightBracket:"]",leftBrace:"{",rightBrace:"}",colon:":",hash:"#",at:"@",space:" ",doubleQue:'"'};t.MULTI_CHAR_OPERATOR={notEqual:"<>",greaterEqual:">=",lessEqual:"<="};t.SINGLE_CHAR_OPERATOR={percent:"%",minus:"-",star:"*",plus:"+",slash:"/",caret:"^",ampersand:"&",lessThen:"<",greaterThen:">",equal:"="};t.PRE_DEFINED_CONST={true:"TRUE",false:"FALSE"};t.MONEY_UNIT_OBJ={dollar:"$"};t.FORCE_STR_MARK="'";var n=new Date(1899,11,30);t.d18991230=n;t.d18991230MS=-22091904e5;t.d18991230STR="1899/12/30";t.ALL_DIGIT_PATTERN_STR="^\\d+$";t.INT_WITH_COMMA_PATTERN=/^0*[1-9]\d*(,\d{3})+$/;t.FLOAT_WITH_COMMA_PATTERN=/^0*[1-9]\d*(,\d{3})+(\.\d+)?$/;t.CLEAN_FLOAT_PATTERN=/^\d*(\.\d+)?$/;t.E_PATTERN=/[eE]/;t.TO_PARA_TYPE={date:"date",string:"string",number:"number"};t.INVALID_MATRIX="INVALID_MATRIX";t.NOT_NUMBER="NOT_NUMBER";t.SHAPE_DIFF="SHARPE_DIFF";t.NOT_SUPPORT="NOT_SUPPORT";t.EmptyMultiSheetObj={Sheet1:{A1:{f:""}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bind=a,t.remove=function(){for(var e=0;e<n.length;e++){var t=n[e];i(t.target,t.name,t.fn)}},t.unbind=i,t.unbindClickoutside=o,t.createEvent=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"keydown",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,a=document.createEvent("HTMLEvents");a.initEvent(r,!0,!0),a.eventType="message",a.buttons=n,a.keyCode=e,a.metaKey=t,document.dispatchEvent(a)},t.bindClickoutside=function(e,t){e.xclickoutside=function(r){2===r.detail||e.contains(r.target)||(t?t(e):(e.hide(),o(e)))},a(window.document.body,"click",e.xclickoutside)},t.mouseMoveUp=function(e,t,r){a(e,"mousemove",t),e.xEvtUp=function(n){i(e,"mousemove",t),i(e,"mouseup",e.xEvtUp),r(n)},a(e,"mouseup",e.xEvtUp)},t.bindTouch=function(e,t){var r=t.move,n=t.end,i=0,o=0;a(e,"touchstart",(function(e){var t=e.touches[0],r=t.pageX,n=t.pageY;i=r,o=n})),a(e,"touchmove",(function(e){if(r){var t=e.changedTouches[0],n=t.pageX,a=t.pageY,s=n-i,u=a-o;(Math.abs(s)>10||Math.abs(u)>10)&&(l(s,u,e,r),i=n,o=a),e.preventDefault()}})),a(e,"touchend",(function(e){if(n){var t=e.changedTouches[0],r=t.pageX,a=t.pageY;l(r-i,a-o,e,n)}}))};var n=[];function a(e,t,r){e.addEventListener(t,r),n.push({name:t,fn:r,target:e})}function i(e,t,r){e.removeEventListener(t,r)}function o(e){e.xclickoutside&&(i(window.document.body,"click",e.xclickoutside),delete e.xclickoutside)}function l(e,t,r,n){Math.abs(e)>Math.abs(t)?n(e>0?"right":"left",e,r):n(t>0?"down":"up",t,r)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isHave=function(e){if(void 0===e)return!1;if(null===e)return!1;return!0}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.locale=function(e,t){i=e,t&&(o[e]=t)},t.t=s,t.tf=function(e){return function(){return s(e)}},t.default=void 0;var n,a=(n=r(146))&&n.__esModule?n:{default:n};var i="en",o={en:a.default};function l(e,t){if(t&&t[i])for(var r=t[i],n=e.split("."),a=0;a<n.length;a+=1){var o=r[n[a]];if(a===n.length-1)return o;if(!o)return;r=o}}function s(e){var t=l(e,o);return!t&&window&&window.x&&window.x.spreadsheet&&window.x.spreadsheet.$messages&&(t=l(e,window.x.spreadsheet.$messages)),t||""}var u={t:s};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=l(this,s(t).call(this,"div","".concat(a.cssPrefix,"-icon")))).iconNameEl=(0,n.h)("div","".concat(a.cssPrefix,"-icon-img ").concat(e)),r.child(r.iconNameEl),r}var r,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),r=t,(i=[{key:"setName",value:function(e){this.iconNameEl.className("".concat(a.cssPrefix,"-icon-img ").concat(e))}}])&&o(r.prototype,i),c&&o(r,c),t}(n.Element);t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cloneDeep=function(e){return JSON.parse(JSON.stringify(e))},t.find=function(e,t){for(var r=0;r<e.length;r++)if(-1!==t.indexOf(e[r]))return!0;return!1},t.isOusideViewRange=function(e,t,r,n,a){if(44===a&&r-e+100>0)return!0;if(11===a&&n-100<0)return!0;if(33===a&&n-t+100>0)return!0;if(22===a&&r-100<0)return!0;return!1},t.equals=function e(t,r){var n=Object.keys(t);if(n.length!==Object.keys(r).length)return!1;for(var a=0;a<n.length;a+=1){var i=n[a],o=t[i],l=r[i];if(void 0===l)return!1;if("string"==typeof o||"number"==typeof o||"boolean"==typeof o){if(o!==l)return!1}else if(Array.isArray(o)){if(o.length!==l.length)return!1;for(var s=0;s<o.length;s+=1)if(!e(o[s],l[s]))return!1}else if("function"!=typeof o&&!Array.isArray(o)&&o instanceof Object&&!e(o,l))return!1}return!0},t.isValueValid=function(e){if(void 0===e)return!1;if(null===e)return!1;return null!==e},t.rangeReduceIf=function(e,t,r,n,a,i){for(var o=r,l=n,s=e;s<t&&!(o>a);s+=1)l=i(s),o+=l;return[s,o-l,l]},t.rangeSum=function(e,t,r){for(var n=0,a=e;a<t;a+=1)n+=r(a);return n},t.isNumber=function(e){return"NaN"!==parseFloat(e).toString()},t.arrayEquals=function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(e[r]!==t[r])return!1;return!0},t.merge=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(void 0,[{}].concat(t))},t.sum=t.mergeDeep=void 0;var n=function e(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];return n.forEach((function(r){null!=r&&Object.keys(r).forEach((function(n){var a=r[n];"string"==typeof a||"number"==typeof a||"boolean"==typeof a?t[n]=a:"function"!=typeof a&&!Array.isArray(a)&&a instanceof Object?(t[n]=t[n]||{},e(t[n],a)):t[n]=a}))})),t};t.mergeDeep=n;t.sum=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},r=0,n=0;return Object.keys(e).forEach((function(a){r+=t(e[a],a),n+=1})),[r,n]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.flatten=l,t.argsToArray=s,t.numbers=function(){return l.apply(null,arguments).filter((function(e){return"number"==typeof e}))},t.flattenNum=function(e){try{if(1===e.length&&"default_0"===e[0][0])return n.errorObj.ERROR_DIV0;for(var t=[],r=0;r<e.length;r++){var i=(0,a.parse)(e[r]);if(void 0===i)return n.errorObj.ERROR_NAME;if(i instanceof Error)return i;if("pass"!==i)if(i instanceof Array)for(var o=0;o<i.length;o++)t.push(i[o]);else t.push(i)}return t}catch(e){return n.errorObj.ERROR_NAME}},t.cleanFloat=function(e){return Math.round(1e14*e)/1e14},t.Copy=function e(t){if(null==t||"object"!==i(t))return t;if(t instanceof Date){var r=new Date;return r.setTime(t.getTime()),r}if(t instanceof Array){for(var n=[],a=0;a<t.length;++a)n[a]=e(t[a]);return n}if(t instanceof Object){var o={};for(var l in t)t.hasOwnProperty(l)&&(o[l]=e(t[l]));return o}throw new Error("Unable to copy obj! Its type isn't supported.")},t.strToMatrix=function(e){for(var t=e.slice(2,e.length-2).split(","),r=[],n=[],i=0;i<t.length;i++){var o=t[i].toString();o.indexOf(";")>0?(n.push((0,a.str2int)(o.split(";")[0])),r.push(n),n=[(0,a.str2int)(o.split(";")[1])]):n.push((0,a.str2int)(o))}return r.push(n),r},t.anyIsError=function(){var e=arguments.length;for(;e--;)if(arguments[e]instanceof Error)return!0;return!1},t.arrayValuesToNumbers=function(e){var t,r=e.length;for(;r--;)if("number"!=typeof(t=e[r]))if(!0!==t)if(!1!==t){if("string"==typeof t){var n=(0,a.parseNumber)(t);n instanceof Error?e[r]=0:e[r]=n}}else e[r]=0;else e[r]=1;return e},t.rest=function(e,t){if(t=t||1,!e||"function"!=typeof e.slice)return e;return e.slice(t)},t.initial=function(e,t){if(t=t||1,!e||"function"!=typeof e.slice)return e;return e.slice(0,e.length-t)},t.compareFloat=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.001;return Math.abs(e-t)<r};var n=r(2),a=r(25);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){if(!e)return!1;for(var t=0;t<e.length;++t)if(Array.isArray(e[t]))return!1;return!0}function l(){for(var e,t=s.apply(null,arguments);!o(t);)t=(e=t)&&e.reduce?e.reduce((function(e,t){var r=Array.isArray(e),n=Array.isArray(t);return r&&n?e.concat(t):r?(e.push(t),e):n?[e].concat(t):[e,t]})):e;return t}function s(e){return Array.prototype.slice.call(e,0)}},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(8),i=r(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e,r,a,o,l){var c,d,f=l.type,m=l.change,h=l.arrowChange,v=l.historyBorder;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(d=s(this,u(t).call(this,"div","".concat(i.cssPrefix,"-dropdown ").concat(o)))).title=e,d.change=function(){},"string"==typeof e?d.title=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-title")).child(e):a&&d.title.addClass("arrow-left");for(var p=arguments.length,y=new Array(p>5?p-5:0),g=5;g<p;g++)y[g-5]=arguments[g];return d.contentEl=(c=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-content"))).children.apply(c,y).css("width",r).hide(),f?(d.headerEl=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-header")).on("click",m),d.headerEl.children(d.title,a?(0,n.h)("div","".concat(i.cssPrefix,"-icon arrow-right_d")).child((0,n.h)("div","".concat(i.cssPrefix,"-icon-img arrow-down")).on("click.stop",(function(e){h(v),"block"!==d.contentEl.css("display")?d.show():d.hide()}))):""),d.children(d.headerEl,d.contentEl)):(d.headerEl=(0,n.h)("div","".concat(i.cssPrefix,"-dropdown-header")),d.headerEl.on("click",(function(){"block"!==d.contentEl.css("display")?d.show():d.hide()})).children(d.title,a?(0,n.h)("div","".concat(i.cssPrefix,"-icon arrow-right")).child((0,n.h)("div","".concat(i.cssPrefix,"-icon-img arrow-down"))):""),d.children(d.headerEl,d.contentEl)),d}var r,o,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),r=t,(o=[{key:"setTitle",value:function(e){this.title.html(e),this.hide()}},{key:"show",value:function(){var e=this;this.contentEl.show(),this.parent().active(),(0,a.bindClickoutside)(this.parent(),(function(){e.hide()}))}},{key:"hide",value:function(){this.parent().active(!1),this.contentEl.hide(),(0,a.unbindClickoutside)(this.parent())}}])&&l(r.prototype,o),d&&l(r,d),t}(n.Element);t.default=d},,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.str2Re=function(e){return new RegExp(e,"g")},t.calendarPattern=t.datePattern2=t.datePattern=t.letterOperatorWithDollorPrex=t.letterOperatorWithDollorEnd=t.letterAndLetterOperator=t.letterOperatorWithDollor=t.letterOperatorIgnoreBracket=t.letterOperator=t.blankOperator=t.logicOperator=void 0;t.logicOperator="([(-\\/,+*，=^&])";t.blankOperator="(^\\s*)|(\\s*$)";t.letterOperator="^[A-Z]+\\d+$";t.letterOperatorIgnoreBracket="^[A-Z]+\\d+$";t.letterOperatorWithDollor="^\\$[A-Z]+\\$\\d+$";t.letterAndLetterOperator="^[A-Za-z]+\\d+:[A-Za-z]+\\d+$";t.letterOperatorWithDollorEnd="^[A-Z]+\\$\\d+$";t.letterOperatorWithDollorPrex="^\\$[A-Z]+\\d+$";t.datePattern=["^(\\d{4})[-/](\\d{1,2})[-/](\\d{1,2})$","^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$"];t.datePattern2="((^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$))";t.calendarPattern="^\\d{4}-\\d{1,2}-\\d{1,2}$"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToCellV=function(e){if(e instanceof Date)return new m(e);if("string"==typeof e)return new y(e);if(e instanceof Array)return new E(e);if("number"==typeof e&&!isNaN(e))return new p(e);if("boolean"==typeof e)return new b(e);if(e instanceof Error)return new h(e);if(!0===e.isCellV)return e;(0,a.reportError)(a.ERROR_VALUE)},t.CellVArray=t.CellVBool=t.CellVHyperLink=t.CellVString=t.CellVNumber=t.CellVEmpty=t.CellVError=t.CellVDateTime=t.CellVTypeObj=void 0;var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}r.default=e,t&&t.set(e,r);return r}(r(7)),a=r(2),i=r(25),o=r(37);function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),e}var f={CellVDateTime:"CellVDateTime",CellVError:"CellVError",CellVEmpty:"CellVEmpty",CellVNumber:"CellVNumber",CellVString:"CellVString",CellVHyperLink:"CellVHyperLink",CellVBool:"CellVBool",CellVArray:"CellVArray"};t.CellVTypeObj=f;var m=function(){function e(t){u(this,e),this.dateInstance=t,this.isCellV=!0,this.cellVTypeName=f.CellVDateTime}return d(e,[{key:"subtractOther",value:function(t){return console.assert(t instanceof e),this.toNumber()-t.toNumber()}},{key:"toString",value:function(){return this.dateInstance.toLocaleDateString("Chinese")}},{key:"toNumber",value:function(){return(this.dateInstance.getTime()-n.d18991230MS)/n.MS_PER_DAY}},{key:"toDate",value:function(){return this.dateInstance}},{key:"toNumberOrString",value:function(){return this.toNumber()}},{key:"getACopy",value:function(){return new v(this.dateInstance)}}]),e}();t.CellVDateTime=m;var h=function(){function e(t){u(this,e),this.err=t,this.isCellV=!0,this.cellVTypeName=f.CellVError}return d(e,[{key:"toNumber",value:function(){return this.err}},{key:"toString",value:function(){return this.err.message}},{key:"toDate",value:function(){return this.err}},{key:"toObject",value:function(){return{msg:this.err.message,isError:!0}}},{key:"toNumberOrString",value:function(){return this.toString()}}]),e}();t.CellVError=h;var v=function(){function e(){u(this,e),this.isCellV=!0,this.cellVTypeName=f.CellVEmpty}return d(e,[{key:"toString",value:function(){return""}},{key:"toNumber",value:function(){return 0}},{key:"toDate",value:function(){return new Date(n.d18991230STR)}},{key:"toNumberOrString",value:function(){return this.toNumber()}}]),e}();t.CellVEmpty=v;var p=function(){function e(t){u(this,e),this.number=t,this.isCellV=!0,this.cellVTypeName=f.CellVNumber}return d(e,[{key:"toNumber",value:function(){return this.number}},{key:"toString",value:function(){return String(parseFloat(this.number.toPrecision(6)))}},{key:"toStringWithDecimal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2;return this.number.toFixed(e)}},{key:"toDate",value:function(){return(0,i.dayNum2Date)(this.number)}},{key:"toNumberOrString",value:function(){return this.toNumber()}}]),e}();t.CellVNumber=p;var y=function(){function e(t){u(this,e),this.theString=t,this.isCellV=!0,this.cellVTypeName=f.CellVString}return d(e,[{key:"toNumber",value:function(){var e=parseFloat(this.theString);return isNaN(e)?a.PARSE_FAIL_OBJ:e}},{key:"toString",value:function(){return this.theString}},{key:"toDate",value:function(){var e=Date(this.theString);return isNaN(e.getTime())?a.PARSE_FAIL_OBJ:e}},{key:"toNumberOrString",value:function(){return this.toString()}}]),e}();t.CellVString=y;var g=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";u(this,e),this.isCellV=!0,this.cellVTypeName=f.CellVHyperLink,this.linkStr=t,this.showStr=""===r?t:r}return d(e,[{key:"toString",value:function(){return this.showStr}},{key:"toNumber",value:function(){var e=parseInt(this.showStr);return isNaN(e)?a.PARSE_FAIL_OBJ:e}},{key:"toDate",value:function(){var e=(0,i.dayNum2Date)(this.toNumber());return isNaN(e)?a.PARSE_FAIL_OBJ:e}},{key:"joinWithStr",value:function(e){this.showStr=this.showStr+e,this.linkStr=this.linkStr+e}},{key:"toNumberOrString",value:function(){return this.toString()}}]),e}();t.CellVHyperLink=g;var b=function(){function e(t){u(this,e),this.aBool=t,this.isCellV=!0,this.cellVTypeName=f.CellVBool}return d(e,[{key:"toNumber",value:function(){return this.aBool?1:0}},{key:"toString",value:function(){return this.aBool.toString().toUpperCase()}},{key:"toDate",value:function(){return(0,i.dayNum2Date)(this.toNumber())}},{key:"toNumberOrString",value:function(){return this.toNumber()}}]),e}();t.CellVBool=b;var E=function(){function e(t){if(u(this,e),t instanceof Array)this.aArray=t;else if(t instanceof o.MatrixValue||t instanceof e)this.aArray=t.aArray;else{if(!["number","string"].includes(s(t)))throw new Error(a.ERROR_VALUE);this.aArray=[[t]]}this.matrixValue=new o.MatrixValue(this.aArray),this.isCellV=!0,this.cellVTypeName=f.CellVArray}return d(e,[{key:"applyToAll",value:function(e){return this.aArray.map((function(t){return t instanceof Array?t.map(e):e(t)}))}},{key:"toNumber",value:function(){var e=this;return this.applyToAll((function(t){try{return t.toNumber()}catch(t){return(0,a.reportConvertFail)(e)}}))}},{key:"toString",value:function(){return this.applyToAll((function(e){return e.toString()}))}},{key:"toDate",value:function(){return this.applyToAll((function(e){return e.toDate()}))}},{key:"convertAValueToNumberOrString",value:function(e){return e.isCellV?e.toNumberOrString():"number"==typeof e||"string"==typeof e?e:new Error(a.ERROR_NA)}},{key:"toNumberOrString",value:function(){var e=this;return this.applyToAll((function(t){return e.convertAValueToNumberOrString(t)}))}},{key:"exeElementOperator",value:function(e,t){return this.matrixValue.exeElementWiseOperator(e.matrixValue,t)}}]),e}();t.CellVArray=E},,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.easySolve=function(e,t){return new h(e,t).solveExpression()},t.OnlyNumberExpFunction=t.NotConvertEmptyExpFunction=t.StringExpFunction=t.AllowErrorExpFunction=t.BaseExpFunction=t.UserFnExecutor=void 0;var n=r(7),a=r(2);function i(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),e}var h=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];d(this,e),this.name="UserFn",this.args=r,this.exp_fn="function"==typeof t?new v(t):t}return m(e,[{key:"push",value:function(e){this.args.push(e)}},{key:"solveExpression",value:function(){return this.exp_fn.solveExpression(this.args)}}]),e}();t.UserFnExecutor=h;var v=function(){function e(t){d(this,e),this.isAllowErrorArg=this.getIsAllowErrorArg(),this.expFnArgConfig=this.getExpFnArgConfig(),this.user_function=t}return m(e,[{key:"getIsAllowErrorArg",value:function(){return!1}},{key:"getExpFnArgConfig",value:function(){}},{key:"expresionFunc",value:function(e){return this.user_function.apply(this,c(e))}},{key:"updateArgArray",value:function(e){var t,r,n=this,a=[],i=e.map((function(e){return"function"==typeof e.solveExpression?e.solveExpression():e})),o=this.errorArg;if(void 0===this.expFnArgConfig)a=i.map((function(e){return(r=n.defaultConvert(e))instanceof Error==!0&&(o=r),r}));else{if(!(this.expFnArgConfig instanceof Array))throw new Error("expFnArgConfig");for(var l,s=0;s++;s<this.expFnArgConfig.length)t=i[s],l=this.expFnArgConfig[s],(r=this.convertCellValueType(l,t.cellVTypeName,t))instanceof Error==!0&&(o=r),a.push(r);for(;s++;s<this.args.length)a.push(this.args[s])}return this.errorArg=o,a}},{key:"convertCellValueType",value:function(e,t,r){var a;if("NOT_CONVERT"===e)return r;if("object"===u(e))a=e[r.cellVTypeName];else{if("string"!=typeof e)throw Error("arg_config has wrong type!");a=e}return a===n.TO_PARA_TYPE.date?r.toDate():a===n.TO_PARA_TYPE.number?r.toNumber():a===n.TO_PARA_TYPE.string?r.toString():r}},{key:"defaultConvert",value:function(e){return this.convertToStringAndNumber(e)}},{key:"convertToStringAndNumber",value:function(e){return["string","number"].includes(u(e))?e:e.toNumberOrString()}},{key:"checkFuncArg",value:function(e){return null}},{key:"solveExpression",value:function(e){var t=this.updateArgArray(e);return this.checkFuncArg(t),isNaN(this.errorArg)||this.isAllowErrorArg?this.expresionFunc(t):this.errorArg}}]),e}();t.BaseExpFunction=v;var p=function(e){function t(){return d(this,t),i(this,o(t).apply(this,arguments))}return l(t,e),m(t,[{key:"getIsAllowErrorArg",value:function(){return!0}}]),t}(v);t.AllowErrorExpFunction=p;var y=function(e){function t(){return d(this,t),i(this,o(t).apply(this,arguments))}return l(t,e),m(t,[{key:"getExpFnArgConfig",value:function(){return[n.TO_PARA_TYPE.string,n.TO_PARA_TYPE.string]}}]),t}(v);t.StringExpFunction=y;var g=function(e){function t(){return d(this,t),i(this,o(t).apply(this,arguments))}return l(t,e),m(t,[{key:"defaultConvert",value:function(e){return"CellVEmpty"===e.cellVTypeName?e:this.convertToStringAndNumber(e)}}]),t}(v);t.NotConvertEmptyExpFunction=g;var b=function(e){function t(){return d(this,t),i(this,o(t).apply(this,arguments))}return l(t,e),m(t,[{key:"checkFuncArg",value:function(e){var t=!0,r=!1,n=void 0;try{for(var i,o=e[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){"number"!=typeof i.value&&(this.errorArg=new Error(a.ERROR_VALUE))}}catch(e){r=!0,n=e}finally{try{t||null==o.return||o.return()}finally{if(r)throw n}}}}]),t}(v);t.OnlyNumberExpFunction=b},function(module,exports,__webpack_require__){"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.ABS=void 0;var _numeric=_interopRequireDefault(__webpack_require__(95)),utils=_interopRequireWildcard(__webpack_require__(13)),_error_config=__webpack_require__(2),statistical=_interopRequireWildcard(__webpack_require__(26)),information=_interopRequireWildcard(__webpack_require__(33)),_exp_fn_executor=__webpack_require__(23);function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return _getRequireWildcardCache=function(){return e},e}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;if(null===e||"object"!==_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}return r.default=e,t&&t.set(e,r),r}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function ABS_(e){return"number"!=typeof e?new Error(_error_config.ERROR_VALUE):Math.abs(e)}var ABS=new _exp_fn_executor.OnlyNumberExpFunction(ABS_);exports.ABS=ABS,exports.ACOS=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.acos(e)},exports.ACOSH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.log(e+Math.sqrt(e*e-1))},exports.ACOT=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.atan(1/e)},exports.ACOTH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:.5*Math.log((e+1)/(e-1))},exports.AGGREGATE=function(e,t,r,n){if(e=utils.parseNumber(e),t=utils.parseNumber(t),"string"==typeof r)return _error_config.errorObj.ERROR_VALUE;if(utils.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;switch(e){case 1:return statistical.AVERAGE(r);case 2:return statistical.COUNT(r);case 3:return statistical.COUNTA(r);case 4:return statistical.MAX(r);case 5:return statistical.MIN(r);case 6:return exports.PRODUCT(r);case 7:return statistical.STDEV.S(r);case 8:return statistical.STDEV.P(r);case 9:return exports.SUM(r);case 10:return statistical.VAR.S(r);case 11:return statistical.VAR.P(r);case 12:return statistical.MEDIAN(r,n);case 13:return statistical.MODE.SNGL(r);case 14:return statistical.LARGE(r,n);case 15:return null==n?_error_config.errorObj.ERROR_VALUE:statistical.SMALL(r,n);case 16:return statistical.PERCENTILE.INC(r,n);case 17:return statistical.QUARTILE.INC(r,n);case 18:return statistical.PERCENTILE.EXC(r,n);case 19:return statistical.QUARTILE.EXC(r,n)}},exports.ARABIC=function(e){if(e=e.toUpperCase(),!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(e))return _error_config.errorObj.ERROR_VALUE;var t=0;return e.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g,(function(e){t+={M:1e3,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1}[e]})),t},exports.ASIN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.asin(e)},exports.ASINH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.log(e+Math.sqrt(e*e+1))},exports.ATAN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.atan(e)},exports.ATAN2=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:Math.atan2(e,t)},exports.ATANH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.log((1+e)/(1-e))/2},exports.BASE=function(e,t,r){if(r=r||0,e=utils.parseNumber(e),t=utils.parseNumber(t),r=utils.parseNumber(r),utils.anyIsError(e,t,r))return _error_config.errorObj.ERROR_VALUE;r=void 0===r?0:r;var n=e.toString(t);return new Array(Math.max(r+1-n.length,0)).join("0")+n},exports.CEILING=function(e,t,r){if(t=void 0===t?1:Math.abs(t),r=r||0,e=utils.parseNumber(e),t=utils.parseNumber(t),r=utils.parseNumber(r),utils.anyIsError(e,t,r))return _error_config.errorObj.ERROR_VALUE;if(0===t)return 0;var n=-Math.floor(Math.log(t)/Math.log(10));return e>=0?exports.ROUND(Math.ceil(e/t)*t,n):0===r?-exports.ROUND(Math.floor(Math.abs(e)/t)*t,n):-exports.ROUND(Math.ceil(Math.abs(e)/t)*t,n)},exports.CEILING.MATH=exports.CEILING,exports.CEILING.PRECISE=exports.CEILING,exports.COMBIN=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:exports.FACT(e)/(exports.FACT(t)*exports.FACT(e-t))},exports.COMBINA=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:0===e&&0===t?1:exports.COMBIN(e+t-1,e-1)},exports.COS=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.cos(e)},exports.COSH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:(Math.exp(e)+Math.exp(-e))/2},exports.COT=function(e){return(e=utils.parseNumber(e))instanceof Error?e:1/Math.tan(e)},exports.COTH=function(e){if((e=utils.parseNumber(e))instanceof Error)return e;var t=Math.exp(2*e);return(t+1)/(t-1)},exports.CSC=function(e){return(e=utils.parseNumber(e))instanceof Error?e:1/Math.sin(e)},exports.CSCH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:2/(Math.exp(e)-Math.exp(-e))},exports.DECIMAL=function(e,t){return arguments.length<1?_error_config.errorObj.ERROR_VALUE:parseInt(e,t)},exports.DEGREES=function(e){return(e=utils.parseNumber(e))instanceof Error?e:180*e/Math.PI},exports.EVEN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:exports.CEILING(e,-2,-1)},exports.EXP=Math.exp;var MEMOIZED_FACT=[];exports.FACT=function(e){if((e=utils.parseNumber(e))<0)return _error_config.errorObj.ERROR_NUM;if(e instanceof Error)return e;var t=Math.floor(e);return 0===t||1===t?1:MEMOIZED_FACT[t]>0?MEMOIZED_FACT[t]:(MEMOIZED_FACT[t]=exports.FACT(t-1)*t,MEMOIZED_FACT[t])},exports.FACTDOUBLE=function(e){if((e=utils.parseNumber(e))instanceof Error)return e;var t=Math.floor(e);return t<=0?1:t*exports.FACTDOUBLE(t-2)},exports.FLOOR={};var ROUND=function(e,t){var r=e,n=t;return Math.round(r*Math.pow(10,n))/Math.pow(10,n)};exports.FLOORMATH=function(e,t,r){if("number"!=typeof e)return _error_config.errorObj.ERROR_VALUE;if(e>0&&t<0)return _error_config.errorObj.ERROR_NUM;if(e<0&&t<0){e=-e,t=-t;var n=-Math.floor(Math.log(t)/Math.log(10));return-ROUND(Math.floor(e/t)*t,n)}if(r=void 0===r?0:r,0===(t=void 0===t?1:t))return 0;t=t?Math.abs(t):1;var a=-Math.floor(Math.log(t)/Math.log(10));return e>=0?ROUND(Math.floor(e/t)*t,a):0===r||void 0===r?-ROUND(Math.ceil(Math.abs(e)/t)*t,a):-ROUND(Math.floor(Math.abs(e)/t)*t,a)},exports.FLOORPRACE=function(e,t,r){if("number"!=typeof e)return _error_config.errorObj.ERROR_VALUE;if(e<0&&t<0){e=-e,t=-t;var n=-Math.floor(Math.log(t)/Math.log(10));return-ROUND(Math.floor(e/t)*t,n)}if(r=void 0===r?0:r,0===(t=void 0===t?1:t))return 0;t=t?Math.abs(t):1;var a=-Math.floor(Math.log(t)/Math.log(10));return e>=0?ROUND(Math.floor(e/t)*t,a):0===r||void 0===r?-ROUND(Math.ceil(Math.abs(e)/t)*t,a):-ROUND(Math.floor(Math.abs(e)/t)*t,a)},exports.FLOOR.MATH=exports.FLOORMATH,exports.FLOOR.PRECISE=exports.FLOORPRACE,exports.GCD=function(){var e=utils.parseNumberArray(utils.flatten(arguments));if(e instanceof Error)return e;for(var t=e.length,r=e[0],n=r<0?-r:r,a=1;a<t;a++){for(var i=e[a],o=i<0?-i:i;n&&o;)n>o?n%=o:o%=n;n+=o}return n},exports.INT=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.floor(e)},exports.ISO={CEILING:exports.CEILING},exports.LCM=function(){var e=utils.parseNumberArray(utils.flatten(arguments));if(e instanceof Error)return e;for(var t,n,a,i;void 0!==(a=e.pop());)for(;a>1;){if(a%2){for(t=3,n=Math.floor(Math.sqrt(a));t<=n&&a%t;t+=2);i=t<=n?t:a}else i=2;for(a/=i,i,t=e.length;t;e[--t]%i==0&&1==(e[t]/=i)&&e.splice(t,1));}return r},exports.LN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.log(e)},exports.LOG=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(t)&&(t=10),t=void 0===t?10:t,Math.log(e)/Math.log(t)},exports.LOG10=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.log(e)/Math.log(10)},exports.MDETERM=function(e){"string"==typeof e&&(e=utils.strToMatrix(e));try{return _numeric.default.det(e)}catch(e){return _error_config.errorObj.ERROR_VALUE}},exports.MINVERSE=function(e){return(e=utils.parseMatrix(e))instanceof Error?e:_numeric.default.inv(e)},exports.MMULT=function(e,t){return e=utils.parseMatrix(e),t=utils.parseMatrix(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(console.log(_numeric.default.dot(e,t)),_numeric.default.dot(e,t))},exports.MOD=function(e,t){if(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;if(0===t)return _error_config.errorObj.ERROR_DIV0;var r=Math.abs(e%t);return t>0?r:-r},exports.MROUND=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e*t<0?_error_config.errorObj.ERROR_NUM:Math.round(e/t)*t},exports.MULTINOMIAL=function(){var e=utils.parseNumberArray(utils.flatten(arguments));if(e instanceof Error)return e;for(var t=0,r=1,n=0;n<e.length;n++)t+=e[n],r*=exports.FACT(e[n]);return exports.FACT(t)/r},exports.MUNIT=function(e){return(e=utils.parseNumber(e))instanceof Error?e:_numeric.default.identity(e)},exports.ODD=function(e){if((e=utils.parseNumber(e))instanceof Error)return e;var t=Math.ceil(Math.abs(e));return t=1&t?t:t+1,e>0?t:-t},exports.PI=function(){return Math.PI},exports.POWER=function(e,t){if(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=Math.pow(e,t);return isNaN(r)?_error_config.errorObj.ERROR_NUM:r},exports.PRODUCT=function(){var e=utils.parseNumberArray(utils.flatten(arguments));if(e instanceof Error)return e;for(var t=1,r=0;r<e.length;r++)t*=e[r];return t},exports.QUOTIENT=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:parseInt(e/t,10)},exports.RADIANS=function(e){return(e=utils.parseNumber(e))instanceof Error?e:e*Math.PI/180},exports.RAND=function(){return arguments.length>0&&void 0!==arguments[0]?_error_config.errorObj.ERROR_VALUE:Math.random()},exports.RANDBETWEEN=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e+Math.ceil((t-e+1)*Math.random())-1},exports.ROMAN=function(e){if((e=utils.parseNumber(e))instanceof Error)return e;for(var t=String(e).split(""),r=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"],n="",a=3;a--;)n=(r[+t.pop()+10*a]||"")+n;return new Array(+t.join("")+1).join("M")+n},exports.ROUND=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e<0?(e=0-e,0-Math.round(e*Math.pow(10,t))/Math.pow(10,t)):Math.round(e*Math.pow(10,t))/Math.pow(10,t)},exports.ROUNDDOWN=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(e>0?1:-1)*Math.floor(Math.abs(e)*Math.pow(10,t))/Math.pow(10,t)},exports.ROUNDUP=function(e,t){return e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(e>0?1:-1)*Math.ceil(Math.abs(e)*Math.pow(10,t))/Math.pow(10,t)},exports.SEC=function(e){return(e=utils.parseNumber(e))instanceof Error?e:1/Math.cos(e)},exports.SECH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:2/(Math.exp(e)+Math.exp(-e))},exports.SERIESSUM=function(e,t,r,n){if(e=utils.parseNumber(e),t=utils.parseNumber(t),r=utils.parseNumber(r),n=utils.parseNumberArray(n),utils.anyIsError(e,t,r,n))return _error_config.errorObj.ERROR_VALUE;for(var a=n[0]*Math.pow(e,t),i=1;i<n.length;i++)a+=n[i]*Math.pow(e,t+i*r);return a},exports.SIGN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:e<0?-1:0===e?0:1},exports.SIN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.sin(e)},exports.SINH=function(e){return(e=utils.parseNumber(e))instanceof Error?e:(Math.exp(e)-Math.exp(-e))/2},exports.SQRT=function(e){return(e=utils.parseNumber(e))instanceof Error?e:e<0?_error_config.errorObj.ERROR_NUM:Math.sqrt(e)},exports.SQRTPI=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.sqrt(e*Math.PI)},exports.SUBTOTAL=function(e,t){if((e=utils.parseNumber(e))instanceof Error)return e;switch(e){case 1:return statistical.AVERAGE(t);case 2:return statistical.COUNT(t);case 3:return statistical.COUNTA(t);case 4:return statistical.MAX(t);case 5:return statistical.MIN(t);case 6:return exports.PRODUCT(t);case 7:return statistical.STDEV.S(t);case 8:return statistical.STDEV.P(t);case 9:return exports.SUM(t);case 10:return statistical.VAR.S(t);case 11:return statistical.VAR.P(t);case 101:return statistical.AVERAGE(t);case 102:return statistical.COUNT(t);case 103:return statistical.COUNTA(t);case 104:return statistical.MAX(t);case 105:return statistical.MIN(t);case 106:return exports.PRODUCT(t);case 107:return statistical.STDEV.S(t);case 108:return statistical.STDEV.P(t);case 109:return exports.SUM(t);case 110:return statistical.VAR.S(t);case 111:return statistical.VAR.P(t)}},exports.ADD=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_NAme:e+t)},exports.MINUS=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e-t)},exports.DIVIDE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:0===t?_error_config.errorObj.ERROR_DIV0:e/t)},exports.MULTIPLY=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:e*t)},exports.GTE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:e>=t)},exports.LT=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:e<t)},exports.LTE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:e<=t)},exports.EQ=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:e===t},exports.NE=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:e!==t},exports.POW=function(e,t){return 2!==arguments.length?_error_config.errorObj.ERROR_NA:(e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_ERROR:exports.POWER(e,t))},exports.SUM=function(){for(var e=0,t=Object.keys(arguments),r=0;r<t.length;++r){var n=arguments[t[r]];if("number"==typeof n)e+=n;else if("string"==typeof n){var a=parseFloat(n);!isNaN(a)&&(e+=a)}else Array.isArray(n)&&(e+=exports.SUM.apply(null,n))}return e},exports.SUMIF=function(range,criteria){if(range=utils.parseNumberArray(utils.flatten(range)),range instanceof Error)return range;for(var result=0,i=0;i<range.length;i++)result+=eval(range[i]+criteria)?range[i]:0;return result},exports.SUMIFS=function(){var e=utils.argsToArray(arguments),t=utils.flatten(e.shift());if(t instanceof Error)return t;if(e.length%2!=0)return _error_config.errorObj.ERROR_VALUE;for(var r=0;r<e.length;r+=2)if(e[r].length!==t.length||!e[r+1])return _error_config.errorObj.ERROR_VALUE;for(var n=[],a=0,i=0;i<e.length;i+=2){for(var o=[],l=0;l<e[i].length;l++){var s=e[i+1]+"";if(0==s.lastIndexOf(">=")?(s=s.replace(/>=/,""),isNaN(s)&&(str=!0),1*s<=e[i][l][0]&&o.push(l)):0==s.lastIndexOf("<=")&&(s=s.replace(/<=/,""),isNaN(s)&&(str=!0),1*s>=e[i][l][0]&&o.push(l)),0==(s=s.replace("=","")).lastIndexOf("<>"))(s=s.replace(/<>/,""))!==e[i][l][0]&&o.push(l);else{var u=!1;if(0==s.lastIndexOf("<"))s=s.replace(/</,""),isNaN(s)&&(u=!0),1*s>e[i][l][0]&&o.push(l);else if(0==s.lastIndexOf(">"))s=s.replace(/>/,""),isNaN(s)&&(u=!0),1*s<e[i][l][0]&&o.push(l);else{if(s.indexOf("*")>0){var c=s;c=c.replace("*",""),"string"==typeof e[i][l][0]&&e[i][l][0].indexOf(c)>=0&&o.push(l)}isNaN(s)?s===e[i][l][0]&&o.push(l):1*s===e[i][l][0]&&o.push(l)}if(u)return _error_config.errorObj.ERROR_VALUE}}n.push(o)}for(var d=[],f=0;f<n.length;f++)for(var m=0;m<n[f].length;m++){for(var h=n[f][m],v=1,p=0;3!==v&&p<n.length;p++)p!==f&&-1!==n[p].indexOf(h)?v=2:p!==f&&(v=3);1==v&&n.length>1?v=3:1==v&&1===n.length&&(v=2),2==v&&-1==d.indexOf(h)&&d.push(h)}if(n.length<=0)return _error_config.errorObj.ERROR_VALUE;for(var y=0;y<d.length;y++){var g=t[d[y]];if(!g||isNaN(g))return 0;a+=g}return a},exports.SUMPRODUCT=function(){if(!arguments||0===arguments.length)return _error_config.errorObj.ERROR_VALUE;for(var e,t,r,n,a=arguments.length+1,i=0,o=0;o<arguments[0].length;o++)if(arguments[0][o]instanceof Array)for(var l=0;l<arguments[0][o].length;l++){for(e=1,t=1;t<a;t++){if((n=utils.parseNumber(arguments[t-1][o][l]))instanceof Error)return n;e*=n}i+=e}else{for(e=1,t=1;t<a;t++){if((r=utils.parseNumber(arguments[t-1][o]))instanceof Error)return r;e*=r}i+=e}return i},exports.SUMSQ=function(){var e=utils.parseNumberArray(utils.flatten(arguments));if(e instanceof Error)return e;for(var t=0,r=e.length,n=0;n<r;n++)t+=information.ISNUMBER(e[n])?e[n]*e[n]:0;return t},exports.SUMX2MY2=function(e,t){if("string"==typeof e&&(e=utils.strToMatrix(e)),"string"==typeof t&&(t=utils.strToMatrix(t)),utils.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=0;e=utils.parseNumberArray(utils.flatten(e)),t=utils.parseNumberArray(utils.flatten(t));for(var n=0;n<e.length;n++)r+=e[n]*e[n]-t[n]*t[n];return r},exports.SUMX2PY2=function(e,t){if("string"==typeof e&&(e=utils.strToMatrix(e)),"string"==typeof t&&(t=utils.strToMatrix(t)),utils.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=0;e=utils.parseNumberArray(utils.flatten(e)),t=utils.parseNumberArray(utils.flatten(t));for(var n=0;n<e.length;n++)r+=e[n]*e[n]+t[n]*t[n];return r},exports.SUMXMY2=function(e,t){if("string"==typeof e&&(e=utils.strToMatrix(e)),"string"==typeof t&&(t=utils.strToMatrix(t)),e=utils.parseNumberArray(utils.flatten(e)),t=utils.parseNumberArray(utils.flatten(t)),utils.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r=0;e=utils.flatten(e),t=utils.flatten(t);for(var n=0;n<e.length;n++)r+=Math.pow(e[n]-t[n],2);return r},exports.TAN=function(e){return(e=utils.parseNumber(e))instanceof Error?e:Math.tan(e)},exports.TANH=function(e){if((e=utils.parseNumber(e))instanceof Error)return e;var t=Math.exp(2*e);return(t-1)/(t+1)},exports.TRUNC=function(e,t){return t=void 0===t?0:t,e=utils.parseNumber(e),t=utils.parseNumber(t),utils.anyIsError(e,t)?_error_config.errorObj.ERROR_VALUE:(e>0?1:-1)*Math.floor(Math.abs(e)*Math.pow(10,t))/Math.pow(10,t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dayNum2Date=function(e){return new Date(a.d18991230MS+e*a.MS_PER_DAY)},t.days_str2date=i,t.parseBool=function(e){if(void 0===e)return!0;if("boolean"==typeof e)return e;if(e instanceof Error)return e;if("number"==typeof e)return 0!==e;if("string"==typeof e){var t=e.toUpperCase();if("TRUE"===t)return!0;if("FALSE"===t)return!1}if(e instanceof Date&&!isNaN(e))return!0;return n.errorObj.ERROR_VALUE},t.parseNumber=o,t.parseNumberArray=l,t.parseMatrix=function(e){var t;if(!e||0===e.length)return n.errorObj.ERROR_VALUE;for(var r=0;r<e.length;r++)if(t=l(e[r]),e[r]=t,t instanceof Error)return t;return e},t.parseDateArray=function(e){var t,r=e.length;for(;r--;){if((t=i(e[r]))===n.errorObj.ERROR_VALUE)return t;e[r]=t}return e},t.str2int=function(e){if(!isNaN(parseInt(e)))return parseInt(e);return e.replace('"',"").replace('"',"")},t.parse=function(e){if(e instanceof Error)return e;if(e instanceof Array){for(var t=[],r=0;r<e.length;r++)for(var a=0;a<e[0].length;a++){if("string"==typeof e[r][a]&&"default_0"!==e[r][a])return n.errorObj.ERROR_NAME;if("number"==typeof e[r][a]&&t.push(e[r][a]),e[r][a]instanceof Object)return n.errorObj.ERROR_NAME}return t}if("string"==typeof e)return"default_0"===e?"pass":n.errorObj.ERROR_NAME;if("number"==typeof e)return e};var n=r(2),a=r(7);function i(e){var t;if(!isNaN(e)){e instanceof Date&&(t=e);var r=parseInt(e,10);if(r<0)return n.errorObj.ERROR_NUM;t=new Date(a.d18991230MS+r*a.MS_PER_DAY)}return"string"==typeof e&&(t=new Date(e),isNaN(e)||(t=e)),t instanceof Date?t:n.errorObj.ERROR_VALUE}function o(e){return void 0===e||""===e?n.errorObj.ERROR_VALUE:isNaN(e)?n.errorObj.ERROR_VALUE:parseFloat(e)}function l(e){var t,r;if(!e||0===(t=e.length))return n.errorObj.ERROR_VALUE;for(;t--;){if((r=o(e[t]))===n.errorObj.ERROR_VALUE)return r;e[t]=r}return e}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=v(r(24)),o=v(r(32)),l=h(r(50)),s=h(r(13)),u=r(2),c=v(r(51)),d=v(r(96)),f=r(25);function m(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return m=function(){return e},e}function h(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=m();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}return r.default=e,t&&t.set(e,r),r}function v(e){return e&&e.__esModule?e:{default:e}}t.AVEDEV=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));return e instanceof Error?e:l.sum(l(e).subtract(l.mean(e)).abs()[0])/e.length},t.AVERAGE=function(){var e=s.flattenNum(arguments);if(e instanceof Error)return e;if(0===e.length)return u.errorObj.e;for(var t=e.length,r=0,n=0,a=0;a<t;a++)r+=e[a],n+=1;return r/n},t.AVERAGEA=function(){var e=s.flattenNum(arguments);if(1===e.length&&isNaN(e[0]))return u.errorObj.ERROR_VALUE;for(var t=e.length,r=0,n=0,a=0;a<t;a++){var i=e[a];"number"==typeof i&&(r+=i),!0===i&&r++,null!==i&&n++}return r/n},t.AVERAGEIF=function(e,t,r){if(arguments.length<=1)return u.errorObj.ERROR_NA;if(r=r||e,e=s.flatten(e),(r=(0,f.parseNumberArray)(s.flatten(r)))instanceof Error)return r;for(var n=0,a=0,i=void 0===t||"*"===t,o=i?null:d.default.parse(t+""),l=t.replace("=","").replace("*","").replace("<>",""),c=0;c<e.length;c++){var m=e[c];if(i)a+=r[c],n++;else{var h=[d.default.createToken(m,d.default.TOKEN_TYPE_LITERAL)].concat(o);t.indexOf("<>")>=0?m.indexOf(l)<0&&(a+=r[c],n++):(d.default.compute(h)||m.toString().indexOf(l)>=0)&&(a+=r[c],n++)}}return 0===n?u.errorObj.ERROR_DIV0:a/n},t.AVERAGEIFS=function(){for(var e=s.argsToArray(arguments),t=(e.length-1)/2,r=s.flatten(e[0]),n=0,a=0,i=0;i<r.length;i++){for(var o=!1,l=0;l<t;l++){var c=e[2*l+1][i],f=e[2*l+2],m=void 0===f||"*"===f,h=!1;if(m)h=!0;else{var v=d.default.parse(f+""),p=[d.default.createToken(c,d.default.TOKEN_TYPE_LITERAL)].concat(v);h=d.default.compute(p)}if(!h){o=!1;break}o=!0}o&&(a+=r[i],n++)}var y=a/n;return isNaN(y)?u.errorObj.ERROR_DIV0:y},t.BETA={},t.BETA.DIST=function(e,t,r,n,a,i){return arguments.length<4?u.errorObj.ERROR_VALUE:(a=void 0===a?0:a,i=void 0===i?1:i,e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),a=(0,f.parseNumber)(a),i=(0,f.parseNumber)(i),s.anyIsError(e,t,r,a,i)?u.errorObj.ERROR_VALUE:(e=(e-a)/(i-a),(n=(0,f.parseBool)(n))?l.beta.cdf(e,t,r):l.beta.pdf(e,t,r)/2))},t.BETA.INV=function(e,t,r,n,a){return n=void 0===n?0:n,a=void 0===a?1:a,e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),n=(0,f.parseNumber)(n),a=(0,f.parseNumber)(a),s.anyIsError(e,t,r,n,a)?u.errorObj.ERROR_VALUE:l.beta.inv(e,t,r)*(a-n)+n},t.BINOM={},t.BINOM.DIST=function(e,t,r,n){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),n=(0,f.parseBool)(n),n=(0,f.parseNumber)(n),s.anyIsError(e,t,r,n)?u.errorObj.ERROR_VALUE:n?l.binomial.cdf(e,t,r):l.binomial.pdf(e,t,r)},t.BINOM.INV=function(e,t,r){if(e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;for(var n=0;n<=e;){if(l.binomial.cdf(n,e,t)>=r)return n;n++}},t.CHISQ={},t.CHISQ.DIST=function(e,t,r){return r=(0,f.parseBool)(r),e<0?u.errorObj.ERROR_NUM:(e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.chisquare.cdf(e,t):l.chisquare.pdf(e,t))},t.CHISQ.DIST.RT=function(e,t){return!e|!t?u.errorObj.ERROR_NA:e<1||t>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:1-l.chisquare.cdf(e,t)},t.CHISQ.INV=function(e,t){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:l.chisquare.inv(e,t)},t.CHISQ.INV.RT=function(e,t){return!e|!t?u.errorObj.ERROR_NA:e<0||e>1||t<1||t>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:l.chisquare.inv(1-e,t)},t.CHISQ.TEST=function(e,t){if(2!==arguments.length)return u.errorObj.ERROR_NA;if(!(e instanceof Array&&t instanceof Array))return u.errorObj.ERROR_VALUE;if(e.length!==t.length)return u.errorObj.ERROR_VALUE;if(e[0]&&t[0]&&e[0].length!==t[0].length)return u.errorObj.ERROR_VALUE;var r,n,a,i=e.length;for(n=0;n<i;n++)e[n]instanceof Array||(r=e[n],e[n]=[],e[n].push(r)),t[n]instanceof Array||(r=t[n],t[n]=[],t[n].push(r));var o=e[0].length,l=1===o?i-1:(i-1)*(o-1),s=0,c=Math.PI;for(n=0;n<i;n++)for(a=0;a<o;a++)s+=Math.pow(e[n][a]-t[n][a],2)/t[n][a];function d(e,t){var r=Math.exp(-.5*e);t%2==1&&(r*=Math.sqrt(2*e/c));for(var n=t;n>=2;)r=r*e/n,n-=2;for(var a=r,i=t;a>1e-10*r;)r+=a=a*e/(i+=2);return 1-r}return Math.round(1e6*d(s,l))/1e6},t.COLUMN=function(){var e=this.args[0].cellFormulaProxy.name;return e=e.replace(/\d+/g,""),["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"].indexOf(e)+1},t.COLUMNS=function(e){return"string"==typeof e&&(e=s.strToMatrix(e)),e instanceof Array?0===e.length?0:l.cols(e):u.errorObj.ERROR_VALUE},t.CONFIDENCE={},t.CONFIDENCE.NORM=function(e,t,r){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.normalci(1,e,t,r)[1]-1},t.CONFIDENCE.T=function(e,t,r){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.tci(1,e,t,r)[1]-1},t.IFS=function(){for(var e=0;e+1<arguments.length;e+=2){var t=arguments[e],r=arguments[e+1];if(t)return r}return u.errorObj.ERROR_NA},t.CORREL=function(e,t){return e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:l.corrcoeff(e,t)},t.COUNT=function(){return s.numbers(s.flatten(arguments)).length},t.COUNTA=function(){var e=s.flatten(arguments);return e.length-t.COUNTBLANK(e)},t.COUNTIN=function(e,t){for(var r=0,n=0;n<e.length;n++)e[n]===t&&r++;return r},t.COUNTBLANK=function(){for(var e,t=s.flatten(arguments),r=0,n=0;n<t.length;n++)null!==(e=t[n])&&""!==e||r++;return r},t.COUNTIF=function(e,t){if(e=s.flatten(e),void 0===t)return u.errorObj.ERROR_VALUE;if(void 0===t||"*"===t)return e.length;for(var r=0,n=d.default.parse(t+""),a=0;a<e.length;a++){var i=e[a],o=[d.default.createToken(i,d.default.TOKEN_TYPE_LITERAL)].concat(n);d.default.compute(o)&&r++}return r},t.COUNTIFS=function(){for(var e=s.argsToArray(arguments),t=new Array(s.flatten(e[0]).length),r=0;r<t.length;r++)t[r]=!0;for(i=0;i<e.length;i+=2){var n=s.flatten(e[i]),a=e[i+1],o=void 0===a||"*"===a;if(!o)for(var l=d.default.parse(a+""),u=0;u<n.length;u++){var c=n[u],f=[d.default.createToken(c,d.default.TOKEN_TYPE_LITERAL)].concat(l);t[u]=t[u]&&d.default.compute(f)}}var m=0;for(i=0;i<t.length;i++)t[i]&&m++;return m},t.COUNTUNIQUE=function(){return c.default.UNIQUE.apply(null,s.flatten(arguments)).length},t.COVARIANCE={},t.COVARIANCE.P=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(e),n=l.mean(t),a=0,i=e.length,o=0;o<i;o++)a+=(e[o]-r)*(t[o]-n);return a/i},t.COVARIANCE.S=function(e,t){return"string"==typeof e&&(e=s.strToMatrix(e)),"string"==typeof t&&(t=s.strToMatrix(t)),e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:l.covariance(e,t)},t.DEVSQ=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=0,n=0;n<e.length;n++)r+=Math.pow(e[n]-t,2);return r},t.EXPON={},t.EXPON.DIST=function(e,t,r){return r=(0,f.parseBool)(r),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.exponential.cdf(e,t):l.exponential.pdf(e,t)},t.F={},t.F.DIST=function(e,t,r,n){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:(void 0===n&&(n=!0),"string"==typeof n&&"FALSE"!==n&&"TRUE"!==n?u.errorObj.ERROR_VALUE:("FALSE"===n&&(n=!1),n?l.centralF.cdf(e,t,r):l.centralF.pdf(e,t,r)))},t.F.DIST.RT=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||t<1||r<1?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:1-l.centralF.cdf(e,t,r)},t.F.INV=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||e>1||t<1||t>Math.pow(10,10)||r<1||r>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:l.centralF.inv(1-e,t,r)},t.F.INV.RT=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||e>1||t<1||t>Math.pow(10,10)||r<1||r>Math.pow(10,10)?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:l.centralF.inv(1-e,t,r)},t.F.TEST=function(e,t){if(!e||!t)return u.errorObj.ERROR_NA;if(!(e instanceof Array&&t instanceof Array))return u.errorObj.ERROR_NA;if(e.length<2||t.length<2)return u.errorObj.ERROR_DIV0;var r=function(e,t){for(var r=0,n=0;n<e.length;n++)r+=Math.pow(e[n]-t,2);return r},n=a.default.SUM(e)/e.length,i=a.default.SUM(t)/t.length;return r(e,n)/(e.length-1)/(r(t,i)/(t.length-1))},t.FISHER=function(e){return(e=(0,f.parseNumber)(e))instanceof Error?e:Math.log((1+e)/(1-e))/2},t.FISHERINV=function(e){if((e=(0,f.parseNumber)(e))instanceof Error)return e;var t=Math.exp(2*e);return(t-1)/(t+1)},t.FORECAST=function(e,t,r){if(e=(0,f.parseNumber)(e),t=(0,f.parseNumberArray)(s.flatten(t)),r=(0,f.parseNumberArray)(s.flatten(r)),s.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;for(var n=l.mean(r),a=l.mean(t),i=r.length,o=0,c=0,d=0;d<i;d++)o+=(r[d]-n)*(t[d]-a),c+=Math.pow(r[d]-n,2);var m=o/c;return a-m*n+m*e},t.FREQUENCY=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=e.length,n=t.length,a=[],i=0;i<=n;i++){a[i]=0;for(var o=0;o<r;o++)0===i?e[o]<=t[0]&&(a[0]+=1):i<n?e[o]>t[i-1]&&e[o]<=t[i]&&(a[i]+=1):i===n&&e[o]>t[n-1]&&(a[n]+=1)}return a},t.GAMMA=function(e){return(e=(0,f.parseNumber)(e))instanceof Error?e:0===e?u.errorObj.ERROR_NUM:parseInt(e,10)===e&&e<0?u.errorObj.ERROR_NUM:l.gammafn(e)},t.GAMMA.DIST=function(e,t,r,n){return n=(0,f.parseBool)(n),4!==arguments.length?u.errorObj.ERROR_NA:e<0||t<=0||r<=0?u.errorObj.ERROR_VALUE:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:n?l.gamma.cdf(e,t,r,!0):l.gamma.pdf(e,t,r,!1)},t.GAMMA.INV=function(e,t,r){return 3!==arguments.length?u.errorObj.ERROR_NA:e<0||e>1||t<=0||r<=0?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t||"number"!=typeof r?u.errorObj.ERROR_VALUE:l.gamma.inv(e,t,r)},t.GAMMALN=function(e){return(e=(0,f.parseNumber)(e))instanceof Error?e:l.gammaln(e)},t.GAMMALN.PRECISE=function(e){return 1!==arguments.length?u.errorObj.ERROR_NA:e<=0?u.errorObj.ERROR_NUM:"number"!=typeof e?u.errorObj.ERROR_VALUE:l.gammaln(e)},t.GAUSS=function(e){return(e=(0,f.parseNumber)(e))instanceof Error?e:l.normal.cdf(e,0,1)-.5},t.GEOMEAN=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));return e instanceof Error?e:l.geomean(e)},t.GROWTH=function(e,t,r,n){if((e=(0,f.parseNumberArray)(e))instanceof Error)return e;var a;if(void 0===t)for(t=[],a=1;a<=e.length;a++)t.push(a);if(void 0===r)for(r=[],a=1;a<=e.length;a++)r.push(a);if(t=(0,f.parseNumberArray)(t),r=(0,f.parseNumberArray)(r),s.anyIsError(t,r))return u.errorObj.ERROR_VALUE;void 0===n&&(n=!0);var i,o,l=e.length,c=0,d=0,m=0,h=0;for(a=0;a<l;a++){var v=t[a],p=Math.log(e[a]);c+=v,d+=p,m+=v*p,h+=v*v}c/=l,d/=l,m/=l,h/=l,n?o=d-(i=(m-c*d)/(h-c*c))*c:(i=m/h,o=0);var y=[];for(a=0;a<r.length;a++)y.push(Math.exp(o+i*r[a]));return y},t.HARMEAN=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));if(e instanceof Error)return e;for(var t=e.length,r=0,n=0;n<t;n++)r+=1/e[n];return t/r},t.HYPGEOM={},t.HYPGEOM.DIST=function(e,t,r,n,i){if(i=(0,f.parseBool)(i),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),n=(0,f.parseNumber)(n),s.anyIsError(e,t,r,n))return u.errorObj.ERROR_VALUE;function o(e,t,r,n){return a.default.COMBIN(r,e)*a.default.COMBIN(n-r,t-e)/a.default.COMBIN(n,t)}return i?function(e,t,r,n){for(var a=0,i=0;i<=e;i++)a+=o(i,t,r,n);return a}(e,t,r,n):o(e,t,r,n)},t.INTERCEPT=function(e,r){return e=(0,f.parseNumberArray)(e),r=(0,f.parseNumberArray)(r),s.anyIsError(e,r)?u.errorObj.ERROR_VALUE:e.length!==r.length?u.errorObj.ERROR_NA:t.FORECAST(0,e,r)},t.KURT=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=e.length,n=0,a=0;a<r;a++)n+=Math.pow(e[a]-t,4);return r*(r+1)/((r-1)*(r-2)*(r-3))*(n/=Math.pow(l.stdev(e,!0),4))-3*(r-1)*(r-1)/((r-2)*(r-3))},t.LARGE=function(e,t){e=s.flatten(e);for(var r=[],n=0;n<e.length;n++)parseFloat(e[n])&&r.push(parseFloat(e[n]));return e=r,t=(0,f.parseNumber)(t),s.anyIsError(e,t)?e:e.sort((function(e,t){return t-e}))[t-1]},t.LINEST=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(e),n=l.mean(t),a=t.length,i=0,o=0,c=0;c<a;c++)i+=(t[c]-n)*(e[c]-r),o+=Math.pow(t[c]-n,2);var d=i/o;return[d,r-d*n]},t.LOGEST=function(e,r){if(e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumberArray)(s.flatten(r)),s.anyIsError(e,r))return u.errorObj.ERROR_VALUE;for(var n=0;n<e.length;n++)e[n]=Math.log(e[n]);var a=t.LINEST(e,r);return a[0]=Math.round(1e6*Math.exp(a[0]))/1e6,a[1]=Math.round(1e6*Math.exp(a[1]))/1e6,a},t.LOGNORM={},t.LOGNORM.DIST=function(e,t,r,n){return n=(0,f.parseBool)(n),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:n?l.lognormal.cdf(e,t,r):l.lognormal.pdf(e,t,r)},t.LOGNORM.INV=function(e,t,r){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.lognormal.inv(e,t,r)},t.MAX=function(){var e=s.arrayValuesToNumbers(s.flatten(arguments));return 0===e.length?0:Math.max.apply(Math,e)},t.MAXA=function(){var e=s.arrayValuesToNumbers(s.flatten(arguments));return 0===e.length?0:Math.max.apply(Math,e)},t.MEDIAN=function(){for(var e=s.arrayValuesToNumbers(s.flatten(arguments)),t=[],r=0;r<e.length;r++)"number"==typeof e[r]&&t.push(e[r]);var n=s.arrayValuesToNumbers(s.flatten(t));return l.median(n)},t.MIN=function(){var e=s.flatten(arguments);return 0===e.length?0:Math.min.apply(Math,e)},t.MINA=function(){var e=s.arrayValuesToNumbers(s.flatten(arguments));return 0===e.length?0:Math.min.apply(Math,e)},t.MODE={},t.MODE.MULT=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));if(e instanceof Error)return e;for(var t,r=e.length,n={},a=[],i=0,o=0;o<r;o++)n[t=e[o]]=n[t]?n[t]+1:1,n[t]>i&&(i=n[t],a=[]),n[t]===i&&(a[a.length]=t);return a},t.MODE.SNGL=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));return e instanceof Error?e:t.MODE.MULT(e).sort((function(e,t){return e-t}))[0]},t.NEGBINOM={},t.NEGBINOM.DIST=function(e,t,r,n){return n=(0,f.parseBool)(n),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:n?l.negbin.cdf(e,t,r):l.negbin.pdf(e,t,r)},t.NORM={},t.NORM.DIST=function(e,t,r,n){return n=(0,f.parseBool)(n),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:r<=0?u.errorObj.ERROR_NUM:n?l.normal.cdf(e,t,r):l.normal.pdf(e,t,r)},t.NORM.INV=function(e,t,r){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:l.normal.inv(e,t,r)},t.NORM.S={},t.NORM.S.DIST=function(e,t){return t=(0,f.parseBool)(t),(e=(0,f.parseNumber)(e))instanceof Error?u.errorObj.ERROR_VALUE:t?l.normal.cdf(e,0,1):l.normal.pdf(e,0,1)},t.NORM.S.INV=function(e){return(e=(0,f.parseNumber)(e))instanceof Error?u.errorObj.ERROR_VALUE:l.normal.inv(e,0,1)},t.PEARSON=function(e,t){if(t=(0,f.parseNumberArray)(s.flatten(t)),e=(0,f.parseNumberArray)(s.flatten(e)),s.anyIsError(t,e))return u.errorObj.ERROR_VALUE;for(var r=l.mean(e),n=l.mean(t),a=e.length,i=0,o=0,c=0,d=0;d<a;d++)i+=(e[d]-r)*(t[d]-n),o+=Math.pow(e[d]-r,2),c+=Math.pow(t[d]-n,2);return i/Math.sqrt(o*c)},t.PERCENTILE={},t.PERCENTILE.EXC=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumber)(t),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var r=(e=e.sort((function(e,t){return e-t}))).length;if(t<1/(r+1)||t>1-1/(r+1))return u.errorObj.ERROR_NUM;var n=t*(r+1)-1,a=Math.floor(n);return s.cleanFloat(n===a?e[n]:e[a]+(n-a)*(e[a+1]-e[a]))},t.PERCENTILE.INC=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumber)(t),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var r=t*((e=e.sort((function(e,t){return e-t}))).length-1),n=Math.floor(r);return s.cleanFloat(r===n?e[r]:e[n]+(r-n)*(e[n+1]-e[n]))},t.PERCENTRANK={},t.PERCENTRANK.EXC=function(e,t,r){if(r=void 0===r?3:r,e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;e=e.sort((function(e,t){return e-t}));for(var n=c.default.UNIQUE.apply(null,e),a=e.length,i=n.length,o=Math.pow(10,r),l=0,d=!1,m=0;!d&&m<i;)t===n[m]?(l=(e.indexOf(n[m])+1)/(a+1),d=!0):t>=n[m]&&(t<n[m+1]||m===i-1)&&(l=(e.indexOf(n[m])+1+(t-n[m])/(n[m+1]-n[m]))/(a+1),d=!0),m++;return Math.floor(l*o)/o},t.PERCENTRANK.INC=function(e,t,r){if(r=void 0===r?3:r,e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r))return u.errorObj.ERROR_VALUE;e=e.sort((function(e,t){return e-t}));for(var n=c.default.UNIQUE.apply(null,e),a=e.length,i=n.length,o=Math.pow(10,r),l=0,d=!1,m=0;!d&&m<i;)t===n[m]?(l=e.indexOf(n[m])/(a-1),d=!0):t>=n[m]&&(t<n[m+1]||m===i-1)&&(l=(e.indexOf(n[m])+(t-n[m])/(n[m+1]-n[m]))/(a-1),d=!0),m++;return Math.floor(l*o)/o},t.PERMUT=function(e,t){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:a.default.FACT(e)/a.default.FACT(e-t)},t.PERMUTATIONA=function(e,t){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:Math.pow(e,t)},t.PHI=function(e){return(e=(0,f.parseNumber)(e))instanceof Error?u.errorObj.ERROR_VALUE:Math.exp(-.5*e*e)/2.5066282746310002},t.POISSON={},t.POISSON.DIST=function(e,t,r){return r=(0,f.parseBool)(r),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.poisson.cdf(e,t):l.poisson.pdf(e,t)},t.PROB=function(e,t,r,n){if(void 0===r)return 0;if(n=void 0===n?r:n,e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),r=(0,f.parseNumber)(r),n=(0,f.parseNumber)(n),s.anyIsError(e,t,r,n))return u.errorObj.ERROR_VALUE;if(r===n)return e.indexOf(r)>=0?t[e.indexOf(r)]:0;for(var a=e.sort((function(e,t){return e-t})),i=a.length,o=0,l=0;l<i;l++)a[l]>=r&&a[l]<=n&&(o+=t[e.indexOf(a[l])]);return o},t.QUARTILE={},t.QUARTILE.EXC=function(e,r){if(e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumber)(r),s.anyIsError(e,r))return u.errorObj.ERROR_VALUE;switch(r){case 1:return t.PERCENTILE.EXC(e,.25);case 2:return t.PERCENTILE.EXC(e,.5);case 3:return t.PERCENTILE.EXC(e,.75);default:return u.errorObj.ERROR_NUM}},t.QUARTILE.INC=function(e,r){if(e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumber)(r),s.anyIsError(e,r))return u.errorObj.ERROR_VALUE;switch(r){case 1:return t.PERCENTILE.INC(e,.25);case 2:return t.PERCENTILE.INC(e,.5);case 3:return t.PERCENTILE.INC(e,.75);default:return u.errorObj.ERROR_NUM}},t.RANK={},t.RANK.AVG=function(e,t,r){if(e=(0,f.parseNumber)(e),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var n=(r=r||!1)?function(e,t){return e-t}:function(e,t){return t-e},a=(t=(t=s.flatten(t)).sort(n)).length,i=0,o=0;o<a;o++)t[o]===e&&i++;return i>1?(2*t.indexOf(e)+i+1)/2:t.indexOf(e)+1},t.RANK.EQ=function(e,t,r){if(e=(0,f.parseNumber)(e),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var n=(r=r||!1)?function(e,t){return e-t}:function(e,t){return t-e};return(t=t.sort(n)).indexOf(e)+1},t.ROW=function(e,t){return 2!==arguments.length?u.errorObj.ERROR_NA:t<0?u.errorObj.ERROR_NUM:e instanceof Array&&"number"==typeof t?0!==e.length?l.row(e,t):void 0:u.errorObj.ERROR_VALUE},t.ROWS=function(e){return 1!==arguments.length?u.errorObj.ERROR_NA:e instanceof Array?0===e.length?0:l.rows(e):u.errorObj.ERROR_VALUE},t.RSQ=function(e,r){return e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumberArray)(s.flatten(r)),s.anyIsError(e,r)?u.errorObj.ERROR_VALUE:Math.pow(t.PEARSON(e,r),2)},t.SKEW=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=e.length,n=0,a=0;a<r;a++)n+=Math.pow(e[a]-t,3);return r*n/((r-1)*(r-2)*Math.pow(l.stdev(e,!0),3))},t.SKEW.P=function(){var e=(0,f.parseNumberArray)(s.flatten(arguments));if(e instanceof Error)return e;for(var t=l.mean(e),r=e.length,n=0,a=0,i=0;i<r;i++)a+=Math.pow(e[i]-t,3),n+=Math.pow(e[i]-t,2);return n/=r,(a/=r)/Math.pow(n,1.5)},t.SLOPE=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(t),n=l.mean(e),a=t.length,i=0,o=0,c=0;c<a;c++)i+=(t[c]-r)*(e[c]-n),o+=Math.pow(t[c]-r,2);return i/o},t.SMALL=function(e,t){return e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?e:e.sort((function(e,t){return e-t}))[t-1]},t.STANDARDIZE=function(e,t,r){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:(e-t)/r},t.STDEV={},t.STDEV.P=function(){var e=t.VAR.P.apply(this,arguments);return Math.sqrt(e)},t.STDEV.S=function(){var e=t.VAR.S.apply(this,arguments);return Math.sqrt(e)},t.STDEVA=function(){var e=t.VARA.apply(this,arguments);return Math.sqrt(e)},t.STDEVPA=function(){var e=t.VARPA.apply(this,arguments);return Math.sqrt(e)},t.STEYX=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumberArray)(s.flatten(t)),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;for(var r=l.mean(t),n=l.mean(e),a=t.length,i=0,o=0,c=0,d=0;d<a;d++)i+=Math.pow(e[d]-n,2),o+=(t[d]-r)*(e[d]-n),c+=Math.pow(t[d]-r,2);return Math.sqrt((i-o*o/c)/(a-2))},t.TRANSPOSE=function(e){return e?l.transpose(e):u.errorObj.ERROR_NA},t.T=o.default.T,t.T.DIST=function(e,t,r){return r=(0,f.parseBool)(r),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:r?l.studentt.cdf(e,t):l.studentt.pdf(e,t)},t.T.DIST["2T"]=function(e,t){return 2!==arguments.length?u.errorObj.ERROR_NA:e<0||t<1?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:2*(1-l.studentt.cdf(e,t))},t.T.DIST.RT=function(e,t){return 2!==arguments.length?u.errorObj.ERROR_NA:e<0||t<1?u.errorObj.ERROR_NUM:"number"!=typeof e||"number"!=typeof t?u.errorObj.ERROR_VALUE:1-l.studentt.cdf(e,t)},t.T.INV=function(e,t){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),e<=0||e>1||t<1?u.errorObj.ERROR_NUM:s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:Math.abs(l.studentt.inv(e/2,t))},t.T.INV["2T"]=function(e,t){return e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),e<=0||e>1||t<1?u.errorObj.ERROR_NUM:s.anyIsError(e,t)?u.errorObj.ERROR_VALUE:Math.abs(l.studentt.inv(e/2,t))},t.T.TEST=function(e,r){if(e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumberArray)(s.flatten(r)),s.anyIsError(e,r))return u.errorObj.ERROR_VALUE;var n,a=l.mean(e),i=l.mean(r),o=0,c=0;for(n=0;n<e.length;n++)o+=Math.pow(e[n]-a,2);for(n=0;n<r.length;n++)c+=Math.pow(r[n]-i,2);o/=e.length-1,c/=r.length-1;var d=Math.abs(a-i)/Math.sqrt(o/e.length+c/r.length);return t.T.DIST["2T"](d,e.length+r.length-2)},t.TREND=function(e,r,n){e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumberArray)(s.flatten(r));var a=t.LINEST(e,r);return a[0]*n+a[1]},t.TRIMMEAN=function(e,t){if(e=(0,f.parseNumberArray)(s.flatten(e)),t=(0,f.parseNumber)(t),s.anyIsError(e,t))return u.errorObj.ERROR_VALUE;var r=a.default.FLOORMATH(e.length*t,2)/2;return l.mean(s.initial(s.rest(e.sort((function(e,t){return e-t})),r),r))},t.VAR={},t.VAR.P=function(){var e=s.numbers(s.flatten(arguments));if(0===e.length)return u.errorObj.ERROR_VALUE;for(var r=e.length,n=0,a=t.AVERAGE(e),i=0;i<r;i++)n+=Math.pow(e[i]-a,2);return isNaN(n/r)?u.errorObj.ERROR_VALUE:n/r},t.VAR.S=function(){for(var e=s.numbers(s.flatten(arguments)),r=e.length,n=0,a=t.AVERAGE(e),i=0;i<r;i++)n+=Math.pow(e[i]-a,2);return n/(r-1)},t.VARA=function(){for(var e=s.flatten(arguments),r=e.length,n=0,a=0,i=t.AVERAGEA(e),o=0;o<r;o++){var l=e[o];n+="number"==typeof l?Math.pow(l-i,2):!0===l?Math.pow(1-i,2):Math.pow(0-i,2),null!==l&&a++}return n/(a-1)},t.VARPA=function(){for(var e=s.flatten(arguments),r=e.length,n=0,a=0,i=t.AVERAGEA(e),o=0;o<r;o++){var l=e[o];n+="number"==typeof l?Math.pow(l-i,2):!0===l?Math.pow(1-i,2):Math.pow(0-i,2),null!==l&&a++}return n/a},t.WEIBULL={},t.WEIBULL.DIST=function(e,t,r,n){return n=(0,f.parseBool)(n),e=(0,f.parseNumber)(e),t=(0,f.parseNumber)(t),r=(0,f.parseNumber)(r),s.anyIsError(e,t,r)?u.errorObj.ERROR_VALUE:n?1-Math.exp(-Math.pow(e/r,t)):Math.pow(e,t-1)*Math.exp(-Math.pow(e/r,t))*t/Math.pow(r,t)},t.Z={},t.Z.TEST=function(e,r,n){if(e=(0,f.parseNumberArray)(s.flatten(e)),r=(0,f.parseNumber)(r),s.anyIsError(e,r))return u.errorObj.ERROR_VALUE;n=n||t.STDEV.S(e);var a=e.length;return 1-t.NORM.S.DIST((t.AVERAGE(e)-r)/(n/Math.sqrt(a)),!0)}},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(9),a=r(4);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r,n,a,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.ri=t,this.ci=r,this.cell=n,this.expr=a,this.empty=i}var t,r,l;return t=e,(r=[{key:"isInclude",value:function(){}},{key:"each",value:function(e){var t=this.cell;if(!1!==(0,n.isHave)(t.depend))for(var r=0;r<t.depend.length;r++){var o=t.depend[r],l=i((0,a.expr2xy)(o),2),s=l[0];e(l[1],s)}}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lockCells=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,a=this.data,l=this.editor,s=e.offsetX,d=e.offsetY,f=a.getCellRectByXY(s,d),m=f.ri,v=f.ci,p=l.pos,y=l.editorText.getText(),g="";l.handler(y);var b=l.mousedownIndex;if((0,i.isAbsoluteValue)((0,i.cuttingByPos)(y,p),2)||t)if(t){var E=t.selector.range,R=E.sri,O=E.sci,A=E.eri,x=E.eci,w=(0,o.xy2expr)(O,R),N=(0,o.xy2expr)(x,A),_=w===N?w:"".concat(w,":").concat(N);if(2===r){var S=(0,i.value2absolute)(w),T=(0,i.value2absolute)(N);_=S.s1===T.s1?S.s1:"".concat(S.s1,":").concat(T.s1)}else if(1===r){var C=(0,i.value2absolute)(w),I=(0,i.value2absolute)(N);_=C.s2===I.s2?C.s2:"".concat(C.s2,":").concat(I.s2)}else if(3===r){var M=(0,i.value2absolute)(w),k=(0,i.value2absolute)(N);_=M.s3===k.s3?M.s3:"".concat(M.s3,":").concat(k.s3)}t.erpx=_,l.isCors&&(p=1);var j=-1!==n?n:p-(0,i.cuttingByPos)(y,p).length;g=y.substring(0,j)+_+y.substring(p,y.length),l.setText(g),l.setCursorPos(y.substring(0,j).length+_.length)}else for(var P=0,D=0;D<this.selectors.length&&0===P;D++){var L=this.selectors[D].erpx;if(L===(0,i.cuttingByPos)(y,p)){var U=f.ri,V=f.ci;this.selectors[D].ri=U,this.selectors[D].ci=V,this.selectors[D].erpx=(0,o.xy2expr)(V,U),this.selectors[D].selector.set(U,V),g="".concat(y.substring(0,p-L.length)).concat((0,o.xy2expr)(V,U)).concat(y.substring(p,y.length)),l.setText(g),l.setCursorPos(y.substring(0,p-L.length).length+(0,o.xy2expr)(V,U).length),P=1}}else if(b.length>0){if((0,i.operation)(b[1][0])&&(0,i.isAbsoluteValue)((0,i.cuttingByPos)(b[1],b[1].length),2))return void l.setLock(!1);var F=c.call(this,m,v);this.selectors.push(F);var B=(g="".concat(b[0]).concat((0,o.xy2expr)(v,m)).concat(b[1])).substring(b[0].length+(0,o.xy2expr)(v,m).length,g.length),H=(0,i.cutFirst)(B.substring(1));if((0,i.operation)(B[0])&&!(0,i.isAbsoluteValue)(H,2))return l.setText(g),void l.setMouseDownIndex([]);H=(0,i.cutFirst)(b[1]),console.log((0,o.xy2expr)(v,m));var Y=(0,i.cutStr)("".concat(b[0]).concat((0,o.xy2expr)(v,m),"+4").concat(b[1])),W=u.call(this,Y),G=W.selectors_delete,z=W.selectors_new;Object.keys(G).forEach((function(e){G[e].removeEl()})),this.selectors=z,g=g.replace(H,""),l.setText(g),l.setCursorPos(b[0].length+(0,o.xy2expr)(v,m).length)}else{var X=l.pos,$=t||c.call(this,m,v);if(-1!==X){for(var q="",K=!1,Z=X,Q="",J=X;J<y.length;J++)Q+=y[J];for(var ee=(0,i.cutFirst)(Q).length,te=0;te<y.length;te++)X===te&&(K=!0,q+=(0,o.xy2expr)(v,m)),Z===te&&ee>0?(Z+=1,ee-=1):q+=y[te];if(t){var re=a.selector.range,ne=re.sri,ae=re.sci,ie=re.eri,oe=re.eci,le=(0,o.xy2expr)(ae,ne),se=(0,o.xy2expr)(oe,ie);g=le===se?le:"".concat(le,":").concat(se),q=K?q:q+g}else this.selectors.push($),q=K?q:q+(0,o.xy2expr)(v,m);l.setText(q),l.setCursorPos(q.length),l.parse()}else this.selectors.push($),g="".concat(y).concat((0,o.xy2expr)(v,m)),l.setText(g)}if(l.parse(l.pos),this.selectors.length>0||t){var ue=l.editorText.getText(),ce=!1,de=this.data.merges;Object.keys(de._).forEach((function(e){for(var t=de._[e],r=(0,i.cutStr)(ue,!0),n=0;n<r.length;n++)if(-1!==r[n].indexOf(":")){var a=r[n].split(":")[0],l=r[n].split(":")[1],s=(0,o.expr2xy)(a),u=(0,o.expr2xy)(l);t.sci>=s[0]&&t.sri>=s[1]&&t.eci<=u[0]&&t.eri<=u[1]&&(ue=ue.replace(new RegExp(r[n],"g"),a),ce=!0)}})),h.call(this,(0,i.cutting)(ue),(0,i.cutting2)(ue)),ce&&setTimeout((function(){l.setCursorPos(ue.length)}),10)}},t.clearSelectors=function(){this.selectorsEl.html(""),this.selectors=[];var e=this.editor,t=this.selector;e.setLock(!1),e.state=1,t.el.show()},t.editingSelectors=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if("number"==typeof t)return;var r=(0,i.cutStr)(t,!0),n=u.call(this,r).selectors_delete;Object.keys(n).forEach((function(e){n[e].removeEl()}));var a=[];Object.keys(r).forEach((function(t){var n=1;Object.keys(e.selectors).forEach((function(t){e.selectors[t].selector.el.removeEl()}));var l="",s=r[t].replace(/\$/g,"");if((0,i.isAbsoluteValue)(r[t])){var u=r[t].replace(/\$/g,"");l=(0,o.expr2xy)(u)}else-1!==s.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)?n=2:l=(0,o.expr2xy)(r[t]);if(1===n){var d=l[1],f=l[0],m=c.call(e,d,f,a);m.erpx=r[t],a.push(m)}else if(2===n){var h=r[t].replace(/\$/g,"").split(":")[0],v=r[t].replace(/\$/g,"").split(":")[1],p=(0,o.expr2xy)(h),y=(0,o.expr2xy)(v),g=c.call(e,p[1],p[0],a,!0,null,!1);(g=c.call(e,y[1],y[0],a,!0,g.selector,!0)).erpx=r[t],a.push(g)}})),this.selectors=a,(this.selectors.length>0||"="===t[0])&&h.call(this,(0,i.cutting)(t),(0,i.cutting2)(t))},t.findBracket=function(e,t,r){var n={left:0,right:0,exist:!1};if(")"!==r[e])return n;var a=e,i=d.call(this,t,a);-1!==i&&-1!==a&&(n={left:i,right:a,exist:!0});return n},t.suggestContent=m,t.makeSelector=c;var n,a=(n=r(155))&&n.__esModule?n:{default:n},i=r(6),o=r(4),l=r(79),s=r(0);function u(e){var t=this,r=[],n=[];return Object.keys(this.selectors).forEach((function(a){for(var i=t.selectors[a],o=i.erpx,l=0,s=0;s<e.length&&0===l;s++)e[s].replace(/\$/g,"")===o&&(l=1,r.push(i));0===l&&n.push(i.selector.el)})),{selectors_delete:n,selectors_new:r}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.selectors,n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4?arguments[4]:void 0,u=arguments.length>5?arguments[5]:void 0,c=this.data,d=null,f=this.editor.editorText.getText(),m=(0,l.selectorColor)(r.length),h=m.color,v=m.index;if(s)d=s;else{var p="selector".concat(999999*Math.random());(d=new a.default(c,this,p)).el.attr("class","".concat(p," clear_selector")),d.setCss(h)}n?u?d.setEnd(e,t):d.set(e,t,!0):d.set(e,t,!1),d.el.css("z-index","100");var y=f.split((0,o.xy2expr)(t,e)).length-2,g=(0,o.xy2expr)(t,e),b=c.merges;Object.keys(b._).forEach((function(e){for(var t=b._[e],r=(0,i.cutStr)(g,!0),n=0;n<r.length;n++)if(-1!==r[n].indexOf(":")){var a=r[n].split(":")[0],l=r[n].split(":")[1],s=(0,o.expr2xy)(a),u=(0,o.expr2xy)(l);t.sci>=s[0]&&t.sri>=s[1]&&t.eci<=u[0]&&t.eri<=u[1]&&(g=g.replace(new RegExp(r[n],"g"),a))}}));var E={ri:e,ci:t,index:y,color:h,index2:v,className:d.el.el.className,erpx:g,selector:d};return u||(d.el.show(),this.selectorsEl.child(d.el)),n?E:(this.selectorsEl.child(d.el),E)}function d(e,t){for(var r=-1,n=0,a=!1,i=t-1;i>0&&!1===a;i--)"("===e[i]&&(a=!0),")"===e[i]&&n++;for(var o=t;o>0&&-1===r;o--)"("===e[o]&&(0===n&&(r=o),n--);return r}function f(e,t){for(var r=-1,n=0,a=!1,i=t+1;i<e.length&&!1===a;i++)")"===e[i]&&(a=!0),"("===e[i]&&n++;for(var o=t;o<e.length&&-1===r;o++)")"===e[o]&&(0===n&&(r=o),n--);return r}function m(e,t,r){var n={suggestContent:!1,cut:"",pos:1},a=e-1,o=d.call(this,t,a),l=f.call(this,t,o);o<=a&&-1!==o&&(l>=a||-1===l)&&(n.suggestContent=!0,n.cut=(0,i.cuttingByPos)(r,o));for(var s=o;s<a+1;s++)","===r[s]&&(n.pos+=2);return n}function h(e,t){var r=this.editor,n=[],a=-1,i=-1;Object.keys(e).forEach((function(r){var a=(0,s.h)("span","formula_span".concat(r));Object.keys(t).forEach((function(){if(t[r]&&-1!==t[r].code&&t[r].data===e[r]){var n=(0,l.selectorColor)(t[r].code).color;a.css("color",n)}})),a.css("display","inline-block"),a.css("cursor","text")," "===e[r]?a.html("&emsp;"):a.html(e[r]),n.push(a)}));var o=r.pos,u=r.editorText.getText(),c={suggestContent:!1,cut:""};if(")"===u[o-1]?(a=o-1,i=d.call(this,e,a)):c=m.call(this,o+1,e,u),""!==u&&n.length<=0){var f=(0,s.h)("span","formula_span");n.push(f)}r.mount2span(n,a,i,c)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFontSizePxByPt=function(e){for(var t=0;t<n.length;t+=1){var r=n[t];if(r.pt===e)return r.px}return e},t.baseFonts=t.fontSizes=void 0;t.baseFonts=[{key:"Arial",title:"Arial"},{key:"Helvetica",title:"Helvetica"},{key:"Source Sans Pro",title:"Source Sans Pro"},{key:"Comic Sans MS",title:"Comic Sans MS"},{key:"Courier New",title:"Courier New"},{key:"Verdana",title:"Verdana"},{key:"Lato",title:"Lato"}];var n=[{pt:7.5,px:10},{pt:8,px:11},{pt:9,px:12},{pt:10,px:13},{pt:10.5,px:14},{pt:11,px:15},{pt:12,px:16},{pt:14,px:18.7},{pt:15,px:20},{pt:16,px:21.3},{pt:18,px:24},{pt:22,px:29.3},{pt:24,px:32},{pt:26,px:34.7},{pt:36,px:48},{pt:42,px:56}];t.fontSizes=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.testValid=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.valid;(0,n.isHave)(e)&&e.assert()};var n=r(9)},function(module,exports,__webpack_require__){"use strict";var _helper=_interopRequireDefault(__webpack_require__(13)),_error_config=__webpack_require__(2),_numeral=_interopRequireDefault(__webpack_require__(49));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function num2e(e){var t=Math.floor(Math.log(e)/Math.LN10),r=e*Math.pow(10,-t);return t.toString().length<10&&(t="0"+t),r+"E+"+t}function allzero(e){e=e.toString();for(var t=0;t<e.length;t++)if("0"!==e[t])return!1;return!0}function decimalsToFractional(e){formatDecimals=e.toFixed(2);var t=3,r=3*formatDecimals;return function e(){for(var n=t>r?t:r;n>1;n--)Number.isInteger(r/n)&&Number.isInteger(t/n)&&(r/=n,t/=n,e())}(),r=parseInt(r),"".concat(r,"/").concat(t)}exports.ASC=function(e){var t="";e=e.toString();for(var r=0;r<e.length;r++)e.charCodeAt(r)>65248&&e.charCodeAt(r)<65375?t+=String.fromCharCode(e.charCodeAt(r)-65248):t+=String.fromCharCode(e.charCodeAt(r));return t},exports.BAHTTEXT=function(){throw new Error("BAHTTEXT is not implemented")},exports.CHAR=function(e){return(e=_helper.default.parseNumber(e))instanceof Error?e:String.fromCharCode(e)},exports.CLEAN=function(e){return(e=e||"").replace(/[\0-\x1F]/g,"")},exports.CODE=function(e){return(e=e||"").charCodeAt(0)},exports.CONCATE=function(){for(var e=_helper.default.flatten(arguments),t=0;(t=e.indexOf(!0))>-1;)e[t]="TRUE";for(var r=0;(r=e.indexOf(!1))>-1;)e[r]="FALSE";return e.join("")},exports.CONCATENATE=function(){for(var e=_helper.default.flatten(arguments),t=0;(t=e.indexOf(!0))>-1;)e[t]="TRUE";for(var r=0;(r=e.indexOf(!1))>-1;)e[r]="FALSE";return e.join("")},exports.DBCS=function(){throw new Error("DBCS is not implemented")},exports.DOLLAR=function(e,t){if(t=void 0===t?2:t,e=_helper.default.parseNumber(e),t=_helper.default.parseNumber(t),_helper.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var r="";return t<=0?(e=Math.round(e*Math.pow(10,t))/Math.pow(10,t),r="($0,0)"):t>0&&(r="($0,0."+new Array(t+1).join("0")+")"),(0,_numeral.default)(e).format(r)},exports.EXACT=function(e,t){return e===t},exports.FIND=function(e,t,r){return r=void 0===r?0:r,t.indexOf(e),t?t.indexOf(e,r-1)+1:null},exports.FIXED=function(e,t,r){if(t=void 0===t?2:t,r=void 0!==r&&r,e=_helper.default.parseNumber(e),t=_helper.default.parseNumber(t),_helper.default.anyIsError(e,t))return _error_config.errorObj.ERROR_VALUE;var n=r?"0":"0,0";return t<=0?e=Math.round(e*Math.pow(10,t))/Math.pow(10,t):t>0&&(n+="."+new Array(t+1).join("0")),(0,_numeral.default)(e).format(n)},exports.HTML2TEXT=function(e){var t="";return e&&(e instanceof Array?e.forEach((function(e){""!==t&&(t+="\n"),t+=e.replace(/<(?:.|\n)*?>/gm,"")})):t=e.replace(/<(?:.|\n)*?>/gm,"")),t},exports.INDEX=function(e,t,r){return"string"==typeof e&&(e=_helper.default.strToMatrix(e)),e[t][r-1]},exports.LEFT=function(e,t){return t=void 0===t?1:t,(t=_helper.default.parseNumber(t))instanceof Error||"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e?e.substring(0,t):null},exports.LEN=function(e){return 0===arguments.length?_error_config.errorObj.ERROR:"string"==typeof e?e?e.length:0:e.length?e.length:_error_config.errorObj.ERROR_VALUE},exports.LOWER=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e?e.toLowerCase():e},exports.MID=function(e,t,r){if(t=_helper.default.parseNumber(t),r=_helper.default.parseNumber(r),_helper.default.anyIsError(t,r)||"string"!=typeof e)return r;var n=t-1,a=n+r;return e.substring(n,a)},exports.NUMBERVALUE=function(e,t,r){return t=void 0===t?".":t,r=void 0===r?",":r,e.indexOf("%")>0?(e=e.replace("%",""),parseFloat(e)/100):Number(e.replace(t,".").replace(r,""))},exports.PRONETIC=function(){throw new Error("PRONETIC is not implemented")},exports.PROPER=function(e){return void 0===e||0===e.length?_error_config.errorObj.ERROR_VALUE:(!0===e&&(e="TRUE"),!1===e&&(e="FALSE"),isNaN(e)&&"number"==typeof e?_error_config.errorObj.ERROR_VALUE:("number"==typeof e&&(e=""+e),e.replace(/\w\S*/g,(function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()}))))},exports.REGEXEXTRACT=function(e,t){var r=e.match(new RegExp(t));return r?r[r.length>1?r.length-1:0]:null},exports.REGEXMATCH=function(e,t,r){var n=e.match(new RegExp(t));return r?n:!!n},exports.REGEXREPLACE=function(e,t,r){return e.replace(new RegExp(t),r)},exports.REPLACE=function(e,t,r,n){return t=_helper.default.parseNumber(t),r=_helper.default.parseNumber(r),_helper.default.anyIsError(t,r)||"string"!=typeof e||"string"!=typeof n?_error_config.errorObj.ERROR_VALUE:e.substr(0,t-1)+n+e.substr(t-1+r)},exports.REPT=function(e,t){return(t=_helper.default.parseNumber(t))instanceof Error?t:new Array(t+1).join(e)},exports.RIGHT=function(e,t){return t=void 0===t?1:t,(t=_helper.default.parseNumber(t))instanceof Error?t:e?e.substring(e.length-t):null},exports.SEARCH=function(e,t,r){var n;return"string"!=typeof e||"string"!=typeof t?_error_config.errorObj.ERROR_VALUE:(r=void 0===r?0:r,0===(n=t.toLowerCase().indexOf(e.toLowerCase(),r-1)+1)?_error_config.errorObj.ERROR_VALUE:n)},exports.SPLIT=function(e,t){return e.split(t)},exports.SUBSTITUTE=function(e,t,r,n){if(!(e&&t&&r))return e;if(void 0===n)return e.replace(new RegExp(t,"g"),r);for(var a=0,i=0;e.indexOf(t,a)>0;)if(a=e.indexOf(t,a+1),++i===n)return e.substring(0,a)+r+e.substring(a+t.length)},exports.T=function(e){return"TRUE"==e||"FALSE"==e?"":"string"==typeof e?e:""},exports.TEXT=function(value,format){try{if(format.indexOf("%")>=0){var fixed=format.split(".")[1].length-1;return(100*parseFloat(value)).toFixed(fixed)+"%"}var Formulas=window.jsSpreadsheet.AllFormulas,_result=Formulas.TEXT(value,format);console.log(_result)}catch(e){var _result2=void 0}if(null==result){if(format.indexOf("#")>=0&&format.indexOf("?/?")>=0){var x=parseFloat(value)-parseInt(value);return 0!==parseInt(value)?parseInt(value)+" "+decimalsToFractional(x):decimalsToFractional(x)}if(format.indexOf("E+")>=0)return num2e(value);if(allzero(value)){for(var _result3="",i=0;i<format.length-value.length;i++)_result3+="0";return _result3+value}if(format.indexOf("#")>=0){var fmt=format;if(format.indexOf("[")>=0&&format.indexOf(";")>=0){var valid=format.split("#")[0];fmt=format.split("]")[1].split(";"),valid=valid.replace("[","").replace("]",""),fmt=eval(value+valid)?fmt[0]:fmt[1]}if(format.indexOf("#")>=0&&format.indexOf(!1)&&format.indexOf("0")>=0&&format.indexOf("°")<=0){value.toString().split(".")[1].length>format.split(".")[1].length&&(value=value.toFixed(format.split(".")[1].length)),value=value.toString();for(var _result5="",_n=0,_i=0;_i<fmt.length;_i++)"#"==fmt[_i]||"0"==fmt[_i]||"."==fmt[_i]?(_result5+=value[_n],_n+=1):_result5+=fmt[_i];return _result5}fmt=fmt.replace("##0","##"),value=value.toString();for(var _result4="",n=0,_i2=0;_i2<fmt.length;_i2++)"#"==fmt[_i2]||"0"==fmt[_i2]?(_result4+=value[n],n+=1):_result4+=fmt[_i2];return _result4}}return result},exports.TRIM=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e.replace(/ +/g," ").trim()},exports.UNICHAR=function(e){return 0==e?_error_config.errorObj.ERROR_VALUE:String.fromCharCode(e)},exports.UNICODE=function(e){return e.charCodeAt(0)},exports.UPPER=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:e.toUpperCase()},exports.VALUE=function(e){return"string"!=typeof e?_error_config.errorObj.ERROR_VALUE:(0,_numeral.default)().unformat(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ISBLANK=void 0;var n=r(2),a=r(23);t.CELL=function(){throw new Error("CELL is not implemented")},t.ERROR={},t.ERROR.TYPE=function(e){var t=n.errorMsgArr.indexOf(e);return t>-1?t:n.errorObj.ERROR_NA},t.INFO=function(){throw new Error("INFO is not implemented")};var i=new a.AllowErrorExpFunction((function(e){return!!e.hasOwnProperty("cellVTypeName")&&["CellVEmpty","CellVError"].includes(e.cellVTypeName)}));t.ISBLANK=i,t.ISERR=function(e){return n.errorMsgArr.indexOf(e)>=0||"number"==typeof e&&(isNaN(e)||!isFinite(e))},t.ISERROR=function(e){return t.ISERR(e)||e===n.errorObj.ERROR_NA},t.ISBINARY=function(e){return/^[01]{1,10}$/.test(e)},t.ISEVEN=function(e){return!(1&Math.floor(Math.abs(e)))},t.ISFORMULA=function(){throw new Error("ISFORMULA is not implemented")},t.ISLOGICAL=function(e){return"FALSE"!==e&&(!0===e||!1===e)},t.ISNA=function(e){return e===n.errorObj.ERROR_NA||e===n.errorObj.ERROR_NA.message},t.ISNONTEXT=function(e){return"string"!=typeof e},t.ISNUMBER=function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)},t.ISODD=function(e){return!!(1&Math.floor(Math.abs(e)))},t.ISREF=function(){return null!==arguments[0]},t.ISTEXT=function(e){return"string"==typeof e},t.N=function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)?e:e instanceof Date?e.getTime():!0===e||"TRUE"===e.toString().toUpperCase()||"FALSE"==e.toString().toUpperCase()?1:!1===e||"string"==typeof e?0:ISERROR(e)?e:0},t.NA=function(){return n.errorObj.ERROR_NA},t.SHEET=function(){throw new Error("SHEET is not implemented")},t.SHEETS=function(){throw new Error("SHEETS is not implemented")},t.TYPE=function(e){if("number"==typeof e&&!isNaN(e)&&isFinite(e))return 1;if("string"==typeof e){if("{"!=e.slice(0,1))return 2;var r=helper.strToMatrix(e);if(Array.isArray(r))return 64}return"FALSE"!=e&&(1==e||0==e?4:t.ISERR(e)||e===n.errorObj.ERROR_NA?16:Array.isArray(arr)?64:void 0)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.stamp2DayNum=m;var a,o=r(2),l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=u();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(7)),s=(a=r(13))&&a.__esModule?a:{default:a};function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}var c=[void 0,0,1,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,1,2,3,4,5,6,0],d=[[],[1,2,3,4,5,6,7],[7,1,2,3,4,5,6],[6,0,1,2,3,4,5],[],[],[],[],[],[],[],[7,1,2,3,4,5,6],[6,7,1,2,3,4,5],[5,6,7,1,2,3,4],[4,5,6,7,1,2,3],[3,4,5,6,7,1,2],[2,3,4,5,6,7,1],[1,2,3,4,5,6,7]],f=[[],[6,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],void 0,void 0,void 0,[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]];function m(e){return(e-l.d18991230MS)/l.MS_PER_DAY}function h(e){return 1===new Date(e,1,29).getMonth()}function v(e,t){return Math.ceil((t-e)/l.MS_PER_DAY)}t.DATE=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?o.errorObj.ERROR_VALUE:e<0||t<0||r<0?o.errorObj.ERROR_NUM:new Date(e,t-1,r)},t.DATEVALUE=function(e){if("string"!=typeof e)return o.errorObj.ERROR_VALUE;var t=Date.parse(e);return isNaN(t)?o.errorObj.ERROR_VALUE:m(t)},t.DAY=function(e){var t=s.default.parseDate(e);return t instanceof Error?t:t.getDate()},t.DAYS=function(e,t){return e=s.default.parseDate(e),t=s.default.parseDate(t),e instanceof Error?e:t instanceof Error?t:m(e)-m(t)},t.DAYS360=function(e,t,r){if(r=s.default.parseBool(r),e=s.default.parseDate(e),t=s.default.parseDate(t),e instanceof Error)return e;if(t instanceof Error)return t;if(r instanceof Error)return r;var n,a,i=e.getMonth(),o=t.getMonth();if(r)n=31===e.getDate()?30:e.getDate(),a=31===t.getDate()?30:t.getDate();else{var l=new Date(e.getFullYear(),i+1,0).getDate(),u=new Date(t.getFullYear(),o+1,0).getDate();n=e.getDate()===l?30:e.getDate(),t.getDate()===u?n<30?(o++,a=1):a=30:a=t.getDate()}return 360*(t.getFullYear()-e.getFullYear())+30*(o-i)+(a-n)},t.EDATE=function(e,t){return(e=s.default.parseDate(e))instanceof Error?e:isNaN(t)?o.errorObj.ERROR_VALUE:(t=parseInt(t,10),e.setMonth(e.getMonth()+t),m(e))},t.EOMONTH=function(e,t){return(e=s.default.parseDate(e))instanceof Error?e:isNaN(t)?o.errorObj.ERROR_VALUE:(t=parseInt(t,10),m(new Date(e.getFullYear(),e.getMonth()+t+1,0)))},t.HOUR=function(e){return"number"!=typeof e||isNaN(e)?(e=s.default.parseDate(e))instanceof Error?e:e.getHours():parseInt(24*(parseFloat(e)-parseInt(e)))},t.INTERVAL=function(e){if("number"!=typeof e&&"string"!=typeof e)return o.errorObj.ERROR_VALUE;e=parseInt(e,10);var t=Math.floor(e/94608e4);e%=94608e4;var r=Math.floor(e/2592e3);e%=2592e3;var n=Math.floor(e/86400);e%=86400;var a=Math.floor(e/3600);e%=3600;var i=Math.floor(e/60),l=e%=60;return"P"+(t=t>0?t+"Y":"")+(r=r>0?r+"M":"")+(n=n>0?n+"D":"")+"T"+(a=a>0?a+"H":"")+(i=i>0?i+"M":"")+(l=l>0?l+"S":"")},t.ISOWEEKNUM=function(e){if((e=s.default.parseDate(e))instanceof Error)return e;e.setHours(0,0,0),e.setDate(e.getDate()+4-(e.getDay()||7));var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e-t)/l.MS_PER_DAY+1)/7)},t.MINUTE=function(e){return window.jsSpreadsheet.AllFormulas.MINUTE(e)},t.MONTH=function(e){return(e=s.default.parseDate(e))instanceof Error?e:e.getMonth()+1},t.NETWORKDAYS=function(e,t,r){return r instanceof Array&&(r=s.default.flatten(r)),window.jsSpreadsheet.AllFormulas.NETWORKDAYS(e,t,r)},t.NETWORKDAYSINTL=function(e,t,r,n){"string"==typeof n&&n.indexOf("{")>=0&&(n=s.default.parseDateArray(s.default.strToMatrix(n)[0]));try{return window.jsSpreadsheet.AllFormulas.NETWORKDAYS$INTL(e,t,r,n)}catch(E){if(e=s.default.ExcelDateToJSDate(s.default.parseDate(e)),t=s.default.ExcelDateToJSDate(s.default.parseDate(t)),e instanceof Error)return e;if(t instanceof Error)return t;if(void 0===r)r=f[1];else if("string"==typeof r&&7===r.length){for(var a=[],u=0;u<r.length;u++)"1"==r[u]&&a.push(u+1>6?0:u+1);r=a}else r=f[r];if(!(r instanceof Array))return o.errorObj.ERROR_VALUE;void 0===n?n=[]:n instanceof Array||(n=[n]);for(var c=0;c<n.length;c++){var d=s.default.parseDate(n[c]);if(d instanceof Error)return d;n[c]=d}var m=(t-e)/l.MS_PER_DAY+1,h=m,v=e;for(i=0;i<m;i++){var p=(new Date).getTimezoneOffset()>0?v.getUTCDay():v.getDay(),y=!1;p!==r[0]&&p!==r[1]||(y=!0);for(var g=0;g<n.length;g++){var b=n[g];if(b.getDate()===v.getDate()&&b.getMonth()===v.getMonth()&&b.getFullYear()===v.getFullYear()){y=!0;break}}y&&h--,v.setDate(v.getDate()+1)}return h}},t.NETWORKDAYS.INTL=function(e,t,r,n){if("string"==typeof n&&n.indexOf("{")>=0&&(n=s.default.parseDateArray(s.default.strToMatrix(n))),e=s.default.ExcelDateToJSDate(e),t=s.default.ExcelDateToJSDate(t),e instanceof Error)return e;if(t instanceof Error)return t;if(!((r=void 0===r?f[1]:f[r])instanceof Array))return o.errorObj.ERROR_VALUE;void 0===n?n=[]:n instanceof Array||(n=[n]);for(var a=0;a<n.length;a++){var u=s.default.parseDate(n[a]);if(u instanceof Error)return u;n[a]=u}var c=(t-e)/l.MS_PER_DAY+1,d=c,m=e;for(i=0;i<c;i++){var h=(new Date).getTimezoneOffset()>0?m.getUTCDay():m.getDay(),v=!1;h!==r[0]&&h!==r[1]||(v=!0);for(var p=0;p<n.length;p++){var y=n[p];if(y.getDate()===m.getDate()&&y.getMonth()===m.getMonth()&&y.getFullYear()===m.getFullYear()){v=!0;break}}v&&d--,m.setDate(m.getDate()+1)}return d},t.NOW=function(){return new Date},t.SECOND=function(e){return(e=s.default.parseDate(e))instanceof Error?e:e.getSeconds()},t.TIME=function(e,t,r){return e=s.default.parseNumber(e),t=s.default.parseNumber(t),r=s.default.parseNumber(r),s.default.anyIsError(e,t,r)?o.errorObj.ERROR_VALUE:e<0||t<0||r<0?o.errorObj.ERROR_NUM:(3600*e+60*t+r)/86400},t.TIMEVALUE=function(e){var t=window.jsSpreadsheet.AllFormulas;try{return t.TIMEVALUE(e)}catch(e){return o.errorObj.ERROR_VALUE}},t.TODAY=function(){return window.jsSpreadsheet.AllFormulas.TODAY()},t.WEEKDAY=function(e,t){if((e=s.default.parseDate(e))instanceof Error)return e;void 0===t&&(t=1);var r=e.getDay();return d[t][r]},t.WEEKNUM=function(e,t){if((e=s.default.parseDate(e))instanceof Error)return e;if(void 0===t&&(t=1),21===t)return this.ISOWEEKNUM(e);var r=c[t],n=new Date(e.getFullYear(),0,1),a=n.getDay()<r?1:0;return n-=Math.abs(n.getDay()-r)*l.MS_PER_DAY,Math.floor((e-n)/l.MS_PER_DAY/7+1)+a},t.WORKDAY=function(e,t,r){return void 0!==r&&(r=s.default.flatten(r)),window.jsSpreadsheet.AllFormulas.WORKDAY(e,t,r)},t.WORKDAYINTL=function(e,t,r,n){if((e=s.default.parseDate(e))instanceof Error)return e;if(0==r)return o.errorObj.ERROR_NUM;if((t=s.default.parseNumber(t))instanceof Error)return t;if(t<0)return o.errorObj.ERROR_NUM;if(!((r=void 0===r?f[1]:f[r])instanceof Array))return o.errorObj.ERROR_VALUE;void 0===n?n=[]:n instanceof Array||(n=[n]);for(var a=0;a<n.length;a++){var i=s.default.parseDate(n[a]);if(i instanceof Error)return i;n[a]=i}for(var l=0;l<t;){e.setDate(e.getDate()+1);var u=e.getDay();if(u!==r[0]&&u!==r[1]){for(var c=0;c<n.length;c++){var d=n[c];if(d.getDate()===e.getDate()&&d.getMonth()===e.getMonth()&&d.getFullYear()===e.getFullYear()){l--;break}}l++}}return e.getFullYear()+"/"+e.getMonth()+"/"+e.getDay()},t.YEAR=function(e){return(e=s.default.parseDate(e))instanceof Error?e:e.getFullYear()},t.YEARFRAC=function(e,t,r){if((e=s.default.parseDate(e))instanceof Error)return e;if((t=s.default.parseDate(t))instanceof Error)return t;r=r||0;var n=e.getDate(),a=e.getMonth()+1,i=e.getFullYear(),o=t.getDate(),u=t.getMonth()+1,c=t.getFullYear();switch(r){case 0:return 31===n&&31===o?(n=30,o=30):31===n?n=30:30===n&&31===o&&(o=30),(o+30*u+360*c-(n+30*a+360*i))/360;case 1:var d=365;if(i===c||i+1===c&&(a>u||a===u&&n>=o))return(i===c&&h(i)||function(e,t){var r=e.getFullYear(),n=new Date(r,2,1);if(h(r)&&e<n&&t>=n)return!0;var a=t.getFullYear(),i=new Date(a,2,1);return h(a)&&t>=i&&e<i}(e,t)||1===u&&29===o)&&(d=366),v(e,t)/d;var f=c-i+1,m=(new Date(c+1,0,1)-new Date(i,0,1))/l.MS_PER_DAY/f;return v(e,t)/m;case 2:return v(e,t)/360;case 3:return v(e,t)/365;case 4:return(o+30*u+360*c-(n+30*a+360*i))/360}}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.RawValue=void 0;var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t}var t,r,a;return t=e,(r=[{key:"setValue",value:function(e){this.value=e}},{key:"solveExpression",value:function(){return this.value}}])&&n(t.prototype,r),a&&n(t,a),e}();t.RawValue=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Range=void 0;var n=r(53),a=r(2),i=r(7),o=r(54);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r,a){var i,o;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calcCell=r,this.start_pst=a-t.length,this.end_pst=a,-1!==t.indexOf("!")){var l=t.split("!");o=(0,n.getSanitizedSheetName)(l[0]),i=l[1],this.range_start_pst=a-l[1].length}else o=this.calcCell.calcSheet.name,i=t,this.range_start_pst=this.start_pst;this.calcSheet=this.calcCell.workbookProxy.getSheetByName(o),this.range_expression=i,this.sheet_name=o}var t,r,s;return t=e,(r=[{key:"solveExpression",value:function(){var e,t=this.sheet_name,r=this.range_expression.split(":"),n=parseInt(r[0].replace(/^[A-Z]+/,""),10)||0,l=r[1].replace(/^[A-Z]+/,"");e=parseInt(""===l?"500000":l,10);for(var s=new o.ColIndexProxy(r[0]).colNum,u=new o.ColIndexProxy(r[0]).colNum,c=[],d=n;d<=e;d++){var f=[];c.push(f);for(var m=s;m<=u;m++){var h=new o.ColIndexProxy(m).colStr+d,v=this.calcCell.workbookProxy.getCellByName(t,h);if(v){if(v.cellStatus===i.FORMULA_STATUS.created)v.execFormula();else if(v.cellStatus===i.FORMULA_STATUS.working)throw new Error(a.ERROR_CIRCULAR);"e"===v.cellObj.t?f.push(v.cellObj):f.push(v.cellObj.v)}else f.push(null)}}return c}}])&&l(t.prototype,r),s&&l(t,s),e}();t.Range=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RawArray=t.MatrixValue=void 0;var n=r(7),a=r(2),i=r(56),o=r(20),l=r(57);function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),e}var d=function(){function e(t){s(this,e),this.aArray=t,this.shape=this.getShape(t),this.twoArgOperator=new l.TwoArgOperatorColl}return c(e,[{key:"applyEachElement",value:function(e){return this.aArray.map((function(t){return t.map(e)}))}},{key:"convertNumberToMatrix",value:function(e){return this.applyEachElement((function(t){return e}))}},{key:"getACopy",value:function(){return new e(this.aArray.slice())}},{key:"repeatCol",value:function(e){1===this.shape[1]&&e>1&&(this.aArray=this.aArray.map((function(t){return Array(e).fill(t[0])})),this.shape[1]=e)}},{key:"repeatRow",value:function(e){1===this.shape[0]&&e>1&&(this.aArray=Array(e).fill(this.aArray[0]),this.shape[0]=e)}},{key:"repeatRowOrCol",value:function(e,t){0===t?this.repeatRow(e):this.repeatCol(e)}},{key:"getShape",value:function(e){var t=e.map((function(e){return e.length}));return Math.max(t)===Math.min(t)?[e.length,t[0]]:new Error(n.INVALID_MATRIX)}},{key:"checkAllNumber",value:function(e){e.forEach((function(e){e.forEach((function(e){if("number"!=typeof e)return new Error(n.NOT_NUMBER)}))}))}},{key:"checkSameShape",value:function(e){if(e.shape!==this.shape)return new Error(n.SHAPE_DIFF)}},{key:"convertArgToMatrix",value:function(t){return"number"==typeof t?this.convertNumberToMatrix(t):t instanceof Array?e(t):t instanceof e?t:new Error(n.INVALID_MATRIX)}},{key:"getElement",value:function(e,t){return this.aArray[e][t]}},{key:"growToLargeShape",value:function(e){for(var t=0,r=[0,1];t<r.length;t++){var n=r[t];e.shape[n]>this.shape[n]?this.repeatRowOrCol(e.shape[n],n):this.shape[n]>e.shape[n]&&e.repeatRowOrCol(this.shape[n],n)}}},{key:"exeElementWiseFunc",value:function(e,t){var r=this.convertArgToMatrix(e),n=this.getACopy();n.growToLargeShape(r);for(var a=Math.min(n.shape[0],r.shape[0]),i=Math.min(n.shape[1],r.shape[1]),o=Array(a),l=0;l<a;l++){o[l]=Array(0);for(var s=0;s<i;s++)o[l].push(t(n.getElement(l,s),r.getElement(l,s)))}return o}},{key:"exeElementWiseOperator",value:function(e,t){var r=this.twoArgOperator.getFunc(t);return r instanceof Error?r:this.exeElementWiseFunc(e,r)}}]),e}();t.MatrixValue=d;var f=function(){function e(t){s(this,e),this.rawStr=t,this.cellVError=null,this.solution=null}return c(e,[{key:"parse2Array",value:function(){var e=this;return this.rawStr.split(";").map((function(t){return t.split(",").map((function(t){var r=new i.RawValueParser(t).parse2NumberOrString();return e.cellVError=r===a.PARSE_FAIL?new o.CellVError(new Error(a.ERROR_SYNTAX)):e.cellVError,r}))}))}},{key:"solveExpression",value:function(){var e=this.parse2Array();return this.cellVError instanceof o.CellVError?this.cellVError:(this.solution=e,e)}}]),e}();t.RawArray=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFormula=E,t.Rows=void 0;var n=r(12),a=r(9),i=r(4),o=r(6),l=v(r(59)),s=r(6),u=v(r(60)),c=v(r(141)),d=v(r(75)),f=v(r(5)),m=v(r(28)),h=v(r(142));function v(e){return e&&e.__esModule?e:{default:e}}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function y(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function E(e){return e&&"="===e[0]}function R(e,t,r,n,a,i,o,l){var s=this.getCellByTopCell(e,r,n,"other",l,0),u=s.text,c=s.formulas,d=""!==c?c:u;this.isFormula(d)?this.calcFormulaCellByTopCell(d,t,e,r,n,i):this.calcCellByTopCell(i,a,s,t,n,d,e,u)}function O(e,t,r,n,a,i,o,l){var s="";n?a=Math.abs(a):a*=-1,l?s=this.getCellByTopCell(e,r,n):(s={text:e.v,formulas:e.v},a=0),this.calcNumberCellByTopCell(s,a,t,e,i,o)}function A(e,t,r,n,a,i,o){var l=t,s="",u=r?1:-1;o?s=this.getCellByTopCell(e,l,r,"date"):(s={text:e.v,formulas:e.v},u=0),this.calcDateCellByTopCell(s,n,e,r,a,i,u)}var x=function(){function e(t){var r=t.len,n=t.height,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._={},this.len=r,this.height=n,this.data=a,this.pasteProxy=new c.default,this.workbook=null}var t,r,v;return t=e,(r=[{key:"getHeight",value:function(e){var t=this.get(e);return t&&t.height?t.height:this.height}},{key:"setHeight",value:function(e,t){this.getOrNew(e).height=t}},{key:"setStyle",value:function(e,t){this.getOrNew(e).style=t}},{key:"sumHeight",value:function(e,t,r){var a=this;return(0,n.rangeSum)(e,t,(function(e){return r&&r.has(e)?0:a.getHeight(e)}))}},{key:"totalHeight",value:function(){return this.sumHeight(0,this.len)}},{key:"get",value:function(e){return this._[e]}},{key:"getOrNew",value:function(e){return this._[e]=this._[e]||{cells:{}},this._[e]}},{key:"getCell",value:function(e,t){var r=this.get(e);return void 0!==r&&void 0!==r.cells&&void 0!==r.cells[t]&&((0,a.isHave)(r.cells[t].text)||(0,a.isHave)(r.cells[t].formulas)||(0,a.isHave)(r.cells[t].style||"object"===g(r.cells[t])))?r.cells[t]:null}},{key:"getCellMerge",value:function(e,t){var r=this.getCell(e,t);return r&&r.merge?r.merge:[0,0]}},{key:"getCellOrNew",value:function(e,t){var r=this.getOrNew(e);return r.cells[t]=r.cells[t]||{},r.cells[t]}},{key:"toString",value:function(e){return!1===(0,a.isHave)(e)&&(e=""),e+""}},{key:"isBackEndFunc",value:function(e){return-1!==e.indexOf("MD.RTD")}},{key:"isReferOtherSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.formulas&&"="===e.formulas[0]&&(t||(0,s.isSheetVale)(e.formulas))}},{key:"isEmpty",value:function(e){return e&&(e.text||e.formulas||e.depend)}},{key:"isFormula",value:function(e){return E(e)}},{key:"setValue",value:function(e,t,r){r[e]=t}},{key:"setCell",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all",o=this.data,l=this.getOrNew(e),s=new h.default;if(s.setCell(r),"all"===n)l.cells[t]=s;else if("formulas"===n)l.cells[t]=l.cells[t]||{},l.cells[t].formulas=s.formulas;else if("text"===n)l.cells[t]=l.cells[t]||{},l.cells[t].text=s.text;else if("format"===n)l.cells[t]=l.cells[t]||{},l.cells[t].style=s.style,r.merge&&(l.cells[t].merge=s.merge);else if("date"===n||"datetime"===n)(0,a.isHave)(l.cells[t])||(l.cells[t]={}),this.isFormula(r.formulas)?l.cells[t].formulas=s.formulas:l.cells[t].formulas=s.text,l.cells[t].text=s.text,l.cells[t].style=s.style,l.cells[t].to_calc_num=s.to_calc_num;else if("normal"===n||"number"===n)(0,a.isHave)(l.cells[t])||(l.cells[t]={}),this.isFormula(r.formulas)?l.cells[t].formulas=s.formulas:l.cells[t].formulas=s.text,l.cells[t].text=s.text,l.cells[t].style=s.style;else if("rmb"===n||"percent"===n)(0,a.isHave)(l.cells[t])||(l.cells[t]={}),l.cells[t].text=s.text,l.cells[t].formulas=s.formulas,l.cells[t].style=s.style;else{if("all_with_no_workbook"===n)return void(l.cells[t]=s);if("style"===n)return(0,a.isHave)(l.cells[t])||(l.cells[t]={}),void(l.cells[t].style=s.style)}this.getDependCell((0,i.xy2expr)(t,e),this.getCell(e,t)),s.setFormatText(o.tryParseToNum(s,e,t))}},{key:"getDependCell",value:function(e,t){var r=t.formulas;if(!1!==(0,a.isHave)(r)&&E(r)){for(var n=(0,o.cutStr)(r,!0,!0),l=0;l<n.length;l++){var u,c=this.mergeCellExpr(n[l]);c.state&&(u=n).push.apply(u,y(c.mergeArr))}n=(0,s.distinct)(n),!1===(0,a.isHave)(t.depend)&&(t.depend=[]);for(var d=0;d<n.length;d++){var f=n[d],m=p((0,i.expr2xy)(f),2),h=m[0],v=m[1],g=this.getCell(v,h);!1===(0,a.isHave)(g)&&(g={}),!1===(0,a.isHave)(g.depend)&&(g.depend=[]),g.depend.push(e),g.depend=(0,s.distinct)(g.depend),this.setCell(v,h,g,"all_with_no_workbook")}}}},{key:"mergeCellExpr",value:function(e){if(!(0,o.isAbsoluteValue)(e,6))return{state:!1};e=(e=e.replace(/\$/g,"")).split(":");var t=(0,i.expr2xy)(e[0]),r=(0,i.expr2xy)(e[1]);if(t[0]>r[0]){var n=r[0];r[0]=t[0],t[0]=n}if(t[1]>r[1]){var a=r[1];r[1]=t[1],t[1]=a}var l=new f.default(t[1],t[0],r[1],r[0]),s=[];return l.each((function(e,t){s.push((0,i.xy2expr)(t,e))})),{state:!0,mergeArr:s}}},{key:"useOne",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return!1===(0,a.isHave)(e)?t:r&&this.isFormula(e)?t:e}},{key:"setCellText",value:function(e,t,r){var n=r.text,a=r.style,o=r.formulas,l=r.merge,s=void 0===l?"":l,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all";if("all_with_no_workbook"!==u){var c=this.getCellOrNew(e,t),d=new h.default;d.setCell(c),"style"===u?(d.style=a,d.formulas=n):"format"===u?(d.formulas=c.formulas,d.style=a):"cell"===u?(d.style=a,d.formulas=o,d.merge=void 0,""!==s&&(d.merge=s)):d.formulas=n,d.text=n,this.setCell(e,t,d),this.getDependCell((0,i.xy2expr)(t,e),this.getCell(e,t))}else this.setCell(e,t,{},"all_with_no_workbook")}},{key:"setCellAll",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",a=this.getCellOrNew(e,t),o=new h.default;o.formulas=""===n?a.formulas:n,o.text=r,this.setCell(e,t,o,"formulas"),this.setCell(e,t,o,"text"),this.getDependCell((0,i.xy2expr)(t,e),this.getCell(e,t))}},{key:"moveChange",value:function(e,t,r){var n=this;if(e.length===t.length||r.length===t.length)for(var i=function(i){var l=e[i].expr;e[i].each((function(e,s){var u=n.getCell(e,s);!1===(0,a.isHave)(u)&&(u={}),(0,a.isHave)(u.formulas)||(u.formulas="");var c=(0,o.changeFormula)((0,o.cutStr)(u.formulas));if(-1!==c.indexOf(l)){var d=r[i].expr.replace(/\$/g,"\\$");n.setCellAll(e,s,u.text.replace(new RegExp(d,"g"),t[i].expr),u.formulas.replace(d,t[i].expr))}else{var f=(0,o.value2absolute)(l),m=(0,o.value2absolute)(t[i].expr);-1!==c.indexOf(f.s3)?((f=(0,o.value2absolute)(r[i].expr)).s3=f.s3.replace(/\$/g,"\\$"),n.setCellAll(e,s,u.text.replace(new RegExp(f.s3,"g"),m.s3),u.formulas.replace(new RegExp(f.s3,"g"),m.s3))):-1!==c.indexOf(f.s2)?((f=(0,o.value2absolute)(r[i].expr)).s2=f.s2.replace(/\$/g,"\\$"),n.setCellAll(e,s,u.text.replace(new RegExp(f.s2,"g"),m.s2),u.formulas.replace(new RegExp(f.s2,"g"),m.s2))):-1!==c.indexOf(f.s1)&&((f=(0,o.value2absolute)(r[i].expr)).s1=f.s1.replace(/\$/g,"\\$"),n.setCellAll(e,s,u.text.replace(new RegExp(f.s1,"g"),m.s1),u.formulas.replace(new RegExp(f.s1,"g"),m.s1)))}}))},l=0;l<e.length;l++)i(l)}},{key:"formatMoney",value:function(e,t){if(/[^0-9\.]/.test(e))return"0";if(null==e||""===e)return"0";e=(e=((e=e.toString().replace(/^(\d*)$/,"$1."))+"00").replace(/(\d*\.\d\d)\d*/,"$1")).replace(".",",");for(var r=/(\d)(\d{3},)/;r.test(e);)e=e.replace(r,"$1,$2");if(e=e.replace(/,(\d\d)$/,".$1"),0===t){var n=e.split(".");"00"===n[1]&&(e=n[0])}return e}},{key:"getCellStyleConvert",value:function(e,t){return e&&e.format&&"number"===e.format?"number":e&&e.format&&"rmb"===e.format?"rmb":e&&e.format&&"normal"===e.format?"normal":e&&e.format&&"percent"===e.format?"percent":e&&e.format&&"datetime"===e.format?"datetime":t&&!(0,a.isHave)(e)||t&&e&&"normal"!==e.format||e&&e.format&&"date"===e.format?"date":""}},{key:"getCellTextIsAdd",value:function(e,t,r,n,a,o){var l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,s=arguments.length>7?arguments[7]:void 0,u=!1,c="";return e&&(t<=r[1]&&n&&s?(c=(0,i.xy2expr)(r[0]+a,r[1]+o,l),u=!0):t<=r[1]&&!n&&s?(c=(0,i.xy2expr)(r[0]+a,r[1]+o,l),u=!0):t<=r[0]&&n&&!1===s&&(c=(0,i.xy2expr)(r[0]+a,r[1]+o,l),u=!0)),{enter:u,data:c}}},{key:"eachRange",value:function(e){var t=this,r=[];return e.each((function(e,n){var o,l,u,c=t.getCell(e,n);if((0,a.isHave)(c)){var d=(o=c,!((0,a.isHave)(o)&&""!==o||(0,a.isHave)(l)&&""!==l||(0,a.isHave)(u)));c=(0,s.deepCopy)(c);var f=new m.default(e,n,c,(0,i.xy2expr)(e,n),d);r.push(f)}else{c={};var h=new m.default(e,n,c,(0,i.xy2expr)(e,n),!0);r.push(h)}})),r}},{key:"getCellTextByShift",value:function(e,t,r){for(var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4],l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,s=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=!1,c=!1,d="",f=0;f<e.length;f++){if("string"==typeof e[f]&&(e[f]=e[f].toUpperCase()),-1!==e[f].search(/^[A-Z]+\d+$/)){var m=(0,i.expr2xy)(e[f]);(m[0]+t<0||m[1]+r<0)&&(u=!0);var h=this.getCellTextIsAdd(n,l,m,a,t,r,0,s);h.enter?e[f]=h.data:!1===n&&(e[f]=(0,i.xy2expr)(m[0]+t,m[1]+r)),c=!0}else if(-1!==e[f].search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var v=e[f].split(":")[0],p=e[f].split(":")[1],y=(0,i.expr2xy)(v),g=(0,i.expr2xy)(p);(y[0]+t<0||y[1]+r<0)&&(u=!0),(g[0]+t<0||g[1]+r<0)&&(u=!0);var b="",E=this.getCellTextIsAdd(n,l,y,a,t,r,0,s);b=E.enter?E.data+":":!1===n?(0,i.xy2expr)(y[0]+t,y[1]+r)+":":v+":",(E=this.getCellTextIsAdd(n,l,g,a,t,r,0,s)).enter?b+=E.data:b+=!1===n?(0,i.xy2expr)(g[0]+t,g[1]+r):p,c=!0,e[f]=b}else{var R=(0,o.isAbsoluteValue)(e[f],5);if(2===R){var O=(0,i.expr2xy)(e[f].replace(/\$/g,""));(O[0]+t<0||O[1]+r<0)&&(u=!0);var A=this.getCellTextIsAdd(n,l,O,a,t,r,2,s);A.enter?e[f]=A.data:!1===n&&(e[f]=(0,i.xy2expr)(O[0]+t,O[1],2)),c=!0}else if(1===R){var x=(0,i.expr2xy)(e[f].replace(/\$/g,""));(x[0]+t<0||x[1]+r<0)&&(u=!0);var w=this.getCellTextIsAdd(n,l,x,a,t,r,1,s);w.enter?e[f]=w.data:!1===n&&(e[f]=(0,i.xy2expr)(x[0],x[1]+r,1)),c=!0}else if(4===R){var N=e[f].split(":");console.log(e[f],N);for(var _=0;_<N.length;_++){var S=(0,i.expr2xy)(N[_].replace(/\$/g,""));(S[0]+t<0||S[1]+r<0)&&(u=!0);var T=this.getCellTextIsAdd(n,l,S,a,t,r,2,s);T.enter?N[_]=T.data:!1===n&&(N[_]=(0,i.xy2expr)(S[0]+t,S[1],2))}e[f]=N.join(":"),c=!0}else if(5===R){for(var C=e[f].split(":"),I=0;I<C.length;I++){var M=(0,i.expr2xy)(C[I].replace(/\$/g,""));if((M[0]+t<0||M[1]+r<0)&&(u=!0),1===I){var k=this.getCellTextIsAdd(n,l,M,a,t,r,1,s);k.enter?C[I]=k.data:!1===n&&(C[I]=(0,i.xy2expr)(M[0],M[1]+r,1))}else{var j=this.getCellTextIsAdd(n,l,M,a,t,r,2,s);j.enter?C[I]=j.data:!1===n&&(C[I]=(0,i.xy2expr)(M[0],M[1]+r,2))}}e[f]=C.join(":"),c=!0}else if(7===R){for(var P=e[f].split(":"),D=0;D<P.length;D++){var L=(0,i.expr2xy)(P[D].replace(/\$/g,""));(L[0]+t<0||L[1]+r<0)&&(u=!0);var U=this.getCellTextIsAdd(n,l,L,a,t,r,1,s);U.enter?P[D]=U.data:!1===n&&(P[D]=(0,i.xy2expr)(L[0],L[1]+r,1))}e[f]=P.join(":"),c=!0}else if(6===R){for(var V=e[f].split(":"),F=0;F<V.length;F++){var B=(0,i.expr2xy)(V[F].replace(/\$/g,""));if((B[0]+t<0||B[1]+r<0)&&(u=!0),0===F){var H=this.getCellTextIsAdd(n,l,B,a,t,r,1,s);H.enter?V[F]=H.data:!1===n&&(V[F]=(0,i.xy2expr)(B[0],B[1]+r,1))}else{var Y=this.getCellTextIsAdd(n,l,B,a,t,r,2,s);Y.enter?V[F]=Y.data:!1===n&&(V[F]=(0,i.xy2expr)(B[0]+t,B[1],2))}}e[f]=V.join(":"),c=!0}else if(8===R){for(var W=e[f].split(":"),G=0;G<W.length;G++){var z=(0,i.expr2xy)(W[G].replace(/\$/g,""));if((z[0]+t<0||z[1]+r<0)&&(u=!0),0===G){var X=this.getCellTextIsAdd(n,l,z,a,t,r,0,s);X.enter?W[G]=X.data:!1===n&&(W[G]=(0,i.xy2expr)(z[0]+t,z[1]+r,0))}else{var $=this.getCellTextIsAdd(n,l,z,a,t,r,1,s);$.enter?W[G]=$.data:!1===n&&(W[G]=(0,i.xy2expr)(z[0]+t,z[1],1))}}e[f]=W.join(":"),c=!0}else if(9===R){for(var q=e[f].split(":"),K=0;K<q.length;K++){var Z=(0,i.expr2xy)(q[K].replace(/\$/g,""));if((Z[0]+t<0||Z[1]+r<0)&&(u=!0),0===K){var Q=this.getCellTextIsAdd(n,l,Z,a,t,r,1,s);Q.enter?q[K]=Q.data:!1===n&&(q[K]=(0,i.xy2expr)(Z[0]+t,Z[1]+r,0))}else{var J=this.getCellTextIsAdd(n,l,Z,a,t,r,2,s);J.enter?q[K]=J.data:!1===n&&(q[K]=(0,i.xy2expr)(Z[0]+t,Z[1],2))}}e[f]=q.join(":"),c=!0}else if(10===R){for(var ee=e[f].split(":"),te=0;te<ee.length;te++){var re=(0,i.expr2xy)(ee[te].replace(/\$/g,""));if((re[0]+t<0||re[1]+r<0)&&(u=!0),1===te){var ne=this.getCellTextIsAdd(n,l,re,a,t,r,0,s);ne.enter?ee[te]=ne.data:!1===n&&(ee[te]=(0,i.xy2expr)(re[0]+t,re[1]+r,0))}else{var ae=this.getCellTextIsAdd(n,l,re,a,t,r,2,s);ae.enter?ee[te]=ae.data:!1===n&&(ee[te]=(0,i.xy2expr)(re[0]+t,re[1],2))}}e[f]=ee.join(":"),c=!0}else if(11===R){for(var ie=e[f].split(":"),oe=0;oe<ie.length;oe++){var le=(0,i.expr2xy)(ie[oe].replace(/\$/g,""));if((le[0]+t<0||le[1]+r<0)&&(u=!0),1===oe){var se=this.getCellTextIsAdd(n,l,le,a,t,r,0,s);se.enter?ie[oe]=se.data:!1===n&&(ie[oe]=(0,i.xy2expr)(le[0]+t,le[1]+r,0))}else{var ue=this.getCellTextIsAdd(n,l,le,a,t,r,1,s);ue.enter?ie[oe]=ue.data:!1===n&&(ie[oe]=(0,i.xy2expr)(le[0]+t,le[1],1))}}e[f]=ie.join(":"),c=!0}}d+=e[f]}return{bad:u,enter:c,result:d}}},{key:"autoFilterRef",value:function(e,t){for(var r=p((0,i.expr2xy)(e),2),n=r[0],a=r[1],o=this.getCell(a,n);null!==o;)a+=1,o=this.getCell(a,n);return t.eri=a,t}},{key:"getAllDataType",value:function(e){var t=this,r=!0,n=!0,a=[];return e.each((function(e,i){var o=!1,l=t.getCell(e,i);if(l){l=(0,s.deepCopy)(l);var u=new d.default(l).getCellDataType(a,{isDate:n,isNumber:r});n=u.isDate,r=u.isNumber}else o=!0,r=!1,n=!1;o&&a.push({text:0,formulas:0,tmp:"",type:"other"})})),{isDate:n,isNumber:r,sarr:a}}},{key:"calcNumberCellByTopCell",value:function(e,t,r,n,a,i){var o=e.text,l=e.formulas;o=this.toString(o),l=this.toString(l);var s={};if(this.isFormula(l)){var u=1*o.replace("=","")+t;s={text:"="+u,formulas:"="+u}}else if(""!==o){var c=1*o;if(-1!==o.indexOf(",")){c=c.replace(/,/g,"");var d=parseFloat(c)+t;c=this.formatMoney(d,0)}else c+=t;s={text:c+"",formulas:c+""}}this.copyRender(r,n.ri,n.ci,s,a,i)}},{key:"calcFormulaCellByTopCell",value:function(e,t,r,n,a,i){var o=(0,s.splitStr)(e),l=this.getRangeByTopCell({ri:r.ri,ci:r.ci},n,a),u=r.ri-l.ri,c=r.ci-l.ci,d=this.getCellTextByShift(o,c,u),f=d.bad,m=d.result;this.updateCellReferenceByShift(f,m,r.ri,r.ci,i)}},{key:"calcCellByTopCell",value:function(e,t,r,n,i,o,l,s){if((0,a.isHave)(o)||(o=""),isNaN(o)){var u=this.toString(o).split(/\d+/g);if(u){var c=0;r.text=i?o.replace(/\d+/g,(function(e){return c+=1,u.length-1===c?1*e+1:e})):o.replace(/\d+/g,(function(e){return c+=1,u.length-1===c?1*e-1:e})),r.formulas=r.text}}else r.text=o,r.formulas=r.text;this.copyRender(n,l.ri,l.ci,r,t,e)}},{key:"calcDateCellByTopCell",value:function(e,t,r,n,a,i,o){if(""!==e.text){var s=e.text,u="";u=(0,l.default)(s).add(o,"day").format("YYYY-MM-DD"),e.text=this.toString(u),e.formulas=this.toString(u),this.copyRender(t,r.ri,r.ci,e,a,i)}}},{key:"getRangeByTopCell",value:function(e,t,r){var n=e.ri,a=e.ci;return r?(n=t?n:n-1,a=t?a-1:a):(n=t?n:n+1,a=t?a+1:a),{ri:n,ci:a}}},{key:"getCellByTopCell",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"all",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(arguments.length>5&&void 0!==arguments[5]&&arguments[5],"date"!==n){var i=this.getRangeByTopCell({ri:r?e.ri-a:e.ri+a,ci:e.ci},t,r),o=i.ri,l=i.ci;return this.getCellByCell(o,l)}if(1===t){var s=this.getRangeByTopCell({ri:r?e.ri-a:e.ri+a,ci:e.ci},!1,r),u=s.ri,c=s.ci;return this.getCellByCell(u,c)}return 2===t?this.getCellByCell(e.ri,e.ci-1):3===t?this.getCellByCell(e.ri,e.ci+1):void 0}},{key:"getCellByCell",value:function(e,t){var r=this.getCell(e,t);return r||(r={text:"",formulas:""}),(0,n.cloneDeep)(r)}},{key:"updateCellReferenceByShift",value:function(e,t,r,n){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},i={};e?(i.text="#REF!",i.formulas="#REF!"):(i.text=""!==t?t:"",i.formulas=""!==t?t:""),this.setCell(r,n,i,"all"),a(r,n,i)}},{key:"copyPaste",value:function(e,t,r){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},a=this.pasteProxy;a.setSrcAndDstCellRange(e,t);for(var i=a.use(),o=i.rn,l=i.cn,s=a.autoFilterDirection(),u=s?o:l,c=0;c<u;c++){for(var d=a.upOrDown(),f=a.getOneDRangeObj(s,c),m=f.srcOneDRange,h=f.dstOneDRange,v=this.getAllDataType(m),p=v.isNumber,y=v.isDate,g=v.sarr,b=h.getLocationArray(g),E=a.leftOrRight(),x=!1,w=0;w<b.length;w++){var N=b[w];(p||"number"===N.type||y||"date"===N.type)&&(x=!0)}if(d)for(var _=0;_<b.length;_++){var S=b[_];if(p||"number"===S.type){var T=a.calcDiff(g,d);O.call(this,b[_],b,s,d,T,r,n,p)}else y||"date"===S.type?A.call(this,b[_],E,d,b,r,n,y):R.call(this,b[_],b,s,d,r,n,x,g.length-1)}else for(var C=b.length-1;C>=0;C--){var I=b[C];if(p||"number"===I.type){var M=a.calcDiff(g,d);O.call(this,b[C],b,s,d,M,r,n,p)}else y||"date"===I.type?A.call(this,b[C],E,d,b,r,n,y):R.call(this,b[C],b,s,d,r,n,x,g.length-1)}}}},{key:"copyRender",value:function(e,t,r,n,a,i){for(var o=!1,l=0;!1===o&&l<e.length;l++)e[l].ri===t&&e[l].ci===r&&(o=!0);o&&(this.setCell(t,r,n,a),i(t,r,n))}},{key:"cutPaste",value:function(e,t){var r=this,n=[];this.each((function(a){r.eachCells(a,(function(i){var o=parseInt(a,10),l=parseInt(i,10);e.includes(a,i)&&(o=t.sri+(o-e.sri),l=t.sci+(l-e.sci)),1*a===o&&1*i===l||""!==r._[a].cells[i].text&&""!==r._[a].cells[i].formulas&&n.push({nri:o,nci:l,ri:a,ci:i,cell:(0,s.deepCopy)(r._[a].cells[i])})}))}));for(var a=0;a<n.length;a++){var i=n[a],o=i.ri,l=i.ci;this.setCell(o,l,{},"all")}for(var u=0;u<n.length;u++){var c=n[u],d=c.nri,f=c.nci,m=c.cell;this.setCell(d,f,m,"all")}}},{key:"insert",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n={},i=[];this.each((function(o,l){var u=parseInt(o,10);u>=e&&(u+=r,t.eachCells(o,(function(n,o){if((0,a.isHave)(o)&&(0,a.isHave)(o.formulas)&&t.isFormula(o.formulas)){var l=t.getCellTextByShift((0,s.splitStr)(o.formulas),0,r,!0,!0,e,!0),c=l.bad,d=l.result;l.enter&&!c&&i.push({ri:u,ci:n,cell:{text:d,formulas:d}})}}))),n[u]=l})),this._=n;for(var o=0;o<i.length;o++){var l=i[o],u=l.ri,c=l.ci,d=l.cell;this.setCell(u,c,d,"all")}this.len+=r}},{key:"delete",value:function(e,t){var r=this,n=t-e+1,i={},o=[];this.each((function(l,u){var c=parseInt(l,10);c<e?i[c]=u:l>t&&(i[c-n]=u,r.eachCells(l,(function(t,i){if((0,a.isHave)(i)&&(0,a.isHave)(i.formulas)&&r.isFormula(i.formulas)){var l=r.getCellTextByShift((0,s.splitStr)(i.formulas),0,-1*n,!0,!1,e,!0),u=l.bad,d=l.result;l.enter&&!u&&o.push({ri:c-n,ci:t,cell:{text:d,formulas:d}})}})))})),this._=i;for(var l=0;l<o.length;l++){var u=o[l],c=u.ri,d=u.ci,f=u.cell;this.setCell(c,d,f,"all")}this.len-=n}},{key:"insertColumn",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=[];this.each((function(i,o){var l={};t.eachCells(i,(function(o,u){var c=parseInt(o,10);if(c>=e&&(c+=r,(0,a.isHave)(u)&&(0,a.isHave)(u.formulas)&&t.isFormula(u.formulas))){var d=t.getCellTextByShift((0,s.splitStr)(u.formulas),r,0,!0,!0,e,!1),f=d.bad,m=d.result;d.enter&&!f&&n.push({ri:i,ci:c,cell:{text:m,formulas:m}})}l[c]=u})),o.cells=l}));for(var i=0;i<n.length;i++){var o=n[i],l=o.ri,u=o.ci,c=o.cell;this.setCell(l,u,c,"all")}}},{key:"deleteColumn",value:function(e,t){var r=this,n=t-e+1;this.each((function(a,i){var o={};r.eachCells(a,(function(r,a){var i=parseInt(r,10);i<e?o[i]=a:i>t&&(o[i-n]=a)})),i.cells=o}))}},{key:"deleteCells",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"all";e.each((function(e,n){t.deleteCell(e,n,r)}))}},{key:"deleteCell",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"all",n=this.get(e);if(null!==n){var i=this.getCell(e,t);null!==i&&("all"===r?delete n.cells[t]:"text"===r?((0,a.isHave)(i.text)&&delete i.text,(0,a.isHave)(i.value)&&delete i.value,(0,a.isHave)(i.formulas)&&delete i.formulas):"format"===r?(void 0!==i.style&&delete i.style,i.merge&&delete i.merge):"merge"===r&&i.merge&&delete i.merge)}}},{key:"each",value:function(e){Object.entries(this._).forEach((function(t){var r=p(t,2),n=r[0],a=r[1];e(n,a)}))}},{key:"eachCells",value:function(e,t){this._[e]&&this._[e].cells&&Object.entries(this._[e].cells).forEach((function(e){var r=p(e,2),n=r[0],a=r[1];t(n,a)}))}},{key:"recast",value:function(e){try{if(this.isReferOtherSheet(e,!0)){var t=new u.default(e.formulas);t.parse(),e.recast=t}else e.recast=null}catch(t){e.recast=null}}},{key:"init",value:function(){var e=this;this.each((function(t){e.eachCells(t,(function(r){e.getDependCell((0,i.xy2expr)(r,t),e.getCell(t,r))}))}))}},{key:"setData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];try{e.len&&(this.len=e.len,delete e.len),this._=e,r||""!==t&&(console.time("setData"),n&&(this.init(),t.toolbar.change("close","")),console.timeEnd("setData"))}catch(e){console.error(e)}}},{key:"getData",value:function(){var e=this.len;return Object.assign({len:e},this._)}}])&&b(t.prototype,r),v&&b(t,v),e}();t.Rows=x},,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.process=v,t.mountImg=y,t.isHaveStyle=function(e,t){for(var r=0;r<e.length;r++)if(E(e[r],t))return r;return-1},t.mountPaste=function(e,t){for(var r=this,i=e.clipboardData,o=!1,l=0;l<i.items.length;l++){var s=i.items[l];if("string"===s.kind)s.getAsString((function(e){var t=(0,a.h)("head",""),i=(0,a.h)("span","");-1===e.indexOf("<span")&&-1===e.indexOf("span>")&&-1===e.indexOf("<table")&&-1===e.indexOf("table>")?(i.html(e),t.child(i.el),t=t.el):(t.html(e),t=t.el);var l=t.getElementsByTagName("img")[0],s=t.getElementsByTagName("style")[0],u=t.getElementsByTagName("table")[0],c=t.getElementsByTagName("span")[0];if(l&&!s)y.call(r,l),o=!0;else if(u){if(s)r.el.child(s);u&&!1===o&&(v.call(r,u,s),o=!0)}else setTimeout((function(){if(!o){if(c&&(u=h.call(r,c,u)),s)r.el.child(s);if(u&&!1===o)r.el.child(u),R.call(r,u),u.parentNode.removeChild(u),s&&s.parentNode.removeChild(s),n.sheetReset.call(r),o=!0}}),100)}));else if("file"===s.kind&&!o){var u=s.getAsFile(),c=new FileReader;if(c.onload=function(e){var t=(0,a.h)("img","paste-img");t.el.src=e.target.result,setTimeout((function(){o||(o=!0,y.call(r,t.el))}),0)},!u)return;c.readAsDataURL(u)}}setTimeout((function(){if(o){var e=r.data;e.change(e.getData())}else t()}))},t.hideDirectionArr=g,t.deleteImg=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.data.pasteDirectionsArr,r=[],n=[];if(this.direction=!1,t.length>0)for(var a=0;a<t.length;a++)!0===t[a].state||!0===e?n.push(t[a]):r.push(t[a]);Object.keys(n).forEach((function(e){n[e].img.removeEl()})),this.pasteDirectionsArr=r;var i=this.data;i.pasteDirectionsArr=r,i.change(i.getData())},t.GetInfoFromTable=R,t.dragOption=t.resizeOption=void 0;var n=r(42),a=r(0),i=d(r(85)),o=d(r(186)),l=r(1),s=r(83),u=d(r(5)),c=d(r(187));function d(e){return e&&e.__esModule?e:{default:e}}var f={onBegin:function(e){console.log("obegin",e)},onEnd:function(e){},onResize:function(e,t){var r=s.getChooseImg.call(t);r&&(r.img2.style.width=r.img.el.style.width,r.img2.style.height=r.img.el.style.height)}};t.resizeOption=f;var m={onBegin:function(e){console.log("obegin",e)},onEnd:function(e,t){var r=e.left,n=e.top,a=s.getChooseImg.call(t);if(a){n-31<0?n=0:r-60<0&&(r=0);var i=t.data.getCellRectByXY(r+60,n+31);i.sri=i.ri,i.sci=i.ci,i.eri=i.ri,i.eci=i.ci;var o=r-i.left+50,l=n-i.top+21;a.offsetLeft=o,a.offsetTop=l,a.range=i,void 0!==a.lastCi&&void 0!==a.lastRi&&(a.ri=a.lastRi,a.ci=a.lastCi),a.lastCi=i.ci,a.lastRi=i.ri}},onDrag:function(e){}};function h(e,t){for(var r=(0,a.h)("table",""),n=(0,a.h)("tbody",""),i=e.innerText.split("\n"),o=0;o<i.length;o++){var l=i[o],s=(0,a.h)("tr",""),u=(0,a.h)("td","");u.html(l),u.css("background",e.style.background),u.css("font-weight",e.style["font-weight"]),u.css("color",e.style.color),s.child(u),n.child(s)}return r.child(n),r.el}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=this.el,a=this.data;a.history.add(a.getData()),r.child(e),R.call(this,e),e.parentNode.removeChild(e),t&&t.parentNode.removeChild(t),n.sheetReset.call(this)}function p(e,t){for(var r=0,n=0,a=this.data.pasteDirectionsArr,i=0,o=0;o<a.length;o++){var l=a[o];l.ri===e&&l.ci===t&&(n<l.nextLeft&&(n=l.nextLeft),r<l.nextTop&&(r=l.nextTop),i++)}return{top:r,left:n,number:i}}function y(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0,c=arguments.length>3?arguments[3]:void 0,d=arguments.length>4?arguments[4]:void 0,h=new Image;h.src=e.src,h.onload=function(){var v=h.width,y=h.height,g=e,E=t.container,R=t.data,O=R.pasteDirectionsArr,A=R.selector,x=A.ri,w=A.ci;r&&(x=n,w=c);var N=t.pictureOffsetLeft,_=t.pictureOffsetTop,S=R.getMoveRect(new u.default(x,w,x,w)),T=S.left+N,C=S.top+_,I=0,M=s.getChooseImg.call(t);if(M){var k=p.call(t,M.ri,M.ci);T=k.left,C=k.top,x=M.ri,w=M.ci,I=k.number}var j=(0,a.h)("div","".concat(l.cssPrefix,"-object-container")).css("position","absolute").css("top","".concat(C,"px")).css("width","".concat(v,"px")).css("height","".concat(y,"px")).css("z-index","100000").css("left","".concat(T,"px")).child(g);E.child(j),new i.default(m,t).register(j.el),setTimeout((function(){var e=t.data,n=new o.default(f,t).register(j.el),a=O.length;O.push({src:g.src,state:!0,arr:n,img:j,index:a,img2:g,ri:x,ci:w,offsetLeft:0,offsetTop:0,number:I,range:r?d:e.selector.range,top:C,left:T,nextLeft:T+15,nextTop:C+15}),r||t.data.change(t.data.getData()),t.direction=!0,j.css("width","".concat(g.offsetWidth,"px")),j.css("height","".concat(g.offsetHeight,"px")),b.call(t,n,a,O,r),j.on("mousedown",(function(){return b.call(t,n,a,O)}))}),0)}}function g(){var e=this.data.pasteDirectionsArr;if(this.direction=!1,e.length>0)for(var t=0;t<e.length;t++){var r=e[t].arr;if(r.length>0)for(var n=0;n<r.length;n++)r[n].style.display="none";e[t].state=!1,e[t].img.css("z-index","10000"),e[t].img2.style.border="none"}}function b(e,t,r,n){g.call(this),this.direction=!0,Object.keys(e).forEach((function(t){e[t].style.display="block"}));var a=this.selector,i=this.editor;n?g.call(this):(a.hide(),i.clear(),r[t].img.css("z-index","99999999"),r[t].state=!0)}function E(e,t){if(!(e instanceof Object)||!(t instanceof Object))return e===t;if(Object.keys(e).length!==Object.keys(t).length)return!1;var r=Object.keys(e);for(var n in r){var a=e[n=r[n]]instanceof Object,i=t[n]instanceof Object;if(a&&i){var o=E(e[n],t[n]);if(!o)return o}else if(e[n]!==t[n])return!1}return!0}function R(e){var t=this.data,r=t.selector,n=r.ri,a=r.ci,i=t.styles;console.time("paste");var o=new c.default(t);o.extend(e,{ri:n,ci:a}),o.dealColSpan(e),o.dealStyle(e,{ri:n,ci:a});var l=o.dealReference(e,{ri:n,ci:a}).reference;this.setCellRange(l,o,!0,o.parseTableCellRange(e,{ri:n,ci:a}));var s=t.getSelectedRect(),u=s.left+s.width+60,d=s.top+s.height+31,f=this.advice;return this.editor.clear(),f.show(u,d,1,l,o),console.timeEnd("paste"),{rows:t.rows._,styles:i}}t.dragOption=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectorCellText=Oe,t.insertDeleteRowColumn=we,t.sheetReset=W,t.selectorSet=D,t.default=void 0;var n=r(0),a=r(8),i=M(r(147)),o=M(r(148)),l=M(r(77)),s=M(r(150)),u=M(r(161)),c=M(r(43)),d=M(r(162)),f=M(r(174)),m=M(r(178)),h=r(179),v=r(1),p=r(80),y=r(30),g=M(r(180)),b=r(29),E=r(41),R=r(83),O=M(r(181)),A=r(6),x=(r(76),M(r(5))),w=r(12),N=r(4),_=M(r(183)),S=M(r(184)),T=r(31),C=M(r(185)),I=M(r(84));function M(e){return e&&e.__esModule?e:{default:e}}function k(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function P(){var e=this.data,t=this.verticalScrollbar,r=this.horizontalScrollbar,n=e.getSelectedRect(),a=n.l,i=n.t,o=n.left,l=n.top,s=n.width,u=n.height,c=this.getTableOffset();if(Math.abs(o)+s>c.width)r.move({left:a+s-c.width});else{var d=e.freezeTotalWidth();o<d&&r.move({left:a-1-d})}if(Math.abs(1*l)+u>c.height)t.move({top:i+u-c.height-1});else{var f=e.freezeTotalHeight();l<f&&t.move({top:i-1-f})}}function D(e,t,r){var n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(-1!==t||-1!==r){var i=this.table,o=this.selector,l=this.toolbar;e?o.setEnd(t,r,a,!0):o.set(t,r,n),l.reset(),clearTimeout(this.render_timer),this.render_timer=setTimeout((function(){i.render()}),100)}}function L(e,t){var r=this.selector,n=this.data,a=this.editor,i=n.rows,o=n.cols;a.isCors&&(r.indexes=[a.ri,a.ci]);var l=j(r.indexes,2),s=l[0],u=l[1],c=r.range.eci;if(e){var d=j(r.moveIndexes,2);s=d[0],u=d[1]}"left"===t?u>0&&(u-=1):"right"===t?(c!==u&&(u=c),u<o.len-1&&(u+=1)):"up"===t?s>0&&(s-=1):"down"===t?s<i.len-1&&(s+=1):"row-first"===t?u=0:"row-last"===t?u=o.len-1:"col-first"===t?s=0:"col-last"===t&&(s=i.len-1),e&&(r.moveIndexes=[s,u]),r.selectCell.setData(s,u),r.selectCell.resetSelectOffset(),D.call(this,e,s,u),ce.call(this),P.call(this)}function U(e){if(0===e.buttons&&e.target.className!=="".concat(v.cssPrefix,"-resizer-hover")){var t=e.offsetX,r=e.offsetY,n=this.rowResizer,a=this.colResizer,i=this.tableEl,o=this.data,l=this.website,s=o.getCellRectByXY(e.offsetX,e.offsetY);l.show(s.ri,s.ci);var u=o.rows,c=o.cols;if(t>c.indexWidth&&r>u.height)return n.hide(),void a.hide();var d=i.box();s.ri>=0&&-1===s.ci?(s.width=c.indexWidth,n.show(s,{width:d.width})):n.hide(),-1===s.ri&&s.ci>=0?(s.height=u.height,a.show(s,{height:d.height})):a.hide()}}function V(e){var t=this.verticalScrollbar,r=this.data,n=r.settings.autoLoad,a=t.scroll().top,i=e.deltaY,o=r.rows;if(e.detail&&(i=40*e.detail),i>0&&!0===n){var l=r.scroll.ri+1;l<o.len&&t.move({top:a+o.getHeight(l)-1})}else if(!0===n){var s=r.scroll.ri-1;s>=0&&t.move({top:0===s?0:a-o.getHeight(s)})}}function F(e,t){var r=this.verticalScrollbar,n=this.horizontalScrollbar,a=r.scroll().top,i=n.scroll().left;"left"===e||"right"===e?n.move({left:i-t}):"up"!==e&&"down"!==e||r.move({top:a-t})}function B(){var e=this.data,t=this.verticalScrollbar,r=this.getTableOffset().height;t.set(r,e.rows.totalHeight())}function H(){var e=this.data,t=this.horizontalScrollbar,r=this.getTableOffset().width;e&&t.set(r,e.cols.totalWidth())}function Y(){var e=this.selector,t=this.data,r=this.editor,n=j(t.freeze,2),a=n[0],i=n[1];if(a>0||i>0){var o=t.freezeTotalWidth(),l=t.freezeTotalHeight();r.setFreezeLengths(o,l)}e.resetAreaOffset()}function W(){var e=this.tableEl,t=this.overlayerEl,r=this.overlayerCEl,n=this.table,a=this.toolbar,i=this.selector,o=this.el,l=this.getTableOffset(),s=this.getRect();e.attr(s),t.offset(s),r.offset(l),o.css("width","".concat(s.width,"px")),pe.call(this),ye.call(this),B.call(this),H.call(this),Y.call(this),i.selectCell.toolbarChangeSelectorCell(),n.render(),a.reset(),i.reset()}function G(){var e=this.data,t=this.selector;e.clearClipboard(),t.hideClipboard()}function z(){var e=this.data,t=this.selector;e.copy(),t.showClipboard()}function X(){var e=this.data,t=this.selector;e.cut(),t.showClipboard()}function $(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){e&&(G.call(t),W.call(t))},n=this.data.paste(e,(function(e){return(0,h.xtoast)("Tip",e)}));return r(n),n}function q(){this.data.autofilter(),W.call(this)}function K(){var e=this,t=this.toolbar,r=this.data;t.paintformatActive()&&(r.paintFormatChange((function(t,r){D.call(e,!0,t,r,!0,!0)})),G.call(this),t.paintformatToggle(),t.reset())}function Z(e,t,r,n,a,i,o){var l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,s=arguments.length>8?arguments[8]:void 0,u=arguments.length>9?arguments[9]:void 0,c=arguments.length>10?arguments[10]:void 0;this.selector.setBoxinner("none"),this.container.css("pointer-events","none");var d=n.getCellRectByXYWithNotTotalResult(e.layerX||e.clientX,e.layerY||e.clientY),f=d.ri,m=d.ci;if(t){var h=Q.call(this,n,r,a,u,s,e,i,c,f,m,l),v=h.rpos,p=h.ey,y=h.ex,g=r.showAutofill(f,m,v);(0,w.isOusideViewRange)(this.data.settings.view.height(),this.data.settings.view.width(),p,y,g)&&te.call(this,g,a,u,c,i,n)}else if(1===e.buttons&&!e.shiftKey){f=f<=0?0:f,m=m<=0?0:m;var b=n.viewRange().getMovePos(f,m);J.call(this,b,a,u,c,i,n),console.log("ri: ",f,"ci: ",m),D.call(this,!0,f,m,!0,!0)}}function Q(e,t,r,n,a,i,o,l,s,u,c){var d=e.getRect(t.range),f=new S.default(d),m=d.width+d.left,h=d.height+d.top+v.offsetTop,p=i.clientX-a.l-v.offsetLeft,y=i.clientY;return f.isLocInside(p,y)?(c=-1,t.arange=null):c=f.getUpDownLeftRight(p,y,m,h),{rpos:c,ex:p,ey:y}}function J(e,t,r,n,a,i){2===e?ee.call(this,1,t,r,a,i,n):6===e?ee.call(this,2,t,r,a,i,n):3===e?ee.call(this,4,t,r,a,i,n):5===e?ee.call(this,3,t,r,a,i,n):1===e?(ee.call(this,1,t,r,a,i,n),ee.call(this,4,t,r,a,i,n)):7===e?(ee.call(this,1,t,r,a,i,n),ee.call(this,3,t,r,a,i,n)):8===e?(ee.call(this,2,t,r,a,i,n),ee.call(this,4,t,r,a,i,n)):4===e&&(ee.call(this,2,t,r,a,i,n),ee.call(this,3,t,r,a,i,n))}function ee(e,t,r,n,a,i){if(1===Math.round(Math.random())){var o=0,l=0;if(1===e){var s=t.scroll().top;o=a.scroll.ri+1,t.move({top:s+n.getHeight(o)-1})}else if(2===e){var u=t.scroll().top;o=a.scroll.ri-1,t.move({top:0===o?0:u-n.getHeight(o)})}else if(4===e){var c=r.scroll().left;l=a.scroll.ci+1,r.move({left:c+i.getWidth(l)})}else if(3===e){var d=r.scroll().left;l=a.scroll.ci-1,r.move({left:d-i.getWidth(l)})}}}function te(e,t,r,n,a,i){var o=0,l=0;if(44===e){var s=t.scroll().top;o=i.scroll.ri+1,t.move({top:s+a.getHeight(o)-1})}else if(22===e){var u=t.scroll().top;(o=i.scroll.ri-1)>=0&&t.move({top:0===o?0:u-a.getHeight(o)})}else if(33===e&&1===Math.round(Math.random())&&1===Math.round(Math.random())){var c=r.scroll().left;l=i.scroll.ci+1,r.move({left:c+n.getWidth(l)})}else if(11===e&&1===Math.round(Math.random())&&1===Math.round(Math.random())){var d=r.scroll().left;l=i.scroll.ci-1,r.move({left:d-n.getWidth(l)})}}function re(e){var t=this,r=this.selector,n=this.data,i=this.sortFilter,o=this.editor,l=this.advice,s=e.offsetX,u=e.offsetY,c=e.target.className==="".concat(v.cssPrefix,"-selector-corner"),d=n.getCellRectByXY(s,u),f=d.left,m=d.top,p=d.width,y=d.height,g=d.ri,b=d.ci;o.setRiCi(g,b);var R=n.autoFilter;if(E.hideDirectionArr.call(this),l.el.hide(),R.includes2(g,b)&&R.getSet(n.exceptRowSet,g),R.includes(g,b)&&f+p-20<s&&m+y-20<u){var O=R.items(b,(function(e,t){return n.rows.getCell(e,t)}));return i.set(b,O,R.getFilter(b),R.getSort(b)),void i.setOffset({left:f,top:m+y+2})}if(!e.shiftKey){c?r.showAutofill(g,b):D.call(this,!1,g,b);var A=this.verticalScrollbar,x=this.horizontalScrollbar,w=n.rows,N=n.cols;g=n.scroll.ri+1;var _=function(e){for(var t=e.offsetTop,r=e.offsetLeft;e=e.offsetParent;)t+=e.offsetTop,r+=e.offsetLeft;return{t:t,l:r}}(this.el.el);(0,a.mouseMoveUp)(window,(function(a){console.log("dropdown"),ae.call(t),ne.call(t,a,c,r,n,A,w,e,_,x,N),Z.call(t,a,c,r,n,A,w,e,0,_,x,N)}),(function(){ae.call(t),c&&n.autofill(r.arange,"all",(function(e){return(0,h.xtoast)("Tip",e)}))&&(T.testValid.call(t),ie.call(t)),t.selector.setBoxinner("auto"),r.hideAutofill(),K.call(t),t.container.css("pointer-events","auto")}))}c||1!==e.buttons||e.shiftKey&&D.call(this,!0,g,b)}function ne(e,t,r,n,a,i,o,l,s,u){var c=this,d=setTimeout((function(){var d=setInterval((function(){Z.call(c,e,t,r,n,a,i,o,0,l,s,u)}),50);c.stopTimer2.push(d)}),200);this.stopTimer.push(d)}function ae(){this.stopTimer.clear(),this.stopTimer2.clear()}function ie(){this.data;var e=this.table;this.editor.display=!0;this.selector.arange=null,oe.call(this),e.render()}function oe(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]}function le(e){Ee.call(this,{ri:-1,ci:0,left:60,top:0,width:100},e)}function se(){var e=this.data.getSelectedRect(),t=e.left+e.width+60,r=e.top+e.height+31;this.advice.el.el.style.top="".concat(r,"px"),this.advice.el.el.style.left="".concat(t,"px")}function ue(){var e=this.data,t=this.pictureOffsetLeft,r=this.pictureOffsetTop;this.data.pasteDirectionsArr.forEach((function(n){var a=e.getMoveRect(n.range);n.img.el.style.top="".concat(a.top+r+15*n.number+n.offsetTop,"px"),n.img.el.style.left="".concat(a.left+t+15*n.number+n.offsetLeft,"px")}))}function ce(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,n=this.selector,a=this.data,i=this.editor,o=j(n.indexes,2),l=o[0],s=o[1];l=-1===t?l:t,s=-1===r?s:r;var u=a.getMoveRect(new x.default(l,s,n.range.eri,n.range.eci)),c=this.getTableOffset(),d="top";u.top>c.height/2&&(d="bottom"),i.setOffset(u,d,e),setTimeout((function(){i.setCursorPos(i.editorText.getText().length)}))}function de(){for(var e=0;e<this.selectors.length;e++){var t=this.selectors[e];t.selector.resetSelectorBRLAreaOffset(new x.default(t.ri,t.ci,t.ri,t.ci))}}function fe(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.overlayerCEl=!0===e?(0,n.h)("div","".concat(v.cssPrefix,"-overlayer-content")).children(this.editor.el,this.selectorMoveEl.el,this.selector.el):(0,n.h)("div","".concat(v.cssPrefix,"-overlayer-content")).children(this.selectorMoveEl.el)}function me(){var e=this.editor,t=this.data,r=this.selector;ce.call(this),e.setCellEnd(t.getSelectedCell()),this.data.settings.showEditor&&r.el.hide(),G.call(this),setTimeout((function(){e.setCursorPos(e.editorText.getText().length)}))}function he(e){var t=this,r=this.data,n=this.table,a=this.selector,i=this.editor;r.scrolly(e,(function(){i.display=!1,a.resetBRLAreaOffset(),ue.call(t),se.call(t),de.call(t),ce.call(t,!1),n.render()}))}function ve(e){var t=this,r=this.data,n=this.table,a=this.selector,i=this.editor;r.scrollx(e,(function(){i.display=!1,a.resetBRTAreaOffset(),ue.call(t),se.call(t),de.call(t),ce.call(t,!1),n.render()}))}function pe(){var e=this.data,t=this.table,r=e.viewRange2(),n=e.settings.style.autoAdapt,a=e.settings.ignoreRi,i=0;if(n){if(r.each((function(e,r){var n=t.getCellTextContent(e,r),i=t.getDrawBox(e,r);if(void 0!==n){var o=t.getCellTextStyle(e,r),l=Object.assign({},o.font);l.size=(0,y.getFontSizePxByPt)(l.size);var s=null;void 0!==o.format||(s=t.draw.selfAdaptionTxtWidth(n,l,i)),(void 0===t.autoAdaptList[r]||t.autoAdaptList[r]<s)&&e>a-1&&(t.autoAdaptList[r]=s)}})),t.autoAdaptList.length<0)return;for(var o=e.settings.ignore,l=0;l<t.autoAdaptList.length;l++){for(var s=!1,u=0;u<o.length;u++)l===o[u]&&(s=!0);!1===s&&(void 0===t.autoAdaptList[l]?(i+=50,e.cols.setWidth(l,50)):(t.autoAdaptList[l]<30&&(t.autoAdaptList[l]=30),e.cols.setWidth(l,t.autoAdaptList[l]))),i+=t.autoAdaptList[l]}i>0&&(e.settings.cellWidth=function(){return i})}}function ye(){var e=this.data,t=this.table,r=e.viewRange2(),n=0,a=0,i=e.settings.row.height,o=e.settings.style.autoAdapt,l=0;if(o){r.each((function(r,o){var s=t.getCellTextContent(n,o),u=t.getCellTextStyle(r,o),c=Object.assign({},u.font);c.size=(0,y.getFontSizePxByPt)(c.size);var d=t.getDrawBox(n,o);if(n!==r&&void 0!==s){var f=e.rows.getHeight(n);if(i*a!==f){var m=c.size*a+2*d.padding+2*a;e.rows.setHeight(n,m),l+=m}else l+=f;a=0}else if(void 0!==s&&n===r&&void 0!==s){var h=t.draw.selfAdaptionHeight(d,s,c);(h>a||0===a)&&(a=h)}n=r}));var s=e.rows.getHeight(n),u=t.getCellTextStyle(s,0),c=Object.assign({},u.font);c.size=(0,y.getFontSizePxByPt)(c.size);var d=t.getDrawBox(n,0);if(i*a!==s&&l>0){var f=c.size*a+2*d.padding;l+=f,e.rows.setHeight(n,f)}else l>0&&(l+=s)}console.log(503,l),l>0&&(e.settings.view.height=function(){return l+40})}function ge(e){if(e.target.className==="".concat(v.cssPrefix,"-overlayer")){var t=this.selector,r=this.data,n=e.offsetX,a=e.offsetY,i=r.getCellRectByXY(n,a);t.selectCell.setData(i.ri,i.ci),t.selectCell.resetSelectOffset()}}function be(e,t){var r=e.ri,n=this.table,a=this.selector,i=this.data,o=this.toolbar;i.setRowHeight(r,t),i.change(i.getData()),o.reset(),n.render(),a.resetAreaOffset(),B.call(this),ce.call(this)}function Ee(e,t){var r=e.ci,n=this.table,a=this.selector,i=this.data,o=this.toolbar;i.setColWidth(r,t),i.change(i.getData()),o.reset(),n.render(),a.resetAreaOffset(),H.call(this),ce.call(this)}function Re(e,t){var r=this.errorPopUp;return e&&!r.open?(r.show(t),{state:!0,msg:t}):r.open?(r.hide(),{state:!0,msg:t}):{state:!1,msg:t}}function Oe(e,t,r,n){var a=r.text,i=r.style,o=this.data,l=this.editor,s=o.selectorCellText(e,t,a+"",n);return!(!s.state||!(s=Re.call(this,!0,s.msg)).state)||(o.setCellText(e,t,{text:a,style:i}),l.setRiCi(-1,-1),!1)}function Ae(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"finished",r=this.data,n=this.table,a=this.editor,i=r.selector,o=i.ri,l=i.ci;a.ri!==o&&-1!==a.ri||a.ci!==l&&-1!==a.ci||(r.setSelectedCellText(e,t),"finished"===t&&n.render())}function xe(){this.data.throwFormula()}function we(e){var t=this.data;"insert-row"===e?t.insert("row"):"delete-row"===e?t.delete("row"):"insert-column"===e?t.insert("column"):"delete-column"===e?t.delete("column"):"delete-cell"===e?t.deleteCell():"delete-cell-format"===e?t.deleteCell("format"):"delete-cell-text"===e&&t.deleteCell("text"),G.call(this),W.call(this)}function Ne(e,t){var r=this.data;if("undo"===e)this.undo();else if("undoList"===e)t.setContent(r.historyList(1));else if("redoList"===e)t.setContent(r.historyList(2));else if("redo"===e)this.redo();else if("print"===e);else if("paintformat"===e)!0===t?z.call(this):G.call(this);else if("clearformat"===e)we.call(this,"delete-cell-format");else if("link"===e);else if("chart"===e);else if("autofilter"===e)q.call(this);else if("throwFormula"===e)xe.call(this);else if("close"===e){var n=r.getMax(),a=n.mri,i=n.mci;r.changeDataForCalc=new I.default({type:999,action:"重新计算",ri:-1,ci:-1,oldCell:{},newCell:r.rows.eachRange(new x.default(0,0,a,i))},this.data),W.call(this)}else if("freeze"===e){var o=r.settings.showFreeze;if(t&&!0===o){var l=r.selector,s=l.ri,u=l.ci;this.freeze(s,u)}else this.freeze(0,0)}else"add"===e?(r.showEquation=!r.showEquation,W.call(this,!0)):(r.setSelectedCellAttr(e,t),"border"===e&&_e.call(this,"none"),"cellFormulaProxy"===e&&me.call(this),W.call(this))}function _e(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"1px solid rgb(75, 137, 255";this.selector.br.border(e)}function Se(e,t,r,n){this.data.setAutoFilter(e,t,r,n),W.call(this)}function Te(e){if(e.getLock()||2===e.state){var t=e.ri,r=e.ci,n=e.editorText.getText();return this.selector.indexes=[t,r],Oe.call(this,t,r,{text:n},"input")}return!1}function Ce(e){var t=this;G.call(this),E.mountPaste.call(this,e,(function(){W.call(t);var e=t.data;e.change(e.getData())}))}function Ie(){var e=this,t=this.overlayerEl,r=this.rowResizer,n=this.colResizer,i=this.verticalScrollbar,o=this.horizontalScrollbar,l=this.editor,s=this.contextMenu,u=this.data,c=this.toolbar,d=this.modalValidation,f=this.sortFilter;t.on("mousemove",(function(t){U.call(e,t)})).on("mousedown",(function(t){if(2===t.buttons)u.xyInSelectedRect(t.offsetX,t.offsetY)?(s.setPosition(t.offsetX,t.offsetY),t.stopPropagation()):(s.hide(),re.call(e,t),setTimeout((function(){s.setPosition(t.offsetX,t.offsetY),t.stopPropagation()}),100)),ge.call(e,t);else if(2===t.detail){if(clearTimeout(e.render_timer),l.setMouseDownIndex([]),l.getLock())return;me.call(e)}else{if(l.getLock()||l.isCors){var r=null,n=0;(0,a.mouseMoveUp)(window,(function(a){e.container.css("pointer-events","none"),r&&r.selector&&r.selector.setBoxinner("none");var i=!0,o=u.merges,s=l.editorText.getText();if(Object.keys(o._).forEach((function(e){for(var t=o._[e],r=(0,A.cutStr)(s,!0),n=0;n<r.length;n++)if(-1!==r[n].indexOf(":")){var a=r[n].split(":")[0],l=r[n].split(":")[1],u=(0,N.expr2xy)(a),c=(0,N.expr2xy)(l);t.sci>=u[0]&&t.sri>=u[1]&&t.eci<=c[0]&&t.eri<=c[1]&&(i=!1)}})),i&&1===a.buttons&&!a.shiftKey){var c=u.getCellRectByXY(a.offsetX,a.offsetY),d=c.ri,f=c.ci;if(r&&r.selector)r=b.makeSelector.call(e,d,f,e.selectors,!0,r.selector,!0),b.lockCells.call(e,t,r),e.mergeSelector=!0;else{for(var m=l.pos,h=l.editorText.getText(),v=0;v<e.selectors.length;v++){var p=e.selectors[v];if(p.erpx===(0,A.cuttingByPos)(h,m)){n=1,(r=p).selector.set(d,f,!0);break}}r=r||b.makeSelector.call(e,d,f,e.selectors,!0,null,!1)}}}),(function(){if(e.container.css("pointer-events","auto"),r&&r.selector&&r.selector.setBoxinner("auto"),!1===e.mergeSelector?(r&&!n&&e.selectors.push(r),b.lockCells.call(e,t,r)):r&&!n&&r.selector&&e.selectors.push(r),r)for(var a=0;a<e.selectors.length;a++){var i=e.selectors[a];if(i.className===r.className){i.erpx=r.erpx;break}}r=null,n=0,e.mergeSelector=!1}))}if(console.time("dbclick time1"),!l.getLock()&&!l.isCors){console.time("dbclick time2");var i=l.ri,o=l.ci,c=l.editorText.getText();if(-1!==i&&-1!==o&&"="===c[0])if(Oe.call(e,i,o,{text:c},"input"))return;console.timeEnd("dbclick time2"),l.clear()&&oe.call(e),e.selector.longTimeBefore(),re.call(e,t),ge.call(e,t),_e.call(e),b.clearSelectors.call(e),ce.call(e)}T.testValid.call(e),console.timeEnd("dbclick time1")}})).on("mousewheel.stop",(function(t){V.call(e,t)})),(0,a.bindTouch)(t.el,{move:function(t,r){F.call(e,t,r)}}),c.change=function(t,r){return Ne.call(e,t,r)},f.ok=function(t,r,n,a){return Se.call(e,t,r,n,a)},r.finishedFn=function(t,r){be.call(e,t,r)},n.finishedFn=function(t,r){Ee.call(e,t,r)},i.moveFn=function(t,r){he.call(e,t,r)},o.moveFn=function(t,r){ve.call(e,t,r)},l.change=function(t,r){if("finish"===t)return u.editorChangeToHistory(l.editorText.getOldCell(),l.editorText.getRICI(),1),void l.editorText.setOldCell({},{ri:-1,ci:-1});if("@~esc"===r){var n=l.editorText.getOldCell(),a=n.text,i=n.formulas;l.editorText.setOldCell({text:"",formulas:""});var o=l.ri,s=l.ci;return u.setSelectedCell(a,"input",i,o,s),l.setText(""),b.clearSelectors.call(e),void l.clear(!0)}"format"===t&&u.setSelectedCellAttr(t,"rmb");var c=l.lock;l.setMouseDownIndex(u.rows,[]),b.editingSelectors.call(e,r),c&&"="!==r||"format"!==t&&Ae.call(e,r,t)},d.change=function(e){if("save"===e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];u.addValidation.apply(u,r)}else u.removeValidation()},s.itemClick=function(t){"validation"===t?d.setValue(u.getSelectedValidation()):"copy"===t?z.call(e):"cut"===t?X.call(e):"paste"===t||("paste-value"===t?$.call(e,"text"):"paste-format"===t?$.call(e,"format"):we.call(e,t))},(0,a.bind)(window,"resize",(function(){e.reload()})),(0,a.bind)(window,"click",(function(e){t.contains(e.target)})),(0,a.bind)(window,"copy",(function(t){R.mountCopy.call(e,t)})),(0,a.bind)(window,"cut",(function(t){console.log("cut",t),X.call(e),R.mountCopy.call(e,t);var r=e.data;r.history.add(r.getData())})),(0,a.bind)(window,"paste",(function(t){Ce.call(e,t)})),(0,a.bind)(window,"keydown",(function(t){var r=t.keyCode||t.which,n=t.key,a=t.ctrlKey,i=t.shiftKey,o=t.metaKey;if(R.getChooseImg.call(e)){switch(console.log(r),r){case 8:u.history.addPic(u.getData().pictures,"add"),E.deleteImg.call(e)}(a||o)&&90===r&&(e.undo(),t.preventDefault())}else if(a||o)switch(r){case 90:e.undo(),t.preventDefault();break;case 89:e.redo(),t.preventDefault();break;case 67:if(R.getChooseImg.call(e))return;z.call(e),t.preventDefault();break;case 88:X.call(e),t.preventDefault();break;case 85:c.trigger("underline"),t.preventDefault();break;case 86:break;case 37:L.call(e,i,"row-first"),t.preventDefault();break;case 38:L.call(e,i,"col-first"),t.preventDefault();break;case 39:L.call(e,i,"row-last"),t.preventDefault();break;case 40:L.call(e,i,"col-last"),t.preventDefault();break;case 32:D.call(e,!1,-1,u.selector.ci,!1),t.preventDefault();break;case 66:c.trigger("font-bold");break;case 73:c.trigger("font-italic")}else{switch(r){case 32:i&&D.call(e,!1,u.selector.ri,-1,!1);break;case 27:s.hide(),G.call(e);break;case 37:L.call(e,i,"left"),t.preventDefault();break;case 38:L.call(e,i,"up"),t.preventDefault();break;case 39:L.call(e,i,"right"),t.preventDefault();break;case 40:L.call(e,i,"down"),t.preventDefault();break;case 9:if(Te.call(e,l))return;l.clear(),L.call(e,!1,i?"left":"right"),t.preventDefault(),b.clearSelectors.call(e);break;case 13:if(Te.call(e,l))return;l.clear(),pe.call(e),ye.call(e),L.call(e,!1,i?"up":"down"),oe.call(e),t.preventDefault(),ce.call(e,!0),b.clearSelectors.call(e);break;case 8:we.call(e,"delete-cell-text")}"Delete"===n?(we.call(e,"delete-cell-text"),t.preventDefault()):r>=65&&r<=90||r>=48&&r<=57||r>=96&&r<=105||"="===t.key||113===r&&me.call(e)}}))}var Me=function(){function e(t,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var h=r.settings,y=h.view,b=h.showToolbar,E=h.showContextmenu,R=h.showEditor,A=h.rowWidth;this.el=(0,n.h)("div","".concat(v.cssPrefix,"-sheet")),this.toolbar=new d.default(r,y.width,!b),t.children(this.toolbar.el,this.el),this.pictureOffsetLeft=10,this.pictureOffsetTop=10,this.data=r,this.tableEl=(0,n.h)("canvas","".concat(v.cssPrefix,"-table")),this.rowResizer=new i.default(!1,r.rows.height),this.colResizer=new i.default(!0,r.cols.minWidth),this.verticalScrollbar=new o.default(!0),this.horizontalScrollbar=new o.default(!1),this.editor=new s.default(p.fnNameArrayWithKey,(function(){return a.getTableOffset()}),r.rows.height,r.cols.width,r,this),this.stopTimer=new C.default,this.stopTimer2=new C.default,this.website=new O.default(r,this.editor),this.modalValidation=new f.default,this.errorPopUp=new _.default,this.contextMenu=new u.default((function(){return a.getTableOffset()}),!E),this.selector=new l.default(r,this,!0),this.selectorMoveEl=new l.default(r,this,!1),this.advice=new g.default(r,this),this.overlayerCEl=fe.call(this,R),this.selectors=[],this.container=(0,n.h)("div",""),this.selectorsEl=(0,n.h)("div","selector_clear").attr("id","selector_clear"),this.overlayerCEl.children(this.selectorsEl,this.container),this.mergeSelector=!1,this.overlayerEl=(0,n.h)("div","".concat(v.cssPrefix,"-overlayer")).children(this.overlayerCEl),this.sortFilter=new m.default,this.direction=!1,this.el.children(this.tableEl,this.rowResizer.el,this.overlayerEl.el,this.colResizer.el,this.verticalScrollbar.el,this.horizontalScrollbar.el,this.contextMenu.el,this.modalValidation.el,this.errorPopUp.el,this.sortFilter.el,this.advice.el,this.website.el,this.website.tableEl),this.table=new c.default(this.tableEl.el,r,this.editor),Ie.call(this),W.call(this,!1),D.call(this,!1,0,0),A&&A.state&&le.call(this,A.width)}var t,r,y;return t=e,(r=[{key:"selectorMoveReset",value:function(){ce.call(this),this.editor.setRiCi(this.data.selector.ri,this.data.selector.ci),W.call(this)}},{key:"getTable",value:function(){return{recalc:!1,table:this.table}}},{key:"clickCopyPaste",value:function(){var e=this.data,t=e.clickCopyPaste();t.enter&&(this.selector.arange=t.dstCellRange,e.clickAutofill(t.srcCellRange,t.dstCellRange,"all",(function(e){return(0,h.xtoast)("Tip",e)})),ie.call(this))}},{key:"setCellRange",value:function(e,t,r,n){this.data.paste(n);for(var a=0;a<e.length;a++){var i=e[a],o=i.ri,l=i.ci,s=(0,A.deepCopy)(t.rows.getCellOrNew(o,l));!1===r&&delete s.style,Oe.call(this,o,l,s,"style"),D.call(this,!0,o,l,!0,!0)}}},{key:"selectorEditorReset",value:function(e,t){var r=this.selector;ce.call(this,!0,e,t),this.editor.setRiCi(e,t),r.hide(),W.call(this)}},{key:"loadData",value:function(e){return this.data.setData(e,this),W.call(this),this}},{key:"freeze",value:function(e,t){return this.data.setFreeze(e,t),W.call(this),this}},{key:"undo",value:function(){this.data.undo(this),W.call(this)}},{key:"redo",value:function(){this.data.redo(),W.call(this)}},{key:"reload",value:function(){return W.call(this),this}},{key:"removeEvent",value:function(){a.remove.call(this)}},{key:"getRect",value:function(){var e=this.data;return{width:e.viewWidth(),height:e.viewHeight()}}},{key:"getTableOffset",value:function(){var e=this.data,t=e.rows,r=e.cols,n=this.getRect(),a=n.width,i=n.height;return{width:a-r.indexWidth,height:i-t.height,left:r.indexWidth,top:t.height}}}])&&k(t.prototype,r),y&&k(t,y),e}();t.default=Me},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toUpperCase=function(e){return e=e.toString().toUpperCase()},t.default=void 0;var n,a=r(4),i=r(30),o=(n=r(158))&&n.__esModule?n:{default:n},l=r(159),s=r(160),u=r(1),c=r(31),d=r(9);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var h=5,v={fillStyle:"#f4f5f8"},p={fillStyle:"#fff",lineWidth:s.thinLineWidth,strokeStyle:"#e6e6e6"};function y(e,t){var r=this.data.cellRect(e,t),n=r.left,a=r.top,i=r.width,o=r.height;return new s.DrawBox(n,a,i,o,h)}function g(){var e=this.data.changeDataForCalc;return(0,d.isHave)(e)?{state:!0,data:e}:{state:!1,data:null}}function b(){var e=this.data,t=g.call(this);if((0,d.isHave)(t.data)){try{e.calc.calculateRows(e.rows,t.data)}catch(e){console.error("公式模块报错："+e)}t.state&&(e.changeDataForCalc=null)}}function E(e,t){var r=this.draw,n=this.data,a=n.sortedRowMap,o=e;a.has(e)&&(o=a.get(e));var s=n.getCell(o,t);if((0,d.isHave)(s)){var c=n.getCellStyleOrDefault(o,t),f=y.call(this,e,t);f.bgcolor=c.bgcolor,void 0!==c.border&&(f.setBorders(c.border),r.strokeBorders(f));var m="";n.showEquation?(0,d.isHave)(s.formulas)&&(m=s.formulas):(0,d.isHave)(s.text)&&(m=s.text),r.rect2(f,(function(){var a=n.renderFormat(c,s,o,t,!1);m=a.state?a.cellText:m;var d=Object.assign({},c.font);d.size=(0,i.getFontSizePxByPt)(d.size);var h=n.settings,v=h.ignore,p=h.minus,y=c.color;!0===p&&(0,l.isMinus)(m)&&(y="red");var g=c.underline,b="www"===(m+="").substr(0,3).toLowerCase()?"http://"+m:m;(/^http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?$/.test(b)||function(e){return!!(e+="")&&1===u.look.indexOf(e.split("!")[0])}(s.text))&&(y="#4b89ff",g=!0),r.text(m,f,{align:c.align,valign:c.valign,font:d,color:y,strike:c.strike,underline:g,ignore:v,cindex:t},c.textwrap),n.validations.getError(e,t)&&r.error(f)}))}}function R(){for(var e=this.draw,t=this.data.autoFilter.flex,r=0;r<t.length;r++){for(var n=t[r],a=n.ri,i=n.ci,o=n.state,l=0,s=0;s<r;s++){var u=t[s],c=u.set_total;!0===u.state&&(l+=c)}var d=y.call(this,a,i);e.dropUp(d,o,25*l)}}function O(e){var t=this,r=this.data,n=this.draw;if(e){var a=r.autoFilter;if(!a.active())return;var i=a.hrange();e.intersects(i)&&i.each((function(e,r){var a=y.call(t,e,r);n.dropdown(a)}))}}function A(e,t,r,n,a){var i=this,o=this.draw,l=this.data;o.save(),o.translate(t,r).translate(n,a);var s=l.exceptRowSet;o.save(),e.each((function(e,t){E.call(i,e,t)}),(function(e){return function(e){var t=s.has(e);if(t){var r=l.rows.getHeight(e);o.translate(0,-r)}return!t}(e)})),o.restore();var u=new Set;o.save(),l.eachMergesInView(e,(function(e){var t=e.sri,r=e.sci,n=e.eri;if(s.has(t)){if(!u.has(t)){u.add(t);var a=l.rows.sumHeight(t,n+1);o.translate(0,-a)}}else E.call(i,t,r)})),o.restore(),O.call(this,e),R.call(this),o.restore()}function x(e,t,r,n){var a=this.draw;a.save(),a.attr({fillStyle:"rgba(75, 137, 255, 0.08)"}).fillRect(e,t,r,n),a.restore()}function w(e,t,r,n,i,o){var l=this,u=this.draw,c=this.data,d=t.h,f=t.w,m=o+n,h=i+r;u.save(),u.attr(v),"all"!==e&&"left"!==e||u.fillRect(0,m,r,d),"all"!==e&&"top"!==e||u.fillRect(h,0,f,n);var p=c.selector.range,y=p.sri,g=p.sci,b=p.eri,E=p.eci;u.attr({textAlign:"center",textBaseline:"middle",font:"500 ".concat((0,s.npx)(12),"px Source Sans Pro"),fillStyle:"#585757",lineWidth:(0,s.thinLineWidth)(),strokeStyle:"#e6e6e6"}),"all"!==e&&"left"!==e||(c.rowEach(t.sri,t.eri,(function(e,t,n){var a=m+t,i=e;u.line([0,a],[r,a]),y<=i&&i<b+1&&x.call(l,0,a,r,n),u.fillText(i+1,r/2,a+n/2)})),u.line([0,d+m],[r,d+m]),u.line([r,m],[r,d+m])),"all"!==e&&"top"!==e||(c.colEach(t.sci,t.eci,(function(e,t,r){var i=h+t,o=e;u.line([i,0],[i,n]),g<=o&&o<E+1&&x.call(l,i,0,r,n),u.fillText((0,a.stringAt)(o),i+r/2,n/2)})),u.line([f+h,0],[f+h,n]),u.line([0,n],[f+h,n])),u.restore()}function N(e,t){var r=this.draw;r.save(),r.attr({fillStyle:"#f4f5f8"}).fillRect(0,0,e,t),r.restore()}function _(e,t,r,n,a){var i=e.sri,o=e.sci,l=e.eri,s=e.eci,u=e.w,c=e.h,d=this.draw,f=this.data,m=f.settings;d.save(),d.attr(p).translate(t+n,r+a),d.clearRect(0,0,u,c),m.showGrid?(f.rowEach(i,l,(function(e,t,r){e!==i&&d.line([0,t],[u,t]),e===l&&d.line([0,t+r],[u,t+r])})),f.colEach(o,s,(function(e,t,r){e!==o&&d.line([t,0],[t,c]),e===s&&d.line([t+r,0],[t+r,c])})),d.restore()):d.restore()}function S(e,t,r,n){var a=this.draw,i=this.data,o=i.viewWidth()-e,l=i.viewHeight()-t;a.save().translate(e,t).attr({strokeStyle:"rgba(75, 137, 255, .6)"}),a.line([0,n],[o,n]),a.line([r,0],[r,l]),a.restore()}var T=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.draw=new s.Draw(t,r.viewWidth(),r.viewHeight()),this.editor=n,this.data=r,this.timer=null,this.autoAdaptList=[]}var t,r,n;return t=e,(r=[{key:"getCellTextContent",value:function(e,t){var r=this.data,n=r.sortedRowMap,a=e;n.has(e)&&(a=n.get(e));var i=r.getCell(a,t);if(null!==i)return o.default.render(i.text||"",r,(function(e,t){return r.getCellTextOrDefault(t,e)}))}},{key:"getDrawBox",value:function(e,t){var r=this.data.cellRect(e,t),n=r.left,a=r.top,i=r.width,o=r.height;return new s.DrawBox(n,a,i,o,h)}},{key:"getCellTextStyle",value:function(e,t){var r=this.data,n=r.sortedRowMap,a=e;return n.has(e)&&(a=n.get(e)),r.getCellStyleOrDefault(a,t)}},{key:"render",value:function(){var e=this.data,t=e.rows,r=e.cols,n=e.viewRange();b.call(this),this.clear(),this.draw.resize(e.viewWidth(),e.viewHeight());var a=e.freezeTotalWidth(),i=e.freezeTotalHeight(),o=e.scroll,l=o.x,s=o.y,u=r.indexWidth,d=t.height;_.call(this,n,u,d,a,i),A.call(this,n,u,d,-l,-s),w.call(this,"all",n,u,d,a,i),N.call(this,u,d);var m=f(e.freeze,2),h=m[0],v=m[1];if(h>0||v>0){if(h>0){var p=n.clone();p.sri=0,p.eri=h-1,p.h=i,_.call(this,p,u,d,a,0),A.call(this,p,u,d,-l,0),w.call(this,"top",p,u,d,a,0)}if(v>0){var y=n.clone();y.sci=0,y.eci=v-1,y.w=a,_.call(this,y,u,d,0,i),w.call(this,"left",y,u,d,0,i),A.call(this,y,u,d,0,-s)}var g=e.freezeViewRange();_.call(this,g,u,d,0,0),w.call(this,"all",g,u,d,0,0),A.call(this,g,u,d,0,0),S.call(this,u,d,a,i)}c.testValid.call(this)}},{key:"clear",value:function(){this.draw.clear()}}])&&m(t.prototype,r),n&&m(t,n),e}();t.default=T},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiply=c,t.formatNumberRender=t.baseFormats=t.formatm=void 0;var n=r(10),a=r(12),i=r(9);function o(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var l=function(e){return e},s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;if(!(0,i.isHave)(e)||!(0,a.isNumber)(e))return e;if(/^(-?\d*.?\d*)$/.test(e)){var r=-1===t?e.toString():Number(e).toFixed(t).toString(),n=r.split("\\."),l=o(n),s=l[0],u=(l.slice(1),s.replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"));return"NaN"===u?e:u}return e};t.formatNumberRender=s;var u=[{key:"normal",title:(0,n.tf)("format.normal"),type:"string",render:l},{key:"number",title:(0,n.tf)("format.number"),type:"number",label:"1,000.12",render:s},{key:"percent",title:(0,n.tf)("format.percent"),type:"number",label:"10.12%",render:function(e){var t=c(e,100),r="".concat(t);return"".concat(r,"%")}},{key:"rmb",title:(0,n.tf)("format.rmb"),type:"number",label:"￥10.00",render:function(e){return"￥".concat(s(e))}},{key:"date",title:(0,n.tf)("format.date"),type:"date",label:"2009-01-01",render:l},{key:"datetime",title:(0,n.tf)("format.datetime"),type:"datetime",label:"2009年01月01日",render:l}];function c(e,t,r){return f(e,t,r,"multiply")}function d(e){var t,r={times:1,num:0},n=e<0;if(t=e,Math.floor(t)===t)return r.num=e,r;var a="".concat(e),i=a.indexOf("."),o=a.substr(i+1).length,l=Math.pow(10,o),s=parseInt(Math.abs(e)*l+.5,10);return r.times=l,n&&(s=-s),r.num=s,r}function f(e,t,r,n){var a=d(e),i=d(t),o=a.num,l=i.num,s=a.times,u=i.times,c=s>u?s:u;switch(n){case"add":return(s===u?o+l:s>u?o+l*(s/u):o*(u/s)+l)/c;case"subtract":return(s===u?o-l:s>u?o-l*(s/u):o*(u/s)-l)/c;case"multiply":return o*l/(s*u);case"divide":return o/l*(u/s)}}t.baseFormats=u;var m={};t.formatm=m,u.forEach((function(e){m[e.key]=e}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(10);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var r,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=l(this,s(t).call(this,"div","".concat(a.cssPrefix,"-button ").concat(n)))).child((0,i.t)("button.".concat(e))),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),t}(n.Element);t.default=c},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.createDefaultFnCollection=g,t.CalcWorkbookProxy=t.CalcSheet=void 0;var a=r(47),i=r(91),o=r(93),l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=f();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(103)),s=r(104),u=r(105),c=r(7),d=r(20);function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e,t,r){return t&&h(e.prototype,t),r&&h(e,r),e}var p=function(){function e(t,r,n){m(this,e),this.name=t,this.workbookProxy=r,this.name2CellProxy=this.createName2CellProxy(n)}return v(e,[{key:"updateACell",value:function(e,t){var r=this.getCellByName(e);void 0===r?this.addCalcCell(e,t):r.updateByCellObj(t)}},{key:"createName2CellProxy",value:function(e){var t,r,n={},i=!0,o=!1,l=void 0;try{for(var s,u=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(i=(s=u.next()).done);i=!0){var f=e[t=s.value];void 0===f.v?r=c.FORMULA_STATUS.created:(f.v=(0,d.convertToCellV)(f.v),r=c.FORMULA_STATUS.solved),n[t]=new a.CalcCell(this.workbookProxy,this,f,t,r)}}catch(e){o=!0,l=e}finally{try{i||null==u.return||u.return()}finally{if(o)throw l}}return n}},{key:"getCellNames",value:function(){return Object.getOwnPropertyNames(this.name2CellProxy)}},{key:"getCellByName",value:function(e){return this.name2CellProxy[e]}},{key:"addCalcCell",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.FORMULA_STATUS.created;this.name2CellProxy[e]=new a.CalcCell(this.workbookProxy,this,t,e,r)}}]),e}();t.CalcSheet=p;var y=function(){function e(t){m(this,e),this.name2SheetProxy=this.createName2SheetProxy(t),this.multiCollExpFn=g()}return v(e,[{key:"getFirstSheet",value:function(){return Object.values(this.name2SheetProxy)[0]}},{key:"updateACell",value:function(e,t,r){this.ensureGetSheet(r).updateACell(e,t)}},{key:"updateByName2CellObj",value:function(e,t){var r=this.ensureGetSheet(t),n=!0,a=!1,i=void 0;try{for(var o,l=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(n=(o=l.next()).done);n=!0){var s=o.value;r.updateACell(s,e[s])}}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}var u=this.getCalcCellArrayByNames(Object.getOwnPropertyNames(e));return this.calculateFormulas(u),u}},{key:"updateByMultiSheetObj",value:function(e){var t={},r=!0,n=!1,a=void 0;try{for(var i,o=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(r=(i=o.next()).done);r=!0){var l=i.value,s=e[l];t[l]=this.updateByName2CellObj(s,l)}}catch(e){n=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(n)throw a}}return t}},{key:"getMultiSheetObjFromSheet2CalcArray",value:function(e){var t,r={},n=!0,a=!1,i=void 0;try{for(var o,l=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(n=(o=l.next()).done);n=!0){var s=o.value;t={},e[s].map((function(e){t[e.celName]=e.cellObj})),r[s]=t}}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}},{key:"ensureGetSheet",value:function(e){return void 0===e?this.getFirstSheet():this.getSheetByName(e)}},{key:"convertPreAction2name2CellObj",value:function(e){var t={};e.findAllNeedCalcCell().map((function(e){t[e]={}}));var r={};return e.newCell.map((function(e){r[e.expr]={f:e.cell.formulas}})),Object.assign(t,r),t}},{key:"getCalcCellArrayByNames",value:function(e,t){var r=this.ensureGetSheet(t);return e.map((function(e){return r.getCellByName(e)}))}},{key:"updateByPreAction",value:function(e){var t=this.convertPreAction2name2CellObj(e);return this.updateByName2CellObj(t)}},{key:"updateByWorkbookObj",value:function(e){this.name2SheetProxy=this.createName2SheetProxy(e)}},{key:"createName2SheetProxy",value:function(e){void 0===e.Sheets&&(e.Sheets=c.EmptyMultiSheetObj);var t={},r=!0,n=!1,a=void 0;try{for(var i,o=Object.getOwnPropertyNames(e.Sheets)[Symbol.iterator]();!(r=(i=o.next()).done);r=!0){var l=i.value,s=e.Sheets[l];t[l]=new p(l,this,s)}}catch(e){n=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(n)throw a}}return t}},{key:"getSheetNames",value:function(){return Object.getOwnPropertyNames(this.name2SheetProxy)}},{key:"getSheetByName",value:function(e){return this.name2SheetProxy[e]}},{key:"getCellByName",value:function(e,t){return this.getSheetByName(e).getCellByName(t)}},{key:"getCellPropertyByName",value:function(e,t,r){return this.getCellByName(e,t).getCellProperty(r)}},{key:"parseCalcCell",value:function(e){return e.isStructuralFormula()?new u.StructuralExpressionBuilder(e,this.multiCollExpFn).parseFormula():new s.SimpleExpressionBuilder(e).parseFormula()}},{key:"calculateFormulas",value:function(e){for(var t=e.length-1;t>=0;t--)try{var r=e[t];if(!0!==r.check_valid())throw Error("not a valid formula");r.execFormula()}catch(e){console.log(e)}}},{key:"applyToAllCells",value:function(e){this.name2SheetProxy;var t,r=[],n=!0,a=!1,i=void 0;try{for(var o,l=this.getSheetNames()[Symbol.iterator]();!(n=(o=l.next()).done);n=!0){var s=o.value,u=this.getSheetByName(s),c=!0,d=!1,f=void 0;try{for(var m,h=u.getCellNames()[Symbol.iterator]();!(c=(m=h.next()).done);c=!0){var v=m.value;t=e(u.getCellByName(v)),r.push(t)}}catch(e){d=!0,f=e}finally{try{c||null==h.return||h.return()}finally{if(d)throw f}}}}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}},{key:"applyToAllCellsFilterEmpty",value:function(e){this.name2SheetProxy;var t,r=[],n=!0,a=!1,i=void 0;try{for(var o,l=this.getSheetNames()[Symbol.iterator]();!(n=(o=l.next()).done);n=!0){var s=o.value,u=this.getSheetByName(s),c=!0,d=!1,f=void 0;try{for(var m,h=u.getCellNames()[Symbol.iterator]();!(c=(m=h.next()).done);c=!0){var v=m.value;void 0!==(t=e(u.getCellByName(v)))&&r.push(t)}}catch(e){d=!0,f=e}finally{try{c||null==h.return||h.return()}finally{if(d)throw f}}}}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}},{key:"find_all_cells_with_formulas",value:function(){return this.applyToAllCellsFilterEmpty((function(e){if(e.isFormulaValid()&&e.cellStatus!==c.FORMULA_STATUS.solved)return e}))}},{key:"find_all_need_calc_cell",value:function(e){console.log("find_all_need_calc_cell");for(var t=this.name2SheetProxy,r=e.findAllNeedCalcCell(),n={},i=[],o=Object.getOwnPropertyNames(t.Sheets)[0],l=t.Sheets[o],s=0;s<r.length;s++){var u=r[s];if(u in l!=!1){l[u];var c=n[o+"!"+u]=new a.CalcCell(this,l,o,l[u],n,u,"created");i.push(c)}}return i}}]),e}();function g(){var e=new i.FnCollection;e.addFnObjArray(o.fnObjArray);e.fnObj;var t=new i.FnCollection;t.addFnObj(l);t.fnObj;return new i.MultiCollExpFn(e,t)}t.CalcWorkbookProxy=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CalcCell=void 0;(n=r(90))&&n.__esModule,r(2);var n,a=r(4),i=r(7);r(9);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r,n,a,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.workbookProxy=t,this.calcSheet=r,this.cellObj=n,this.celName=a,this.cellStatus=i,this.formulaString=this.getFormulaString()}var t,r,n;return t=e,(r=[{key:"getFormulaString",value:function(){return this.cellObj.f||""}},{key:"getRiCi",value:function(){return(0,a.expr2xy)(this.celName).reverse()}},{key:"getCellObjForRendering",value:function(){return{v:this.cellObj.v,formulas:this.cellObj.f,text:this.cellObj.v.toString()}}},{key:"updateByCellObj",value:function(e){Object.assign(this.cellObj,e),this.formulaString=this.getFormulaString(),this.cellStatus=i.FORMULA_STATUS.created}},{key:"getCellProperty",value:function(e){return this.cellObj[e]}},{key:"isStructuralFormula",value:function(){return this.formulaString.startsWith("=")}},{key:"isFormulaValid",value:function(){return void 0!==this.formulaString}},{key:"isEmpty",value:function(){return void 0===this.cellObj||null===this.cellObj}},{key:"check_valid",value:function(){return"string"==typeof this.formulaString}},{key:"execFormula",value:function(){if(this.cellStatus===i.FORMULA_STATUS.solved)return this.cellObj.v;this.cellStatus=i.FORMULA_STATUS.working,this.workbookProxy.parseCalcCell(this).update_cell_value(),this.cellStatus=i.FORMULA_STATUS.solved}}])&&o(t.prototype,r),n&&o(t,n),e}();t.CalcCell=l},,,,function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(13)),o=(a=r(49))&&a.__esModule?a:{default:a};function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}t.UNIQUE=function(){for(var e=[],t=0;t<arguments.length;++t){for(var r=!1,n=arguments[t],a=0;a<e.length&&!(r=e[a]===n);++a);r||e.push(n)}return e},t.FLATTEN=i.flatten,t.ARGS2ARRAY=function(){return Array.prototype.slice.call(arguments,0)},t.REFERENCE=function(e,t){try{for(var r=t.split("."),n=e,a=0;a<r.length;++a){var i=r[a];if("]"===i[i.length-1]){var o=i.indexOf("["),l=i.substring(o+1,i.length-1);n=n[i.substring(0,o)][l]}else n=n[i]}return n}catch(e){}},t.JOIN=function(e,t){return e.join(t)},t.NUMBERS=function(){var e=i.flatten(arguments);return e.filter((function(e){return"number"==typeof e}))},t.NUMERAL=function(e,t){return(0,o.default)(e).format(t)}},function(e,t,r){"use strict";var n=r(2),a=r(50),i=s(r(32)),o=s(r(13)),l=s(r(97));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return/^[01]{1,10}$/.test(e)}function c(e){return e=(e=e.toString()).replace("I","i").replace("J","j")}t.BESSELI=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.besseli(e,t)},t.BESSELJ=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.besselj(e,t)},t.BESSELK=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.besselk(e,t)},t.BESSELY=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:l.default.bessely(e,t)},t.BIN2DEC=function(e){if(!u(e))return n.errorObj.ERROR_NUM;var t=parseInt(e,2),r=e.toString();return 10===r.length&&"1"===r.substring(0,1)?parseInt(r.substring(1),2)-512:t},t.BIN2HEX=function(e,t){if(!u(e))return n.errorObj.ERROR_NUM;var r=e.toString();if(10===r.length&&"1"===r.substring(0,1))return(0xfffffffe00+parseInt(r.substring(1),2)).toString(16);var a=parseInt(e,2).toString(16);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM},t.BIN2OCT=function(e,t){if(!u(e))return n.errorObj.ERROR_NUM;var r=e.toString();if(10===r.length&&"1"===r.substring(0,1))return(1073741312+parseInt(r.substring(1),2)).toString(8);var a=parseInt(e,2).toString(8);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM},t.BITAND=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0||t<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e||Math.floor(t)!==t?n.errorObj.ERROR_NUM:e>0xffffffffffff||t>0xffffffffffff?n.errorObj.ERROR_NUM:e&t},t.BITLSHIFT=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e?n.errorObj.ERROR_NUM:e>0xffffffffffff?n.errorObj.ERROR_NUM:Math.abs(t)>53?n.errorObj.ERROR_NUM:t>=0?e<<t:e>>-t},t.BITOR=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0||t<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e||Math.floor(t)!==t?n.errorObj.ERROR_NUM:e>0xffffffffffff||t>0xffffffffffff?n.errorObj.ERROR_NUM:e|t},t.BITRSHIFT=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e?n.errorObj.ERROR_NUM:e>0xffffffffffff?n.errorObj.ERROR_NUM:Math.abs(t)>53?n.errorObj.ERROR_NUM:t>=0?e>>t:e<<-t},t.BITXOR=function(e,t){return e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e<0||t<0?n.errorObj.ERROR_NUM:Math.floor(e)!==e||Math.floor(t)!==t?n.errorObj.ERROR_NUM:e>0xffffffffffff||t>0xffffffffffff?n.errorObj.ERROR_NUM:e^t},t.COMPLEX=function(e,t,r){if(e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t))return n.errorObj.ERROR_VALUE;if("i"!==(r=(r=void 0===r?"i":r).toLowerCase())&&"j"!==r)return n.errorObj.ERROR_VALUE;if(0===e&&0===t)return 0;if(0===e)return 1===t?r:t.toString()+r;if(0===t)return e.toString();var a=t>0?"+":"";return e.toString()+a+(1===t?r:t.toString()+r)},t.CONVERT=function(e,t,r){if((e=o.default.parseNumber(e))instanceof Error)return e;for(var a,i=[["a.u. of action","?",null,"action",!1,!1,105457168181818e-48],["a.u. of charge","e",null,"electric_charge",!1,!1,160217653141414e-33],["a.u. of energy","Eh",null,"energy",!1,!1,435974417757576e-32],["a.u. of length","a?",null,"length",!1,!1,529177210818182e-25],["a.u. of mass","m?",null,"mass",!1,!1,910938261616162e-45],["a.u. of time","?/Eh",null,"time",!1,!1,241888432650516e-31],["admiralty knot","admkn",null,"speed",!1,!0,.514773333],["ampere","A",null,"electric_current",!0,!1,1],["ampere per meter","A/m",null,"magnetic_field_intensity",!0,!1,1],["ångström","Å",["ang"],"length",!1,!0,1e-10],["are","ar",null,"area",!1,!0,100],["astronomical unit","ua",null,"length",!1,!1,149597870691667e-25],["bar","bar",null,"pressure",!1,!1,1e5],["barn","b",null,"area",!1,!1,1e-28],["becquerel","Bq",null,"radioactivity",!0,!1,1],["bit","bit",["b"],"information",!1,!0,1],["btu","BTU",["btu"],"energy",!1,!0,1055.05585262],["byte","byte",null,"information",!1,!0,8],["candela","cd",null,"luminous_intensity",!0,!1,1],["candela per square metre","cd/m?",null,"luminance",!0,!1,1],["coulomb","C",null,"electric_charge",!0,!1,1],["cubic ångström","ang3",["ang^3"],"volume",!1,!0,1e-30],["cubic foot","ft3",["ft^3"],"volume",!1,!0,.028316846592],["cubic inch","in3",["in^3"],"volume",!1,!0,16387064e-12],["cubic light-year","ly3",["ly^3"],"volume",!1,!0,846786664623715e-61],["cubic metre","m?",null,"volume",!0,!0,1],["cubic mile","mi3",["mi^3"],"volume",!1,!0,4168181825.44058],["cubic nautical mile","Nmi3",["Nmi^3"],"volume",!1,!0,6352182208],["cubic Pica","Pica3",["Picapt3","Pica^3","Picapt^3"],"volume",!1,!0,7.58660370370369e-8],["cubic yard","yd3",["yd^3"],"volume",!1,!0,.764554857984],["cup","cup",null,"volume",!1,!0,.0002365882365],["dalton","Da",["u"],"mass",!1,!1,166053886282828e-41],["day","d",["day"],"time",!1,!0,86400],["degree","°",null,"angle",!1,!1,.0174532925199433],["degrees Rankine","Rank",null,"temperature",!1,!0,.555555555555556],["dyne","dyn",["dy"],"force",!1,!0,1e-5],["electronvolt","eV",["ev"],"energy",!1,!0,1.60217656514141],["ell","ell",null,"length",!1,!0,1.143],["erg","erg",["e"],"energy",!1,!0,1e-7],["farad","F",null,"electric_capacitance",!0,!1,1],["fluid ounce","oz",null,"volume",!1,!0,295735295625e-16],["foot","ft",null,"length",!1,!0,.3048],["foot-pound","flb",null,"energy",!1,!0,1.3558179483314],["gal","Gal",null,"acceleration",!1,!1,.01],["gallon","gal",null,"volume",!1,!0,.003785411784],["gauss","G",["ga"],"magnetic_flux_density",!1,!0,1],["grain","grain",null,"mass",!1,!0,647989e-10],["gram","g",null,"mass",!1,!0,.001],["gray","Gy",null,"absorbed_dose",!0,!1,1],["gross registered ton","GRT",["regton"],"volume",!1,!0,2.8316846592],["hectare","ha",null,"area",!1,!0,1e4],["henry","H",null,"inductance",!0,!1,1],["hertz","Hz",null,"frequency",!0,!1,1],["horsepower","HP",["h"],"power",!1,!0,745.69987158227],["horsepower-hour","HPh",["hh","hph"],"energy",!1,!0,2684519.538],["hour","h",["hr"],"time",!1,!0,3600],["imperial gallon (U.K.)","uk_gal",null,"volume",!1,!0,.00454609],["imperial hundredweight","lcwt",["uk_cwt","hweight"],"mass",!1,!0,50.802345],["imperial quart (U.K)","uk_qt",null,"volume",!1,!0,.0011365225],["imperial ton","brton",["uk_ton","LTON"],"mass",!1,!0,1016.046909],["inch","in",null,"length",!1,!0,.0254],["international acre","uk_acre",null,"area",!1,!0,4046.8564224],["IT calorie","cal",null,"energy",!1,!0,4.1868],["joule","J",null,"energy",!0,!0,1],["katal","kat",null,"catalytic_activity",!0,!1,1],["kelvin","K",["kel"],"temperature",!0,!0,1],["kilogram","kg",null,"mass",!0,!0,1],["knot","kn",null,"speed",!1,!0,.514444444444444],["light-year","ly",null,"length",!1,!0,9460730472580800],["litre","L",["l","lt"],"volume",!1,!0,.001],["lumen","lm",null,"luminous_flux",!0,!1,1],["lux","lx",null,"illuminance",!0,!1,1],["maxwell","Mx",null,"magnetic_flux",!1,!1,1e-18],["measurement ton","MTON",null,"volume",!1,!0,1.13267386368],["meter per hour","m/h",["m/hr"],"speed",!1,!0,.00027777777777778],["meter per second","m/s",["m/sec"],"speed",!0,!0,1],["meter per second squared","m?s??",null,"acceleration",!0,!1,1],["parsec","pc",["parsec"],"length",!1,!0,0x6da012f958ee1c],["meter squared per second","m?/s",null,"kinematic_viscosity",!0,!1,1],["metre","m",null,"length",!0,!0,1],["miles per hour","mph",null,"speed",!1,!0,.44704],["millimetre of mercury","mmHg",null,"pressure",!1,!1,133.322],["minute","?",null,"angle",!1,!1,.000290888208665722],["minute","min",["mn"],"time",!1,!0,60],["modern teaspoon","tspm",null,"volume",!1,!0,5e-6],["mole","mol",null,"amount_of_substance",!0,!1,1],["morgen","Morgen",null,"area",!1,!0,2500],["n.u. of action","?",null,"action",!1,!1,105457168181818e-48],["n.u. of mass","m?",null,"mass",!1,!1,910938261616162e-45],["n.u. of speed","c?",null,"speed",!1,!1,299792458],["n.u. of time","?/(me?c??)",null,"time",!1,!1,128808866778687e-35],["nautical mile","M",["Nmi"],"length",!1,!0,1],["newton","N",null,"force",!0,!0,1],["œrsted","Oe ",null,"magnetic_field_intensity",!1,!1,79.5774715459477],["ohm","Ω",null,"electric_resistance",!0,!1,1],["ounce mass","ozm",null,"mass",!1,!0,.028349523125],["pascal","Pa",null,"pressure",!0,!1,1],["pascal second","Pa?s",null,"dynamic_viscosity",!0,!1,1],["pferdestärke","PS",null,"power",!1,!0,735.49875],["phot","ph",null,"illuminance",!1,!1,1e-4],["pica (1/6 inch)","pica",null,"length",!1,!0,.00035277777777778],["pica (1/72 inch)","Pica",["Picapt"],"length",!1,!0,.00423333333333333],["poise","P",null,"dynamic_viscosity",!1,!1,.1],["pond","pond",null,"force",!1,!0,.00980665],["pound force","lbf",null,"force",!1,!0,4.4482216152605],["pound mass","lbm",null,"mass",!1,!0,.45359237],["quart","qt",null,"volume",!1,!0,.000946352946],["radian","rad",null,"angle",!0,!1,1],["second","?",null,"angle",!1,!1,484813681109536e-20],["second","s",["sec"],"time",!0,!0,1],["short hundredweight","cwt",["shweight"],"mass",!1,!0,45.359237],["siemens","S",null,"electrical_conductance",!0,!1,1],["sievert","Sv",null,"equivalent_dose",!0,!1,1],["slug","sg",null,"mass",!1,!0,14.59390294],["square ångström","ang2",["ang^2"],"area",!1,!0,1e-20],["square foot","ft2",["ft^2"],"area",!1,!0,.09290304],["square inch","in2",["in^2"],"area",!1,!0,64516e-8],["square light-year","ly2",["ly^2"],"area",!1,!0,895054210748189e17],["square meter","m?",null,"area",!0,!0,1],["square mile","mi2",["mi^2"],"area",!1,!0,2589988.110336],["square nautical mile","Nmi2",["Nmi^2"],"area",!1,!0,3429904],["square Pica","Pica2",["Picapt2","Pica^2","Picapt^2"],"area",!1,!0,1792111111111e-17],["square yard","yd2",["yd^2"],"area",!1,!0,.83612736],["statute mile","mi",null,"length",!1,!0,1609.344],["steradian","sr",null,"solid_angle",!0,!1,1],["stilb","sb",null,"luminance",!1,!1,1e-4],["stokes","St",null,"kinematic_viscosity",!1,!1,1e-4],["stone","stone",null,"mass",!1,!0,6.35029318],["tablespoon","tbs",null,"volume",!1,!0,147868e-10],["teaspoon","tsp",null,"volume",!1,!0,492892e-11],["tesla","T",null,"magnetic_flux_density",!0,!0,1],["thermodynamic calorie","c",null,"energy",!1,!0,4.184],["ton","ton",null,"mass",!1,!0,907.18474],["tonne","t",null,"mass",!1,!1,1e3],["U.K. pint","uk_pt",null,"volume",!1,!0,.00056826125],["U.S. bushel","bushel",null,"volume",!1,!0,.03523907],["U.S. oil barrel","barrel",null,"volume",!1,!0,.158987295],["U.S. pint","pt",["us_pt"],"volume",!1,!0,.000473176473],["U.S. survey mile","survey_mi",null,"length",!1,!0,1609.347219],["U.S. survey/statute acre","us_acre",null,"area",!1,!0,4046.87261],["volt","V",null,"voltage",!0,!1,1],["watt","W",null,"power",!0,!0,1],["watt-hour","Wh",["wh"],"energy",!1,!0,3600],["weber","Wb",null,"magnetic_flux",!0,!1,1],["yard","yd",null,"length",!1,!0,.9144],["year","yr",null,"time",!1,!0,31557600]],l={Yi:["yobi",80,12089258196146292e8,"Yi","yotta"],Zi:["zebi",70,11805916207174113e5,"Zi","zetta"],Ei:["exbi",60,0x1000000000000000,"Ei","exa"],Pi:["pebi",50,0x4000000000000,"Pi","peta"],Ti:["tebi",40,1099511627776,"Ti","tera"],Gi:["gibi",30,1073741824,"Gi","giga"],Mi:["mebi",20,1048576,"Mi","mega"],ki:["kibi",10,1024,"ki","kilo"]},s={Y:["yotta",1e24,"Y"],Z:["zetta",1e21,"Z"],E:["exa",1e18,"E"],P:["peta",1e15,"P"],T:["tera",1e12,"T"],G:["giga",1e9,"G"],M:["mega",1e6,"M"],k:["kilo",1e3,"k"],h:["hecto",100,"h"],e:["dekao",10,"e"],d:["deci",.1,"d"],c:["centi",.01,"c"],m:["milli",.001,"m"],u:["micro",1e-6,"u"],n:["nano",1e-9,"n"],p:["pico",1e-12,"p"],f:["femto",1e-15,"f"],a:["atto",1e-18,"a"],z:["zepto",1e-21,"z"],y:["yocto",1e-24,"y"]},u=null,c=null,d=t.toLowerCase(),f=r.toLowerCase(),m=1,h=1,v=0;v<i.length;v++)a=null===i[v][2]?[]:i[v][2],(i[v][1].toLowerCase()===d||a.indexOf(t)>=0)&&(u=i[v]),(i[v][1].toLowerCase()===f||a.indexOf(r)>=0)&&(c=i[v]);if(null===u){var p=l[t.substring(0,2)],y=s[t.substring(0,1)];"da"===t.substring(0,2)&&(y=["dekao",10,"da"]),p?(m=p[2],d=t.substring(2)):y&&(m=y[1],d=t.substring(y[2].length));for(var g=0;g<i.length;g++)a=null===i[g][2]?[]:i[g][2],(i[g][1]===d||a.indexOf(d)>=0)&&(u=i[g])}if(null===c){var b=l[r.substring(0,2)],E=s[r.substring(0,1)];"da"===r.substring(0,2)&&(E=["dekao",10,"da"]),b?(h=b[2],f=r.substring(2)):E&&(h=E[1],f=r.substring(E[2].length));for(var R=0;R<i.length;R++)a=null===i[R][2]?[]:i[R][2],(i[R][1]===f||a.indexOf(f)>=0)&&(c=i[R])}return null===u||null===c?n.errorObj.ERROR_NA:u[3]!==c[3]?"F"==t&&"C"==r?(e-32)/1.8:"C"==t&&"F"==r?1.8*e+32:n.errorObj.ERROR_NA:e*u[6]*m/(c[6]*h)},t.DEC2BIN=function(e,t){if((e=o.default.parseNumber(e))instanceof Error)return e;if(!/^-?[0-9]{1,3}$/.test(e)||e<-512||e>511)return n.errorObj.ERROR_NUM;if(e<0)return"1"+i.default.REPT("0",9-(512+e).toString(2).length)+(512+e).toString(2);var r=parseInt(e,10).toString(2);return void 0===t?r:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=r.length?i.default.REPT("0",t-r.length)+r:n.errorObj.ERROR_NUM},t.DEC2HEX=function(e,t){if((e=o.default.parseNumber(e))instanceof Error)return e;if(!/^-?[0-9]{1,12}$/.test(e)||e<-549755813888||e>549755813887)return n.errorObj.ERROR_NUM;if(e<0)return(1099511627776+e).toString(16);var r=parseInt(e,10).toString(16);return void 0===t?r:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=r.length?i.default.REPT("0",t-r.length)+r:n.errorObj.ERROR_NUM},t.DEC2OCT=function(e,t){if((e=o.default.parseNumber(e))instanceof Error)return e;if(!/^-?[0-9]{1,9}$/.test(e)||e<-536870912||e>536870911)return n.errorObj.ERROR_NUM;if(e<0)return(1073741824+e).toString(8);var r=parseInt(e,10).toString(8);return void 0===t?r:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=r.length?i.default.REPT("0",t-r.length)+r:n.errorObj.ERROR_NUM},t.DELTA=function(e,t){return t=void 0===t?0:t,e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:e===t?1:0},t.ERF=function(e,t){return t=void 0===t?0:t,e=o.default.parseNumber(e),t=o.default.parseNumber(t),o.default.anyIsError(e,t)?n.errorObj.ERROR_VALUE:a.jStat.erf(e)},t.ERF.PRECISE=function(e){return isNaN(e)?n.errorObj.ERROR_VALUE:window.jsSpreadsheet.AllFormulas.ERF(e)},t.ERFC=function(e){return isNaN(e)?n.errorObj.ERROR_VALUE:a.jStat.erfc(e)},t.ERFC.PRECISE=function(e){return isNaN(e)?n.errorObj.ERROR_VALUE:window.jsSpreadsheet.AllFormulas.ERFC(e)},t.GESTEP=function(e,t){return t=t||0,e=o.default.parseNumber(e),o.default.anyIsError(t,e)?e:e>=t?1:0},t.HEX2BIN=function(e,t){if(!/^[0-9A-Fa-f]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=10===e.length&&"f"===e.substring(0,1).toLowerCase(),a=r?parseInt(e,16)-1099511627776:parseInt(e,16);if(a<-512||a>511)return n.errorObj.ERROR_NUM;if(r)return"1"+i.default.REPT("0",9-(512+a).toString(2).length)+(512+a).toString(2);var o=a.toString(2);return void 0===t?o:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=o.length?i.default.REPT("0",t-o.length)+o:n.errorObj.ERROR_NUM},t.HEX2DEC=function(e){if(!/^[0-9A-Fa-f]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var t=parseInt(e,16);return t>=549755813888?t-1099511627776:t},t.HEX2OCT=function(e,t){if(!/^[0-9A-Fa-f]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=parseInt(e,16);if(r>536870911&&r<0xffe0000000)return n.errorObj.ERROR_NUM;if(r>=0xffe0000000)return(r-0xffc0000000).toString(8);var a=r.toString(8);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM},t.ROWS=function(e){return"string"==typeof e&&(e=o.default.strToMatrix(e)),e instanceof Array?0===e.length?0:a.jStat.rows(e):n.errorObj.ERROR_VALUE},t.IMABS=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:Math.sqrt(Math.pow(r,2)+Math.pow(a,2))},t.IMAGINARY=function(e){if(void 0===(e=c(e))||!0===e||!1===e)return n.errorObj.ERROR_VALUE;if(0===e||"0"===e)return 0;if(["i","j"].indexOf(e)>=0)return 1;var t=(e=e.replace("+i","+1i").replace("-i","-1i").replace("+j","+1j").replace("-j","-1j")).indexOf("+"),r=e.indexOf("-");0===t&&(t=e.indexOf("+",1)),0===r&&(r=e.indexOf("-",1));var a=e.substring(e.length-1,e.length),i="i"===a||"j"===a;return t>=0||r>=0?i?t>=0?isNaN(e.substring(0,t))||isNaN(e.substring(t+1,e.length-1))?n.errorObj.ERROR_NUM:Number(e.substring(t+1,e.length-1)):isNaN(e.substring(0,r))||isNaN(e.substring(r+1,e.length-1))?n.errorObj.ERROR_NUM:-Number(e.substring(r+1,e.length-1)):n.errorObj.ERROR_NUM:i?isNaN(e.substring(0,e.length-1))?n.errorObj.ERROR_NUM:e.substring(0,e.length-1):isNaN(e)?n.errorObj.ERROR_NUM:0},t.IMARGUMENT=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:0===r&&0===a?n.errorObj.ERROR_DIV0:0===r&&a>0?Math.PI/2:0===r&&a<0?-Math.PI/2:0===a&&r>0?0:0===a&&r<0?-Math.PI:r>0?Math.atan(a/r):r<0&&a>=0?Math.atan(a/r)+Math.PI:Math.atan(a/r)-Math.PI},t.IMCONJUGATE=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",0!==a?t.COMPLEX(r,-a,i):e},t.IMCOS=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.cos(r)*(Math.exp(a)+Math.exp(-a))/2,-Math.sin(r)*(Math.exp(a)-Math.exp(-a))/2,i)},t.IMCOSH=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.cos(a)*(Math.exp(r)+Math.exp(-r))/2,Math.sin(a)*(Math.exp(r)-Math.exp(-r))/2,i)},t.IMCOT=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV(t.IMCOS(e),t.IMSIN(e))},t.IMDIV=function(e,r){var a=t.IMREAL(e),i=t.IMAGINARY(e),l=t.IMREAL(r),s=t.IMAGINARY(r);if(o.default.anyIsError(a,i,l,s))return n.errorObj.ERROR_VALUE;var u=e.substring(e.length-1),c=r.substring(r.length-1),d="i";if("j"===u?d="j":"j"===c&&(d="j"),0===l&&0===s)return n.errorObj.ERROR_NUM;var f=l*l+s*s;return t.COMPLEX((a*l+i*s)/f,(i*l-a*s)/f,d)},t.IMEXP=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);i="i"===i||"j"===i?i:"i";var l=Math.exp(r);return t.COMPLEX(l*Math.cos(a),l*Math.sin(a),i)},t.IMLN=function(e){var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.log(Math.sqrt(r*r+a*a)),Math.atan(a/r),i)},t.IMLOG10=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.log(Math.sqrt(r*r+a*a))/Math.log(10),Math.atan(a/r)/Math.log(10),i)},t.IMLOG2=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.log(Math.sqrt(r*r+a*a))/Math.log(2),Math.atan(a/r)/Math.log(2),i)},t.IMPOWER=function(e,r){e=c(e),r=o.default.parseNumber(r);var a=t.IMREAL(e),i=t.IMAGINARY(e);if(o.default.anyIsError(r,a,i))return n.errorObj.ERROR_VALUE;var l=e.substring(e.length-1);l="i"===l||"j"===l?l:"i";var s=Math.pow(t.IMABS(e),r),u=t.IMARGUMENT(e);return t.COMPLEX(s*Math.cos(r*u),s*Math.sin(r*u),l)},t.IMPRODUCT=function(){for(var e=arguments[0],r=1;r<arguments.length;r++){var a=t.IMREAL(e),i=t.IMAGINARY(e),l=t.IMREAL(arguments[r]),s=t.IMAGINARY(arguments[r]);if(o.default.anyIsError(a,i,l,s))return n.errorObj.ERROR_VALUE;e=t.COMPLEX(a*l-i*s,a*s+i*l)}return e},t.IMREAL=function(e){if(void 0===(e=c(e))||!0===e||!1===e)return n.errorObj.ERROR_VALUE;if(0===e||"0"===e)return 0;if(["i","+i","1i","+1i","-i","-1i","j","+j","1j","+1j","-j","-1j"].indexOf(e)>=0)return 0;var t=e.indexOf("+"),r=e.indexOf("-");0===t&&(t=e.indexOf("+",1)),0===r&&(r=e.indexOf("-",1));var a=e.substring(e.length-1,e.length),i="i"===a||"j"===a;return t>=0||r>=0?i?t>=0?isNaN(e.substring(0,t))||isNaN(e.substring(t+1,e.length-1))?n.errorObj.ERROR_NUM:Number(e.substring(0,t)):isNaN(e.substring(0,r))||isNaN(e.substring(r+1,e.length-1))?n.errorObj.ERROR_NUM:Number(e.substring(0,r)):n.errorObj.ERROR_NUM:i?isNaN(e.substring(0,e.length-1))?n.errorObj.ERROR_NUM:0:isNaN(e)?n.errorObj.ERROR_NUM:e},t.IMSEC=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV("1",t.IMCOS(e))},t.IMSECH=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV("1",t.IMCOSH(e))},t.IMSIN=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.sin(r)*(Math.exp(a)+Math.exp(-a))/2,Math.cos(r)*(Math.exp(a)-Math.exp(-a))/2,i)},t.IMSINH=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);return i="i"===i||"j"===i?i:"i",t.COMPLEX(Math.cos(a)*(Math.exp(r)-Math.exp(-r))/2,Math.sin(a)*(Math.exp(r)+Math.exp(-r))/2,i)},t.IMSQRT=function(e){e=c(e);var r=t.IMREAL(e),a=t.IMAGINARY(e);if(o.default.anyIsError(r,a))return n.errorObj.ERROR_VALUE;var i=e.substring(e.length-1);i="i"===i||"j"===i?i:"i";var l=Math.sqrt(t.IMABS(e)),s=t.IMARGUMENT(e);return t.COMPLEX(l*Math.cos(s/2),l*Math.sin(s/2),i)},t.IMCSC=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_NUM:t.IMDIV("1",t.IMSIN(e))},t.IMCSCH=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_NUM:t.IMDIV("1",t.IMSINH(e))},t.IMSUB=function(e,r){e=c(e),r=c(r);var a=t.IMREAL(e),i=t.IMAGINARY(e),l=t.IMREAL(r),s=t.IMAGINARY(r);if(o.default.anyIsError(a,i,l,s))return n.errorObj.ERROR_VALUE;var u=e.substring(e.length-1),d=r.substring(r.length-1),f="i";return"j"===u?f="j":"j"===d&&(f="j"),t.COMPLEX(a-l,i-s,f)},t.IMSUM=function(e){e=c(e);for(var r=o.default.flatten(arguments),a=r[0],i=1;i<r.length;i++){var l=t.IMREAL(a),s=t.IMAGINARY(a),u=t.IMREAL(r[i]),d=t.IMAGINARY(r[i]);if(o.default.anyIsError(l,s,u,d))return n.errorObj.ERROR_VALUE;a=t.COMPLEX(l+u,s+d)}return a},t.IMTAN=function(e){if(!0===(e=c(e))||!1===e)return n.errorObj.ERROR_VALUE;var r=t.IMREAL(e),a=t.IMAGINARY(e);return o.default.anyIsError(r,a)?n.errorObj.ERROR_VALUE:t.IMDIV(t.IMSIN(e),t.IMCOS(e))},t.OCT2BIN=function(e,t){if(!/^[0-7]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=10===e.length&&"7"===e.substring(0,1),a=r?parseInt(e,8)-1073741824:parseInt(e,8);if(r)return"1"+i.default.REPT("0",9-(512+a).toString(2).length)+(512+a).toString(2);var o=a.toString(2);return o.length>=10?o.slice(o.length-10,o.length):void 0===t?o:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=o.length?i.default.REPT("0",t-o.length)+o:n.errorObj.ERROR_NUM},t.OCT2DEC=function(e){if(!/^[0-7]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var t=parseInt(e,8);return t>=536870912?t-1073741824:t},t.OCT2HEX=function(e,t){if(!/^[0-7]{1,10}$/.test(e))return n.errorObj.ERROR_NUM;var r=parseInt(e,8);if(r>=536870912)return"ff"+(r+3221225472).toString(16);var a=r.toString(16);return void 0===t?a:isNaN(t)?n.errorObj.ERROR_VALUE:t<0?n.errorObj.ERROR_NUM:(t=Math.floor(t))>=a.length?i.default.REPT("0",t-a.length)+a:n.errorObj.ERROR_NUM}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSanitizedSheetName=function(e){var t=e.match(/^'(.*)'$/);return t?t[1]:e}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.ColIndexProxy=void 0;var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"number"==typeof t?(this.colNum=t,this.colStr=this.colNum2Str()):(this.colStr=t,this.colNum=this.colStr2Num())}var t,r,a;return t=e,(r=[{key:"colNum2Str",value:function(){for(var e,t=this.colNum+1,r="",n=10;t>0&&n--;)e=(t-1)%26,r=String.fromCharCode(e+65)+r,t=(t-e-1)/26;return r}},{key:"colStr2Num",value:function(){for(var e=0,t=this.colStr.replace(/[0-9]+$/,""),r=t.length;r--;)e+=Math.pow(26,t.length-r-1)*(t.charCodeAt(r)-64);return e-1}}])&&n(t.prototype,r),a&&n(t,a),e}();t.ColIndexProxy=a},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.RefValue=void 0;var a=r(53),i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(2)),o=r(7);function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name="RefValue",this.str_expression=t,this.calcCell=r}var t,r,n;return t=e,(r=[{key:"getRefCalcCell",value:function(){var e,t,r,n=this.calcCell,i=this.str_expression;if(-1!==i.indexOf("!")){var o=i.split("!");t=(0,a.getSanitizedSheetName)(o[0]),e=n.workbookProxy.getSheetByName(t),r=o[1]}else e=n.calcSheet,t=n.calcSheet.name,r=i;if(!e)throw Error("Sheet "+t+" not found.");return this.calcCell.workbookProxy.getCellByName(t,r)}},{key:"solveExpression",value:function(){this.calcCell;var e=this.getRefCalcCell();if(!e.cellObj)return null;if(e.cellStatus===o.FORMULA_STATUS.created){if(e.execFormula(),"e"===e.cellObj.t)throw console.log("ref is an error at",e),new Error(e.cellObj.w);return e.cellObj.v}if(e.cellStatus===o.FORMULA_STATUS.working)throw new Error(i.ERROR_CIRCULAR);if(e.cellStatus===o.FORMULA_STATUS.solved){if("e"===e.cellObj.t)throw console.log("ref is an error after cellFormulaProxy eval"),new Error(e.cellObj.w);return e.cellObj.v}}}])&&s(t.prototype,r),n&&s(t,n),e}();t.RefValue=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RawValueParser=t.Str2NumberParser=void 0;var n=r(7),a=r(2);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}var s=function(){function e(t){i(this,e),this.toParseStr=t}return l(e,[{key:"getIntPattern",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1;return console.assert(Number.isInteger(t)),e=t>=0?"^0{0,".concat(t,"}[1-9]\\d*$"):n.ALL_DIGIT_PATTERN_STR,new RegExp(e)}},{key:"isIntWithCommaPattern",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.toParseStr;return n.INT_WITH_COMMA_PATTERN.test(e)}},{key:"isFloatWithCommaPattern",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.toParseStr;return n.FLOAT_WITH_COMMA_PATTERN.test(e)}},{key:"isIntPattern",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.toParseStr;return this.getIntPattern(e).test(t)}},{key:"isDecimalPart",value:function(e){return""!==e&&this.isIntPattern(-1,e)}},{key:"isFloatPattern",value:function(e){return n.CLEAN_FLOAT_PATTERN.test(e)}},{key:"parseAllDigitStr2Int",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.toParseStr;return"0"===t?0:this.isIntWithCommaPattern(t)?parseInt(t.replace(",","")):this.isIntPattern(e)?parseInt(t):a.PARSE_FAIL_OBJ}},{key:"parseScientificNotion2Float",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.toParseStr,t=e.split(n.E_PATTERN);if(2!==t.length)return a.PARSE_FAIL_OBJ;if(this.isFloatWithCommaPattern(t[0]))e=e.replace(/,/g,"");else if(!1===this.isFloatPattern(t[0]))return a.PARSE_FAIL_OBJ;var r=t[1];return["+","-"].indexOf(r[0])>-1&&(r=r.slice(1)),!1===this.isIntPattern(-1,r)?a.PARSE_FAIL_OBJ:parseFloat(e)}},{key:"parseStr2Float",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.toParseStr,r=t.split(".");if(r.length>2)return a.PARSE_FAIL_OBJ;if(this.isFloatWithCommaPattern(r[0]))r[0]=r[0].replace(/,/g,"");else if(!1===this.isIntPattern(e,r[0]))return a.PARSE_FAIL_OBJ;return 2===r.length&&!1===this.isDecimalPart(r[1])?a.PARSE_FAIL_OBJ:parseFloat(t)}},{key:"easyParse2Number",value:function(){var e=this.parseScientificNotion2Float();return e.msg!==a.PARSE_FAIL?e:(e=this.parseAllDigitStr2Int()).msg!==a.PARSE_FAIL?e:e=this.parseStr2Float()}}]),e}();t.Str2NumberParser=s;var u=function(){function e(t){i(this,e),this.toParseStr=t.trim()}return l(e,[{key:"parse2String",value:function(){var e=this.toParseStr.slice(1,-1).replace('""','"');return e.includes('"')?a.PARSE_FAIL:e}},{key:"parse2NumberOrString",value:function(){return'"'===this.toParseStr[0]&&'"'===this.toParseStr[this.toParseStr.length-1]?this.parse2String:new s(this.toParseStr).easyParse2Number()}}]),e}();t.RawValueParser=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.opAdd=l,t.opSubtract=s,t.opMultiply=u,t.opDivide=c,t.opPower=d,t.opIsLessThan=m,t.opIsGreaterThan=v,t.opIsGreaterOrEqual=p,t.opIsLessOrEqual=y,t.opIsNotEqual=g,t.opIsEqual=t.opJoinString=t.TwoArgOperatorColl=void 0;r(7);var n=r(23),a=r(2);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.operatorObj={plus:"+",dash:"-",star:"*",slash:"/",caret:"^",ampersand:"&",lessThen:"<",greaterThen:">",equal:"=",notEqual:"<>",greaterEqual:">=",lessEqual:"<="},this.operatorFunOBj={"+":l,"-":s,"*":u,"/":c,"^":d,"&":f,"<":m,"=":h,">":v,"<=":y,">=":p,"<>":g}}var t,r,o;return t=e,(r=[{key:"isTwoArgOperator",value:function(e){return Object.values(this.operatorObj).includes(e)}},{key:"getFunc",value:function(e){var t=this;return!1===this.isTwoArgOperator(e)?new Error(a.ERROR_SYNTAX):function(r,n){return t.exeOperator(r,n,e)}}},{key:"exeOperator",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"+",a=this.operatorFunOBj[r];return new n.UserFnExecutor(a,[e,t]).solveExpression()}}])&&i(t.prototype,r),o&&i(t,o),e}();function l(e,t){return e+t}function s(e,t){return e-t}function u(e,t){return e*t}function c(e,t){return 0===t?new Error(a.ERROR_DIV0):e/t}function d(e,t){return Math.pow(e,t)}t.TwoArgOperatorColl=o;var f=new n.StringExpFunction((function(e,t){return String(e)+String(t)}));function m(e,t){return e<t}t.opJoinString=f;var h=new n.NotConvertEmptyExpFunction((function(e,t){return"number"==typeof e&&"number"==typeof t?Math.abs(e-t)<.001:e.cellVTypeName===t.cellVTypeName===n.CellVTypeObj.CellVEmpty||e===t}));function v(e,t){return e>t}function p(e,t){return e>=t}function y(e,t){return e<=t}function g(e,t){return!1===h(e,t)}t.opIsEqual=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NumberParser=t.MoneyParser=t.DateTimeParser=t.BoolParser=t.ForceString=void 0;var n=r(7),a=r(2),i=r(56);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),e}var u=function(){function e(t,r){o(this,e),this.strToParse=r,this.calcCell=t}return s(e,[{key:"parseString",value:function(){return this.strToParse.startsWith(n.FORCE_STR_MARK)?this.strToParse.slice(1):a.PARSE_FAIL_OBJ}}]),e}();t.ForceString=u;var c=function(){function e(t,r){o(this,e),this.strToParse=r,this.calcCell=t}return s(e,[{key:"parseString",value:function(){var e=this.strToParse.toUpperCase();return"TRUE"===e||"FALSE"!==e&&a.PARSE_FAIL_OBJ}}]),e}();t.BoolParser=c;var d=function(){function e(t,r){o(this,e),this.strToParse=r,this.calcCell=t}return s(e,[{key:"convertStrToDate",value:function(){var e,t=this.strToParse.indexOf(n.MARK_OBJ.colon);if(t>0){var r=this.strToParse.slice(0,t).lastIndexOf(n.MARK_OBJ.space);if(r>0){if((e=this.convertDateStrToDate(this.strToParse.slice(0,r))).msg===a.PARSE_FAIL)return a.PARSE_FAIL_OBJ;var i=this.dealTimeString(e.toLocaleDateString(),this.strToParse.slice(r+1));return i.msg===a.PARSE_FAIL?a.PARSE_FAIL_OBJ:i}var o=this.dealTimeString(n.d18991230STR,this.strToParse.slice(r+1));return o.msg===a.PARSE_FAIL?a.PARSE_FAIL_OBJ:o}return(e=this.convertDateStrToDate(this.strToParse.slice(0,void 0))).msg===a.PARSE_FAIL?a.PARSE_FAIL_OBJ:e}},{key:"isValidTime",value:function(e){return/^\d+:\d+(:\d+(.\d+)?)?$/.test(e)}},{key:"isSimpleForm",value:function(e){return/^\d+[-/]\d+([-/]\d+)?$/.test(e)}},{key:"isNianYueRi",value:function(e){return/^\d+年\d+月(\d+日)?$/.test(e)}},{key:"yearStr2Int",value:function(e){var t=parseInt(e);return t>=100&&t<1900||t>=1e4?a.PARSE_FAIL_OBJ:t}},{key:"monthStr2Int",value:function(e){var t=parseInt(e);return t>=1&&t<=12?t:a.PARSE_FAIL_OBJ}},{key:"convertDateStrToDate",value:function(e){var t,r=e.replace(/\s+/g,"");if(this.isSimpleForm(r))t=r.split(/[-/]/);else{if(!1===this.isNianYueRi(r))return a.PARSE_FAIL_OBJ;t=r.split(/[年月日]/)}var n=this.yearStr2Int(t[0]);if(n.msg===a.PARSE_FAIL)return a.PARSE_FAIL_OBJ;var i,o=this.monthStr2Int(t[1]);if(o.msg===a.PARSE_FAIL)return a.PARSE_FAIL_OBJ;i=4===t.length?parseInt(t[2]):1;var l=new Date(n,o-1,i);return isNaN(l)?a.PARSE_FAIL_OBJ:l}},{key:"dealTimeString",value:function(e,t){var r=t.replace(/\s+/g,"");if(!1===this.isValidTime(r))return a.PARSE_FAIL_OBJ;var n=new Date(e+" "+t);return isNaN(n)?a.PARSE_FAIL_OBJ:n}},{key:"parseString",value:function(){return this.convertStrToDate()}}]),e}();t.DateTimeParser=d;var f=function(){function e(t,r){o(this,e),this.strToParse=r,this.calcCell=t}return s(e,[{key:"isStartWithMoneyMark",value:function(){return this.strToParse.startsWith(n.MONEY_UNIT_OBJ.dollar)}},{key:"getStrToParseAsNum",value:function(){return this.strToParse.slice(1).trim()}},{key:"parseString",value:function(){if(!1===this.isStartWithMoneyMark())return a.PARSE_FAIL_OBJ;var e=this.getStrToParseAsNum();return 0===e.length?a.PARSE_FAIL_OBJ:new i.Str2NumberParser(e).easyParse2Number()}}]),e}();t.MoneyParser=f;var m=function(){function e(t,r){o(this,e),this.strToParse=r,this.calcCell=t}return s(e,[{key:"parseString",value:function(){var e=this.strToParse.trim(),t=1;e.endsWith("%")&&(e=e.slice(0,-1).trim(),t=.01);var r=new i.Str2NumberParser(e).easyParse2Number();return r.msg!==a.PARSE_FAIL?r*t:a.PARSE_FAIL_OBJ}}]),e}();t.NumberParser=m},,function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(112),i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.formula=t,this.ast=""}var t,r,i;return t=e,(r=[{key:"preProcess",value:function(){this.formula=this.formula.replace(/=/g,""),this.formula=this.formula.replace(/:/g,"$$$"),this.formula=this.formula.replace(/""""/g,""),this.formula=this.formula.replace(/!/g,""),this.formula=this.formula.replace(/{/g,""),this.formula=this.formula.replace(/}/g,""),this.formula=this.formula.replace(/#/g,""),this.formula=this.formula.replace(/\./g,"a"),this.formula=this.formula.replace(/[0-9][0-9]*/g,"a"),this.formula=this.formula.replace(/\“/g,'"'),this.formula=this.formula.replace(/\（/g,"("),this.formula=this.formula.replace(/\）/g,")"),this.formula=this.formula.replace(/\”/g,'"'),this.formula=this.formula.replace(/\%/g,""),this.formula=this.formula.replace(/\,/g,""),this.formula=this.formula.replace(/\，/g,""),this.formula=this.formula.replace(/"([\s\S]+)"""/g,""),this.formula=this.formula.replace(/""/,"")}},{key:"parse",value:function(){this.preProcess();var e=this.formula;this.ast=a.parse(e)}},{key:"ignoreSpace",value:function(){}}])&&n(t.prototype,r),i&&n(t,i),e}();t.default=i},,,,,,,,,,,,,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(9),a=r(38),i=r(19);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cell=t}var t,r,l;return t=e,(r=[{key:"renderFormat",value:function(e,t,r,a,i){if(!1===(0,n.isHave)(e)||!1===(0,n.isHave)(e.format))return{cellText:"",state:!1};var o=this.cell,l="";if(e.format){var s=a.tryParseToNum(o,t,r);return s.state?i?"date"===s.style||"datetime"===s.style?l=s.text:s.state=!1:l=s.text:(!1===(0,n.isHave)(o.text)&&(o.text=""),l=o.text),{cellText:l,state:s.state}}return{cellText:l,state:!1}}},{key:"getCellDataType",value:function(e,t){var r=t.isDate,o=t.isNumber,l=this.cell,s=!0;(0,n.isHave)(l.formulas)||(l.formulas=""),(0,n.isHave)(l.text)||(l.text="");var u=""!==l.formulas?l.formulas+"":l.text+"",c=1*(u=u.replace(/,/g,""));return!c&&0!==c||"number"!=typeof c||isNaN(c)||!0!==/^\d+$/.test(u)?u&&!0===s&&(0,a.isFormula)(u)?(s=!0,o=!1,r=!1,l.type="na"):u&&-1!==u.search((0,i.str2Re)(i.datePattern2),"")?(!0===r?(s=!1,o=!1,r=!0):(s=!1,o=!1,r=!1),l.type="date"):(s=!1,o=!1,r=!1,l.type="other"):(!0===o?(o=!0,s=!1,r=!1):(s=!1,o=!1,r=!1),l.type="number"),l.tmp=u,e.push(l),{nA:s,isDate:r,isNumber:o}}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=null,this.state="move"}var t,r,a;return t=e,(r=[{key:"move",value:function(e){return this.range=e,this.state="move",this}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.selectorHeightBorderWidth=void 0;var n=r(0),a=r(1),i=r(5),o=r(8),l=r(4),s=r(6),u=d(r(149)),c=d(r(28));function d(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&m(e.prototype,t),r&&m(e,r),e}t.selectorHeightBorderWidth=3;var v=10,p=function(){function e(t,r,i){var o=this;f(this,e),this.cornerEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-corner")),this.data=t,this.sheet=i,this._selector=r,this.l=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(1)})),this.r=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-r")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(2)})).on("click",(function(e){2===e.detail&&e.stopPropagation()})),this.t=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-t")).on("mousedown.stop",(function(e){e.detail,e.stopPropagation(),o.moveEvent(3)})),this.b=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-b")).on("mousedown.stop",(function(e){2===e.detail?e.stopPropagation():o.moveEvent(4)})),this.cornerEl.on("mousedown",(function(e){2===e.detail&&(i.clickCopyPaste(),e.stopPropagation())})),this.boxinner=(0,n.h)("div","".concat(a.cssPrefix,"-selector-boxinner")).children(this.b,this.t,this.r,this.l),this.areaEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-area")).children(this.cornerEl,this.boxinner).hide(),this.clipboardEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-clipboard")).hide(),this.autofillEl=(0,n.h)("div","".concat(a.cssPrefix,"-selector-autofill")).hide(),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-selector")).css("z-index","".concat(v)).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),v+=1}return h(e,[{key:"border",value:function(e){this.areaEl.css("border",e)}},{key:"longTimeBefore",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;this.boxinner.hide(),setTimeout((function(){e.boxinner.show()}),t)}},{key:"moveEvent",value:function(e){console.log(60);var t=this.data,r=this._selector,n=this.sheet,a=t.selector,u=r.range,d=u.sri,f=u.sci,m=u.eri,h=u.eci,v=u.w,p=u.h,y=new i.CellRange(d,f,m,h,v,p),g=new i.CellRange(d,f,m,h,v,p),b=n.selectorMoveEl;b.set(-1,-1,!0),b.hide(),(0,o.mouseMoveUp)(window,(function(e){n.container.css("pointer-events","none"),r.setBoxinner("none");var a=t.getCellRectByXY(e.layerX,e.layerY),o=a.ri,l=a.ci;if(-1!==o&&-1!==l){(g=new i.CellRange(d,f,m,h,v,p)).move(o,l);var s=t.getMoveRect(g);b.range=g,b.setMove(s),b.el.show()}}),(function(){var e=t.rows,i=[],o=[],u=[];y.each((function(t,r){console.log(e.getCell(t,r),t,r);var n=e.getCell(t,r),a=new c.default(t,r,(0,s.deepCopy)(n||{}),"".concat((0,l.xy2expr)(r,t),":").concat((0,l.xy2expr)(r,t))),o=new c.default(t,r,(0,s.deepCopy)(n||{}),"".concat((0,l.xy2expr)(r,t)));i.push(a),u.push(o)})),g.each((function(t,r){var n=new c.default(t,r,(0,s.deepCopy)(e.getCell(t,r)||{}),(0,l.xy2expr)(r,t));o.push(n)})),t.cutPaste(y,g,!1),n.container.css("pointer-events","auto"),r.setBoxinner("auto"),b.hide();var d=t.getMoveRect(g);a.range=g,a.ci=g.sci,a.ri=g.sri,r.indexes=[a.ri,a.ci],r.moveIndexes=[g.sri,g.sci],r.range=g,r.setMove(d),n.selector.selectCell.setData(g.sri,g.sci),console.time("move"),e.moveChange(i,o,u),console.timeEnd("move"),n.selectorMoveReset()}))}},{key:"setCss",value:function(e){this.areaEl.css("border","2px dashed ".concat(e)),this.el.css("z-index","-1")}},{key:"setOffset",value:function(e){return this.el.offset(e).show(),this}},{key:"setBoxinner",value:function(e){this.l.css("pointer-events",e),this.r.css("pointer-events",e),this.t.css("pointer-events",e),this.b.css("pointer-events",e),this.cornerEl.css("pointer-events",e)}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"setAreaOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.areaEl.offset({width:n-3+.8,height:a-3+.8,left:t-.8,top:r-.8}).show()}},{key:"setClipboardOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.clipboardEl.offset({left:t,top:r,width:n-5,height:a-5})}},{key:"showAutofill",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.autofillEl.offset({width:n-3,height:a-3,left:t,top:r}).show()}},{key:"hideAutofill",value:function(){this.autofillEl.hide()}},{key:"showClipboard",value:function(){this.clipboardEl.show()}},{key:"hideClipboard",value:function(){this.clipboardEl.hide()}}]),e}();function y(e){var t=this.data,r=e.left,n=e.top,a=e.width,i=e.height,o=e.scroll,l=e.l,s=e.t,u=t.freezeTotalWidth(),c=t.freezeTotalHeight(),d=r-u;u>l&&(d-=o.x);var f=n-c;return c>s&&(f-=o.y),{left:d,top:f,width:a,height:i}}function g(e){var t=this.data,r=e.left,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalWidth(),u=r-s;return s>i&&(u-=l.x),{left:u,top:o,width:n,height:a}}function b(e){var t=this.data,r=e.top,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalHeight(),u=r-s;return s>o&&(u-=l.y),{left:i,top:u,width:n,height:a}}function E(e){this.br.setAreaOffset(y.call(this,e))}function R(e){this.tl.setAreaOffset(e)}function O(e){this.t.setAreaOffset(g.call(this,e))}function A(e){this.l.setAreaOffset(b.call(this,e))}function x(e){this.l.setClipboardOffset(b.call(this,e))}function w(e){this.br.setClipboardOffset(y.call(this,e))}function N(e){this.tl.setClipboardOffset(e)}function _(e){this.t.setClipboardOffset(g.call(this,e))}function S(e){E.call(this,e),R.call(this,e),O.call(this,e),A.call(this,e)}function T(e){w.call(this,e),N.call(this,e),_.call(this,e),x.call(this,e)}var C=function(){function e(t,r){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];f(this,e),this.data=t,this.br=new p(t,this,r),this.t=new p(t,this,r),this.l=new p(t,this,r),this.tl=new p(t,this,r),this.sheet=r,this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=(0,n.h)("div","".concat(a.cssPrefix,"-selectors")).children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),i?(this.selectCell=new u.default(t,i),this.el.child(this.selectCell.el)):this.selectCell=new u.default(t,i),this.lastri=-1,this.lastci=-1,v+=1}return h(e,[{key:"longTimeBefore",value:function(){this.tl.longTimeBefore(),this.br.longTimeBefore(),this.t.longTimeBefore(),this.l.longTimeBefore()}},{key:"setCss",value:function(e){this.br.setCss(e),this.t.setCss(e),this.l.setCss(e),this.tl.setCss(e)}},{key:"hide",value:function(){this.el.hide()}},{key:"resetOffset",value:function(){var e=this.data,t=this.tl,r=this.t,n=this.l,a=this.br;this.selectCell.resetSelectOffset();var i=e.freezeTotalHeight(),o=e.freezeTotalWidth();i>0||o>0?(t.setOffset({width:o,height:i}),r.setOffset({left:o,height:i}),n.setOffset({top:i,width:o}),a.setOffset({left:o,top:i})):(t.hide(),r.hide(),n.hide(),a.setOffset({left:0,top:0}))}},{key:"resetAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();S.call(this,e),T.call(this,t),this.resetOffset()}},{key:"resetBRTAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();E.call(this,e),O.call(this,e),w.call(this,t),_.call(this,t),this.resetOffset()}},{key:"resetBRLAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();E.call(this,e),A.call(this,e),w.call(this,t),x.call(this,t),this.resetOffset()}},{key:"resetSelectorBRLAreaOffset",value:function(e){var t=this.data.getMoveRect(e),r=this.data.getClipboardRect();E.call(this,t),A.call(this,t),w.call(this,r),x.call(this,r),this.resetOffset()}},{key:"set",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.data,a=n.calSelectedRangeByStart(e,t),i=a.sri,o=a.sci;if(r){var l=e,s=t;e<0&&(l=0),t<0&&(s=0),n.selector.setIndexes(l,s),this.indexes=[l,s]}this.moveIndexes=[i,o],this.range=a,this.resetAreaOffset(),this.el.show()}},{key:"autoFilterRef",value:function(){console.log(this.range)}},{key:"setEnd",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],this.data);r&&(this.lastri=e,this.lastci=t),this.range=n.calSelectedRangeByEnd(e,t),S.call(this,this.data.getSelectedRect())}},{key:"setBoxinner",value:function(e){this.br.setBoxinner(e),this.t.setBoxinner(e),this.l.setBoxinner(e),this.tl.setBoxinner(e)}},{key:"reset",value:function(){var e=this.data.selector.range,t=e.eri,r=e.eci,n=e.sci,a=e.sri;this.set(a,n),this.setEnd(t,r,!0,!0)}},{key:"setMove",value:function(e){S.call(this,e)}},{key:"showAutofill",value:function(e,t,r){if(-1!==e||-1!==t){var n=this.range,a=n.sri,o=n.sci,l=n.eri,s=n.eci,u=0,c=e,d=t;if(2===r)u=11,this.arange=new i.CellRange(a,d,l,o-1);else if(4===r)u=22,this.arange=new i.CellRange(c,o,a-1,s);else if(3===r)u=33,this.arange=new i.CellRange(a,s+1,l,d);else{if(1!==r)return this.arange=null,u;u=44,this.arange=new i.CellRange(l+1,o,c,s)}if(null!==this.arange){var f=this.data.getRect(this.arange);f.width+=2,f.height+=2;var m=this.br,h=this.l,v=this.t,p=this.tl;m.showAutofill(y.call(this,f)),h.showAutofill(b.call(this,f)),v.showAutofill(g.call(this,f)),p.showAutofill(f)}return u}}},{key:"hideAutofill",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideAutofill()}))}},{key:"showClipboard",value:function(){var e=this,t=this.data.getClipboardRect();T.call(this,t),["br","l","t","tl"].forEach((function(t){e[t].showClipboard()}))}},{key:"hideClipboard",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideClipboard()}))}}]),e}();t.default=C},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=r(8),o=r(1),l=(n=r(5))&&n.__esModule?n:{default:n};function s(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){e.preventDefault(),e.stopPropagation();var t=this.filterItems;t.length<=0||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex-=1,this.itemIndex<0&&(this.itemIndex=t.length-1,this.el.el.scrollTop=this.el.el.scrollHeight),this.el.el.scrollTop=33*(this.itemIndex-9),t[this.itemIndex].toggle())}function d(e){e.stopPropagation();var t=this.filterItems;t.length<=0||t.length<this.itemIndex||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex+=1,this.itemIndex>t.length-1&&(this.itemIndex=0,this.el.el.scrollTop=0),this.el.el.scrollTop=33*(this.itemIndex-9),console.log(t.length),t[this.itemIndex].toggle())}function f(e){e.preventDefault();var t=this.filterItems;if(!(t.length<=0)){if(e.stopPropagation(),this.itemIndex<0)return this.itemIndex=0,this.hide(),void i.createEvent.call(this,13,!1);t[this.itemIndex].el.click(),this.hide()}}function m(e){var t=e.keyCode;switch(e.ctrlKey&&e.stopPropagation(),t){case 37:e.stopPropagation();break;case 38:c.call(this,e),e.stopPropagation();break;case 39:e.stopPropagation();break;case 40:d.call(this,e),e.stopPropagation();break;case 13:case 9:f.call(this,e);break;default:e.stopPropagation()}}var h=function(){function e(t,r,n,i){var l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"200px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filterItems=[],this.items=t,this.data=n,this.editor=i,this.el=(0,a.h)("div","".concat(o.cssPrefix,"-suggest")).css("width",l).css("overflow-y","auto").css("max-height","306px").hide(),this.el.attr("tabindex",0),this.itemClick=r,this.itemIndex=-1,this.show=!1}var t,r,n;return t=e,(r=[{key:"setOffset",value:function(e){this.el.cssRemoveKeys("top","bottom").offset(e)}},{key:"hide",value:function(){var e=this.el;this.filterItems=[],this.itemIndex=-1,e.hide(),this.show=!1,(0,i.unbindClickoutside)(this.el.parent())}},{key:"setItems",value:function(e){this.items=e}},{key:"search",value:function(e){var t,r=this,n=this.items,u=this.data,c=this.editor;if(/^\s*$/.test(e)||(n=n.filter((function(t){return(t.key.toUpperCase()||t.toUpperCase()).startsWith(e.toUpperCase())}))),n=n.map((function(e){var t=e.title;t?"function"==typeof t&&(t=t()):t=e;var n=(0,a.h)("div","".concat(o.cssPrefix,"-item")).child(t).on("click.stop",(function(){r.itemClick(e)}));return e.label&&n.child((0,a.h)("div","label").html(e.label)),n})),this.filterItems=n,n.length<=0)return this.hide(),void(this.show=!1);var d=this.el,f=u.getRect(new l.default(c.ri,c.ci,c.ri,c.ci)),m=f.left+55,h=f.top+50;n.length>=9&&f.top-306>=50&&(h-=306,h-=f.height),d.css("left","".concat(m,"px")),d.css("top","".concat(h,"px")),(t=d.html("")).children.apply(t,s(n)).show(),this.show=!0,(0,i.bindClickoutside)(d.parent(),(function(){r.hide(),r.show=!1}))}},{key:"bindInputEvents",value:function(e){var t=this;e.on("keydown",(function(e){return m.call(t,e)}))}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectorColor=function(e){return e%=s.length,{color:s[e],index:e}},t.default=void 0;var n=r(0),a=r(1);function i(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var o=["#ffffff","#000100","#e7e5e6","#445569","#5b9cd6","#ed7d31","#a5a5a5","#ffc001","#4371c6","#71ae47"],l=[["#f2f2f2","#7f7f7f","#d0cecf","#d5dce4","#deeaf6","#fce5d5","#ededed","#fff2cd","#d9e2f3","#e3efd9"],["#d8d8d8","#595959","#afabac","#adb8ca","#bdd7ee","#f7ccac","#dbdbdb","#ffe59a","#b3c6e7","#c5e0b3"],["#bfbfbf","#3f3f3f","#756f6f","#8596b0","#9cc2e6","#f4b184","#c9c9c9","#fed964","#8eaada","#a7d08c"],["#a5a5a5","#262626","#3a3839","#333f4f","#2e75b5","#c45a10","#7b7b7b","#bf8e01","#2f5596","#538136"],["#7f7f7f","#0c0c0c","#171516","#222a35","#1f4e7a","#843c0a","#525252","#7e6000","#203864","#365624"]],s=["#EE0000","#8A2BE2","#FF3E96","#8B4500","#3A5FCD","#FF7F24"];var u=["#c00000","#fe0000","#fdc101","#ffff01","#93d051","#00b04e","#01b0f1","#0170c1","#012060","#7030a0"];function c(e){var t=this,r=(0,n.h)("div","".concat(a.cssPrefix,"-color-palette-cell")).on("click.stop",(function(){return t.change(e)})).css("background-color",e);return this.items.push(r),(0,n.h)("td","").child(r)}t.default=function e(){var t,r,s,d=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-color-palette")),this.change=function(){},this.items=[];var f=(0,n.h)("table","").children((t=(0,n.h)("tbody","")).children.apply(t,[(r=(0,n.h)("tr","".concat(a.cssPrefix,"-theme-color-placeholders"))).children.apply(r,i(o.map((function(e){return c.call(d,e)}))))].concat(i(l.map((function(e){var t;return(t=(0,n.h)("tr","".concat(a.cssPrefix,"-theme-colors"))).children.apply(t,i(e.map((function(e){return c.call(d,e)}))))}))),[(s=(0,n.h)("tr","".concat(a.cssPrefix,"-standard-colors"))).children.apply(s,i(u.map((function(e){return c.call(d,e)}))))])));this.el.child(f)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fnNameArrayWithKey=t.emptyWorkbook=t.allFnObj=void 0;var n=(0,r(46).createDefaultFnCollection)().getAllFnObj();t.allFnObj=n;t.emptyWorkbook={sheets:{sheet1:{A1:{}}}};var a=Object.getOwnPropertyNames(n).map((function(e){return{key:e,title:e}}));t.fnNameArrayWithKey=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(15)),a=o(r(11)),i=o(r(79));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(e,r){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new a.default(e).css("height","16px").css("border-bottom","3px solid ".concat(r)),l=new i.default;return l.change=function(e){n.setTitle(e),n.change(e)},(n=u(this,c(t).call(this,o,"auto",!1,"bottom-left",{type:!1},l.el))).colorPalette=l,n}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"setTitle",value:function(e){this.title.css("border-color",e),this.hide()}}])&&s(r.prototype,n),o&&s(r,o),t}(n.default);t.default=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(11))&&n.__esModule?n:{default:n},o=r(1),l=r(8);function s(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t,r){var n,l=this,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"600px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.title=t,this.el=(0,a.h)("div","".concat(o.cssPrefix,"-modal")).css("width",u).children((0,a.h)("div","".concat(o.cssPrefix,"-modal-header")).children(new i.default("close").on("click.stop",(function(){return l.hide()})),this.title),(n=(0,a.h)("div","".concat(o.cssPrefix,"-modal-content"))).children.apply(n,s(r))).hide(),this.open=!1}var t,r,n;return t=e,(r=[{key:"show",value:function(){var e=this;this.dimmer=(0,a.h)("div","".concat(o.cssPrefix,"-dimmer active")),document.body.appendChild(this.dimmer.el);var t=this.el.show().box(),r=t.width,n=t.height,i=document.documentElement,s=i.clientHeight,u=i.clientWidth;this.el.offset({left:(u-r)/2,top:(s-n)/3}),window.xkeydownEsc=function(t){27===t.keyCode&&e.hide()},this.open=!0,(0,l.bind)(window,"keydown",window.xkeydownEsc)}},{key:"hide",value:function(){this.el.hide(),this.open=!1,document.body.removeChild(this.dimmer.el),(0,l.unbind)(window,"keydown",window.xkeydownEsc),delete window.xkeydownEsc}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mountCopy=function(e){e.preventDefault();var t=i.call(this);if(t)return void(e.clipboardData&&(e.clipboardData.setData("text/html",l(t.img2)),e.clipboardData.setData("text/plain","")));var r=o.call(this);e.clipboardData&&(e.clipboardData.setData("text/html",l(r.html.el)),e.clipboardData.setData("text/plain",r.plain))},t.getChooseImg=i,t.sheetCopy=o;var n=r(0),a=r(6);function i(){var e=this.data.pasteDirectionsArr;if(this.direction=!1,e.length>0)for(var t=0;t<e.length;t++)if(!0===e[t].state)return this.container.css("pointer-events","auto"),e[t];return null}function o(){for(var e={plain:"",html:(0,n.h)("table","")},t=this.data,r=t.selector,i=t.rows,o=t.styles,l=r.range,s=l.sri,u=l.eri,c=l.sci,d=l.eci,f=(0,n.h)("tbody",""),m=s;m<=u;m+=1){for(var h=(0,n.h)("tr",""),v=c;v<=d;v+=1){var p=(0,n.h)("td","");if(i._[m]&&i._[m].cells&&i._[m].cells[v]){if(i._[m].cells[v]&&o[i._[m].cells[v].style]){if(p.css("color",o[i._[m].cells[v].style].color),o[i._[m].cells[v].style]&&o[i._[m].cells[v].style].font&&o[i._[m].cells[v].style].font.bold){var y=o[i._[m].cells[v].style].font.bold?"900":"";p.css("font-weight",y)}p.css("background",o[i._[m].cells[v].style].bgcolor)}i._[m].cells[v].text||(i._[m].cells[v].text=""),i._[m].cells[v].formulas||(i._[m].cells[v].formulas="");var g=""!==i._[m].cells[v].formulas?i._[m].cells[v].formulas:i._[m].cells[v].text;if(i._[m].cells[v].formulas&&(0,a.cutStr)(i._[m].cells[v].formulas,!1,!0).length>0){var b=(0,n.h)("reference","");b.html(g),b.attr("ri",m),b.attr("ci",v),p.child(b.el)}else p.html(g);e.plain+=g,e.plain+="\t"}else e.plain+="\t";h.child(p)}f.child(h),e.plain+="\n"}return e.html.child(f),e}function l(e){var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(6),a=r(9),i=r(4);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e){for(var t=[],r=0;r<e.length;r++)(0,a.isHave)(e[r])&&(0,a.isHave)(e[r].expr)&&t.push(e[r].expr),(0,a.isHave)(e[r])&&(0,a.isHave)(e[r].cell)&&(0,a.isHave)(e[r].cell.depend)&&t.push.apply(t,l(e[r].cell.depend)),(0,a.isHave)(e[r])&&(0,a.isHave)(e[r].cell)&&(0,a.isHave)(e[r].cell.multivalueRefsCell)&&t.push(e[r].cell.multivalueRefsCell);return t}var u=function(){function e(t,r){var n=t.type,a=void 0===n?-1:n,i=t.action,o=void 0===i?"":i,l=t.ri,s=void 0===l?-1:l,u=t.ci,c=void 0===u?-1:u,d=t.oldData,f=void 0===d?"":d,m=t.newData,h=void 0===m?"":m,v=t.expr,p=void 0===v?"":v,y=t.oldStep,g=void 0===y?"":y,b=t.cellRange,E=void 0===b?"":b,R=t.cells,O=void 0===R?{}:R,A=t.height,x=void 0===A?-1:A,w=t.width,N=void 0===w?-1:w,_=t.oldCell,S=void 0===_?{}:_,T=t.newCell,C=void 0===T?{}:T,I=t.newMergesData,M=void 0===I?"":I,k=t.oldMergesData,j=void 0===k?"":k,P=t.property,D=void 0===P?"":P,L=t.value,U=void 0===L?"":L;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type=a,this.action=o,this.ri=s,this.ci=c,this.expr=p,this.cellRange=E,this.cells=O,this.height=x,this.width=N,this.oldCell=S,this.newCell=C,this.oldMergesData=j,this.newMergesData=M,this.property=D,this.value=U,this.oldStep=g,this.oldData=f,this.newData=h,this.data=r}var t,r,a;return t=e,(r=[{key:"isRefresh",value:function(){return 999===this.type}},{key:"findAllNeedCalcCell",value:function(){var e,t,r=[],a=this.oldCell,o=this.newCell,u=this.ri,c=this.ci;return(e=r).push.apply(e,l(s(a))),(t=r).push.apply(t,l(s(o))),-1!==u&&-1!==c&&r.push((0,i.xy2expr)(c,u)),r=(0,n.distinct)(r)}},{key:"restore",value:function(e,t,r){var a=this.type;if(1===a){var i=this.oldCell,o=this.newCell,l="";l=1===r?(0,n.deepCopy)(i):(0,n.deepCopy)(o);for(var s=0;s<l.length;s++){var u=l[s],c=u.cell,d=u.ri,f=u.ci;e.rows.setCellText(d,f,c,"cell")}}else if(13===a){var m=this.oldData,h=this.newData,v="";v=1===r?(0,n.deepCopy)(h):(0,n.deepCopy)(m),e.setData(v)}else if(2===a||5===a||6===a||11===a||12===a){var p=this.newCell,y=this.oldCell,g=this.oldMergesData,b=this.newMergesData,E=(this.cellRange,this.property),R=(this.value,"");R=1===r?(0,n.deepCopy)(y):(0,n.deepCopy)(p),"merge"===E&&(1===r?this.data.merges.setData(g):this.data.merges.setData(b));for(var O=0;O<R.length;O++){var A=R[O],x=A.cell,w=A.ri,N=A.ci;e.rows.setCellText(w,N,x,"cell")}}else if(3===a){var _=this.ri,S=this.height,T=this.oldStep;1===r?e.rows.setHeight(_,T.height):e.rows.setHeight(_,S)}else if(4===a){var C=this.ci,I=this.width,M=this.oldStep;1===r?e.cols.setWidth(C,M.width):e.cols.setWidth(C,I)}}}])&&o(t.prototype,r),a&&o(t,a),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e,t){this.register=function(r){r.addEventListener("mousedown",(function(n){if(0===n.button){var a=n.clientX,i=n.clientY,o=r.offsetLeft,l=r.offsetTop;e&&e.onBegin&&e.onBegin.call(r,{left:a-o,top:i-l});var s=!0;r.style.cursor="move";var u=a,c=i;window.onmousemove=function(t){if(s){var n=t.clientX,d=t.clientY;return u=n-(a-o),c=d-(i-l),r.style.left=u>0?u+"px":"0px",r.style.top=c>0?c+"px":"0px",e&&e.onDrag&&e.onDrag.call(r,{left:u,top:c,x:n-a,y:d-i,isDown:s}),!1}},window.onmouseup=function(){return s=!1,r.style.cursor="default",e&&e.onEnd&&e.onEnd.call(r,{left:parseInt(r.style.left),top:parseInt(r.style.top)},t),!1},n.stopPropagation?n.stopPropagation():n.preventDefault&&n.preventDefault()}}))}};t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.spreadsheet=void 0;var n=r(0),a=d(r(87)),i=d(r(42)),o=r(1),l=r(10);r(191);var s=d(r(192)),u=r(193),c=d(r(85));function d(e){return e&&e.__esModule?e:{default:e}}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var m=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"sheet1";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var c=t;"string"==typeof t&&(c=document.querySelector(t)),this.locale("zh-cn",s.default),this.data=new a.default(u,r,l);var d=(0,n.h)("div","".concat(o.cssPrefix)).on("contextmenu",(function(e){return e.preventDefault()}));c.appendChild(d.el),this.sheet=new i.default(d,this.data),this.data.belongSheet=this.sheet}var t,r,u;return t=e,u=[{key:"locale",value:function(e,t){(0,l.locale)(e,t)}}],(r=[{key:"setDataSettings",value:function(e){this.data.settings.showEditor=e}},{key:"loadData",value:function(e){return this.sheet.loadData(e),this}},{key:"getData",value:function(){return this.data.getData()}},{key:"validate",value:function(){return this.data.validations.errors.size<=0}},{key:"change",value:function(e){return this.data.change=e,this}},{key:"locale",value:function(e,t){(0,l.locale)(e,t)}},{key:"getText",value:function(e,t,r){for(var n=this.sheet,a=n.selectors,i=n.data,o=n.table,l="",s=0;s<a.length;s++)l+=a[s].erpx;return i.getCellByExpr(l,o,e,t,r)}},{key:"removeEvent",value:function(){this.sheet.removeEvent()}}])&&f(t.prototype,r),u&&f(t,u),e}(),h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new m(e,t)};t.spreadsheet=h,window&&(window.drag=c.default,window.x=window.x||{},window.bugout=u.bugout,window.x.spreadsheet=h,window.x.spreadsheet.locale=function(e,t){return(0,l.locale)(e,t)})},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(88),i=C(r(107)),o=C(r(108)),l=C(r(109)),s=C(r(110)),u=r(111),c=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=T();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(12)),d=r(9),f=r(38),m=r(143),h=r(144),v=r(5),p=r(4),y=r(10),g=C(r(76)),b=r(0),E=r(41),R=(r(43),r(6)),O=C(r(60)),A=r(188),x=r(44),w=C(r(189)),N=C(r(75)),_=C(r(28)),S=C(r(190));function T(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return T=function(){return e},e}function C(e){return e&&e.__esModule?e:{default:e}}function I(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function M(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var j={view:{height:function(){return document.documentElement.clientHeight},width:function(){return document.documentElement.clientWidth}},formula:{},showGrid:!0,showToolbar:!0,showContextmenu:!0,showEditor:!0,autoLoad:!0,ignore:[],cellWidth:0,ignoreRi:0,minus:!1,row:{len:100,height:25},col:{len:26,width:100,indexWidth:60,minWidth:10},rowsInit:!1,style:{bgcolor:"#ffffff",align:"left",valign:"middle",textwrap:!1,strike:!1,flexible:!1,underline:!1,autoAdapt:!1,color:"#0a0a0a",font:{name:"Arial",size:10,bold:!1,italic:!1}}};function P(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};if(!t)return!1;var n=this.merges,a=t.clone(),i=k(e.size(),2),o=i[0],l=i[1],s=k(t.size(),2),u=s[0],c=s[1];return o>u&&(a.eri=t.sri+o-1),l>c&&(a.eci=t.sci+l-1),!n.intersects(a)||(r((0,y.t)("error.pasteForMergedCell")),!1)}function D(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=this.rows,i=this.merges;"all"!==r&&"format"!==r||(a.deleteCells(t,r),i.deleteWithin(t)),a.copyPaste(e,t,r,n,(function(e,t,r){if(r&&r.merge){var n=k(r.merge,2),a=n[0],o=n[1];if(a<=0&&o<=0)return;i.add(new v.CellRange(e,t,e+a,t+o))}}))}function L(e,t,r){var n=this.clipboard,a=this.rows,i=this.merges;a.cutPaste(e,t),i.move(e,t.sri-e.sri,t.sci-e.sci),r&&n.clear()}function U(e,t,r){var n=this.styles,a=this.rows.getCellOrNew(e,t),i={};(0,d.isHave)(a.style)&&(i=c.cloneDeep(n[a.style])),Object.assign(i,{border:r}),a.style=this.addStyle(i)}function V(e,t,r,n){if(-1===e||-1===t)return{state:!0,msg:"单元格坐标有误"};if("style"!==n&&(!r||"="!==r[0]))return{state:!1,msg:"正确"};var a=F.call(this,r);return"style"!==n&&!0===a.state?{msg:a.msg,state:!0}:{msg:a.msg,state:!1}}function F(e){var t=!1,r="";try{new O.default(e).parse()}catch(e){r="您输入的公式存在问题，请更正, 错误原因: "+e.description,t=!0}return!0===t&&!1===(0,R.isLegal)(e)&&(r="缺少左括号或右括号",t=!0),t?{state:!0,msg:r}:{state:!1,msg:r}}function B(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"to",r=arguments.length>2?arguments[2]:void 0;if("to"===t){for(var n=[],a=0;a<e.length;a++){var i=e[a];console.log(i);var o={src:i.img2.src,ri:i.ri,ci:i.ci,top:i.top,left:i.left,range:i.range,offsetLeft:i.offsetLeft,offsetTop:i.offsetTop,nextLeft:i.nextLeft,nextTop:i.nextTop,img:i.img,arr:i.arr,img2:i.img2};n.push(o)}return n}if("from"===t){if("string"==typeof r)return;for(var l=0;l<e.length;l++){var s=e[l],u=(0,b.h)("img","");u.el.src=s.src,E.mountImg.call(r,u.el,!0,s.ri,s.ci,s.range)}}}function H(e,t){for(var r=this.rows,n=e+1,a=!0;a;){var i=r.getCellOrNew(n,t);i&&i.text?n+=1:a=!1}return n}function Y(e){var t=this,r=e.mode,n=e.style,a=e.color,i=this.styles,o=this.selector,l=this.rows,s=o.range,u=s.sri,d=s.sci,f=s.eri,m=s.eci,h=!this.isSignleSelected();if(h||"inside"!==r&&"horizontal"!==r&&"vertical"!==r){for(var v=u;v<=f;v+=1)for(var p=d;p<=m;p+=1)U.call(this,v,p,{});if("outside"!==r||h){if("none"===r)o.range.each((function(e,r){var n=l.getCell(e,r);if(n&&void 0!==n.style){var a=c.cloneDeep(i[n.style]);delete a.border,n.style=t.addStyle(a)}}));else if("all"===r||"inside"===r||"outside"===r||"horizontal"===r||"vertical"===r)!function(){for(var e=[],i=u;i<=f;i+=1)for(var o=d;o<=m;o+=1){for(var s=[],c=0;c<e.length;c+=1){var v=k(e[c],4),p=v[0],y=v[1],g=v[2],b=v[3];if(i===p+g+1&&s.push(c),p<=i&&i<=p+g&&o===y){o+=b+1;break}}if(s.forEach((function(t){return e.splice(t,1)})),o>m)break;var E=l.getCell(i,o),R=0,O=0;if(E&&E.merge){var A=k(E.merge,2);R=A[0],O=A[1],e.push([i,o,R,O])}var x=R>0&&i+R===f,w=O>0&&o+O===m,N={};"all"===r?N={bottom:[n,a],top:[n,a],left:[n,a],right:[n,a]}:"inside"===r?(!w&&o<m&&(N.right=[n,a]),!x&&i<f&&(N.bottom=[n,a])):"horizontal"===r?!x&&i<f&&(N.bottom=[n,a]):"vertical"===r?!w&&o<=m&&(N.right=[n,a]):"outside"===r&&h&&(u===i&&(N.top=[n,a]),(x||f===i)&&(N.bottom=[n,a]),d===o&&(N.left=[n,a]),(w||m===o)&&(N.right=[n,a])),Object.keys(N).length>0&&U.call(t,i,o,N),o+=O}}();else if("top"===r||"bottom"===r)for(var y=d;y<=m;y+=1)"top"===r&&(U.call(this,u,y,{top:[n,a]}),y+=l.getCellMerge(u,y)[1]),"bottom"===r&&(U.call(this,f,y,{bottom:[n,a]}),y+=l.getCellMerge(f,y)[1]);else if("left"===r||"right"===r)for(var g=u;g<=f;g+=1)"left"===r&&(U.call(this,g,d,{left:[n,a]}),g+=l.getCellMerge(g,d)[0]),"right"===r&&(U.call(this,g,m,{right:[n,a]}),g+=l.getCellMerge(g,m)[0])}else U.call(this,u,d,{top:[n,a],bottom:[n,a],left:[n,a],right:[n,a]})}}function W(e,t){var r=this.rows,n=this.freezeTotalHeight(),a=r.height;n+r.height<e&&(a-=t);for(var i=this.exceptRowSet,o=0,l=a,s=r.height;o<r.len&&!(l>e);o+=1)i.has(o)||(l+=s=r.getHeight(o));return(l-=s)<=0?{ri:-1,top:0,height:s}:{ri:o-1,top:l,height:s}}function G(e,t){var r=this.cols,n=this.freezeTotalWidth(),a=r.indexWidth;n+r.indexWidth<=e&&(a-=t);var i=k(c.rangeReduceIf(0,r.len,a,r.indexWidth,e,(function(e){return r.getWidth(e)})),3),o=i[0],l=i[1],s=i[2];return l<=0?{ci:-1,left:0,width:r.indexWidth}:{ci:o-1,left:l,width:s}}function z(e,t,r){var n=e.text,a=e.formula,i=t.symbol,o=t.position;if(!(0,d.isHave)(n)||!(0,c.isNumber)(n))return null;var l=r((0,x.formatNumberRender)(n,-1));return a=(0,f.isFormula)(a)?a:l,isNaN(l)?null:{text:"begin"===o?i+l:l+i,value:n,formulas:a}}function X(e,t,r){return $.call(this,t,r,e)}function $(e,t,r){var n=this.rows,a=this.getCellStyle(e,t),i=(0,A.dateDiff)(r.text),o=i.isValid,l=i.diff,s=n.getCellStyleConvert(a,o);if("number"===s){var u=r.text,m=r.formulas,h={};return h=o?{text:l.toFixed(2),formulas:m}:{text:u=(0,x.formatNumberRender)(u,2),value:r.text,formulas:m},(0,d.isHave)(h.text)&&(0,c.isNumber)(h.text)?{state:!0,style:s,text:h.text,cell:h}:{state:!1,style:s,text:h.text,cell:h}}if("date"===s||"datetime"===s){var v=r.text;if(!o){var p=(0,A.formatDate)(v),y=p.state,g=p.date;o=y,l=r.text,v=g}return o&&"datetime"===s&&(v=(0,A.changeFormat)((0,A.formatDate)((0,A.dateDiff)(v).diff).date)),{state:o,style:s,text:(0,d.isHave)(a)?v:l}}if("normal"===s){if(o){var b=l,E=r.formulas,R={formulas:n.toString(E),text:n.toString(b)};return{state:!0,text:R.text,style:s,cell:R}}var O=r.text,w={formulas:r.formulas,text:O};return{state:!0,style:s,text:w.text,cell:w}}if("rmb"===s){var N="",_="";o?(N=l,_=(0,f.isFormula)(r.formulas)?r.formulas:l):(N=(0,x.formatNumberRender)(r.text,0),_=r.formulas);var S=z({text:N,formula:_},{symbol:"￥",position:"begin"},(function(e){return e}));if(S)return{state:!0,style:s,text:S.text,cell:S}}else if("percent"===s){var T="",C="";o?(T=l,C=(0,f.isFormula)(r.formulas)?r.formulas:l):(T=n.useOne(r.value,r.text),C=r.formulas);var I=z({text:T,formula:C},{symbol:"%",position:"end"},(function(e){return Number(100*e).toFixed(2)}));if(I)return{state:!0,style:s,text:I.text,cell:I}}return{state:!1,style:s,text:r.text,cell:{}}}var q=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.settings=c.merge(j,r||{}),this.name=t||"belongSheet",this.methods=n,this.freeze=[0,0],this.styles=[],this.merges=new u.Merges,this.rows=new f.Rows(this.settings.row,this),this.cols=new m.Cols(this.settings.col),this.validations=new h.Validations,this.hyperlinks={},this.comments={},this.showEquation=!1,this.calc=new a.Calc,this.pasteDirectionsArr=[],this.changeDataForCalc=null,this.multiPreAction=new w.default(this),this.selector=new i.default,this.scroll=new o.default,this.clipboard=new l.default,this.moved=new g.default,this.autoFilter=new s.default,this.change=function(){},this.exceptRowSet=new Set,this.sortedRowMap=new Map,this.unsortedRowMap=new Map}var t,r,n;return t=e,(r=[{key:"addValidation",value:function(e,t,r){var n=this;this.changeData((function(){n.validations.add(e,t,r)}))}},{key:"removeValidation",value:function(){var e=this,t=this.selector.range;this.changeData((function(){e.validations.remove(t)}))}},{key:"tryParseToNum",value:function(e,t,r){return X.call(this,e,t,r)}},{key:"clickCopyPaste",value:function(){var e=this.selector.range.eri,t=this.selector.range.eci,r=this.rows,n=r.getCellOrNew(e,t),a=r.getCellOrNew(e+1,t);if(!n||!n.text||a&&a.text)return{enter:!1};for(var i=H.call(this,e,t-1),o=H.call(this,e,t+1),l=i<o?o:i,s=!1,u=1;u<l&&!1===s;u++){var c=r.getCellOrNew(e+u,t);c&&c.text&&(l=e+u,s=!0)}return{enter:!0,dstCellRange:new v.CellRange(e+1,t,l-1,t),srcCellRange:new v.CellRange(e,t,e,t)}}},{key:"getSelectedValidation",value:function(){var e=this.selector,t=e.ri,r=e.ci,n=e.range,a=this.validations.get(t,r),i={ref:n.toString()};return null!==a&&(i.mode=a.mode,i.validator=a.validator),i}},{key:"canUndo",value:function(){return this.multiPreAction.getItems(1).length>0}},{key:"canRedo",value:function(){return this.multiPreAction.getItems(2).length>0}},{key:"undo",value:function(){this.multiPreAction.undo(),this.changeDataForCalc=this.getChangeDataToCalc()}},{key:"historyList",value:function(e){return this.multiPreAction.getItems(e)}},{key:"redo",value:function(){this.multiPreAction.redo(),this.changeDataForCalc=this.getChangeDataToCalc()}},{key:"copy",value:function(){document.execCommand("copy",!0),this.clipboard.copy(this.selector.range)}},{key:"makeCellPropArr",value:function(e,t,r){for(var n=[],a=this.rows.eachRange(e),i=0;i<a.length;i++){var o=a[i],l=o.ri,s=o.ci,u=o.cell;if((0,d.isHave)(u)&&!1===(0,d.isHave)(u.style)){var c=this.defaultStyle();u.style=this.addStyle(c)}var f=new _.default(l+t,s+r,u,(0,p.xy2expr)(l+t,s+r));n.push(f)}return n}},{key:"setCellByCellProp",value:function(e,t){for(var r=this.rows,n=0;n<e.length;n++){var a=e[n],i=a.ri,o=a.ci,l=a.cell;(0,d.isHave)(l)&&(0,d.isHave)(l.style)&&r.setCell(i,o,l,"style"),t(i,o)}}},{key:"paintFormatChange",value:function(e){var t=this;this.changeData((function(){var r=t.clipboard,n=t.selector,a=r.range,i=n.ri,o=n.ci,l=i-a.sri,s=o-a.sci,u=t.makeCellPropArr(a,l,s);if(n.range.eri-n.range.sri==0&&n.range.eci-n.range.sci==0)t.setCellByCellProp(u,e);else{var c=new S.default(a,n.range),d=c.getPaintType(),f=c.makePaintArr(d,u);t.setCellByCellProp(f,e)}}),{type:12,cellRange:this.selector.range})}},{key:"move",value:function(){this.moved.move()}},{key:"cut",value:function(){this.clipboard.cut(this.selector.range)}},{key:"paste",value:function(e){this.changeData((function(){}),{type:6,cellRange:e})}},{key:"autofill",value:function(e,t){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},a=this.selector.range;return!!P.call(this,a,e,n)&&(this.changeData((function(){D.call(r,a,e,t,!0)}),{type:5,cellRange:e}),!0)}},{key:"clickAutofill",value:function(e,t,r){var n=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};return!!P.call(this,e,t,a)&&(this.changeData((function(){D.call(n,e,t,r,!0)})),!0)}},{key:"clearClipboard",value:function(){this.clipboard.clear()}},{key:"calSelectedRangeByEnd",value:function(e,t){var r=this.selector,n=this.rows,a=this.cols,i=this.merges,o=r.range,l=o.sri,s=o.sci,u=o.eri,c=o.eci,d=r.ri,f=r.ci,m=e,h=t;return e<0&&(m=n.len-1),t<0&&(h=a.len-1),m<=d?(l=m,u=d):u=m,h<=f?(s=h,c=f):c=h,r.range=i.union(new v.CellRange(l,s,u,c)),r.range}},{key:"calSelectedRangeByStart",value:function(e,t){var r=this.selector,n=this.rows,a=this.cols,i=this.merges.getFirstIncludes(e,t);return null===i&&(i=new v.CellRange(e,t,e,t),-1===e&&(i.sri=0,i.eri=n.len-1),-1===t&&(i.sci=0,i.eci=a.len-1)),r.range=i,i}},{key:"setSelectedCellAttr",value:function(e,t){var r=this;this.changeData((function(){var n=r.selector,a=r.styles,i=r.rows;if("merge"===e)t?r.merge():r.unmerge();else if("border"===e)Y.call(r,t);else if("cellFormulaProxy"===e){var o=i.getCellOrNew(n.ri,n.ci);o.text="=".concat(t,"()"),o.formulas="=".concat(t,"()")}else n.range.each((function(n,o){var l=i.getCellOrNew(n,o),s={};if((0,d.isHave)(l.style)&&(s=c.cloneDeep(a[l.style])),"format"===e)s.format=t,i.setCellText(n,o,{text:l.text,style:r.addStyle(s)},"format");else if("font-bold"===e||"font-italic"===e||"font-name"===e||"font-size"===e){var u={};u[e.split("-")[1]]=t,s.font=Object.assign(s.font||{},u),l.style=r.addStyle(s)}else"flexible"===e?(r.exceptRowSet.has(n+1)&&r.exceptRowSet.has(n+2)&&!r.exceptRowSet.has(n+3)?(r.exceptRowSet.delete(n),r.exceptRowSet.delete(n+1),r.exceptRowSet.delete(n+2)):(r.exceptRowSet.add(n),r.exceptRowSet.add(n+1),r.exceptRowSet.add(n+2)),s[e]=t,l.style=r.addStyle(s)):"strike"!==e&&"textwrap"!==e&&"underline"!==e&&"align"!==e&&"valign"!==e&&"color"!==e&&"bgcolor"!==e||(s[e]=t,l.style=r.addStyle(s))}))}),{type:11,cellRange:this.selector.range,property:e,value:t})}},{key:"setSelectedCellText",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input",r=this.selector,n=r.ri,a=r.ci,i=n;this.unsortedRowMap.has(n)&&(i=this.unsortedRowMap.get(n)),this.setCellText(i,a,{text:e},t),this.resetAutoFilter()}},{key:"setSelectedCell",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input",r=arguments.length>2?arguments[2]:void 0,n=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;this.setCellAll(n,a,e,r,t),this.resetAutoFilter()}},{key:"getSelectedCell",value:function(){var e=this.selector,t=e.ri,r=e.ci,n=t;return this.unsortedRowMap.has(t)&&(n=this.unsortedRowMap.get(t)),this.rows.getCell(n,r)}},{key:"editorChangeToHistory",value:function(e,t,r){var n=t.ri,a=t.ci;if(-1===n||-1===a)return{state:!1};var i=this.rows.getCell(n,a),o=this.multiPreAction,l=(0,p.xy2expr)(a,n),s=o.getStepType(r,{ri:n,ci:a,expr:l,text:i.text}),u=new _.default(n,a,e,l),c=new _.default(n,a,i,l);return o.addStep(s,{oldCell:[u],newCell:[c]}),this.changeDataForCalc=this.getChangeDataToCalc(),{state:!0}}},{key:"changeToHistory",value:function(e,t){var r=e.ri,n=e.type,a=e.ci,i=e.cellRange,o=e.property,l=e.value,s=e.oldCell,u=e.oldMergesData;if(-1===n)return{state:!1};var c=this.multiPreAction,d=this.selector,f=c.getStepType(n,{expr:"",property:o,value:l,oldCell:s,range:d.range,ri:r,ci:a,cellRange:i});return c.addStep(f,{oldCell:s,oldMergesData:u,newMergesData:this.merges.getData(),oldStep:t}),{state:!0}}},{key:"getSelectedCellRiCi",value:function(e,t){var r=e;return this.unsortedRowMap.has(e)&&(r=this.unsortedRowMap.get(e)),this.rows.getCell(r,t)}},{key:"xyInSelectedRect",value:function(e,t){var r=this.getSelectedRect(),n=r.left,a=r.top,i=r.width,o=r.height,l=e-this.cols.indexWidth,s=t-this.rows.height;return l>n&&l<n+i&&s>a&&s<a+o}},{key:"getSelectedRect",value:function(){return this.getRect(this.selector.range)}},{key:"getClipboardRect",value:function(){var e=this.clipboard;return e.isClear()?{left:-100,top:-100}:this.getRect(e.range)}},{key:"getMoveRect",value:function(e){return this.getRect(e)}},{key:"getRect",value:function(e){var t=this.scroll,r=this.rows,n=this.cols,a=this.exceptRowSet,i=e.sri,o=e.sci,l=e.eri,s=e.eci;if(i<0&&o<0)return{left:0,l:0,top:0,t:0,scroll:t};var u=n.sumWidth(0,o),c=r.sumHeight(0,i,a),d=r.sumHeight(i,l+1,a),f=n.sumWidth(o,s+1),m=u-t.x,h=c-t.y,v=this.freezeTotalHeight(),p=this.freezeTotalWidth();return p>0&&p>u&&(m=u),v>0&&v>c&&(h=c),{l:u,t:c,left:m,top:h,height:d,width:f,scroll:t}}},{key:"getCellRectByXY",value:function(e,t){var r=this.scroll,n=this.merges,a=this.rows,i=this.cols,o=W.call(this,t,r.y),l=o.ri,s=o.top,u=o.height,c=G.call(this,e,r.x),d=c.ci,f=c.left,m=c.width;if(-1===d&&(m=i.totalWidth()),-1===l&&(u=a.totalHeight()),l>=0||d>=0){var h=n.getFirstIncludes(l,d);if(h){l=h.sri,d=h.sci;var v=this.cellRect(l,d);f=v.left,s=v.top,m=v.width,u=v.height}}return{ri:l,ci:d,left:f,top:s,width:m,height:u}}},{key:"getCellRectByXYWithNotTotalResult",value:function(e,t){var r=this.scroll,n=this.merges,a=W.call(this,t,r.y),i=a.ri,o=a.top,l=a.height,s=G.call(this,e,r.x),u=s.ci,c=s.left,d=s.width;if(i>=0||u>=0){var f=n.getFirstIncludes(i,u);if(f){i=f.sri,u=f.sci;var m=this.cellRect(i,u);c=m.left,o=m.top,d=m.width,l=m.height}}return{ri:i,ci:u,left:c,top:o,width:d,height:l}}},{key:"isSignleSelected",value:function(){var e=this.selector.range,t=e.sri,r=e.sci,n=e.eri,a=e.eci,i=this.getCell(t,r);if(i&&i.merge){var o=k(i.merge,2),l=o[0],s=o[1];if(t+l===n&&r+s===a)return!0}return!this.selector.multiple()}},{key:"canUnmerge",value:function(){var e=this.selector.range,t=e.sri,r=e.sci,n=e.eri,a=e.eci,i=this.getCell(t,r);if(i&&i.merge){var o=k(i.merge,2),l=o[0],s=o[1];if(t+l===n&&r+s===a)return!0}return!1}},{key:"merge",value:function(){var e=this.selector,t=this.rows;if(!this.isSignleSelected()){var r=k(e.size(),2),n=r[0],a=r[1];if(n>1||a>1){var i=e.range,o=i.sri,l=i.sci,s=t.getCellOrNew(o,l);s.merge=[n-1,a-1],this.merges.add(e.range),this.rows.deleteCells(e.range),this.rows.setCell(o,l,s)}}}},{key:"unmerge",value:function(){var e=this,t=this.selector;if(this.isSignleSelected()){var r=t.range,n=r.sri,a=r.sci;this.changeData((function(){e.rows.deleteCell(n,a,"merge"),e.merges.deleteWithin(t.range)}))}}},{key:"canAutofilter",value:function(){return!this.autoFilter.active()}},{key:"autofilter",value:function(){var e=this,t=this.autoFilter,r=this.selector;this.changeData((function(){if(t.active())t.clear(),e.exceptRowSet=new Set,e.sortedRowMap=new Map,e.unsortedRowMap=new Map;else{for(var n=r.range.toString(),a=r.range.eri,i=e.rows,o=r.range.sci;o<=r.range.eci;o++){var l=new v.CellRange(r.range.sri,o,r.range.sri,o);a<(l=i.autoFilterRef(n,l)).eri&&(a=l.eri)}var s=new v.CellRange(r.range.sri,r.range.sci,a,r.range.eci);t.ref=s.toString()}}))}},{key:"throwFormula",value:function(){var e=this.selector,t=this.rows;this.changeData((function(){e.range.each((function(e,r){var n=t.getCellOrNew(e,r);n&&n.text&&n.formulas&&t.setCellAll(e,r,n.text,n.text)}))}))}},{key:"setAutoFilter",value:function(e,t,r,n){var a=this.autoFilter;a.addFilter(e,r,n),a.setSort(e,t),this.resetAutoFilter()}},{key:"resetAutoFilter",value:function(){var e=this,t=this.autoFilter,r=this.rows;if(t.active()){var n=t.sort,a=t.filteredRows((function(e,t){return r.getCell(e,t)})),i=a.rset,o=a.fset,l=Array.from(o),s=Array.from(o);n&&l.sort((function(e,t){return"asc"===n.order?e-t:"desc"===n.order?t-e:0})),this.exceptRowSet=i,this.sortedRowMap=new Map,this.unsortedRowMap=new Map,l.forEach((function(t,r){e.sortedRowMap.set(s[r],t),e.unsortedRowMap.set(t,s[r])}))}}},{key:"deleteCell",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all",r=this.selector;this.changeData((function(){e.rows.deleteCells(r.range,t),"all"!==t&&"format"!==t||e.merges.deleteWithin(r.range)}),{type:2})}},{key:"insert",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,n=this.selector.range,a=n.sri,i=n.sci,o=this.rows,l=this.merges,s=this.cols;r="row"===e?-1!==r?r:a:-1!==r?r:i,this.changeData((function(){var n=r;"row"===e?o.insert(r,t):"column"===e&&(o.insertColumn(r,t),n=r,s.len+=t),l.shift(e,n,t,(function(e,t,r,n){var a=o.getCell(e,t);a.merge[0]+=r,a.merge[1]+=n}))}),{type:13,data:this.getData(),property:"insert"})}},{key:"delete",value:function(e){var t=this;this.changeData((function(){var r=t.rows,n=t.merges,a=t.selector,i=t.cols,o=a.range,l=a.range,s=l.sri,u=l.sci,c=l.eri,d=l.eci,f=k(a.range.size(),2),m=f[0],h=f[1],v=s,p=m;"row"===e?r.delete(s,c):"column"===e&&(r.deleteColumn(u,d),v=o.sci,p=h,i.len-=1),n.shift(e,v,-p,(function(e,t,n,a){var i=r.getCell(e,t);i.merge[0]+=n,i.merge[1]+=a,0===i.merge[0]&&0===i.merge[1]&&delete i.merge}))}))}},{key:"scrollx",value:function(e,t){var r=this.scroll,n=this.freeze,a=this.cols,i=k(n,2)[1],o=k(c.rangeReduceIf(i,a.len,0,0,e,(function(e){return a.getWidth(e)})),3),l=o[0],s=o[1],u=o[2],d=s;e>0&&(d+=u),r.x!==d&&(r.ci=e>0?l:0,r.x=d,t())}},{key:"scrolly",value:function(e,t){var r=this.scroll,n=this.freeze,a=this.rows,i=k(n,1)[0],o=k(c.rangeReduceIf(i,a.len,0,0,e,(function(e){return a.getHeight(e)})),3),l=o[0],s=o[1],u=o[2],d=s;e>0&&(d+=u),r.y!==d&&(r.ri=e>0?l:0,r.y=d,t())}},{key:"cellRect",value:function(e,t){var r=this.rows,n=this.cols,a=n.sumWidth(0,t),i=r.sumHeight(0,e),o=r.getCell(e,t),l=n.getWidth(t),s=r.getHeight(e);if(null!==o&&o.merge){var u=k(o.merge,2),c=u[0],d=u[1];if(c>0)for(var f=1;f<=c;f+=1)s+=r.getHeight(e+f);if(d>0)for(var m=1;m<=d;m+=1)l+=n.getWidth(t+m)}return{left:a,top:i,width:l,height:s,cell:o}}},{key:"getCell",value:function(e,t){return this.rows.getCell(e,t)}},{key:"getMax",value:function(){var e=this.cols.len;return{mri:this.rows.len,mci:e}}},{key:"renderFormat",value:function(e,t,r,n,a){return new N.default(t).renderFormat(e,r,n,this,a)}},{key:"isFormula",value:function(e){return this.rows.isFormula(e)}},{key:"toString",value:function(e){return this.rows.toString(e)}},{key:"getCellTextOrDefault",value:function(e,t){var r=this.getCell(e,t);return r&&r.text?r.text:""}},{key:"getCellStyle",value:function(e,t){var r=this.getCell(e,t);return r&&void 0!==r.style?this.styles[r.style]:null}},{key:"getCellStyleOrDefault",value:function(e,t){var r=this.styles,n=this.rows.getCell(e,t),a=n&&void 0!==n.style?r[n.style]:{};return c.merge(this.defaultStyle(),a)}},{key:"getSelectedCellStyle",value:function(){var e=this.selector,t=e.ri,r=e.ci;return this.getCellStyleOrDefault(t,r)}},{key:"getCellByExpr",value:function(e,t,r,n,a){}},{key:"setCellText",value:function(e,t,r,n){var a=r.text,i=r.style,o=this.rows,l=this.history,s=this.validations;"finished"===n?(o.setCellText(e,t,{text:""}),l.add(this.getData()),o.setCellText(e,t,{text:a})):("end"===n?o.setCellAll(e,t,a):"formulas"===n?o.setCellAll(e,t,a,"-"):"style"===n?o.setCellText(e,t,{text:a,style:i},"style"):o.setCellText(e,t,{text:a}),this.change(this.getData())),s.validate(e,t,a)}},{key:"setCellAll",value:function(e,t,r,n,a){var i=this.rows,o=this.history,l=this.validations;"finished"===a?(i.setCellAll(e,t,"",""),o.add(this.getData()),i.setCellAll(e,t,r,n)):i.setCellAll(e,t,r,n),l.validate(e,t,r,n)}},{key:"equationIsActive",value:function(){return this.showEquation}},{key:"freezeIsActive",value:function(){var e=k(this.freeze,2),t=e[0],r=e[1];return t>0||r>0}},{key:"setFreeze",value:function(e,t){var r=this;this.changeData((function(){r.freeze=[e,t]}))}},{key:"freezeTotalWidth",value:function(){return this.cols.sumWidth(0,this.freeze[1])}},{key:"freezeTotalHeight",value:function(){return this.rows.sumHeight(0,this.freeze[0])}},{key:"setRowHeight",value:function(e,t){var r=this;this.changeData((function(){r.rows.setHeight(e,t)}),{type:3,ri:e})}},{key:"setColWidth",value:function(e,t){var r=this;this.changeData((function(){r.cols.setWidth(e,t)}),{type:4,ci:e})}},{key:"viewHeight",value:function(){var e=this.settings,t=e.view,r=e.showToolbar,n=t.height();return r&&(n-=41),n}},{key:"viewWidth",value:function(){return this.settings.view.width()}},{key:"freezeViewRange",value:function(){var e=k(this.freeze,2),t=e[0],r=e[1];return new v.CellRange(0,0,t-1,r-1,this.freezeTotalWidth(),this.freezeTotalHeight())}},{key:"viewRange",value:function(){var e=this.scroll,t=this.rows,r=this.cols,n=this.freeze,a=e.ri,i=e.ci;a<=0&&(a=k(n,1)[0]),i<=0&&(i=k(n,2)[1]);for(var o=0,l=0,s=[t.len,r.len],u=s[0],c=s[1],d=a;d<t.len&&(u=d,!((l+=t.getHeight(d))>this.viewHeight()));d+=1);for(var f=i;f<r.len&&(c=f,!((o+=r.getWidth(f))>this.viewWidth()));f+=1);return new v.CellRange(a,i,u,c,o,l)}},{key:"viewRange2",value:function(){var e=this.scroll,t=this.rows,r=this.cols,n=this.freeze,a=e.ri,i=e.ci;a<=0&&(a=k(n,1)[0]),i<=0&&(i=k(n,2)[1]);for(var o=0,l=0,s=[t.len,r.len],u=s[0],c=s[1],d=a;d<t.len&&(u=d,!((l+=t.getHeight(d))>this.viewHeight()));d+=1);for(var f=i;f<r.len;f+=1)o+=r.getWidth(f),c=f;return new v.CellRange(a,i,u,c,o,l)}},{key:"eachMergesInView",value:function(e,t){this.merges.filterIntersects(e).forEach((function(e){return t(e)}))}},{key:"rowEach",value:function(e,t,r){for(var n=0,a=this.rows,i=this.exceptRowSet,o=I(i),l=0,s=0;s<o.length;s+=1)o[s]<e&&(l+=1);for(var u=e+l;u<=t+l;u+=1)if(i.has(u))l+=1;else{var c=a.getHeight(u);if(r(u,n,c),(n+=c)>this.viewHeight())break}}},{key:"colEach",value:function(e,t,r){for(var n=0,a=this.cols,i=e;i<=t;i+=1){var o=a.getWidth(i);if(r(i,n,o),(n+=o)>this.viewWidth())break}}},{key:"defaultStyle",value:function(){return this.settings.style}},{key:"addStyle",value:function(e){for(var t=this.styles,r=0;r<t.length;r+=1){var n=t[r];if(c.equals(n,e))return r}return t.push(e),t.length-1}},{key:"getChangeDataToCalc",value:function(){var e=this.multiPreAction;if(e.undoItems.length<=0)return null;var t=e.undoItems[e.undoItems.length-1];return(0,d.isHave)(t)?t:null}},{key:"changeData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=t.type,n=void 0===r?-1:r,a=t.ri,i=void 0===a?-1:a,o=t.ci,l=void 0===o?-1:o,s=t.cellRange,u=void 0===s?"":s,c=t.property,d=void 0===c?"":c,f=t.value,m=void 0===f?"":f;if(!1!==this.settings.showEditor){var h={},v=this.merges.getData(),p=this.multiPreAction,y=this.selector,g=p.getStepType(n,{expr:"",property:d,value:m,oldCell:h,range:y.range,ri:i,ci:l,cellRange:u});if(""!==u){var b=this.multiPreAction;h=b.eachRange(u)}e(),this.changeToHistory({type:n,ri:i,ci:l,cellRange:u,property:d,value:m,oldCell:h,oldMergesData:v,newData:this.getData()},g),this.changeDataForCalc=this.getChangeDataToCalc(),this.change(this.getData())}}},{key:"cutPaste",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];L.call(this,e,t,r)}},{key:"setData",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=this.autoFilter;return Object.keys(e).forEach((function(i){if("merges"===i||"cols"===i||"validations"===i)t[i].setData(e[i]);else if("flex"===i)a.addFiexRows(e[i]);else if("rows"===i)t[i].setData(e[i],r,n,t.settings.rowsInit);else if("freeze"===i){var o=k((0,p.expr2xy)(e[i]),2),l=o[0],s=o[1];t.freeze=[s,l]}else"pictures"===i?e[i]&&B.call(t,e[i],"from",r):"autofilter"===i?e[i]&&e[i].ref&&(a.ref=e[i].ref,a.filters=e[i].filters,a.sort=e[i].sort):void 0!==e[i]&&(t[i]=e[i])})),this}},{key:"selectorCellText",value:function(e,t,r,n){return V.call(this,e,t,r,n)}},{key:"getData",value:function(){var e=this.name,t=this.freeze,r=this.styles,n=this.merges,a=this.rows,i=this.cols,o=this.validations,l=this.autoFilter,s=this.pasteDirectionsArr;return{editor:this.settings.showEditor,name:e,freeze:(0,p.xy2expr)(t[1],t[0]),styles:r,pictures:B(s,"to"),merges:n.getData(),rows:a.getData(),cols:i.getData(),validations:o.getData(),autofilter:l.getData()}}}])&&M(t.prototype,r),n&&M(t,n),e}();t.default=q},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.easyCalcWorkbook=function(e){(new o).calculateWorkbook(e)},t.Calc=void 0;r(12);var n=r(89),a=r(46);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calcWorkbookProxy=new a.CalcWorkbookProxy({}),this.calcRowsProxy=null}var t,r,o;return t=e,(r=[{key:"calculateRows",value:function(e,t){if(this.calcRowsProxy instanceof n.CalcRowsProxy==0){this.calcRowsProxy=new n.CalcRowsProxy(e,t);var r=this.calcRowsProxy.rows2workbook();this.calculateWorkbook(r),this.calcRowsProxy.calcDoneToSetCells(r,e)}else{var a=this.calcWorkbookProxy.updateByPreAction(t);this.calcRowsProxy.updateRowsByCalcCellArray(a,e)}}},{key:"calculateWorkbook",value:function(e){this.calcWorkbookProxy.updateByWorkbookObj(e);var t=this.calcWorkbookProxy.find_all_cells_with_formulas();return this.calcWorkbookProxy.calculateFormulas(t),t}},{key:"updateByMultiSheetObj",value:function(e){var t=this.calcWorkbookProxy.updateByMultiSheetObj(e);return this.calcWorkbookProxy.getMultiSheetObjFromSheet2CalcArray(t)}}])&&i(t.prototype,r),o&&i(t,o),e}();t.Calc=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CalcRowsProxy=void 0;var n,a=(n=r(4))&&n.__esModule?n:{default:n},i=r(9);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rows=t,this.preAction=r}var t,r,n;return t=e,(r=[{key:"updateWorkbook",value:function(e){for(var t=this.rows.data.name,r=this.preAction.findAllNeedCalcCell(),n=0;n<r.length;n++){var o=r[n],l=a.default.expr2xy(o),s=this.rows.getCell(l[1],l[0]);(0,i.isHave)(s)&&(e.Sheets[t][o]={v:s.text,f:s.formulas})}return e}},{key:"rows2workbook",value:function(){var e=this.rows,t=e._,r=null,n=e.data.name;return(0,i.isHave)(e.name2SheetProxy)?r=e.name2SheetProxy:(r={Sheets:{}}).Sheets[n]={},Object.keys(t).forEach((function(o){Object.keys(t[o].cells).forEach((function(t){var l=e.getCell(o,t),s=a.default.xy2expr(t,o);(0,i.isHave)(l)&&(r.Sheets[n][s]={f:l.formulas})}))})),r}},{key:"updateRowsByCalcCellArray",value:function(e,t){e.map((function(e){t.setCell.apply(t,o(e.getRiCi()).concat([e.getCellObjForRendering()]))}))}},{key:"calcDoneToSetCells",value:function(e,t){var r=t.data.name,n=e.Sheets[r];Object.keys(n).forEach((function(e){var r=a.default.expr2xy(e);if((0,i.isHave)(n[e])&&(0,i.isHave)(n[e].v)&&(0,i.isHave)(n[e].f)){var o=t.getCell(r[1],r[0]);(0,i.isHave)(o)||(o={}),o.v=n[e].v,o.text=n[e].v.toString(),o.formulas=n[e].f,t.setCell(r[1],r[0],o)}})),t.workbook=e}}])&&l(t.prototype,r),n&&l(t,n),e}();t.CalcRowsProxy=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trans_params=function(e){var t=new RegExp("{(.*?)}","g"),r=e.f.match(t);if(null!==r)for(var n=0;n<r.length;n++){var a=r[n],i="'"+a+"'";e.f=e.f.replace(a,i)}return e},t.recover_sheet=function(e){return Object.keys(e).forEach((function(t){"default_0"===e[t].v&&(a.default.isHave(e[t].f)||(e[t].f=""),e[t].v=0)})),e},t.strim=function(e){return e.replace(/\s+$/,"").replace(/^\s+/,"")},t.trans_formula=function(e){var t={FLOOR:"FLOORMATH",let:"VARA","WORKDAY.INTL":"WORKDAYINTL"};for(var r in t){var n=t[r];e.indexOf(n)<0&&e.indexOf(r)>=0&&e.indexOf(r+".")<=0&&(e=e.replace(r,n))}e=e.replace("_XLFN.","");var a=new RegExp('"(.*?)"',"g"),i=e.match(a);if(0===e.indexOf("=")&&(e=e.toUpperCase(),null!==i))for(var o=0;o<i.length;o++){var l=i[o].toUpperCase();e.indexOf(l)>=0&&(e=e.replace(l,i[o]))}return e};var n,a=(n=r(12))&&n.__esModule?n:{default:n}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MultiCollExpFn=t.FnCollection=void 0;var n=r(92),a=r(23);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),e}var u=function(){function e(){o(this,e),this.fnObj={}}return s(e,[{key:"addFnObj",value:function(e){var t,r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=!0,l=!1,s=void 0;try{for(var u,c=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(o=(u=c.next()).done);o=!0){var d=n+(t=u.value);if(d in this.fnObj){if(!0===r)continue;throw new Error("define fn again:",t)}var f=e[t];"function"==typeof f||f instanceof a.BaseExpFunction?this.fnObj[d]=e[t]:"object"===i(f)&&this.addFnObj(e[t],r,t+".")}}catch(e){l=!0,s=e}finally{try{o||null==c.return||c.return()}finally{if(l)throw s}}}},{key:"updateFnObj",value:function(e){var t,r=!0,n=!1,a=void 0;try{for(var i,o=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(r=(i=o.next()).done);r=!0)t=i.value,this.fnObj[t]=e[t]}catch(e){n=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(n)throw a}}}},{key:"addFnObjArray",value:function(e){var t=!0,r=!1,n=void 0;try{for(var a,i=e[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=a.value;this.addFnObj(o)}}catch(e){r=!0,n=e}finally{try{t||null==i.return||i.return()}finally{if(r)throw n}}}},{key:"getExpFunction",value:function(e){return e in this.fnObj==!1?{isEmpty:!0}:this.fnObj[e]}}]),e}();t.FnCollection=u;var c=function(){function e(t,r){o(this,e),this.normal_fn_coll=t,this.raw_fn_coll=r,this.rawFnExecutor=n.UserRawFnExecutor,this.normalFnExecutor=a.UserFnExecutor}return s(e,[{key:"isValidExpFn",value:function(e){return"function"==typeof e||e instanceof a.BaseExpFunction}},{key:"getFnExecutorByName",value:function(e){var t=this.raw_fn_coll.getExpFunction(e);return this.isValidExpFn(t)?new this.rawFnExecutor(t):(t=this.normal_fn_coll.getExpFunction(e),this.isValidExpFn(t)?new this.normalFnExecutor(t):new Error(" expression function "+e+" not found"))}},{key:"getAllFnObj",value:function(){var e={};return Object.assign(e,this.raw_fn_coll.fnObj),Object.assign(e,this.normal_fn_coll.fnObj),e}}]),e}();t.MultiCollExpFn=c},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.UserRawFnExecutor=void 0;var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);this.name="UserRawFn",this.args=[],this.user_function=t}var t,r,a;return t=e,(r=[{key:"solveExpression",value:function(){return this.user_function.apply(this,this.args)}},{key:"push",value:function(e){this.args.push(e)}}])&&n(t.prototype,r),a&&n(t,a),e}();t.UserRawFnExecutor=a},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var r={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var l=i?Object.getOwnPropertyDescriptor(e,o):null;l&&(l.get||l.set)?Object.defineProperty(r,o,l):r[o]=e[o]}return r.default=e,t&&t.set(e,r),r}Object.defineProperty(t,"__esModule",{value:!0}),t.fnObjArray=void 0;var o=[i(r(94)),i(r(98)),i(r(52)),i(r(99)),i(r(24)),i(r(32)),i(r(34)),i(r(100)),i(r(33)),i(r(101)),i(r(26)),i(r(51)),i(r(102))];t.fnObjArray=o},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=u(r(24)),i=u(r(26)),o=u(r(52)),l=u(r(34));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}return r.default=e,t&&t.set(e,r),r}function c(e,t){if(t)for(var r in t)e[r]=t[r];return e}t.BETADIST=i.BETA.DIST,t.BETAINV=i.BETA.INV,t.BINOMDIST=i.BINOM.DIST,t.CEILING=t.ISOCEILING=c(a.CEILING.MATH,a.CEILING),t.CEILINGMATH=a.CEILING.MATH,t.CEILINGPRECISE=a.CEILING.PRECISE,t.CHIDIST=i.CHISQ.DIST,t.CHIDISTRT=i.CHISQ.DIST.RT,t.CHIINV=i.CHISQ.INV,t.CHIINVRT=i.CHISQ.INV.RT,t.CHITEST=i.CHISQ.TEST,t.CONFIDENCE=c(i.CONFIDENCE.NORM,i.CONFIDENCE),t.COVAR=i.COVARIANCE.P,t.COVARIANCEP=i.COVARIANCE.P,t.COVARIANCES=i.COVARIANCE.S,t.CRITBINOM=i.BINOM.INV,t.EXPONDIST=i.EXPON.DIST,t.ERFCPRECISE=o.ERFC.PRECISE,t.ERFPRECISE=o.ERF.PRECISE,t.FDIST=i.F.DIST,t.FDISTRT=i.F.DIST.RT,t.FINVRT=i.F.INV.RT,t.FINV=i.F.INV,t.FLOORMATH=a.FLOORMATH,t.FLOORPRECISE=a.FLOORPRACE,t.FTEST=i.F.TEST,t.GAMMADIST=i.GAMMA.DIST,t.GAMMAINV=i.GAMMA.INV,t.GAMMALNPRECISE=i.GAMMALN.PRECISE,t.HYPGEOMDIST=i.HYPGEOM.DIST,t.LOGINV=i.LOGNORM.INV,t.LOGNORMINV=i.LOGNORM.INV,t.LOGNORMDIST=i.LOGNORM.DIST,t.MODE=c(i.MODE.SNGL,i.MODE),t.MODEMULT=i.MODE.MULT,t.MODESNGL=i.MODE.SNGL,t.NEGBINOMDIST=i.NEGBINOM.DIST,t.NETWORKDAYSINTL=l.NETWORKDAYSINTL,t.NORMDIST=i.NORM.DIST,t.NORMINV=i.NORM.INV,t.NORMSDIST=i.NORM.S.DIST,t.NORMSINV=i.NORM.S.INV,t.PERCENTILE=c(i.PERCENTILE.EXC,i.PERCENTILE),t.PERCENTILEEXC=i.PERCENTILE.EXC,t.PERCENTILEINC=i.PERCENTILE.INC,t.PERCENTRANK=c(i.PERCENTRANK.INC,i.PERCENTRANK),t.PERCENTRANKEXC=i.PERCENTRANK.EXC,t.PERCENTRANKINC=i.PERCENTRANK.INC,t.POISSON=c(i.POISSON.DIST,i.POISSON),t.POISSONDIST=i.POISSON.DIST,t.QUARTILE=c(i.QUARTILE.INC,i.QUARTILE),t.QUARTILEEXC=i.QUARTILE.EXC,t.QUARTILEINC=i.QUARTILE.INC,t.RANK=c(i.RANK.EQ,i.RANK),t.RANKAVG=i.RANK.AVG,t.RANKEQ=i.RANK.EQ,t.SKEWP=i.SKEW.P,t.STDEV=c(i.STDEV.S,i.STDEV),t.STDEVP=i.STDEV.P,t.STDEVS=i.STDEV.S,t.TDIST=i.T.DIST,t.TDISTRT=i.T.DIST.RT,t.TINV=i.T.INV,t.TTEST=i.T.TEST,t.VARP=i.VAR.P,t.VARS=i.VAR.S,t.WEIBULL=c(i.WEIBULL.DIST,i.WEIBULL),t.WEIBULLDIST=i.WEIBULL.DIST,t.WORKDAYINTL=l.WORKDAYINTL,t.ZTEST=i.Z.TEST,t._XLFN=c(a.FLOOR.MATH,i.COVARIANCE.P,i.NORM.INV,i.VAR.P)},,function(e,t,r){"use strict";var n="=",a=[">",">=","<","<=","=","<>"],i="operator",o="literal",l=[i,o];function s(e,t){if(-1===l.indexOf(t))throw new Error("Unsupported token type: "+t);return{value:e,type:t}}function u(e){for(var t,r="",l=[],u=0;u<e.length;u++){var c=e[u];0===u&&a.indexOf(c)>=0?l.push(s(c,i)):r+=c}return r.length>0&&l.push(s("string"!=typeof(t=r)?t:(/^\d+(\.\d+)?$/.test(t)&&(t=-1===t.indexOf(".")?parseInt(t,10):parseFloat(t)),t),o)),l.length>0&&l[0].type!==i&&l.unshift(s(n,i)),l}t.TOKEN_TYPE_OPERATOR=i,t.TOKEN_TYPE_LITERAL=o,t.parse=function(e){return u(function(e){for(var t=e.length,r=[],n=0,a="",i="";n<t;){var o=e.charAt(n);switch(o){case">":case"<":case"=":i+=o,a.length>0&&(r.push(a),a="");break;default:i.length>0&&(r.push(i),i=""),a+=o}n++}return a.length>0&&r.push(a),i.length>0&&r.push(i),r}(e))},t.createToken=s,t.compute=function(e){for(var t,r=[],n=0;n<e.length;n++){var a=e[n];switch(a.type){case i:t=a.value;break;case o:r.push(a.value)}}return function(e,t){var r=!1;switch(t){case">":r=e[0]>e[1];break;case">=":r=e[0]>=e[1];break;case"<":r=e[0]<e[1];break;case"<=":r=e[0]<=e[1];break;case"=":r=e[0]===e[1];break;case"<>":r=e[0]!==e[1]}return r}(r,t)}},,function(module,exports,__webpack_require__){"use strict";var _error_config=_interopRequireDefault(__webpack_require__(2)),_statistical=_interopRequireDefault(__webpack_require__(26)),_mathTrig=_interopRequireDefault(__webpack_require__(24)),_helper=_interopRequireDefault(__webpack_require__(13));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function compact(e){if(!e)return e;for(var t=[],r=0;r<e.length;++r)e[r]&&t.push(e[r]);return t}function find_result_idx(database,criteria){for(var valid_arr=[],filter_arr=[],i=0;i<criteria[0].length;i++)filter_arr.push(criteria[0][i]);for(var _i=1;_i<criteria.length;_i++){for(var arr=criteria[_i],valid_str=[],j=0;j<filter_arr.length;j++)null!==arr[j]&&valid_str.push(database[0].indexOf(criteria[0][j])+"-"+arr[j]);valid_arr.push(valid_str)}for(var result_idx=[],_i2=1;_i2<database.length;_i2++)for(var data=database[_i2],_j=0;_j<valid_arr.length;_j++){for(var is_valid=!0,k=0;k<valid_arr[_j].length;k++){var a=data[parseInt(valid_arr[_j][k].split("-")[0])],b=valid_arr[_j][k].split("-")[1];b.indexOf("=")>=0?is_valid=a==b.replace("=",""):eval(a+b)||(is_valid=!1)}is_valid&&result_idx.push(_i2)}return result_idx}function get_values(e,t,r){if("number"==typeof r);else t[0].indexOf(r);for(var n=[],a=0;a<e.length;a++)n.push(t[e[a]][field_idx]);return n}exports.FINDFIELD=function(e,t){for(var r=null,n=0;n<e.length;n++)if(e[n][0]===t){r=n;break}return null==r?_error_config.default.ERROR_VALUE:r},exports.DAVERAGE=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;if("number"==typeof t)for(var n=[],a=1;a<e.length;a++)n.push(a);else find_result_idx(e,r);for(var i=get_values(resultIndexes,e,t),o=0,l=0;l<i.length;l++)o+=i[l];return 0===resultIndexes.length?_error_config.default.ERROR_DIV0:o/i.length},exports.DCOUNT=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.COUNT(n)},exports.DCOUNTA=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.COUNTA(n)},exports.DGET=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=find_result_idx(e,r);return n.length>1?_error_config.default.ERROR_NUM:get_values(n,e,t)[0]},exports.DMAX=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;for(var n=get_values(find_result_idx(e,r),e,t),a=n[0],i=0;i<n.length;i++)n[i]>a&&(a=n[i]);return a},exports.DMIN=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;for(var n=get_values(find_result_idx(e,r),e,t),a=n[0],i=0;i<n.length;i++)n[i]<a&&(a=n[i]);return a},exports.DPRODUCT=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;for(var n=get_values(find_result_idx(e,r),e,t),a=1,i=0;i<n.length;i++)a*=n[i];return a},exports.DSTDEV=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return n=compact(n),_statistical.default.STDEV.S(n)},exports.DSTDEVP=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return n=compact(n),_statistical.default.STDEV.P(n)},exports.DSUM=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _mathTrig.default.SUM(n)},exports.DVAR=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.VAR.S(n)},exports.DVARP=function(e,t,r){if(isNaN(t)&&"string"!=typeof t)return _error_config.default.ERROR_VALUE;var n=get_values(find_result_idx(e,r),e,t);return _statistical.default.VAR.P(n)}},function(e,t,r){"use strict";var n=r(2),a=o(r(13)),i=o(r(33));function o(e){return e&&e.__esModule?e:{default:e}}t.AND=function(){for(var e=a.default.flatten(arguments),t=!0,r=0;r<e.length;r++)e[r]||(t=!1);return t},t.CHOOSE=function(){if(arguments.length<2)return n.errorObj.ERROR_NA;var e=arguments[0];return e<1||e>254?n.errorObj.ERROR_VALUE:arguments.length<e+1?n.errorObj.ERROR_VALUE:arguments[e]},t.FALSE=function(){return!1},t.IF=function(e,t,r){return e?t:r},t.IFERROR=function(e,t){return i.default.ISERROR(e)?t:e},t.IFNA=function(e,t){return e===n.errorObj.ERROR_NA?t:e},t.NOT=function(e){return!e},t.OR=function(){for(var e=a.default.flatten(arguments),t=!1,r=0;r<e.length;r++)e[r]&&(t=!0);return t},t.TRUE=function(){return!0},t.XOR=function(){for(var e=a.default.flatten(arguments),t=0,r=0;r<e.length;r++)e[r]&&t++;return!!(1&Math.floor(Math.abs(t)))},t.SWITCH=function(){var e;if(arguments.length>0){var t=arguments[0],r=arguments.length-1,a=Math.floor(r/2),i=!1,o=r%2==0?null:arguments[arguments.length-1];if(a)for(var l=0;l<a;l++)if(t===arguments[2*l+1]){e=arguments[2*l+2],i=!0;break}!i&&o&&(e=o)}return null==e?n.errorObj.ERROR_NA:e}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=r(2),i=u(r(34)),o=u(r(13)),l=r(25);function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=a?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(r,i,o):r[i]=e[i]}return r.default=e,t&&t.set(e,r),r}function c(e){return e&&e.getTime&&!isNaN(e.getTime())}function d(e,t,r){var n=(0,l.dayNum2Date)(e),a=(0,l.dayNum2Date)(t),i=12*a.getFullYear()+a.getMonth()-12*n.getFullYear()-n.getMonth(),s=parseInt(i/(12/r)),u=o.Copy(a);u.setMonth(u.getMonth()-12*s/r);var c=o.Copy(u);return c.setMonth(u.getMonth()-12/r),{startday:c,endday:u}}function f(e,t,r,n,a){for(var i=0,o=1;o<=r;o++)i+=Math.min(a/n*(e-i),e-t-i);return i+(r-o+1)*Math.min(a/n*(e-i),e-t-i)}t.ACCRINT=function(e,t,r,n,s,u,d){"string"==typeof e&&(e=(0,l.dayNum2Date)(e));try{e=o.ExcelDateToJSDate(e),t=o.ExcelDateToJSDate(t),r=o.ExcelDateToJSDate(r)}catch(e){return a.errorObj.ERROR_VALUE}return c(e)&&c(t)&&c(r)?n<=0||s<=0?a.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(u)?a.errorObj.ERROR_NUM:-1===[0,1,2,3,4].indexOf(d)?a.errorObj.ERROR_NUM:r<=e?a.errorObj.ERROR_NUM:(d=d||0,(s=s||0)*n*i.YEARFRAC(e,r,d)):a.errorObj.ERROR_VALUE},t.ACCRINTM=function(e,t,r,n,l){try{e=o.ExcelDateToJSDate(e),t=o.ExcelDateToJSDate(t)}catch(e){return a.errorObj.ERROR_VALUE}if(r<=0||n<=0)return a.errorObj.ERROR_NUM;if(l<0||l>4)return a.errorObj.ERROR_NUM;if(t<=e)return a.errorObj.ERROR_NUM;l=l||0;var s=(n=n||0)*r*i.YEARFRAC(e,t,l);return isNaN(s)?a.errorObj.ERROR_VALUE:s},t.AMORDEGRC=function(e,t,r,n,i,o,l){return c(issue)&&c(settlement)?o<=0||par<=0?a.errorObj.ERROR_NUM:l<0||l>4?a.errorObj.ERROR_NUM:settlement<=issue?a.errorObj.ERROR_NUM:void 0:a.errorObj.ERROR_VALUE},t.AMORLINC=function(){throw new Error("AMORLINC is not implemented")},t.COUPDAYBS=function(e,t,r,n){return-1===[0,1,2,3,4].indexOf(n)?a.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?a.errorObj.ERROR_NUM:e>=t?a.errorObj.ERROR_NUM:((0,l.dayNum2Date)(e)-d(e,t,r).startday)/864e5},t.COUPDAYS=function(e,t,r,n){return-1===[0,1,2,3,4].indexOf(n)?a.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?a.errorObj.ERROR_NUM:e>=t?a.errorObj.ERROR_NUM:[0,2,4].indexOf(n)>=0?360/r:3===n?365/r:1===n?(d(e,t,r).endday-d(e,t,r).startday)/864e5:void 0},t.COUPDAYSNC=function(e,t,r,n){if(-1===[0,1,2,3,4].indexOf(n))return a.errorObj.ERROR_NUM;if(-1===[1,2,4].indexOf(r))return a.errorObj.ERROR_NUM;if(e>=t)return a.errorObj.ERROR_NUM;var i=(0,l.dayNum2Date)(e);return(d(e,t,r).endday-i)/864e5},t.COUPNCD=function(e,t,r,n){return-1===[0,1,2,3,4].indexOf(n)?a.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?a.errorObj.ERROR_NUM:e>=t?a.errorObj.ERROR_NUM:d(e,t,r).endday},t.COUPNUM=function(e,t,r,n){if(-1===[0,1,2,3,4].indexOf(n))return a.errorObj.ERROR_NUM;if(-1===[1,2,4].indexOf(r))return a.errorObj.ERROR_NUM;if(e>=t)return a.errorObj.ERROR_NUM;var i=(0,l.dayNum2Date)(e),o=(0,l.dayNum2Date)(t),s=12*o.getFullYear()+o.getMonth()-12*i.getFullYear()-i.getMonth();return parseInt(s/(12/r))+1},t.COUPPCD=function(e,t,r,n){return-1===[0,1,2,3,4].indexOf(n)?a.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(r)?a.errorObj.ERROR_NUM:e>=t?a.errorObj.ERROR_NUM:d(e,t,r).startday},t.CUMIPMT=function(e,r,n,i,s,u){if(e=(0,l.parseNumber)(e),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),o.anyIsError(e,r,n))return a.errorObj.ERROR_VALUE;if(e<=0||r<=0||n<=0)return a.errorObj.ERROR_NUM;if(i<1||s<1||i>s)return a.errorObj.ERROR_NUM;if(0!==u&&1!==u)return a.errorObj.ERROR_NUM;var c=t.PMT(e,r,n,0,u),d=0;1===i&&0===u&&(d=-n,i++);for(var f=i;f<=s;f++)d+=1===u?t.FV(e,f-2,c,n,1)-c:t.FV(e,f-1,c,n,0);return d*=e},t.CUMPRINC=function(e,r,n,i,s,u){if(e=(0,l.parseNumber)(e),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),o.anyIsError(e,r,n))return a.errorObj.ERROR_VALUE;if(e<=0||r<=0||n<=0)return a.errorObj.ERROR_NUM;if(i<1||s<1||i>s)return a.errorObj.ERROR_NUM;if(0!==u&&1!==u)return a.errorObj.ERROR_NUM;var c=t.PMT(e,r,n,0,u),d=0;1===i&&(d=0===u?c+n*e:c,i++);for(var f=i;f<=s;f++)d+=u>0?c-(t.FV(e,f-2,c,n,1)-c)*e:c-t.FV(e,f-1,c,n,0)*e;return d},t.DB=function(e,t,r,n,i){if(i=void 0===i?12:i,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),o.anyIsError(e,t,r,n,i))return a.errorObj.ERROR_VALUE;if(e<0||t<0||r<0||n<0)return a.errorObj.ERROR_NUM;if(-1===[1,2,3,4,5,6,7,8,9,10,11,12].indexOf(i))return a.errorObj.ERROR_NUM;if(n>r)return a.errorObj.ERROR_NUM;if(t>=e)return 0;for(var s=(1-Math.pow(t/e,1/r)).toFixed(3),u=e*s*i/12,c=u,d=0,f=n===r?r-1:n,m=2;m<=f;m++)c+=d=(e-c)*s;return 1===n?u:n===r?(e-c)*s:d},t.DDB=function(e,t,r,n,i){if(i=void 0===i?2:i,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),o.anyIsError(e,t,r,n,i))return a.errorObj.ERROR_VALUE;if(e<0||t<0||r<0||n<0||i<=0)return a.errorObj.ERROR_NUM;if(n>r)return a.errorObj.ERROR_NUM;if(t>=e)return 0;for(var s=0,u=0,c=1;c<=n;c++)s+=u=Math.min(i/r*(e-s),e-t-s);return u},t.DISC=function(e,t,r,n,o){if(r<=0||n<=0)return a.errorObj.ERROR_NUM;if(o<0||o>4)return a.errorObj.ERROR_NUM;if(e>=t)return a.errorObj.ERROR_NUM;return(n-r)/r*360/Math.abs(i.DAYS(t,e,!1))},t.DOLLARDE=function(e,t){if(e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),o.anyIsError(e,t))return a.errorObj.ERROR_VALUE;if(t<0)return a.errorObj.ERROR_NUM;if(t>=0&&t<1)return a.errorObj.ERROR_DIV0;t=parseInt(t,10);var r=parseInt(e,10);r+=e%1*Math.pow(10,Math.ceil(Math.log(t)/Math.LN10))/t;var n=Math.pow(10,Math.ceil(Math.log(t)/Math.LN2)+1);return r=Math.round(r*n)/n},t.DOLLARFR=function(e,t){if(e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),o.anyIsError(e,t))return a.errorObj.ERROR_VALUE;if(t<0)return a.errorObj.ERROR_NUM;if(t>=0&&t<1)return a.errorObj.ERROR_DIV0;t=parseInt(t,10);var r=parseInt(e,10);return r+=e%1*Math.pow(10,-Math.ceil(Math.log(t)/Math.LN10))*t},t.DURATION=function(e,t,r,n,i,o){return e=(0,l.dayNum2Date)(e),c(t=(0,l.dayNum2Date)(t))&&c(e)?o<0||o>4?a.errorObj.ERROR_NUM:e>=t?a.errorObj.ERROR_NUM:void 0:a.errorObj.ERROR_VALUE},t.EFFECT=function(e,t){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),o.anyIsError(e,t)?a.errorObj.ERROR_VALUE:e<=0||t<1?a.errorObj.ERROR_NUM:(t=parseInt(t,10),Math.pow(1+e/t,t)-1)},t.FV=function(e,t,r,n,i){if(n=n||0,i=i||0,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),o.anyIsError(e,t,r,n,i))return a.errorObj.ERROR_VALUE;var s;if(0===e)s=n+r*t;else{var u=Math.pow(1+e,t);s=1===i?n*u+r*(1+e)*(u-1)/e:n*u+r*(u-1)/e}return-s},t.FVSCHEDULE=function(e,t){if(e=(0,l.parseNumber)(e),"string"==typeof t&&(t=o.strToMatrix(t)),t=parseNumberArray(o.flatten(t)),o.anyIsError(e,t))return a.errorObj.ERROR_VALUE;for(var r=t.length,n=e,i=0;i<r;i++)n*=1+t[i];return n},t.INTRATE=function(e,t,r,n,i){if(r<=0||n<=0)return a.errorObj.ERROR_VALUE;if(i<0||i>4)return a.errorObj.ERROR_NUM;if(e>=t)return a.errorObj.ERROR_NUM;return(n-r)/r*.5},t.IPMT=function(e,r,n,i,s,u){if(s=s||0,u=u||0,e=(0,l.parseNumber)(e),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),s=(0,l.parseNumber)(s),u=(0,l.parseNumber)(u),o.anyIsError(e,r,n,i,s,u))return a.errorObj.ERROR_VALUE;var c=t.PMT(e,n,i,s,u);return(1===r?1===u?0:-i:1===u?t.FV(e,r-2,c,i,1)-c:t.FV(e,r-1,c,i,0))*e},t.IRR=function(e,t){if(t=t||0,e=parseNumberArray(o.flatten(e)),t=(0,l.parseNumber)(t),o.anyIsError(e,t))return a.errorObj.ERROR_VALUE;for(var r=function(e,t,r){for(var n=r+1,a=e[0],i=1;i<e.length;i++)a+=e[i]/Math.pow(n,(t[i]-t[0])/365);return a},n=function(e,t,r){for(var n=r+1,a=0,i=1;i<e.length;i++){var o=(t[i]-t[0])/365;a-=o*e[i]/Math.pow(n,o+1)}return a},i=[],s=!1,u=!1,c=0;c<e.length;c++)i[c]=0===c?0:i[c-1]+365,e[c]>0&&(s=!0),e[c]<0&&(u=!0);if(!s||!u)return a.errorObj.ERROR_NUM;var d,f,m,h=t=void 0===t?.1:t,v=!0;do{d=h-(m=r(e,i,h))/n(e,i,h),f=Math.abs(d-h),h=d,v=f>1e-10&&Math.abs(m)>1e-10}while(v);return h},t.ISPMT=function(e,t,r,n){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),o.anyIsError(e,t,r,n)?a.errorObj.ERROR_VALUE:n*e*(t/r-1)},t.MDURATION=function(e,t,r,n,i,o){return r<0||n<0?a.errorObj.ERROR_NUM:o<0||o>4?a.errorObj.ERROR_NUM:-1===[1,2,4].indexOf(i)?a.errorObj.ERROR_NUM:void 0},t.MIRR=function(e,r,n){if(e=parseNumberArray(o.flatten(e)),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),o.anyIsError(e,r,n))return a.errorObj.ERROR_VALUE;for(var i=e.length,s=[],u=[],c=0;c<i;c++)e[c]<0?s.push(e[c]):u.push(e[c]);var d=-t.NPV(n,u)*Math.pow(1+n,i-1),f=t.NPV(r,s)*(1+r);return Math.pow(d/f,1/(i-1))-1},t.NOMINAL=function(e,t){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),o.anyIsError(e,t)?a.errorObj.ERROR_VALUE:e<=0||t<1?a.errorObj.ERROR_NUM:(t=parseInt(t,10),(Math.pow(e+1,1/t)-1)*t)},t.NPER=function(e,t,r,n,i){if(i=void 0===i?0:i,n=void 0===n?0:n,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),o.anyIsError(e,t,r,n,i))return a.errorObj.ERROR_VALUE;var s=t*(1+e*i)-n*e,u=r*e+t*(1+e*i);return Math.log(s/u)/Math.log(1+e)},t.NPV=function(){var e=parseNumberArray(o.flatten(arguments));if(e instanceof Error)return e;for(var t=e[0],r=0,n=1;n<e.length;n++)r+=e[n]/Math.pow(1+t,n);return r},t.ODDFPRICE=function(){throw new Error("ODDFPRICE is not implemented")},t.ODDFYIELD=function(){throw new Error("ODDFYIELD is not implemented")},t.ODDLPRICE=function(){throw new Error("ODDLPRICE is not implemented")},t.ODDLYIELD=function(){throw new Error("ODDLYIELD is not implemented")},t.PDURATION=function(e,t,r){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r)?a.errorObj.ERROR_VALUE:e<=0?a.errorObj.ERROR_NUM:(Math.log(r)-Math.log(t))/Math.log(1+e)},t.PMT=function(e,t,r,n,i){if(n=n||0,i=i||0,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),o.anyIsError(e,t,r,n,i))return a.errorObj.ERROR_VALUE;var s;if(0===e)s=(r+n)/t;else{var u=Math.pow(1+e,t);s=1===i?(n*e/(u-1)+r*e/(1-1/u))/(1+e):n*e/(u-1)+r*e/(1-1/u)}return-s},t.PPMT=function(e,r,n,i,s,u){return s=s||0,u=u||0,e=(0,l.parseNumber)(e),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),s=(0,l.parseNumber)(s),u=(0,l.parseNumber)(u),o.anyIsError(e,n,i,s,u)?a.errorObj.ERROR_VALUE:t.PMT(e,n,i,s,u)-t.IPMT(e,r,n,i,s,u)},t.PRICE=function(e,t,r,n,i,s,u){var c=(0,l.dayNum2Date)(e),d=(0,l.dayNum2Date)(t);if(o.anyIsError(c,d))return a.errorObj.ERROR_VALUE;if(u<0||u>4)return a.errorObj.ERROR_NA;if(c>=d)return a.errorObj.ERROR_NA;var f=12*d.getFullYear()+d.getMonth()-12*c.getFullYear()-c.getMonth(),m=parseInt(f/(12/s)),h=o.Copy(d);h.setMonth(h.getMonth()-12*m/s);var v=o.Copy(h);v.setMonth(v.getMonth()-12/s);var p=(h-c)/864e5,y=(h-v)/864e5,g=(c-v)/864e5;if(m>1){for(var b=i/(1+n/s^m-1+p/y)-100*r*g/(s*y),E=100*r/(s*(1+n/s^p/y)),R=2;R<=m;R++)E+=100*r/(s*(1+n/s^R-1+p/y));return b+E}return 1==m?(100*r/s+i)/(n*(y-g)/s/y+1)-100*r*g/s/y:void 0},t.PRICEDISC=function(e,t,r,n,s){return e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),o.anyIsError(e,t)?a.errorObj.ERROR_VALUE:s<0||s>4?a.errorObj.ERROR_NA:e>=t?a.errorObj.ERROR_NA:n-r*n*Math.abs(i.DAYS(e,t,!1))/360},t.PRICEMAT=function(e,t,r,n,s,u){if(e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),r=(0,l.dayNum2Date)(r),o.anyIsError(e,t))return a.errorObj.ERROR_VALUE;if(u<0||u>4)return a.errorObj.ERROR_NA;if(e>=t)return a.errorObj.ERROR_NA;var c=Math.abs(i.DAYS(e,t,!1));return(100+Math.abs(i.DAYS(t,r,!1))/360*n*100)/(1+c/360*s)-Math.abs(i.DAYS(r,e,!1))/360*n*100},t.PV=function(e,t,r,n,i){return n=n||0,i=i||0,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),o.anyIsError(e,t,r,n,i)?a.errorObj.ERROR_VALUE:0===e?-r*t-n:((1-Math.pow(1+e,t))/e*r*(1+e*i)-n)/Math.pow(1+e,t)},t.RATE=function(e,t,r,n,i,s){if(s=void 0===s?.01:s,n=void 0===n?0:n,i=void 0===i?0:i,e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),i=(0,l.parseNumber)(i),s=(0,l.parseNumber)(s),o.anyIsError(e,t,r,n,i,s))return a.errorObj.ERROR_VALUE;for(var u=0,c=!1,d=s;u<100&&!c;){var f=Math.pow(d+1,e),m=Math.pow(d+1,e-1),h=d-(n+f*r+t*(f-1)*(d*i+1)/d)/(e*m*r-t*(f-1)*(d*i+1)/Math.pow(d,2)+(e*t*m*(d*i+1)/d+t*(f-1)*i/d));Math.abs(h-d)<1e-6&&(c=!0),u++,d=h}return c?d:Number.NaN+d},t.RECEIVED=function(e,t,r,n,s){return e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),o.anyIsError(e,t)?a.errorObj.ERROR_VALUE:r<=0||n<=0?a.errorObj.ERROR_NA:s<0||s>4?a.errorObj.ERROR_NA:e>=t?a.errorObj.ERROR_NA:r/(1-n*Math.abs(i.DAYS(e,t,!1))/360)},t.RRI=function(e,t,r){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r)?a.errorObj.ERROR_VALUE:0===e||0===t?a.errorObj.ERROR_NUM:Math.pow(r/t,1/e)-1},t.SLN=function(e,t,r){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r)?a.errorObj.ERROR_VALUE:0===r?a.errorObj.ERROR_NUM:(e-t)/r},t.SYD=function(e,t,r,n){return e=(0,l.parseNumber)(e),t=(0,l.parseNumber)(t),r=(0,l.parseNumber)(r),n=(0,l.parseNumber)(n),o.anyIsError(e,t,r,n)?a.errorObj.ERROR_VALUE:0===r?a.errorObj.ERROR_NUM:n<1||n>r?a.errorObj.ERROR_NUM:(e-t)*(r-(n=parseInt(n,10))+1)*2/(r*(r+1))},t.TBILLEQ=function(e,t,r){return e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r)?a.errorObj.ERROR_VALUE:r<=0?a.errorObj.ERROR_NUM:e>t?a.errorObj.ERROR_NUM:t-e>31536e6?a.errorObj.ERROR_NUM:365*r/(360-r*i.DAYS360(e,t,!1))},t.TBILLPRICE=function(e,t,r){return e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r)?a.errorObj.ERROR_VALUE:r<=0?a.errorObj.ERROR_NUM:e>t?a.errorObj.ERROR_NUM:t-e>31536e6?a.errorObj.ERROR_NUM:100*(1-r*i.DAYS360(e,t,!1)/360)},t.TBILLYIELD=function(e,t,r){return e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r)?a.errorObj.ERROR_VALUE:r<=0?a.errorObj.ERROR_NUM:e>t?a.errorObj.ERROR_NUM:t-e>31536e6?a.errorObj.ERROR_NUM:360*(100-r)/(r*i.DAYS360(e,t,!1))},t.get_total=f,t.VDB=function(e,t,r,n,i,l,s){var u=void 0===l?2:l,c=e,d=t,m=r,h=n,v=i;return o.anyIsError(c,d,m,h,v,u)?a.errorObj.ERROR_VALUE:c<0||d<0||m<0||h<0||u<=0?a.errorObj.ERROR_NUM:h>m?a.errorObj.ERROR_NUM:d>=c?0:f(c,d,v,m,u)-f(c,d,h,m,u)},t.XIRR=function(e,t,r){if(e=parseNumberArray(o.flatten(e)),t=o.parseDateArray(o.flatten(t)),r=(0,l.parseNumber)(r),o.anyIsError(e,t,r))return a.errorObj.ERROR_VALUE;for(var n=function(e,t,r){for(var n=r+1,a=e[0],o=1;o<e.length;o++)a+=e[o]/Math.pow(n,i.DAYS(t[o],t[0])/365);return a},s=function(e,t,r){for(var n=r+1,a=0,o=1;o<e.length;o++){var l=i.DAYS(t[o],t[0])/365;a-=l*e[o]/Math.pow(n,l+1)}return a},u=!1,c=!1,d=0;d<e.length;d++)e[d]>0&&(u=!0),e[d]<0&&(c=!0);if(!u||!c)return a.errorObj.ERROR_NUM;var f,m,h,v=r=r||.1,p=!0;do{f=v-(h=n(e,t,v))/s(e,t,v),m=Math.abs(f-v),v=f,p=m>1e-10&&Math.abs(h)>1e-10}while(p);return v},t.XNPV=function(e,t,r){if(e=(0,l.parseNumber)(e),t=parseNumberArray(o.flatten(t)),r=o.parseDateArray(o.flatten(r)),o.anyIsError(e,t,r))return a.errorObj.ERROR_VALUE;for(var n=0,s=0;s<t.length;s++)n+=t[s]/Math.pow(1+e,i.DAYS(r[s],r[0])/365);return n},t.YIELD=function(e,t,r,n,s,u,c){if(e=(0,l.dayNum2Date)(e),t=(0,l.dayNum2Date)(t),o.anyIsError(e,t))return a.errorObj.ERROR_VALUE;if(r<=0)return a.errorObj.ERROR_NUM;if(n<=0)return a.errorObj.ERROR_NUM;if(s<=0)return a.errorObj.ERROR_NUM;if(e>=t)return a.errorObj.ERROR_NUM;Math.abs(i.DAYS(e,t,!1))},t.YIELDDISC=function(e,t,r,n,i){var s=(0,l.dayNum2Date)(e),u=(0,l.dayNum2Date)(t);if(o.anyIsError(s,u))return a.errorObj.ERROR_VALUE;if(r<=0)return a.errorObj.ERROR_NUM;if(n<=0)return a.errorObj.ERROR_NUM;if(s>=u)return a.errorObj.ERROR_NUM;if(-1===[0,1,2,3,4].indexOf(i))return a.errorObj.ERROR_NUM;if(1===i){var c=s.getFullYear();return 0!=c%4||c%100==0&&c%400!=0?(n-r)/r/(u-s)*365*864e5:(n-r)/r/(u-s)*366*864e5}return 2===i?(n-r)/r/(u-s)*360*864e5:3===i?(n-r)/r/(u-s)*365*864e5:0===i||4===i?(n-r)/r/(30*(12*u.getFullYear()+u.getMonth()-12*s.getFullYear()-s.getMonth()-1)+30-s.getDay()+u.getDay())*360:void 0},t.YIELDMAT=function(){throw new Error("YIELDMAT is not implemented")},t.FACTORIAL=function(e){for(var t=1,r=e;r>=1;r--)t*=r;return t}},function(e,t,r){"use strict";var n,a=r(2),i=(n=r(13))&&n.__esModule?n:{default:n};function o(e,t){for(var r,n,i=0;i<e.length;i++){if(e[i]===t)return i+1;e[i]<t&&(n?e[i]>n&&(r=i+1,n=e[i]):(r=i+1,n=e[i]))}return r||a.errorObj.ERROR_NA}function l(e,t){for(var r=0;r<e.length;r++)if(t=t.replace(/\?/g,"."),Array.isArray(e[r])){if(1===e[r].length&&"string"==typeof e[r][0]&&e[r][0].toLowerCase()===t.toLowerCase())return r+1}else if("string"==typeof e[r]&&e[r].toLowerCase()===t.toLowerCase())return r+1;return a.errorObj.ERROR_NA}function s(e,t){for(var r=0;r<e.length;r++)if(Array.isArray(e[r])){if(1===e[r].length&&e[r][0]===t)return r+1}else if(e[r]===t)return r+1;return a.errorObj.ERROR_NA}function u(e,t){for(var r,n,i=0;i<e.length;i++){if(e[i]===t)return i+1;e[i]>t&&(n?e[i]<n&&(r=i+1,n=e[i]):(r=i+1,n=e[i]))}return r||a.errorObj.ERROR_NA}t.MATCH=function(e,t,r){if(Array.isArray(t)&&1===t.length&&Array.isArray(t[0])&&(t=t[0]),!e&&!t)return a.errorObj.ERROR_NA;if(2===arguments.length&&(r=1),!(t instanceof Array))return a.errorObj.ERROR_NA;if(0===r)return"string"==typeof e?l(t,e):s(t,e);if(1===r)return o(t,e);if(-1===r){for(var n=t[0][0],i=1;i<t.length;i++)if(t[i][0]>n)return a.errorObj.ERROR_NA;return u(t,e)}return a.errorObj.ERROR_NA},t.VLOOKUP=function(e,t,r,n){if("string"==typeof n&&"FALSE"!=n&&"TRUE"!=n)return a.errorObj.ERROR_VALUE;n="FALSE"!=n;for(var i=0;i<t.length;i++)if(t[i][0]==e)return t[i][r-1];return a.errorObj.ERROR_NA},t.HLOOKUP=function(e,t,r,n){if("TRUE"==n&&(n=!0),"FALSE"==n&&(n=!1),"string"==typeof t&&t.indexOf("{")>=0&&(t=i.default.strToMatrix(t)),void 0===e||t[0].indexOf(e)<0)return a.errorObj.ERROR_NA;r=r||0;for(var o=t[0],l=0;l<o.length;l++)if(n&&o[l]===e||-1!==o[l].toString().toLowerCase().indexOf(e.toString().toLowerCase()))return r<t.length+1?t[r-1][l]:t[0][l];return a.errorObj.ERROR_NA}},function(e,t,r){"use strict";var n=r(2);function a(e,t,r){this.name=e,this.type=t,this.url=r}t.PQUERY=function(){if(5!==arguments.length)return n.errorObj.ERROR_ERROR;if(arguments[0].length!==arguments[1].length)return n.errorObj.ERROR_ERROR;if(arguments[1].length!==arguments[3].length)return n.errorObj.ERROR_ERROR;for(var e=[],t=arguments[4],r=0;r<arguments[3].length;r++)arguments[3][r]=parseFloat(arguments[3][r]),isNaN(arguments[3][r])||e.push({number:r,value:Math.abs(arguments[3][r]-t)});e=e.sort((function(e,t){var r=e.value,n=t.value;return r<n?-1:r>n?1:0}));for(var a=[],i=1,o=0;o<e.length;o++){var l=e[o],s=l.number,u=l.value,c=arguments[0][s][0],d=arguments[1][s][0],f=arguments[3][s];d===arguments[2]&&(a.push({number:i,name:c,city:d,area:f,value:u}),i+=1)}return"*悬浮查看*!"+JSON.stringify(a)},t.HYPERLINK=function(){if(console.log(arguments),!arguments||!arguments[0]||!arguments[1])return n.errorObj.ERROR_NA;var e=arguments[0];e="http://"==e.substr(0,7).toLowerCase()||"https://"==e.substr(0,8).toLowerCase()?e:"http://"+e;var t={text:arguments[1],url:e};return"*HYPERLINK*!"+JSON.stringify(t)+" "};!function(e){e.push(new a("合肥",0,"https://hf.lianjia.com/ditu")),e.push(new a("安庆",0,"https://aq.lianjia.com/ditu")),e.push(new a("滁州",0,"https://cz.fang.lianjia.com/ditu/")),e.push(new a("马鞍山",0,"https://mas.lianjia.com/ditu")),e.push(new a("北京",0,"https://bj.lianjia.com/ditu")),e.push(new a("重庆",0,"https://cq.lianjia.com/ditu")),e.push(new a("福州",0,"https://fz.lianjia.com/ditu")),e.push(new a("泉州",0,"https://quanzhou.lianjia.com/ditu")),e.push(new a("厦门",0,"https://xm.lianjia.com/ditu")),e.push(new a("漳州",0,"https://zhangzhou.lianjia.com/ditu")),e.push(new a("东莞",0,"https://dg.lianjia.com/ditu")),e.push(new a("佛山",0,"https://fs.lianjia.com/ditu")),e.push(new a("广州",0,"https://gz.lianjia.com/ditu")),e.push(new a("惠州",0,"https://hui.lianjia.com/ditu")),e.push(new a("江门",0,"https://jiangmen.lianjia.com/ditu")),e.push(new a("清远",0,"https://qy.lianjia.com/ditu")),e.push(new a("深圳",0,"https://sz.lianjia.com/ditu")),e.push(new a("珠海",0,"https://zh.lianjia.com/ditu")),e.push(new a("湛江",0,"https://zhanjiang.lianjia.com/ditu")),e.push(new a("中山",0,"https://zs.lianjia.com/ditu")),e.push(new a("贵阳",0,"https://gy.lianjia.com/ditu")),e.push(new a("北海",0,"https://bh.lianjia.com/ditu")),e.push(new a("防城港",0,"https://fcg.lianjia.com/ditu")),e.push(new a("桂林",0,"https://gl.lianjia.com/ditu")),e.push(new a("柳州",0,"https://liuzhou.lianjia.com/ditu")),e.push(new a("南宁",0,"https://nn.lianjia.com/ditu")),e.push(new a("兰州",0,"https://lz.lianjia.com/ditu")),e.push(new a("鄂州",0,"https://ez.lianjia.com/ditu")),e.push(new a("黄石",0,"https://huangshi.lianjia.com/ditu")),e.push(new a("武汉",0,"https://wh.lianjia.com/ditu")),e.push(new a("襄阳",0,"https://xy.lianjia.com/ditu")),e.push(new a("宜昌",0,"https://yichang.lianjia.com/ditu")),e.push(new a("长沙",0,"https://cs.lianjia.com/ditu")),e.push(new a("常德",0,"https://changde.lianjia.com/ditu")),e.push(new a("岳阳",0,"https://yy.lianjia.com/ditu")),e.push(new a("株洲",0,"https://zhuzhou.lianjia.com/ditu")),e.push(new a("保定",0,"https://bd.lianjia.com/ditu")),e.push(new a("廊坊",0,"https://lf.lianjia.com/ditu")),e.push(new a("秦皇岛",0,"https://qhd.fang.lianjia.com/ditu")),e.push(new a("石家庄",0,"https://sjz.lianjia.com/ditu")),e.push(new a("唐山",0,"https://ts.lianjia.com/ditu")),e.push(new a("张家口",0,"https://zjk.lianjia.com/ditu")),e.push(new a("保亭",0,"https://bt.fang.lianjia.com/ditu")),e.push(new a("澄迈",0,"https://cm.fang.lianjia.com/ditu")),e.push(new a("儋州",0,"https://dz.fang.lianjia.com/ditu")),e.push(new a("海口",0,"https://hk.lianjia.com/ditu")),e.push(new a("临高",0,"https://lg.fang.lianjia.com/ditu")),e.push(new a("乐东",0,"https://ld.fang.lianjia.com/ditu")),e.push(new a("陵水",0,"https://ls.fang.lianjia.com/ditu")),e.push(new a("琼海",0,"https://qh.fang.lianjia.com/ditu")),e.push(new a("三亚",0,"https://san.lianjia.com/ditu")),e.push(new a("五指山",0,"https://wzs.fang.lianjia.com/ditu")),e.push(new a("文昌",0,"https://wc.fang.lianjia.com/ditu")),e.push(new a("万宁",0,"https://wn.fang.lianjia.com/ditu")),e.push(new a("开封",0,"https://kf.lianjia.com/ditu")),e.push(new a("洛阳",0,"https://luoyang.lianjia.com/ditu")),e.push(new a("新乡",0,"https://xinxiang.lianjia.com/ditu")),e.push(new a("许昌",0,"https://xc.lianjia.com/ditu")),e.push(new a("郑州",0,"https://zz.lianjia.com/ditu")),e.push(new a("哈尔滨",0,"https://kf.lianjia.com/ditu")),e.push(new a("常州",0,"https://changzhou.lianjia.com/ditu")),e.push(new a("淮安",0,"https://ha.lianjia.com/ditu")),e.push(new a("昆山",0,"https://ks.lianjia.com/ditu")),e.push(new a("南京",0,"https://nj.lianjia.com/ditu/")),e.push(new a("南通",0,"https://nt.lianjia.com/ditu")),e.push(new a("苏州",0,"https://su.lianjia.com/ditu")),e.push(new a("无锡",0,"https://wx.lianjia.com/ditu")),e.push(new a("徐州",0,"https://xz.lianjia.com/ditu")),e.push(new a("盐城",0,"https://yc.lianjia.com/ditu")),e.push(new a("镇江",0,"https://zj.lianjia.com/ditu")),e.push(new a("长春",0,"https://cc.lianjia.com/ditu/")),e.push(new a("吉林",0,"https://jl.lianjia.com/ditu")),e.push(new a("赣州",0,"https://ganzhou.lianjia.com/ditu")),e.push(new a("九江",0,"https://jiujiang.lianjia.com/ditu")),e.push(new a("吉安",0,"https://jian.lianjia.com/ditu")),e.push(new a("南昌",0,"https://nc.lianjia.com/ditu")),e.push(new a("上饶",0,"https://sr.lianjia.com/ditu")),e.push(new a("大连",0,"https://dl.lianjia.com/ditu")),e.push(new a("丹东",0,"https://dd.lianjia.com/ditu")),e.push(new a("沈阳",0,"https://sy.lianjia.com/ditu")),e.push(new a("呼和浩特",0,"https://hhht.lianjia.com/ditu")),e.push(new a("银川",0,"https://yinchuan.lianjia.com/ditu")),e.push(new a("银川",0,"https://yinchuan.lianjia.com/ditu")),e.push(new a("上海",0,"https://sh.lianjia.com/ditu")),e.push(new a("成都",0,"https://cd.lianjia.com/ditu")),e.push(new a("德阳",0,"https://dy.fang.lianjia.com/ditu")),e.push(new a("达州",0,"https://dazhou.lianjia.com/ditu")),e.push(new a("乐山",0,"https://leshan.fang.lianjia.com/ditu")),e.push(new a("凉山",0,"https://liangshan.lianjia.com/ditu")),e.push(new a("绵阳",0,"https://mianyang.lianjia.com/ditu")),e.push(new a("眉山",0,"https://ms.fang.lianjia.com/ditu")),e.push(new a("南充",0,"https://nanchong.lianjia.com/ditu")),e.push(new a("济南",0,"https://jn.lianjia.com/ditu")),e.push(new a("临沂",0,"https://linyi.lianjia.com/ditu")),e.push(new a("青岛",0,"https://qd.lianjia.com/ditu")),e.push(new a("潍坊",0,"https://wf.lianjia.com/ditu")),e.push(new a("威海",0,"https://weihai.lianjia.com/ditu")),e.push(new a("烟台",0,"https://yt.lianjia.com/ditu")),e.push(new a("淄博",0,"https://zb.lianjia.com/ditu")),e.push(new a("宝鸡",0,"https://baoji.lianjia.com/ditu")),e.push(new a("汉中",0,"https://hanzhong.lianjia.com/ditu")),e.push(new a("西安",0,"https://xa.lianjia.com/ditu")),e.push(new a("咸阳",0,"https://xianyang.lianjia.com/ditu")),e.push(new a("晋中",0,"https://jz.fang.lianjia.com/ditu")),e.push(new a("太原",0,"https://ty.lianjia.com/ditu")),e.push(new a("天津",0,"https://tj.lianjia.com/ditu")),e.push(new a("大理",0,"https://dali.lianjia.com/ditu")),e.push(new a("昆明",0,"https://km.lianjia.com/ditu")),e.push(new a("西双版纳",0,"https://xsbn.fang.lianjia.com/ditu")),e.push(new a("杭州",0,"https://hz.lianjia.com/ditu")),e.push(new a("湖州",0,"https://huzhou.lianjia.com/ditu")),e.push(new a("嘉兴",0,"https://jx.lianjia.com/ditu")),e.push(new a("金华",0,"https://jh.lianjia.com/ditu")),e.push(new a("宁波",0,"https://nb.lianjia.com/ditu")),e.push(new a("绍兴",0,"https://sx.lianjia.com/ditu")),e.push(new a("台州",0,"https://taizhou.lianjia.com/ditu")),e.push(new a("温州",0,"https://wz.lianjia.comditu"))}([]);!function(e){e.push(new a("北京",0,"https://bj.5i5j.com/map")),e.push(new a("杭州",0,"https://hz.5i5j.com/map")),e.push(new a("青岛",0,"https://qd.5i5j.com/map")),e.push(new a("天津",0,"https://tj.5i5j.com/map")),e.push(new a("太原",0,"https://zz.5i5j.com/map")),e.push(new a("郑州",0,"https://zz.5i5j.com/map")),e.push(new a("成都",0,"https://cd.5i5j.com/map")),e.push(new a("长沙",0,"https://cs.5i5j.com/map")),e.push(new a("南昌",0,"https://nc.5i5j.com/map")),e.push(new a("南京",0,"https://nj.5i5j.com/map")),e.push(new a("南宁",0,"https://nn.5i5j.com/map")),e.push(new a("上海",0,"https://sh.5i5j.com/map")),e.push(new a("苏州",0,"https://sz.5i5j.com/map")),e.push(new a("武汉",0,"https://wh.5i5j.com/map")),e.push(new a("无锡",0,"https://wx.5i5j.com/map"))}([]);!function(e){e.push(new a("全国",0,"https://www1.fang.com"))}([])},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.raw_offset=function(e,t,r,l,s){if(l=(l||new n.RawValue(1)).solveExpression(),s=(s||new n.RawValue(1)).solveExpression(),1===e.args.length&&"RefValue"===e.args[0].name){var u=e.args[0],c=u.getRefCalcCell(),d=new o.ColIndexProxy(c.cell_name).colNum+r.solveExpression(),f=new o.ColIndexProxy(d).colStr,m=+c.cell_name.replace(/^[A-Z]+/g,"")+t.solveExpression(),h=f+m;if(1===l&&1===s)return new i.RefValue(h,u.cellFormulaProxy).solveExpression();var v=new o.ColIndexProxy(d+s-1).colStr+(m+l-1),p=c.sheet_name+"!"+h+":"+v;return new a.Range(p,u.cellFormulaProxy).solveExpression()}},t.iferror=function(e,t){try{var r=e.solveExpression();return"number"!=typeof r||!isNaN(r)&&r!==1/0&&r!==-1/0?r:t.solveExpression()}catch(e){return t.solveExpression()}},t._if=function(e,t,r){return e.solveExpression()?t.solveExpression():r.solveExpression()},t.and=function(){for(var e=0;e<arguments.length;e++)if(!arguments[e].solveExpression())return!1;return!0};var n=r(35),a=r(36),i=r(55),o=r(54)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleExpressionBuilder=void 0;var n=r(7),a=r(2),i=r(20),o=(r(47),r(58));function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}var c=function(){function e(t){l(this,e),this.parseArray=[o.ForceString,o.BoolParser,o.DateTimeParser,o.MoneyParser,o.NumberParser],this.rootExp=new d(this.calcCell),this.calcCell=t}return u(e,[{key:"parseFormula",value:function(){return this.rootExp=new d(this.calcCell,this.calcCell.formulaString,this.parseArray),this.rootExp.parseExpression(),this.rootExp}}]),e}();t.SimpleExpressionBuilder=c;var d=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2?arguments[2]:void 0;l(this,e),this.expStatus=n.FORMULA_STATUS.created,this.calcCell=t,this.strToParse=r,this.parserArray=i,this.parseRes="",this.expSolution=a.ERROR_NON_SOLVED}return u(e,[{key:"parseExpression",value:function(){var e,t=!0,r=!1,n=void 0;try{for(var i,o=this.parserArray[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){if((e=new(0,i.value)(this.calcCell,this.strToParse).parseString()).msg!==a.PARSE_FAIL)return this.parseRes=e,e}}catch(e){r=!0,n=e}finally{try{t||null==o.return||o.return()}finally{if(r)throw n}}return this.parseRes=this.strToParse,this.strToParse}},{key:"isEmpty",value:function(){return""===this.strToParse}},{key:"solveExpression",value:function(){return this.isEmpty()?this.expSolution=new i.CellVEmpty:this.expSolution=(0,i.convertToCellV)(this.parseRes),this.expStatus=n.FORMULA_STATUS.solved,this.expSolution}},{key:"update_cell_value",value:function(){return this.calcCell.cellObj.v=this.solveExpression(),this.calcCell.cellObj.v}}]),e}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.str2Value=g,t.push2ExpArgs=b,t.StructuralExpressionBuilder=void 0;var n=r(106),a=r(35),i=r(7),o=r(36),l=r(55),s=r(58),u=r(2),c=r(20),d=r(37);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e,t,r){return t&&h(e.prototype,t),r&&h(e,r),e}var p=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];m(this,e),this.stackArray=t}return v(e,[{key:"addStack",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:NaN;this.stackArray.push({exp:e,fnExecutor:t})}},{key:"popStack",value:function(){return this.stackArray.pop()}},{key:"isFnExecutorValid",value:function(e){var t=f(e);return!1===["number","undefined"].includes(t)}},{key:"getLastStack",value:function(){return this.stackArray[this.stackArray.length-1]}},{key:"getLastExpression",value:function(){this.getLastStack();return this.getLastStack().exp}},{key:"getLastFnExecutor",value:function(){return this.getLastStack().fnExecutor}},{key:"isLastFnExecutorValid",value:function(){return this.isFnExecutorValid(this.getLastFnExecutor())}}]),e}(),y=function(){function e(t,r){m(this,e),this.multiCollFn=r,this.calcCell=t,this.root_exp=new n.StructuralExp(t),this.curExpression=this.root_exp,this.buffer="",this.stackProxy=new p,this.stackProxy.addStack(this.curExpression),this.position_i=0,this.state=this.normalState,this.last_arg=""}return v(e,[{key:"returnToNormalState",value:function(e){this.state=this.normalState,this.normalState(e)}},{key:"isLastArgOperator",value:function(){return""!==this.last_arg&&"string"==typeof this.last_arg}},{key:"isBufferEmpty",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return e?""===this.buffer.trim():""===this.buffer}},{key:"pushOperator2ExpArgs",value:function(e){this.curExpression.args.push(e),this.last_arg=e}},{key:"stringState",value:function(e){e===i.MARK_OBJ.doubleQue?this.state=this.stringMayEndState:this.buffer+=e}},{key:"stringMayEndState",value:function(e){e===i.MARK_OBJ.doubleQue?(this.buffer+=i.MARK_OBJ.doubleQue,this.state=this.stringState):(b(this.curExpression,new a.RawValue(this.buffer)),this.buffer="",this.returnToNormalState(e))}},{key:"sheetNameState",value:function(e){"'"===e&&(this.state=this.sheetNameMayEndState),this.buffer+=e}},{key:"sheetNameMayEndState",value:function(e){this.buffer+="'","'"===e?this.state=this.sheetNameState:this.returnToNormalState(e)}},{key:"initOperator",value:function(e){""!==this.buffer.trim()&&b(this.curExpression,this.buffer,this.position_i),this.buffer=e,this.state=this.endOperator}},{key:"endOperator",value:function(e){this.buffer+e in[">=","<=","<>"]?(this.pushOperator2ExpArgs(this.buffer+e),this.buffer=""):(this.pushOperator2ExpArgs(this.buffer),this.buffer="",this.returnToNormalState(e))}},{key:"endFnArg",value:function(){b(this.stackProxy.getLastExpression(),this.buffer,this.position_i),this.stackProxy.getLastFnExecutor().push(this.stackProxy.getLastExpression()),this.stackProxy.getLastStack().exp=this.curExpression=new n.StructuralExp(this.calcCell),this.buffer=""}},{key:"initParentheses",value:function(){var e,t,r=new n.StructuralExp(this.calcCell);this.isBufferEmpty()?t=NaN:(e=this.buffer.trim(),t=this.multiCollFn.getFnExecutorByName(e)),this.stackProxy.addStack(r,t),this.curExpression=r,this.buffer=""}},{key:"endParentheses",value:function(){var e=this.stackProxy.popStack(),t=e.exp;b(t,this.buffer),this.curExpression=this.stackProxy.getLastExpression(),this.stackProxy.isFnExecutorValid(e.fnExecutor)?(e.fnExecutor.push(t),b(this.curExpression,e.fnExecutor,this.position_i)):b(this.curExpression,t,this.position_i),this.buffer=""}},{key:"initBrace",value:function(){""!==this.buffer.trim()&&b(this.curExpression,this.buffer),this.state=this.insideBrace,this.buffer=""}},{key:"insideBrace",value:function(e){"}"===e?(b(this.curExpression,new d.RawArray(this.buffer)),this.buffer="",this.state=this.normalState):this.buffer+=e}},{key:"normalState",value:function(e){'"'===e?(this.state=this.stringState,this.buffer=""):"'"===e?(this.buffer+=e,this.state=this.sheetNameState):"{"===e?this.initBrace():"("===e?this.initParentheses():")"===e?this.endParentheses():"%"!==e&&Object.values(i.SINGLE_CHAR_OPERATOR).includes(e)?this.initOperator(e):","===e&&this.stackProxy.isLastFnExecutorValid()?this.endFnArg():this.buffer+=e}},{key:"dealEnd",value:function(){this.state.name===this.stringMayEndState.name?b(this.curExpression,new a.RawValue(this.buffer)):b(this.root_exp,this.buffer,this.position_i)}},{key:"parseFormula",value:function(){var e=this.calcCell.formulaString.slice(1);if("{"===e[0]&&"}"===e[e.length-1])return b(this.root_exp,new a.RawValue(new Error(u.ERROR_SYNTAX))),this.root_exp;for(;this.position_i<e.length;this.position_i++)this.state(e[this.position_i]);return this.dealEnd(),this.root_exp}}]),e}();function g(e,t,r){console.assert("string"==typeof e);var n=new s.BoolParser(t,e).parseString();return n.msg!==u.PARSE_FAIL?new a.RawValue((0,c.CellVBool)(n)):e.trim().replace(/\$/g,"").match(/^[A-Z]+[0-9]+:[A-Z]+[0-9]+$/)?new o.Range(e.trim().replace(/\$/g,""),t,r):e.trim().replace(/\$/g,"").match(/^[^!]+![A-Z]+[0-9]+:[A-Z]+[0-9]+$/)?new o.Range(e.trim().replace(/\$/g,""),t,r):e.trim().replace(/\$/g,"").match(/^[A-Z]+:[A-Z]+$/)?new o.Range(e.trim().replace(/\$/g,""),t,r):e.trim().replace(/\$/g,"").match(/^[^!]+![A-Z]+:[A-Z]+$/)?new o.Range(e.trim().replace(/\$/g,""),t,r):e.trim().replace(/\$/g,"").match(/^[A-Z]+[0-9]+$/)?new l.RefValue(e.trim().replace(/\$/g,""),t):e.trim().replace(/\$/g,"").match(/^[^!]+![A-Z]+[0-9]+$/)?new l.RefValue(e.trim().replace(/\$/g,""),t):isNaN(e.trim().replace(/%$/,""))?new Error(u.ERROR_SYNTAX):new a.RawValue(+e.trim().replace(/%$/,"")/100)}function b(e,t,r){var n=e;if(""!==t){var i=t;i=isNaN(t)?"string"==typeof t?g(t,n.calcCell,r):t:new a.RawValue(+t),n.args.push(i),n.last_arg=i}}t.StructuralExpressionBuilder=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StructuralExp=void 0;var n=r(7),a=r(35),i=r(36),o=r(2),l=r(20),s=r(57),u=r(37);function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var d=0,f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=++d,this.args=[],this.name="Expression",this.calcCell=t,this.last_arg="",this.twoArgOperator=new s.TwoArgOperatorColl}var t,r,f;return t=e,(r=[{key:"isEmpty",value:function(e){return null==e||""===e}},{key:"hasCalcMethod",value:function(e){return"function"==typeof e.solveExpression}},{key:"execCalcMethod",value:function(e){if(this.hasCalcMethod(e))return e.solveExpression();throw o.errorObj.ERROR_SYNTAX}},{key:"exeOperatorForArrayAndSingle",value:function(e,t,r){for(var n,a=!1,i=0,o=[e,t];i<o.length;i++)if((n=o[i])instanceof Array||n instanceof u.MatrixValue||n instanceof l.CellVArray){a=!0;break}return a?new l.CellVArray(e).exeElementOperator(new l.CellVArray(t),r):this.twoArgOperator.exeOperator(e,t,r)}},{key:"execOperatorsWith2Args",value:function(e,t){for(var r=0;r<t.length;r++)if(e.includes(t[r]))try{var n=this.exeOperatorForArrayAndSingle(this.execCalcMethod(t[r-1]),this.execCalcMethod(t[r+1]),t[r]);t.splice(r-1,3,new a.RawValue(n)),r--}catch(e){throw console.log(e),e}}},{key:"exec_minus",value:function(e){for(var t=e.length;t--;)if("-"===e[t]&&(0===t||t>0&&"string"==typeof e[t-1])){var r=this.execCalcMethod(e[t+1]);e.splice(t,2,new a.RawValue(-r))}}},{key:"exec_plus",value:function(e){if("+"===e[0]){var t=this.execCalcMethod(e[1]);e.splice(0,2,new a.RawValue(t))}}},{key:"dealAllRefValue",value:function(){var e,t=this.args.concat();try{for(var r=0;r<t.length;r++)if("RefValue"===t[r].name){e=t[r].calcCell.calcSheet;var a=t[r].str_expression;if(void 0===e.getCellByName(a)&&e.addCalcCell(a,{v:new l.CellVEmpty},n.FORMULA_STATUS.solved),"0"===t[r].str_expression.slice(1,t[r].str_expression.length))return o.errorObj.ERROR_NAME}}catch(e){}}},{key:"exeAllTwoArgOperator",value:function(e){this.execOperatorsWith2Args(["^"],e),this.execOperatorsWith2Args(["/","*"],e),this.execOperatorsWith2Args(["+","-"],e),this.execOperatorsWith2Args(["&"],e),this.execOperatorsWith2Args(["<",">",">=","<=","<>","="],e)}},{key:"calcLastArg",value:function(e){if("string"==typeof e)return new Error(o.ERROR_SYNTAX);if("function"!=typeof e.solveExpression||e.cellStatus===n.FORMULA_STATUS.solved)return e.cellObj.v;var t=e.solveExpression();return(0,l.convertToCellV)(t)}},{key:"solveExpression",value:function(){var e=this.args.concat();if(this.dealAllRefValue(),this.exec_minus(e),this.exec_plus(e),this.exeAllTwoArgOperator(e),1===e.length)return this.calcLastArg(e[0])}},{key:"update_cell_value",value:function(){var e=this.calcCell.cellObj;try{if(Array.isArray(this.args)&&1===this.args.length&&this.args[0]instanceof i.Range)throw o.errorObj.ERROR_VALUE;e.v=this.solveExpression(),"string"==typeof e.v?e.t="s":"number"==typeof e.v&&(e.t="n")}catch(t){if(-1===o.errorMsgArr.indexOf(t.message))throw t;e.t="e",e.w=t.message,e.v=t.message}}}])&&c(t.prototype,r),f&&c(t,f),e}();t.StructuralExp=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(5);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=new n.CellRange(0,0,0,0),this.ri=0,this.ci=0}var t,r,i;return t=e,(r=[{key:"multiple",value:function(){return this.range.multiple()}},{key:"setIndexes",value:function(e,t){this.ri=e,this.ci=t}},{key:"size",value:function(){return this.range.size()}}])&&a(t.prototype,r),i&&a(t,i),e}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.x=0,this.y=0,this.ri=0,this.ci=0}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.range=null,this.state="clear"}var t,r,a;return t=e,(r=[{key:"copy",value:function(e){return this.range=e,this.state="copy",this}},{key:"cut",value:function(e){return this.range=e,this.state="cut",this}},{key:"isClear",value:function(){return"clear"===this.state}},{key:"clear",value:function(){this.range=null,this.state="clear"}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(5);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),e}var l=function(){function e(t,r,n){a(this,e),this.ci=t,this.operator=r,this.value=n}return o(e,[{key:"set",value:function(e,t){this.operator=e,this.value=t}},{key:"includes",value:function(e){var t=this.operator,r=this.value;return"all"===t||"in"===t&&r.includes(e)}},{key:"getData",value:function(){return{ci:this.ci,operator:this.operator,value:this.value}}}]),e}(),s=function(){function e(t,r){a(this,e),this.ci=t,this.order=r}return o(e,[{key:"asc",value:function(){return"asc"===this.order}},{key:"desc",value:function(){return"desc"===this.order}}]),e}(),u=function(){function e(){a(this,e),this.ref=null,this.filters=[],this.sort=null,this.flex=[]}return o(e,[{key:"setData",value:function(e){var t=e.ref,r=e.filters,n=e.sort;null!==t&&(this.ref=t,this.fitlers=r.map((function(e){return new l(e.ci,e.operator,e.value)})),n&&(this.sort=new s(n.ci,n.order)))}},{key:"getData",value:function(){if(this.active()){var e=this.ref,t=this.filters,r=this.sort;return{ref:e,filters:t.map((function(e){return e.getData()})),sort:r}}return{}}},{key:"addFilter",value:function(e,t,r){var n=this.getFilter(e);null==n?this.filters.push(new l(e,t,r)):n.set(t,r)}},{key:"addFiexRows",value:function(e){this.flex=e}},{key:"setSort",value:function(e,t){this.sort=t?new s(e,t):null}},{key:"includes",value:function(e,t){return!!this.active()&&this.hrange().includes(e,t)}},{key:"getSet",value:function(e,t){for(var r=0;r<this.flex.length;r++)for(var n=this.flex[r],a=n.ri,i=n.set_total,o=n.state,l=a;l<i+a;l++)console.log(o,"114",t,a,o),!1===o&&t===a?(e.add(l+1),this.flex[r].state=!0):!0===o&&t===a&&(e.delete(l+1),this.flex[r].state=!1);return e}},{key:"includes2",value:function(e,t){for(var r=!1,n=0;n<this.flex.length;n++){var a=this.flex[n],i=a.ri,o=a.ci;e===i&&t===o&&(r=!0)}return r}},{key:"getSort",value:function(e){var t=this.sort;return t&&t.ci===e?t:null}},{key:"getFilter",value:function(e){for(var t=this.filters,r=0;r<t.length;r+=1)if(t[r].ci===e)return t[r];return null}},{key:"filteredRows",value:function(e){var t=new Set,r=new Set;if(this.active())for(var n=this.range(),a=n.sri,i=n.eri,o=this.filters,l=a+1;l<=i;l+=1)for(var s=0;s<o.length;s+=1){var u=o[s],c=e(l,u.ci),d=c?c.text:"";if(!u.includes(d)){t.add(l);break}r.add(l)}return{rset:t,fset:r}}},{key:"items",value:function(e,t){var r={};if(this.active())for(var n=this.range(),a=n.sri,i=n.eri,o=a+1;o<=i;o+=1){var l=t(o,e);if(null===l||/^\s*$/.test(l.text))r[""]=(r[""]||0)+1;else{var s=l.text;r[s]=(r[s]||0)+1}}return r}},{key:"range",value:function(){return n.CellRange.valueOf(this.ref)}},{key:"hrange",value:function(){var e=this.range();return e.eri=e.sri,e}},{key:"clear",value:function(){this.ref=null,this.filters=[],this.sort=null}},{key:"active",value:function(){return null!==this.ref}}]),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Merges=void 0;var n=r(5);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._=t}var t,r,i;return t=e,(r=[{key:"forEach",value:function(e){this._.forEach(e)}},{key:"each",value:function(e){this._.forEach((function(t){return e(t)}))}},{key:"deleteWithin",value:function(e){this._=this._.filter((function(t){return!t.within(e)}))}},{key:"getFirstIncludes",value:function(e,t){for(var r=0;r<this._.length;r+=1){var n=this._[r];if(n.includes(e,t))return n}return null}},{key:"filterIntersects",value:function(t){return new e(this._.filter((function(e){return e.intersects(t)})))}},{key:"intersects",value:function(e){for(var t=0;t<this._.length;t+=1)if(this._[t].intersects(e))return!0;return!1}},{key:"union",value:function(e){var t=e;return this._.forEach((function(e){e.intersects(t)&&(t=e.union(t))})),t}},{key:"add",value:function(e){this.deleteWithin(e),this._.push(e)}},{key:"shift",value:function(e,t,r,n){this._.forEach((function(a){var i=a.sri,o=a.sci,l=a.eri,s=a.eci,u=a;"row"===e?i>=t?(u.sri+=r,u.eri+=r):i<t&&t<=l&&(u.eri+=r,n(i,o,r,0)):"column"===e&&(o>=t?(u.sci+=r,u.eci+=r):o<t&&t<=s&&(u.eci+=r,n(i,o,0,r)))}))}},{key:"move",value:function(e,t,r){this._.forEach((function(n){var a=n;a.within(e)&&(a.eri+=t,a.sri+=t,a.sci+=r,a.eci+=r)}))}},{key:"setData",value:function(e){return this._=e.map((function(e){return n.CellRange.valueOf(e)})),this}},{key:"getData",value:function(){return this._.map((function(e){return e.toString()}))}}])&&a(t.prototype,r),i&&a(t,i),e}();t.Merges=i},,function(e,t){},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(5))&&n.__esModule?n:{default:n};function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.srcCellRange="",this.dstCellRange="",this.srcOneDRange="",this.dstOneDRange=""}var t,r,n;return t=e,(r=[{key:"setSrcAndDstCellRange",value:function(e,t){this.srcCellRange=e,this.dstCellRange=t}},{key:"use",value:function(){var e=this.srcCellRange,t=this.dstCellRange,r=e.sri,n=e.sci,a=e.eri,o=e.eci,l=t.sri,s=t.sci,u=t.eri,c=t.eci,d=i(e.size(),2),f=d[0],m=d[1],h=i(t.size(),2);return{sri:r,sci:n,eri:a,eci:o,dsri:l,dsci:s,deri:u,deci:c,rn:f,cn:m,drn:h[0],dcn:h[1]}}},{key:"autoFilterDirection",value:function(){var e=this.use(),t=e.sri,r=e.dsri,n=e.deri,a=e.eri,i=!1;return t===r&&n===a&&(i=!0),i}},{key:"upOrDown",value:function(){var e=this.use(),t=e.deri,r=e.sri,n=e.deci,a=e.sci,i=!0;return(t<r||n<a)&&(i=!1),i}},{key:"leftOrRight",value:function(){var e=this.getRangeByWay(),t=e.srcOneDRange,r=e.dstOneDRange,n=1;return t.sri===t.eri&&r.eci>t.eci?n=2:t.sri===t.eri&&r.eci<t.eci&&(n=3),n}},{key:"getOneDRangeObj",value:function(e,t){var r=this.use(),n=r.sri,i=r.sci,o=r.eri,l=r.eci,s=r.dsri,u=r.dsci,c=r.deri,d=r.deci;return e?(this.srcOneDRange=new a.default(n+t,i,n+t,l),this.dstOneDRange=new a.default(s+t,u,s+t,d)):(this.srcOneDRange=new a.default(n,i+t,o,i+t),this.dstOneDRange=new a.default(s,u+t,c,u+t)),this.getRangeByWay()}},{key:"getRangeByWay",value:function(){return{srcOneDRange:this.srcOneDRange,dstOneDRange:this.dstOneDRange}}},{key:"calcDiff",value:function(e,t){var r=1;if(t||(r=1),t&&e.length>1){var n=e[e.length-2];r=1*e[e.length-1].text-1*n.text}else if(e.length>1){var a=e[1];r=1*e[0].text-1*a.text}return isNaN(r)&&(r=1),r}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(9);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.text="",this.depend=[],this.formulas="",this.style=null,this.merge=null,this.formatText=null,this.multivalueRefsCell=null,this.source_v=null}var t,r,i;return t=e,(r=[{key:"setCell",value:function(e){(0,n.isHave)(e)&&((0,n.isHave)(e.text)&&(this.text=e.text),(0,n.isHave)(e.formulas)&&(this.formulas=e.formulas),(0,n.isHave)(e.formatText)&&(this.formatText=e.formatText),(0,n.isHave)(e.depend)&&(this.depend=e.depend),(0,n.isHave)(e.style)&&(this.style=e.style),(0,n.isHave)(e.multivalueRefsCell)&&(this.multivalueRefsCell=e.multivalueRefsCell),(0,n.isHave)(e.merge)&&(this.merge=e.merge),(0,n.isHave)(e.source_v)&&(this.source_v=e.source_v))}},{key:"setFormatText",value:function(e){e.state&&(this.formatText=e.text)}}])&&a(t.prototype,r),i&&a(t,i),e}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cols=void 0;var n=r(12);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){var r=t.len,n=t.width,a=t.indexWidth,i=t.minWidth;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._={},this.len=r,this.width=n,this.indexWidth=a,this.minWidth=i}var t,r,i;return t=e,(r=[{key:"setData",value:function(e){e.len&&(this.len=e.len,delete e.len),this._=e}},{key:"getData",value:function(){var e=this.len;return Object.assign({len:e},this._)}},{key:"getWidth",value:function(e){var t=this._[e];return t&&t.width?t.width:this.width}},{key:"getOrNew",value:function(e){return this._[e]=this._[e]||{},this._[e]}},{key:"setWidth",value:function(e,t){this.getOrNew(e).width=t}},{key:"sumWidth",value:function(e,t){var r=this;return(0,n.rangeSum)(e,t,(function(e){return r.getWidth(e)}))}},{key:"totalWidth",value:function(){return this.sumWidth(0,this.len)}}])&&a(t.prototype,r),i&&a(t,i),e}();t.Cols=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Validations=void 0;var n,a=(n=r(145))&&n.__esModule?n:{default:n},i=r(5);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}var c=function(){function e(t,r,n){l(this,e),this.refs=r,this.mode=t,this.validator=n}return u(e,[{key:"includes",value:function(e,t){for(var r=this.refs,n=0;n<r.length;n+=1){if(i.CellRange.valueOf(r[n]).includes(e,t))return!0}return!1}},{key:"addRef",value:function(e){this.remove(i.CellRange.valueOf(e)),this.refs.push(e)}},{key:"remove",value:function(e){var t=[];this.refs.forEach((function(r){var n=i.CellRange.valueOf(r);n.intersects(e)?n.difference(e).forEach((function(e){return t.push(e.toString())})):t.push(r)})),this.refs=t}},{key:"getData",value:function(){var e=this.refs,t=this.mode,r=this.validator;return{refs:e,mode:t,type:r.type,required:r.required,operator:r.operator,value:r.value}}}],[{key:"valueOf",value:function(t){var r=t.refs,n=t.mode,i=t.type,o=t.required,l=t.operator,s=t.value;return new e(n,r,new a.default(i,o,s,l))}}]),e}(),d=function(){function e(){l(this,e),this._=[],this.errors=new Map}return u(e,[{key:"getError",value:function(e,t){return this.errors.get("".concat(e,"_").concat(t))}},{key:"validate",value:function(e,t,r){var n=this.get(e,t),a="".concat(e,"_").concat(t),i=this.errors;if(null!==n){var l=o(n.validator.validate(r),2),s=l[0],u=l[1];s?i.delete(a):i.set(a,u)}else i.delete(a);return!0}},{key:"add",value:function(e,t,r){var n=r.type,i=r.required,o=r.value,l=r.operator,s=new a.default(n,i,o,l),u=this.getByValidator(s);null!==u?u.addRef(t):this._.push(new c(e,[t],s))}},{key:"getByValidator",value:function(e){for(var t=0;t<this._.length;t+=1){var r=this._[t];if(r.validator.equals(e))return r}return null}},{key:"get",value:function(e,t){for(var r=0;r<this._.length;r+=1){var n=this._[r];if(n.includes(e,t))return n}return null}},{key:"remove",value:function(e){this.each((function(t){t.remove(e)}))}},{key:"each",value:function(e){this._.forEach((function(t){return e(t)}))}},{key:"getData",value:function(){return this._.filter((function(e){return e.refs.length>0})).map((function(e){return e.getData()}))}},{key:"setData",value:function(e){this._=e.map((function(e){return c.valueOf(e)}))}}]),e}();t.Validations=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(10),a=r(12);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l={phone:/^[1-9]\d{10}$/,email:/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/};function s(e,t){var r="";if(!e){for(var a=arguments.length,i=new Array(a>2?a-2:0),o=2;o<a;o++)i[o-2]=arguments[o];r=n.t.apply(void 0,["validation.".concat(t)].concat(i))}return[e,r]}var u=function(){function e(t,r,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.required=r,this.value=n,this.type=t,this.operator=a,this.message=""}var t,r,n;return t=e,(r=[{key:"parseValue",value:function(e){var t=this.type;return"date"===t?new Date(e):"number"===t?Number(e):e}},{key:"equals",value:function(e){var t=this.type===e.type&&this.required===e.required&&this.operator===e.operator;return t&&(t=Array.isArray(this.value)?(0,a.arrayEquals)(this.value,e.value):this.value===e.value),t}},{key:"values",value:function(){return this.value.split(",")}},{key:"validate",value:function(e){var t=this.required,r=this.operator,n=this.value,a=this.type;if(t&&/^\s*$/.test(e))return s(!1,"required");if(/^\s*$/.test(e))return[!0];if(l[a]&&!l[a].test(e))return s(!1,"notMatch");if("list"===a)return s(this.values().includes(e),"notIn");if(r){var o=this.parseValue(e);if("be"===r){var u=i(n,2),c=u[0],d=u[1];return s(o>=this.parseValue(c)&&o<=this.parseValue(d),"between",c,d)}if("nbe"===r){var f=i(n,2),m=f[0],h=f[1];return s(o<this.parseValue(m)||o>this.parseValue(h),"notBetween",m,h)}if("eq"===r)return s(o===this.parseValue(n),"equal",n);if("neq"===r)return s(o!==this.parseValue(n),"notEqual",n);if("lt"===r)return s(o<this.parseValue(n),"lessThan",n);if("lte"===r)return s(o<=this.parseValue(n),"lessThanEqual",n);if("gt"===r)return s(o>this.parseValue(n),"greaterThan",n);if("gte"===r)return s(o>=this.parseValue(n),"greaterThanEqual",n)}return[!0]}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={toolbar:{undo:"Undo",redo:"Redo",paintformat:"Paint format",clearformat:"Clear format",format:"Format",font:"Font",fontSize:"Font size",fontBold:"Font bold",fontItalic:"Font italic",underline:"Underline",strike:"Strike",textColor:"Text color",fillColor:"Fill color",border:"Borders",merge:"Merge cells",align:"Horizontal align",valign:"Vertical align",textwrap:"Text wrapping",freeze:"Freeze cell",add:"display equation",autofilter:"Filter",formula:"Functions",more:"More",flexible:"Flexible",throwFormula:"Throw formulas",comeBack:"come back"},contextmenu:{copy:"Copy",cut:"Cut",paste:"Paste",pasteValue:"Paste values only",pasteFormat:"Paste format only",insertRow:"Insert row",insertColumn:"Insert column",deleteRow:"Delete row",deleteColumn:"Delete column",deleteCell:"Delete cell",deleteCellText:"Delete cell text",validation:"Data validations",recover:"recover"},format:{normal:"Normal",text:"Plain Text",number:"Number",percent:"Percent",rmb:"RMB",usd:"USD",date:"Date",time:"Time",datetime:"Date time",duration:"Duration"},date_formula:{sum:"Sum",average:"Average",max:"Max",min:"Min",concat:"Concat",wland:"MD.WLAND",wfr:"MD.WFR",rtd:"MD.RTD"},validation:{required:"it must be required",notMatch:"it not match its validation rule",between:"it is between {} and {}",notBetween:"it is not between {} and {}",notIn:"it is not in list",equal:"it equal to {}",notEqual:"it not equal to {}",lessThan:"it less than {}",lessThanEqual:"it less than or equal to {}",greaterThan:"it greater than {}",greaterThanEqual:"it greater than or equal to {}"},error:{pasteForMergedCell:"Unable to do this for merged cells"},calendar:{weeks:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]},button:{cancel:"Cancel",remove:"Remove",save:"Save",ok:"OK"},sort:{desc:"Sort Z -> A",asc:"Sort A -> Z"},filter:{empty:"empty"},dataValidation:{mode:"Mode",range:"Cell Range",criteria:"Criteria",modeType:{cell:"Cell",column:"Colun",row:"Row"},type:{list:"List",number:"Number",date:"Date",phone:"Phone",email:"Email"},operator:{be:"between",nbe:"not betwwen",lt:"less than",lte:"less than or equal to",gt:"greater than",gte:"greater than or equal to",eq:"equal to",neq:"not equal to"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(8),i=r(1);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],a=arguments.length>1?arguments[1]:void 0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.moving=!1,this.vertical=r,this.el=(0,n.h)("div","".concat(i.cssPrefix,"-resizer ").concat(r?"vertical":"horizontal")).children(this.hoverEl=(0,n.h)("div","".concat(i.cssPrefix,"-resizer-hover")).on("mousedown.stop",(function(e){return t.mousedownHandler(e)})),this.lineEl=(0,n.h)("div","".concat(i.cssPrefix,"-resizer-line")).hide()).hide(),this.cRect=null,this.finishedFn=null,this.minDistance=a}var t,r,l;return t=e,(r=[{key:"show",value:function(e,t){var r=this.moving,n=this.vertical,a=this.hoverEl,i=this.lineEl,o=this.el;if(!r){this.cRect=e;var l=e.left,s=e.top,u=e.width,c=e.height;o.offset({left:n?l+u-5:l,top:n?s:s+c-5}).show(),a.offset({width:n?5:u,height:n?c:5}),i.offset({width:n?0:t.width,height:n?t.height:0})}}},{key:"hide",value:function(){this.el.offset({left:0,top:0}).hide()}},{key:"mousedownHandler",value:function(e){var t=this,r=e,n=this.el,i=this.lineEl,o=this.cRect,l=this.vertical,s=this.minDistance,u=l?o.width:o.height;i.show(),(0,a.mouseMoveUp)(window,(function(e){t.moving=!0,null!==r&&1===e.buttons&&(l?(u+=e.movementX)>s&&n.css("left","".concat(o.left+u,"px")):(u+=e.movementY)>s&&n.css("top","".concat(o.top+u,"px")),r=e)}),(function(){r=null,i.hide(),t.moving=!1,t.hide(),t.finishedFn&&(u<s&&(u=s),t.finishedFn(o,u))}))}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vertical=t,this.moveFn=null,this.el=(0,n.h)("div","".concat(a.cssPrefix,"-scrollbar ").concat(t?"vertical":"horizontal")).child(this.contentEl=(0,n.h)("div","")).on("mousemove.stop",(function(){})).on("scroll.stop",(function(e){var t=e.target,n=t.scrollTop,a=t.scrollLeft;r.moveFn&&r.moveFn(r.vertical?n:a,e)}))}var t,r,o;return t=e,(r=[{key:"move",value:function(e){return this.el.scroll(e),this}},{key:"scroll",value:function(){return this.el.scroll()}},{key:"set",value:function(e,t){var r=e-1;if(t>r){var n=this.vertical?"height":"width";this.el.css(n,"".concat(r-15,"px")).show(),this.contentEl.css(this.vertical?"width":"height","1px").css(n,"".concat(t,"px"))}else this.el.hide();return this}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(5),a=r(1),i=r(0),o=r(77);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,i.h)("div","".concat(a.cssPrefix,"-selector-cell")),this.data=t,this._=new n.CellRange(0,0,0,0)}var t,r,s;return t=e,(r=[{key:"resetSelectOffset",value:function(){var e=this.data.getRect(this._);this.setOffset(e)}},{key:"setData",value:function(e,t){var r=this;e=-1===e?0:e,t=-1===t?0:t;var a=this.data.merges,i=!1;a.each((function(n){n.includeByRiCi(e,t)&&(r._=n,i=!0)})),i||(this._=new n.CellRange(e,t,e,t))}},{key:"toolbarChangeSelectorCell",value:function(){var e=this._.sri,t=this._.sci;this.setData(e,t)}},{key:"setOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.el.offset({width:n-o.selectorHeightBorderWidth+.8,height:a-o.selectorHeightBorderWidth+.8,left:t-.8,top:r-.8}).show()}}])&&l(t.prototype,r),s&&l(t,s),e}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=h(r(78)),i=h(r(151)),o=r(1),l=r(6),s=h(r(153)),u=r(29),c=r(8),d=h(r(157)),f=r(31),m=r(9);function h(e){return e&&e.__esModule?e:{default:e}}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function y(){var e=this.textlineEl,t=this.textEl,r=this.areaOffset;if(r){var n=e.offset().width+9+15,a=this.viewFn().width-r.left-9;if(n>r.width&&0!==r.width){var i=n;if(n>a){i=a-15;var o=parseInt(n/(a-15),10);o+=n%a>0?1:0,(o*=this.rowHeight)>r.height&&t.css("height","".concat(o,"px"))}t.css("width","".concat(i,"px"))}}}var g=function(){var e=this;if(window.getSelection().rangeCount<=0)return 0;var t=window.getSelection().getRangeAt(0),r=t.cloneRange();r.selectNodeContents(this.textEl.el),r.setEnd(t.startContainer,t.startOffset);var n=r.toString().length,a=this.editorText.getText(),i=(0,u.findBracket)(n-1,(0,l.cutting)(a),a),o=i.exist,s=i.left,c=i.right;Object.keys(this.spanArr).forEach((function(t){e.spanArr[t].css("background-color","rgba(255,255,255,0.1)")}));var d=this.spanArr[s],f=this.spanArr[c];if(this.suggestContent.hide(),o&&d&&f)d.css("background-color","rgb(229, 229, 229)"),f.css("background-color","rgb(229, 229, 229)");else{var m=this.suggest.show,h=u.suggestContent.call(this,n,(0,l.cutting)(a),a);h.suggestContent&&!m&&this.suggestContent.content(h.cut,h.pos)}return n};function b(e){if(this){var t=this.pos,r=this.pos,n=0,a=document.createRange();a.setStart(e,0),a.collapse(!0);for(var i,o=[e],l=!1,s=!1;!s&&(i=o.pop());)if(3===i.nodeType){var u=n+i.length;!l&&t>=n&&t<=u&&(a.setStart(i,t-n),l=!0),l&&r>=n&&r<=u&&(a.setEnd(i,r-n),s=!0),n=u}else for(var c=i.childNodes.length;c--;)o.push(i.childNodes[c]);var d=window.getSelection();d.removeAllRanges(),d.addRange(a)}}function E(){var e=this.editorText.getText();this.pos=g.call(this),w.call(this,e,this.pos)}function R(){if(!1===I.call(this)){var e=this.data.getCell(this.ri,this.ci);this.editorText.setOldCell((0,l.deepCopy)(e),{ri:this.ri,ci:this.ci})}}function O(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"input";if(R.call(this),e){var i=e.inputType;if("insertFromPaste"===i&&"black"!==this.textEl.el.style["caret-color"])return void(this.copy=!0);if("historyUndo"===i)return}var o=this.editorText;setTimeout((function(){if(!1!==t.chinese){var i="";if(t.data.settings.showEditor){if(t.sheet.selector.hide(),""===r&&e&&e.target&&e.target.childNodes){for(var s="",u=0,c=e.target.childNodes.length;u<c;u++)1===e.target.childNodes[u].nodeType?i+=e.target.childNodes[u].innerText:3===e.target.childNodes[u].nodeType&&(s+=e.target.childNodes[u].nodeValue);i=""!==s?s:i}else i=""===r&&e&&(0,m.isHave)(e.data)?""!==e.data?e.data:i:r;t.copy&&(t.copy=!1,i=e&&e.data?e.data:"",t.textEl.html(i),t.pos=i.length,b.call(t,t.textEl.el,-1)),t.changed=!0;var d=t.suggest,f=t.textlineEl,h=t.validator,v=t.textEl;if(o.setText("".concat(i)),o.changeText(1),t.pos=g.call(t),h)"list"===h.type?d.search(i):d.hide();else{var p=(i+="").lastIndexOf("=");-1!==t.pos?w.call(t,i,t.pos):x.call(t,i);var E=!1,R=(0,l.cuttingByPos2)(i,t.pos,!0);if(i.length>=t.pos){var O="".concat(i[t.pos]);-1!==O.search(/^[0-9]+.?[0-9]*$/)?E=!0:O&&(R+=(0,l.cuttingByPosEnd)(i,t.pos+1))}0===p&&i.length>1&&""!==R&&!E&&R.trim().length>0?d.search(R):d.hide()}f.html(n||i),o.setText(n||i),t.suggest.itemIndex=-1,y.call(t),i&&"="!==i[0]&&b.call(t,v.el,-1),n&&"="===n[0]&&(i=n),t.change(a,i),setTimeout((function(){t.show()}))}}}))}function A(e){this.pos=g.call(this),"ArrowRight"===e.code?this.pos=this.pos+1:"ArrowLeft"===e.code&&(this.pos=this.pos-1);var t=e.keyCode||e.which;27===t&&"black"===this.textEl.el.style["caret-color"]&&"1"===this.textEl.el.style.opacity&&this.change("input","@~esc")}function x(e){var t=e.lastIndexOf("=");0===t&&e.length>=1&&(0,l.operation)(e[e.length-1])?this.setLock(!0):(this.setLock(!1),this.state=2),0!==t?this.setLock(!1):0===t&&1===e.length&&this.setLock(!0),(0,l.isAbsoluteValue)((0,l.cuttingByPos)(e,this.pos),2)&&this.setLock(!0),0!==t&&this.setLock(!1)}function w(e,t){var r=(e+="").lastIndexOf("=");0===r&&e.length>=1&&(0,l.operation)(e[t-1])?this.setLock(!0):(this.setLock(!1),this.state=2),0!==r?this.setLock(!1):0===r&&1===e.length&&this.setLock(!0),(0,l.isAbsoluteValue)((0,l.cuttingByPos)(e,t),2)&&this.setLock(!0),0!==r&&this.setLock(!1)}function N(){var e=this,t=this.textEl.el;setTimeout((function(){b.call(e,t)}),0)}function _(e){var t=this.textEl,r=this.textlineEl,n=this.tmp;t.el.blur(),n.html(e),r.html(e),N.call(this)}function S(e){var t=this.validator,r=this.editorText,n=r.getText();if(t&&"list"===t.type)n=r.setText(e);else{this.pos=g.call(this);for(var a=this.pos-(0,l.cuttingByPos)(n,this.pos).length,i=(0,l.cuttingByPosEnd)(n,this.pos+1),o=["",""],s=this.pos+i.length,u=0;u<n.length;u++)u<a&&(o[0]+=n[u]),u>s-1&&(o[1]+=n[u]);n=r.setText("".concat(o[0]+e.key,"(")),this.pos=r.getText().length,n=r.setText(n+")".concat(o[1]))}this.textEl.html(n),this.textlineEl.html(n),this.suggest.hide(),w.call(this,n,this.pos),this.change("input",n),b.call(this,this.textEl.el,-1),y.call(this)}function T(){this.suggestContent.hide()}function C(){this.suggest.setItems(this.formulas)}function I(){return"black"===this.textEl.el.style["caret-color"]&&"1"===this.textEl.el.style.opacity}var M=function(){function e(t,r,l,u,f,m){var h=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.viewFn=r,this.rowHeight=l,this.formulas=t,this.sheet=m,this.display=!0,this.suggest=new a.default(t,(function(e){S.call(h,e)}),f,this),this.suggestContent=new s.default,this.lock=!1,this.state=1,this.data=f,this.datepicker=new i.default,this.isCors=!1,this.datepicker.change((function(e){h.setText(function(e){var t=e.getMonth()+1,r=e.getDate();return t<10&&(t="0".concat(t)),r<10&&(r="0".concat(r)),"".concat(e.getFullYear(),"-").concat(t,"-").concat(r)}(e)),h.clear()})),this.ri=-1,this.ci=-1,this.spanArr=[],this.mousedownIndex=[],this.changed=!1,this.chinese=!0,this.editorText=new d.default(""),this.areaEl=(0,n.h)("div","".concat(o.cssPrefix,"-editor-area")).children(this.textEl=(0,n.h)("div","".concat(o.cssPrefix,"-editor-textEl")).on("input",(function(e){return O.call(h,e)})).on("click",(function(){return E.call(h)})).on("keyup",(function(e){return A.call(h,e)})).on("mousedown",(function(e){if(2===e.detail){if(I.call(h))return;h.show(),setTimeout((function(){var e=h.ri,t=h.ci;console.log(e,t),h.setCellEnd(f.getSelectedCellRiCi(e,t))}))}})).on("compositionstart",(function(){h.chinese=!1})).on("compositionend",(function(){h.chinese=!0})).on("paste",(function(e){"black"===h.textEl.el.style["caret-color"]&&e.stopPropagation()})).on("copy",(function(e){"black"===h.textEl.el.style["caret-color"]&&e.stopPropagation()})).on("keydown",(function(e){y.call(h),h.textlineEl.html(e.currentTarget.innerText);var t=e.keyCode;if(38!==t&&40!==t||e.preventDefault(),115===t){var r=h.editorText.f4ShortcutKey(g.call(h)),n=r.inputText,a=r.pos;return O.call(h,null,n,n),void setTimeout((function(){h.pos=a,b.call(h,h.textEl.el,-1)}))}if("black"!==h.textEl.el.style["caret-color"]){var i=e.ctrlKey,o=e.metaKey;8===t||46===t?c.createEvent.call(h,8,!1):40===t?(h.clear(),c.createEvent.call(h,40,!1)):39===t?(h.clear(),c.createEvent.call(h,39,!1)):37===t?(h.clear(),c.createEvent.call(h,37,!1)):38===t?(h.clear(),c.createEvent.call(h,38,!1)):(i||o)&&(67===t?c.createEvent.call(h,67,!0):86===t?c.createEvent.call(h,86,!0):88===t?c.createEvent.call(h,88,!0):90===t?c.createEvent.call(h,90,!0):66===t&&c.createEvent.call(h,66,!0))}})),this.textlineEl=(0,n.h)("div","textline"),this.suggestContent.el,this.datepicker.el).on("mousemove.stop",(function(){})).on("mousedown.stop",(function(){})),m.el.child(this.suggest.el),this.el=(0,n.h)("div","".concat(o.cssPrefix,"-editor")).children(this.areaEl),this.suggest.bindInputEvents(this.textEl),this.textEl.on("paste",(function(e){!1!==I.call(h)&&function(e){e.preventDefault();var t="",r=(e.originalEvent||e).clipboardData;if(null==r){if(""!==(t=window.clipboardData.getData("text")||""))if(window.getSelection){var n=document.createElement("span");n.innerHTML=t,window.getSelection().getRangeAt(0).insertNode(n)}else document.selection.createRange().pasteHTML(t)}else""!==(t=r.getData("text/plain")||"")&&document.execCommand("insertText",!1,t)}(e)})),this.tmp=(0,n.h)("span","span_tmp").hide(),this.textEl.attr("contenteditable","true"),this.textEl.css("width","".concat(u-3,"px")),this.textEl.css("height","".concat(l-2,"px")),this.textEl.child(this.tmp),this.pos=0,this.areaOffset=null,this.freeze={w:0,h:0},this.cell=null,setTimeout((function(){h.show(!1)})),this.change=function(){}}var t,r,l;return t=e,(r=[{key:"setFreezeLengths",value:function(e,t){this.freeze.w=e,this.freeze.h=t}},{key:"setMouseDownIndex",value:function(e){this.mousedownIndex=e}},{key:"setRiCi",value:function(e,t){this.ri=e,this.ci=t}},{key:"setLock",value:function(e){this.lock=e}},{key:"getLock",value:function(){return this.lock}},{key:"show",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];e&&this.data.settings.showEditor?(this.textEl.css("caret-color","black"),this.textEl.css("cursor","text"),this.textEl.css("opacity","1"),this.textEl.el.focus(),this.areaEl.css("pointer-events","auto"),this.areaEl.css("border","2px solid #4b89ff"),this.areaEl.css("background","white")):(this.textEl.css("caret-color","white"),this.textEl.css("cursor","default"),this.textEl.css("opacity","0"),this.textEl.el.blur(),this.areaEl.css("pointer-events","none"),this.areaEl.css("background","rgba(75, 137, 255, 0)"),this.areaEl.css("border","none"))}},{key:"parse",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=this.editorText,r=t.getText();-1!==e?(this.pos=g.call(this),w.call(this,r,this.pos)):x.call(this,r)}},{key:"clear",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=this.editorText,n=r.getText();return this.display=I.call(this),""!==n&&isNaN(n)&&0===n.replace(/\s/g,"").lastIndexOf("¥")?this.change("format",n):this.changed&&this.change("finish",n),this.changed=!1,this.cell=null,this.areaOffset=null,r.setText(""),this.show(!1),this.copy=!1,b.call(this,this.textEl.el,-1),this.pos=0,this.tmp.hide(),this.textEl.html(""),this.textlineEl.html(""),T.call(this),C.call(this),this.datepicker.hide(),!t&&(setTimeout((function(){var t=e.data.selector,r=t.ri,n=t.ci;e.setRiCi(r,n)})),this.display)}},{key:"mount2span",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{suggestContent:!1,cut:"",pos:-1};if(this.spanArr!==e){var i,o=this.suggest.show;a.suggestContent&&!o?this.suggestContent.content(a.cut,a.pos):this.suggestContent.hide(),Object.keys(e).forEach((function(t){e[t].css("background-color","rgba(255,255,255,0.1)")})),"-1"!==t&&-1!==r&&e[t]&&(e[t].css("background-color","#e5e5e5"),e[r].css("background-color","#e5e5e5")),e.length>0&&(this.textEl.html(""),this.tmp=(i=(0,n.h)("span","span_tmp")).children.apply(i,v(e)).css("top","0px").css("color","black").css("font-size","14px").css("font-family","m-inconsolata,monospace,arial,sans,sans-serif"),this.textEl.el.insertBefore(this.tmp.el,this.textEl.el.childNodes[0]),b.call(this,this.textEl.el,-1)),this.spanArr=e}}},{key:"handler",value:function(e){var t=this.editorText.getText(),r=this.pos;if(r>=t)this.setMouseDownIndex([]);else{var n=e.substring(0,r),a=e.substring(r,e.length);x.call(this,n),""!==a?this.setMouseDownIndex([n,a]):this.setMouseDownIndex([])}}},{key:"setOffset",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.textEl,a=this.areaEl,i=this.suggest,o=this.freeze,l=this.el;if(e){this.areaOffset=e;var s=e.left,u=e.top,c=e.width,d=e.height,f=e.l,m=e.t,h={left:0,top:0};o.w>f&&o.h>m||(o.w<f&&o.h<m?(h.left=o.w,h.top=o.h):o.w>f?h.top=o.h:o.h>m&&(h.left=o.w)),l.offset(h),a.offset({left:s-h.left-.8,top:u-h.top-.8}),n.offset({width:c-2+.8,height:d-3+.8});var v={left:0};v[t]=d,i.hide(),y.call(this),r&&this.show(!1)}}},{key:"setCellEnd",value:function(e){var t=this,r="",n=e&&e.formulas||"";(0,m.isHave)(e)&&(0,m.isHave)(e.text)&&(r=e.text),(0,m.isHave)(e)&&(0,m.isHave)(e.formulas)&&(r=e.formulas);var a=this.data,i=a.rows,o=a.getCellStyleOrDefault(this.ri,this.ci),l=a.renderFormat(o,e,this.ri,this.ci,!0);l.state&&(r=l.cellText,n=l.cellText),this.textEl.child(r+""),this.pos=r.length,b.call(this,this.textEl.el,-1),this.editorText.setOldCell({text:e&&e.text||"",formulas:e&&e.formulas||""},{ri:this.ri,ci:this.ci}),f.testValid.call(this),O.call(this,null,r,n,"end"),setTimeout((function(){t.pos=i.toString(r).length,b.call(t,t.textEl.el,-1)}),20)}},{key:"setCell",value:function(e,t){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;this.cell=e,this.show();var a=e&&e.formulas||"";a=""===a?e&&e.text||"":a,this.editorText.setOldCell({text:e&&e.text||"",formulas:e&&e.formulas||""},{ri:this.ri,ci:this.ci});var i=this.el,o=this.datepicker,l=this.suggest;if(i.show(),this.textEl.show(),b.call(this,this.textEl.el,-1),setTimeout((function(){r.pos=a.length,b.call(r,r.textEl.el)}),10),this.validator=t,t){var s=t.type;"date"===s&&(o.show(),/^\s*$/.test(a)||o.setValue(a)),"list"===s&&(l.setItems(t.values()),l.search(""))}2===n&&""!==a&&"="===a[0]?(O.call(this,null,a),this.pos=a.length,b.call(this,this.textEl.el,a.length)):2===n&&"="!==a[0]&&this.textEl.child(a),setTimeout((function(){r.textlineEl.html(a),y.call(r)}))}},{key:"isDisplay2",value:function(){return I.call(this)}},{key:"setCursorPos",value:function(e){this.pos=e,b.call(this,this.textEl.el)}},{key:"setText",value:function(e){this.editorText.setText(e),_.call(this,e),y.call(this),this.textEl.child(this.tmp)}}])&&p(t.prototype,r),l&&p(t,l),e}();t.default=M},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(152))&&n.__esModule?n:{default:n},i=r(0),o=r(1),l=r(19);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.calendar=new a.default(new Date),this.el=(0,i.h)("div","".concat(o.cssPrefix,"-datepicker")).child(this.calendar.el).hide()}var t,r,n;return t=e,(r=[{key:"setValue",value:function(e){var t=this.calendar;return"string"==typeof e?(0,l.str2Re)(l.calendarPattern).test(e)&&t.setValue(new Date(e.replace(new RegExp("-","g"),"/"))):e instanceof Date&&t.setValue(e),this}},{key:"change",value:function(e){var t=this;this.calendar.selectChange=function(r){e(r),t.hide()}}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){this.el.hide()}}])&&s(t.prototype,r),n&&s(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(11))&&n.__esModule?n:{default:n},o=r(10);function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){e.setMonth(e.getMonth()+t)}function c(e,t){var r=new Date(e);return r.setDate(t-e.getDay()+1),r}var d=function(){function e(t){var r,n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t,this.cvalue=new Date(t),this.headerLeftEl=(0,a.h)("div","calendar-header-left"),this.bodyEl=(0,a.h)("tbody",""),this.buildAll(),this.el=(0,a.h)("div","fin-cell-calendar").children((0,a.h)("div","calendar-header").children(this.headerLeftEl,(0,a.h)("div","calendar-header-right").children((0,a.h)("a","calendar-prev").on("click.stop",(function(){return n.prev()})).child(new i.default("chevron-left")),(0,a.h)("a","calendar-next").on("click.stop",(function(){return n.next()})).child(new i.default("chevron-right")))),(0,a.h)("table","calendar-body").children((0,a.h)("thead","").child((r=(0,a.h)("tr","")).children.apply(r,l((0,o.t)("calendar.weeks").map((function(e){return(0,a.h)("th","cell").child(e)}))))),this.bodyEl)),this.selectChange=function(){}}var t,r,n;return t=e,(r=[{key:"setValue",value:function(e){this.value=e,this.cvalue=new Date(e),this.buildAll()}},{key:"prev",value:function(){u(this.value,-1),this.buildAll()}},{key:"next",value:function(){u(this.value,1),this.buildAll()}},{key:"buildAll",value:function(){this.buildHeaderLeft(),this.buildBody()}},{key:"buildHeaderLeft",value:function(){var e=this.value;this.headerLeftEl.html("".concat((0,o.t)("calendar.months")[e.getMonth()]," ").concat(e.getFullYear()))}},{key:"buildBody",value:function(){var e,t=this,r=this.value,n=this.cvalue,i=this.bodyEl,o=function(e,t,r){for(var n=new Date(e,t,1,23,59,59),a=[[],[],[],[],[],[]],i=0;i<6;i+=1)for(var o=0;o<7;o+=1){var l=c(n,7*i+o),s=l.getMonth()!==t,u=l.getMonth()===r.getMonth()&&l.getDate()===r.getDate();a[i][o]={d:l,disabled:s,active:u}}return a}(r.getFullYear(),r.getMonth(),n).map((function(e){var r,n=e.map((function(e){var r="cell";return e.disabled&&(r+=" disabled"),e.active&&(r+=" active"),(0,a.h)("td","").child((0,a.h)("div",r).on("click.stop",(function(){t.selectChange(e.d)})).child(e.d.getDate().toString()))}));return(r=(0,a.h)("tr","")).children.apply(r,l(n))}));(e=i.html("")).children.apply(e,l(o))}}])&&s(t.prototype,r),n&&s(t,n),e}();t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(1),a=r(0),i=r(154),o=r(8);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r,n){for(var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"",l=(0,a.h)("div",n),s=0;s<e[t].length;s++){var u=e[t][s],c=u.name,d=u.editor,f=u.index;r===s?l.child((0,a.h)("span",i).child(c)):!0===d&&r>=f?l.child((0,a.h)("span",i).child(c)):l.child((0,a.h)("span",o).child(c))}return l}var u=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"300px";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,a.h)("div","".concat(n.cssPrefix,"-suggest-content")).css("width",t).css("z-index","10000").css("position","absolute").hide(),this.el.attr("tabindex",0),(0,o.bind)(this.el.el,"paste",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"copy",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"keydown",(function(e){e.stopPropagation()})),(0,o.bind)(this.el.el,"keyup",(function(e){e.stopPropagation()}))}var t,r,u;return t=e,(r=[{key:"hide",value:function(){this.el.hide()}},{key:"content",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,o=this.el;t=t.toUpperCase();var l={};if(Object.keys(i.helpFormula).forEach((function(e){e===t&&(l=i.helpFormula[e])})),l&&"{}"!==JSON.stringify(l)){var u=[],c=s.call(this,l,"title",r,"".concat(n.cssPrefix,"-help-title"),"".concat(n.cssPrefix,"-help-span-title"),"".concat(n.cssPrefix,"-help-span2-title")),d=(0,a.h)("div","".concat(n.cssPrefix,"-help-section-title")).child("示例"),f=s.call(this,l,"example",r,"".concat(n.cssPrefix,"-help-section-content"),"".concat(n.cssPrefix,"-help-span3-title"));u.push.apply(u,[c,d,f]),Object.keys(l.content).forEach((function(e){var t=l.content[e],r=(0,a.h)("div","".concat(n.cssPrefix,"-help-section-title")).child(e),i=(0,a.h)("div","".concat(n.cssPrefix,"-help-section-content")).child(t);u.push.apply(u,[r,i])})),(e=o.html("")).children.apply(e,u).show()}}}])&&l(t.prototype,r),u&&l(t,u),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.helpFormula=void 0;t.helpFormula={ADD:{title:[{name:"ADD(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ADD(",editor:!1},{name:"2",editor:!1},{name:"，",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数值之和。相当于 + 运算符。",value1:"第一个加数。",value2:"第二个加数。"}},IRR:{title:[{name:"IRR(",editor:!1},{name:"values",editor:!1},{name:",",editor:!1},{name:"guess",editor:!1},{name:")",editor:!1}],example:[{name:"IRR(",editor:!1},{name:"A1:A10",editor:!1},{name:",",editor:!1},{name:"0.1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由数值代表的一组现金流的内部收益率。这些现金流不必为均衡的，但作为年金，它们必须按固定的间隔产生，如按月或按年。内部收益率为投资的回收利率，其中包含定期支付（负值）和定期收入（正值）。",values:"为数组或单元格的引用，包含用来计算返回的内部收益率的数字。至少各含一个正值和一个负值",guess:"对函数 IRR 计算结果的估计值，默认为0.1"}},SUM:{title:[{name:"SUM(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"[value2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUM(",editor:!1},{name:"A2:A100",editor:!1},{name:",",editor:!1},{name:"101",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一组数值和/或单元格的总和。",value1:"要相加的第一个数值或范围。",value2:"要与“value1”相加的其他数值或范围。"}},ABS:{title:[{name:"ABS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ABS(",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的绝对值。绝对值没有符号。",value:"需要计算其绝对值的实数。"}},SQRT:{title:[{name:"SQRT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SQRT(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回正平方根。",value:"要计算平方根的数。"}},CEILING:{title:[{name:"CEILING(",editor:!1},{name:"number",editor:!1},{name:",",editor:!1},{name:"significance",editor:!1},{name:")",editor:!1}],example:[{name:"CEILING(",editor:!1},{name:"10.4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"将参数 Number 向上舍入（沿绝对值增大的方向）为最接近的 significance 的倍数。",number:"所要四舍五入的数值。",significance:"用以进行舍入计算的倍数。"}},CONCATENATE:{title:[{name:"CONCATENATE(",editor:!1},{name:"text1",editor:!1},{name:"，",editor:!1},{name:"[text2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"CONCATENATE(",editor:!1},{name:"文本1",editor:!1},{name:"，",editor:!1},{name:"文本2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将两个或多个文本字符串合并为一个文本字符串。",text1:"待合并文本字符串",text2:"要与“text1”合并的其他待合并文本字符串。"}},PMT:{title:[{name:"PMT(",editor:!1},{name:"rate",editor:!1},{name:",",editor:!1},{name:"nper",editor:!1},{name:",",editor:!1},{name:"pv",editor:!1},{name:",",editor:!1},{name:"fv",editor:!1},{name:",",editor:!1},{name:"type",editor:!1},{name:")",editor:!1}],example:[{name:"PMT(",editor:!1},{name:"0.1",editor:!1},{name:",",editor:!1},{name:"120",editor:!1},{name:",",editor:!1},{name:"1000",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回贷款的每期付款额。",rate:"贷款利率。",nper:"该项贷款的付款期数。",pv:"现值，或一系列未来付款的当前值的累积和，也称为本金。",fv:"为未来值，或在最后一次付款后希望得到的现金余额，如果省略 fv，则假设其值为零，也就是一笔贷款的未来值为零。",type:"指定各期的付款时间是在期初还是期末。0或者省略为期初，1为期末"}},COUNTA:{title:[{name:"COUNTA(",editor:!1},{name:"value1",editor:!1},{name:"，",editor:!1},{name:"[value2, ...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNTA(",editor:!1},{name:"A1",editor:!1},{name:"，",editor:!1},{name:"A5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数列表中非空值的单元格个数。",value1:"要计数的单元格",value2:"要计数的单元格"}},STDEV:{title:[{name:"STDEV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEV(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"估算基于样本的标准偏差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数。也可以用单一数组或对某个数组的引用来代替用逗号分隔的参数"}},AVERAGE:{title:[{name:"AVERAGE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3}],example:[{name:"AVERAGE(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3}],content:{abstract:"返回参数的平均值 (算术平均值)",value1:"要计算平均值的第一个数字、单元格引用或单元格区域",value2:"要计算平均值的其他数字、单元格引用或单元格区域，最多可包含 255 个"}},EXP:{title:[{name:"Exp(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"Exp(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 e 的 n 次幂",value1:"底数 e 的指数"}},LN:{title:[{name:"LN(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"LN(",editor:!1},{name:"86",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个数的自然对数",value1:"想要计算其自然对数的正实数"}},TRIM:{title:[{name:"TRIM(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TRIM(",editor:!1},{name:"(' First Quarter Earnings  ')",editor:!1},{name:")",editor:!1}],content:{abstract:"除了单词之间的单个空格外，清除文本中所有的空格",text:"需要删除其中空格的文本"}},HYPERLINK:{title:[{name:"HYPERLINK(",editor:!1},{name:"网址",editor:!1},{name:",",editor:!1},{name:"[链接标签]",editor:!1},{name:")",editor:!1}],example:[{name:"HYPERLINK(",editor:!1},{name:'"http://www.google.com/"',editor:!1},{name:",",editor:!1},{name:'"Google"',editor:!1},{name:")",editor:!1}],content:{abstract:"在单元格内创建一个超链接。",url:"以引号括住的链接位置的完整网址，或对包含这种网址的单元格的引用。",linktag:"用引号括住的要在单元格中作为链接显示的文字，或对包含此类标签的单元格的引用。"}},LEN:{title:[{name:"LEN(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"LEN(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中的字符数",text:"要查找其长度的文本,也可为单元格引用。空格将作为字符进行计数"}},ISBLANK:{title:[{name:"ISBLANK(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ISBLANK(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"检验指定值并根据参数取值返回 TRUE 或 FALSE",value1:"要检验的值。参数 value 可以是空白（空单元格）、错误值、逻辑值、文本、数字、引用值，或者引用要检验的以上任意值的名称"}},ACCRINT:{title:[{name:"ACCRINT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"利率",editor:!1},{name:",",editor:!1},{name:"票面值",editor:!1},{name:",",editor:!1},{name:"年付息次数",editor:!1},{name:")",editor:!1}],example:[{name:"ACCRINT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期付息证券的应计利息",date1:"证券的发行日",date2:"证券的首次计息日",date3:"证券的结算日。证券结算日是在发行日期之后，证券卖给购买者的日期",rate:"证券的年息票利率",price:"证券的票面值。如果省略此参数，则 ACCRINT 使用 ￥1,000",frequency:"年付息次数。如果按年支付，frequency = 1；按半年期支付，frequency = 2；按季支付，frequency = 4"}},ACCRINTM:{title:[{name:"ACCRINTM(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"利率",editor:!1},{name:"'",editor:!1},{name:"票面值",editor:!1},{name:")",editor:!1}],example:[{name:"ACCRINTM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:"'",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期一次性付息有价证券的应计利息",date1:"证券的发行日",date2:"证券的到期日",rate:"证券的年息票利率",price:"证券的票面值。如果省略此参数，则 ACCRINTM 使用 ￥1,000"}},ACOS:{title:[{name:"ACOS(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOS(",editor:!1},{name:"-0.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反余弦值",value1:"所需的角度余弦值，必须介于 -1 到 1 之间"}},ACOSH:{title:[{name:"ACOSH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOSH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 value1 参数的反双曲余弦值",value1:"大于等于 1 的任意实数"}},ACOT:{title:[{name:"ACOT(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOT(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反余切值的主值",value1:"value1 为所需角度的余切值。 此值必须是实数"}},ACOTH:{title:[{name:"ACOTH(",editor:!1},{name:"value1",editor:!1},{name:")",editor:!1}],example:[{name:"ACOTH(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的反双曲余切值",value1:"value1 的绝对值必须大于 1"}},AMORDEGRC:{title:[{name:"AMORDEGRC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],example:[{name:"AMORDEGRC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每个结算期间的折旧值",value1:"资产原值",date1:"购入资产的日期",date2:"第一个期间结束时的日期",value2:"资产在使用寿命结束时的残值",value3:"期间",depreciationrate:"折旧率"}},AMORLINC:{title:[{name:"AMORLINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"期间",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],example:[{name:"AMORLINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"期间",editor:!1},{name:",",editor:!1},{name:"折旧率",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每个结算期间的折旧值，该函数为法国会计系统提供。如果某项资产是在结算期间的中期购入的，则按线性折旧法计算",value1:"资产原值",date1:"购入资产的日期",date2:"第一个期间结束时的日期",value2:"资产在使用寿命结束时的残值",period:"期间",depreciationrate:"折旧率"}},AND:{title:[{name:"AND(",editor:!1},{name:"逻辑值1",editor:!1},{name:",",editor:!1},{name:"[逻辑值2,...]",editor:!0,index:3}],example:[{name:"AND(",editor:!1},{name:"A2>1",editor:!1},{name:",",editor:!1},{name:"A2<100",editor:!0,index:3}],content:{abstract:"所有参数的计算结果为 TRUE 时，AND 函数返回 TRUE；只要有一个参数的计算结果为 FALSE，即返回 FALSE",logic1:"第一个想要测试且计算结果可为 TRUE 或 FALSE 的条件",logic2:"其他想要测试且计算结果可为 TRUE 或 FALSE 的条件（最多 255 个条件）"}},ARABIC:{title:[{name:"ARABIC(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"ARABIC(",editor:!1},{name:"'LVII'",editor:!1},{name:")",editor:!1}],content:{abstract:"将罗马数字转换为阿拉伯数字",text:"用引号引起的字符串、空字符串 ('') 或对包含文本的单元格的引用"}},ASC:{title:[{name:"ASC(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"ASC(",editor:!1},{name:"'EXCEL' ",editor:!1},{name:")",editor:!1}],content:{abstract:"对于双字节字符集 (DBCS) 语言，将全角（双字节）字符更改为半角（单字节）字符",text:"文本或对包含要更改的文本的单元格的引用。如果文本中不包含任何全角字母，则文本不会更改"}},ASIN:{title:[{name:"ASIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ASIN(",editor:!1},{name:"-0.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反正弦值",value:"所需的角度正弦值，必须介于 -1 到 1 之间"}},ASINH:{title:[{name:"ASINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ASINH(",editor:!1},{name:"-2.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反双曲正弦值",value:"任意实数"}},ATAN:{title:[{name:"ATAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ATAN(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回反正切值",value:"所需的角度正切值"}},ATAN2:{title:[{name:"ATAN2(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ATAN2(",editor:!1},{name:"-1",editor:!1},{name:",",editor:!1},{name:"-1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定的 X 及 Y 坐标值的反正切值",value1:"点的 x 坐标",value2:"点的 y 坐标"}},ATANH:{title:[{name:"ATANH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ATANH(",editor:!1},{name:"-0.1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数的反双曲正切值，参数必须介于 -1 到 1 之间（除去 -1 和 1）",value:"-1 到 1 之间的任意实数"}},AVEDEV:{title:[{name:"AVEDEV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"AVEDEV(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据与其均值的绝对偏差的平均值，AVEDEV 用于评测这组数据的离散度",value1:"任意实数",value2:"用于计算绝对偏差平均值的一组参数，参数的个数可以为 1 到 255 个"}},AVERAGEA:{title:[{name:"AVERAGEA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"AVERAGEA(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"计算参数列表中数值的平均值",value1:"任意实数",value2:"需要计算平均值的 1 到 255 个单元格、单元格区域或值"}},AVERAGEIF:{title:[{name:"AVERAGEIF(",editor:!1},{name:"引用范围",editor:!1},{name:",",editor:!1},{name:"标准条件",editor:!1},{name:")",editor:!1}],example:[{name:"AVERAGEIF(",editor:!1},{name:"B2:B5",editor:!1},{name:",",editor:!1},{name:"'<23000'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个区域内满足给定条件的所有单元格的平均值（算术平均值）",referencearea:"要计算平均值的一个或多个单元格，其中包括数字或包含数字的名称、数组或引用",standardcondition:"数字、表达式、单元格引用或文本形式的条件，用于定义要对哪些单元格计算平均值"}},AVERAGEIFS:{title:[{name:"AVERAGEIFS(",editor:!1},{name:"引用范围",editor:!1},{name:",",editor:!1},{name:"标准条件_适用范围1",editor:!1},{name:",",editor:!1},{name:"标准条件1",editor:!1},{name:",",editor:!1},{name:"[标准条件_适用范围2,标准条件2,...]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"AVERAGEIFS(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"C2:C7",editor:!1},{name:",",editor:!1},{name:"毕尔褔",editor:!1},{name:",",editor:!1},{name:"D2:D7",editor:!1},{name:",",editor:!1},{name:"'>2'",editor:!1},{name:",",editor:!1},{name:"E2:E7",editor:!1},{name:",",editor:!1},{name:"'是'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回满足多重条件的所有单元格的平均值（算术平均值）",referencearea:"要计算平均值的一个或多个单元格，其中包括数字或包含数字的名称、数组或引用",standardcondition_area1:"要计算平均值的实际单元格集",standardcondition1:"定义要对适用范围1中的哪些单元格计算平均值",standardcondition_area2:"适用范围及其对应的标准条件"}},BAHTTEXT:{title:[{name:"BAHTTEXT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"BAHTTEXT(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字转换为泰语文本并添加后缀“泰铢”",value:"要转换成文本的数字、对包含数字的单元格的引用或结果为数字的公式"}},BASE:{title:[{name:"BASE(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"基",editor:!1},{name:",",editor:!1},{name:"[最小长度]",editor:!0,index:6},{name:")",editor:!1}],example:[{name:"BASE(",editor:!1},{name:"15",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"10",editor:!0,index:6},{name:")",editor:!1}],content:{abstract:"将数字转换为具备给定基数的文本表示",value:"要转换的数字。 必须是大于或等于0且小于 2 ^ 53 的整数",basic:"要将数字转换为的基础基数。 必须是大于或等于2且小于或等于36的整数",minlength:"返回的字符串的最小长度。 必须是大于或等于0的整数"}},BESSELI:{title:[{name:"BESSELI(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELI(",editor:!1},{name:"1.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回修正 Bessel 函数值，它与用纯虚数参数运算时的 Bessel 函数值相等",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELJ:{title:[{name:"BESSELJ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELJ(",editor:!1},{name:"1.9",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Bessel 函数值",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELK:{title:[{name:"BESSELK(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELK(",editor:!1},{name:"1.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回修正 Bessel 函数值，它与用纯虚数参数运算时的 Bessel 函数值相等",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},BESSELY:{title:[{name:"BESSELY(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BESSELY(",editor:!1},{name:"2.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Bessel 函数值，也称为 Weber 函数或 Neumann 函数",value1:"用来进行函数计算的数值",value2:"Bessel 函数的阶数。如果 n 不是整数，则截尾取整"}},"BETA.DIST":{title:[{name:"BETA.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"逻辑值",editor:!1},{name:",",editor:!1},{name:"[下界]",editor:!0,index:10},{name:",",editor:!1},{name:"[上界]",editor:!0,index:12},{name:")",editor:!1}],example:[{name:"BETA.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"True",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:10},{name:",",editor:!1},{name:"A6",editor:!0,index:12},{name:")",editor:!1}],content:{abstract:"返回 Beta 分布",value1:"介于 A 和 B 之间用来进行函数计算的值",value2:"分布参数",value3:"分布参数",logic:"决定函数形式的逻辑值。如果 cumulative 为 TRUE，BETA.DIST 返回累积分布函数；如果为 FALSE，则返回概率密度函数",lowbound:"value1所属区间的下界",upbound:"value1所属区间的上界"}},"BETA.INV":{title:[{name:"BETA.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[下界]",editor:!0,index:8},{name:",",editor:!1},{name:"[上界]",editor:!0,index:10},{name:")",editor:!1}],example:[{name:"BETA.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:8},{name:",",editor:!1},{name:"A6",editor:!0,index:10},{name:")",editor:!1}],content:{abstract:"返回 Beta 累积概率密度函数 (BETA.DIST) 的反函数",value1:"与 beta 分布相关的概率",value2:"分布参数",value3:"分布参数",lowbound:"value1所属区域的下界",upbound:"value1所属区域的上界"}},BIN2DEC:{title:[{name:"BIN2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2DEC(",editor:!1},{name:"1100100",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为十进制数",value:"希望转换的二进制数"}},BIN2HEX:{title:[{name:"BIN2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2HEX(",editor:!1},{name:"11111011",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为十六进制数",value1:"希望转换的二进制数",value2:"要使用的字符数"}},BIN2OCT:{title:[{name:"BIN2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"BIN2OCT(",editor:!1},{name:"1001",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"将二进制数转换为八进制数",value1:"希望转换的二进制数",value2:"要使用的字符数"}},"BINOM.DIST":{title:[{name:"BINOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"BINOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回二项式分布的概率",value1:"试验成功的次数",value2:"独立试验的次数",value3:"每次试验中成功的概率",value4:"决定函数形式的逻辑值"}},"BINOM.INV":{title:[{name:"BINOM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"BINOM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回使累积二项式分布大于等于临界值的最小值",value1:"伯努利试验次数",value2:"每次试验中成功的概率",value3:"临界值"}},BITAND:{title:[{name:"BITAND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITAND(",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"25",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数的按位“与”",value1:"必须为十进制格式且大于等于 0",value2:"必须为十进制格式且大于等于 0"}},BITLSHIFT:{title:[{name:"BITLSHIFT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITLSHIFT(",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回向左移动指定位数后的数值",value1:"必须是大于或等于0的整数",value2:"必须是整数"}},BITOR:{title:[{name:"BITOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITOR(",editor:!1},{name:"23",editor:!1},{name:",",editor:!1},{name:"10",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数的按位“或”",value1:"必须为十进制格式且大于等于 0",value2:"必须为十进制格式且大于等于 0"}},BITRSHIFT:{title:[{name:"BITRSHIFT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITRSHIFT(",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回向右移动指定位数后的数值",value1:"必须是大于或等于0的整数",value2:"必须是整数"}},BITXOR:{title:[{name:"BITXOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"BITXOR(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数值的按位“异或”结果",value1:"必须大于或等于 0",value2:"必须大于或等于 0"}},"CEILING.MATH":{title:[{name:"CEILING.MATH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"CEILING.MATH(",editor:!1},{name:"-5.5",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:",",editor:!1},{name:"-1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字向上舍入为最接近的整数或最接近的指定基数的倍数",value1:"必须小于 9.99 E + 307 且大于-2.229 E-308",value2:"要将数字舍入到的倍数",value3:"对于负数, 控制数字是舍入还是远离零"}},"CEILING.PRECISE":{title:[{name:"CEILING.PRECISE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"CEILING.PRECISE(",editor:!1},{name:"4.3",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向上舍入为最接近的整数或最接近的有效位的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的倍数,如果省略，则其默认值为 1"}},CELL:{title:[{name:"CELL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!1},{name:")",editor:!1}],example:[{name:"CELL(",editor:!1},{name:"“row”",editor:!1},{name:",",editor:!1},{name:"A20",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有关单元格的格式、位置或内容的信息",value1:"一个文本值，指定要返回的单元格信息的类型",value2:"需要其相关信息的单元格。如果省略，则将 value1 参数中指定的信息返回给最后更改的单元格。如果参数 value2 是某一单元格区域，则函数只将该信息返回给该区域左上角的单元格"}},CHAR:{title:[{name:"CHAR(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CHAR(",editor:!1},{name:"65",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于数字代码的字符",value:"介于 1 到 255 之间用于指定所需字符的数字"}},CHIDIST:{title:[{name:"CHIDIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHIDIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的右尾概率",value1:"用来计算分布的值",value2:"自由度的数值"}},CHIINV:{title:[{name:"CHIINV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHIINV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的右尾概率的反函数",value1:"与 χ2 分布相关的概率",value2:"自由度的数值"}},"CHISQ.DIST":{title:[{name:"CHISQ.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.DIST(",editor:!1},{name:"0.5",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布",value1:"用来计算分布的值",value2:"自由度数",value3:"决定函数形式的逻辑值。如果为 TRUE，则返回累积分布函数；如果为 FALSE，则返回概率密度函数"}},"CHISQ.INV":{title:[{name:"CHISQ.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.INV(",editor:!1},{name:"0.93",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 χ2 分布的左尾概率的反函数",value1:"与 χ2 分布相关联的概率",value2:"自由度数"}},"CHISQ.TEST":{title:[{name:"CHISQ.TEST(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"CHISQ.TEST(",editor:!1},{name:"A2:B4",editor:!1},{name:",",editor:!1},{name:"A6:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回独立性检验值",area1:"包含观察值的数据区域，用于检验预期值",area2:"包含行列汇总的乘积与总计值之比率的数据区域"}},CHOOSE:{title:[{name:"CHOOSE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"CHOOSE(",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"使用 value1 返回数值参数列表中的数值",value1:"指定所选定的值参数。value1 必须为 1 到 254 之间的数字，或者为公式或对包含 1 到 254 之间某个数字的单元格的引用",value2:"value2 是必需的，后续值是可选的。可以为数字、单元格引用、已定义名称、公式、函数或文本",value3:"可以为数字、单元格引用、已定义名称、公式、函数或文本"}},CLEAN:{title:[{name:"CLEAN(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"CLEAN(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"删除文本中不能打印的字符",text:"要从中删除非打印字符的任何工作表信息"}},CODE:{title:[{name:"CODE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"CODE(",editor:!1},{name:"“A”",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中第一个字符的数字代码",text:"需要得到其第一个字符代码的文本"}},COLUMN:{title:[{name:"COLUMN(",editor:!1},{name:"[数值]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"COLUMN(",editor:!1},{name:"C10",editor:!0,index:1},{name:")",editor:!1}],content:{abstract:"返回指定单元格引用的列号",value:"要返回其列号的单元格或单元格区域"}},COLUMNS:{title:[{name:"COLUMNS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"COLUMNS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数组或引用的列数",array:"需要得到其列数的数组、数组公式或对单元格区域的引用"}},COMBIN:{title:[{name:"COMBIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"COMBIN(",editor:!1},{name:"8",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"计算从给定数目的对象集合中提取若干对象的组合数",value1:"项目的数量",value2:"每一组合中项目的数量"}},COMBINA:{title:[{name:"COMBINA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"COMBINA(",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定数目的项的组合数（包含重复）",value1:"必须大于或等于 0 并大于或等于 Number_chosen。 非整数值将被截尾取整",value2:"必须大于或等于 0。 非整数值将被截尾取整"}},COMPLEX:{title:[{name:"COMPLEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[后缀]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"COMPLEX(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"“j”",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将实系数及虚系数转换为 x+yi 或 x+yj 形式的复数",value1:"复数的实部",value2:"复数的虚部",suffix:"复数中虚部的后缀，如果省略，则认为它为 i"}},CONFIDENCE:{title:[{name:"CONFIDENCE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"CONFIDENCE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"使用正态分布返回总体平均值的置信区间",value1:"用于计算置信度的显著水平参数",value2:"数据区域的总体标准偏差,假设为已知",value3:"样本容量"}},CONVERT:{title:[{name:"CONVERT(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"单位1",editor:!1},{name:",",editor:!1},{name:"单位2",editor:!1},{name:")",editor:!1}],example:[{name:"CONVERT(",editor:!1},{name:"1.0",editor:!1},{name:",",editor:!1},{name:"'lbm'",editor:!1},{name:",",editor:!1},{name:"'kg'",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字从一个度量系统转换到另一个度量系统中",value:"以单位1为单位的需要进行转换的数值",unit1:"数值的单位",unit2:"结果的单位"}},CORREL:{title:[{name:"CORREL(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"CORREL(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回单元格区域 array1 和 array2 之间的相关系数",array1:"第一组数值单元格区域",array2:"第二组数值单元格区域"}},COS:{title:[{name:"COS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COS(",editor:!1},{name:"1.047",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定角度的余弦值",value:"想要求余弦的角度，以弧度表示"}},COTH:{title:[{name:"COTH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COTH(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个双曲角度的双曲余切值",value:"想要求双曲余弦值的角度值"}},COUNT:{title:[{name:"COUNT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNT(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"计算包含数字的单元格以及参数列表中数字的个数",value1:"要计算其中数字的个数的第一个项、单元格引用或区域",value2:"要计算其中数字的个数的其他项、单元格引用或区域，最多可包含 255 个"}},COUNTBLANK:{title:[{name:"COUNTBLANK(",editor:!1},{name:"区域",editor:!1},{name:")",editor:!1}],example:[{name:"COUNTBLANK(",editor:!1},{name:"A2:B5",editor:!1},{name:")",editor:!1}],content:{abstract:"计算指定单元格区域中空白单元格的个数",area:"需要计算其中空白单元格个数的区域"}},COUNTIF:{title:[{name:"COUNTIF(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"标准条件",editor:!1},{name:")",editor:!1}],example:[{name:"COUNTIF(",editor:!1},{name:"A2:A7",editor:!1},{name:",",editor:!1},{name:"'?果'",editor:!1},{name:")",editor:!1}],content:{abstract:"对区域中满足单个指定条件的单元格进行计数",area:"要对其进行计数的一个或多个单元格，其中包括数字或名称、数组或包含数字的引用。空值和文本值将被忽略",standardcondition:"用于定义将对哪些单元格进行计数的数字、表达式、单元格引用或文本字符串"}},COUNTIFS:{title:[{name:"COUNTIFS(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"标准条件1",editor:!1},{name:",",editor:!1},{name:"[区域2,标准条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"COUNTIFS(",editor:!1},{name:"B2:D2",editor:!1},{name:",",editor:!1},{name:"'=是'",editor:!1},{name:")",editor:!1}],content:{abstract:"将条件应用于跨多个区域的单元格，并计算符合所有条件的次数",area1:"在其中计算关联条件的第一个区域",standardcondition1:"条件的形式为数字、表达式、单元格引用或文本，可用来定义将对哪些单元格进行计数",standardcondition2:"附加的区域及其关联条件。最多允许 127 个区域/条件对"}},COUPDAYBS:{title:[{name:"COUPDAYBS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYBS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从付息期开始到结算日的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPDAYS:{title:[{name:"COUPDAYS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回结算日所在的付息期的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPDAYSNC:{title:[{name:"COUPDAYSNC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPDAYSNC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从结算日到下一付息日之间的天数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPNCD:{title:[{name:"COUPNCD",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPNCD",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个表示在结算日之后下一个付息日的数字",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPNUM:{title:[{name:"COUPNUM(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPNUM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在结算日和到期日之间的付息次数，向上舍入到最近的整数",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COUPPCD:{title:[{name:"COUPPCD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"COUPPCD(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示结算日之前的上一个付息日的数字",date1:"证券的结算日",date2:"证券的到期日",value:"年付息次数。如果按年支付，数值 = 1；按半年期支付，数值 = 2；按季支付，数值 = 4"}},COVAR:{title:[{name:"COVAR(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVAR(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回协方差，即两个数据集中每对数据点的偏差乘积的平均数",array1:"第一个所含数据为整数的单元格区域",array2:"第二个所含数据为整数的单元格区域"}},"COVARIANCE.P":{title:[{name:"COVARIANCE.P(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVARIANCE.P(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回总体协方差，即两个数据集中每对数据点的偏差乘积的平均数",array1:"第一个所含数据为整数的单元格区域",array2:"第二个所含数据为整数的单元格区域"}},"COVARIANCE.S":{title:[{name:"COVARIANCE.S(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"COVARIANCE.S(",editor:!1},{name:"A3:A5",editor:!1},{name:",",editor:!1},{name:"B3:B5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回样本协方差，即两个数据集中每对数据点的偏差乘积的平均值",array1:"整数的第一个单元格区域",array2:"整数的第二个单元格区域"}},CSC:{title:[{name:"CSC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CSC(",editor:!1},{name:"15",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的余割值，以弧度表示",value:"要求余割值的角度值"}},CSCH:{title:[{name:"CSCH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"CSCH(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的双曲余割值，以弧度表示",value:"要求双曲余割值的角度值"}},CUMIPMT:{title:[{name:"CUMIPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:",",editor:!1},{name:"value6",editor:!1},{name:")",editor:!1}],example:[{name:"CUMIPMT(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3*12",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一笔贷款在给定的 value4 到 value5 期间累计偿还的利息数额",value1:"利率",value2:"总付款期数",value3:"现值",value4:"计算中的首期。 付款期数从 1 开始计数",value5:"计算中的末期",value6:"付款时间类型"}},CUMPRINC:{title:[{name:"CUMPRINC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:",",editor:!1},{name:"value6",editor:!1},{name:")",editor:!1}],example:[{name:"CUMPRINC(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3*12",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"13",editor:!1},{name:",",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一笔贷款在给定的 start_period 到 end_period 期间累计偿还的本金数额",value1:"利率",value2:"总付款期数",value3:"现值",value4:"计算中的首期。 付款期数从 1 开始计数",value5:"计算中的末期",value6:"付款时间类型"}},DATE:{title:[{name:"DATE(",editor:!1},{name:"年",editor:!1},{name:",",editor:!1},{name:"月",editor:!1},{name:",",editor:!1},{name:"日",editor:!1},{name:")",editor:!1}],example:[{name:"DATE(",editor:!1},{name:"2008",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示特定日期的连续序列号",year:"年",month:"月",day:"日"}},DATEVALUE:{title:[{name:"DATEVALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"DATEVALUE(",editor:!1},{name:"'8/22/2008'",editor:!1},{name:")",editor:!1}],content:{abstract:"可将存储为文本的日期转换为 Excel 识别为日期的序列号",text:"表示 Excel 日期格式的日期的文本，或者是对表示 Excel 日期格式的日期的文本所在单元格的单元格引用"}},DAVERAGE:{title:[{name:"DAVERAGE(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DAVERAGE(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"A4:E10",editor:!1},{name:")",editor:!1}],content:{abstract:"对列表或数据库中满足指定条件的记录字段（列）中的数值求平均值",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"是包含所指定条件的单元格区域"}},DAY:{title:[{name:"DAY(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"DAY(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以序列号表示的某日期的天数，用整数 1 到 31 表示",date:"要查找的那一天的日期"}},DAYS:{title:[{name:"DAYS(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"DAYS(",editor:!1},{name:"'2011-3-15'",editor:!1},{name:",",editor:!1},{name:"'2011-2-1'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个日期之间的天数",date1:"用于计算期间天数的起始日期",date2:"用于计算期间天数的终止日期"}},DAYS360:{title:[{name:"DAYS360(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"DAYS360(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"按照一年 360 天的算法（每个月以 30 天计，一年共计 12 个月），返回两日期间相差的天数，这在一些会计计算中将会用到",date1:"要计算期间天数的起始日期",date2:"要计算期间天数的终止日期"}},DB:{title:[{name:"DB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:10},{name:")",editor:!1}],example:[{name:"DB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"7",editor:!0,index:10},{name:")",editor:!1}],content:{abstract:"使用固定余额递减法，计算一笔资产在给定期间内的折旧值",value1:"资产原值",value2:"资产在折旧期末的价值",value3:"资产的折旧期数",value4:"需要计算折旧值的期间",value5:"第一年的月份数，如省略，则假设为 12"}},DBCS:{title:[{name:"DBCS(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"DBCS(",editor:!1},{name:"EXCEL",editor:!1},{name:")",editor:!1}],content:{abstract:"将字符串中的半角（单字节）字母转换为全角（双字节）字符",text:"文本或包含要转换的文本的单元格的引用"}},DCOUNT:{title:[{name:"DCOUNT(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DCOUNT(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Age'",editor:!1},{name:",",editor:!1},{name:"A1:F2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中包含数字的单元格的个数",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DCOUNTA:{title:[{name:"DCOUNTA(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DCOUNTA(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Profit'",editor:!1},{name:",",editor:!1},{name:"A1:F2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的非空单元格的个数",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DDB:{title:[{name:"DDB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"DDB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"1.5",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"使用双倍余额递减法或其他指定方法，计算一笔资产在给定期间内的折旧值",value1:"资产原值",value2:"资产在折旧期末的价值（有时也称为资产残值）。此值可以是 0",value3:"资产的折旧期数",value4:"需要计算折旧值的期间",value5:"余额递减速率"}},DEC2BIN:{title:[{name:"DEC2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2BIN(",editor:!1},{name:"9",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为二进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DEC2HEX:{title:[{name:"DEC2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2HEX(",editor:!1},{name:"100",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为十六进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DEC2OCT:{title:[{name:"DEC2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEC2OCT(",editor:!1},{name:"58",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十进制数转换为八进制数",value1:"待转换的十进制整数",value2:"要使用的字符数"}},DECIMAL:{title:[{name:"DECIMAL(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"数制",editor:!1},{name:")",editor:!1}],example:[{name:"DECIMAL(",editor:!1},{name:"'FF'",editor:!1},{name:",",editor:!1},{name:"16",editor:!1},{name:")",editor:!1}],content:{abstract:"按给定基数将数字的文本表示形式转换成十进制数",text:"所要转换的文本",numtype:"转换所用的数制,必须是整数"}},DEGREES:{title:[{name:"DEGREES(",editor:!1},{name:"弧度角",editor:!1},{name:")",editor:!1}],example:[{name:"DEGREES(",editor:!1},{name:"PI()",editor:!1},{name:")",editor:!1}],content:{abstract:"将弧度转换为度",arctangle:"待转换的弧度角"}},DELTA:{title:[{name:"DELTA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DELTA(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"测试两个数值是否相等",value1:"第一个数字",value2:"第二个数字。如果省略，假设 Number2 的值为零"}},DEVSQ:{title:[{name:"DEVSQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DEVSQ(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据点与各自样本平均值偏差的平方和",value1:"必需",value2:"参数的个数可以为 1 到 255 个"}},DGET:{title:[{name:"DGET(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DGET(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Yield'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"从列表或数据库的列中提取符合指定条件的单个值",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DISC:{title:[{name:"DISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"DISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有价证券的贴现率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的价格（按面值为 ￥100 计算）",value2:"有价证券的兑换值（按面值为 ￥100 计算）"}},DMAX:{title:[{name:"DMAX(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DMAX(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'利润'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的最大数字",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DMIN:{title:[{name:"DMIN(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DMIN(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'Profit'",editor:!1},{name:",",editor:!1},{name:"A1:B2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的最小数字",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DOLLAR:{title:[{name:"DOLLAR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"DOLLAR(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字转换为货币格式使用小数位数舍入到您指定的位数的文本",value1:"数字、对包含数字的单元格的引用或是计算结果为数字的公式",value2:"数值小数点右边的位数"}},DOLLARDE:{title:[{name:"DOLLARDE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"DOLLARDE(",editor:!1},{name:"1.02",editor:!1},{name:",",editor:!1},{name:"16",editor:!1},{name:")",editor:!1}],content:{abstract:"将以整数部分和分数部分表示的价格（例如 1.02）转换为以小数部分表示的价格",value1:"以整数部份和分数部分表示的数字，用小数点隔开",value2:"用作分数中的分母的整数"}},DPRODUCT:{title:[{name:"DPRODUCT(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DPRODUCT(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的数值的乘积",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSTDEV:{title:[{name:"DSTDEV(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSTDEV(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体标准偏差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSTDEVP:{title:[{name:"DSTDEVP(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSTDEVP(",editor:!1},{name:"A5:E11",editor:!1},{name:",",editor:!1},{name:"'产量'",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为样本总体计算出的总体标准偏差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DSUM:{title:[{name:"DSUM(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DSUM(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'利润'",editor:!1},{name:",",editor:!1},{name:"A1:F3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中满足指定条件的记录字段（列）中的数字之和",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DURATION:{title:[{name:"DURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"DURATION(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回假设面值为 ￥ 100 的 Macauley 工期",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",returnrate:"有价证券的年收益率",frequency:"年付息次数"}},DVAR:{title:[{name:"DVAR(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DVAR(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'产量",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体方差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},DVARP:{title:[{name:"DVARP(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"函数适用列",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"DVARP(",editor:!1},{name:"A4:E10",editor:!1},{name:",",editor:!1},{name:"'产量",editor:!1},{name:",",editor:!1},{name:"A1:A3",editor:!1},{name:")",editor:!1}],content:{abstract:"通过使用列表或数据库中满足指定条件的记录字段（列）中的数字计算样本总体的样本总体方差",area1:"构成列表或数据库的单元格区域",funccolumn:"指定函数所使用的列",area2:"包含所指定条件的单元格区域"}},EDATE:{title:[{name:"EDATE(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EDATE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回表示某个日期的序列号，该日期与指定日期 (start_date) 相隔（之前或之后）指示的月份数",date:"一个代表开始日期的日期",value:"日期之前或之后的月份数"}},EFFECT:{title:[{name:"EFFECT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"EFFECT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"利用给定的名义年利率和每年的复利期数，计算有效的年利率",value1:"名义利率",value2:"每年的复利期数"}},EOMONTH:{title:[{name:"EOMONTH(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EOMONTH(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个月份最后一天的序列号，该月份与 日期 相隔（之后或之后）指示的月份数",date:"表示开始日期的日期",value:"日期 之前或之后的月份数"}},ERF:{title:[{name:"ERF(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ERF(",editor:!1},{name:"0.745",editor:!1},{name:")",editor:!1}],content:{abstract:"返回误差函数在上下限之间的积分",value1:"函数的积分下限",value2:"函数的积分上限。 如果省略，ERF 积分将在零到 lower_limit 之间"}},ERFCPRECISE:{title:[{name:"ERFCPRECISE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ERFCPRECISE(",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回从 数值 到无穷大积分的互补 ERF 函数",value:"函数的积分下限"}},"ERROR.TYPE":{title:[{name:"ERROR.TYPE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ERROR.TYPE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于 Microsoft Excel 中的错误值之一的数字或返回“#N/A”错误（如果不存在错误）",value:"要查找其标识号的错误值"}},EVEN:{title:[{name:"EVEN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"EVEN(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字向上舍入到的最接近的偶数",value:"要舍入的值"}},EXACT:{title:[{name:"EXACT(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:")",editor:!1}],example:[{name:"EXACT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"B2",editor:!1},{name:")",editor:!1}],content:{abstract:"比较两个文本字符串，如果它们完全相同，则返回 TRUE，否则返回 FALSE",text1:"第一个文本字符串",text2:"第二个文本字符串"}},"EXPON.DIST":{title:[{name:"EXPON.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"EXPON.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指数分布",value1:"函数值",value2:"参数值",value3:"逻辑值，用于指定指数函数的形式"}},"F.DIST":{title:[{name:"F.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"F.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 F 概率分布函数的函数值",value1:"用来计算函数的值",value2:"分子自由度",value3:"分母自由度",value4:"决定函数形式的逻辑值"}},"F.INV":{title:[{name:"F.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 F 概率分布函数的反函数值",value1:"F 累积分布的概率值",value2:"分子自由度",value3:"分母自由度"}},"F.TEST":{title:[{name:"F.TEST(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"F.TEST(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断两个样本的方差是否不同",array1:"第一个数组或数据区域",array2:"第二个数组或数据区域"}},FACT:{title:[{name:"FACT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FACT(",editor:!1},{name:"5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某数的阶乘",value:"要计算其阶乘的非负数"}},FACTDOUBLE:{title:[{name:"FACTDOUBLE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FACTDOUBLE(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双倍阶乘",value:"要计算其双倍阶乘的数值"}},FALSE:{title:[{name:"FALSE(",editor:!1},{name:")",editor:!1}],example:[{name:"FALSE(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回逻辑值 FALSE"}},"F.DIST.RT":{title:[{name:"F.DIST.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.DIST.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数据集的（右尾）F 概率分布（变化程度）",value1:"用来计算函数的值",value2:"分子自由度",value3:"分母自由度"}},FIND:{title:[{name:"FIND(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FIND(",editor:!1},{name:"'M'",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"用于在文本2中定位文本1，并返回文本1的起始位置的值，该值从文本2的第一个字符算起",text1:"要查找的文本",text2:"包含要查找文本的文本"}},"F.INV.RT":{title:[{name:"F.INV.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"F.INV.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回（右尾）F 概率分布函数的反函数值",value1:"F 累积分布的概率值",value2:"分子自由度",value3:"分母自由度"}},FISHER:{title:[{name:"FISHER(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FISHER(",editor:!1},{name:"0.75",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的 Fisher 变换值",value:"要对其进行变换的数值"}},FISHERINV:{title:[{name:"FISHERINV(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"FISHERINV(",editor:!1},{name:"0.972955",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Fisher 逆变换值",value:"要对其进行逆变换的数值"}},FIXED:{title:[{name:"FIXED(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FIXED(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"-1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字舍入到指定的小数位数，使用句点和逗号，以十进制数格式对该数进行格式设置，并以文本形式返回结果",value1:"要进行舍入并转换为文本的数字",value2:"小数点右边的位数",value3:"一个逻辑值，如果为 TRUE，则会禁止 FIXED 在返回的文本中包含逗号"}},FLOOR:{title:[{name:"FLOOR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"FLOOR(",editor:!1},{name:"3.7",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将参数 value1 向下舍入（沿绝对值减小的方向）为最接近的 value2 的倍数",value1:"要舍入的数值",value2:"要舍入到的倍数"}},"FLOOR.MATH":{title:[{name:"FLOOR.MATH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"FLOOR.MATH(",editor:!1},{name:"-5.5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"-1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"将数字向下舍入为最接近的整数或最接近的指定基数的倍数",value1:"要向下舍入的数字",value2:"要舍入到的倍数",value3:"舍入负数的方向（接近或远离 0）"}},"FLOOR.PRECISE":{title:[{name:"FLOOR.PRECISE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"FLOOR.PRECISE(",editor:!1},{name:"-3.2",editor:!1},{name:",",editor:!1},{name:"-1",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向下舍入为最接近的整数或最接近的 value2 的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的倍数。如果省略,则其默认值为 1"}},FORECAST:{title:[{name:"FORECAST(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"FORECAST(",editor:!1},{name:"30",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"根据现有值计算或预测未来值",value:"需要进行值预测的数据点",area1:"相关数组或数据区域",area2:"独立数组或数据区域"}},FREQUENCY:{title:[{name:"FREQUENCY(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"FREQUENCY(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"B2:B4",editor:!1},{name:")",editor:!1}],content:{abstract:"函数计算值在某个范围内出现的频率, 然后返回一个垂直的数字数组",array1:" 要对其频率进行计数的一组数值或对这组数值的引用",array2:" 要将 array1 中的值插入到的间隔数组或对间隔的引用"}},FV:{title:[{name:"FV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"FV(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:7},{name:",",editor:!1},{name:"A6",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"用于根据固定利率计算投资的未来值",value1:"各期利率",value2:"年金的付款总期数",value3:"各期所应支付的金额，在整个年金期间保持不变",value4:" 现值，或一系列未来付款的当前值的累积和。 如果省略 value4，则假定其值为 0",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末。如果省略 value5，则假定其值为 0"}},FVSCHEDULE:{title:[{name:"FVSCHEDULE(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"FVSCHEDULE(",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"{0.09,0.11,0.1}",editor:!1},{name:")",editor:!1}],content:{abstract:"返回应用一系列复利率计算的初始本金的未来值",value:"现值",array:"要应用的利率数组"}},GAMMA:{title:[{name:"GAMMA(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA(",editor:!1},{name:"2.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 gamma 函数值",value:"返回一个数字"}},"GAMMA.DIST":{title:[{name:"GAMMA.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛分布函数的函数值",value1:"用来计算分布的数值",value2:"分布参数",value3:"分布参数",value4:"决定函数形式的逻辑值"}},"GAMMA.INV":{title:[{name:"GAMMA.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMA.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛累积分布函数的反函数值",value1:"伽玛分布相关的概率",value2:"分布参数",value3:"分布参数"}},GAMMALN:{title:[{name:"GAMMALN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMALN(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛函数的自然对数",value:"要计算其 GAMMALN 的数值"}},"GAMMALN.PRECISE":{title:[{name:"GAMMALN.PRECISE(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAMMALN.PRECISE(",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回伽玛函数的自然对数",value:"要计算其 GAMMALN.PRECISE 的数值"}},GAUSS:{title:[{name:"GAUSS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"GAUSS(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"计算标准正态总体的成员处于平均值与平均值的 z 倍标准偏差之间的概率",value:"返回一个数字"}},GCD:{title:[{name:"GCD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GCD(",editor:!1},{name:"24",editor:!1},{name:",",editor:!1},{name:"36",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回两个或多个整数的最大公约数",value1:"任意实数",value2:"任意实数,个数介于 1 和 255 之间"}},GEOMEAN:{title:[{name:"GEOMEAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GEOMEAN(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组正数数据或正数数据区域的几何平均值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},GESTEP:{title:[{name:"GESTEP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"GESTEP(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"可以使用此函数来筛选一组值",value1:"要针对步骤进行测试的值",value2:"如果省略，则 GESTEP 使用零"}},GROWTH:{title:[{name:"GROWTH(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"GROWTH(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"A2:A7",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"使用现有数据计算预测的指数等比",set1:"关系表达式 y = b*m^x 中已知的 y 值集合",set2:"关系表达式 y=b*m^x 中已知的 x 值集合",value1:" 需要 GROWTH 返回对应 y 值的新 x 值",value2:" 一个逻辑值，用于指定是否将常量 b 强制设为 1"}},HARMEAN:{title:[{name:"HARMEAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HARMEAN(",editor:!1},{name:"A2:A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的调和平均值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},HEX2BIN:{title:[{name:"HEX2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HEX2BIN(",editor:!1},{name:"'F'",editor:!1},{name:",",editor:!1},{name:"8",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为二进制数",value1:"要转换的十六进制数",value2:"要使用的字符数"}},HEX2DEC:{title:[{name:"HEX2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"HEX2DEC(",editor:!1},{name:"'FFFFFFFF5B'",editor:!1},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为十进制数",value:"要转换的十六进制数"}},HEX2OCT:{title:[{name:"HEX2OCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"HEX2OCT(",editor:!1},{name:"'F'",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将十六进制数转换为八进制数",value1:"要转换的十六进制数",value2:"要使用的字符数"}},HLOOKUP:{title:[{name:"HLOOKUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"HLOOKUP(",editor:!1},{name:"'B'",editor:!1},{name:",",editor:!1},{name:"A1:C1",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在表格的首行或数值数组中搜索值，然后返回表格或数组中指定行的所在列中的值",value1:"要在表格的第一行中查找的值",array1:"在其中查找数据的信息表",value2:"array1 中将返回匹配值的行号",value3:"一个逻辑值，指定希望 HLOOKUP 查找精确匹配值还是近似匹配值"}},HOUR:{title:[{name:"HOUR(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"HOUR(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值的小时数",time:"时间值，其中包含要查找的小时数"}},"HYPGEOM.DIST":{title:[{name:"HYPGEOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:".",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"value5",editor:!1},{name:")",editor:!1}],example:[{name:"HYPGEOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:".",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回超几何分布",value1:"样本中成功的次数",value2:"样本量",value3:"总体中成功的次数",value4:"总体大小",value5:"决定函数形式的逻辑值"}},IF:{title:[{name:"IF(",editor:!1},{name:"条件",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"IF(",editor:!1},{name:"A2>B2",editor:!1},{name:",",editor:!1},{name:"'超出预算'",editor:!1},{name:",",editor:!1},{name:"'正常'",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"如果条件为真，该函数将返回一个值；如果条件为假，函数将返回另一个值",conditon:"要测试的条件",value1:"条件的结果为 TRUE 时，您希望返回的值",value2:"条件的结果为 FALSE 时，您希望返回的值"}},IFERROR:{title:[{name:"IFERROR(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"值2",editor:!1},{name:")",editor:!1}],example:[{name:"IFERROR(",editor:!1},{name:"A2/B2",editor:!1},{name:",",editor:!1},{name:"'计算中有错误'",editor:!1},{name:")",editor:!1}],content:{abstract:"可以使用 IFERROR 函数捕获和处理公式中的错误",value1:"检查是否存在错误的参数",value2:"公式计算错误时返回的值"}},IFNA:{title:[{name:"IFNA(",editor:!1},{name:"参数",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IFNA(",editor:!1},{name:'VLOOKUP("Seattle",$A$5:$B$10,0)',editor:!1},{name:",",editor:!1},{name:"'Not found'",editor:!1},{name:")",editor:!1}],content:{abstract:"如果公式返回错误值 #N/A，则结果返回您指定的值；否则返回公式的结果",param:"用于检查错误值 #N/A 的参数",value:"公式计算结果为错误值 #N/A 时要返回的值"}},IFS:{title:[{name:"IFS(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[条件2,值2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"IFS(",editor:!1},{name:"A2>89",editor:!1},{name:",",editor:!1},{name:"'A'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数检查是否满足一个或多个条件，且返回符合第一个 TRUE 条件的值",condition1:"计算结果为 TRUE 或 FALSE 的条件",value:"当 条件1 的计算结果为 TRUE 时要返回结果。 可以为空。",condition2:"其他参数对"}},IMABS:{title:[{name:"IMABS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMABS(",editor:!1},{name:"'5+12i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的绝对值",value:"需要计算其绝对值的复数"}},IMAGINARY:{title:[{name:"IMAGINARY(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMAGINARY(",editor:!1},{name:"'3+4i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的虚系数",value:"需要计算其虚系数的复数"}},IMARGUMENT:{title:[{name:"IMARGUMENT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMARGUMENT(",editor:!1},{name:"'3+4i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数  θ (theta)，即以弧度表示的角",value:"需要计算其参数  θ 的复数"}},IMCONJUGATE:{title:[{name:"IMCONJUGATE(",editor:!1},{name:"value",editor:!1},{name:"",editor:!1}],example:[{name:"IMCONJUGATE(",editor:!1},{name:"'3+4i'",editor:!1},{name:"",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的共轭复数",value:"需要计算其共轭数的复数"}},IMCOS:{title:[{name:"IMCOS(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOS(",editor:!1},{name:"'1+i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余弦",value:"需要计算其余弦的复数"}},IMCOSH:{title:[{name:"IMCOSH",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOSH",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲余弦值",value:"需要计算其双曲余弦值的复数"}},IMCOT:{title:[{name:"IMCOT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCOT(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余切值",value:"要对其余切值的复数"}},IMCSC:{title:[{name:"IMCSC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCSC(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的余割值",value:"要对其余割值的复数"}},IMCSCH:{title:[{name:"IMCSCH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMCSCH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲余割值",value:"需要计算其双曲余割值的复数"}},IMDIV:{title:[{name:"IMDIV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMDIV(",editor:!1},{name:"'-238+240i'",editor:!1},{name:",",editor:!1},{name:"'10+24i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个复数的商",value1:"复数分子或被除数",value2:"复数分母或除数"}},IMEXP:{title:[{name:"IMEXP(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMEXP(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的指数",value:"需要计算其指数的复数"}},IMLN:{title:[{name:"IMLN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的自然对数",value:"需要计算其自然对数的复数"}},IMLOG2:{title:[{name:"IMLOG2(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLOG2(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返返回以 x+yi 或 x+yj 文本格式表示的复数的以 2 为底数的对数",value:"需要计算以 2 为底数的对数的复数"}},IMLOG10:{title:[{name:"IMLOG10(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMLOG10(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x + yi 或 x + yj 文本格式表示的复数的常用对数（以 10 为底数）",value:"需要计算其常用对数的复数"}},IMPOWER:{title:[{name:"IMPOWER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMPOWER(",editor:!1},{name:"'4+3i'",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的 n 次幂",value1:"需要计算其幂值的复数",value2:"需要对复数应用的幂次"}},IMPRODUCT:{title:[{name:"IMPRODUCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"IMPRODUCT(",editor:!1},{name:"'1+2i'",editor:!1},{name:",",editor:!1},{name:"30",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的乘积",value1:"任意复数",value2:"任意复数,个数介于1到255之间"}},IMREAL:{title:[{name:"IMREAL(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMREAL(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的实系数",value:"需要计算其实系数的复数"}},IMSEC:{title:[{name:"IMSEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSEC(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正割值",value:"需要计算其正割值的复数"}},IMSECH:{title:[{name:"IMSECH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSECH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的双曲正割值",value:"需要计算其双曲正割值的复数"}},IMSIN:{title:[{name:"IMSIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSIN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正弦值",value:"需要计算其正弦的复数"}},IMSINH:{title:[{name:"IMSINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSINH(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x + yi 或 x + yj 文本格式的复数的双曲正弦值",value:"要对其双曲正弦值的复数"}},IMSQRT:{title:[{name:"IMSQRT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMSQRT(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的平方根",value:"需要计算其平方根的复数"}},IMSUB:{title:[{name:"IMSUB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"IMSUB(",editor:!1},{name:"'13+4i'",editor:!1},{name:",",editor:!1},{name:"'5+3i",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个复数的差",value1:"从（复）数中减去 value2",value2:"从 value1 中减（复）数"}},IMSUM:{title:[{name:"IMSUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"IMSUM(",editor:!1},{name:"'3+4i'",editor:!1},{name:",",editor:!1},{name:"'5-3i'",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的两个或多个复数的和",value1:"任意复数",value2:"任意复数,个数介于1到255之间"}},IMTAN:{title:[{name:"IMTAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"IMTAN(",editor:!1},{name:"'4+3i'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回以 x+yi 或 x+yj 文本格式表示的复数的正切值",value:"要对其进行切线的复数"}},INDEX:{title:[{name:"INDEX(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"函数适用行",editor:!1},{name:",",editor:!1},{name:"[函数适用列]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"INDEX(",editor:!1},{name:"A2:B3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"函数返回表格或区域中的值或值的引用",array:"单元格区域或数组常量",funcrow:"选择数组中的某行，函数从该行返回数值",funccolum:"选择数组中的某列，函数从该列返回数值"}},INFO:{title:[{name:"INFO(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"INFO(",editor:!1},{name:"'numfile'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回有关当前操作环境的信息",text:"用于指定要返回的信息类型的文本"}},INT:{title:[{name:"INT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"INT(",editor:!1},{name:"8.9",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字向下舍入到最接近的整数",value:"需要进行向下舍入取整的实数"}},INTERCEPT:{title:[{name:"INTERCEPT(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"集合2",editor:!1},{name:")",editor:!1}],example:[{name:"INTERCEPT(",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"B2:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"利用已知的 x 值与 y 值计算直线与 y 轴交叉点",set1:"因变的观察值或数据的集合",set2:"自变的观察值或数据的集合"}},INTRATE:{title:[{name:"INTRATE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"INTRATE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回完全投资型证券的利率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的投资额",value2:"有价证券到期时的兑换值"}},IPMT:{title:[{name:"IPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:",",editor:!1},{name:"[value6]",editor:!0,index:11},{name:")",editor:!1}],example:[{name:"IPMT(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4*12",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回给定期数内对投资的利息偿还额",value1:"各期利率",value2:"用于计算其利息数额的期数，必须在 1 到 value3 之间",value3:"年金的付款总期数",value4:"现值，或一系列未来付款的当前值的累积和",value5:"未来值，或在最后一次付款后希望得到的现金余额",value6:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末。 如果省略 value6，则假定其值为 0"}},ISERR:{title:[{name:"ISERR(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISERR(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"检验是否存在错误情形",value:"值为任意错误值（除去 #N/A）,则返回TRUE"}},ISERROR:{title:[{name:"ISERROR(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISERROR(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"检验是否存在错误情形",value:"值为任意错误值,则返回TRUE"}},ISEVEN:{title:[{name:"ISEVEN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ISEVEN(",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"如果参数 数值 为偶数，返回 TRUE，否则返回 FALSE",value:"要测试的值"}},ISFORMULA:{title:[{name:"ISFORMULA(",editor:!1},{name:"引用",editor:!1},{name:")",editor:!1}],example:[{name:"ISFORMULA(",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"检查是否存在包含公式的单元格引用，然后返回 TRUE 或 FALSE",reference:"引用是对要测试单元格的引用"}},ISLOGICAL:{title:[{name:"ISLOGICAL(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISLOGICAL(",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为逻辑值",value:"如果为逻辑值返回TRUE,否则返回FALSE"}},ISNA:{title:[{name:"ISNA(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNA(",editor:!1},{name:"#N/A",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为#N/A",value:"如果为#N/A返回TRUE,否则返回FALSE"}},ISNONTEXT:{title:[{name:"ISNONTEXT(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNONTEXT(",editor:!1},{name:"#N/A",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为非文本的任意项",value:"如果为非文本的任意项返回TRUE,否则返回FALSE"}},ISNUMBER:{title:[{name:"ISNUMBER(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISNUMBER(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为数字",value:"如果为数字返回TRUE,否则返回FALSE"}},"ISO.CEILING":{title:[{name:"ISO.CEILING(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ISO.CEILING(",editor:!1},{name:"4.3",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回一个数字，该数字向上舍入为最接近的整数或最接近的有效位的倍数",value1:"要进行舍入的值",value2:"要将数字舍入的可选倍数。如果省略，则其默认值为 1"}},ISODD:{title:[{name:"ISODD(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISODD(",editor:!1},{name:"6",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为奇数",value:"如果为奇数返回TRUE,否则返回FALSE"}},ISOWEEKNUM:{title:[{name:"ISOWEEKNUM(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"ISOWEEKNUM(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定日期在全年中的 ISO 周数",date:"日期是 Excel 用于日期和时间计算的日期-时间代码"}},ISPMT:{title:[{name:"ISPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ISPMT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"计算付薪 (或投资) 指定期间内 (甚至本金付款) 支付的利息 (或接收)",value1:"投资的利率",value2:"要查找其利息的期间, 并且必须介于1和 value3 之间",value3:"投资的总支付期数",value4:"投资的现值"}},ISREF:{title:[{name:"ISREF(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"ISREF(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"判断是否为引用",value:"如果为引用返回TRUE,否则返回FALSE"}},KURT:{title:[{name:"KURT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"KURT(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的峰值",value1:"任意值",value2:"任意值,个数介于1到255之间"}},LARGE:{title:[{name:"LARGE(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"LARGE(",editor:!1},{name:"A2:B6",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集中第 k 个最大值",area:"需要确定第 数值 个最大值的数组或数据区域",value:"返回值在数组或数据单元格区域中的位置（从大到小排）"}},LCM:{title:[{name:"KURT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"LCM(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回整数的最小公倍数",value1:"任意整数",value2:"任意整数,个数介于1到255之间"}},LEFT:{title:[{name:"LEFT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:3},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"LEFT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"从文本字符串的第一个字符开始返回指定个数的字符",text:"包含要提取的字符的文本字符串",value1:"指定要由 LEFT 提取的字符的数量",value2:"按字节指定要由 LEFTB 提取的字符的数量"}},LINEST:{title:[{name:"LINEST(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"LINEST(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:3},{name:",",editor:!1},{name:"FALSE",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"使用最小二乘法计算与现有数据最佳拟合的直线，来计算某直线的统计值，然后返回描述此直线的数组",set1:"关系表达式 y = mx + b 中已知的 y 值集合",set2:"关系表达式 y = mx + b 中已知的 x 值集合",value1:"一个逻辑值，用于指定是否将常量 b 强制设为 0",value2:"一个逻辑值，用于指定是否返回附加回归统计值"}},LOG:{title:[{name:"LOG(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"LOG(",editor:!1},{name:"8",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"根据指定底数返回数字的对数",value1:"想要计算其对数的正实数",value2:"对数的底数。 如果省略，则假定其值为 10"}},LOG10:{title:[{name:"LOG10(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"LOG10(",editor:!1},{name:"86",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字以 10 为底的对数",value:"想要计算其以 10 为底的对数的正实数"}},LOGEST:{title:[{name:"LOGEST(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"LOGEST(",editor:!1},{name:"B2:B7",editor:!1},{name:",",editor:!1},{name:"A2:A7",editor:!0,index:3},{name:",",editor:!1},{name:"TRUE",editor:!0,index:5},{name:",",editor:!1},{name:"FALSE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"计算适合您的数据的指数曲线, 并返回描述该曲线的值数组",set1:"关系表达式 y = b*m^x 中已知的 y 值集合",set2:"关系表达式 y=b*m^x 中已知的 x 值集合",value1:"一个逻辑值，用于指定是否将常量 b 强制设为 1",value2:"一个逻辑值，用于指定是否返回附加回归统计值"}},LOGINV:{title:[{name:"LOGINV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"LOGINV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数累积分布函数的反函数值，此处的 ln(x) 是服从 value2 和 value3 的正态分布",value1:"与对数分布相关的概率",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差"}},"LOGNORM.DIST":{title:[{name:"LOGNORM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"LOGNORM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数分布函数，此处的 ln(x) 是含有 value2 与 value3 参数的正态分布",value1:"用来计算函数的值",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差",value4:"决定函数形式的逻辑值"}},"LOGNORM.INV":{title:[{name:"LOGNORM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"LOGNORM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 x 的对数累积分布函数的反函数值，此处的 ln(x) 是服从参数 value2 和 value3 的正态分布",value1:"与对数分布相关的概率",value2:"ln(x) 的平均值",value3:"ln(x) 的标准偏差"}},LOWER:{title:[{name:"LOWER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"LOWER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将一个文本字符串中的所有大写字母转换为小写字母",text:"要转换为小写字母的文本"}},MATCH:{title:[{name:"MATCH(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"MATCH(",editor:!1},{name:"39",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"在 范围 单元格中搜索特定的项，然后返回该项在此区域中的相对位置",value1:"要在 区域 中匹配的值",area:"要搜索的单元格区域",value2:"数字 -1、0 或 1"}},MAX:{title:[{name:"MAX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MAX(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组值中的最大值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MDETERM:{title:[{name:"MDETERM(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"MDETERM(",editor:!1},{name:"A2:D5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个数组的矩阵行列式的值",array:"行数和列数相等的数值数组"}},MDURATION:{title:[{name:"MDURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"MDURATION(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回假设面值 ￥100 的有价证券的 Macauley 修正期限",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的年收益率",value3:"年付息次数"}},MEDIAN:{title:[{name:"MEDIAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MEDIAN(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组已知数字的中值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MID:{title:[{name:"MID(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"MID(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回文本字符串中从指定位置开始的特定数目的字符，该数目由用户指定",text:"包含要提取字符的文本字符串",value1:"文本中要提取的第一个字符的位置",value2:"指定希望 MID 从文本中返回字符的个数"}},MIN:{title:[{name:"MIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MIN(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组值中的最小值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MINA:{title:[{name:"MINA(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MINA(",editor:!1},{name:"A2:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回参数列表中的最小值",value1:"任意值",value2:"任意值,个数介于1到255之间"}},MINUTE:{title:[{name:"MINUTE(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"MINUTE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值中的分钟。 分钟是一个介于 0 到 59 之间的整数",time:"一个时间值，其中包含要查找的分钟"}},MINVERSE:{title:[{name:"MINVERSE(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"MINVERSE(",editor:!1},{name:"A2:B3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数组中存储的矩阵的逆矩阵",array:"行数和列数相等的数值数组"}},MIRR:{title:[{name:"MIRR(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MIRR(",editor:!1},{name:"A2:A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一系列定期现金流的已修改内部收益率",array:"数组或对包含数字的单元格的引用",value1:"现金流中使用的资金支付的利率",value2:"将现金流再投资的收益率"}},MMULT:{title:[{name:"MMULT(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"MMULT(",editor:!1},{name:"A2:B3",editor:!1},{name:",",editor:!1},{name:"A5:B6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两个数组的矩阵乘积",array1:"要进行矩阵乘法运算的第一个数组",array2:"要进行矩阵乘法运算的第二个数组"}},MOD:{title:[{name:"MOD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MOD(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数相除的余数",value1:"要计算余数的被除数",value2:"除数"}},MODE:{title:[{name:"MODE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE(",editor:!1},{name:"A2:A7",editor:!1},{name:")",editor:!1}],content:{abstract:"回的数组或数据区域中出现频率最高或重复出现",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"MODE.MULT":{title:[{name:"MODE.MULT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE.MULT(",editor:!1},{name:"A2:A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据或数据区域中出现频率最高或重复出现的数值的垂直数组",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"MODE.SNGL":{title:[{name:"MODE.SNGL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MODE.SNGL(",editor:!1},{name:"A2:A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据或数据区域中出现频率最高或重复出现的数值的垂直数组",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MONTH:{title:[{name:"MONTH(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"MONTH(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回日期（以序列数表示）中的月份。 月份是介于 1（一月）到 12（十二月）之间的整数",date:"您尝试查找的月份的日期"}},MROUND:{title:[{name:"MROUND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"MROUND(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回舍入到所需倍数的数字",value1:"要舍入的值",value2:"要舍入到的倍数"}},MULTINOMIAL:{title:[{name:"MULTINOMIAL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"MULTINOMIAL(",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数和的阶乘与各参数阶乘乘积的比值",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},MUNIT:{title:[{name:"MUNIT(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"MUNIT(",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定维度的单位矩阵",value:"指定要返回的单位矩阵的维度"}},N:{title:[{name:"N(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"N(",editor:!1},{name:"7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回转化为数值后的值",value:"要转换的值"}},NA:{title:[{name:"NA(",editor:!1},{name:")",editor:!1}],example:[{name:"NA(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 #N/A. 的错误值"}},"NEGBINOM.DIST":{title:[{name:"NEGBINOM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"NEGBINOM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回负二项式分布",value1:"失败的次数",value2:"成功次数的阈值",value3:"成功的概率",value4:"决定函数形式的逻辑值"}},NETWORKDAYS:{title:[{name:"NETWORKDAYS(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NETWORKDAYS(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回参数 value1 和 value2 之间完整的工作日数值",value1:" 一个代表开始日期的日期",value2:" 一个代表终止日期的日期",value3:"不在工作日历中的一个或多个日期所构成的可选区域"}},"NETWORKDAYS.INTL":{title:[{name:"NETWORKDAYS.INTL(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NETWORKDAYS.INTL(",editor:!1},{name:"DATE(2006,1,1)",editor:!1},{name:",",editor:!1},{name:"DATE(2006,1,31)",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回两个日期之间的所有工作日数，使用参数指示哪些天是周末，以及有多少天是周末",date1:"一个代表开始日期的日期",date2:"一个代表终止日期的日期",value:"表示介于 日期1 和 日期2 之间但又不包括在所有工作日数中的周末日"}},NOMINAL:{title:[{name:"NOMINAL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"NOMINAL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"基于给定的实际利率和年复利期数，返回名义年利率",value1:"实际利率",value2:"每年的复利期数"}},"NORM.DIST":{title:[{name:"NORM.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定平均值和标准偏差的正态分布函数",value1:"需要计算其分布的数值",value2:"分布的算术平均值",value3:"分布的标准偏差",value4:"确定函数形式的逻辑值"}},"NORM.INV":{title:[{name:"NORM.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.INV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定平均值和标准偏差的正态累积分布函数的反函数值",value1:"对应于正态分布的概率",value2:"分布的算术平均值",value3:"分布的标准偏差"}},"NORM.S.DIST":{title:[{name:"NORM.S.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"NORM.S.DIST(",editor:!1},{name:"1.333333",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回标准正态分布函数",value1:"需要计算其分布的数值",value2:"决定函数形式的逻辑值"}},NOT:{title:[{name:"NOT(",editor:!1},{name:"逻辑函数",editor:!1},{name:")",editor:!1}],example:[{name:"NOT(",editor:!1},{name:"A2>100",editor:!1},{name:")",editor:!1}],content:{abstract:"函数会对其参数的值进行求反",logicfunc:"计算结果为 TRUE 或 FALSE 的任何值或表达式"}},NOW:{title:[{name:"NOW(",editor:!1},{name:")",editor:!1}],example:[{name:"NOW(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回当前日期和时间的序列号"}},NPER:{title:[{name:"NPER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"NPER(",editor:!1},{name:"A2/12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!0,index:7},{name:",",editor:!1},{name:"TRUE",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"基于固定利率及等额分期付款方式，返回某项投资的总期数",value1:"各期利率",value2:"各期所应支付的金额，在整个年金期间保持不变",value3:"现值，或一系列未来付款的当前值的累积和",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},NPV:{title:[{name:"NPV(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NPV(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"使用贴现率和一系列未来支出（负值）和收益（正值）来计算一项投资的净现值",value:"某一期间的贴现率",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},NUMBERVALUE:{title:[{name:"NUMBERVALUE(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[字符1]",editor:!0,index:3},{name:",",editor:!1},{name:"[字符2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"NUMBERVALUE(",editor:!1},{name:"'2.500,27'",editor:!1},{name:",",editor:!1},{name:"','",editor:!0,index:3},{name:",",editor:!1},{name:"'.'",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"以与区域设置无关的方式将文本转换为数字",text:"要转换为数字的文本",character1:"用于分隔结果的整数和小数部分的字符",character2:" 用于分隔数字分组的字符"}},OCT2DEC:{title:[{name:"OCT2DEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"OCT2DEC(",editor:!1},{name:"54",editor:!1},{name:")",editor:!1}],content:{abstract:"将八进制数转换为十进制数",value:"要转换的八进制数"}},OCT2BIN:{title:[{name:"OCT2BIN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OCT2BIN(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将八进制数转换为二进制数",value1:"要转换的八进制数",value2:"要使用的字符数"}},OCT2HEX:{title:[{name:"OCT2HEX(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OCT2HEX(",editor:!1},{name:"100",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将八进制数转换为十六进制数",value1:"要转换的八进制数",value2:"要使用的字符数"}},ODD:{title:[{name:"ODD(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"ODD(",editor:!1},{name:"1.5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字向上舍入到的最接近的奇数",value:"要舍入的值"}},ODDFPRICE:{title:[{name:"ODDFPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"日期4",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDFPRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回首期付息日不固定（长期或短期）的面值 ￥100 的有价证券价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日",date4:"有价证券的首期付息日",value1:"有价证券的利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDFYIELD:{title:[{name:"ODDFYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"日期4",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDFYIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:",",editor:!1},{name:"A9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回首期付息日不固定（长期或短期）的面值 ￥100 的有价证券价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日",date4:"有价证券的首期付息日",value1:"有价证券的利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDLPRICE:{title:[{name:"ODDLPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDLPRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回末期付息日不固定的面值 ￥100 的有价证券（长期或短期）的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的末期付息日",value1:"有价证券的利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},ODDLYIELD:{title:[{name:"ODDLYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"ODDLYIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:",",editor:!1},{name:"A8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回末期付息日不固定的面值 ￥100 的有价证券（长期或短期）的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的末期付息日",value1:"有价证券的利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},OR:{title:[{name:"OR(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"OR(",editor:!1},{name:"A2>1",editor:!1},{name:",",editor:!1},{name:"A2<100",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"函数的任意参数计算为 TRUE，则其返回 TRUE；如果其所有参数均计算机为 FALSE，则返回 FALSE",condition1:"第一个想要测试且计算结果可为 TRUE 或 FALSE 的条件",condition2:"其他想要测试且计算结果可为 TRUE 或 FALSE 的条件（最多 255 个条件）"}},PDURATION:{title:[{name:"PDURATION(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"PDURATION(",editor:!1},{name:"2.5%",editor:!1},{name:",",editor:!1},{name:"2000",editor:!1},{name:",",editor:!1},{name:"2200",editor:!1},{name:")",editor:!1}],content:{abstract:"返回投资到达指定值所需的期数",value1:"费率是指每期的利率",value2:"投资的现值",value3:"所需投资的未来值"}},PEARSON:{title:[{name:"PEARSON(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"PEARSON(",editor:!1},{name:"A3:A7",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回皮尔生(Pearson)乘积矩相关系数 r，这是一个范围在 -1.0 到 1.0 之间（包括 -1.0 和 1.0 在内）的无量纲指数，反映了两个数据集合之间的线性相关程度",array:"自变量集合",array2:"因变量集合"}},PERCENTILE:{title:[{name:"PERCENTILE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 k 个百分点的值",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},"PERCENTILE.EXC":{title:[{name:"PERCENTILE.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE.EXC(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 K 个百分点的值，其中 k 为 0 到 1 之间的值，不包含 0 和 1",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},"PERCENTILE.INC":{title:[{name:"PERCENTILE.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PERCENTILE.INC(",editor:!1},{name:"E2:E5",editor:!1},{name:",",editor:!1},{name:"0.3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回区域中数值的第 K 个百分点的值，K 为 0 到 1 之间的百分点值，包含 0 和 1",array:"定义相对位置的数组或数据区域",value:"0 到 1 之间的百分点值，包含 0 和 1"}},PERCENTRANK:{title:[{name:"PERCENTRANK(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将某个数值在数据集中的排位作为数据集的百分比值返回，此处的百分比值的范围为 0 到 1",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},"PERCENTRANK.EXC":{title:[{name:"PERCENTRANK.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK.EXC(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某个数值在一个数据集中的百分比（0 到 1，不包括 0 和 1）排位",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},"PERCENTRANK.INC":{title:[{name:"PERCENTRANK.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"PERCENTRANK.INC(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"将某个数值在数据集中的排位作为数据集的百分比值返回，此处的百分比值的范围为 0 到 1（含 0 和 1）",array:"定义相对位置的数值数组或数值数据区域",value1:"需要得到其排位的值",value2:"用于标识返回的百分比值的有效位数的值"}},PERMUT:{title:[{name:"PERMUT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PERMUT(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回可从数字对象中选择的给定数目对象的排列数",value1:"表示对象个数的整数",value2:"表示每个排列中对象个数的整数"}},PERMUTATIONA:{title:[{name:"PERMUTATIONA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PERMUTATIONA(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回可从对象总数中选择的给定数目对象（含重复）的排列数",value1:"表示对象总数的整数",value2:"表示每个排列中对象数目的整数"}},PHI:{title:[{name:"PHI(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"PHI(",editor:!1},{name:"0.75",editor:!1},{name:")",editor:!1}],content:{abstract:"返回标准正态分布的密度函数值",value:"所需的标准正态分布密度值"}},PI:{title:[{name:"PI(",editor:!1},{name:")",editor:!1}],example:[{name:"PI(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字 3.14159265358979（数学常量 pi），精确到 15 个数字"}},POISSON:{title:[{name:"POISSON(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"POISSON(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回泊松分布",value1:"事件数",value2:"期望值",value3:"一逻辑值，确定所返回的概率分布的形式"}},"POISSON.DIST":{title:[{name:"POISSON.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"POISSON.DIST(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回泊松分布",value1:"事件数",value2:"期望值",value3:"一逻辑值，确定所返回的概率分布的形式"}},POWER:{title:[{name:"POWER(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"POWER(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字乘幂的结果",value1:"基数。 可为任意实数",value2:"基数乘幂运算的指数"}},PPMT:{title:[{name:"PPMT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"PPMT(",editor:!1},{name:"A11",editor:!1},{name:",",editor:!1},{name:"A12",editor:!1},{name:",",editor:!1},{name:"10",editor:!1},{name:",",editor:!1},{name:"A13",editor:!1},{name:")",editor:!1}],content:{abstract:"返回根据定期固定付款和固定利率而定的投资在已知期间内的本金偿付额",value1:"各期利率",value2:"指定期数，该值必须在 1 到 value3 范围内",value3:"年金的付款总期数",value4:"现值即一系列未来付款当前值的总和",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},PRICE:{title:[{name:"PRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"PRICE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期付息的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的年收益率",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},PRICEDISC:{title:[{name:"PRICEDISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"PRICEDISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回折价发行的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的贴现率",value2:"面值 ￥100 的有价证券的清偿价值"}},PRICEMAT:{title:[{name:"PRICEMAT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"PRICEMAT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期付息的面值 ￥100 的有价证券的价格",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日，以时间序列号表示",value1:"有价证券在发行日的利率",value2:"有价证券的年收益率"}},PROB:{title:[{name:"PROB(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"PROB(",editor:!1},{name:"A3:A6",editor:!1},{name:",",editor:!1},{name:"B3:B6",editor:!1},{name:",",editor:!1},{name:"2",editor:!0,index:5},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"返回区域中的数值落在指定区间内的概率",area:"具有各自相应概率值的 x 数值区域",array:"与 区域 中的值相关联的一组概率值",value1:"要计算其概率的数值下界",value2:"要计算其概率的可选数值上界"}},PRODUCT:{title:[{name:"PRODUCT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"PRODUCT(",editor:!1},{name:"A2:A4",editor:!1},{name:")",editor:!1}],content:{abstract:"函数将以参数形式给出的所有数字相乘, 并返回该产品",value1:"要相乘的第一个数字或范围",value2:"要相乘的其他数字或单元格区域，最多可以使用 255 个参数"}},PROPER:{title:[{name:"PROPER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"PROPER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本字符串的首字母以及文字中任何非字母字符之后的任何其他字母转换成大写",text:"用引号括起来的文本、返回文本值的公式，或者对包含要进行部分大写转换文本的单元格的引用"}},PV:{title:[{name:"PV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"PV(",editor:!1},{name:"A3/12",editor:!1},{name:",",editor:!1},{name:"12*A4",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:",",editor:!1},{name:"0",editor:!0,index:9},{name:")",editor:!1}],content:{abstract:"用于根据固定利率计算贷款或投资的现值",value1:"各期利率",value2:"年金的付款总期数",value3:"每期的付款金额，在年金周期内不能更改",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},QUARTILE:{title:[{name:"QUARTILE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一组数据的四分位点",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},"QUARTILE.EXC":{title:[{name:"QUARTILE.EXC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE.EXC(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"基于 0 到 1 之间（不包括 0 和 1）的百分点值返回数据集的四分位数",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},"QUARTILE.INC":{title:[{name:"QUARTILE.INC(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"QUARTILE.INC(",editor:!1},{name:"A2:A9",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"根据 0 到 1 之间的百分点值（包含 0 和 1）返回数据集的四分位数",array:"要求得四分位数值的数组或数字型单元格区域",value:"指定返回哪一个值"}},QUOTIENT:{title:[{name:"QUOTIENT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"QUOTIENT(",editor:!1},{name:"5",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回除法的整数部分",value1:"被除数",value2:"除数"}},RADIANS:{title:[{name:"RADIANS(",editor:!1},{name:"角度",editor:!1},{name:")",editor:!1}],example:[{name:"RADIANS(",editor:!1},{name:"270",editor:!1},{name:")",editor:!1}],content:{abstract:"将度数转换为弧度",tangle:"要转换的以度数表示的角度"}},RAND:{title:[{name:"RAND(",editor:!1},{name:")",editor:!1}],example:[{name:"RAND(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回了一个大于等于 0 且小于 1 的平均分布的随机实数"}},RANDBETWEEN:{title:[{name:"RANDBETWEEN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"RANDBETWEEN(",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"100",editor:!1},{name:")",editor:!1}],content:{abstract:"返回位于两个指定数之间的一个随机整数。 每次计算工作表时都将返回一个新的随机整数",value1:"将返回的最小整数",value2:"将返回的最大整数"}},RANK:{title:[{name:"RANK(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位。 数字的排位是其相对于列表中其他值的大小",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},"RANK.AVG":{title:[{name:"RANK.AVG(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK.AVG(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位：数字的排位是其大小与列表中其他值的比值；如果多个值具有相同的排位，则将返回平均排位",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},"RANK.EQ":{title:[{name:"RANK.EQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"RANK.EQ(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!1},{name:",",editor:!1},{name:"1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一列数字的数字排位。 其大小与列表中其他值相关；如果多个值具有相同的排位，则返回该组值的最高排位",value1:"要找到其排位的数字",array:"数字列表的数组，对数字列表的引用",value2:"一个指定数字排位方式的数字"}},RATE:{title:[{name:"RATE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:7},{name:",",editor:!1},{name:"[value5]",editor:!0,index:9},{name:")",editor:!1}],example:[{name:"RATE(",editor:!1},{name:"A2*12",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回每期年金的利率",value1:"年金的付款总期数",value2:"每期的付款金额，在年金周期内不能更改",value3:"现值即一系列未来付款当前值的总和",value4:"未来值，或在最后一次付款后希望得到的现金余额",value5:"数字 0 或 1，用以指定各期的付款时间是在期初还是期末"}},RECEIVED:{title:[{name:"RECEIVED(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"RECEIVED(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一次性付息的有价证券到期收回的金额",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的投资额",value2:"有价证券的贴现率"}},REPLACE:{title:[{name:"REPLACE(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:")",editor:!1}],example:[{name:"REPLACE(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"'*'",editor:!1},{name:")",editor:!1}],content:{abstract:"根据指定的字符数，REPLACE 将部分文本字符串替换为不同的文本字符串",text1:"要替换其部分字符的文本",value1:"文本1中要替换为 文本2 的字符位置",value2:"文本1 中希望 REPLACE 使用 文本2 来进行替换的字符数",text2:"将替换 文本1 中字符的文本"}},REPT:{title:[{name:"REPT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"REPT(",editor:!1},{name:"'*_'",editor:!1},{name:",",editor:!1},{name:"3",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本重复一定次数",text:"需要重复显示的文本",value:"用于指定文本重复次数的正数"}},RIGHT:{title:[{name:"RIGHT(",editor:!1},{name:"text",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"RIGHT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"5",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"根据所指定的字符数返回文本字符串中最后一个或多个字符",text:"包含要提取字符的文本字符串",value:"指定希望 RIGHT 提取的字符数"}},ROMAN:{title:[{name:"ROMAN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"ROMAN(",editor:!1},{name:"499",editor:!1},{name:",",editor:!1},{name:"0",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"将阿拉伯数字转换为文字形式的罗马数字",value1:"需要转换的阿拉伯数字",value2:"一个数字, 指定所需的罗马数字类型"}},ROUND:{title:[{name:"ROUND(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUND(",editor:!1},{name:"2.15",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"函数将数字四舍五入到指定的位数",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROUNDDOWN:{title:[{name:"ROUNDDOWN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUND(",editor:!1},{name:"3.2",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:")",editor:!1}],content:{abstract:"朝着零的方向将数字进行向下舍入",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROUNDUP:{title:[{name:"ROUNDUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"ROUNDUP(",editor:!1},{name:"2.15",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"朝着远离 0（零）的方向将数字进行向上舍入",value1:"要四舍五入的数字",value2:"要进行四舍五入运算的位数"}},ROW:{title:[{name:"ROW(",editor:!1},{name:"区域",editor:!1},{name:")",editor:!1}],example:[{name:"ROW(",editor:!1},{name:"C10",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用的行号",area:"需要得到其行号的单元格或单元格区域"}},ROWS:{title:[{name:"ROWS(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"ROW(",editor:!1},{name:"C1:E4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用或数组的行数",area:"需要得到其行数的数组、数组公式或对单元格区域的引用"}},RRI:{title:[{name:"RRI(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"RRI(",editor:!1},{name:"96",editor:!1},{name:",",editor:!1},{name:"10000",editor:!1},{name:",",editor:!1},{name:"11000",editor:!1},{name:")",editor:!1}],content:{abstract:"返回投资增长的等效利率",value1:"投资的总期数",value2:"投资的现值",value3:"投资的未来值"}},RSQ:{title:[{name:"RSQ(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"RSQ(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"通过 known_y's 和 known_x's 中的数据点返回皮尔生乘积矩相关系数的平方",area1:"数组或数据点区域",area2:"数组或数据点区域"}},SEARCH:{title:[{name:"SEARCH(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SEARCH(",editor:!1},{name:"'e'",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"可在第二个文本字符串中查找第一个文本字符串，并返回第一个文本字符串的起始位置的编号，该编号从第二个文本字符串的第一个字符算起",text1:"要查找的文本",text2:"要在其中搜索 文本1 参数的值的文本",value:"文本2 参数中从之开始搜索的字符编号"}},SEC:{title:[{name:"SEC(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SEC(",editor:!1},{name:"45",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的正割值",value:"需要对其进行正割的角度 "}},SECH:{title:[{name:"SECH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SECH(",editor:!1},{name:"45",editor:!1},{name:")",editor:!1}],content:{abstract:"返回角度的双曲正割值",value:"对应所需双曲正割值的角度，以弧度表示"}},SECOND:{title:[{name:"SECOND(",editor:!1},{name:"时间",editor:!1},{name:")",editor:!1}],example:[{name:"SECOND(",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回时间值的秒数。 秒数是 0（零）到 59 范围内的整数",time:"一个时间值，其中包含要查找的秒数"}},SERIESSUM:{title:[{name:"SERIESSUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"SERIESSUM(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"A4:A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回基于SERIES公式的幂级数之和",value1:"幂级数的输入值",value2:"value1 的首项乘幂",value3:"级数中每一项的乘幂 n 的步长增加值",array:"与 value1 的每个连续乘幂相乘的一组系数"}},SHEET:{title:[{name:"SHEET(",editor:!1},{name:"[值]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"SHEET(",editor:!1},{name:"Table1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用工作表的工作表编号",value:"需要工作表编号的工作表或引用的名称"}},SHEETS:{title:[{name:"SHEETS(",editor:!1},{name:"[引用]",editor:!0,index:1},{name:")",editor:!1}],example:[{name:"SHEETS(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回引用中的工作表数",reference:"引用是要了解其包含的工作表数的引用"}},SIGN:{title:[{name:"SIGN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SIGN(",editor:!1},{name:"10",editor:!1},{name:")",editor:!1}],content:{abstract:"确定数字的符号",value:"任意实数"}},SIN:{title:[{name:"SIN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SIN(",editor:!1},{name:"PI()",editor:!1},{name:")",editor:!1}],content:{abstract:"返回已知角度的正弦",value:"需要求正弦的角度，以弧度表示"}},SINH:{title:[{name:"SINH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SINH(",editor:!1},{name:"0.0342*1.03",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双曲正弦",value:"任意实数"}},SKEW:{title:[{name:"SKEW(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SKEW(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回分布的偏斜度",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},"SKEW.P":{title:[{name:"SKEW.P(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SKEW(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"返回基于样本总体的分布不对称度：表明分布相对于平均值的不对称程度",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},SLN:{title:[{name:"SLN(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"SLN(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回一个期间内的资产的直线折旧",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数"}},SLOPE:{title:[{name:"SLOPE(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"集合2",editor:!1},{name:")",editor:!1}],example:[{name:"SLOPE(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回通过 集合1 和 集合2 中数据点的线性回归线的斜率",set1:"数字型因变量数据点数组或单元格区域",set2:"自变量数据点集合"}},SMALL:{title:[{name:"SMALL(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SMALL(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集中的第 k 个最小值",area:"需要找到第 k 个最小值的数组或数值数据区域",value:"要返回的数据在数组或数据区域里的位置"}},SQRTPI:{title:[{name:"SQRTPI(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"SQRTPI(",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回某数与 pi 的乘积的平方根",value:"与 pi 相乘的数"}},STANDARDIZE:{title:[{name:"STANDARDIZE(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"STANDARDIZE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由 value2 和 value3 表示的分布的规范化值",value1:"需要进行正态化的数值",value2:"分布的算术平均值",value3:"分布的标准偏差"}},STDEVA:{title:[{name:"STDEVA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVA(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据样本估计标准偏差",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},STDEVP:{title:[{name:"STDEVP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVP(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据作为参数给定的整个总体计算标准偏差",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},STDEVPA:{title:[{name:"STDEVPA(",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"[值2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"STDEVPA(",editor:!1},{name:"A3:A12",editor:!1},{name:")",editor:!1}],content:{abstract:"根据作为参数（包括文字和逻辑值）给定的整个总体计算标准偏差",value1:"任意值",value2:"任意值,个数介于1到255之间"}},STEYX:{title:[{name:"STEYX(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"STEYX(",editor:!1},{name:"A3:A9",editor:!1},{name:",",editor:!1},{name:"B3:B9",editor:!1},{name:")",editor:!1}],content:{abstract:"返回通过线性回归法预测每个 x 的 y 值时所产生的标准误差",area1:"因变量数据点数组或区域",area2:"自变量数据点数组或区域"}},SUBSTITUTE:{title:[{name:"SUBSTITUTE(",editor:!1},{name:"文本1",editor:!1},{name:",",editor:!1},{name:"文本2",editor:!1},{name:",",editor:!1},{name:"文本3",editor:!1},{name:",",editor:!1},{name:"[事件]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"SUBSTITUTE(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"'销售额'",editor:!1},{name:",",editor:!1},{name:"'成本'",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在文本字符串中用 文本3 替换 文本2",text1:"需要替换其中字符的文本，或对含有文本（需要替换其中字符）的单元格的引用",text2:"需要替换的文本",text3:"用于替换 文本2 的文本",event:"指定要用 文本3 替换 文本2 的事件"}},SUBTOTAL:{title:[{name:"SUBTOTAL(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"[区域2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUBTOTAL(",editor:!1},{name:"9",editor:!1},{name:",",editor:!1},{name:"A2:A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回列表或数据库中的分类汇总",value:"数字 1-11 或 101-111，用于指定要为分类汇总使用的函数",area1:"要对其进行分类汇总计算的第一个命名区域或引用",area2:"要对其进行分类汇总计算的第 2 个至第 254 个命名区域或引用"}},SUMIF:{title:[{name:"SUMIF(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"条件",editor:!1},{name:",",editor:!1},{name:"[区域2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUMIF(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"'>160000'",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"对 范围 中符合指定条件的值求和",area1:"要按条件计算的单元格区域",condition:"定义哪些单元格将被添加的数字、表达式、单元格引用、文本或函数形式的条件",area2:"要添加的实际单元格 (如果要添加的单元格不在range参数中指定的单元格)"}},SUMIFS:{title:[{name:"SUMIFS(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[区域2,条件2,...]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"SUMIFS(",editor:!1},{name:"A2:A5",editor:!1},{name:",",editor:!1},{name:"'>160000'",editor:!1},{name:",",editor:!1},{name:"B2:B5",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"对 范围 中符合指定条件的值求和",area1:"要按条件计算的单元格区域",condition1:"定义哪些单元格将被添加的数字、表达式、单元格引用、文本或函数形式的条件",condition2:"其他的区域,条件对"}},SUMPRODUCT:{title:[{name:"SUMPRODUCT(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"[array2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUMPRODUCT(",editor:!1},{name:"A1:D1",editor:!1},{name:",",editor:!1},{name:"A2:D2",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"对给定数组中的相应组件执行简单的算术运算, 并返回这些计算的和",array1:"其相应元素需要进行相乘并求和的第一个数组参数",array2:" 2 到 255 个数组参数，其相应元素需要进行相乘并求和"}},SUMSQ:{title:[{name:"SUMSQ(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"SUMSQ(",editor:!1},{name:"3",editor:!1},{name:",",editor:!1},{name:"4",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回参数的平方和",value1:"任意实数",value2:"任意实数,个数介于1到255之间"}},SUMX2MY2:{title:[{name:"SUMX2MY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMX2MY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应数值的平方差之和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SUMX2PY2:{title:[{name:"SUMX2PY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMX2PY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应值的平方和之和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SUMXMY2:{title:[{name:"SUMXMY2(",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"区域2",editor:!1},{name:")",editor:!1}],example:[{name:"SUMXMY2(",editor:!1},{name:"A2:A8",editor:!1},{name:",",editor:!1},{name:"B2:B8",editor:!1},{name:")",editor:!1}],content:{abstract:"返回两数组中对应数值之差的平方和",area1:" 第一个数组或数值区域",area2:" 第而个数组或数值区域"}},SWITCH:{title:[{name:"SWITCH(",editor:!1},{name:"表达式",editor:!1},{name:",",editor:!1},{name:"值1",editor:!1},{name:",",editor:!1},{name:"结果1",editor:!1},{name:",",editor:!1},{name:"[值2,结果2,...]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"SWITCH(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"'星期天'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数根据值列表计算一个值（称为表达式），并返回与第一个匹配值对应的结果",formula:"用来比较的值",value1:"任意值",result1:"值1 与 表达式 匹配后返回的值",result2:"其他值与结果对,最多125个"}},SYD:{title:[{name:"SYD(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"SYD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在指定期间内资产按年限总和折旧法计算的折旧",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数",value4:"期间，必须与 value3 使用相同的单位"}},T:{title:[{name:"T(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"T(",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"返回值引用的文字",value:"要测试的值"}},TAN:{title:[{name:"TAN(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TAN(",editor:!1},{name:"0.785",editor:!1},{name:")",editor:!1}],content:{abstract:"返回已知角度的正切",value:"要求正切的角度，以弧度表示"}},TANH:{title:[{name:"TANH(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TAN(",editor:!1},{name:"-2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数字的双曲正切",value:"任意实数"}},TBILLEQ:{title:[{name:"TBILLEQ(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLEQ(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回国库券的等效收益率",date1:"国库券的结算日",date2:"国库券的到期日",value:"国库券的贴现率"}},TBILLPRICE:{title:[{name:"TBILLPRICE(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLPRICE(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回面值 ￥100 的国库券的价格",date1:"国库券的结算日",date2:"国库券的到期日",value:"国库券的贴现率"}},TBILLYIELD:{title:[{name:"TBILLYIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TBILLYIELD(",editor:!1},{name:"A1",editor:!1},{name:",",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回国库券的收益率",date1:"国库券的结算日",date2:"国库券的到期日",value:"面值 ￥100 的国库券的价格"}},"T.DIST":{title:[{name:"T.DIST(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:")",editor:!1}],example:[{name:"T.DIST(",editor:!1},{name:"60",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回学生的左尾 t 分布。 t 分布用于小型样本数据集的假设检验",value1:"需要计算分布的数值",value2:"一个表示自由度数的整数",value3:"决定函数形式的逻辑值"}},"T.DIST.RT":{title:[{name:"T.DIST.RT(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.DIST.RT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"t 分布用于小型样本数据集的假设检验",value1:"需要计算分布的数值",value2:"一个表示自由度数的整数"}},TEXT:{title:[{name:"TEXT(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TEXT(",editor:!1},{name:"1234.567",editor:!1},{name:",",editor:!1},{name:"'$#,##0.00'",editor:!1},{name:")",editor:!1}],content:{abstract:"函数可通过格式代码向数字应用格式，进而更改数字的显示方式",value:"要转换为文本的数值",text:"一个文本字符串，定义要应用于所提供值的格式"}},TIME:{title:[{name:"TIME(",editor:!1},{name:"时",editor:!1},{name:",",editor:!1},{name:"分",editor:!1},{name:",",editor:!1},{name:"秒",editor:!1},{name:")",editor:!1}],example:[{name:"TIME(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"B2",editor:!1},{name:",",editor:!1},{name:"C2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回特定时间的十进制数字",hour:"0（零）到 32767 之间的数字，代表小时",minute:" 0 到 32767 之间的数字，代表分钟",second:"0 到 32767 之间的数字，代表秒"}},TIMEVALUE:{title:[{name:"TIMEVALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"TIMEVALUE(",editor:!1},{name:"'2:24 AM'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回由文本字符串表示的时间的十进制数字",text:"一个文本字符串，代表以任一 Microsoft Excel 时间格式表示的时间"}},"T.INV":{title:[{name:"T.INV(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.INV(",editor:!1},{name:"0.75",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回学生的 t 分布的左尾反函数",value1:"与学生的 t 分布相关的概率",value2:"与学生的 t 分布相关的概率"}},TODAY:{title:[{name:"TODAY(",editor:!1},{name:")",editor:!1}],example:[{name:"TODAY(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回当前日期的序列号"}},TRANSPOSE:{title:[{name:"TRANSPOSE(",editor:!1},{name:"array",editor:!1},{name:")",editor:!1}],example:[{name:"TRANSPOSE(",editor:!1},{name:"A1:F6",editor:!1},{name:")",editor:!1}],content:{abstract:"可返回转置单元格区域，即将行单元格区域转置成列单元格区域，反之亦然",array:"要转置的工作表上的数组或单元格区域"}},TREND:{title:[{name:"TREND(",editor:!1},{name:"集合1",editor:!1},{name:",",editor:!1},{name:"[集合2]",editor:!0,index:3},{name:",",editor:!1},{name:"[value1]",editor:!0,index:5},{name:",",editor:!1},{name:"[value2]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"TREND(",editor:!1},{name:"E2:E13",editor:!1},{name:",",editor:!1},{name:"D2:D13",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"函数返回沿线性趋势的值",set1:"关系 y = mx + b 中已知道的 y 值集",set2:"在关系 y = mx + b 中可能已经知道的一组可选 x 值",value1:"要返回其趋势的新 x 值返回对应的 y 值",value2:"一个逻辑值, 指定是否强制常量 b 等于0"}},TRIMMEAN:{title:[{name:"TRIMMEAN(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"TRIMMEAN(",editor:!1},{name:"A2:A12",editor:!1},{name:",",editor:!1},{name:"0.2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数据集的内部平均值",array:"需要进行整理并求平均值的数组或数值区域",value:"从计算中排除数据点的分数"}},TRUE:{title:[{name:"TRUE(",editor:!1},{name:")",editor:!1}],example:[{name:"TRUE(",editor:!1},{name:")",editor:!1}],content:{abstract:"返回逻辑值 TRUE"}},TRUNC:{title:[{name:"TRUNC(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"TRUNC(",editor:!1},{name:"8.9",editor:!1},{name:")",editor:!1}],content:{abstract:"将数字的小数部分截去，返回整数",value1:"需要截尾取整的数字",value2:"用于指定取整精度的数字,默认为零"}},"T.TEST":{title:[{name:"T.TEST(",editor:!1},{name:"数据集1",editor:!1},{name:",",editor:!1},{name:"数据集2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"T.TEST(",editor:!1},{name:"A2:A10",editor:!1},{name:",",editor:!1},{name:"B2:B10",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"1",editor:!1},{name:")",editor:!1}],content:{abstract:"返回与学生 t-检验相关的概率",dataset1:"第一个数据集",dataset2:"第二个数据集",value1:"指定分布尾数",value2:"要执行的 t 检验的类型"}},TYPE:{title:[{name:"TYPE(",editor:!1},{name:"值",editor:!1},{name:")",editor:!1}],example:[{name:"TYPE(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"返回数值的类型",value:"需要返回值类型的值"}},UNICHAR:{title:[{name:"UNICHAR(",editor:!1},{name:"value",editor:!1},{name:")",editor:!1}],example:[{name:"UNICHAR(",editor:!1},{name:"32",editor:!1},{name:")",editor:!1}],content:{abstract:"返回给定数值引用的 Unicode 字符",value:"代表字符的 Unicode 数字"}},UNICODE:{title:[{name:"UNICODE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"UNICODE(",editor:!1},{name:"'B'",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于文本的第一个字符的数字（代码点）",text:"要获得其 Unicode 值的字符"}},UNIQUE:{title:[{name:"UNIQUE(",editor:!1},{name:"array",editor:!1},{name:",",editor:!1},{name:"[value1]",editor:!0,index:3},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"UNIQUE(",editor:!1},{name:"D2:D11",editor:!1},{name:")",editor:!1}],content:{abstract:"函数返回列表或范围中的一系列唯一值",array:"要从其中返回唯一值的范围或数组",value1:"为逻辑值，用于指示比较方式；By row = FALSE 或省略；By column = TRUE",value2:"为逻辑值：仅返回出现一次的唯一值 = TRUE；包含所有唯一值 = FALSE 或省略"}},UPPER:{title:[{name:"UPPER(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"UPPER(",editor:!1},{name:"A2",editor:!1},{name:")",editor:!1}],content:{abstract:"将文本转换为大写字母",text:"要转换为大写字母的文本。 文本可以是引用或文本字符串"}},VALUE:{title:[{name:"VALUE(",editor:!1},{name:"text",editor:!1},{name:")",editor:!1}],example:[{name:"VALUE(",editor:!1},{name:"'$1,000'",editor:!1},{name:")",editor:!1}],content:{abstract:"将表示数字的文本字符串转换为数字",text:"用引号括起来的文本或包含要转换文本的单元格的引用"}},VAR:{title:[{name:"VAR(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于给定样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},"VAR.P":{title:[{name:"VAR.P(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR.P(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于整个样本总体的方差（忽略样本总体中的逻辑值和文本）",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},VARA:{title:[{name:"VARA(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VARA(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"计算基于给定样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},"VAR.S":{title:[{name:"VAR.S(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"VAR.S(",editor:!1},{name:"A2:A11",editor:!1},{name:")",editor:!1}],content:{abstract:"估算基于样本的方差",value1:"对应于总体样本的第一个数值参数",value2:"对应于总体样本的 2 到 255 个数值参数"}},VDB:{title:[{name:"VDB(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"[value4]",editor:!0,index:11},{name:",",editor:!1},{name:"[value5]",editor:!0,index:13},{name:")",editor:!1}],example:[{name:"VDB(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"0",editor:!1},{name:",",editor:!1},{name:"0.875",editor:!1},{name:",",editor:!1},{name:"1.5",editor:!0,index:11},{name:")",editor:!1}],content:{abstract:"使用双倍余额递减法或其他指定方法，返回一笔资产在给定期间（包括部分期间）内的折旧值",value1:"资产原值",value2:"折旧末尾时的值",value3:"资产的折旧期数",date1:"您要计算折旧的起始时期",date2:"您要计算折旧的终止时期",value4:"余额递减速率",value5:"逻辑值，指定当折旧值大于余额递减计算值时，是否转用直线折旧法"}},VLOOKUP:{title:[{name:"VLOOKUP(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"区域1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"[value3]",editor:!0,index:7},{name:")",editor:!1}],example:[{name:"VLOOKUP(",editor:!1},{name:"B3",editor:!1},{name:",",editor:!1},{name:"B2:E7",editor:!1},{name:",",editor:!1},{name:"2",editor:!1},{name:",",editor:!1},{name:"FALSE",editor:!0,index:7},{name:")",editor:!1}],content:{abstract:"在表格或区域中按行查找项目",value1:"要查找的值",area1:"搜索 value1 和返回值的单元格区域",value2:"包含返回值的列号",value3:"一个逻辑值，该值指定希望 VLOOKUP 查找近似匹配还是精确匹配"}},WEEKDAY:{title:[{name:"WEEKDAY(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"WEEKDAY(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回对应于某个日期的一周中的第几天",value1:"一个序列号，代表尝试查找的那一天的日期",value2:"用于确定返回值类型的数字"}},WEEKNUM:{title:[{name:"WEEKNUM(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"WEEKNUM(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"3",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回特定日期的周数",value1:"代表一周中的日期",value2:"一数字，确定星期从哪一天开始"}},WEIBULL:{title:[{name:"WEIBULL(",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"WEIBULL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"TRUE",editor:!1},{name:")",editor:!1}],content:{abstract:"返回 Weibull 分布",value1:"用来计算函数的值",value2:"分布参数",value3:"分布参数",value4:"确定函数的形式"}},WORKDAY:{title:[{name:"WORKDAY(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"[数组]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"WORKDAY(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回在某日期（起始日期）之前或之后、与该日期相隔指定工作日的某一日期的日期值",date:"一个代表开始日期的日期",value:"日期 之前或之后不含周末及节假日的天数",array:"一个可选列表，其中包含需要从工作日历中排除的一个或多个日期，例如各种省/市/自治区和国家/地区的法定假日及非法定假日"}},"WORKDAY.INTL":{title:[{name:"WORKDAY.INTL(",editor:!1},{name:"日期",editor:!1},{name:",",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"[数组]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"WORKDAY.INTL(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4:A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回指定的若干个工作日之前或之后的日期的序列号（使用自定义周末参数）",date:"开始日期",value:"日期 之前或之后不含周末及节假日的天数",array:"指示一周中属于周末的日子和不作为工作日的日子"}},XIRR:{title:[{name:"XIRR(",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:",",editor:!1},{name:"[数值]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"XIRR(",editor:!1},{name:"A3:A7",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:",",editor:!1},{name:"0.1",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一组不一定定期发生的现金流的内部收益率",array1:"与 array2 中的支付时间相对应的一系列现金流",array2:"与现金流支付相对应的支付日期表",value:"对函数 XIRR 计算结果的估计值"}},XNPV:{title:[{name:"XNPV(",editor:!1},{name:"value",editor:!1},{name:",",editor:!1},{name:"array1",editor:!1},{name:",",editor:!1},{name:"array2",editor:!1},{name:")",editor:!1}],example:[{name:"XNPV(",editor:!1},{name:".09",editor:!1},{name:",",editor:!1},{name:"B3:B7",editor:!1},{name:",",editor:!1},{name:"A2:A6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回一组现金流的净现值，这些现金流不一定定期发生",value:"对函数 XIRR 计算结果的估计值",array1:"与 array2 中的支付时间相对应的一系列现金流",array2:"与现金流支付相对应的支付日期表"}},XOR:{title:[{name:"XOR(",editor:!1},{name:"条件1",editor:!1},{name:",",editor:!1},{name:"[条件2,...]",editor:!0,index:3},{name:")",editor:!1}],example:[{name:"XOR(",editor:!1},{name:"(3>0",editor:!1},{name:",",editor:!1},{name:"2<9",editor:!0,index:3},{name:")",editor:!1}],content:{abstract:"返回所有参数的逻辑异或",condition1:"计算值为TRUE或FALSE",condition2:"要检验的 1 至 254 个条件，可为 TRUE 或 FALSE，且可为逻辑值、数组或引用"}},YEAR:{title:[{name:"YEAR(",editor:!1},{name:"日期",editor:!1},{name:")",editor:!1}],example:[{name:"YEAR(",editor:!1},{name:"A3",editor:!1},{name:")",editor:!1}],content:{abstract:"返回对应于某个日期的年份",date:"要查找的年份的日期"}},YEARFRAC:{title:[{name:"YEARFRAC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:")",editor:!1}],example:[{name:"YEARFRAC(",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:")",editor:!1}],content:{abstract:"可计算两个日期（日期1 和 日期2）之间的天数",date1:"一个代表开始日期的日期",date2:"一个代表终止日期的日期"}},YIELD:{title:[{name:"YIELD(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:",",editor:!1},{name:"value3",editor:!1},{name:",",editor:!1},{name:"value4",editor:!1},{name:")",editor:!1}],example:[{name:"YIELD(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:",",editor:!1},{name:"A7",editor:!1},{name:")",editor:!1}],content:{abstract:"返回定期支付利息的债券的收益",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的年息票利率",value2:"有价证券的价格",value3:"面值 ￥100 的有价证券的清偿价值",value4:"年付息次数"}},YIELDDISC:{title:[{name:"YIELDDISC(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"YIELDDISC(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:")",editor:!1}],content:{abstract:"返回折价发行的有价证券的年收益率",date1:"有价证券的结算日",date2:"有价证券的到期日",value1:"有价证券的价格（按面值为 ￥100 计算）",value2:"面值 ￥100 的有价证券的清偿价值"}},YIELDMAT:{title:[{name:"YIELDMAT(",editor:!1},{name:"日期1",editor:!1},{name:",",editor:!1},{name:"日期2",editor:!1},{name:",",editor:!1},{name:"日期3",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"value2",editor:!1},{name:")",editor:!1}],example:[{name:"YIELDMAT(",editor:!1},{name:"A2",editor:!1},{name:",",editor:!1},{name:"A3",editor:!1},{name:",",editor:!1},{name:"A4",editor:!1},{name:",",editor:!1},{name:"A5",editor:!1},{name:",",editor:!1},{name:"A6",editor:!1},{name:")",editor:!1}],content:{abstract:"返回到期付息的有价证券的年收益率",date1:"有价证券的结算日",date2:"有价证券的到期日",date3:"有价证券的发行日，以时间序列号表示",value1:"有价证券在发行日的利率",value2:"有价证券的价格"}},"Z.TEST":{title:[{name:"Z.TEST(",editor:!1},{name:"区域",editor:!1},{name:",",editor:!1},{name:"value1",editor:!1},{name:",",editor:!1},{name:"[value2]",editor:!0,index:5},{name:")",editor:!1}],example:[{name:"Z.TEST(",editor:!1},{name:"A2:A11",editor:!1},{name:",",editor:!1},{name:"4",editor:!1},{name:",",editor:!1},{name:"6",editor:!0,index:5},{name:")",editor:!1}],content:{abstract:"返回 z 检验的单尾 P 值",area:"用来检验 x 的数组或数据区域",value1:"要测试的值",value2:"总体（已知）标准偏差。 如果省略，则使用样本标准偏差"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=r(1),o=r(5),l=r(8),s=r(29),u=r(6),c=r(4),d=(n=r(156))&&n.__esModule?n:{default:n};function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&m(e.prototype,t),r&&m(e,r),e}var v=10;function p(e,t){return e.lastIndexOf(t)}var y=function(){function e(t,r,n){var o=this;f(this,e),this.data=t,this._selector=r,this.sheet=n,this.l=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-l")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.r=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-r")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.t=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-t")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.b=(0,a.h)("div","".concat(i.cssPrefix,"-selector-box-b")).on("mousedown.stop",(function(e){o.moveEvent(e)})),this.boxinner=(0,a.h)("div","".concat(i.cssPrefix,"-selector-boxinner")).children(this.b,this.t,this.r,this.l),this.selectorMove=new d.default(this.boxinner,t,n,r),this.areaEl=(0,a.h)("div","".concat(i.cssPrefix,"-selector-area")).child(this.boxinner).hide(),this.clipboardEl=(0,a.h)("div","".concat(i.cssPrefix,"-selector-clipboard")).hide(),this.autofillEl=(0,a.h)("div","".concat(i.cssPrefix,"-selector-autofill")).hide(),this.el=(0,a.h)("div","".concat(i.cssPrefix,"-selector")).css("z-index","".concat(v)).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),v+=1}return h(e,[{key:"moveEvent",value:function(e){var t=this,r=this.data,n=this._selector,a=this.sheet,i=null,d=r.selector.range,f=d.sri,m=d.sci,h=d.eri,v=d.eci,y=d.w,g=d.h,b=new o.CellRange(f,m,h,v,y,g),E=-1;(0,l.mouseMoveUp)(window,(function(l){var d=t.sheet.selectors;a.container.css("pointer-events","none");for(var f=0;f<d.length;f++){d[f].selector.setBoxinner("none")}var m=r.getCellRectByXY(l.layerX,l.layerY),h=m.ri,v=m.ci;if(-1!==h&&-1!==v){var R=t.sheet.editor.pos,O=t.sheet.editor.editorText.getText(),A=(0,u.cuttingByPos)(O,R-1,!0);O.length>R-1&&(A+=(0,u.cuttingByPosEnd)(O,R-1));for(var x=0;x<d.length;x++){var w=d[x],N=w.className,_=w.erpx;if(_===A&&N===n.className+" clear_selector"){if(i=i||w,-1!==_.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var S=_.split(":"),T=(0,c.expr2xy)(S[0]),C=(0,c.expr2xy)(S[1]);(b=new o.CellRange(T[1],T[0],C[1],C[0],y,g)).move(h,v);var I=r.getMoveRect(b);i.selector.range=b,i.selector.setMove(I)}else i.selector.set(h,v,!0);break}if(_!==A&&N===n.className+" clear_selector"){if(E=-1!==E?E:p(O,w.erpx),t.sheet.editor.setCursorPos(E+w.erpx.length),i=i||w,-1!==w.erpx.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var M=_.split(":"),k=(0,c.expr2xy)(M[0]),j=(0,c.expr2xy)(M[1]);(b=new o.CellRange(k[1],k[0],j[1],j[0],y,g)).move(h,v);var P=r.getMoveRect(b);i.selector.range=b,i.selector.setMove(P)}else i.selector.set(h,v,!0);break}}i&&(i.selector.setCss(i.color,!1),s.lockCells.call(t.sheet,e,i,(0,u.isAbsoluteValue)(i.erpx),E))}}),(function(){var e=t.sheet.selectors;a.container.css("pointer-events","auto");for(var r=0;r<e.length;r++){e[r].selector.setBoxinner("all")}E=-1,i&&i.selector&&i.selector.setCss(i.color,!0),i=null}))}},{key:"setBoxinner",value:function(e){this.l.css("pointer-events",e),this.r.css("pointer-events",e),this.t.css("pointer-events",e),this.b.css("pointer-events",e),this.selectorMove.l.css("pointer-events",e),this.selectorMove.r.css("pointer-events",e),this.selectorMove.t.css("pointer-events",e),this.selectorMove.b.css("pointer-events",e)}},{key:"setCss",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t?this.areaEl.css("border","2px dashed ".concat(e)):this.areaEl.css("border","2px solid ".concat(e)),this.el.css("z-index","-1")}},{key:"setOffset",value:function(e){return this.el.offset(e).show(),this}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"setAreaOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.areaEl.offset({width:n-3+.8,height:a-3+.8,left:t-.8,top:r-.8}).show()}},{key:"setClipboardOffset",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.clipboardEl.offset({left:t,top:r,width:n-5,height:a-5})}},{key:"showAutofill",value:function(e){var t=e.left,r=e.top,n=e.width,a=e.height;this.autofillEl.offset({width:n-3,height:a-3,left:t,top:r}).show()}},{key:"hideAutofill",value:function(){this.autofillEl.hide()}},{key:"showClipboard",value:function(){this.clipboardEl.show()}},{key:"hideClipboard",value:function(){this.clipboardEl.hide()}}]),e}();function g(e){var t=this.data,r=e.left,n=e.top,a=e.width,i=e.height,o=e.scroll,l=e.l,s=e.t,u=t.freezeTotalWidth(),c=t.freezeTotalHeight(),d=r-u;u>l&&(d-=o.x);var f=n-c;return c>s&&(f-=o.y),{left:d,top:f,width:a,height:i}}function b(e){var t=this.data,r=e.left,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalWidth(),u=r-s;return s>i&&(u-=l.x),{left:u,top:o,width:n,height:a}}function E(e){var t=this.data,r=e.top,n=e.width,a=e.height,i=e.l,o=e.t,l=e.scroll,s=t.freezeTotalHeight(),u=r-s;return s>o&&(u-=l.y),{left:i,top:u,width:n,height:a}}function R(e){this.br.setAreaOffset(g.call(this,e))}function O(e){this.tl.setAreaOffset(e)}function A(e){this.t.setAreaOffset(b.call(this,e))}function x(e){this.l.setAreaOffset(E.call(this,e))}function w(e){this.l.setClipboardOffset(E.call(this,e))}function N(e){this.br.setClipboardOffset(g.call(this,e))}function _(e){this.tl.setClipboardOffset(e)}function S(e){this.t.setClipboardOffset(b.call(this,e))}function T(e){R.call(this,e),O.call(this,e),A.call(this,e),x.call(this,e)}function C(e){N.call(this,e),_.call(this,e),S.call(this,e),w.call(this,e)}var I=function(){function e(t,r,n){f(this,e),this.data=t,this.className=n,this.br=new y(t,this,r),this.t=new y(t,this,r),this.l=new y(t,this,r),this.tl=new y(t,this,r),this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=(0,a.h)("div","".concat(i.cssPrefix,"-selectors")).children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),this.lastri=-1,this.lastci=-1,v+=1}return h(e,[{key:"setCss",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.br.setCss(e,t),this.t.setCss(e,t),this.l.setCss(e,t),this.tl.setCss(e,t)}},{key:"hide",value:function(){this.el.hide()}},{key:"resetOffset",value:function(){var e=this.data,t=this.tl,r=this.t,n=this.l,a=this.br,i=e.freezeTotalHeight(),o=e.freezeTotalWidth();i>0||o>0?(t.setOffset({width:o,height:i}),r.setOffset({left:o,height:i}),n.setOffset({top:i,width:o}),a.setOffset({left:o,top:i})):(t.hide(),r.hide(),n.hide(),a.setOffset({left:0,top:0}))}},{key:"resetAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();T.call(this,e),C.call(this,t),this.resetOffset()}},{key:"resetBRTAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();R.call(this,e),A.call(this,e),N.call(this,t),S.call(this,t),this.resetOffset()}},{key:"resetSelectorBRLAreaOffset",value:function(e){var t=this.data.getMoveRect(e),r=this.data.getClipboardRect();R.call(this,t),x.call(this,t),N.call(this,r),w.call(this,r),this.resetOffset()}},{key:"resetBRLAreaOffset",value:function(){var e=this.data.getSelectedRect(),t=this.data.getClipboardRect();R.call(this,e),x.call(this,e),N.call(this,t),w.call(this,t),this.resetOffset()}},{key:"set",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.data,a=n.calSelectedRangeByStart(e,t),i=a.sri,o=a.sci;if(r){var l=e,s=t;e<0&&(l=0),t<0&&(s=0),n.selector.setIndexes(l,s),this.indexes=[l,s]}this.moveIndexes=[i,o],this.range=a,this.resetAreaOffset(),this.el.show()}},{key:"setMove",value:function(e){T.call(this,e)}},{key:"setEnd",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=this.data,a=this.lastri,i=this.lastci;if(r){if(e===a&&t===i)return;this.lastri=e,this.lastci=t}this.range=n.calSelectedRangeByEnd(e,t),T.call(this,this.data.getSelectedRect())}},{key:"setBoxinner",value:function(e){this.br.setBoxinner(e),this.t.setBoxinner(e),this.l.setBoxinner(e),this.tl.setBoxinner(e)}},{key:"showAutofill",value:function(e,t){if(-1!==e||-1!==t){var r=this.range,n=r.sri,a=r.sci,i=r.eri,l=r.eci,s=e,u=t,c=n-e,d=i-e,f=l-t;if(a-t>0)this.arange=new o.CellRange(n,u,i,a-1);else if(c>0)this.arange=new o.CellRange(s,a,n-1,l);else if(f<0)this.arange=new o.CellRange(n,l+1,i,u);else{if(!(d<0))return void(this.arange=null);this.arange=new o.CellRange(i+1,a,s,l)}if(null!==this.arange){var m=this.data.getRect(this.arange);m.width+=2,m.height+=2;var h=this.br,v=this.l,p=this.t,y=this.tl;h.showAutofill(g.call(this,m)),v.showAutofill(E.call(this,m)),p.showAutofill(b.call(this,m)),y.showAutofill(m)}}}},{key:"hideAutofill",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideAutofill()}))}},{key:"showClipboard",value:function(){var e=this,t=this.data.getClipboardRect();C.call(this,t),["br","l","t","tl"].forEach((function(t){e[t].showClipboard()}))}},{key:"hideClipboard",value:function(){var e=this;["br","l","t","tl"].forEach((function(t){e[t].hideClipboard()}))}}]),e}();t.default=I},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(6),o=r(4),l=r(29),s=r(5),u=r(8);function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return e.lastIndexOf(t)}var f=function(){function e(t,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.l=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-l")),this.r=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-r")),this.t=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-t")),this.b=(0,n.h)("div","".concat(a.cssPrefix,"-selector-box-l-move-b")),this.data=r,this.sheet=i,this._selector=o,this.event(this.l,1),this.event(this.r,2),this.event(this.t,3),this.event(this.b,4),this.boxinner=t,this.boxinner.children(this.l,this.r,this.t,this.b)}var t,r,f;return t=e,(r=[{key:"event",value:function(e,t){var r=this,n=null;e.on("mousedown.stop",(function(e){var a=r.data,c=r.sheet,f=r._selector,m=-1,h=a.selector,v=null,p=h.range,y=p.sri,g=p.sci,b=p.eri,E=p.eci,R=p.w,O=p.h,A=new s.CellRange(y,g,b,E,R,O),x=null,w=c.selectors,N=-1,_=-1,S=-1,T=-1;(0,u.mouseMoveUp)(window,(function(u){clearTimeout(n),n=setTimeout((function(){c.container.css("pointer-events","none");for(var n=0;n<w.length;n++)w[n].selector.setBoxinner("none");var h=a.getCellRectByXY(u.layerX,u.layerY),p=h.ri,y=h.ci;if(-1!==p&&-1!==y){var g=r.sheet.editor.pos,b=r.sheet.editor.editorText.getText(),E=(0,i.cuttingByPos)(b,g-1,!0);b.length>g-1&&(E+=(0,i.cuttingByPosEnd)(b,g-1));for(var C=0;C<w.length;C++){var I=w[C],M=I.className,k=I.erpx;if(k===E&&M===f.className+" clear_selector"){if(v=v||I,-1!==k.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var j=k.split(":"),P=(0,o.expr2xy)(j[0]),D=(0,o.expr2xy)(j[1]);(A=new s.CellRange(P[1],P[0],D[1],D[0],R,O)).move(p,y);var L=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(L)}else v.selector.set(p,y,!0);break}if(k!==E&&M===f.className+" clear_selector"){if(m=-1!==m?m:d(b,I.erpx),r.sheet.editor.setCursorPos(m+I.erpx.length),v=v||I,-1!==I.erpx.search(/^[A-Za-z]+\d+:[A-Za-z]+\d+$/)){var U=k.split(":"),V=(0,o.expr2xy)(U[0]),F=(0,o.expr2xy)(U[1]);if(A=new s.CellRange(V[1],V[0],F[1],F[0],R,O),null===x&&(x=A),4===t){var B=a.getCellRectByXY(u.layerX,u.layerY);A.move2(V[1],V[0],B.ri,B.ci);var H=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(H)}else if(1===t){var Y=a.getCellRectByXY(u.layerX,u.layerY);A.move2(V[1],Y.ci,Y.ri,F[0]);var W=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(W)}else if(3===t){var G=a.getCellRectByXY(u.layerX,u.layerY);A.move2(G.ri,G.ci,F[1],F[0]);var z=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(z)}else if(2===t){var X=a.getCellRectByXY(u.layerX,u.layerY);A.move2(X.ri,V[0],F[1],X.ci);var $=a.getMoveRect(A);v.selector.range=A,v.selector.setMove($)}}else{var q=(0,o.expr2xy)(I.erpx),K=(0,o.expr2xy)(I.erpx),Z=a.getCellRectByXY(u.layerX,u.layerY);if(4===t){A.move2(q[1],q[0],Z.ri,Z.ci);var Q=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(Q)}else if(1===t){A.move2(q[1],Z.ci,Z.ri,K[0]);var J=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(J)}else if(3===t){A.move2(Z.ri,Z.ci,K[1],K[0]);var ee=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(ee)}else if(2===t){A.move2(Z.ri,q[0],K[1],Z.ci);var te=a.getMoveRect(A);v.selector.range=A,v.selector.setMove(te)}}break}}!v||N===A.sri&&_===A.sci&&S===A.eri&&T===A.eci||(v.selector.setCss(v.color,!1),l.lockCells.call(r.sheet,e,v,(0,i.isAbsoluteValue)(v.erpx),m)),N=A.sri,_=A.sci,S=A.eri,T=A.eci}}),6)}),(function(){clearTimeout(n);var e=r.sheet.selectors;c.container.css("pointer-events","auto");for(var t=0;t<e.length;t++)e[t].selector.setBoxinner("all");m=-1,v&&v.selector&&v.selector.setCss(v.color,!0),v=null}))}))}}])&&c(t.prototype,r),f&&c(t,f),e}();t.default=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(6),a=r(43);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.inputText="",this.oldCell="",this.ri=-1,this.ci=-1}var t,r,o;return t=e,(r=[{key:"setText",value:function(e){return this.inputText=e,this.getText()}},{key:"getText",value:function(){return this.inputText}},{key:"setOldCell",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=t.ri,n=void 0===r?-1:r,a=t.ci,i=void 0===a?-1:a;return this.oldCell=e,this.ri=n,this.ci=i,this.getOldCell()}},{key:"getOldCell",value:function(){return this.oldCell}},{key:"getRICI",value:function(){return{ri:this.ri,ci:this.ci}}},{key:"changeText",value:function(e){1===e&&this.setText(this.getText().replace(/，/g,","))}},{key:"isFormula",value:function(){return 0===this.getText().lastIndexOf("=")}},{key:"f4ShortcutKey",value:function(e){var t=this.setText((0,a.toUpperCase)(this.inputText)),r=(0,n.cuttingByPos)(t,e,!0),i=(0,n.cuttingByPosEnd2)(t,e+1);console.log(i);var o=(0,n.isAbsoluteValue)(r,5),l="",s=r.split(":")[1];if(s&&(o=2===(o=1===(o=12===(o=3===(o=(0,n.isAbsoluteValue)(s,5))?6:o)?9:o)?7:o)?8:o,console.log(o)),!1!==o)switch(o){case 13:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s1;var u=t.substring(0,t.lastIndexOf(s));t=this.setText(u+l);break;case 12:s=r,l=(0,n.value2absolute)(s.replace(/\$/g,"")).s3,console.log((0,n.value2absolute)(r)),t=this.setText(t.substring(0,t.lastIndexOf(s))+l),console.log(this.getText());break;case 11:case 10:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s3,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 9:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 8:l=(s=r.split(":")[1]).replace(/\$/g,""),t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 7:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 6:s=r.split(":")[1],l=(0,n.value2absolute)(s.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(s))+l);break;case 5:l=(0,n.value2absolute)(r.split(":")[1].replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 4:l=(0,n.value2absolute)(r.split(":")[1].replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 3:l=(0,n.value2absolute)(r.replace(/\$/g,"")).s2,t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 2:l=r.replace(/\$/g,""),t=this.setText(t.substring(0,t.lastIndexOf(r))+l);break;case 1:l=(0,n.value2absolute)(r.replace(/\$/g,"")).s1,t=this.setText(t.substring(0,t.lastIndexOf(r))+l)}return{pos:t.length,inputText:t=this.setText(t+i)}}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cellRender=l,t.infixExprToSuffixExpr=t.render=void 0;var n=r(4),a=r(1);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}t.infixExprToSuffixExpr=function(e){for(var t=[],r=[],a=[],o=0,l=1,s=0;s<e.length;s+=1){var u=e.charAt(s);if(" "!==u)if(u>="a"&&u<="z")a.push(u.toUpperCase());else if(u>="0"&&u<="9"||u>="A"&&u<="Z"||"."===u)a.push(u);else if('"'===u){for(s+=1;'"'!==e.charAt(s);)a.push(e.charAt(s)),s+=1;r.push('"'.concat(a.join(""))),a=[]}else{if("("!==u&&a.length>0&&r.push(a.join("")),")"===u){var c=t.pop();if(2===o)try{for(var d=i((0,n.expr2xy)(r.pop()),2),f=d[0],m=d[1],h=i((0,n.expr2xy)(r.pop()),2),v=h[0],p=h[1],y=0,g=v;g<=f;g+=1)for(var b=p;b<=m;b+=1)r.push((0,n.xy2expr)(g,b)),y+=1;r.push([c,y])}catch(e){}else if(1===o)r.push([c,l]),l=1;else for(;"("!==c&&(r.push(c),!(t.length<=0));)c=t.pop();o=0}else if(":"===u)o=2;else if(","===u)o=1,l+=1;else if("("===u&&a.length>0)t.push(a.join(""));else{if(t.length>0&&("+"===u||"-"===u)){var E=t[t.length-1];if("("!==E&&r.push(t.pop()),"*"===E||"/"===E)for(;t.length>0&&"("!==(E=t[t.length-1]);)r.push(t.pop())}t.push(u)}a=[]}}for(a.length>0&&r.push(a.join(""));t.length>0;)r.push(t.pop());return r};function o(e,t){return"string"==typeof e&&-1!==e.toUpperCase().indexOf(t.toUpperCase())}function l(e,t,r,i,l,s,u){arguments.length>7&&void 0!==arguments[7]&&arguments[7];if(void 0===l)return"";if("string"==typeof l&&-1!==a.look.indexOf(l.split("!")[0])){var c=l.length;l.split(" ")[0]&&(c=l.split(" ")[0].length);var d=JSON.parse(l.substring(l.indexOf("!")+1,c)),f=a.look.indexOf(l.split("!")[0]);if(1===f)return d.text;if(0===f&&d&&d[0]){var m=d[0],h=m.name,v=m.value;if(0===v&&d[1]&&0!==d[1].value)return h;if(0===v&&!d[1])return h}return a.look2}return"="===l[0]&&"="!==l[1]?o(l.substring(1),"wland")||o(l.substring(1),"wfr")||o(l.substring(1),"rtd")||o(l.substring(1),"city")?l.toUpperCase():l.substring(1)&&t&&t.Sheets&&t.Sheets[e.name]&&t.Sheets[e.name][(0,n.xy2expr)(i,r)]?t.Sheets[e.name][(0,n.xy2expr)(i,r)].f&&-1!==t.Sheets[e.name][(0,n.xy2expr)(i,r)].f.search(/\((\+|\-|\*|\/)/)||void 0===t.Sheets[e.name][(0,n.xy2expr)(i,r)].v||""===t.Sheets[e.name][(0,n.xy2expr)(i,r)].v?"#ERROR!":(t.Sheets[e.name][(0,n.xy2expr)(i,r)].v=t.Sheets[e.name][(0,n.xy2expr)(i,r)].v+"",t.Sheets[e.name][(0,n.xy2expr)(i,r)].w?t.Sheets[e.name][(0,n.xy2expr)(i,r)].w:t.Sheets[e.name][(0,n.xy2expr)(i,r)].v.replace(/'/g,'"')):l:l}var s=l;t.render=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMinus=void 0;t.isMinus=function(e){return!isNaN(e)&&(""!==e&&parseInt(e)<0)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.thinLineWidth=c,t.npx=d,t.DrawBox=t.Draw=void 0;var n=r(9);function a(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),e}function u(){return window.devicePixelRatio||1}function c(){return u()-.5}function d(e){var t=e*u()+"";return parseInt(t,10)}function f(e){var t=d(e);return t>0?t-.5:.5}function m(e,t,r){e.save(),e.beginPath(),e.fillStyle="#707070",e.moveTo(t,r+6),e.lineTo(t+12,r+6),e.stroke(),e.strokeRect(t,r,12,12),e.clip(),e.fill(),e.restore()}function h(e,t,r){e.save(),e.beginPath(),e.fillStyle="#707070",e.moveTo(t+6,r),e.lineTo(t+6,r+12),e.moveTo(t,r+6),e.lineTo(t+12,r+6),e.stroke(),e.strokeRect(t,r,12,12),e.clip(),e.fill(),e.restore()}var v=function(){function e(t,r,n,a){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;o(this,e),this.x=t,this.y=r,this.width=n,this.height=a,this.padding=i,this.bgcolor="#ffffff",this.borderTop=null,this.borderRight=null,this.borderBottom=null,this.borderLeft=null}return s(e,[{key:"setBorders",value:function(e){var t=e.top,r=e.bottom,n=e.left,a=e.right;t&&(this.borderTop=t),a&&(this.borderRight=a),r&&(this.borderBottom=r),n&&(this.borderLeft=n)}},{key:"innerWidth",value:function(){return this.width-2*this.padding}},{key:"innerHeight",value:function(){return this.height-2*this.padding}},{key:"textx",value:function(e){var t=this.width,r=this.padding,n=this.x;return"left"===e?n+=r:"center"===e?n+=t/2:"right"===e&&(n+=t-r),n}},{key:"texty",value:function(e,t,r){var n=this.height,a=this.padding,i=this.y;return"top"===e?i+=a:"middle"===e?i=i+n/2-r:"bottom"===e&&(i+=n-2*r-a),i}},{key:"topxys",value:function(){var e=this.x,t=this.y;return[[e,t],[e+this.width,t]]}},{key:"rightxys",value:function(){var e=this.x,t=this.y,r=this.width;return[[e+r,t],[e+r,t+this.height]]}},{key:"bottomxys",value:function(){var e=this.x,t=this.y,r=this.width,n=this.height;return[[e,t+n],[e+r,t+n]]}},{key:"leftxys",value:function(){var e=this.x,t=this.y;return[[e,t],[e,t+this.height]]}}]),e}();function p(e,t,r,n,a,i,o){var l={x:0,y:0};"underline"===e?l.y="bottom"===a?0:"top"===a?-(i+2):-i/2:"strike"===e&&("bottom"===a?l.y=i/2:"top"===a&&(l.y=-(i/2+2))),"center"===n?l.x=o/2:"right"===n&&(l.x=o),this.line([t-l.x,r-l.y],[t-l.x+o,r-l.y])}t.DrawBox=v;var y=function(){function e(t,r,n){o(this,e),this.el=t,this.ctx=t.getContext("2d"),this.resize(r,n),this.ctx.scale(1*u(),1*u()),this.cxc={indent:250,vIndent:200,canvasContext:this.ctx}}return s(e,[{key:"resize",value:function(e,t){this.el.style.width="".concat(e,"px"),this.el.style.height="".concat(t,"px"),this.el.width=d(e),this.el.height=d(t)}},{key:"clear",value:function(){var e=this.el,t=e.width,r=e.height;return this.ctx.clearRect(0,0,t,r),this}},{key:"attr",value:function(e){return Object.assign(this.ctx,e),this}},{key:"save",value:function(){return this.ctx.save(),this.ctx.beginPath(),this}},{key:"restore",value:function(){return this.ctx.restore(),this}},{key:"beginPath",value:function(){return this.ctx.beginPath(),this}},{key:"translate",value:function(e,t){return this.ctx.translate(d(e),d(t)),this}},{key:"clearRect",value:function(e,t,r,n){return this.ctx.clearRect(e,t,r,n),this}},{key:"fillRect",value:function(e,t,r,n){return this.ctx.fillRect(d(e)-.5,d(t)-.5,d(r),d(n)),this}},{key:"fillText",value:function(e,t,r){return this.ctx.fillText(e,d(t),d(r)),this}},{key:"selfAdaptionHeight",value:function(e,t,r){if(void 0!==r&&void 0!==t){for(var n=1,a={len:0,start:0},i=e.width-2*e.padding,o=0;o<t.length;o+=1)a.len+e.padding>=i&&(n+=1,a.len=0,a.start=o),a.len+=this.selfAdaptionOneTxtWidth(t[o],r);return n}}},{key:"selfAdaptionTxtWidth",value:function(e,t,r){if(!1===(0,n.isHave)(e)||!1===(0,n.isHave)(t)||e.length<=0)return 0;var a=this.ctx;return a.font="".concat(t.italic?"italic":""," ").concat(t.bold?"bold":""," ").concat(d(t.size),"px ").concat(t.name),a.measureText(e).width*t.size/d(t.size)}},{key:"selfAdaptionOneTxtWidth",value:function(e,t){if(!1===(0,n.isHave)(e)||!1===(0,n.isHave)(t)||e.length<=0)return 0;var r=this.ctx;return r.font="".concat(t.italic?"italic":""," ").concat(t.bold?"bold":""," ").concat(d(t.size),"px ").concat(t.name),r.measureText(e).width}},{key:"text",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=this.ctx,i=r.align,o=r.valign,l=r.font,s=r.color,u=r.strike,c=r.underline,f=(r.ignore,t.textx(i));a.save(),a.beginPath(),this.attr({textAlign:i,textBaseline:o,font:"".concat(l.italic?"italic":""," ").concat(l.bold?"bold":""," ").concat(d(l.size),"px ").concat(l.name),fillStyle:s,strokeStyle:s});var m=this.selfAdaptionTxtWidth(e,l,t),h=0,v=t.innerWidth();if(n){v=t.width-2*t.padding;var y=this.selfAdaptionHeight(t,e,l);h=(y-1)*l.size/2}var g=t.texty(o,l.size,h);if(n&&m>v){for(var b={len:0,start:0},E=0;E<e.length;E+=1)b.len+t.padding>=v&&(this.fillText(e.substring(b.start,E),f,g),u&&p.call(this,"strike",f,g,i,o,l.size,b.len),c&&p.call(this,"underline",f,g,i,o,l.size,b.len),g+=l.size+2,b.len=0,b.start=E),b.len+=this.selfAdaptionOneTxtWidth(e[E],l);b.len>0&&(this.fillText(e.substring(b.start),f,g),u&&p.call(this,"strike",f,g,i,o,l.size,b.len),c&&p.call(this,"underline",f,g,i,o,l.size,b.len))}else this.fillText(e,f,g),u&&p.call(this,"strike",f,g,i,o,l.size,m),c&&p.call(this,"underline",f,g,i,o,l.size,m);return a.restore(),this}},{key:"border",value:function(e,t){var r=this.ctx;return r.lineWidth=c,r.strokeStyle=t,"medium"===e?r.lineWidth=d(2)-.5:"thick"===e?r.lineWidth=d(3):"dashed"===e?r.setLineDash([d(3),d(2)]):"dotted"===e?r.setLineDash([d(1),d(1)]):"double"===e&&r.setLineDash([d(2),0]),this}},{key:"line",value:function(){var e=this.ctx;if(arguments.length>1){var t=arguments.length<=0?void 0:arguments[0],r=i(t,2),n=r[0],a=r[1];e.moveTo(f(n),f(a));for(var o=1;o<arguments.length;o+=1){var l=o<0||arguments.length<=o?void 0:arguments[o],s=i(l,2),u=s[0],c=s[1];e.lineTo(f(u),f(c))}e.stroke()}return this}},{key:"strokeBorders",value:function(e){var t=this.ctx;t.save(),t.beginPath();var r=e.borderTop,n=e.borderRight,i=e.borderBottom,o=e.borderLeft;r&&(this.border.apply(this,a(r)),this.line.apply(this,a(e.topxys()))),n&&(this.border.apply(this,a(n)),this.line.apply(this,a(e.rightxys()))),i&&(this.border.apply(this,a(i)),this.line.apply(this,a(e.bottomxys()))),o&&(this.border.apply(this,a(o)),this.line.apply(this,a(e.leftxys()))),t.restore()}},{key:"dropUp",value:function(e,t,r){var n=this.ctx,a=e.x+10,i=e.y+e.height-18-r;t?h.call(this,n,d(a),d(i)):m.call(this,n,d(a),d(i))}},{key:"lineTo",value:function(e,t){this.cxc.canvasContext.lineTo(e+this.cxc.indent,t+this.cxc.vIndent)}},{key:"moveTo",value:function(e,t){this.cxc.canvasContext.moveTo(e+this.cxc.indent,t+this.cxc.vIndent)}},{key:"dropdown",value:function(e){var t=this.ctx,r=e.x,n=e.y,a=r+e.width-15,i=n+e.height-15;t.save(),t.beginPath(),t.moveTo(d(a),d(i)),t.lineTo(d(a+8),d(i)),t.lineTo(d(a+4),d(i+6)),t.closePath(),t.fillStyle="rgba(0, 0, 0, .45)",t.fill(),t.restore()}},{key:"error",value:function(e){var t=this.ctx,r=e.x,n=e.y,a=r+e.width-1;t.save(),t.beginPath(),t.moveTo(d(a-8),d(n-1)),t.lineTo(d(a),d(n-1)),t.lineTo(d(a),d(n+8)),t.closePath(),t.fillStyle="rgba(255, 0, 0, .65)",t.fill(),t.restore()}},{key:"rect",value:function(e,t){var r=this.ctx,n=e.x,a=e.y,i=e.width,o=e.height,l=e.bgcolor;r.save(),r.beginPath(),r.fillStyle=l||"#fff",r.rect(f(n+1),f(a+1),d(i-2),d(o-2)),r.clip(),r.fill(),t(),r.restore()}},{key:"rect2",value:function(e,t){var r=this.ctx,n=e.x,a=e.y,i=e.width,o=e.bgcolor,l=e.height;r.save(),r.beginPath(),r.fillStyle="rgba(0, 0, 0, 0)"===o?"#fff":o||"#fff",r.rect(f(n+1),f(a+1),d(i-2),d(l-2)),r.clip(),r.fill(),t(),r.restore()}}]),e}();t.Draw=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(8),i=r(1),o=r(10);function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=[{key:"copy",title:(0,o.tf)("contextmenu.copy"),label:"Ctrl+C"},{key:"cut",title:(0,o.tf)("contextmenu.cut"),label:"Ctrl+X"},{key:"divider"},{key:"insert-row",title:(0,o.tf)("contextmenu.insertRow")},{key:"insert-column",title:(0,o.tf)("contextmenu.insertColumn")},{key:"divider"},{key:"delete-row",title:(0,o.tf)("contextmenu.deleteRow")},{key:"delete-column",title:(0,o.tf)("contextmenu.deleteColumn")},{key:"delete-cell-text",title:(0,o.tf)("contextmenu.deleteCellText")},{key:"divider"},{key:"validation",title:(0,o.tf)("contextmenu.validation")}];function c(e){var t=this;return"divider"===e.key?(0,n.h)("div","".concat(i.cssPrefix,"-item divider")):(0,n.h)("div","".concat(i.cssPrefix,"-item")).on("click",(function(r){t.itemClick(e.key,r),t.hide()})).children(e.title(),(0,n.h)("div","label").child(e.label||""))}function d(){var e=this;return u.map((function(t){return c.call(e,t)}))}var f=function(){function e(t){var r,a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.menus=d.call(this),this.el=(r=(0,n.h)("div","".concat(i.cssPrefix,"-contextmenu"))).children.apply(r,l(this.menus)).hide(),this.viewFn=t,this.itemClick=function(){},this.isHide=a}var t,r,o;return t=e,(r=[{key:"hide",value:function(){var e=this.el;e.hide(),(0,a.unbindClickoutside)(e)}},{key:"setPosition",value:function(e,t){if(!this.isHide){var r=this.el,n=r.show().offset(),i=n.height,o=n.width,l=this.viewFn(),s=t,u=e;l.height-t<=i&&(s-=i),l.width-e<=o&&(u-=o),r.offset({left:u,top:s}),(0,a.bindClickoutside)(r)}}}])&&s(t.prototype,r),o&&s(t,o),e}();t.default=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildButton=N,t.buildButtonWithIcon=S,t.default=void 0;var n=r(0),a=r(8),i=y(r(163)),o=y(r(164)),l=y(r(165)),s=y(r(166)),u=(y(r(167)),y(r(81))),c=y(r(168)),d=y(r(169)),f=y(r(15)),m=y(r(11)),h=r(1),v=r(10),p=y(r(172));function y(e){return e&&e.__esModule?e:{default:e}}function g(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function A(e,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e){return(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-btn")).on("mouseenter",(function(t){(0,i.default)(e,t.target)})).attr("data-tooltip",e)}function _(){return(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-divider"))}function S(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};return N(e).child((r=t,new m.default(r))).on("click",(function(){return n()}))}function T(){var e=this;this.ddFormat.change=function(t){return e.change("format",t.key)},this.ddFont.change=function(t){return e.change("font-name",t.key)},this.ddFontSize.change=function(t){return e.change("font-size",t.pt)},this.ddTextColor.change=function(t){return e.change("color",t)},this.ddFillColor.change=function(t){return e.change("bgcolor",t)},this.ddAlign.change=function(t){return e.change("align",t)},this.ddVAlign.change=function(t){return e.change("valign",t)},this.ddBorder.change=function(t){return e.change("border",t)},this.undoEl.change=function(t){return e.change("undo",t)}}function C(e){var t=e,r=e.split("-");r.length>1&&r.forEach((function(e,r){0===r?t=e:t+=e[0].toUpperCase()+e.substring(1)}));var n=this["".concat(t,"El")];n.toggle(),this.change(e,n.hasClass("active"))}var I=function(e){function t(){var e;O(this,t);var r=new m.default("ellipsis"),a=(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-more"));return(e=A(this,x(t).call(this,r,"auto",!1,"bottom-right",!1,a))).moreBtns=a,e.contentEl.css("max-width","420px"),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,e),t}(f.default);function M(){this.btns2=this.btnChildren.map((function(e){var t=e.box(),r=e.computedStyle(),n=r.marginLeft,a=r.marginRight;return[e,t.width+parseInt(n,10)+parseInt(a,10)]}))}function k(){var e,t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.widthFn,n=this.el,a=this.btns,i=this.moreEl,o=this.ddMore,l=this.btns2,s=o.moreBtns,u=o.contentEl;n.css("width","".concat(r()-60,"px"));var c=n.box();console.log("92: ",c);var d=160,f=12,m=[],h=[];l.forEach((function(e,t){var r=E(e,2),n=r[0],a=r[1];d+=a,t===l.length-1||d<c.width?m.push(n):(f+=a,h.push(n))})),(e=a.html("")).children.apply(e,m),(t=s.html("")).children.apply(t,h),u.css("width","".concat(f,"px")),h.length>0?i.show():i.hide()}var j=function(){function e(t,r){var i,f=this,m=arguments.length>2&&void 0!==arguments[2]&&arguments[2];O(this,e),this.data=t,this.change=function(){},this.widthFn=r;var y=t.defaultStyle();this.ddFormat=new s.default,this.ddFont=new o.default,this.ddFontSize=new l.default,this.ddTextColor=new u.default("text-color",y.color),this.ddFillColor=new u.default("fill-color",y.bgcolor),this.ddAlign=new c.default(["left","center","right"],y.align),this.ddVAlign=new c.default(["top","middle","bottom"],y.valign),this.ddBorder=new d.default,this.ddMore=new I,this.undoEl=new p.default("undo",(function(){return f.change("undo")}),(function(e){return f.change("undoList",e)})),this.redoEl=new p.default("redo",(function(){return f.change("redo")}),(function(e){return f.change("redoList",e)})),this.btnChildren=[N("".concat((0,v.t)("toolbar.undo"))).child(this.undoEl.el),N("".concat((0,v.t)("toolbar.redo"))).child(this.redoEl.el),this.paintformatEl=S("".concat((0,v.t)("toolbar.paintformat")),"paintformat",(function(){return C.call(f,"paintformat")})),_(),N("".concat((0,v.t)("toolbar.format"))).child(this.ddFormat.el),_(),N("".concat((0,v.t)("toolbar.font"))).child(this.ddFont.el),N("".concat((0,v.t)("toolbar.fontSize"))).child(this.ddFontSize.el),_(),this.fontBoldEl=S("".concat((0,v.t)("toolbar.fontBold")," (Ctrl+B)"),"bold",(function(){return C.call(f,"font-bold")})),this.fontItalicEl=S("".concat((0,v.t)("toolbar.fontItalic")," (Ctrl+I)"),"italic",(function(){return C.call(f,"font-italic")})),this.underlineEl=S("".concat((0,v.t)("toolbar.underline")," (Ctrl+U)"),"underline",(function(){return C.call(f,"underline")})),this.strikeEl=S("".concat((0,v.t)("toolbar.strike")),"strike",(function(){return C.call(f,"strike")})),N("".concat((0,v.t)("toolbar.textColor"))).child(this.ddTextColor.el),_(),N("".concat((0,v.t)("toolbar.fillColor"))).child(this.ddFillColor.el),N("".concat((0,v.t)("toolbar.border"))).child(this.ddBorder.el),this.mergeEl=S("".concat((0,v.t)("toolbar.merge")),"merge",(function(){return C.call(f,"merge")})),_(),N("".concat((0,v.t)("toolbar.align"))).child(this.ddAlign.el),N("".concat((0,v.t)("toolbar.valign"))).child(this.ddVAlign.el),this.textwrapEl=S("".concat((0,v.t)("toolbar.textwrap")),"textwrap",(function(){return C.call(f,"textwrap")})),_(),this.freezeEl=S("".concat((0,v.t)("toolbar.freeze")),"freeze",(function(){return C.call(f,"freeze")})),this.addEl=S("".concat((0,v.t)("toolbar.add")),"add",(function(){return C.call(f,"add")})),this.closeEl=S("".concat((0,v.t)("toolbar.solveExpression")),"close",(function(){return C.call(f,"close")})),this.autofilterEl=S("".concat((0,v.t)("toolbar.autofilter")),"autofilter",(function(){return C.call(f,"autofilter")})),this.throwFormulaEl=S("".concat((0,v.t)("toolbar.throwFormula")),"chevron-right",(function(){return C.call(f,"throwFormula")})),this.moreEl=N("".concat((0,v.t)("toolbar.more"))).child(this.ddMore.el).hide()],this.el=(0,n.h)("div","".concat(h.cssPrefix,"-toolbar")),this.btns=(i=(0,n.h)("div","".concat(h.cssPrefix,"-toolbar-btns"))).children.apply(i,g(this.btnChildren)),this.el.child(this.btns),m&&this.el.hide(),T.call(this),this.reset(),setTimeout((function(){M.call(f),k.call(f)}),0),(0,a.bind)(window,"resize",(function(){k.call(f,t.settings.view.width)}))}var t,r,i;return t=e,(r=[{key:"moreResize",value:function(){var e=this.data;k.call(this,e.settings.view.width)}},{key:"paintformatActive",value:function(){return this.paintformatEl.hasClass("active")}},{key:"paintformatToggle",value:function(){this.paintformatEl.toggle()}},{key:"trigger",value:function(e){C.call(this,e)}},{key:"reset",value:function(){var e=this.data,t=e.getSelectedCellStyle(),r=e.getSelectedCell();this.undoEl.disabled(!e.canUndo()),this.redoEl.disabled(!e.canRedo()),this.mergeEl.active(e.canUnmerge()).disabled(!e.selector.multiple()),this.autofilterEl.active(!e.canAutofilter());var n=t.font;this.ddFont.setTitle(n.name),this.ddFontSize.setTitle(n.size),this.fontBoldEl.active(n.bold),this.fontItalicEl.active(n.italic),this.underlineEl.active(t.underline),this.strikeEl.active(t.strike),this.ddTextColor.setTitle(t.color),this.ddFillColor.setTitle(t.bgcolor),this.ddAlign.setTitle(t.align),this.ddVAlign.setTitle(t.valign),this.textwrapEl.active(t.textwrap),this.addEl.active(e.equationIsActive()),this.closeEl.active(!1),this.throwFormulaEl.active(!1),this.freezeEl.active(e.freezeIsActive()),r&&r.format&&this.ddFormat.setTitle(r.format)}}])&&b(t.prototype,r),i&&b(t,i),e}();t.default=j},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t.classList.contains("active"))return;var r=t.getBoundingClientRect(),o=r.left,l=r.top,s=r.width,u=r.height,c=(0,n.h)("div","".concat(i.cssPrefix,"-tooltip")).html(e).show();document.body.appendChild(c.el);var d=c.box();c.css("left","".concat(o+s/2-d.width/2,"px")).css("top","".concat(l+u+2,"px")),(0,a.bind)(t,"mouseleave",(function(){document.body.contains(c.el)&&document.body.removeChild(c.el)})),(0,a.bind)(t,"click",(function(){document.body.contains(c.el)&&document.body.removeChild(c.el)}))};var n=r(0),a=r(8),i=r(1)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(15))&&n.__esModule?n:{default:n},i=r(0),o=r(30),l=r(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.baseFonts.map((function(e){return(0,i.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){r.setTitle(e.title),r.change(e)})).child(e.title)}));return r=c(this,(e=d(t)).call.apply(e,[this,o.baseFonts[0].title,"160px",!0,"bottom-left",{type:!1}].concat(u(n))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),t}(a.default);t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(15))&&n.__esModule?n:{default:n},i=r(0),o=r(30),l=r(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.fontSizes.map((function(e){return(0,i.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){r.setTitle("".concat(e.pt)),r.change(e)})).child("".concat(e.pt))}));return r=c(this,(e=d(t)).call.apply(e,[this,"10","60px",!0,"bottom-left",{type:!1}].concat(u(n))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),t}(a.default);t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(15))&&n.__esModule?n:{default:n},i=r(0),o=r(44),l=r(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.baseFormats.slice(0);return n.splice(1,0,{key:"divider"}),n.splice(5,0,{key:"divider"}),n=n.map((function(e){var t=(0,i.h)("div","".concat(l.cssPrefix,"-item"));return"divider"===e.key?t.addClass("divider"):(t.child(e.title()).on("click",(function(){r.setTitle(e.title()),r.change(e)})),e.label&&t.child((0,i.h)("div","label").html(e.label))),t})),r=d(this,(e=f(t)).call.apply(e,[this,"Normal","220px",!0,"bottom-left",{type:!1}].concat(u(n))))}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),r=t,(n=[{key:"setTitle",value:function(e){for(var t=0;t<o.baseFormats.length;t+=1)o.baseFormats[t].key===e&&this.title.html(o.baseFormats[t].title);this.hide()}}])&&c(r.prototype,n),a&&c(r,a),t}(a.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(15)),a=s(r(11)),i=r(0),o=r(80),l=r(1);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function d(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=o.allFnObj.map((function(e){return(0,i.h)("div","".concat(l.cssPrefix,"-item")).on("click",(function(){r.hide(),r.change(e)})).child(e.key)}));return r=d(this,(e=f(t)).call.apply(e,[this,new a.default("cellFormulaProxy"),"180px",!0,"bottom-left",{type:!1}].concat(c(n))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),t}(n.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=l(r(15)),a=r(0),i=l(r(11)),o=r(1);function l(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(e,r){var n,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var s=new i.default("align-".concat(r)),c=e.map((function(e){return(t="align-".concat(e),(0,a.h)("div","".concat(o.cssPrefix,"-item")).child(new i.default(t))).on("click",(function(){l.setTitle(e),l.change(e)}));var t}));return l=d(this,(n=f(t)).call.apply(n,[this,s,"auto",!0,"bottom-left",{type:!1}].concat(u(c))))}var r,n,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),r=t,(n=[{key:"setTitle",value:function(e){this.title.setName("align-".concat(e)),this.hide()}}])&&c(r.prototype,n),l&&c(r,l),t}(n.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(15)),a=o(r(11)),i=o(r(170));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=new a.default("border-all"),n=new i.default;return n.change=function(t){e.change(t),e.hide()},(e=s(this,u(t).call(this,r,"auto",!1,"bottom-left",{type:!1},n.el))).borderPalette=n,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(n.default);t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=s(r(11)),i=s(r(81)),o=s(r(171)),l=r(1);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(n=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==l.return||l.return()}finally{if(a)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(){var e;return(0,n.h)("table","").child((e=(0,n.h)("tbody","")).children.apply(e,arguments))}function f(e){var t=this,r=(0,n.h)("div","".concat(l.cssPrefix,"-border-palette-cell"));return this.items.push(r),(0,n.h)("td","").child(r.child(new a.default("border-".concat(e))).on("click",(function(){t.mode=e;var r=t.mode,n=t.style,a=t.color;t.change({mode:r,style:n,color:a})})))}t.default=function e(){var t,r,a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.color="#000",this.style="thin",this.mode="all",this.change=function(){},this.ddColor=new i.default("line-color",this.color),this.ddColor.change=function(e){a.color=e},this.ddType=new o.default(this.style),this.ddType.change=function(e){var t=c(e,1)[0];a.style=t},this.el=(0,n.h)("div","".concat(l.cssPrefix,"-border-palette")),this.items=[];var s=d((0,n.h)("tr","").children((0,n.h)("td","".concat(l.cssPrefix,"-border-palette-left")).child(d((t=(0,n.h)("tr","")).children.apply(t,u(["all","inside","horizontal","vertical","outside"].map((function(e){return f.call(a,e)})))),(r=(0,n.h)("tr","")).children.apply(r,u(["left","top","right","bottom","none"].map((function(e){return f.call(a,e)})))))),(0,n.h)("td","".concat(l.cssPrefix,"-border-palette-right")).children((0,n.h)("div","".concat(l.cssPrefix,"-toolbar-btn")).child(this.ddColor.el),(0,n.h)("div","".concat(l.cssPrefix,"-toolbar-btn")).child(this.ddType.el))));this.el.child(s)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=l(r(15)),a=r(0),i=l(r(11)),o=r(1);function l(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m=[["thin",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" style="user-select: none;"></line></svg>'],["medium",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="2" style="user-select: none;"><line x1="0" y1="1.0" x2="50" y2="1.0" stroke-width="2" stroke="black" style="user-select: none;"></line></svg>'],["thick",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="3" style="user-select: none;"><line x1="0" y1="1.5" x2="50" y2="1.5" stroke-width="3" stroke="black" style="user-select: none;"></line></svg>'],["dashed",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="2" style="user-select: none;"></line></svg>'],["dotted",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="1" style="user-select: none;"></line></svg>']],h=function(e){function t(e){var r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var l=new i.default("line-type"),s=0,f=m.map((function(t,r){return(0,a.h)("div","".concat(o.cssPrefix,"-item state ").concat(e===t[0]?"checked":"")).on("click",(function(){f[s].toggle("checked"),f[r].toggle("checked"),s=r,n.hide(),n.change(t)})).child((0,a.h)("div","".concat(o.cssPrefix,"-line-type")).html(t[1]))}));return n=c(this,(r=d(t)).call.apply(r,[this,l,"auto",!1,"bottom-left",{type:!1}].concat(u(f))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),t}(n.default);t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(15)),a=o(r(11)),i=o(r(173));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=new a.default(e).css("height","18px"),l=new i.default;return s(this,u(t).call(this,o,"auto",!0,"bottom-left",{type:!0,change:r,arrowChange:n,historyBorder:l},l.el))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,e),t}(n.default);t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-history-border")),this.history=(0,n.h)("div","".concat(a.cssPrefix,"-history-content")).html("暂无内容"),this.el.child(this.history)}var t,r,o;return t=e,(r=[{key:"setContent",value:function(e){var t;e=e.slice(e.length-100<0?0:e.length,e.length),this.el.html("");for(var r=[],a=e.length-1;a>=0;a--){var i=(0,n.h)("div",""),o=e[a].action;i.html(o),r.push(i)}console.log(this,this.el),(t=this.el).children.apply(t,r)}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=d(r(82)),a=d(r(175)),i=d(r(176)),o=d(r(177)),l=d(r(45)),s=r(10),u=r(0),c=r(1);function d(e){return e&&e.__esModule?e:{default:e}}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var y=100,g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=new o.default(new i.default("cell",["cell"],"100%",(function(e){return(0,s.t)("dataValidation.modeType.".concat(e))})),{required:!0},"".concat((0,s.t)("dataValidation.range"),":"),y),n=new o.default(new a.default("120px","E3 or E3:F12"),{required:!0,pattern:/^([A-Z]{1,2}[1-9]\d*)(:[A-Z]{1,2}[1-9]\d*)?$/}),d=new o.default(new i.default("list",["list","number","date","phone","email"],"100%",(function(e){return(0,s.t)("dataValidation.type.".concat(e))}),(function(t){return e.criteriaSelected(t)})),{required:!0},"".concat((0,s.t)("dataValidation.criteria"),":"),y),f=new o.default(new i.default("be",["be","nbe","eq","neq","lt","lte","gt","gte"],"160px",(function(e){return(0,s.t)("dataValidation.operator.".concat(e))}),(function(t){return e.criteriaOperatorSelected(t)})),{required:!0}).hide(),m=new o.default(new a.default("70px","10"),{required:!0}).hide(),p=new o.default(new a.default("70px","100"),{required:!0,type:"number"}).hide(),g=new o.default(new a.default("120px","a,b,c"),{required:!0}),b=new o.default(new a.default("70px","10"),{required:!0,type:"number"}).hide();return(e=h(this,v(t).call(this,(0,s.t)("contextmenu.validation"),[(0,u.h)("div","".concat(c.cssPrefix,"-form-fields")).children(r.el,n.el),(0,u.h)("div","".concat(c.cssPrefix,"-form-fields")).children(d.el,f.el,m.el,p.el,b.el,g.el),(0,u.h)("div","".concat(c.cssPrefix,"-buttons")).children(new l.default("cancel").on("click",(function(){return e.btnClick("cancel")})),new l.default("remove").on("click",(function(){return e.btnClick("remove")})),new l.default("save","primary").on("click",(function(){return e.btnClick("save")})))]))).mf=r,e.rf=n,e.cf=d,e.of=f,e.minvf=m,e.maxvf=p,e.vf=b,e.svf=g,e.change=function(){},e}var r,n,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),r=t,(n=[{key:"criteriaSelected",value:function(e){var t=this.of,r=this.minvf,n=this.maxvf,a=this.vf,i=this.svf;"date"===e||"number"===e?(t.show(),r.rule.type=e,n.rule.type=e,"date"===e?(r.hint("2018-11-12"),n.hint("2019-11-12")):(r.hint("10"),n.hint("100")),r.show(),n.show(),a.hide(),i.hide()):("list"===e?i.show():i.hide(),a.hide(),t.hide(),r.hide(),n.hide())}},{key:"criteriaOperatorSelected",value:function(e){if(e){var t=this.minvf,r=this.maxvf,n=this.vf;if("be"===e||"nbe"===e)t.show(),r.show(),n.hide();else{var a=this.cf.val();n.rule.type=a,"date"===a?n.hint("2018-11-12"):n.hint("10"),n.show(),t.hide(),r.hide()}}}},{key:"btnClick",value:function(e){if("cancel"===e)this.hide();else if("remove"===e)this.change("remove"),this.hide();else if("save"===e){for(var t=["mf","rf","cf","of","svf","vf","minvf","maxvf"],r=0;r<t.length;r+=1){var n=this[t[r]];if(n.isShow()&&!n.validate())return}var a=this.mf.val(),i=this.rf.val(),o=this.cf.val(),l=this.of.val(),s=this.svf.val();"number"!==o&&"date"!==o||(s="be"===l||"nbe"===l?[this.minvf.val(),this.maxvf.val()]:this.vf.val()),this.change("save",a,i,{type:o,operator:l,required:!1,value:s}),this.hide()}}},{key:"setValue",value:function(e){if(e){var t=this.mf,r=this.rf,n=this.cf,a=this.of,i=this.svf,o=this.vf,l=this.minvf,s=this.maxvf,u=e.mode,c=e.ref,d=e.validator||{type:"list"},f=d.type,m=d.operator,h=d.value;t.val(u||"cell"),r.val(c),n.val(f),a.val(m),Array.isArray(h)?(l.val(h[0]),s.val(h[1])):(i.val(h||""),o.val(h||"")),this.criteriaSelected(f),this.criteriaOperatorSelected(m)}this.show()}}])&&m(r.prototype,n),d&&m(r,d),t}(n.default);t.default=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t,r){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vchange=function(){},this.el=(0,n.h)("div","".concat(a.cssPrefix,"-form-input")),this.input=(0,n.h)("input","").css("width",t).on("input",(function(e){return i.vchange(e)})).attr("placeholder",r),this.el.child(this.input)}var t,r,o;return t=e,(r=[{key:"hint",value:function(e){this.input.attr("placeholder",e)}},{key:"val",value:function(e){return this.input.val(e)}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(78))&&n.__esModule?n:{default:n},o=r(1);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r,n){var l=this,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(e){return e},u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.key=t,this.getTitle=s,this.vchange=function(){},this.el=(0,a.h)("div","".concat(o.cssPrefix,"-form-select")),this.suggest=new i.default(r.map((function(e){return{key:e,title:l.getTitle(e)}})),(function(e){l.itemClick(e.key),u(e.key),l.vchange(e.key)}),n,this.el),this.el.children(this.itemEl=(0,a.h)("div","input-text").html(this.getTitle(t)),this.suggest.el).on("click",(function(){return l.show()}))}var t,r,n;return t=e,(r=[{key:"show",value:function(){this.suggest.search("")}},{key:"itemClick",value:function(e){this.key=e,this.itemEl.html(this.getTitle(e))}},{key:"val",value:function(e){return void 0!==e?(this.key=e,this.itemEl.html(this.getTitle(e)),this):this.key}}])&&l(t.prototype,r),n&&l(t,n),e}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(10);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l={number:/(^\d+$)|(^\d+(\.\d{0,4})?$)/,date:/^\d{4}-\d{1,2}-\d{1,2}$/},s=function(){function e(t,r,i,o){var l=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.label="",this.rule=r,i&&(this.label=(0,n.h)("label","label").css("width","".concat(o,"px")).html(i)),this.tip=(0,n.h)("div","tip").child("tip").hide(),this.input=t,this.input.vchange=function(){return l.validate()},this.el=(0,n.h)("div","".concat(a.cssPrefix,"-form-field")).children(this.label,t.el,this.tip)}var t,r,s;return t=e,(r=[{key:"isShow",value:function(){return"none"!==this.el.css("display")}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){return this.el.hide(),this}},{key:"val",value:function(e){return this.input.val(e)}},{key:"hint",value:function(e){this.input.hint(e)}},{key:"validate",value:function(){var e=this.input,t=this.rule,r=this.tip,n=this.el,a=e.val();return t.required&&/^\s*$/.test(a)?(r.html((0,i.t)("validation.required")),n.addClass("error"),!1):!t.type&&!t.pattern||(t.pattern||l[t.type]).test(a)?(n.removeClass("error"),!0):(r.html((0,i.t)("validation.notMatch")),n.addClass("error"),!1)}}])&&o(t.prototype,r),s&&o(t,s),e}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=(n=r(45))&&n.__esModule?n:{default:n},o=r(8),l=r(1),s=r(10);function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){return(0,a.h)("div","".concat(l.cssPrefix,"-item ").concat(e))}function d(e){var t=this;return c("state").child((0,s.t)("sort.".concat(e))).on("click.stop",(function(){return t.itemClick(e)}))}function f(e){var t=this,r=this.filterbEl,n=this.filterValues;r.html(""),Object.keys(e).forEach((function(i,o){var u=e[i],c=n.includes(i)?"checked":"";r.child((0,a.h)("div","".concat(l.cssPrefix,"-item state ").concat(c)).on("click.stop",(function(){return t.filterClick(o,i)})).children(""===i?(0,s.t)("filter.empty"):i,(0,a.h)("div","label").html("(".concat(u,")"))))}))}function m(){var e=this.filterhEl,t=this.filterValues,r=this.values;e.html("".concat(t.length," / ").concat(r.length)),e.checked(t.length===r.length)}var h=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filterbEl=(0,a.h)("div","".concat(l.cssPrefix,"-body")),this.filterhEl=(0,a.h)("div","".concat(l.cssPrefix,"-header state")).on("click.stop",(function(){return t.filterClick(0,"all")})),this.tindex=1,this.el=(0,a.h)("div","".concat(l.cssPrefix,"-sort-filter")).children(this.sortAscEl=d.call(this,"asc"),this.sortDescEl=d.call(this,"desc"),c("divider"),(0,a.h)("div","".concat(l.cssPrefix,"-filter")).children(this.filterhEl,this.filterbEl),(0,a.h)("div","".concat(l.cssPrefix,"-buttons")).children(new i.default("cancel").on("click",(function(){return t.btnClick("cancel")})),new i.default("ok","primary").on("click",(function(){return t.btnClick("ok")})))).hide(),this.el.on("mousedown.stop",(function(e){t.tindex=1})),this.ci=null,this.sortDesc=null,this.values=null,this.filterValues=[]}var t,r,n;return t=e,(r=[{key:"btnClick",value:function(e){if("ok"===e){var t=this.ci,r=this.sort,n=this.filterValues;this.ok&&this.ok(t,r,"in",n)}this.hide()}},{key:"itemClick",value:function(e){this.sort=e;var t=this.sortAscEl,r=this.sortDescEl;t.checked("asc"===e),r.checked("desc"===e)}},{key:"filterClick",value:function(e,t){var r=this.filterbEl,n=this.filterValues,i=this.values,o=r.children();"all"===t?o.length===n.length?(this.filterValues=[],o.forEach((function(e){return(0,a.h)(e).checked(!1)}))):(this.filterValues=Array.from(i),o.forEach((function(e){return(0,a.h)(e).checked(!0)}))):(0,a.h)(o[e]).toggle("checked")?n.push(t):n.splice(n.findIndex((function(e){return e===t})),1),m.call(this)}},{key:"set",value:function(e,t,r,n){this.ci=e;var a=this.sortAscEl,i=this.sortDescEl;null!==n?(this.sort=n.order,a.checked(n.asc()),i.checked(n.desc())):(this.sortDesc=null,a.checked(!1),i.checked(!1)),this.values=Object.keys(t),this.filterValues=r?Array.from(r.value):Object.keys(t),f.call(this,t,r),m.call(this)}},{key:"setOffset",value:function(e){var t=this;if(this.el.isShow())this.hide();else{this.el.offset(e).show();var r=1;console.log(this.el),(0,o.bindClickoutside)(this.el,(function(){0===r&&t.hide(),r=0}))}}},{key:"show",value:function(){this.el.show()}},{key:"hide",value:function(){this.el.hide(),(0,o.unbindClickoutside)(this.el)}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.xtoast=function(e,t){var r=(0,a.h)("div","".concat(o.cssPrefix,"-toast")),n=(0,a.h)("div","".concat(o.cssPrefix,"-dimmer active"));r.children((0,a.h)("div","".concat(o.cssPrefix,"-toast-header")).children(new i.default("close").on("click.stop",(function(){return document.body.removeChild(r.el),void document.body.removeChild(n.el)})),e),(0,a.h)("div","".concat(o.cssPrefix,"-toast-content")).html(t)),document.body.appendChild(r.el),document.body.appendChild(n.el);var l=r.box(),s=l.width,u=l.height,c=document.documentElement,d=c.clientHeight,f=c.clientWidth;r.offset({left:(f-s)/2,top:(d-u)/3})};var n,a=r(0),i=(n=r(11))&&n.__esModule?n:{default:n},o=r(1)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(0),a=r(1),i=r(42);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=(0,n.h)("div","".concat(a.cssPrefix,"-advice")).children(this.save=(0,n.h)("div","".concat(a.cssPrefix,"-advice-style")).css("border-bottom","1px solid"),this.text=(0,n.h)("div","".concat(a.cssPrefix,"-advice-style"))).hide(),this.save.children(this.saveCheck=(0,n.h)("span","check").hide("visibility","hidden"),(0,n.h)("span","").html("保留样式")),this.text.children(this.textCheck=(0,n.h)("span","check").hide("visibility","hidden"),(0,n.h)("span","").html("仅文本")),this.data=t,this.sheet=r,this.left=0,this.top=0,this.save.on("mousedown.stop",(function(){o.saveCheck.show("visibility","initial"),o.textCheck.hide("visibility","hidden"),o.sheet.setCellRange(o.reference,o.tableProxy,!0),i.sheetReset.call(o.sheet)})),this.text.on("mousedown.stop",(function(){o.sheet.setCellRange(o.reference,o.tableProxy,!1),o.saveCheck.show("visibility","hidden"),o.textCheck.hide("visibility","initial"),i.sheetReset.call(o.sheet)}))}var t,r,l;return t=e,(r=[{key:"show",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,n=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;this.el.css("left","".concat(e,"px")),this.el.css("top","".concat(t,"px")),1===r&&(this.saveCheck.show("visibility","initial"),this.textCheck.hide("visibility","hidden")),this.left=parseInt(e),this.top=parseInt(t),this.tableProxy=a,this.reference=n,this.el.show()}}])&&o(t.prototype,r),l&&o(t,l),e}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(0),i=r(1),o=(n=r(5))&&n.__esModule?n:{default:n},l=r(182);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.el=(0,a.h)("div","".concat(i.cssPrefix,"-hyperlink-tooltip")).hide(),this.tableEl=(0,a.h)("div","".concat(i.cssPrefix,"-hyperlink-tooltip")).hide(),this.editor=r,this.tableEl.attr("tabindex",0),this.tableEl.css("overflow-y","auto"),this.tableEl.css("max-height","400px"),this.timer=null,this.timer2=null}var t,r,n;return t=e,(r=[{key:"show",value:function(e,t){var r=this;if(this.editor.isDisplay2())return this.el.hide(),void this.tableEl.hide();var n=this.data,s=n.getCellTextOrDefault(e,t)+"";if(clearTimeout(this.timer),clearTimeout(this.timer2),0===i.look.indexOf(s.split("!")[0])){var u=n.getRect(new o.default(e,t,e,t)),c=u.left+55,d=u.top+50,f=JSON.parse(s.substring(s.indexOf("!")+1,s.length));this.tableEl.css("left","".concat(c,"px")),this.tableEl.css("top","".concat(d,"px")),this.tableEl.css("user-select","text"),this.tableEl.html("");var m=(0,a.h)("table","");m.css("border-spacing","0px");var h=(0,a.h)("tr","");h.children((0,a.h)("td","").css("border","1px solid black").html("序号"),(0,a.h)("td","").css("border","1px solid black").html("项目名称"),(0,a.h)("td","").css("border","1px solid black").html("城市"),(0,a.h)("td","").css("border","1px solid black").html("占地面积"),(0,a.h)("td","").css("border","1px solid black").html("差额")),m.children(h);for(var v=0;v<f.length;v++){var p=f[v],y=p.number,g=p.name,b=p.city,E=p.area,R=p.value,O=(0,a.h)("tr",""),A=(0,a.h)("td","");A.html(y),A.css("border","1px solid black");var x=(0,a.h)("td","");x.html(g),x.css("border","1px solid black");var w=(0,a.h)("td","");w.html(b),w.css("border","1px solid black");var N=(0,a.h)("td","");N.html(E),N.css("border","1px solid black");var _=(0,a.h)("td","");_.html(R),_.css("border","1px solid black"),O.children(A,x,w,N,_),m.children(O)}this.tableEl.children(m),this.timer=setTimeout((function(){r.tableEl.show(),r.el.hide()}),150)}else{var S=(0,l.isSpecialWebsite)(s);if(S.state&&(s=S.text),"http://"!==(s="www"===s.substr(0,3).toLowerCase()?"http://"+s:s).substr(0,7).toLowerCase()&&"https://"!==s.substr(0,8).toLowerCase())return this.el.hide(),void this.tableEl.hide();var T=n.getRect(new o.default(e,t,e,t)),C=T.left+55,I=T.top+5;this.el.html(""),this.el.css("color","blue"),this.el.children((0,a.h)("div","aaa").css("border-bottom","1px solid blue").on("click",(function(e){console.log(e);var t=e.screenX,r=e.screenY;window.open(s,"","width=".concat(650,",height=").concat(500,",left=").concat(t+T.width,",top=").concat(r))})).html(s)),this.el.css("left","".concat(C,"px")),this.el.css("top","".concat(I,"px")),this.timer2=setTimeout((function(){r.el.show(),r.tableEl.hide()}),150)}}}])&&s(t.prototype,r),n&&s(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSpecialWebsite=function(e){if(1===n.look.indexOf(e.split("!")[0]))return{state:!0,text:JSON.parse(e.split("!")[1]).url};return{state:!1,text:""}},t.specialWebsiteValue=function(e,t){var r=function(e,t){if(1===n.look.indexOf(e.split("!")[0])&&-1===t.toUpperCase().indexOf(a))return 2;return 0}(e,t);if(2===r){var i=e.split(" "),o="";if(i.length>=1){e=i[0];for(var l=1;l<i.length;l++)o+=i[l]}return{state:!0,type:r,text:JSON.parse(e.split("!")[1]).text+o}}return{state:!1,type:r,text:""}},t.multipleCellsRender=function(e,t){var r=[];return Object.keys(t).forEach((function(n){e[n]=t[n],r.push(n)})),r};var n=r(1),a="HYPERLINK"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(82)),a=r(0),i=s(r(45)),o=r(10),l=r(1);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e,t,r){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}(e,t);if(n){var a=Object.getOwnPropertyDescriptor(n,t);return a.get?a.get.call(r):a.value}})(e,t,r||e)}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=(0,a.h)("span","").html("您输入的公式好像至少缺少一个左括号");return(e=d(this,m(t).call(this,(0,o.t)("contextmenu.errorPop"),[(0,a.h)("div","".concat(l.cssPrefix,"-form-fields")).children(r),(0,a.h)("div","".concat(l.cssPrefix,"-form-fields")),(0,a.h)("div","".concat(l.cssPrefix,"-buttons")).children(new i.default("ok","primary").on("click",(function(){return e.btnClick("ok")})))]))).tip=r,e}var r,n,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,(n=[{key:"show",value:function(e){this.tip.html(e),f(m(t.prototype),"show",this).call(this)}},{key:"btnClick",value:function(e){"ok"===e&&this.hide()}}])&&c(r.prototype,n),s&&c(r,s),t}(n.default);t.default=v},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(1),a=r(6);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rect=t}var t,r,o;return t=e,(r=[{key:"isLocInside",value:function(e,t){var r=this.rect;return e<r.width+r.left&&e>r.left&&t-n.offsetTop>r.top&&t-n.offsetTop<r.top+r.height}},{key:"getUpDownLeftRight",value:function(e,t,r,i){var o=this.rect,l=0;return e<o.width+o.left&&e>o.left?t>o.top+o.height+n.offsetTop?l=1:t-n.offsetTop<o.top&&(l=4):t-(o.top-o.height+n.offsetTop)>0&&o.height+o.top+n.offsetTop>t&&(e>o.width+o.left?l=3:e<o.left&&(l=2)),0===l&&(l=(0,a.positionAngle)(r,e,i,t)),1===l&&t<0?l=4:document.body.clientHeight<t&&4===l&&(l=1),3===l&&e<0?l=2:document.body.clientWidth<e&&2===l&&(l=3),l}}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.timer=[]}var t,r,a;return t=e,(r=[{key:"push",value:function(e){this.timer.push(e)}},{key:"clear",value:function(){for(var e=0;e<this.timer.length;e++){var t=this.timer[e];clearTimeout(t),clearInterval(t)}}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e,t){this.register=function(r){var n=[],a=["nw","w","ws","s","se","e","ne","n"];a.forEach((function(e){var t=document.createElement("div");t.style.display="block",t.className="direction "+e,n.push(t),r.appendChild(t)}));for(var i=0;i<4;i++){var o=document.createElement("div");o.style.display="block",o.className="line".concat(i+1),r.appendChild(o),n.push(o)}var l=document.createElement("div");function s(n){n<20&&(n=20),e.onResize({width:n},t),r.style.width=n+"px"}function u(n){n<20&&(n=20),e.onResize({height:n},t),r.style.height=n+"px"}l.className="border",r.appendChild(l),a.forEach((function(t){var n=r.querySelector("."+t);n.onmousedown=function(a){if(0===a.button){var i={ox:a.clientX,oy:a.clientY,ow:r.offsetWidth,oh:r.offsetHeight,ol:r.offsetLeft,ot:r.offsetTop};e&&e.onBegin&&e.onBegin.call(r,i);var o=!0;window.onmousemove=function(e){if(o){var r=e.clientX,a=e.clientY,l=r-i.ox,s=a-i.oy;i.width=l,i.height=s;var u=c[t];u&&u.call(n,i,e),e.stopPropagation()}},window.onmouseup=function(t){o=!1,t.stopPropagation(),e&&e.onEnd&&e.onEnd.call(r)},a.stopPropagation()}}})),e?e.onResize||(e.onResize=function(){}):e={onResize:function(){}};var c={s:function(e){u(e.oh+e.height)},e:function(e){s(e.ow+e.width)},w:function(n){var a=n.width,i=n.ol+a,o=n.ow+Math.abs(a);a>0&&(o=n.ow-a),o>20&&(!function(n){e.onResize({left:n},t),r.style.left=n+"px"}(i),s(o))},n:function(n){var a=n.height,i=n.ot+a,o=n.oh+Math.abs(a);a>0&&(o=n.oh-a),o>20&&(u(o),function(n){e.onResize({top:n},t),r.style.top=n+"px"}(i))},se:function(e){c.s(e),c.e(e)},nw:function(e){c.n(e),c.w(e)},ws:function(e){c.w(e),c.s(e)},ne:function(e){c.n(e),c.e(e)}};return n}};t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(41),i=r(38),o=r(6),l=(n=r(5))&&n.__esModule?n:{default:n},s=r(12);function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.rows=new i.Rows({len:0,height:0},t)}var t,r,n;return t=e,(r=[{key:"getComputedStyle",value:function(e){var t=!1;return e.fontWeight>400&&(t=!0),{color:e.color,bgcolor:e.background.substring(0,e.background.indexOf(")")+1),font:{bold:t}}}},{key:"extend",value:function(e,t){var r=t.ri,n=t.ci,a=this.data;if(e.rows.length>=a.rows.len-r){var i=e.rows.length-(a.rows.len-r);i>0&&a.insert("row",i)}if(!1!==(0,s.isHave)(e.rows[0])&&!1!==(0,s.isHave)(e.rows[0].cells)){var o=e.rows[0].cells.length;if(o>=a.cols.len){var l=o-(a.cols.len-n);l>0&&a.insert("column",l,a.cols.len)}}}},{key:"each",value:function(e,t){for(var r=0;r<e.rows.length;r++)for(var n=0;n<e.rows[r].cells.length;n++)t(r,n,e.rows[r].cells[n])}},{key:"dealColSpan",value:function(e){this.each(e,(function(t,r,n){var a=n.getAttribute("colspan");if(a&&a>1)for(var i=0;i<a-1;i++)e.rows[t].insertBefore(document.createElement("td"),e.rows[t].cells[r+1])}))}},{key:"dealStyle",value:function(e,t){var r=this,n=t.ri,i=t.ci,o=this.data,l=this.rows,s=o.styles;this.each(e,(function(e,t,o){var u=document.defaultView.getComputedStyle(o,null),c=r.getComputedStyle(u),d=(0,a.isHaveStyle)(s,c);-1===d&&s.push(c),l.setCell(n+e,i+t,{style:-1===d?s.length-1:d},"all")}))}},{key:"parseTableCellRange",value:function(e,t){var r=t.ri,n=t.ci,a=r,i=n;return this.each(e,(function(e,t){var o=r+e,l=n+t;a<o&&(a=o),i<l&&(i=l)})),new l.default(r,n,a,i)}},{key:"dealReference",value:function(e,t){var r=t.ri,n=t.ci,a=this.rows,i=[];return this.each(e,(function(e,t,l){var s=l.querySelector("reference"),u=l.innerText||"";if(s){var c=s.getAttribute("ri"),d=s.getAttribute("ci"),f=(0,o.splitStr)(u),m=e+r-c,h=t+n-d,v=a.getCellTextByShift(f,h,m),p=v.bad,y=v.result;a.updateCellReferenceByShift(p,y,r+e,n+t)}else{var g=a.getCell(r+e,n+t)||{};g.text=u,g.formulas=u,a.setCell(r+e,n+t,g,"all")}i.push({ri:r+e,ci:n+t})})),{reference:i}}}])&&u(t.prototype,r),n&&u(t,n),e}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatDate=function(e){if(!(0,l.isHave)(e)||!(0,l.isNumber)(e))return{state:!1,date_formula:"",minute:!1};var t=s(e,(function(e){return 24*e*60}));t=(0,o.formatNumberRender)(t,5);var r=(0,a.default)("1900-01-01"),n=(0,a.default)("1900-01-01"),i=!1;if((0,l.isHave)(t)&&1*t>0){var u=s(t,(function(e){return 60*e}));i=!0,u=(0,o.formatNumberRender)(u,5),n=(0,a.default)("1900-01-01  00:00:00").set("minute",t).set("second",u)}var c="";if(i){c=r.add(e,"day").subtract(2,"day").format("YYYY-MM-DD");var d=n.add(e,"day").subtract(2,"day").format("YYYY-MM-DD  h:mm:ss");return{state:"Invalid Date"!==c,date:c,date_formula:d,minute:!0}}return{state:"Invalid Date"!==(c=r.add(e,"day").subtract(2,"day").format("YYYY-MM-DD")),date:c,date_formula:"",minute:!1}},t.changeFormat=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"YYYY年MM月DD日";return(0,a.default)(e).format(t)},t.calcDecimals=s,t.dateDiff=function(e){for(var t=!1,r=0;!1===t&&r<i.datePattern.length;r++)t=(0,i.str2Re)(i.datePattern[r]).test(e);return!1===t?{isValid:!1}:(e=(e=e.replace(/[年|月]/g,"-")).replace(/[日]/g,""),{diff:(0,a.default)(e).diff((0,a.default)("1900-01-01"),"day")+2,isValid:!0})};var n,a=(n=r(59))&&n.__esModule?n:{default:n},i=r(19),o=r(44),l=r(12);function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=e.toString().split(".");if(r.length>2)return e;for(var n=r[1]+"",a=n,i=0;i<n.length;i++)a*=.1;return t(a)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=r(4),i=(n=r(84))&&n.__esModule?n:{default:n},o=r(31);function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e){this.undoItems.push(e),this.redoItems=[]}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.undoItems=[],this.redoItems=[],this.data=t}var t,r,n;return t=e,(r=[{key:"addStep",value:function(e,t){var r=e.type,n=e.action,a=e.ri,l=e.ci,u=e.expr,c=e.cellRange,d=e.cells,f=e.height,m=e.width,h=e.property,v=e.value,p=e.oldData,y=t.oldCell,g=t.newCell,b=t.oldMergesData,E=t.newMergesData,R=t.oldStep,O="";1===r?(O=new i.default({type:r,action:n,ri:a,ci:l,expr:u,oldCell:y,newCell:g},this.data),s.call(this,O)):2===r||5===r||11===r||12===r||6===r?(O=new i.default({type:r,oldMergesData:b,property:h,value:v,newMergesData:E,action:n,cellRange:c,oldCell:y,newCell:d},this.data),s.call(this,O)):13===r?(O=new i.default({type:r,oldData:p,newData:R.oldData,action:n},this.data),s.call(this,O)):3===r?(O=new i.default({type:r,action:n,height:f,ri:a,oldStep:R},this.data),s.call(this,O)):4===r&&(O=new i.default({type:r,action:n,width:m,ci:l,oldStep:R},this.data),s.call(this,O)),o.testValid.call(this)}},{key:"getStepType",value:function(e,t){var r=t.ri,n=t.ci,i=t.expr,o=t.text,l=t.range,s=t.cellRange,u=t.property,c=t.value,d="",f=this.data,m=f.rows,h=f.cols;if(1===e)return{action:d="在".concat(i,'中键入"').concat(o,'"'),type:e,ri:r,ci:n,expr:i};if(2===e){var v=(0,a.xy2expr)(l.sci,l.sri),p=(0,a.xy2expr)(l.eci,l.eri);return i=v===p?v:"".concat(v,":").concat(p),{action:d="删除".concat(i,"的单元格内容"),type:e,cellRange:l,cells:this.eachRange(l)}}return 3===e?{action:d="行宽",type:e,height:m.getHeight(r),ri:r}:4===e?{action:d="列宽",type:e,width:h.getWidth(n),ci:n}:5===e?{action:d="自动填充",type:e,cellRange:l,cells:this.eachRange(s)}:12===e?{action:d="选择性粘贴",type:e,cellRange:l,property:u,value:c,cells:this.eachRange(s)}:13===e?{action:d="插入单元格",type:e,oldData:this.data.getData()}:11===e?("font-bold"===u||"font-italic"===u||"font-name"===u||"font-size"===u||"color"===u?d="字体":"underline"===u?d="下划线":"bgcolor"===u||"format"===u?d="单元格格式":"align"===u?"left"===c?d="左对齐":"center"===c?d="居中":"right"===c&&(d="右对齐"):"valign"===u?"top"===c?d="顶端对齐":"center"===c?d="居中":"bottom"===c&&(d="底端对齐"):"border"===u?d="边框":"strike"===u?d="删除线":"merge"===u&&(d="合并单元格"),{action:d,type:e,cellRange:l,property:u,value:c,cells:this.eachRange(s)}):6===e?{action:d="粘贴",type:e,cellRange:l,cells:this.eachRange(s)}:void 0}},{key:"undo",value:function(){var e=this.does(this.getItems(1),1);this.redoItems.push(e)}},{key:"redo",value:function(){var e=this.does(this.getItems(2),2);this.undoItems.push(e)}},{key:"eachRange",value:function(e){return this.data.rows.eachRange(e)}},{key:"does",value:function(e,t){if(this.data.settings.showEditor&&!(e.length<=0)){var r=this.data,n=r.sheet,a=e.pop();return a.restore(r,n,t),a}}},{key:"getItems",value:function(e){return 1===e?this.undoItems:this.redoItems}}])&&l(t.prototype,r),n&&l(t,n),e}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r(28))&&n.__esModule?n:{default:n},i=r(4);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.selectorRange=t,this.dstRange=r}var t,r,n;return t=e,(r=[{key:"getPaintType",value:function(){var e=this.dstRange,t=this.selectorRange;return function(e,t){return 1===e&&1===t?1:1===e&&2===t?2:1===e&&3===t?3:2===e&&1===t?4:3===e&&1===t?5:2===e&&2===t?6:2===e&&3===t?7:3===e&&2===t?8:3===e&&3===t?9:void 0}(e.getType(),t.getType())}},{key:"makePaintArr",value:function(e,t){var r=this.dstRange,n=this.selectorRange,o=[],l=n.eci-n.sci,s=0,u=r.sri,c=0,d=function(e,t){var r=t.sri,n=[],a=[],i=0;return t.each((function(t,o){r!==t&&(r=t,n.push(a),a=[]),a.push(e[i]),i+=1})),n.push(a),n}(t,n);return r.each((function(e,t){u!==e&&(s=0,(c+=1)===d.length&&(c=0));var r=d[c][s].cell,n=new a.default(e,t,r,(0,i.xy2expr)(e,t));o.push(n),s===l?s=0:s+=1,u=e})),o}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=l},function(e,t,r){},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={toolbar:{undo:"撤销",redo:"恢复",paintformat:"格式刷",clearformat:"清除格式",format:"数据格式",font:"字体",fontSize:"字号",fontBold:"加粗",fontItalic:"倾斜",underline:"下划线",strike:"删除线",textColor:"字体颜色",fillColor:"填充颜色",border:"边框",merge:"合并单元格",align:"水平对齐",valign:"垂直对齐",textwrap:"自动换行",freeze:"冻结",autofilter:"自动筛选",add:"清除公式",calc:"开始计算",formula:"函数",more:"更多",throwFormula:"显示公式",comeBack:"返回"},revision:{comeBack:"退出"},contextmenu:{copy:"复制",cut:"剪切",paste:"粘贴",pasteValue:"粘贴数据",pasteFormat:"粘贴格式",insertRow:"插入行",insertColumn:"插入列",deleteRow:"删除行",deleteColumn:"删除列",deleteCell:"删除",deleteCellText:"删除数据",validation:"数据验证",errorPop:"出现问题",recover:"恢复此版本"},format:{normal:"常规",text:"文本",number:"数值",percent:"百分比",rmb:"人民币",usd:"美元",date:"短日期",time:"时间",datetime:"长日期",duration:"持续时间"},date_formula:{sum:"求和",average:"求平均值",max:"求最大值",min:"求最小值",concat:"字符拼接",wland:"MD.WLAND",wfr:"MD.WFR",rtd:"MD.RTD"},validation:{required:"此值必填",notMatch:"此值不匹配验证规则",between:"此值应在 {} 和 {} 之间",notBetween:"此值不应在 {} 和 {} 之间",notIn:"此值不在列表中",equal:"此值应该等于 {}",notEqual:"此值不应该等于 {}",lessThan:"此值应该小于 {}",lessThanEqual:"此值应该小于等于 {}",greaterThan:"此值应该大于 {}",greaterThanEqual:"此值应该大于等于 {}"},error:{pasteForMergedCell:"无法对合并的单元格执行此操作"},calendar:{weeks:["日","一","二","三","四","五","六"],months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]},button:{cancel:"取消",remove:"删除",save:"保存",ok:"确认"},sort:{desc:"降序",asc:"升序"},filter:{empty:"空白"},dataValidation:{mode:"模式",range:"单元区间",criteria:"条件",modeType:{cell:"单元格",column:"列模式",row:"行模式"},type:{list:"列表",number:"数字",date:"日期",phone:"手机号",email:"电子邮件"},operator:{be:"在区间",nbe:"不在区间",lt:"小于",lte:"小于等于",gt:"大于",gte:"大于等于",eq:"等于",neq:"不等于"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bugout=void 0;var n=r(194),a="";t.bugout=a;try{t.bugout=a=new n.debugout}catch(e){console.error(e)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.debugout=function(){var e=this;if(e.realTimeLoggingOn=!0,e.useTimestamps=!1,e.useLocalStorage=!0,e.recordLogs=!0,e.autoTrim=!0,e.maxLines=2500,e.tailNumLines=100,e.logFilename="debugout.txt",e.depth=0,e.parentSizes=[0],e.currentResult="",e.startTime=new Date,e.output="",this.version=function(){return"0.5.0"},this.getLog=function(){var t=new Date;if(e.recordLogs||e.log("[debugout.js] log recording is off."),e.useLocalStorage){var r=window.localStorage.getItem("debugout.js");r&&(r=JSON.parse(r),e.startTime=new Date(r.startTime),e.output=r.log,t=new Date(r.lastLog))}return e.output+"\n---- Log retrieved: "+t+" ----\n"+e.formatSessionDuration(e.startTime,t)},this.tail=function(t){t=t||e.tailLines;return e.trimLog(e.getLog(),t)},this.search=function(t){for(var r=e.output.split("\n"),n=new RegExp(t),a=[],i=0;i<r.length;i++){var o="["+i+"] ";r[i].match(n)&&a.push(o+r[i])}var l=a.join("\n");return 0===l.length&&(l='Nothing found for "'+t+'".'),l},this.getSlice=function(t,r){return e.output.split("\n").slice(t,t+r).join("\n")},this.downloadLog=function(){var t="data:text/plain;charset=utf-8,",r=e.getLog();t+=encodeURIComponent(r);var n=document.createElement("a");n.href=t,n.target="_blank",n.download=e.logFilename,document.body.appendChild(n),n.click(),n.remove()},this.clear=function(){var t=new Date;if(e.output="---- Log cleared: "+t+" ----\n",e.useLocalStorage){var r={startTime:e.startTime,log:e.output,lastLog:t};r=JSON.stringify(r),window.localStorage.setItem("debugout.js",r)}e.realTimeLoggingOn&&console.log("[debugout.js] clear()")},this.log=function(t){if(e.realTimeLoggingOn&&console.log(t),null!==e.determineType(t)&&e.recordLogs){var r=t;if(e.useTimestamps){var n=new Date;e.output+=e.formatTimestamp(n)}if(e.output+=r+"\n",e.autoTrim&&(e.output=e.trimLog(e.output,e.maxLines)),e.useLocalStorage){var a=new Date,i={startTime:e.startTime,log:e.output,lastLog:a};i=JSON.stringify(i),window.localStorage.setItem("debugout.js",i)}}e.depth=0,e.parentSizes=[0],e.currentResult=""},this.determineType=function(e){if(null!==e){var t,r=n(e);if("object"===r)t=null===e.length?"function"==typeof e.getTime?"Date":"function"==typeof e.test?"RegExp":"Object":"Array";else t=r;return t}return null},this.formatType=function(t,r){switch(t){case"Object":e.currentResult+="{\n",e.depth++,e.parentSizes.push(e.objectSize(r));var n=0;for(var a in r){e.currentResult+=e.indentsForDepth(e.depth),e.currentResult+=a+": ";var i=e.determineType(r[a]);(o=e.formatType(i,r[a]))?(e.currentResult+=o,n!==e.parentSizes[e.depth]-1&&(e.currentResult+=","),e.currentResult+="\n"):(n!==e.parentSizes[e.depth]-1&&(e.currentResult+=","),e.currentResult+="\n"),n++}if(e.depth--,e.parentSizes.pop(),e.currentResult+=e.indentsForDepth(e.depth),e.currentResult+="}",0===e.depth)return e.currentResult;break;case"Array":e.currentResult+="[",e.depth++,e.parentSizes.push(r.length);for(n=0;n<r.length;n++){var o;"Object"!==(i=e.determineType(r[n]))&&"Array"!==i||(e.currentResult+="\n"+e.indentsForDepth(e.depth)),(o=e.formatType(i,r[n]))?(e.currentResult+=o,n!==e.parentSizes[e.depth]-1&&(e.currentResult+=", "),"Array"===i&&(e.currentResult+="\n")):(n!==e.parentSizes[e.depth]-1&&(e.currentResult+=", "),"Object"!==i?e.currentResult+="\n":n===e.parentSizes[e.depth]-1&&(e.currentResult+="\n"))}if(e.depth--,e.parentSizes.pop(),e.currentResult+="]",0===e.depth)return e.currentResult;break;case"function":var l=(r+="").split("\n");for(n=0;n<l.length;n++)l[n].match(/\}/)&&e.depth--,e.currentResult+=e.indentsForDepth(e.depth),l[n].match(/\{/)&&e.depth++,e.currentResult+=l[n]+"\n";return e.currentResult;case"RegExp":return"/"+r.source+"/";case"Date":case"string":return e.depth>0||0===r.length?'"'+r+'"':r;case"boolean":return r?"true":"false";case"number":return r+""}},this.indentsForDepth=function(e){for(var t="",r=0;r<e;r++)t+="\t";return t},this.trimLog=function(e,t){var r=e.split("\n");return r.length>t&&(r=r.slice(r.length-t)),r.join("\n")},this.lines=function(){return e.output.split("\n").length},this.formatSessionDuration=function(e,t){var r=t-e,n=Math.floor(r/1e3/60/60),a=("0"+n).slice(-2);r-=1e3*n*60*60;var i=Math.floor(r/1e3/60),o=("0"+i).slice(-2);r-=1e3*i*60;var l=Math.floor(r/1e3);return r-=1e3*l,"---- Session duration: "+a+":"+o+":"+("0"+l).slice(-2)+" ----"},this.formatTimestamp=function(e){var t=e.getFullYear(),r=e.getDate();return"["+t+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+r+" "+Number(e.getHours())+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"]: "},this.objectSize=function(e){var t,r=0;for(t in e)e.hasOwnProperty(t)&&r++;return r},e.useLocalStorage){var t=window.localStorage.getItem("debugout.js");if(t){t=JSON.parse(t),e.output=t.log;var r=new Date(t.startTime),a=new Date(t.lastLog);e.output+="\n---- Session end: "+t.lastLog+" ----\n",e.output+=e.formatSessionDuration(r,a),e.output+="\n\n"}}e.output+="---- Session started: "+e.startTime+" ----\n\n"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,